{"version":3,"file":"react-pg.node.production.min.server.js","sources":["../../../../packages/react-pg/src/ReactPostgres.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Wakeable} from 'shared/ReactTypes';\n\nimport {unstable_getCacheForType} from 'react';\nimport {Pool as PostgresPool} from 'pg';\nimport {prepareValue} from 'pg/lib/utils';\n\nconst Pending = 0;\nconst Resolved = 1;\nconst Rejected = 2;\n\ntype PendingRecord = {|\n  status: 0,\n  value: Wakeable,\n|};\n\ntype ResolvedRecord = {|\n  status: 1,\n  value: mixed,\n|};\n\ntype RejectedRecord = {|\n  status: 2,\n  value: mixed,\n|};\n\ntype Record = PendingRecord | ResolvedRecord | RejectedRecord;\n\nfunction createRecordFromThenable(thenable): Record {\n  const record: Record = {\n    status: Pending,\n    value: thenable,\n  };\n  thenable.then(\n    value => {\n      if (record.status === Pending) {\n        const resolvedRecord = ((record: any): ResolvedRecord);\n        resolvedRecord.status = Resolved;\n        resolvedRecord.value = value;\n      }\n    },\n    err => {\n      if (record.status === Pending) {\n        const rejectedRecord = ((record: any): RejectedRecord);\n        rejectedRecord.status = Rejected;\n        rejectedRecord.value = err;\n      }\n    },\n  );\n  return record;\n}\n\nfunction readRecordValue(record: Record) {\n  if (record.status === Resolved) {\n    return record.value;\n  } else {\n    throw record.value;\n  }\n}\n\nexport function Pool(options: mixed) {\n  this.pool = new PostgresPool(options);\n  // Unique function per instance because it's used for cache identity.\n  this.createRecordMap = function() {\n    return new Map();\n  };\n}\n\ntype NestedMap = Map<any, Record | NestedMap>;\n\nPool.prototype.query = function(query: string, values?: Array<mixed>) {\n  const pool = this.pool;\n  const outerMap = unstable_getCacheForType(this.createRecordMap);\n\n  let innerMap: NestedMap = outerMap;\n  let key = query;\n  if (values != null) {\n    // If we have parameters, each becomes as a nesting layer for Maps.\n    // We want to find (or create as needed) the innermost Map, and return that.\n    for (let i = 0; i < values.length; i++) {\n      let nextMap = innerMap.get(key);\n      if (nextMap === undefined) {\n        nextMap = new Map();\n        innerMap.set(key, nextMap);\n      } else if (!(nextMap instanceof Map)) {\n        throw new Error(\n          'This query has received more parameters than the last time ' +\n            'the same query was used. Always pass the exact number of ' +\n            'parameters that the query needs.',\n        );\n      }\n      innerMap = nextMap;\n      // Postgres bindings convert everything to strings:\n      // https://node-postgres.com/features/queries#parameterized-query\n      // We reuse their algorithm instead of reimplementing.\n      key = prepareValue(values[i]);\n    }\n  }\n\n  let record = innerMap.get(key);\n  if (!record) {\n    const thenable = pool.query(query, values);\n    record = createRecordFromThenable(thenable);\n    innerMap.set(key, record);\n  } else if (record instanceof Map) {\n    throw new Error(\n      'This query has received fewer parameters than the last time ' +\n        'the same query was used. Always pass the exact number of ' +\n        'parameters that the query needs.',\n    );\n  }\n  const result = readRecordValue(record);\n  return result;\n};\n"],"names":["Pending","Resolved","Rejected","createRecordFromThenable","thenable","record","status","value","then","resolvedRecord","err","rejectedRecord","readRecordValue","Pool","options","pool","PostgresPool","createRecordMap","Map","prototype","query","values","outerMap","unstable_getCacheForType","innerMap","key","i","length","nextMap","get","undefined","set","Error","prepareValue","result"],"mappings":";;;;;;AAeA,MAAMA,OAAO,GAAG,CAAhB;AACA,MAAMC,QAAQ,GAAG,CAAjB;AACA,MAAMC,QAAQ,GAAG,CAAjB;;AAmBA,SAASC,wBAAT,CAAkCC,QAAlC,EAAoD;AAClD,QAAMC,MAAc,GAAG;AACrBC,IAAAA,MAAM,EAAEN,OADa;AAErBO,IAAAA,KAAK,EAAEH;AAFc,GAAvB;AAIAA,EAAAA,QAAQ,CAACI,IAAT,CACED,KAAK,IAAI;AACP,QAAIF,MAAM,CAACC,MAAP,KAAkBN,OAAtB,EAA+B;AAC7B,YAAMS,cAAc,GAAKJ,MAAzB;AACAI,MAAAA,cAAc,CAACH,MAAf,GAAwBL,QAAxB;AACAQ,MAAAA,cAAc,CAACF,KAAf,GAAuBA,KAAvB;AACD;AACF,GAPH,EAQEG,GAAG,IAAI;AACL,QAAIL,MAAM,CAACC,MAAP,KAAkBN,OAAtB,EAA+B;AAC7B,YAAMW,cAAc,GAAKN,MAAzB;AACAM,MAAAA,cAAc,CAACL,MAAf,GAAwBJ,QAAxB;AACAS,MAAAA,cAAc,CAACJ,KAAf,GAAuBG,GAAvB;AACD;AACF,GAdH;AAgBA,SAAOL,MAAP;AACD;;AAED,SAASO,eAAT,CAAyBP,MAAzB,EAAyC;AACvC,MAAIA,MAAM,CAACC,MAAP,KAAkBL,QAAtB,EAAgC;AAC9B,WAAOI,MAAM,CAACE,KAAd;AACD,GAFD,MAEO;AACL,UAAMF,MAAM,CAACE,KAAb;AACD;AACF;;AAEM,SAASM,IAAT,CAAcC,OAAd,EAA8B;AACnC,OAAKC,IAAL,GAAY,IAAIC,OAAJ,CAAiBF,OAAjB,CAAZ,CADmC;;AAGnC,OAAKG,eAAL,GAAuB,YAAW;AAChC,WAAO,IAAIC,GAAJ,EAAP;AACD,GAFD;AAGD;;AAIDL,IAAI,CAACM,SAAL,CAAeC,KAAf,GAAuB,UAASA,KAAT,EAAwBC,MAAxB,EAA+C;AACpE,QAAMN,IAAI,GAAG,KAAKA,IAAlB;AACA,QAAMO,QAAQ,GAAGC,8BAAwB,CAAC,KAAKN,eAAN,CAAzC;AAEA,MAAIO,QAAmB,GAAGF,QAA1B;AACA,MAAIG,GAAG,GAAGL,KAAV;;AACA,MAAIC,MAAM,IAAI,IAAd,EAAoB;AAClB;AACA;AACA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACM,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAIE,OAAO,GAAGJ,QAAQ,CAACK,GAAT,CAAaJ,GAAb,CAAd;;AACA,UAAIG,OAAO,KAAKE,SAAhB,EAA2B;AACzBF,QAAAA,OAAO,GAAG,IAAIV,GAAJ,EAAV;AACAM,QAAAA,QAAQ,CAACO,GAAT,CAAaN,GAAb,EAAkBG,OAAlB;AACD,OAHD,MAGO,IAAI,EAAEA,OAAO,YAAYV,GAArB,CAAJ,EAA+B;AACpC,cAAM,IAAIc,KAAJ,CACJ,gEACE,2DADF,GAEE,kCAHE,CAAN;AAKD;;AACDR,MAAAA,QAAQ,GAAGI,OAAX,CAZsC;AActC;AACA;;AACAH,MAAAA,GAAG,GAAGQ,kBAAY,CAACZ,MAAM,CAACK,CAAD,CAAP,CAAlB;AACD;AACF;;AAED,MAAIrB,MAAM,GAAGmB,QAAQ,CAACK,GAAT,CAAaJ,GAAb,CAAb;;AACA,MAAI,CAACpB,MAAL,EAAa;AACX,UAAMD,QAAQ,GAAGW,IAAI,CAACK,KAAL,CAAWA,KAAX,EAAkBC,MAAlB,CAAjB;AACAhB,IAAAA,MAAM,GAAGF,wBAAwB,CAACC,QAAD,CAAjC;AACAoB,IAAAA,QAAQ,CAACO,GAAT,CAAaN,GAAb,EAAkBpB,MAAlB;AACD,GAJD,MAIO,IAAIA,MAAM,YAAYa,GAAtB,EAA2B;AAChC,UAAM,IAAIc,KAAJ,CACJ,iEACE,2DADF,GAEE,kCAHE,CAAN;AAKD;;AACD,QAAME,MAAM,GAAGtB,eAAe,CAACP,MAAD,CAA9B;AACA,SAAO6B,MAAP;AACD,CA3CD;;;;"}