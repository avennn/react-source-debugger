{"version":3,"file":"react-reconciler.profiling.min.js","sources":["../../../../packages/shared/assign.js","../../../../packages/shared/formatProdErrorMessage.js","../../../../packages/shared/ReactInstanceMap.js","../../../../packages/shared/ReactSharedInternals.js","../../../../packages/shared/ReactFeatureFlags.js","../../../../packages/react-reconciler/src/ReactWorkTags.js","../../../../packages/shared/ReactSymbols.js","../../../../packages/shared/getComponentNameFromType.js","../../../../packages/react-reconciler/src/getComponentNameFromFiber.js","../../../../packages/react-reconciler/src/ReactFiberFlags.js","../../../../packages/react-reconciler/src/ReactFiberTreeReflection.js","../../../../packages/shared/isArray.js","../../../../packages/react-reconciler/src/forks/ReactFiberHostConfig.custom.js","../../../../packages/shared/ReactComponentStackFrame.js","../../../../packages/shared/hasOwnProperty.js","../../../../packages/shared/checkPropTypes.js","../../../../packages/react-reconciler/src/ReactFiberStack.old.js","../../../../packages/react-reconciler/src/ReactFiberContext.old.js","../../../../packages/react-reconciler/src/ReactRootTags.js","../../../../packages/react-reconciler/src/ReactTypeOfMode.js","../../../../packages/react-reconciler/src/clz32.js","../../../../packages/react-reconciler/src/ReactFiberLane.old.js","../../../../packages/react-reconciler/src/ReactEventPriorities.old.js","../../../../packages/react-reconciler/src/Scheduler.js","../../../../packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","../../../../packages/shared/objectIs.js","../../../../packages/react-reconciler/src/ReactFiberSyncTaskQueue.old.js","../../../../packages/react-reconciler/src/ReactFiberShellHydration.js","../../../../packages/react-reconciler/src/ReactFiberTreeContext.old.js","../../../../packages/react-reconciler/src/ReactFiberHydrationContext.old.js","../../../../packages/react-reconciler/src/ReactFiberTransition.js","../../../../packages/shared/shallowEqual.js","../../../../packages/react-reconciler/src/ReactFiberComponentStack.js","../../../../packages/react-reconciler/src/ReactCurrentFiber.js","../../../../packages/react-reconciler/src/ReactFiberLazyComponent.old.js","../../../../packages/react-reconciler/src/ReactFiberNewContext.old.js","../../../../packages/react-reconciler/src/ReactFiberConcurrentUpdates.old.js","../../../../packages/react-reconciler/src/ReactFiberClassUpdateQueue.old.js","../../../../packages/react-reconciler/src/ReactFiberClassComponent.old.js","../../../../packages/react-reconciler/src/ReactChildFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberHostContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","../../../../packages/react-reconciler/src/ReactHookEffectTags.js","../../../../packages/react-reconciler/src/ReactMutableSource.old.js","../../../../packages/react-reconciler/src/ReactFiberCacheComponent.old.js","../../../../packages/react-reconciler/src/ReactFiberHooks.old.js","../../../../packages/react-reconciler/src/ReactProfilerTimer.old.js","../../../../packages/react-reconciler/src/ReactCapturedValue.js","../../../../packages/react-reconciler/src/ReactFiberErrorDialog.js","../../../../packages/react-reconciler/src/ReactFiberErrorLogger.js","../../../../packages/react-reconciler/src/ReactFiberThrow.old.js","../../../../packages/react-reconciler/src/ReactFiberTransition.old.js","../../../../packages/react-reconciler/src/ReactFiberBeginWork.old.js","../../../../packages/react-reconciler/src/ReactFiberCompleteWork.old.js","../../../../packages/react-reconciler/src/ReactFiberUnwindWork.old.js","../../../../packages/react-reconciler/src/ReactFiberCommitWork.old.js","../../../../packages/react-reconciler/src/ReactTestSelectors.js","../../../../packages/react-reconciler/src/ReactFiberAct.old.js","../../../../packages/react-reconciler/src/ReactFiberWorkLoop.old.js","../../../../packages/react-reconciler/src/ReactFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberRoot.old.js","../../../../packages/shared/ReactVersion.js","../../../../packages/react-reconciler/src/ReactPortal.js","../../../../packages/react-reconciler/src/ReactFiberReconciler.old.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst assign = Object.assign;\n\nexport default assign;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// Do not require this module directly! Use normal `invariant` calls with\n// template literal strings. The messages will be replaced with error codes\n// during build.\n\nfunction formatProdErrorMessage(code) {\n  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\n  for (let i = 1; i < arguments.length; i++) {\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\n  }\n  return (\n    `Minified React error #${code}; visit ${url} for the full message or ` +\n    'use the non-minified dev environment for full errors and additional ' +\n    'helpful warnings.'\n  );\n}\n\nexport default formatProdErrorMessage;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\n// -----------------------------------------------------------------------------\n// Land or remove (zero effort)\n//\n// Flags that can likely be deleted or landed without consequences\n// -----------------------------------------------------------------------------\n\nexport const warnAboutDeprecatedLifecycles = true;\nexport const enableComponentStackLocations = true;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\n\n// -----------------------------------------------------------------------------\n// Land or remove (moderate effort)\n//\n// Flags that can be probably deleted or landed, but might require extra effort\n// like migrating internal callers or performance testing.\n// -----------------------------------------------------------------------------\n\n// This is blocked on adding a symbol polyfill to www.\nexport const enableSymbolFallbackForWWW = false;\n\n// This rolled out to 10% public in www, so we should be able to land, but some\n// internal tests need to be updated. The open source behavior is correct.\nexport const skipUnmountedBoundaries = true;\n\n// Destroy layout effects for components that are hidden because something\n// suspended in an update and recreate them when they are shown again (after the\n// suspended boundary has resolved). Note that this should be an uncommon use\n// case and can be avoided by using the transition API.\n//\n// TODO: Finish rolling out in www\nexport const enableSuspenseLayoutEffectSemantics = true;\n\n// TODO: Finish rolling out in www\nexport const enableClientRenderFallbackOnTextMismatch = true;\n\n// TODO: Need to review this code one more time before landing\nexport const enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay = true;\n\n// Recoil still uses useMutableSource in www, need to delete\nexport const enableUseMutableSource = false;\n\n// Not sure if www still uses this. We don't have a replacement but whatever we\n// replace it with will likely be different than what's already there, so we\n// probably should just delete it as long as nothing in www relies on it.\nexport const enableSchedulerDebugging = false;\n\n// Need to remove didTimeout argument from Scheduler before landing\nexport const disableSchedulerTimeoutInWorkLoop = false;\n\n// -----------------------------------------------------------------------------\n// Slated for removal in the future (significant effort)\n//\n// These are experiments that didn't work out, and never shipped, but we can't\n// delete from the codebase until we migrate internal callers.\n// -----------------------------------------------------------------------------\n\n// Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n//\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\n//\n// This will eventually be replaced by the Transition Tracing proposal.\nexport const enableSuspenseCallback = false;\n\n// Experimental Scope support.\nexport const enableScopeAPI = false;\n\n// Experimental Create Event Handle API.\nexport const enableCreateEventHandleAPI = false;\n\n// This controls whether you get the `.old` modules or the `.new` modules in\n// the react-reconciler package.\nexport const enableNewReconciler = false;\n\n// Support legacy Primer support on internal FB www\nexport const enableLegacyFBSupport = false;\n\n// -----------------------------------------------------------------------------\n// Ongoing experiments\n//\n// These are features that we're either actively exploring or are reasonably\n// likely to include in an upcoming release.\n// -----------------------------------------------------------------------------\n\nexport const enableCache = __EXPERIMENTAL__;\nexport const enableCacheElement = __EXPERIMENTAL__;\n\nexport const enableTransitionTracing = false;\n\n// No known bugs, but needs performance testing\nexport const enableLazyContextPropagation = false;\n\n// FB-only usage. The new API has different semantics.\nexport const enableLegacyHidden = false;\n\n// Enables unstable_avoidThisFallback feature in Fiber\nexport const enableSuspenseAvoidThisFallback = false;\n// Enables unstable_avoidThisFallback feature in Fizz\nexport const enableSuspenseAvoidThisFallbackFizz = false;\n\nexport const enableCPUSuspense = __EXPERIMENTAL__;\n\n// When a node is unmounted, recurse into the Fiber subtree and clean out\n// references. Each level cleans up more fiber fields than the previous level.\n// As far as we know, React itself doesn't leak, but because the Fiber contains\n// cycles, even a single leak in product code can cause us to retain large\n// amounts of memory.\n//\n// The long term plan is to remove the cycles, but in the meantime, we clear\n// additional fields to mitigate.\n//\n// It's an enum so that we can experiment with different levels of\n// aggressiveness.\nexport const deletedTreeCleanUpLevel = 3;\n\n// -----------------------------------------------------------------------------\n// Chopping Block\n//\n// Planned feature deprecations and breaking changes. Sorted roughly in order of\n// when we we plan to enable them.\n// -----------------------------------------------------------------------------\n\n// This flag enables Strict Effects by default. We're not turning this on until\n// after 18 because it requires migration work. Recommendation is to use\n// <StrictMode /> to gradually upgrade components.\n// If TRUE, trees rendered with createRoot will be StrictEffectsMode.\n// If FALSE, these trees will be StrictLegacyMode.\nexport const createRootStrictEffectsByDefault = false;\n\nexport const disableModulePatternComponents = false;\n\nexport const disableLegacyContext = false;\n\nexport const enableUseRefAccessWarning = false;\n\n// Enables time slicing for updates that aren't wrapped in startTransition.\nexport const enableSyncDefaultUpdates = true;\n\n// Adds an opt-in to time slicing for updates that aren't wrapped in\n// startTransition. Only relevant when enableSyncDefaultUpdates is disabled.\nexport const allowConcurrentByDefault = false;\n\n// Updates that occur in the render phase are not officially supported. But when\n// they do occur, we defer them to a subsequent render by picking a lane that's\n// not currently rendering. We treat them the same as if they came from an\n// interleaved event. Remove this flag once we have migrated to the\n// new behavior.\n// NOTE: Not sure if we'll end up doing this or not.\nexport const deferRenderPhaseUpdateToNextBatch = false;\n\n// -----------------------------------------------------------------------------\n// React DOM Chopping Block\n//\n// Similar to main Chopping Block but only flags related to React DOM. These are\n// grouped because we will likely batch all of them into a single major release.\n// -----------------------------------------------------------------------------\n\n// Disable support for comment nodes as React DOM containers. Already disabled\n// in open source, but www codebase still relies on it. Need to remove.\nexport const disableCommentsAsDOMContainers = true;\n\n// Disable javascript: URL strings in href for XSS protection.\nexport const disableJavaScriptURLs = false;\n\nexport const enableTrustedTypesIntegration = false;\n\n// Prevent the value and checked attributes from syncing with their related\n// DOM properties\nexport const disableInputAttributeSyncing = false;\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty\n// strings. This prevents e.g. <img src=\"\"> from making an unnecessary HTTP\n// request for certain browsers.\nexport const enableFilterEmptyStringAttributesDOM = false;\n\n// Changes the behavior for rendering custom elements in both server rendering\n// and client rendering, mostly to allow JSX attributes to apply to the custom\n// element's object properties instead of only HTML attributes.\n// https://github.com/facebook/react/issues/11347\nexport const enableCustomElementPropertySupport = __EXPERIMENTAL__;\n\n// Disables children for <textarea> elements\nexport const disableTextareaChildren = false;\n\n// -----------------------------------------------------------------------------\n// JSX Chopping Block\n//\n// Similar to main Chopping Block but only flags related to JSX. These are\n// grouped because we will likely batch all of them into a single major release.\n// -----------------------------------------------------------------------------\n\n// New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\n\n// Part of the simplification of React.createElement so we can eventually move\n// from React.createElement to React.jsx\n// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\nexport const warnAboutDefaultPropsOnFunctionComponents = false; // deprecate later, not 18.0\n\n// Enables a warning when trying to spread a 'key' to an element;\n// a deprecated pattern we want to get rid of in the future\nexport const warnAboutSpreadingKeyToJSX = false;\n\nexport const warnAboutStringRefs = false;\n\n// -----------------------------------------------------------------------------\n// Debugging and DevTools\n// -----------------------------------------------------------------------------\n\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental timeline tool.\nexport const enableSchedulingProfiler = __PROFILE__;\n\n// Helps identify side effects in render-phase lifecycle hooks and setState\n// reducers by double invoking them in StrictLegacyMode.\nexport const debugRenderPhaseSideEffectsForStrictMode = __DEV__;\n\n// Helps identify code that is not safe for planned Offscreen API and Suspense semantics;\n// this feature flag only impacts StrictEffectsMode.\nexport const enableStrictEffects = __DEV__;\n\n// To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = __DEV__;\n\n// Gather advanced timing metrics for Profiler subtrees.\nexport const enableProfilerTimer = __PROFILE__;\n\n// Record durations for commit and passive effects phases.\nexport const enableProfilerCommitHooks = __PROFILE__;\n\n// Phase param passed to onRender callback differentiates between an \"update\" and a \"cascading-update\".\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\n\n// Adds verbose console logging for e.g. state updates, suspense, and work loop\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\nexport const enableDebugTracing = false;\n\n// Track which Fiber(s) schedule render work.\nexport const enableUpdaterTracking = __PROFILE__;\n\n// Only enabled in RN, related to enableComponentStackLocations\nexport const disableNativeComponentFrames = false;\nexport const enableServerContext = __EXPERIMENTAL__;\n\n// Internal only.\nexport const enableGetInspectorDataForInstanceInProduction = false;\n\n// Profiler API accepts a function to be called when a nested update is scheduled.\n// This callback accepts the component type (class instance or function) the update is scheduled for.\nexport const enableProfilerNestedUpdateScheduledHook = false;\n\nexport const consoleManagedByDevToolsDuringStrictMode = true;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const ScopeComponent = 21;\nexport const OffscreenComponent = 22;\nexport const LegacyHiddenComponent = 23;\nexport const CacheComponent = 24;\nexport const TracingMarkerComponent = 25;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types.\nexport const REACT_ELEMENT_TYPE = Symbol.for('react.element');\nexport const REACT_PORTAL_TYPE = Symbol.for('react.portal');\nexport const REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nexport const REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nexport const REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nexport const REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nexport const REACT_CONTEXT_TYPE = Symbol.for('react.context');\nexport const REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');\nexport const REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nexport const REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nexport const REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nexport const REACT_MEMO_TYPE = Symbol.for('react.memo');\nexport const REACT_LAZY_TYPE = Symbol.for('react.lazy');\nexport const REACT_SCOPE_TYPE = Symbol.for('react.scope');\nexport const REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\n  'react.debug_trace_mode',\n);\nexport const REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nexport const REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nexport const REACT_CACHE_TYPE = Symbol.for('react.cache');\nexport const REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nexport const REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\n  'react.default_value',\n);\n\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n  REACT_SERVER_CONTEXT_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {\n  enableServerContext,\n  enableTransitionTracing,\n  enableCache,\n} from './ReactFeatureFlags';\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const displayName = (outerType: any).displayName;\n  if (displayName) {\n    return displayName;\n  }\n  const functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName;\n}\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\n// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\nexport default function getComponentNameFromType(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentNameFromType(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n    case REACT_CACHE_TYPE:\n      if (enableCache) {\n        return 'Cache';\n      }\n    // eslint-disable-next-line no-fallthrough\n    case REACT_TRACING_MARKER_TYPE:\n      if (enableTransitionTracing) {\n        return 'TracingMarker';\n      }\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        const outerName = (type: any).displayName || null;\n        if (outerName !== null) {\n          return outerName;\n        }\n        return getComponentNameFromType(type.type) || 'Memo';\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentNameFromType(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n      case REACT_SERVER_CONTEXT_TYPE:\n        if (enableServerContext) {\n          const context2 = ((type: any): ReactContext<any>);\n          return (context2.displayName || context2._globalName) + '.Provider';\n        }\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {enableLegacyHidden} from 'shared/ReactFeatureFlags';\n\nimport {\n  FunctionComponent,\n  ClassComponent,\n  IndeterminateComponent,\n  HostRoot,\n  HostPortal,\n  HostComponent,\n  HostText,\n  Fragment,\n  Mode,\n  ContextConsumer,\n  ContextProvider,\n  ForwardRef,\n  Profiler,\n  SuspenseComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  DehydratedFragment,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nexport default function getComponentNameFromFiber(fiber: Fiber): string | null {\n  const {tag, type} = fiber;\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n    case ContextConsumer:\n      const context: ReactContext<any> = (type: any);\n      return getContextName(context) + '.Consumer';\n    case ContextProvider:\n      const provider: ReactProviderType<any> = (type: any);\n      return getContextName(provider._context) + '.Provider';\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n    case Fragment:\n      return 'Fragment';\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n    case HostPortal:\n      return 'Portal';\n    case HostRoot:\n      return 'Root';\n    case HostText:\n      return 'Text';\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n      return 'Mode';\n    case OffscreenComponent:\n      return 'Offscreen';\n    case Profiler:\n      return 'Profiler';\n    case ScopeComponent:\n      return 'Scope';\n    case SuspenseComponent:\n      return 'Suspense';\n    case SuspenseListComponent:\n      return 'SuspenseList';\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    // The display name for this tags come from the user-provided type:\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return (type: any).displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      break;\n    case LegacyHiddenComponent:\n      if (enableLegacyHidden) {\n        return 'LegacyHidden';\n      }\n  }\n\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b00000000000000000000000000;\nexport const PerformedWork = /*                */ 0b00000000000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b00000000000000000000000010;\nexport const Update = /*                       */ 0b00000000000000000000000100;\nexport const Deletion = /*                     */ 0b00000000000000000000001000;\nexport const ChildDeletion = /*                */ 0b00000000000000000000010000;\nexport const ContentReset = /*                 */ 0b00000000000000000000100000;\nexport const Callback = /*                     */ 0b00000000000000000001000000;\nexport const DidCapture = /*                   */ 0b00000000000000000010000000;\nexport const ForceClientRender = /*            */ 0b00000000000000000100000000;\nexport const Ref = /*                          */ 0b00000000000000001000000000;\nexport const Snapshot = /*                     */ 0b00000000000000010000000000;\nexport const Passive = /*                      */ 0b00000000000000100000000000;\nexport const Hydrating = /*                    */ 0b00000000000001000000000000;\nexport const Visibility = /*                   */ 0b00000000000010000000000000;\nexport const StoreConsistency = /*             */ 0b00000000000100000000000000;\n\nexport const LifecycleEffectMask =\n  Passive | Update | Callback | Ref | Snapshot | StoreConsistency;\n\n// Union of all commit flags (flags with the lifetime of a particular commit)\nexport const HostEffectMask = /*               */ 0b00000000000111111111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b00000000001000000000000000;\nexport const ShouldCapture = /*                */ 0b00000000010000000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b00000000100000000000000000;\nexport const DidPropagateContext = /*          */ 0b00000001000000000000000000;\nexport const NeedsPropagation = /*             */ 0b00000010000000000000000000;\nexport const Forked = /*                       */ 0b00000100000000000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const RefStatic = /*                    */ 0b00001000000000000000000000;\nexport const LayoutStatic = /*                 */ 0b00010000000000000000000000;\nexport const PassiveStatic = /*                */ 0b00100000000000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b01000000000000000000000000;\nexport const MountPassiveDev = /*              */ 0b10000000000000000000000000;\n\n// Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nexport const BeforeMutationMask =\n  // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n  // flag logic (see #20043)\n  Update |\n  Snapshot |\n  (enableCreateEventHandleAPI\n    ? // createEventHandle needs to visit deleted and hidden trees to\n      // fire beforeblur\n      // TODO: Only need to visit Deletions during BeforeMutation phase if an\n      // element is focused.\n      ChildDeletion | Visibility\n    : 0);\n\nexport const MutationMask =\n  Placement |\n  Update |\n  ChildDeletion |\n  ContentReset |\n  Ref |\n  Hydrating |\n  Visibility;\nexport const LayoutMask = Update | Callback | Ref | Visibility;\n\n// TODO: Split into PassiveMountMask and PassiveUnmountMask\nexport const PassiveMask = Passive | ChildDeletion;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromFiber(ownerFiber) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw new Error(\n            'Child was not found in either parent set. This indicates a bug ' +\n              'in React related to the return pointer. Please file an issue.',\n          );\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw new Error(\n        \"Return fibers should always be each others' alternates. \" +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  if (a.tag !== HostRoot) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    const match = findCurrentHostFiberImpl(child);\n    if (match !== null) {\n      return match;\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberWithNoPortalsImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      const match = findCurrentHostFiberWithNoPortalsImpl(child);\n      if (match !== null) {\n        return match;\n      }\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\ndeclare function isArray(a: mixed): boolean %checks(Array.isArray(a));\n\nconst isArrayImpl = Array.isArray;\n\n// eslint-disable-next-line no-redeclare\nfunction isArray(a: mixed): boolean {\n  return isArrayImpl(a);\n}\n\nexport default isArray;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// This is a host config that's used for the `react-reconciler` package on npm.\n// It is only used by third-party renderers.\n//\n// Its API lets you pass the host config as an argument.\n// However, inside the `react-reconciler` we treat host config as a module.\n// This file is a shim between two worlds.\n//\n// It works because the `react-reconciler` bundle is wrapped in something like:\n//\n// module.exports = function ($$$config) {\n//   /* reconciler code */\n// }\n//\n// So `$$$config` looks like a global variable, but it's\n// really an argument to a top-level wrapping function.\n\ndeclare var $$$hostConfig: any;\nexport opaque type Type = mixed; // eslint-disable-line no-undef\nexport opaque type Props = mixed; // eslint-disable-line no-undef\nexport opaque type Container = mixed; // eslint-disable-line no-undef\nexport opaque type Instance = mixed; // eslint-disable-line no-undef\nexport opaque type TextInstance = mixed; // eslint-disable-line no-undef\nexport opaque type SuspenseInstance = mixed; // eslint-disable-line no-undef\nexport opaque type HydratableInstance = mixed; // eslint-disable-line no-undef\nexport opaque type PublicInstance = mixed; // eslint-disable-line no-undef\nexport opaque type HostContext = mixed; // eslint-disable-line no-undef\nexport opaque type UpdatePayload = mixed; // eslint-disable-line no-undef\nexport opaque type ChildSet = mixed; // eslint-disable-line no-undef\nexport opaque type TimeoutHandle = mixed; // eslint-disable-line no-undef\nexport opaque type NoTimeout = mixed; // eslint-disable-line no-undef\nexport opaque type RendererInspectionConfig = mixed; // eslint-disable-line no-undef\nexport type EventResponder = any;\n\nexport const getPublicInstance = $$$hostConfig.getPublicInstance;\nexport const getRootHostContext = $$$hostConfig.getRootHostContext;\nexport const getChildHostContext = $$$hostConfig.getChildHostContext;\nexport const prepareForCommit = $$$hostConfig.prepareForCommit;\nexport const resetAfterCommit = $$$hostConfig.resetAfterCommit;\nexport const createInstance = $$$hostConfig.createInstance;\nexport const appendInitialChild = $$$hostConfig.appendInitialChild;\nexport const finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;\nexport const prepareUpdate = $$$hostConfig.prepareUpdate;\nexport const shouldSetTextContent = $$$hostConfig.shouldSetTextContent;\nexport const createTextInstance = $$$hostConfig.createTextInstance;\nexport const scheduleTimeout = $$$hostConfig.scheduleTimeout;\nexport const cancelTimeout = $$$hostConfig.cancelTimeout;\nexport const noTimeout = $$$hostConfig.noTimeout;\nexport const isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;\nexport const warnsIfNotActing = $$$hostConfig.warnsIfNotActing;\nexport const supportsMutation = $$$hostConfig.supportsMutation;\nexport const supportsPersistence = $$$hostConfig.supportsPersistence;\nexport const supportsHydration = $$$hostConfig.supportsHydration;\nexport const getInstanceFromNode = $$$hostConfig.getInstanceFromNode;\nexport const beforeActiveInstanceBlur = $$$hostConfig.beforeActiveInstanceBlur;\nexport const afterActiveInstanceBlur = $$$hostConfig.afterActiveInstanceBlur;\nexport const preparePortalMount = $$$hostConfig.preparePortalMount;\nexport const prepareScopeUpdate = $$$hostConfig.prepareScopeUpdate;\nexport const getInstanceFromScope = $$$hostConfig.getInstanceFromScope;\nexport const getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;\nexport const detachDeletedInstance = $$$hostConfig.detachDeletedInstance;\n\n// -------------------\n//      Microtasks\n//     (optional)\n// -------------------\nexport const supportsMicrotasks = $$$hostConfig.supportsMicrotasks;\nexport const scheduleMicrotask = $$$hostConfig.scheduleMicrotask;\n\n// -------------------\n//      Test selectors\n//     (optional)\n// -------------------\nexport const supportsTestSelectors = $$$hostConfig.supportsTestSelectors;\nexport const findFiberRoot = $$$hostConfig.findFiberRoot;\nexport const getBoundingRect = $$$hostConfig.getBoundingRect;\nexport const getTextContent = $$$hostConfig.getTextContent;\nexport const isHiddenSubtree = $$$hostConfig.isHiddenSubtree;\nexport const matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;\nexport const setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;\nexport const setupIntersectionObserver =\n  $$$hostConfig.setupIntersectionObserver;\n\n// -------------------\n//      Mutation\n//     (optional)\n// -------------------\nexport const appendChild = $$$hostConfig.appendChild;\nexport const appendChildToContainer = $$$hostConfig.appendChildToContainer;\nexport const commitTextUpdate = $$$hostConfig.commitTextUpdate;\nexport const commitMount = $$$hostConfig.commitMount;\nexport const commitUpdate = $$$hostConfig.commitUpdate;\nexport const insertBefore = $$$hostConfig.insertBefore;\nexport const insertInContainerBefore = $$$hostConfig.insertInContainerBefore;\nexport const removeChild = $$$hostConfig.removeChild;\nexport const removeChildFromContainer = $$$hostConfig.removeChildFromContainer;\nexport const resetTextContent = $$$hostConfig.resetTextContent;\nexport const hideInstance = $$$hostConfig.hideInstance;\nexport const hideTextInstance = $$$hostConfig.hideTextInstance;\nexport const unhideInstance = $$$hostConfig.unhideInstance;\nexport const unhideTextInstance = $$$hostConfig.unhideTextInstance;\nexport const clearContainer = $$$hostConfig.clearContainer;\n\n// -------------------\n//     Persistence\n//     (optional)\n// -------------------\nexport const cloneInstance = $$$hostConfig.cloneInstance;\nexport const createContainerChildSet = $$$hostConfig.createContainerChildSet;\nexport const appendChildToContainerChildSet =\n  $$$hostConfig.appendChildToContainerChildSet;\nexport const finalizeContainerChildren =\n  $$$hostConfig.finalizeContainerChildren;\nexport const replaceContainerChildren = $$$hostConfig.replaceContainerChildren;\nexport const cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;\nexport const cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance;\n\n// -------------------\n//     Hydration\n//     (optional)\n// -------------------\nexport const canHydrateInstance = $$$hostConfig.canHydrateInstance;\nexport const canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;\nexport const canHydrateSuspenseInstance =\n  $$$hostConfig.canHydrateSuspenseInstance;\nexport const isSuspenseInstancePending =\n  $$$hostConfig.isSuspenseInstancePending;\nexport const isSuspenseInstanceFallback =\n  $$$hostConfig.isSuspenseInstanceFallback;\nexport const getSuspenseInstanceFallbackErrorDetails =\n  $$$hostConfig.getSuspenseInstanceFallbackErrorDetails;\nexport const registerSuspenseInstanceRetry =\n  $$$hostConfig.registerSuspenseInstanceRetry;\nexport const getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;\nexport const getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;\nexport const getFirstHydratableChildWithinContainer =\n  $$$hostConfig.getFirstHydratableChildWithinContainer;\nexport const getFirstHydratableChildWithinSuspenseInstance =\n  $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;\nexport const hydrateInstance = $$$hostConfig.hydrateInstance;\nexport const hydrateTextInstance = $$$hostConfig.hydrateTextInstance;\nexport const hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;\nexport const getNextHydratableInstanceAfterSuspenseInstance =\n  $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;\nexport const commitHydratedContainer = $$$hostConfig.commitHydratedContainer;\nexport const commitHydratedSuspenseInstance =\n  $$$hostConfig.commitHydratedSuspenseInstance;\nexport const clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;\nexport const clearSuspenseBoundaryFromContainer =\n  $$$hostConfig.clearSuspenseBoundaryFromContainer;\nexport const shouldDeleteUnhydratedTailInstances =\n  $$$hostConfig.shouldDeleteUnhydratedTailInstances;\nexport const didNotMatchHydratedContainerTextInstance =\n  $$$hostConfig.didNotMatchHydratedContainerTextInstance;\nexport const didNotMatchHydratedTextInstance =\n  $$$hostConfig.didNotMatchHydratedTextInstance;\nexport const didNotHydrateInstanceWithinContainer =\n  $$$hostConfig.didNotHydrateInstanceWithinContainer;\nexport const didNotHydrateInstanceWithinSuspenseInstance =\n  $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;\nexport const didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;\nexport const didNotFindHydratableInstanceWithinContainer =\n  $$$hostConfig.didNotFindHydratableInstanceWithinContainer;\nexport const didNotFindHydratableTextInstanceWithinContainer =\n  $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;\nexport const didNotFindHydratableSuspenseInstanceWithinContainer =\n  $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;\nexport const didNotFindHydratableInstanceWithinSuspenseInstance =\n  $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;\nexport const didNotFindHydratableTextInstanceWithinSuspenseInstance =\n  $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;\nexport const didNotFindHydratableSuspenseInstanceWithinSuspenseInstance =\n  $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;\nexport const didNotFindHydratableInstance =\n  $$$hostConfig.didNotFindHydratableInstance;\nexport const didNotFindHydratableTextInstance =\n  $$$hostConfig.didNotFindHydratableTextInstance;\nexport const didNotFindHydratableSuspenseInstance =\n  $$$hostConfig.didNotFindHydratableSuspenseInstance;\nexport const errorHydratingContainer = $$$hostConfig.errorHydratingContainer;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  enableComponentStackLocations,\n  disableNativeComponentFrames,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (disableNativeComponentFrames || !fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                let frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n                if (fn.displayName && frame.includes('<anonymous>')) {\n                  frame = frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw new Error(\n        'Unexpected context found on stack. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error(\n          `${getComponentNameFromFiber(fiber) ||\n            'Unknown'}.getChildContext(): key \"${contextKey}\" is not defined in childContextTypes.`,\n        );\n      }\n    }\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw new Error(\n        'Expected to have an instance by this point. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n      throw new Error(\n        'Expected subtree parent to be a mounted class component. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n\n    throw new Error(\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1;\n\nexport const LegacyRoot = 0;\nexport const ConcurrentRoot = 1;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = /*                         */ 0b000000;\n// TODO: Remove ConcurrentMode by reading from the root tag instead\nexport const ConcurrentMode = /*                 */ 0b000001;\nexport const ProfileMode = /*                    */ 0b000010;\nexport const DebugTracingMode = /*               */ 0b000100;\nexport const StrictLegacyMode = /*               */ 0b001000;\nexport const StrictEffectsMode = /*              */ 0b010000;\nexport const ConcurrentUpdatesByDefaultMode = /* */ 0b100000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\n\nexport const clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(x: number): number {\n  const asUint = x >>> 0;\n  if (asUint === 0) {\n    return 32;\n  }\n  return (31 - ((log(asUint) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\n// TODO: Ideally these types would be opaque but that doesn't work well with\n// our reconciler fork infra, since these leak into non-reconciler packages.\n\nexport type Lanes = number;\nexport type Lane = number;\nexport type LaneMap<T> = Array<T>;\n\nimport {\n  enableSchedulingProfiler,\n  enableUpdaterTracking,\n  allowConcurrentByDefault,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {ConcurrentUpdatesByDefaultMode, NoMode} from './ReactTypeOfMode';\nimport {clz32} from './clz32';\n\n// Lane values below should be kept in sync with getLabelForLane(), used by react-devtools-timeline.\n// If those values are changed that package should be rebuilt and redeployed.\n\nexport const TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\n\nexport const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000010;\nexport const InputContinuousLane: Lane = /*             */ 0b0000000000000000000000000000100;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000001000;\nexport const DefaultLane: Lane = /*                     */ 0b0000000000000000000000000010000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000000100000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111111000000;\nconst TransitionLane1: Lane = /*                        */ 0b0000000000000000000000001000000;\nconst TransitionLane2: Lane = /*                        */ 0b0000000000000000000000010000000;\nconst TransitionLane3: Lane = /*                        */ 0b0000000000000000000000100000000;\nconst TransitionLane4: Lane = /*                        */ 0b0000000000000000000001000000000;\nconst TransitionLane5: Lane = /*                        */ 0b0000000000000000000010000000000;\nconst TransitionLane6: Lane = /*                        */ 0b0000000000000000000100000000000;\nconst TransitionLane7: Lane = /*                        */ 0b0000000000000000001000000000000;\nconst TransitionLane8: Lane = /*                        */ 0b0000000000000000010000000000000;\nconst TransitionLane9: Lane = /*                        */ 0b0000000000000000100000000000000;\nconst TransitionLane10: Lane = /*                       */ 0b0000000000000001000000000000000;\nconst TransitionLane11: Lane = /*                       */ 0b0000000000000010000000000000000;\nconst TransitionLane12: Lane = /*                       */ 0b0000000000000100000000000000000;\nconst TransitionLane13: Lane = /*                       */ 0b0000000000001000000000000000000;\nconst TransitionLane14: Lane = /*                       */ 0b0000000000010000000000000000000;\nconst TransitionLane15: Lane = /*                       */ 0b0000000000100000000000000000000;\nconst TransitionLane16: Lane = /*                       */ 0b0000000001000000000000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000111110000000000000000000000;\nconst RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;\nconst RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;\nconst RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;\nconst RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;\nconst RetryLane5: Lane = /*                             */ 0b0000100000000000000000000000000;\n\nexport const SomeRetryLane: Lane = RetryLane1;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0001000000000000000000000000000;\n\nconst NonIdleLanes: Lanes = /*                          */ 0b0001111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0010000000000000000000000000000;\nexport const IdleLane: Lane = /*                        */ 0b0100000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\n// This function is used for the experimental timeline (react-devtools-timeline)\n// It should be kept in sync with the Lanes values above.\nexport function getLabelForLane(lane: Lane): string | void {\n  if (enableSchedulingProfiler) {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\n\nexport const NoTimestamp = -1;\n\nlet nextTransitionLane: Lane = TransitionLane1;\nlet nextRetryLane: Lane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n    case InputContinuousLane:\n      return InputContinuousLane;\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n    case DefaultLane:\n      return DefaultLane;\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n    case IdleLane:\n      return IdleLane;\n    case OffscreenLane:\n      return OffscreenLane;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n      return lanes;\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n  const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n  if (nonIdlePendingLanes !== NoLanes) {\n    const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    const unblockedLanes = pendingLanes & ~suspendedLanes;\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    const nextLane = getHighestPriorityLane(nextLanes);\n    const wipLane = getHighestPriorityLane(wipLanes);\n    if (\n      // Tests whether the next lane is equal or lower priority than the wip\n      // one. This works because the bits decrease in priority as you go left.\n      nextLane >= wipLane ||\n      // Default priority updates should not interrupt transition updates. The\n      // only difference between default updates and transition updates is that\n      // default updates do not support refresh transitions.\n      (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\n    ) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Do nothing, use the lanes as they were assigned.\n  } else if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function includesSyncLane(lanes: Lanes) {\n  return (lanes & SyncLane) !== NoLanes;\n}\n\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyNonUrgentLanes(lanes: Lanes) {\n  const UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n  return (lanes & UrgentLanes) === NoLanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\nexport function includesBlockingLane(root: FiberRoot, lanes: Lanes) {\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Concurrent updates by default always use time slicing.\n    return false;\n  }\n  const SyncDefaultLanes =\n    InputContinuousHydrationLane |\n    InputContinuousLane |\n    DefaultHydrationLane |\n    DefaultLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\n\nexport function includesExpiredLane(root: FiberRoot, lanes: Lanes) {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\n\nexport function isTransitionLane(lane: Lane) {\n  return (lane & TransitionLanes) !== NoLanes;\n}\n\nexport function claimNextTransitionLane(): Lane {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  const lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n    nextTransitionLane = TransitionLane1;\n  }\n  return lane;\n}\n\nexport function claimNextRetryLane(): Lane {\n  const lane = nextRetryLane;\n  nextRetryLane <<= 1;\n  if ((nextRetryLane & RetryLanes) === NoLanes) {\n    nextRetryLane = RetryLane1;\n  }\n  return lane;\n}\n\nexport function getHighestPriorityLane(lanes: Lanes): Lane {\n  return lanes & -lanes;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\nexport function intersectLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a & b;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n  return laneMap;\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = NoLanes;\n  root.pingedLanes = NoLanes;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n\n  const rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n  const entanglements = root.entanglements;\n  let lanes = rootEntangledLanes;\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    if (\n      // Is this one of the newly entangled lanes?\n      (lane & entangledLanes) |\n      // Is this lane transitively entangled with the newly entangled lanes?\n      (entanglements[index] & entangledLanes)\n    ) {\n      entanglements[index] |= entangledLanes;\n    }\n    lanes &= ~lane;\n  }\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  const renderLane = getHighestPriorityLane(renderLanes);\n\n  let lane;\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nexport function addFiberToLanesMap(\n  root: FiberRoot,\n  fiber: Fiber,\n  lanes: Lanes | Lane,\n) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n\n    lanes &= ~lane;\n  }\n}\n\nexport function movePendingFibersToMemoized(root: FiberRoot, lanes: Lanes) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  const memoizedUpdaters = root.memoizedUpdaters;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    if (updaters.size > 0) {\n      updaters.forEach(fiber => {\n        const alternate = fiber.alternate;\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nexport function addTransitionToLanesMap(\n  root: FiberRoot,\n  transition: Transition,\n  lane: Lane,\n) {\n  if (enableTransitionTracing) {\n    const transitionLanesMap = root.transitionLanes;\n    const index = laneToIndex(lane);\n    let transitions = transitionLanesMap[index];\n    if (transitions === null) {\n      transitions = [];\n    }\n    transitions.push(transition);\n\n    transitionLanesMap[index] = transitions;\n  }\n}\n\nexport function getTransitionsForLanes(\n  root: FiberRoot,\n  lanes: Lane | Lanes,\n): Array<Transition> | null {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  const transitionsForLanes = [];\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      transitions.forEach(transition => {\n        transitionsForLanes.push(transition);\n      });\n    }\n\n    lanes &= ~lane;\n  }\n\n  if (transitionsForLanes.length === 0) {\n    return null;\n  }\n\n  return transitionsForLanes;\n}\n\nexport function clearTransitionsForLanes(root: FiberRoot, lanes: Lane | Lanes) {\n  if (!enableTransitionTracing) {\n    return;\n  }\n\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      root.transitionLanes[index] = null;\n    }\n\n    lanes &= ~lane;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  SyncLane,\n  InputContinuousLane,\n  DefaultLane,\n  IdleLane,\n  getHighestPriorityLane,\n  includesNonIdleWork,\n} from './ReactFiberLane.old';\n\nexport opaque type EventPriority = Lane;\n\nexport const DiscreteEventPriority: EventPriority = SyncLane;\nexport const ContinuousEventPriority: EventPriority = InputContinuousLane;\nexport const DefaultEventPriority: EventPriority = DefaultLane;\nexport const IdleEventPriority: EventPriority = IdleLane;\n\nlet currentUpdatePriority: EventPriority = NoLane;\n\nexport function getCurrentUpdatePriority(): EventPriority {\n  return currentUpdatePriority;\n}\n\nexport function setCurrentUpdatePriority(newPriority: EventPriority) {\n  currentUpdatePriority = newPriority;\n}\n\nexport function runWithPriority<T>(priority: EventPriority, fn: () => T): T {\n  const previousPriority = currentUpdatePriority;\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\n\nexport function higherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a !== 0 && a < b ? a : b;\n}\n\nexport function lowerEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a === 0 || a > b ? a : b;\n}\n\nexport function isHigherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): boolean {\n  return a !== 0 && a < b;\n}\n\nexport function lanesToEventPriority(lanes: Lanes): EventPriority {\n  const lane = getHighestPriorityLane(lanes);\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n  return IdleEventPriority;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// This module only exists as an ESM wrapper around the external CommonJS\n// Scheduler dependency. Notice that we're intentionally not using named imports\n// because Rollup would use dynamic dispatch for CommonJS interop named imports.\n// When we switch to ESM, we can delete this module.\nimport * as Scheduler from 'scheduler';\n\nexport const scheduleCallback = Scheduler.unstable_scheduleCallback;\nexport const cancelCallback = Scheduler.unstable_cancelCallback;\nexport const shouldYield = Scheduler.unstable_shouldYield;\nexport const requestPaint = Scheduler.unstable_requestPaint;\nexport const now = Scheduler.unstable_now;\nexport const getCurrentPriorityLevel =\n  Scheduler.unstable_getCurrentPriorityLevel;\nexport const ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nexport const UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nexport const NormalPriority = Scheduler.unstable_NormalPriority;\nexport const LowPriority = Scheduler.unstable_LowPriority;\nexport const IdlePriority = Scheduler.unstable_IdlePriority;\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nexport const unstable_yieldValue = Scheduler.unstable_yieldValue;\nexport const unstable_setDisableYieldValue =\n  Scheduler.unstable_setDisableYieldValue;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {EventPriority} from './ReactEventPriorities.old';\n// import type {DevToolsProfilingHooks} from 'react-devtools-shared/src/backend/types';\n// TODO: This import doesn't work because the DevTools depend on the DOM version of React\n// and to properly type check against DOM React we can't also type check again non-DOM\n// React which this hook might be in.\ntype DevToolsProfilingHooks = any;\n\nimport {\n  getLabelForLane,\n  TotalLanes,\n} from 'react-reconciler/src/ReactFiberLane.old';\nimport {DidCapture} from './ReactFiberFlags';\nimport {\n  consoleManagedByDevToolsDuringStrictMode,\n  enableProfilerTimer,\n  enableSchedulingProfiler,\n} from 'shared/ReactFeatureFlags';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n} from './ReactEventPriorities.old';\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n  unstable_yieldValue,\n  unstable_setDisableYieldValue,\n} from './Scheduler';\nimport {setSuppressWarning} from 'shared/consoleWithStackDev';\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet injectedProfilingHooks: DevToolsProfilingHooks | null = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    if (enableSchedulingProfiler) {\n      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n      // This gives DevTools a way to feature detect that isn't tied to version number\n      // (since profiling and timeline are controlled by different feature flags).\n      internals = {\n        ...internals,\n        getLaneLabelMap,\n        injectProfilingHooks,\n      };\n    }\n\n    rendererID = hook.inject(internals);\n\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(root: FiberRoot, eventPriority: EventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        let schedulerPriority;\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediateSchedulerPriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingSchedulerPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriority = IdleSchedulerPriority;\n            break;\n          default:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n        }\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          schedulerPriority,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onPostCommitRoot(root: FiberRoot) {\n  if (\n    injectedHook &&\n    typeof injectedHook.onPostCommitFiberRoot === 'function'\n  ) {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function setIsStrictModeForDevtools(newIsStrictMode: boolean) {\n  if (consoleManagedByDevToolsDuringStrictMode) {\n    if (typeof unstable_yieldValue === 'function') {\n      // We're in a test because Scheduler.unstable_yieldValue only exists\n      // in SchedulerMock. To reduce the noise in strict mode tests,\n      // suppress warnings and disable scheduler yielding during the double render\n      unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n\n    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n      try {\n        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n      } catch (err) {\n        if (__DEV__) {\n          if (!hasLoggedError) {\n            hasLoggedError = true;\n            console.error(\n              'React instrumentation encountered an error: %s',\n              err,\n            );\n          }\n        }\n      }\n    }\n  } else {\n    if (newIsStrictMode) {\n      disableLogs();\n    } else {\n      reenableLogs();\n    }\n  }\n}\n\n// Profiler API hooks\n\nfunction injectProfilingHooks(profilingHooks: DevToolsProfilingHooks): void {\n  injectedProfilingHooks = profilingHooks;\n}\n\nfunction getLaneLabelMap(): Map<Lane, string> | null {\n  if (enableSchedulingProfiler) {\n    const map: Map<Lane, string> = new Map();\n\n    let lane = 1;\n    for (let index = 0; index < TotalLanes; index++) {\n      const label = ((getLabelForLane(lane): any): string);\n      map.set(lane, label);\n      lane *= 2;\n    }\n\n    return map;\n  } else {\n    return null;\n  }\n}\n\nexport function markCommitStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStarted === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStarted(lanes);\n    }\n  }\n}\n\nexport function markCommitStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStopped === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStopped();\n    }\n  }\n}\n\nexport function markComponentRenderStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentErrored(\n  fiber: Fiber,\n  thrownValue: mixed,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentErrored === 'function'\n    ) {\n      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n    }\n  }\n}\n\nexport function markComponentSuspended(\n  fiber: Fiber,\n  wakeable: Wakeable,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentSuspended === 'function'\n    ) {\n      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStopped();\n    }\n  }\n}\n\nexport function markPassiveEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markPassiveEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStopped();\n    }\n  }\n}\n\nexport function markRenderStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStarted(lanes);\n    }\n  }\n}\n\nexport function markRenderYielded(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderYielded === 'function'\n    ) {\n      injectedProfilingHooks.markRenderYielded();\n    }\n  }\n}\n\nexport function markRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStopped();\n    }\n  }\n}\n\nexport function markRenderScheduled(lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markRenderScheduled(lane);\n    }\n  }\n}\n\nexport function markForceUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markForceUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n    }\n  }\n}\n\nexport function markStateUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markStateUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {SchedulerCallback} from './Scheduler';\n\nimport {\n  DiscreteEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n} from './ReactEventPriorities.old';\nimport {ImmediatePriority, scheduleCallback} from './Scheduler';\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet includesLegacySyncCallbacks: boolean = false;\nlet isFlushingSyncQueue: boolean = false;\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\n\nexport function scheduleLegacySyncCallback(callback: SchedulerCallback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\n\nexport function flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\n\nexport function flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    const previousUpdatePriority = getCurrentUpdatePriority();\n    try {\n      const isSync = true;\n      const queue = syncQueue;\n      // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n      setCurrentUpdatePriority(DiscreteEventPriority);\n      for (; i < queue.length; i++) {\n        let callback = queue[i];\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      }\n      // Resume flushing in the next tick\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootState} from './ReactFiberRoot.new';\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nexport function isRootDehydrated(root: FiberRoot) {\n  const currentState: RootState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Ids are base 32 strings whose binary representation corresponds to the\n// position of a node in a tree.\n\n// Every time the tree forks into multiple children, we add additional bits to\n// the left of the sequence that represent the position of the child within the\n// current level of children.\n//\n//      00101       00010001011010101\n//      ╰─┬─╯       ╰───────┬───────╯\n//   Fork 5 of 20       Parent id\n//\n// The leading 0s are important. In the above example, you only need 3 bits to\n// represent slot 5. However, you need 5 bits to represent all the forks at\n// the current level, so we must account for the empty bits at the end.\n//\n// For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n// the zeroth id at a level would be indistinguishable from its parent.\n//\n// If a node has only one child, and does not materialize an id (i.e. does not\n// contain a useId hook), then we don't need to allocate any space in the\n// sequence. It's treated as a transparent indirection. For example, these two\n// trees produce the same ids:\n//\n// <>                          <>\n//   <Indirection>               <A />\n//     <A />                     <B />\n//   </Indirection>            </>\n//   <B />\n// </>\n//\n// However, we cannot skip any node that materializes an id. Otherwise, a parent\n// id that does not fork would be indistinguishable from its child id. For\n// example, this tree does not fork, but the parent and child must have\n// different ids.\n//\n// <Parent>\n//   <Child />\n// </Parent>\n//\n// To handle this scenario, every time we materialize an id, we allocate a\n// new level with a single slot. You can think of this as a fork with only one\n// prong, or an array of children with length 1.\n//\n// It's possible for the size of the sequence to exceed 32 bits, the max\n// size for bitwise operations. When this happens, we make more room by\n// converting the right part of the id to a string and storing it in an overflow\n// variable. We use a base 32 string representation, because 32 is the largest\n// power of 2 that is supported by toString(). We want the base to be large so\n// that the resulting ids are compact, and we want the base to be a power of 2\n// because every log2(base) bits corresponds to a single character, i.e. every\n// log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n// affecting the final result.\n\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {clz32} from './clz32';\nimport {Forked, NoFlags} from './ReactFiberFlags';\n\nexport type TreeContext = {\n  id: number,\n  overflow: string,\n};\n\n// TODO: Use the unified fiber stack module instead of this local one?\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\nconst forkStack: Array<any> = [];\nlet forkStackIndex: number = 0;\nlet treeForkProvider: Fiber | null = null;\nlet treeForkCount: number = 0;\n\nconst idStack: Array<any> = [];\nlet idStackIndex: number = 0;\nlet treeContextProvider: Fiber | null = null;\nlet treeContextId: number = 1;\nlet treeContextOverflow: string = '';\n\nexport function isForkedChild(workInProgress: Fiber): boolean {\n  warnIfNotHydrating();\n  return (workInProgress.flags & Forked) !== NoFlags;\n}\n\nexport function getForksAtLevel(workInProgress: Fiber): number {\n  warnIfNotHydrating();\n  return treeForkCount;\n}\n\nexport function getTreeId(): string {\n  const overflow = treeContextOverflow;\n  const idWithLeadingBit = treeContextId;\n  const id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\n\nexport function pushTreeFork(\n  workInProgress: Fiber,\n  totalChildren: number,\n): void {\n  // This is called right after we reconcile an array (or iterator) of child\n  // fibers, because that's the only place where we know how many children in\n  // the whole set without doing extra work later, or storing addtional\n  // information on the fiber.\n  //\n  // That's why this function is separate from pushTreeId — it's called during\n  // the render phase of the fork parent, not the child, which is where we push\n  // the other context values.\n  //\n  // In the Fizz implementation this is much simpler because the child is\n  // rendered in the same callstack as the parent.\n  //\n  // It might be better to just add a `forks` field to the Fiber type. It would\n  // make this module simpler.\n\n  warnIfNotHydrating();\n\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\n\nexport function pushTreeId(\n  workInProgress: Fiber,\n  totalChildren: number,\n  index: number,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextProvider = workInProgress;\n\n  const baseIdWithLeadingBit = treeContextId;\n  const baseOverflow = treeContextOverflow;\n\n  // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n  const baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  const baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n\n  const slot = index + 1;\n  const length = getBitLength(totalChildren) + baseLength;\n\n  // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    const numberOfOverflowBits = baseLength - (baseLength % 5);\n\n    // Then create a bitmask that selects only those bits.\n    const newOverflowBits = (1 << numberOfOverflowBits) - 1;\n\n    // Select the bits, and convert them to a base 32 string.\n    const newOverflow = (baseId & newOverflowBits).toString(32);\n\n    // Now we can remove those bits from the base id.\n    const restOfBaseId = baseId >> numberOfOverflowBits;\n    const restOfBaseLength = baseLength - numberOfOverflowBits;\n\n    // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n    const restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    const restOfNewBits = slot << restOfBaseLength;\n    const id = restOfNewBits | restOfBaseId;\n    const overflow = newOverflow + baseOverflow;\n\n    treeContextId = (1 << restOfLength) | id;\n    treeContextOverflow = overflow;\n  } else {\n    // Normal path\n    const newBits = slot << baseLength;\n    const id = newBits | baseId;\n    const overflow = baseOverflow;\n\n    treeContextId = (1 << length) | id;\n    treeContextOverflow = overflow;\n  }\n}\n\nexport function pushMaterializedTreeId(workInProgress: Fiber) {\n  warnIfNotHydrating();\n\n  // This component materialized an id. This will affect any ids that appear\n  // in its children.\n  const returnFiber = workInProgress.return;\n  if (returnFiber !== null) {\n    const numberOfForks = 1;\n    const slotIndex = 0;\n    pushTreeFork(workInProgress, numberOfForks);\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\n  }\n}\n\nfunction getBitLength(number: number): number {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id: number) {\n  return 1 << (getBitLength(id) - 1);\n}\n\nexport function popTreeContext(workInProgress: Fiber) {\n  // Restore the previous values.\n\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\n\nexport function getSuspendedTreeContext(): TreeContext | null {\n  warnIfNotHydrating();\n  if (treeContextProvider !== null) {\n    return {\n      id: treeContextId,\n      overflow: treeContextOverflow,\n    };\n  } else {\n    return null;\n  }\n}\n\nexport function restoreSuspendedTreeContext(\n  workInProgress: Fiber,\n  suspendedContext: TreeContext,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextId = suspendedContext.id;\n  treeContextOverflow = suspendedContext.overflow;\n  treeContextProvider = workInProgress;\n}\n\nfunction warnIfNotHydrating() {\n  if (__DEV__) {\n    if (!getIsHydrating()) {\n      console.error(\n        'Expected to be hydrating. This is a bug in React. Please file ' +\n          'an issue.',\n      );\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport {NoMode, ConcurrentMode} from './ReactTypeOfMode';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {TreeContext} from './ReactFiberTreeContext.old';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {\n  ChildDeletion,\n  Placement,\n  Hydrating,\n  NoFlags,\n  DidCapture,\n} from './ReactFiberFlags';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  getFirstHydratableChildWithinContainer,\n  getFirstHydratableChildWithinSuspenseInstance,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  shouldDeleteUnhydratedTailInstances,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateInstanceWithinContainer,\n  didNotHydrateInstanceWithinSuspenseInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableInstanceWithinContainer,\n  didNotFindHydratableTextInstanceWithinContainer,\n  didNotFindHydratableSuspenseInstanceWithinContainer,\n  didNotFindHydratableInstanceWithinSuspenseInstance,\n  didNotFindHydratableTextInstanceWithinSuspenseInstance,\n  didNotFindHydratableSuspenseInstanceWithinSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {OffscreenLane} from './ReactFiberLane.old';\nimport {\n  getSuspendedTreeContext,\n  restoreSuspendedTreeContext,\n} from './ReactFiberTreeContext.old';\nimport {queueRecoverableErrors} from './ReactFiberWorkLoop.old';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\n// This flag allows for warning supression when we expect there to be mismatches\n// due to earlier mismatches or a suspended fiber.\nlet didSuspendOrErrorDEV: boolean = false;\n\n// Hydration errors that were thrown inside this boundary\nlet hydrationErrors: Array<CapturedValue<mixed>> | null = null;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nexport function markDidThrowWhileHydratingDEV() {\n  if (__DEV__) {\n    didSuspendOrErrorDEV = true;\n  }\n}\n\nexport function didSuspendOrErrorWhileHydratingDEV() {\n  if (__DEV__) {\n    return didSuspendOrErrorDEV;\n  }\n  return false;\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance: Container = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChildWithinContainer(\n    parentInstance,\n  );\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n  treeContext: TreeContext | null,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(\n    suspenseInstance,\n  );\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n  return true;\n}\n\nfunction warnUnhydratedInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        didNotHydrateInstanceWithinContainer(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      }\n      case HostComponent: {\n        const isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n          // TODO: Delete this argument when we remove the legacy root API.\n          isConcurrentMode,\n        );\n        break;\n      }\n      case SuspenseComponent: {\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\n        if (suspenseState.dehydrated !== null)\n          didNotHydrateInstanceWithinSuspenseInstance(\n            suspenseState.dehydrated,\n            instance,\n          );\n        break;\n      }\n    }\n  }\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  warnUnhydratedInstance(returnFiber, instance);\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n\n  const deletions = returnFiber.deletions;\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction warnNonhydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  if (__DEV__) {\n    if (didSuspendOrErrorDEV) {\n      // Inside a boundary that already suspended. We're currently rendering the\n      // siblings of a suspended node. The mismatch may be due to the missing\n      // data, so it's probably a false positive.\n      return;\n    }\n\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstanceWithinContainer(\n              parentContainer,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstanceWithinContainer(\n              parentContainer,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstanceWithinContainer(\n              parentContainer,\n            );\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent: {\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            const isConcurrentMode =\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n              // TODO: Delete this argument when we remove the legacy root API.\n              isConcurrentMode,\n            );\n            break;\n          }\n          case HostText: {\n            const text = fiber.pendingProps;\n            const isConcurrentMode =\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n              // TODO: Delete this argument when we remove the legacy root API.\n              isConcurrentMode,\n            );\n            break;\n          }\n          case SuspenseComponent: {\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n          }\n        }\n        break;\n      }\n      case SuspenseComponent: {\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\n        const parentInstance = suspenseState.dehydrated;\n        if (parentInstance !== null)\n          switch (fiber.tag) {\n            case HostComponent:\n              const type = fiber.type;\n              const props = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinSuspenseInstance(\n                parentInstance,\n                type,\n                props,\n              );\n              break;\n            case HostText:\n              const text = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinSuspenseInstance(\n                parentInstance,\n                text,\n              );\n              break;\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(\n                parentInstance,\n              );\n              break;\n          }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  warnNonhydratedInstance(returnFiber, fiber);\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        hydrationParentFiber = fiber;\n        nextHydratableInstance = getFirstHydratableChild(instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        hydrationParentFiber = fiber;\n        // Text Instances don't have children so there's nothing to hydrate.\n        nextHydratableInstance = null;\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n        nextInstance,\n      );\n      if (suspenseInstance !== null) {\n        const suspenseState: SuspenseState = {\n          dehydrated: suspenseInstance,\n          treeContext: getSuspendedTreeContext(),\n          retryLane: OffscreenLane,\n        };\n        fiber.memoizedState = suspenseState;\n        // Store the dehydrated fragment as a child fiber.\n        // This simplifies the code for getHostSibling and deleting nodes,\n        // since it doesn't have to consider all Suspense boundaries and\n        // check if they're dehydrated ones or not.\n        const dehydratedFragment = createFiberFromDehydratedFragment(\n          suspenseInstance,\n        );\n        dehydratedFragment.return = fiber;\n        fiber.child = dehydratedFragment;\n        hydrationParentFiber = fiber;\n        // While a Suspense Instance does have children, we won't step into\n        // it during the first pass. Instead, we'll reenter it later.\n        nextHydratableInstance = null;\n        return true;\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction shouldClientRenderOnMismatch(fiber: Fiber) {\n  return (\n    (fiber.mode & ConcurrentMode) !== NoMode &&\n    (fiber.flags & DidCapture) === NoFlags\n  );\n}\n\nfunction throwOnHydrationMismatch(fiber: Fiber) {\n  throw new Error(\n    'Hydration failed because the initial UI does not match what was ' +\n      'rendered on the server.',\n  );\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\n      throwOnHydrationMismatch(fiber);\n    }\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\n      throwOnHydrationMismatch(fiber);\n    }\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    const prevHydrationParentFiber: Fiber = (hydrationParentFiber: any);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n  }\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n    shouldWarnIfMismatchDev,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  const shouldUpdate = hydrateTextInstance(\n    textInstance,\n    textContent,\n    fiber,\n    shouldWarnIfMismatchDev,\n  );\n  if (shouldUpdate) {\n    // We assume that prepareToHydrateHostTextInstance is called in a context where the\n    // hydration parent is the parent host component of this host text.\n    const returnFiber = hydrationParentFiber;\n    if (returnFiber !== null) {\n      switch (returnFiber.tag) {\n        case HostRoot: {\n          const parentContainer = returnFiber.stateNode.containerInfo;\n          const isConcurrentMode =\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotMatchHydratedContainerTextInstance(\n            parentContainer,\n            textInstance,\n            textContent,\n            // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode,\n          );\n          break;\n        }\n        case HostComponent: {\n          const parentType = returnFiber.type;\n          const parentProps = returnFiber.memoizedProps;\n          const parentInstance = returnFiber.stateNode;\n          const isConcurrentMode =\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotMatchHydratedTextInstance(\n            parentType,\n            parentProps,\n            parentInstance,\n            textInstance,\n            textContent,\n            // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode,\n          );\n          break;\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n  if (\n    fiber.tag !== HostRoot &&\n    (fiber.tag !== HostComponent ||\n      (shouldDeleteUnhydratedTailInstances(fiber.type) &&\n        !shouldSetTextContent(fiber.type, fiber.memoizedProps)))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    if (nextInstance) {\n      if (shouldClientRenderOnMismatch(fiber)) {\n        warnIfUnhydratedTailNodes(fiber);\n        throwOnHydrationMismatch(fiber);\n      } else {\n        while (nextInstance) {\n          deleteHydratableInstance(fiber, nextInstance);\n          nextInstance = getNextHydratableSibling(nextInstance);\n        }\n      }\n    }\n  }\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction hasUnhydratedTailNodes() {\n  return isHydrating && nextHydratableInstance !== null;\n}\n\nfunction warnIfUnhydratedTailNodes(fiber: Fiber) {\n  let nextInstance = nextHydratableInstance;\n  while (nextInstance) {\n    warnUnhydratedInstance(fiber, nextInstance);\n    nextInstance = getNextHydratableSibling(nextInstance);\n  }\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n  didSuspendOrErrorDEV = false;\n}\n\nexport function upgradeHydrationErrorsToRecoverable(): void {\n  if (hydrationErrors !== null) {\n    // Successfully completed a forced client render. The errors that occurred\n    // during the hydration attempt are now recovered. We will log them in\n    // commit phase, once the entire tree has finished.\n    queueRecoverableErrors(hydrationErrors);\n    hydrationErrors = null;\n  }\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport function queueHydrationError(error: CapturedValue<mixed>): void {\n  if (hydrationErrors === null) {\n    hydrationErrors = [error];\n  } else {\n    hydrationErrors.push(error);\n  }\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  hasUnhydratedTailNodes,\n  warnIfUnhydratedTailNodes,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.new';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = null;\n\nexport function requestCurrentTransition(): Transition | null {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\nimport hasOwnProperty from './hasOwnProperty';\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    const currentKey = keysA[i];\n    if (\n      !hasOwnProperty.call(objB, currentKey) ||\n      !is(objA[currentKey], objB[currentKey])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber | null) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack =\n      fiber === null ? null : getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function getCurrentFiber(): Fiber | null {\n  if (__DEV__) {\n    return current;\n  }\n  return null;\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport assign from 'shared/assign';\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\nimport type {\n  Fiber,\n  ContextDependency,\n  Dependencies,\n} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SharedQueue} from './ReactFiberClassUpdateQueue.old';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  NoFlags,\n  DidPropagateContext,\n  NeedsPropagation,\n} from './ReactFiberFlags';\n\nimport is from 'shared/objectIs';\nimport {createUpdate, ForceUpdate} from './ReactFiberClassUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  enableLazyContextPropagation,\n  enableServerContext,\n} from 'shared/ReactFeatureFlags';\nimport {REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED} from 'shared/ReactSymbols';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastFullyObservedContext: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(\n  providerFiber: Fiber,\n  context: ReactContext<T>,\n  nextValue: T,\n): void {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(\n  context: ReactContext<any>,\n  providerFiber: Fiber,\n): void {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n  if (isPrimaryRenderer) {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue = context._defaultValue;\n    } else {\n      context._currentValue = currentValue;\n    }\n  } else {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue2 = context._defaultValue;\n    } else {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\n\nexport function scheduleContextWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n  propagationRoot: Fiber,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated.\n      // Normally, this would mean that the rest of the\n      // ancestor path already has sufficient priority.\n      // However, this is not necessarily true inside offscreen\n      // or fallback trees because childLanes may be inconsistent\n      // with the surroundings. This is why we continue the loop.\n    }\n    if (node === propagationRoot) {\n      break;\n    }\n    node = node.return;\n  }\n  if (__DEV__) {\n    if (node !== propagationRoot) {\n      console.error(\n        'Expected to find the propagation root when scheduling context work. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n\nexport function propagateContextChange<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  if (enableLazyContextPropagation) {\n    // TODO: This path is only used by Cache components. Update\n    // lazilyPropagateParentContextChanges to look for Cache components so they\n    // can take advantage of lazy propagation.\n    const forcePropagateEntireTree = true;\n    propagateContextChanges(\n      workInProgress,\n      [context],\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  } else {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  // Only used by eager implementation\n  if (enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n\n            // Inlined `enqueueUpdate` to remove interleaved update check\n            const updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n              // Only occurs if the fiber has been unmounted.\n            } else {\n              const sharedQueue: SharedQueue<any> = (updateQueue: any).shared;\n              const pending = sharedQueue.pending;\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleContextWorkOnParentPath(\n            fiber.return,\n            renderLanes,\n            workInProgress,\n          );\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nfunction propagateContextChanges<T>(\n  workInProgress: Fiber,\n  contexts: Array<any>,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n): void {\n  // Only used by lazy implementation\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dep = list.firstContext;\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context: ReactContext<T> = contexts[i];\n          // Check if the context matches.\n          // TODO: Compare selected values to bail out early.\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleContextWorkOnParentPath(\n              consumer.return,\n              renderLanes,\n              workInProgress,\n            );\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            }\n\n            // Since we already found a match, we can stop traversing the\n            // dependency list.\n            break findChangedDep;\n          }\n        }\n        dep = dependency.next;\n      }\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\nexport function propagateParentContextChangesToDeferredTree(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\nfunction propagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n) {\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n\n  // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n  let contexts = null;\n  let parent = workInProgress;\n  let isInsidePropagationBailout = false;\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n\n      if (currentParent === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      const oldProps = currentParent.memoizedProps;\n      if (oldProps !== null) {\n        const providerType: ReactProviderType<any> = parent.type;\n        const context: ReactContext<any> = providerType._context;\n\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    }\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(\n      workInProgress,\n      contexts,\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  }\n\n  // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them —\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred — that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(currentDependencies: Dependencies) {\n  if (!enableLazyContextPropagation) {\n    return false;\n  }\n  // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n  let dependency = currentDependencies.firstContext;\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer\n      ? context._currentValue\n      : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n    dependency = dependency.next;\n  }\n  return false;\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    if (enableLazyContextPropagation) {\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    } else {\n      const firstContext = dependencies.firstContext;\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        }\n        // Reset the work-in-progress list\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\n\nexport function readContext<T>(context: ReactContext<T>): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  const value = isPrimaryRenderer\n    ? context._currentValue\n    : context._currentValue2;\n\n  if (lastFullyObservedContext === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else {\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      memoizedValue: value,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error(\n          'Context can only be read while React is rendering. ' +\n            'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n            'In function components, you can read it directly in the function body, but not ' +\n            'inside Hooks like useReducer() or useMemo().',\n        );\n      }\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n      };\n      if (enableLazyContextPropagation) {\n        currentlyRenderingFiber.flags |= NeedsPropagation;\n      }\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  UpdateQueue as HookQueue,\n  Update as HookUpdate,\n} from './ReactFiberHooks.old';\nimport type {\n  SharedQueue as ClassQueue,\n  Update as ClassUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport type {Lane} from './ReactFiberLane.old';\n\nimport {warnAboutUpdateOnNotYetMountedFiberInDEV} from './ReactFiberWorkLoop.old';\nimport {mergeLanes} from './ReactFiberLane.old';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\nimport {HostRoot} from './ReactWorkTags';\n\n// An array of all update queues that received updates during the current\n// render. When this render exits, either because it finishes or because it is\n// interrupted, the interleaved updates will be transferred onto the main part\n// of the queue.\nlet concurrentQueues: Array<\n  HookQueue<any, any> | ClassQueue<any>,\n> | null = null;\n\nexport function pushConcurrentUpdateQueue(\n  queue: HookQueue<any, any> | ClassQueue<any>,\n) {\n  if (concurrentQueues === null) {\n    concurrentQueues = [queue];\n  } else {\n    concurrentQueues.push(queue);\n  }\n}\n\nexport function finishQueueingConcurrentUpdates() {\n  // Transfer the interleaved updates onto the main queue. Each queue has a\n  // `pending` field and an `interleaved` field. When they are not null, they\n  // point to the last node in a circular linked list. We need to append the\n  // interleaved list to the end of the pending list by joining them into a\n  // single, circular list.\n  if (concurrentQueues !== null) {\n    for (let i = 0; i < concurrentQueues.length; i++) {\n      const queue = concurrentQueues[i];\n      const lastInterleavedUpdate = queue.interleaved;\n      if (lastInterleavedUpdate !== null) {\n        queue.interleaved = null;\n        const firstInterleavedUpdate = lastInterleavedUpdate.next;\n        const lastPendingUpdate = queue.pending;\n        if (lastPendingUpdate !== null) {\n          const firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = (firstInterleavedUpdate: any);\n          lastInterleavedUpdate.next = (firstPendingUpdate: any);\n        }\n        queue.pending = (lastInterleavedUpdate: any);\n      }\n    }\n    concurrentQueues = null;\n  }\n}\n\nexport function enqueueConcurrentHookUpdate<S, A>(\n  fiber: Fiber,\n  queue: HookQueue<S, A>,\n  update: HookUpdate<S, A>,\n  lane: Lane,\n) {\n  const interleaved = queue.interleaved;\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n    // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n  queue.interleaved = update;\n\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\n\nexport function enqueueConcurrentHookUpdateAndEagerlyBailout<S, A>(\n  fiber: Fiber,\n  queue: HookQueue<S, A>,\n  update: HookUpdate<S, A>,\n  lane: Lane,\n): void {\n  const interleaved = queue.interleaved;\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n    // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n  queue.interleaved = update;\n}\n\nexport function enqueueConcurrentClassUpdate<State>(\n  fiber: Fiber,\n  queue: ClassQueue<State>,\n  update: ClassUpdate<State>,\n  lane: Lane,\n) {\n  const interleaved = queue.interleaved;\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n    // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n  queue.interleaved = update;\n\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\n\nexport function enqueueConcurrentRenderForLane(fiber: Fiber, lane: Lane) {\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\n\n// Calling this function outside this module should only be done for backwards\n// compatibility and should always be accompanied by a warning.\nexport const unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;\n\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  if (__DEV__) {\n    if (\n      alternate === null &&\n      (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n  // Walk the parent path to the root and update the child lanes.\n  let node = sourceFiber;\n  let parent = sourceFiber.return;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      if (__DEV__) {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    node = parent;\n    parent = parent.return;\n  }\n  if (node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  NoLanes,\n  isSubsetOfLanes,\n  mergeLanes,\n  isTransitionLane,\n  intersectLanes,\n  markRootEntangled,\n} from './ReactFiberLane.old';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {Callback, ShouldCapture, DidCapture} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  markSkippedUpdateLanes,\n  isUnsafeClassRenderPhaseUpdate,\n} from './ReactFiberWorkLoop.old';\nimport {\n  enqueueConcurrentClassUpdate,\n  unsafe_markUpdateLaneFromFiberToRoot,\n} from './ReactFiberConcurrentUpdates.old';\nimport {setIsStrictModeForDevtools} from './ReactFiberDevToolsHook.old';\n\nimport assign from 'shared/assign';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\nexport type SharedQueue<State> = {|\n  pending: Update<State> | null,\n  interleaved: Update<State> | null,\n  lanes: Lanes,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  effects: Array<Update<State>> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n    },\n    effects: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(\n  fiber: Fiber,\n  update: Update<State>,\n  lane: Lane,\n): FiberRoot | null {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return null;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n\n  if (isUnsafeClassRenderPhaseUpdate(fiber)) {\n    // This is an unsafe render phase update. Add directly to the update\n    // queue so we can process it immediately during the current render.\n    const pending = sharedQueue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    sharedQueue.pending = update;\n\n    // Update the childLanes even though we're most likely already rendering\n    // this fiber. This is for backwards compatibility in the case where you\n    // update a different component during render phase than the one that is\n    // currently renderings (a pattern that is accompanied by a warning).\n    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n  } else {\n    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n  }\n}\n\nexport function entangleTransitions(root: FiberRoot, fiber: Fiber, lane: Lane) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<mixed> = (updateQueue: any).shared;\n  if (isTransitionLane(lane)) {\n    let queueLanes = sharedQueue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      const updateLane = update.lane;\n      const updateEventTime = update.eventTime;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (\n          callback !== null &&\n          // If the update was already committed, we should not queue its\n          // callback again.\n          update.lane !== NoLane\n        ) {\n          workInProgress.flags |= Callback;\n          const effects = queue.effects;\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    // Interleaved updates are stored on a separate queue. We aren't going to\n    // process them during this render, but we do need to track which lanes\n    // are remaining.\n    const lastInterleaved = queue.shared.interleaved;\n    if (lastInterleaved !== null) {\n      let interleaved = lastInterleaved;\n      do {\n        newLanes = mergeLanes(newLanes, interleaved.lane);\n        interleaved = ((interleaved: any).next: Update<State>);\n      } while (interleaved !== lastInterleaved);\n    } else if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    }\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (typeof callback !== 'function') {\n    throw new Error(\n      'Invalid argument passed as callback. Expected a function. Instead ' +\n        `received: ${callback}`,\n    );\n  }\n\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function commitUpdateQueue<State>(\n  finishedWork: Fiber,\n  finishedQueue: UpdateQueue<State>,\n  instance: any,\n): void {\n  // Commit the effects\n  const effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n  if (effects !== null) {\n    for (let i = 0; i < effects.length; i++) {\n      const effect = effects[i];\n      const callback = effect.callback;\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport * as React from 'react';\nimport {\n  LayoutStatic,\n  MountLayoutDev,\n  Update,\n  Snapshot,\n} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport assign from 'shared/assign';\nimport isArray from 'shared/isArray';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  DebugTracingMode,\n  NoMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  entangleTransitions,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactFiberClassUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook.old';\n\nconst fakeInternalInstance = {};\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentNameFromType(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      throw new Error(\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n  let partialState = getDerivedStateFromProps(nextProps, prevState);\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    let shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(\n            newProps,\n            newState,\n            nextContext,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentNameFromType(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentNameFromType(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentNameFromType(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentNameFromType(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentNameFromType(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  let instance = new ctor(props, context);\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentNameFromType(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentNameFromFiber(workInProgress) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentNameFromFiber(workInProgress) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    let fiberFlags: Flags = Update;\n    if (enableSuspenseLayoutEffectSemantics) {\n      fiberFlags |= LayoutStatic;\n    }\n    if (\n      __DEV__ &&\n      enableStrictEffects &&\n      (workInProgress.mode & StrictEffectsMode) !== NoMode\n    ) {\n      fiberFlags |= MountLayoutDev;\n    }\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing() &&\n    !(\n      enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies)\n    )\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    ) ||\n    // TODO: In some cases, we'll end up checking if context has changed twice,\n    // both before and after `shouldComponentUpdate` has been called. Not ideal,\n    // but I'm loath to refactor this function. This only happens for memoized\n    // components so it's not that common.\n    (enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies));\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {Placement, ChildDeletion, Forked} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\nimport {ClassComponent, HostText, HostPortal, Fragment} from './ReactWorkTags';\nimport isArray from 'shared/isArray';\nimport {warnAboutStringRefs} from 'shared/ReactFeatureFlags';\nimport {checkPropStringCoercion} from 'shared/CheckStringCoercion';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {pushTreeFork} from './ReactFiberTreeContext.old';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n\n    if (typeof child._store !== 'object') {\n      throw new Error(\n        'React Component in warnForMissingKey should have a _store. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    child._store.validated = true;\n\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName =\n          getComponentNameFromFiber(returnFiber) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n\n        if (ownerFiber.tag !== ClassComponent) {\n          throw new Error(\n            'Function components cannot have string refs. ' +\n              'We recommend using useRef() instead. ' +\n              'Learn more about using refs safely here: ' +\n              'https://reactjs.org/link/strict-mode-string-ref',\n          );\n        }\n\n        inst = ownerFiber.stateNode;\n      }\n\n      if (!inst) {\n        throw new Error(\n          `Missing owner for string ref ${mixedRef}. This error is likely caused by a ` +\n            'bug in React. Please file an issue.',\n        );\n      }\n      // Assigning this to a const so Flow knows it won't change in the closure\n      const resolvedInst = inst;\n\n      if (__DEV__) {\n        checkPropStringCoercion(mixedRef, 'ref');\n      }\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = resolvedInst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = resolvedInst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      if (typeof mixedRef !== 'string') {\n        throw new Error(\n          'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n        );\n      }\n\n      if (!element._owner) {\n        throw new Error(\n          `Element ref was specified as a string (${mixedRef}) but no owner was set. This could happen for one of` +\n            ' the following reasons:\\n' +\n            '1. You may be adding a ref to a function component\\n' +\n            \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n            '3. You have multiple copies of React loaded\\n' +\n            'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        );\n      }\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  const childString = Object.prototype.toString.call(newChild);\n\n  throw new Error(\n    `Objects are not valid as a React child (found: ${\n      childString === '[object Object]'\n        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n        : childString\n    }). ` +\n      'If you meant to render a collection of children, use an array ' +\n      'instead.',\n  );\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  const payload = lazyType._payload;\n  const init = lazyType._init;\n  return init(payload);\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const elementType = element.type;\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(\n        returnFiber,\n        current,\n        element.props.children,\n        lanes,\n        element.key,\n      );\n    }\n    if (current !== null) {\n      if (\n        current.elementType === elementType ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__\n          ? isCompatibleFamilyForHotReloading(current, element)\n          : false) ||\n        // Lazy types should reconcile their resolved type.\n        // We need to do this after the Hot Reloading check above,\n        // because hot reloading has different semantics than prod because\n        // it doesn't resuspend. So we can't let the call below suspend.\n        (typeof elementType === 'object' &&\n          elementType !== null &&\n          elementType.$$typeof === REACT_LAZY_TYPE &&\n          resolveLazy(elementType) === current.type)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return createChild(returnFiber, init(payload), lanes);\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return updateFromMap(\n            existingChildren,\n            returnFiber,\n            newIdx,\n            init(payload),\n            lanes,\n          );\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          const payload = child._payload;\n          const init = (child._init: any);\n          warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n          break;\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw new Error(\n        'An object is not an iterable. This error is likely caused by a bug in ' +\n          'React. Please file an issue.',\n      );\n    }\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        const elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        } else {\n          if (\n            child.elementType === elementType ||\n            // Keep this check inline so it only runs on the false path:\n            (__DEV__\n              ? isCompatibleFamilyForHotReloading(child, element)\n              : false) ||\n            // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            (typeof elementType === 'object' &&\n              elementType !== null &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              resolveLazy(elementType) === child.type)\n          ) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props);\n            existing.ref = coerceRef(returnFiber, child, element);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          // TODO: This function is supposed to be non-recursive.\n          return reconcileChildFibers(\n            returnFiber,\n            currentFirstChild,\n            init(payload),\n            lanes,\n          );\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw new Error('Resuming work not yet implemented.');\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  if (c === NO_CONTEXT) {\n    throw new Error(\n      'Expected host context to exist. This error is likely caused by a bug ' +\n        'in React. Please file an issue.',\n    );\n  }\n\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\n// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// Subtree Flags:\n\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\n\n// Shallow Flags:\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function addSubtreeSuspenseContext(\n  parentContext: SuspenseContext,\n  subtreeContext: SubtreeSuspenseContext,\n): SuspenseContext {\n  return parentContext | subtreeContext;\n}\n\nexport function pushSuspenseContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {TreeContext} from './ReactFiberTreeContext.old';\n\nimport {enableSuspenseAvoidThisFallback} from 'shared/ReactFeatureFlags';\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n  unstable_name?: string,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  treeContext: null | TreeContext,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n|};\n\nexport function shouldCaptureSuspense(\n  workInProgress: Fiber,\n  hasInvisibleParent: boolean,\n): boolean {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  const nextState: SuspenseState | null = workInProgress.memoizedState;\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n    return false;\n  }\n  const props = workInProgress.memoizedProps;\n  // Regular boundaries always capture.\n  if (\n    !enableSuspenseAvoidThisFallback ||\n    props.unstable_avoidThisFallback !== true\n  ) {\n    return true;\n  }\n  // If it's a boundary we should avoid, then we prefer to bubble up to the\n  // parent boundary if it is currently invisible.\n  if (hasInvisibleParent) {\n    return false;\n  }\n  // If the parent is not able to handle it, we must handle it.\n  return true;\n}\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*   */ 0b0000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b0001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Insertion = /*  */ 0b0010;\nexport const Layout = /*    */ 0b0100;\nexport const Passive = /*   */ 0b1000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\n\nimport {enableCache} from 'shared/ReactFeatureFlags';\nimport {REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\n\nimport {pushProvider, popProvider} from './ReactFiberNewContext.old';\nimport * as Scheduler from 'scheduler';\n\n// In environments without AbortController (e.g. tests)\n// replace it with a lightweight shim that only has the features we use.\nconst AbortControllerLocal = enableCache\n  ? typeof AbortController !== 'undefined'\n    ? AbortController\n    : (function AbortControllerShim() {\n        const listeners = [];\n        const signal = (this.signal = {\n          aborted: false,\n          addEventListener: (type, listener) => {\n            listeners.push(listener);\n          },\n        });\n\n        this.abort = () => {\n          signal.aborted = true;\n          listeners.forEach(listener => listener());\n        };\n      }: AbortController)\n  : (null: any);\n\nexport type Cache = {|\n  controller: AbortControllerLocal,\n  data: Map<() => mixed, mixed>,\n  refCount: number,\n|};\n\nexport type CacheComponentState = {|\n  +parent: Cache,\n  +cache: Cache,\n|};\n\nexport type SpawnedCachePool = {|\n  +parent: Cache,\n  +pool: Cache,\n|};\n\n// Intentionally not named imports because Rollup would\n// use dynamic dispatch for CommonJS interop named imports.\nconst {\n  unstable_scheduleCallback: scheduleCallback,\n  unstable_NormalPriority: NormalPriority,\n} = Scheduler;\n\nexport const CacheContext: ReactContext<Cache> = enableCache\n  ? {\n      $$typeof: REACT_CONTEXT_TYPE,\n      // We don't use Consumer/Provider for Cache components. So we'll cheat.\n      Consumer: (null: any),\n      Provider: (null: any),\n      // We'll initialize these at the root.\n      _currentValue: (null: any),\n      _currentValue2: (null: any),\n      _threadCount: 0,\n      _defaultValue: (null: any),\n      _globalName: (null: any),\n    }\n  : (null: any);\n\nif (__DEV__ && enableCache) {\n  CacheContext._currentRenderer = null;\n  CacheContext._currentRenderer2 = null;\n}\n\n// Creates a new empty Cache instance with a ref-count of 0. The caller is responsible\n// for retaining the cache once it is in use (retainCache), and releasing the cache\n// once it is no longer needed (releaseCache).\nexport function createCache(): Cache {\n  if (!enableCache) {\n    return (null: any);\n  }\n  const cache: Cache = {\n    controller: new AbortControllerLocal(),\n    data: new Map(),\n    refCount: 0,\n  };\n\n  return cache;\n}\n\nexport function retainCache(cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  if (__DEV__) {\n    if (cache.controller.signal.aborted) {\n      console.warn(\n        'A cache instance was retained after it was already freed. ' +\n          'This likely indicates a bug in React.',\n      );\n    }\n  }\n  cache.refCount++;\n}\n\n// Cleanup a cache instance, potentially freeing it if there are no more references\nexport function releaseCache(cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  cache.refCount--;\n  if (__DEV__) {\n    if (cache.refCount < 0) {\n      console.warn(\n        'A cache instance was released after it was already freed. ' +\n          'This likely indicates a bug in React.',\n      );\n    }\n  }\n  if (cache.refCount === 0) {\n    scheduleCallback(NormalPriority, () => {\n      cache.controller.abort();\n    });\n  }\n}\n\nexport function pushCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  pushProvider(workInProgress, CacheContext, cache);\n}\n\nexport function popCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  popProvider(CacheContext, workInProgress);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n  StartTransitionOptions,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher, HookType} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  enableCache,\n  enableUseRefAccessWarning,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n  enableUseMutableSource,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  SyncLane,\n  NoLanes,\n  isSubsetOfLanes,\n  includesBlockingLane,\n  includesOnlyNonUrgentLanes,\n  claimNextTransitionLane,\n  mergeLanes,\n  removeLanes,\n  intersectLanes,\n  isTransitionLane,\n  markRootEntangled,\n  markRootMutableRead,\n  NoTimestamp,\n} from './ReactFiberLane.old';\nimport {\n  ContinuousEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  higherEventPriority,\n} from './ReactEventPriorities.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {HostRoot, CacheComponent} from './ReactWorkTags';\nimport {\n  LayoutStatic as LayoutStaticEffect,\n  MountLayoutDev as MountLayoutDevEffect,\n  MountPassiveDev as MountPassiveDevEffect,\n  Passive as PassiveEffect,\n  PassiveStatic as PassiveStaticEffect,\n  StaticMask as StaticMaskEffect,\n  Update as UpdateEffect,\n  StoreConsistency,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n  Insertion as HookInsertion,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  markSkippedUpdateLanes,\n} from './ReactFiberWorkLoop.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport is from 'shared/objectIs';\nimport isArray from 'shared/isArray';\nimport {\n  markWorkInProgressReceivedUpdate,\n  checkIfWorkInProgressReceivedUpdate,\n} from './ReactFiberBeginWork.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './ReactFiberDevToolsHook.old';\nimport {createCache, CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createUpdate as createLegacyQueueUpdate,\n  enqueueUpdate as enqueueLegacyQueueUpdate,\n  entangleTransitions as entangleLegacyQueueTransitions,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  enqueueConcurrentHookUpdate,\n  enqueueConcurrentHookUpdateAndEagerlyBailout,\n  enqueueConcurrentRenderForLane,\n} from './ReactFiberConcurrentUpdates.old';\nimport {getTreeId} from './ReactFiberTreeContext.old';\nimport {now} from './Scheduler';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport type Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  hasEagerState: boolean,\n  eagerState: S | null,\n  next: Update<S, A>,\n|};\n\nexport type UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  interleaved: Update<S, A> | null,\n  lanes: Lanes,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnUncachedGetSnapshot;\nif (__DEV__) {\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: any,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\ntype StoreInstance<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\ntype StoreConsistencyCheck<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\nexport type FunctionComponentUpdateQueue = {|\n  lastEffect: Effect | null,\n  stores: Array<StoreConsistencyCheck<any>> | null,\n|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n// Counts the number of useId hooks in this component.\nlet localIdCounter: number = 0;\n// Used for ids that are generated completely client-side (i.e. not during\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\nlet globalClientIdCounter: number = 0;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  throw new Error(\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      localIdCounter = 0;\n\n      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n        throw new Error(\n          'Too many re-renders. React limits the number of renders to prevent ' +\n            'an infinite loop.',\n        );\n      }\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n    if (\n      current !== null &&\n      (current.flags & StaticMaskEffect) !==\n        (workInProgress.flags & StaticMaskEffect) &&\n      // Disable this warning in legacy mode, because legacy Suspense is weird\n      // and creates false positives. To make this work in legacy mode, we'd\n      // need to mark fibers that commit in an incomplete state, somehow. For\n      // now I'll disable the warning that most of the bugs that would trigger\n      // it are either exclusive to concurrent mode or exist in both.\n      (current.mode & ConcurrentMode) !== NoMode\n    ) {\n      console.error(\n        'Internal React error: Expected static flag was missing. Please ' +\n          'notify the React team.',\n      );\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n  // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  if (didRenderTooFewHooks) {\n    throw new Error(\n      'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n        'early return statement.',\n    );\n  }\n\n  if (enableLazyContextPropagation) {\n    if (current !== null) {\n      if (!checkIfWorkInProgressReceivedUpdate()) {\n        // If there were no changes to props or state, we need to check if there\n        // was a context change. We didn't already do this because there's no\n        // 1:1 correspondence between dependencies and hooks. Although, because\n        // there almost always is in the common case (`readContext` is an\n        // internal API), we could compare in there. OTOH, we only hit this case\n        // if everything else bails out, so on the whole it might be better to\n        // keep the comparison out of the common path.\n        const currentDependencies = current.dependencies;\n        if (\n          currentDependencies !== null &&\n          checkIfContextChanged(currentDependencies)\n        ) {\n          markWorkInProgressReceivedUpdate();\n        }\n      }\n    }\n  }\n  return children;\n}\n\nexport function checkDidRenderIdHook() {\n  // This should be called immediately after every renderWithHooks call.\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n  // separate function to avoid using an array tuple.\n  const didRenderIdHook = localIdCounter !== 0;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (workInProgress.mode & StrictEffectsMode) !== NoMode\n  ) {\n    workInProgress.flags &= ~(\n      MountPassiveDevEffect |\n      MountLayoutDevEffect |\n      PassiveEffect |\n      UpdateEffect\n    );\n  } else {\n    workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  }\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n  localIdCounter = 0;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    if (nextCurrentHook === null) {\n      throw new Error('Rendered more hooks than during the previous render.');\n    }\n\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n    stores: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, A> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchReducerAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            hasEagerState: update.hasEagerState,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n  const lastInterleaved = queue.interleaved;\n  if (lastInterleaved !== null) {\n    let interleaved = lastInterleaved;\n    do {\n      const interleavedLane = interleaved.lane;\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        interleavedLane,\n      );\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = ((interleaved: any).next: Update<S, A>);\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubscribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    // Intentioally throw an error to force React to retry synchronously. During\n    // the synchronous retry, it will block interleaved mutations, so we should\n    // get a consistent read. Therefore, the following error should never be\n    // visible to the user.\n\n    // We expect this error not to be thrown during the synchronous retry,\n    // because we blocked interleaved mutations.\n    throw new Error(\n      'Cannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n\n  if (root === null) {\n    throw new Error(\n      'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n    );\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubscribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue: UpdateQueue<Snapshot, BasicStateAction<Snapshot>> = {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchSetState.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubscribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const hook = mountWorkInProgressHook();\n\n  let nextSnapshot;\n  const isHydrating = getIsHydrating();\n  if (isHydrating) {\n    if (getServerSnapshot === undefined) {\n      throw new Error(\n        'Missing getServerSnapshot, which is required for ' +\n          'server-rendered content. Will revert to client rendering.',\n      );\n    }\n    nextSnapshot = getServerSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        if (nextSnapshot !== getServerSnapshot()) {\n          console.error(\n            'The result of getServerSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n  } else {\n    nextSnapshot = getSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        const cachedSnapshot = getSnapshot();\n        if (!is(nextSnapshot, cachedSnapshot)) {\n          console.error(\n            'The result of getSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n    const root: FiberRoot | null = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  hook.memoizedState = nextSnapshot;\n  const inst: StoreInstance<T> = {\n    value: nextSnapshot,\n    getSnapshot,\n  };\n  hook.queue = inst;\n\n  // Schedule an effect to subscribe to the store.\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\n\n  // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n  // TODO: We can move this to the passive phase once we add a pre-commit\n  // consistency check. See the next comment.\n  fiber.flags |= PassiveEffect;\n  pushEffect(\n    HookHasEffect | HookPassive,\n    updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n    undefined,\n    null,\n  );\n\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const hook = updateWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  const nextSnapshot = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedSnapshot = getSnapshot();\n      if (!is(nextSnapshot, cachedSnapshot)) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n  const prevSnapshot = hook.memoizedState;\n  const snapshotChanged = !is(prevSnapshot, nextSnapshot);\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n  const inst = hook.queue;\n\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n    subscribe,\n  ]);\n\n  // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n  if (\n    inst.getSnapshot !== getSnapshot ||\n    snapshotChanged ||\n    // Check if the susbcribe function changed. We can save some memory by\n    // checking whether we scheduled a subscription effect above.\n    (workInProgressHook !== null &&\n      workInProgressHook.memoizedState.tag & HookHasEffect)\n  ) {\n    fiber.flags |= PassiveEffect;\n    pushEffect(\n      HookHasEffect | HookPassive,\n      updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n      undefined,\n      null,\n    );\n\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    const root: FiberRoot | null = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck<T>(\n  fiber: Fiber,\n  getSnapshot: () => T,\n  renderedSnapshot: T,\n) {\n  fiber.flags |= StoreConsistency;\n  const check: StoreConsistencyCheck<T> = {\n    getSnapshot,\n    value: renderedSnapshot,\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.stores = [check];\n  } else {\n    const stores = componentUpdateQueue.stores;\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance<T>(\n  fiber: Fiber,\n  inst: StoreInstance<T>,\n  nextSnapshot: T,\n  getSnapshot: () => T,\n) {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot;\n\n  // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  const handleStoreChange = () => {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  };\n  // Subscribe to the store and return a clean-up function.\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n  }\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchSetState.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nlet stackContainsErrorMessage: boolean | null = null;\n\nfunction getCallerStackFrame(): string {\n  // eslint-disable-next-line react-internal/prod-error-codes\n  const stackFrames = new Error('Error message').stack.split('\\n');\n\n  // Some browsers (e.g. Chrome) include the error message in the stack\n  // but others (e.g. Firefox) do not.\n  if (stackContainsErrorMessage === null) {\n    stackContainsErrorMessage = stackFrames[0].includes('Error message');\n  }\n\n  return stackContainsErrorMessage\n    ? stackFrames.slice(3, 4).join('\\n')\n    : stackFrames.slice(2, 3).join('\\n');\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  if (enableUseRefAccessWarning) {\n    if (__DEV__) {\n      // Support lazy initialization pattern shown in docs.\n      // We need to store the caller stack frame so that we don't warn on subsequent renders.\n      let hasBeenInitialized = initialValue != null;\n      let lazyInitGetterStack = null;\n      let didCheckForLazyInit = false;\n\n      // Only warn once per component+hook.\n      let didWarnAboutRead = false;\n      let didWarnAboutWrite = false;\n\n      let current = initialValue;\n      const ref = {\n        get current() {\n          if (!hasBeenInitialized) {\n            didCheckForLazyInit = true;\n            lazyInitGetterStack = getCallerStackFrame();\n          } else if (currentlyRenderingFiber !== null && !didWarnAboutRead) {\n            if (\n              lazyInitGetterStack === null ||\n              lazyInitGetterStack !== getCallerStackFrame()\n            ) {\n              didWarnAboutRead = true;\n              console.warn(\n                '%s: Unsafe read of a mutable value during render.\\n\\n' +\n                  'Reading from a ref during render is only safe if:\\n' +\n                  '1. The ref value has not been updated, or\\n' +\n                  '2. The ref holds a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n          return current;\n        },\n        set current(value) {\n          if (currentlyRenderingFiber !== null && !didWarnAboutWrite) {\n            if (hasBeenInitialized || !didCheckForLazyInit) {\n              didWarnAboutWrite = true;\n              console.warn(\n                '%s: Unsafe write of a mutable value during render.\\n\\n' +\n                  'Writing to a ref during render is only safe if the ref holds ' +\n                  'a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n\n          hasBeenInitialized = true;\n          current = value;\n        },\n      };\n      Object.seal(ref);\n      hook.memoizedState = ref;\n      return ref;\n    } else {\n      const ref = {current: initialValue};\n      hook.memoizedState = ref;\n      return ref;\n    }\n  } else {\n    const ref = {current: initialValue};\n    hook.memoizedState = ref;\n    return ref;\n  }\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    return mountEffectImpl(\n      MountPassiveDevEffect | PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  } else {\n    return mountEffectImpl(\n      PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  }\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(PassiveEffect, HookPassive, create, deps);\n}\n\nfunction mountInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return mountEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction updateInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(fiberFlags, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(\n    fiberFlags,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = value;\n  return value;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const hook = updateWorkInProgressHook();\n  const resolvedCurrentHook: Hook = (currentHook: any);\n  const prevValue: T = resolvedCurrentHook.memoizedState;\n  return updateDeferredValueImpl(hook, prevValue, value);\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const hook = updateWorkInProgressHook();\n  if (currentHook === null) {\n    // This is a rerender during a mount.\n    hook.memoizedState = value;\n    return value;\n  } else {\n    // This is a rerender during an update.\n    const prevValue: T = currentHook.memoizedState;\n    return updateDeferredValueImpl(hook, prevValue, value);\n  }\n}\n\nfunction updateDeferredValueImpl<T>(hook: Hook, prevValue: T, value: T): T {\n  const shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n  if (shouldDeferValue) {\n    // This is an urgent update. If the value has changed, keep using the\n    // previous value and spawn a deferred render to update it later.\n\n    if (!is(value, prevValue)) {\n      // Schedule a deferred render\n      const deferredLane = claimNextTransitionLane();\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        deferredLane,\n      );\n      markSkippedUpdateLanes(deferredLane);\n\n      // Set this to true to indicate that the rendered value is inconsistent\n      // from the latest value. The name \"baseState\" doesn't really match how we\n      // use it because we're reusing a state hook field instead of creating a\n      // new one.\n      hook.baseState = true;\n    }\n\n    // Reuse the previous value\n    return prevValue;\n  } else {\n    // This is not an urgent update, so we can use the latest value regardless\n    // of what it is. No need to defer it.\n\n    // However, if we're currently inside a spawned render, then we need to mark\n    // this as an update to prevent the fiber from bailing out.\n    //\n    // `baseState` is true when the current value is different from the rendered\n    // value. The name doesn't really match how we use it because we're reusing\n    // a state hook field instead of creating a new one.\n    if (hook.baseState) {\n      // Flip this back to false.\n      hook.baseState = false;\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = value;\n    return value;\n  }\n}\n\nfunction startTransition(setPending, callback, options) {\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(\n    higherEventPriority(previousPriority, ContinuousEventPriority),\n  );\n\n  setPending(true);\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = {};\n  const currentTransition = ReactCurrentBatchConfig.transition;\n\n  if (enableTransitionTracing) {\n    if (options !== undefined && options.name !== undefined) {\n      ReactCurrentBatchConfig.transition.name = options.name;\n      ReactCurrentBatchConfig.transition.startTime = now();\n    }\n  }\n\n  if (__DEV__) {\n    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n  }\n\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    if (__DEV__) {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        const updatedFibersCount = currentTransition._updatedFibers.size;\n        if (updatedFibersCount > 10) {\n          console.warn(\n            'Detected a large number of updates inside startTransition. ' +\n              'If this is due to a subscription please re-write it to use React provided hooks. ' +\n              'Otherwise concurrent mode guarantees are off the table.',\n          );\n        }\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method never changes.\n  const start = startTransition.bind(null, setPending);\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending] = updateState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending] = rerenderState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction mountId(): string {\n  const hook = mountWorkInProgressHook();\n\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n  const identifierPrefix = root.identifierPrefix;\n\n  let id;\n  if (getIsHydrating()) {\n    const treeId = getTreeId();\n\n    // Use a captial R prefix for server-generated ids.\n    id = ':' + identifierPrefix + 'R' + treeId;\n\n    // Unless this is the first id at this level, append a number at the end\n    // that represents the position of this useId hook among all the useId\n    // hooks for this fiber.\n    const localId = localIdCounter++;\n    if (localId > 0) {\n      id += 'H' + localId.toString(32);\n    }\n\n    id += ':';\n  } else {\n    // Use a lowercase r prefix for client-generated ids.\n    const globalClientId = globalClientIdCounter++;\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId(): string {\n  const hook = updateWorkInProgressHook();\n  const id: string = hook.memoizedState;\n  return id;\n}\n\nfunction mountRefresh() {\n  const hook = mountWorkInProgressHook();\n  const refresh = (hook.memoizedState = refreshCache.bind(\n    null,\n    currentlyRenderingFiber,\n  ));\n  return refresh;\n}\n\nfunction updateRefresh() {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction refreshCache<T>(fiber: Fiber, seedKey: ?() => T, seedValue: T) {\n  if (!enableCache) {\n    return;\n  }\n  // TODO: Does Cache work in legacy mode? Should decide and write a test.\n  // TODO: Consider warning if the refresh is at discrete priority, or if we\n  // otherwise suspect that it wasn't batched properly.\n  let provider = fiber.return;\n  while (provider !== null) {\n    switch (provider.tag) {\n      case CacheComponent:\n      case HostRoot: {\n        // Schedule an update on the cache boundary to trigger a refresh.\n        const lane = requestUpdateLane(provider);\n        const eventTime = requestEventTime();\n        const refreshUpdate = createLegacyQueueUpdate(eventTime, lane);\n        const root = enqueueLegacyQueueUpdate(provider, refreshUpdate, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, provider, lane, eventTime);\n          entangleLegacyQueueTransitions(root, provider, lane);\n        }\n\n        // TODO: If a refresh never commits, the new cache created here must be\n        // released. A simple case is start refreshing a cache boundary, but then\n        // unmount that boundary before the refresh completes.\n        const seededCache = createCache();\n        if (seedKey !== null && seedKey !== undefined && root !== null) {\n          // Seed the cache with the value passed by the caller. This could be\n          // from a server mutation, or it could be a streaming response.\n          seededCache.data.set(seedKey, seedValue);\n        }\n\n        const payload = {\n          cache: seededCache,\n        };\n        refreshUpdate.payload = payload;\n        return;\n      }\n    }\n    provider = provider.return;\n  }\n  // TODO: Warn if unmounted?\n}\n\nfunction dispatchReducerAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      const eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction dispatchSetState<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const alternate = fiber.alternate;\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            // TODO: Do we still need to entangle transitions in this case?\n            enqueueConcurrentHookUpdateAndEagerlyBailout(\n              fiber,\n              queue,\n              update,\n              lane,\n            );\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      const eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction isRenderPhaseUpdate(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  return (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  );\n}\n\nfunction enqueueRenderPhaseUpdate<S, A>(\n  queue: UpdateQueue<S, A>,\n  update: Update<S, A>,\n) {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  const pending = queue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  queue.pending = update;\n}\n\n// TODO: Move to ReactFiberConcurrentUpdates?\nfunction entangleTransitionUpdate<S, A>(\n  root: FiberRoot,\n  queue: UpdateQueue<S, A>,\n  lane: Lane,\n) {\n  if (isTransitionLane(lane)) {\n    let queueLanes = queue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nfunction markUpdateInDevTools(fiber, lane, action) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentNameFromFiber(fiber) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nfunction getCacheSignal(): AbortSignal {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  return cache.controller.signal;\n}\n\nfunction getCacheForType<T>(resourceType: () => T): T {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  let cacheForType: T | void = (cache.data.get(resourceType): any);\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.data.set(resourceType, cacheForType);\n  }\n  return cacheForType;\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (ContextOnlyDispatcher: Dispatcher).getCacheSignal = getCacheSignal;\n  (ContextOnlyDispatcher: Dispatcher).getCacheForType = getCacheForType;\n  (ContextOnlyDispatcher: Dispatcher).useCacheRefresh = throwInvalidHookError;\n}\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useInsertionEffect: mountInsertionEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useSyncExternalStore: mountSyncExternalStore,\n  useId: mountId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnMount: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnMount: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnMount: Dispatcher).useCacheRefresh = mountRefresh;\n}\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnUpdate: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnRerender: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnRerender: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnRerender: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      mountHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {HostRoot, Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  isCurrentUpdateNested(): boolean,\n  markNestedUpdateScheduled(): void,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  syncNestedUpdateFlag(): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\nlet currentUpdateIsNested: boolean = false;\nlet nestedUpdateScheduled: boolean = false;\n\nfunction isCurrentUpdateNested(): boolean {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  isCurrentUpdateNested,\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  resetNestedUpdateFlag,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n  digest: string | null,\n|};\n\nexport function createCapturedValueAtFiber<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n    digest: null,\n  };\n}\n\nexport function createCapturedValue<T>(\n  value: T,\n  digest: ?string,\n  stack: ?string,\n): CapturedValue<T> {\n  return {\n    value,\n    source: null,\n    stack: stack != null ? stack : null,\n    digest: digest != null ? digest : null,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  return true;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {HostRoot} from 'react-reconciler/src/ReactWorkTags';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentNameFromFiber(source) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        const errorBoundaryName =\n          getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactFiberClassUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n  IncompleteClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n  ForceClientRender,\n} from './ReactFiberFlags';\nimport {shouldCaptureSuspense} from './ReactFiberSuspenseComponent.old';\nimport {NoMode, ConcurrentMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableLazyContextPropagation,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValueAtFiber} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  renderDidSuspendDelayIfPossible,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n  restorePendingUpdaters,\n} from './ReactFiberWorkLoop.old';\nimport {propagateParentContextChangesToDeferredTree} from './ReactFiberNewContext.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n  includesSyncLane,\n} from './ReactFiberLane.old';\nimport {\n  getIsHydrating,\n  markDidThrowWhileHydratingDEV,\n  queueHydrationError,\n} from './ReactFiberHydrationContext.old';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      return getDerivedStateFromError(error);\n    };\n    update.callback = () => {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentNameFromFiber(fiber) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction attachRetryListener(\n  suspenseBoundary: Fiber,\n  root: FiberRoot,\n  wakeable: Wakeable,\n  lanes: Lanes,\n) {\n  // Retry listener\n  //\n  // If the fallback does commit, we need to attach a different type of\n  // listener. This one schedules an update on the Suspense boundary to turn\n  // the fallback state off.\n  //\n  // Stash the wakeable on the boundary fiber so we can access it in the\n  // commit phase.\n  //\n  // When the wakeable resolves, we'll attempt to render the boundary\n  // again (\"retry\").\n  const wakeables: Set<Wakeable> | null = (suspenseBoundary.updateQueue: any);\n  if (wakeables === null) {\n    const updateQueue = (new Set(): any);\n    updateQueue.add(wakeable);\n    suspenseBoundary.updateQueue = updateQueue;\n  } else {\n    wakeables.add(wakeable);\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber: Fiber, rootRenderLanes: Lanes) {\n  if (enableLazyContextPropagation) {\n    const currentSourceFiber = sourceFiber.alternate;\n    if (currentSourceFiber !== null) {\n      // Since we never visited the children of the suspended component, we\n      // need to propagate the context change now, to ensure that we visit\n      // them during the retry.\n      //\n      // We don't have to do this for errors because we retry errors without\n      // committing in between. So this is specific to Suspense.\n      propagateParentContextChangesToDeferredTree(\n        currentSourceFiber,\n        sourceFiber,\n        rootRenderLanes,\n      );\n    }\n  }\n\n  // Reset the memoizedState to what it was before we attempted to render it.\n  // A legacy mode Suspense quirk, only relevant to hook components.\n  const tag = sourceFiber.tag;\n  if (\n    (sourceFiber.mode & ConcurrentMode) === NoMode &&\n    (tag === FunctionComponent ||\n      tag === ForwardRef ||\n      tag === SimpleMemoComponent)\n  ) {\n    const currentSource = sourceFiber.alternate;\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction getNearestSuspenseBoundaryToCapture(returnFiber: Fiber) {\n  let node = returnFiber;\n  const hasInvisibleParentBoundary = hasSuspenseContext(\n    suspenseStackCursor.current,\n    (InvisibleParentSuspenseContext: SuspenseContext),\n  );\n  do {\n    if (\n      node.tag === SuspenseComponent &&\n      shouldCaptureSuspense(node, hasInvisibleParentBoundary)\n    ) {\n      return node;\n    }\n    // This boundary already captured during this render. Continue to the next\n    // boundary.\n    node = node.return;\n  } while (node !== null);\n  return null;\n}\n\nfunction markSuspenseBoundaryShouldCapture(\n  suspenseBoundary: Fiber,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  root: FiberRoot,\n  rootRenderLanes: Lanes,\n): Fiber | null {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n      // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (sourceFiber.tag === ClassComponent) {\n        const currentSourceFiber = sourceFiber.alternate;\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          const update = createUpdate(NoTimestamp, SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update, SyncLane);\n        }\n      }\n\n      // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n    return suspenseBoundary;\n  }\n  // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n  suspenseBoundary.flags |= ShouldCapture;\n  // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    // This is a wakeable. The component suspended.\n    const wakeable: Wakeable = (value: any);\n    resetSuspendedComponent(sourceFiber, rootRenderLanes);\n\n    if (__DEV__) {\n      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n        markDidThrowWhileHydratingDEV();\n      }\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(sourceFiber) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    const suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n    if (suspenseBoundary !== null) {\n      suspenseBoundary.flags &= ~ForceClientRender;\n      markSuspenseBoundaryShouldCapture(\n        suspenseBoundary,\n        returnFiber,\n        sourceFiber,\n        root,\n        rootRenderLanes,\n      );\n      // We only attach ping listeners in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n      if (suspenseBoundary.mode & ConcurrentMode) {\n        attachPingListener(root, wakeable, rootRenderLanes);\n      }\n      attachRetryListener(suspenseBoundary, root, wakeable, rootRenderLanes);\n      return;\n    } else {\n      // No boundary was found. Unless this is a sync update, this is OK.\n      // We can suspend and wait for more data to arrive.\n\n      if (!includesSyncLane(rootRenderLanes)) {\n        // This is not a sync update. Suspend. Since we're not activating a\n        // Suspense boundary, this will unwind all the way to the root without\n        // performing a second pass to render a fallback. (This is arguably how\n        // refresh transitions should work, too, since we're not going to commit\n        // the fallbacks anyway.)\n        //\n        // This case also applies to initial hydration.\n        attachPingListener(root, wakeable, rootRenderLanes);\n        renderDidSuspendDelayIfPossible();\n        return;\n      }\n\n      // This is a sync/discrete update. We treat this case like an error\n      // because discrete renders are expected to produce a complete tree\n      // synchronously to maintain consistency with external state.\n      const uncaughtSuspenseError = new Error(\n        'A component suspended while responding to synchronous input. This ' +\n          'will cause the UI to be replaced with a loading indicator. To ' +\n          'fix, updates that suspend should be wrapped ' +\n          'with startTransition.',\n      );\n\n      // If we're outside a transition, fall through to the regular error path.\n      // The error will be caught by the nearest suspense boundary.\n      value = uncaughtSuspenseError;\n    }\n  } else {\n    // This is a regular error, not a Suspense wakeable.\n    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n      markDidThrowWhileHydratingDEV();\n      const suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n      // If the error was thrown during hydration, we may be able to recover by\n      // discarding the dehydrated content and switching to a client render.\n      // Instead of surfacing the error, find the nearest Suspense boundary\n      // and render it again without hydration.\n      if (suspenseBoundary !== null) {\n        if ((suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n          // Set a flag to indicate that we should try rendering the normal\n          // children again, not the fallback.\n          suspenseBoundary.flags |= ForceClientRender;\n        }\n        markSuspenseBoundaryShouldCapture(\n          suspenseBoundary,\n          returnFiber,\n          sourceFiber,\n          root,\n          rootRenderLanes,\n        );\n\n        // Even though the user may not be affected by this error, we should\n        // still log it so it can be fixed.\n        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n        return;\n      }\n    } else {\n      // Otherwise, fall through to the error path.\n    }\n  }\n\n  value = createCapturedValueAtFiber(value, sourceFiber);\n  renderDidError(value);\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\nimport {enableCache, enableTransitionTracing} from 'shared/ReactFeatureFlags';\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  getWorkInProgressRoot,\n  getWorkInProgressTransitions,\n} from './ReactFiberWorkLoop.old';\nimport {\n  createCache,\n  retainCache,\n  CacheContext,\n} from './ReactFiberCacheComponent.old';\n\n// When retrying a Suspense/Offscreen boundary, we restore the cache that was\n// used during the previous render by placing it here, on the stack.\nconst resumedCache: StackCursor<Cache | null> = createCursor(null);\n\n// During the render/synchronous commit phase, we don't actually process the\n// transitions. Therefore, we want to lazily combine transitions. Instead of\n// comparing the arrays of transitions when we combine them and storing them\n// and filtering out the duplicates, we will instead store the unprocessed transitions\n// in an array and actually filter them in the passive phase.\nconst transitionStack: StackCursor<Array<Transition> | null> = createCursor(\n  null,\n);\n\nfunction peekCacheFromPool(): Cache | null {\n  if (!enableCache) {\n    return (null: any);\n  }\n\n  // Check if the cache pool already has a cache we can use.\n\n  // If we're rendering inside a Suspense boundary that is currently hidden,\n  // we should use the same cache that we used during the previous render, if\n  // one exists.\n  const cacheResumedFromPreviousRender = resumedCache.current;\n  if (cacheResumedFromPreviousRender !== null) {\n    return cacheResumedFromPreviousRender;\n  }\n\n  // Otherwise, check the root's cache pool.\n  const root = (getWorkInProgressRoot(): any);\n  const cacheFromRootCachePool = root.pooledCache;\n\n  return cacheFromRootCachePool;\n}\n\nexport function requestCacheFromPool(renderLanes: Lanes): Cache {\n  // Similar to previous function, except if there's not already a cache in the\n  // pool, we allocate a new one.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool !== null) {\n    return cacheFromPool;\n  }\n\n  // Create a fresh cache and add it to the root cache pool. A cache can have\n  // multiple owners:\n  // - A cache pool that lives on the FiberRoot. This is where all fresh caches\n  //   are originally created (TODO: except during refreshes, until we implement\n  //   this correctly). The root takes ownership immediately when the cache is\n  //   created. Conceptually, root.pooledCache is an Option<Arc<Cache>> (owned),\n  //   and the return value of this function is a &Arc<Cache> (borrowed).\n  // - One of several fiber types: host root, cache boundary, suspense\n  //   component. These retain and release in the commit phase.\n\n  const root = (getWorkInProgressRoot(): any);\n  const freshCache = createCache();\n  root.pooledCache = freshCache;\n  retainCache(freshCache);\n  if (freshCache !== null) {\n    root.pooledCacheLanes |= renderLanes;\n  }\n  return freshCache;\n}\n\nexport function pushRootTransition(\n  workInProgress: Fiber,\n  root: FiberRoot,\n  renderLanes: Lanes,\n) {\n  if (enableTransitionTracing) {\n    const rootTransitions = getWorkInProgressTransitions();\n    push(transitionStack, rootTransitions, workInProgress);\n  }\n}\n\nexport function popRootTransition(\n  workInProgress: Fiber,\n  root: FiberRoot,\n  renderLanes: Lanes,\n) {\n  if (enableTransitionTracing) {\n    pop(transitionStack, workInProgress);\n  }\n}\n\nexport function pushTransition(\n  offscreenWorkInProgress: Fiber,\n  prevCachePool: SpawnedCachePool | null,\n  newTransitions: Array<Transition> | null,\n): void {\n  if (enableCache) {\n    if (prevCachePool === null) {\n      push(resumedCache, resumedCache.current, offscreenWorkInProgress);\n    } else {\n      push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);\n    }\n  }\n\n  if (enableTransitionTracing) {\n    if (transitionStack.current === null) {\n      push(transitionStack, newTransitions, offscreenWorkInProgress);\n    } else if (newTransitions === null) {\n      push(transitionStack, transitionStack.current, offscreenWorkInProgress);\n    } else {\n      push(\n        transitionStack,\n        transitionStack.current.concat(newTransitions),\n        offscreenWorkInProgress,\n      );\n    }\n  }\n}\n\nexport function popTransition(workInProgress: Fiber, current: Fiber | null) {\n  if (current !== null) {\n    if (enableCache) {\n      pop(resumedCache, workInProgress);\n    }\n\n    if (enableTransitionTracing) {\n      pop(transitionStack, workInProgress);\n    }\n  }\n}\n\nexport function getSuspendedTransitions(): Array<Transition> | null {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  return transitionStack.current;\n}\n\nexport function getSuspendedCache(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n  // This function is called when a Suspense boundary suspends. It returns the\n  // cache that would have been used to render fresh data during this render,\n  // if there was any, so that we can resume rendering with the same cache when\n  // we receive more data.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also save the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n\nexport function getOffscreenDeferredCache(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also store the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  ReactProviderType,\n  ReactContext,\n  ReactNodeList,\n} from 'shared/ReactTypes';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n  OffscreenQueue,\n} from './ReactFiberOffscreenComponent';\nimport type {\n  Cache,\n  CacheComponentState,\n  SpawnedCachePool,\n} from './ReactFiberCacheComponent.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {RootState} from './ReactFiberRoot.old';\nimport {\n  enableSuspenseAvoidThisFallback,\n  enableCPUSuspense,\n  enableUseMutableSource,\n} from 'shared/ReactFeatureFlags';\n\nimport checkPropTypes from 'shared/checkPropTypes';\nimport {\n  markComponentRenderStarted,\n  markComponentRenderStopped,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook.old';\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  RefStatic,\n  ChildDeletion,\n  ForceUpdateForLegacySuspense,\n  StaticMask,\n  ShouldCapture,\n  ForceClientRender,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableCache,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n  enableSchedulingProfiler,\n  enableTransitionTracing,\n  enableLegacyHidden,\n} from 'shared/ReactFeatureFlags';\nimport isArray from 'shared/isArray';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n  enqueueCapturedUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictLegacyMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  getSuspenseInstanceFallbackErrorDetails,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n  isPrimaryRenderer,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {shouldError, shouldSuspend} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseContext,\n  InvisibleParentSuspenseContext,\n  ForceSuspenseFallback,\n  hasSuspenseContext,\n  setDefaultShallowSuspenseContext,\n  addSubtreeSuspenseContext,\n  setShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  lazilyPropagateParentContextChanges,\n  propagateParentContextChangesToDeferredTree,\n  checkIfContextChanged,\n  readContext,\n  prepareToReadContext,\n  scheduleContextWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {\n  renderWithHooks,\n  checkDidRenderIdHook,\n  bailoutHooks,\n} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  getIsHydrating,\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n  queueHydrationError,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n  pushRenderLanes,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\nimport {pushCacheProvider, CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createCapturedValue,\n  createCapturedValueAtFiber,\n  type CapturedValue,\n} from './ReactCapturedValue';\nimport {createClassErrorUpdate} from './ReactFiberThrow.old';\nimport is from 'shared/objectIs';\nimport {\n  getForksAtLevel,\n  isForkedChild,\n  pushTreeId,\n  pushMaterializedTreeId,\n} from './ReactFiberTreeContext.old';\nimport {\n  requestCacheFromPool,\n  pushRootTransition,\n  getSuspendedCache,\n  pushTransition,\n  getOffscreenDeferredCache,\n  getSuspendedTransitions,\n} from './ReactFiberTransition.old';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentNameFromType(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n    current,\n    renderLanes,\n  );\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentNameFromType(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n\n      // The props are shallowly equal. Reuse the previous props object, like we\n      // would during a normal fiber bailout.\n      //\n      // We don't have strong guarantees that the props object is referentially\n      // equal during updates where we can't bail out anyway — like if the props\n      // are shallowly equal, but there's a local state or context update in the\n      // same batch.\n      //\n      // However, as a principle, we should aim to make the behavior consistent\n      // across different ways of memoizing a component. For example, React.memo\n      // has a different internal Fiber layout if you pass a normal function\n      // component (SimpleMemoComponent) versus if you pass a different type\n      // like forwardRef (MemoComponent). But this is an implementation detail.\n      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n      // affect whether the props object is reused during a bailout.\n      workInProgress.pendingProps = nextProps = prevProps;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    (enableLegacyHidden && nextProps.mode === 'unstable-defer-without-hiding')\n  ) {\n    // Rendering a hidden tree.\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Consider how Offscreen should work with transitions in the future\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null,\n      };\n      workInProgress.memoizedState = nextState;\n      if (enableCache) {\n        // push the cache pool even though we're going to bail out\n        // because otherwise there'd be a context mismatch\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      let spawnedCachePool: SpawnedCachePool | null = null;\n      // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n      let nextBaseLanes;\n      if (prevState !== null) {\n        const prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n        if (enableCache) {\n          // Save the cache pool so we can resume later.\n          spawnedCachePool = getOffscreenDeferredCache();\n        }\n      } else {\n        nextBaseLanes = renderLanes;\n      }\n\n      // Schedule this fiber to re-render at offscreen priority. Then bailout.\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n      const nextState: OffscreenState = {\n        baseLanes: nextBaseLanes,\n        cachePool: spawnedCachePool,\n        transitions: null,\n      };\n      workInProgress.memoizedState = nextState;\n      workInProgress.updateQueue = null;\n      if (enableCache) {\n        // push the cache pool even though we're going to bail out\n        // because otherwise there'd be a context mismatch\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      pushRenderLanes(workInProgress, nextBaseLanes);\n\n      if (enableLazyContextPropagation && current !== null) {\n        // Since this tree will resume rendering in a separate render, we need\n        // to propagate parent contexts now so we don't lose track of which\n        // ones changed.\n        propagateParentContextChangesToDeferredTree(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n\n      return null;\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null,\n      };\n      workInProgress.memoizedState = nextState;\n      // Push the lanes that were skipped when we bailed out.\n      const subtreeRenderLanes =\n        prevState !== null ? prevState.baseLanes : renderLanes;\n      if (enableCache && current !== null) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState !== null ? prevState.cachePool : null;\n        // TODO: Consider if and how Offscreen pre-rendering should\n        // be attributed to the transition that spawned it\n        pushTransition(workInProgress, prevCachePool, null);\n      }\n\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    // Rendering a visible tree.\n    let subtreeRenderLanes;\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n\n      subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n      let prevCachePool = null;\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        prevCachePool = prevState.cachePool;\n      }\n\n      pushTransition(workInProgress, prevCachePool, null);\n\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      subtreeRenderLanes = renderLanes;\n\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n    }\n    pushRenderLanes(workInProgress, subtreeRenderLanes);\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateCacheComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableCache) {\n    return null;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const parentCache = readContext(CacheContext);\n\n  if (current === null) {\n    // Initial mount. Request a fresh cache from the pool.\n    const freshCache = requestCacheFromPool(renderLanes);\n    const initialState: CacheComponentState = {\n      parent: parentCache,\n      cache: freshCache,\n    };\n    workInProgress.memoizedState = initialState;\n    initializeUpdateQueue(workInProgress);\n    pushCacheProvider(workInProgress, freshCache);\n  } else {\n    // Check for updates\n    if (includesSomeLane(current.lanes, renderLanes)) {\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, null, null, renderLanes);\n    }\n    const prevState: CacheComponentState = current.memoizedState;\n    const nextState: CacheComponentState = workInProgress.memoizedState;\n\n    // Compare the new parent cache to the previous to see detect there was\n    // a refresh.\n    if (prevState.parent !== parentCache) {\n      // Refresh in parent. Update the parent.\n      const derivedState: CacheComponentState = {\n        parent: parentCache,\n        cache: parentCache,\n      };\n\n      // Copied from getDerivedStateFromProps implementation. Once the update\n      // queue is empty, persist the derived state onto the base state.\n      workInProgress.memoizedState = derivedState;\n      if (workInProgress.lanes === NoLanes) {\n        const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n        workInProgress.memoizedState = updateQueue.baseState = derivedState;\n      }\n\n      pushCacheProvider(workInProgress, parentCache);\n      // No need to propagate a context change because the refreshed parent\n      // already did.\n    } else {\n      // The parent didn't refresh. Now check if this cache did.\n      const nextCache = nextState.cache;\n      pushCacheProvider(workInProgress, nextCache);\n      if (nextCache !== prevState.cache) {\n        // This cache refreshed. Propagate a context change.\n        propagateContextChange(workInProgress, CacheContext, renderLanes);\n      }\n    }\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// This should only be called if the name changes\nfunction updateTracingMarkerComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    if (enableProfilerCommitHooks) {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      const stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n    if (enableSuspenseLayoutEffectSemantics) {\n      workInProgress.flags |= RefStatic;\n    }\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false: {\n        const instance = workInProgress.stateNode;\n        const ctor = workInProgress.type;\n        // TODO This way of resetting the error boundary state is a hack.\n        // Is there a better way to do this?\n        const tempInstance = new ctor(\n          workInProgress.memoizedProps,\n          instance.context,\n        );\n        const state = tempInstance.state;\n        instance.updater.enqueueSetState(instance, state, null);\n        break;\n      }\n      case true: {\n        workInProgress.flags |= DidCapture;\n        workInProgress.flags |= ShouldCapture;\n        // eslint-disable-next-line react-internal/prod-error-codes\n        const error = new Error('Simulated error coming from DevTools');\n        const lane = pickArbitraryLane(renderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        // Schedule the error boundary to re-render using updated state\n        const update = createClassErrorUpdate(\n          workInProgress,\n          createCapturedValueAtFiber(error, workInProgress),\n          lane,\n        );\n        enqueueCapturedUpdate(workInProgress, update);\n        break;\n      }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);\n\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentNameFromFiber(workInProgress) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (enableSchedulingProfiler) {\n      markComponentRenderStarted(workInProgress);\n    }\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n\n  const nextState: RootState = workInProgress.memoizedState;\n  const root: FiberRoot = workInProgress.stateNode;\n  pushRootTransition(workInProgress, root, renderLanes);\n\n  if (enableCache) {\n    const nextCache: Cache = nextState.cache;\n    pushCacheProvider(workInProgress, nextCache);\n    if (nextCache !== prevState.cache) {\n      // The root cache refreshed.\n      propagateContextChange(workInProgress, CacheContext, renderLanes);\n    }\n  }\n\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (supportsHydration && prevState.isDehydrated) {\n    // This is a hydration root whose shell has not yet hydrated. We should\n    // attempt to hydrate.\n\n    // Flip isDehydrated to false to indicate that when this render\n    // finishes, the root will no longer be dehydrated.\n    const overrideState: RootState = {\n      element: nextChildren,\n      isDehydrated: false,\n      cache: nextState.cache,\n      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,\n      transitions: nextState.transitions,\n    };\n    const updateQueue: UpdateQueue<RootState> = (workInProgress.updateQueue: any);\n    // `baseState` can always be the last state because the root doesn't\n    // have reducer functions so it doesn't need rebasing.\n    updateQueue.baseState = overrideState;\n    workInProgress.memoizedState = overrideState;\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during a previous attempt to hydrate the shell, so we\n      // forced a client render.\n      const recoverableError = createCapturedValueAtFiber(\n        new Error(\n          'There was an error while hydrating. Because the error happened outside ' +\n            'of a Suspense boundary, the entire root will switch to ' +\n            'client rendering.',\n        ),\n        workInProgress,\n      );\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n        recoverableError,\n      );\n    } else if (nextChildren !== prevChildren) {\n      const recoverableError = createCapturedValueAtFiber(\n        new Error(\n          'This root received an early update, before anything was able ' +\n            'hydrate. Switched the entire root to client rendering.',\n        ),\n        workInProgress,\n      );\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n        recoverableError,\n      );\n    } else {\n      // The outermost shell has not hydrated yet. Start hydrating.\n      enterHydrationState(workInProgress);\n      if (enableUseMutableSource) {\n        const mutableSourceEagerHydrationData =\n          root.mutableSourceEagerHydrationData;\n        if (mutableSourceEagerHydrationData != null) {\n          for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n            const mutableSource = ((mutableSourceEagerHydrationData[\n              i\n            ]: any): MutableSource<any>);\n            const version = mutableSourceEagerHydrationData[i + 1];\n            setWorkInProgressVersion(mutableSource, version);\n          }\n        }\n      }\n\n      const child = mountChildFibers(\n        workInProgress,\n        null,\n        nextChildren,\n        renderLanes,\n      );\n      workInProgress.child = child;\n\n      let node = child;\n      while (node) {\n        // Mark each child as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n        node.flags = (node.flags & ~Placement) | Hydrating;\n        node = node.sibling;\n      }\n    }\n  } else {\n    // Root is not dehydrated. Either this is a client-only root, or it\n    // already hydrated.\n    resetHydrationState();\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nfunction mountHostRootWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: ReactNodeList,\n  renderLanes: Lanes,\n  recoverableError: CapturedValue<mixed>,\n) {\n  // Revert to client rendering.\n  resetHydrationState();\n\n  queueHydrationError(recoverableError);\n\n  workInProgress.flags |= ForceClientRender;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes,\n      );\n      return child;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  throw new Error(\n    `Element type is invalid. Received a promise that resolves to: ${Component}. ` +\n      `Lazy element type must resolve to a class or function.${hint}`,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n  let hasId;\n\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentNameFromType(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n          hasId = checkDidRenderIdHook();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n\n    if (getIsHydrating() && hasId) {\n      pushMaterializedTreeId(workInProgress);\n    }\n\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache(),\n    transitions: null,\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  let cachePool: SpawnedCachePool | null = null;\n  if (enableCache) {\n    const prevCachePool: SpawnedCachePool | null = prevOffscreenState.cachePool;\n    if (prevCachePool !== null) {\n      const parentCache = isPrimaryRenderer\n        ? CacheContext._currentValue\n        : CacheContext._currentValue2;\n      if (prevCachePool.parent !== parentCache) {\n        // Detected a refresh in the parent. This overrides any previously\n        // suspended cache.\n        cachePool = {\n          parent: parentCache,\n          pool: parentCache,\n        };\n      } else {\n        // We can reuse the cache from last time. The only thing that would have\n        // overridden it is a parent refresh, which we checked for above.\n        cachePool = prevCachePool;\n      }\n    } else {\n      // If there's no previous cache pool, grab the current one.\n      cachePool = getSuspendedCache();\n    }\n  }\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool,\n    transitions: prevOffscreenState.transitions,\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  suspenseContext: SuspenseContext,\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  return hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(\n      suspenseContext,\n      current,\n      workInProgress,\n      renderLanes,\n    )\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (\n      current === null ||\n      (current.memoizedState: null | SuspenseState) !== null\n    ) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n      if (\n        !enableSuspenseAvoidThisFallback ||\n        nextProps.unstable_avoidThisFallback !== true\n      ) {\n        suspenseContext = addSubtreeSuspenseContext(\n          suspenseContext,\n          InvisibleParentSuspenseContext,\n        );\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n\n    // Special path for hydration\n    // If we're currently hydrating, try to hydrate this boundary.\n    tryToClaimNextHydratableInstance(workInProgress);\n    // This could've been a dehydrated suspense component.\n    const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n    if (suspenseState !== null) {\n      const dehydrated = suspenseState.dehydrated;\n      if (dehydrated !== null) {\n        return mountDehydratedSuspenseComponent(\n          workInProgress,\n          dehydrated,\n          renderLanes,\n        );\n      }\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      if (enableTransitionTracing) {\n        const currentTransitions = getSuspendedTransitions();\n        if (currentTransitions !== null) {\n          const primaryChildUpdateQueue: OffscreenQueue = {\n            transitions: currentTransitions,\n          };\n          primaryChildFragment.updateQueue = primaryChildUpdateQueue;\n        }\n      }\n\n      return fallbackFragment;\n    } else if (\n      enableCPUSuspense &&\n      typeof nextProps.unstable_expectedLoadTime === 'number'\n    ) {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // Special path for hydration\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      const dehydrated = prevState.dehydrated;\n      if (dehydrated !== null) {\n        return updateDehydratedSuspenseComponent(\n          current,\n          workInProgress,\n          didSuspend,\n          nextProps,\n          dehydrated,\n          prevState,\n          renderLanes,\n        );\n      }\n    }\n\n    if (showFallback) {\n      const nextFallbackChildren = nextProps.fallback;\n      const nextPrimaryChildren = nextProps.children;\n      const fallbackChildFragment = updateSuspenseFallbackChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      const prevOffscreenState: OffscreenState | null = (current.child: any)\n        .memoizedState;\n      primaryChildFragment.memoizedState =\n        prevOffscreenState === null\n          ? mountSuspenseOffscreenState(renderLanes)\n          : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n      if (enableTransitionTracing) {\n        const currentTransitions = getSuspendedTransitions();\n        if (currentTransitions !== null) {\n          const primaryChildUpdateQueue: OffscreenQueue = {\n            transitions: currentTransitions,\n          };\n          primaryChildFragment.updateQueue = primaryChildUpdateQueue;\n        }\n      }\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n        current,\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    } else {\n      const nextPrimaryChildren = nextProps.children;\n      const primaryChildFragment = updateSuspensePrimaryChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    mode,\n    renderLanes,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if (\n    (mode & ConcurrentMode) === NoMode &&\n    progressedPrimaryFragment !== null\n  ) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(\n      primaryChildProps,\n      mode,\n      NoLanes,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(\n  offscreenProps: OffscreenProps,\n  mode: TypeOfMode,\n  renderLanes: Lanes,\n) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = updateWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    const deletions = workInProgress.deletions;\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & ConcurrentMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n    // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n    primaryChildFragment.subtreeFlags =\n      currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  recoverableError: CapturedValue<mixed> | null,\n) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n  //\n  // The error is passed in as an argument to enforce that every caller provide\n  // a custom message, or explicitly opt out (currently the only path that opts\n  // out is legacy mode; every concurrent path provides an error).\n  if (recoverableError !== null) {\n    queueHydrationError(recoverableError);\n  }\n\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const fiberMode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    fiberMode,\n    NoLanes,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    fiberMode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOMClient.hydrateRoot(container, <App />)' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  didSuspend: boolean,\n  nextProps: any,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (!didSuspend) {\n    // This is the first render pass. Attempt to hydrate.\n\n    // We should never be hydrating at this point because it is the first pass,\n    // but after we've already committed once.\n    warnIfHydrating();\n\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        // TODO: When we delete legacy mode, we should make this error argument\n        // required — every concurrent mode path that causes hydration to\n        // de-opt to client rendering should have an error message.\n        null,\n      );\n    }\n\n    if (isSuspenseInstanceFallback(suspenseInstance)) {\n      // This boundary is in a permanent fallback state. In this case, we'll never\n      // get an update and we'll never be able to hydrate the final content. Let's just try the\n      // client side render instead.\n      let digest, message, stack;\n      if (__DEV__) {\n        ({digest, message, stack} = getSuspenseInstanceFallbackErrorDetails(\n          suspenseInstance,\n        ));\n      } else {\n        ({digest} = getSuspenseInstanceFallbackErrorDetails(suspenseInstance));\n      }\n\n      let error;\n      if (message) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        error = new Error(message);\n      } else {\n        error = new Error(\n          'The server could not finish this Suspense boundary, likely ' +\n            'due to an error during server rendering. Switched to ' +\n            'client rendering.',\n        );\n      }\n      const capturedValue = createCapturedValue(error, digest, stack);\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    }\n\n    if (\n      enableLazyContextPropagation &&\n      // TODO: Factoring is a little weird, since we check this right below, too.\n      // But don't want to re-arrange the if-else chain until/unless this\n      // feature lands.\n      !didReceiveUpdate\n    ) {\n      // We need to check if any children have context before we decide to bail\n      // out, so propagate the changes now.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n    }\n\n    // We use lanes to indicate that a child might depend on context, so if\n    // any context has changed, we need to treat is as if the input might have changed.\n    const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n    if (didReceiveUpdate || hasContextChanged) {\n      // This boundary has changed since the first render. This means that we are now unable to\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n      const root = getWorkInProgressRoot();\n      if (root !== null) {\n        const attemptHydrationAtLane = getBumpedLaneForHydration(\n          root,\n          renderLanes,\n        );\n        if (\n          attemptHydrationAtLane !== NoLane &&\n          attemptHydrationAtLane !== suspenseState.retryLane\n        ) {\n          // Intentionally mutating since this render will get interrupted. This\n          // is one of the very rare times where we mutate the current tree\n          // during the render phase.\n          suspenseState.retryLane = attemptHydrationAtLane;\n          // TODO: Ideally this would inherit the event time of the current render\n          const eventTime = NoTimestamp;\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n          scheduleUpdateOnFiber(\n            root,\n            current,\n            attemptHydrationAtLane,\n            eventTime,\n          );\n        } else {\n          // We have already tried to ping at a higher priority than we're rendering with\n          // so if we got here, we must have failed to hydrate at those levels. We must\n          // now give up. Instead, we're going to delete the whole subtree and instead inject\n          // a new real Suspense boundary to take its place, which may render content\n          // or fallback. This might suspend for a while and if it does we might still have\n          // an opportunity to hydrate before this pass commits.\n        }\n      }\n\n      // If we have scheduled higher pri work above, this will probably just abort the render\n      // since we now have higher priority work, but in case it doesn't, we need to prepare to\n      // render something, if we time out. Even if that requires us to delete everything and\n      // skip hydration.\n      // Delay having to do this as long as the suspense timeout allows us.\n      renderDidSuspendDelayIfPossible();\n      const capturedValue = createCapturedValue(\n        new Error(\n          'This Suspense boundary received an update before it finished ' +\n            'hydrating. This caused the boundary to switch to client rendering. ' +\n            'The usual way to fix this is to wrap the original update ' +\n            'in startTransition.',\n        ),\n      );\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    } else if (isSuspenseInstancePending(suspenseInstance)) {\n      // This component is still pending more data from the server, so we can't hydrate its\n      // content. We treat it as if this component suspended itself. It might seem as if\n      // we could just try to render it client-side instead. However, this will perform a\n      // lot of unnecessary work and is unlikely to complete since it often will suspend\n      // on missing data anyway. Additionally, the server might be able to render more\n      // than we can on the client yet. In that case we'd end up with more fallback states\n      // on the client than if we just leave it alone. If the server times out or errors\n      // these should update this boundary to the permanent Fallback state instead.\n      // Mark it as having captured (i.e. suspended).\n      workInProgress.flags |= DidCapture;\n      // Leave the child in place. I.e. the dehydrated fragment.\n      workInProgress.child = current.child;\n      // Register a callback to retry this boundary once the server has sent the result.\n      const retry = retryDehydratedSuspenseBoundary.bind(null, current);\n      registerSuspenseInstanceRetry(suspenseInstance, retry);\n      return null;\n    } else {\n      // This is the first attempt.\n      reenterHydrationStateFromDehydratedSuspenseInstance(\n        workInProgress,\n        suspenseInstance,\n        suspenseState.treeContext,\n      );\n      const primaryChildren = nextProps.children;\n      const primaryChildFragment = mountSuspensePrimaryChildren(\n        workInProgress,\n        primaryChildren,\n        renderLanes,\n      );\n      // Mark the children as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      primaryChildFragment.flags |= Hydrating;\n      return primaryChildFragment;\n    }\n  } else {\n    // This is the second render pass. We already attempted to hydrated, but\n    // something either suspended or errored.\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during hydration. Try again without hydrating.\n      workInProgress.flags &= ~ForceClientRender;\n      const capturedValue = createCapturedValue(\n        new Error(\n          'There was an error while hydrating this Suspense boundary. ' +\n            'Switched to client rendering.',\n        ),\n      );\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    } else if ((workInProgress.memoizedState: null | SuspenseState) !== null) {\n      // Something suspended and we should still be in dehydrated mode.\n      // Leave the existing child in place.\n      workInProgress.child = current.child;\n      // The dehydrated completion pass expects this flag to be there\n      // but the normal suspense pass doesn't.\n      workInProgress.flags |= DidCapture;\n      return null;\n    } else {\n      // Suspended but we should no longer be in dehydrated mode.\n      // Therefore we now have to render the fallback.\n      const nextPrimaryChildren = nextProps.children;\n      const nextFallbackChildren = nextProps.fallback;\n      const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    }\n  }\n}\n\nfunction scheduleSuspenseWorkOnFiber(\n  fiber: Fiber,\n  renderLanes: Lanes,\n  propagationRoot: Fiber,\n) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isAnArray = isArray(childSlot);\n    const isIterable =\n      !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isAnArray || isIterable) {\n      const type = isAnArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  if (enableLazyContextPropagation) {\n    // In the lazy propagation implementation, we don't scan for matching\n    // consumers until something bails out, because until something bails out\n    // we're going to visit those nodes, anyway. The trade-off is that it shifts\n    // responsibility to the consumer to track whether something has changed.\n  } else {\n    if (oldProps !== null) {\n      const oldValue = oldProps.value;\n      if (is(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (\n          oldProps.children === newProps.children &&\n          !hasLegacyContextChanged()\n        ) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nexport function checkIfWorkInProgressReceivedUpdate() {\n  return didReceiveUpdate;\n}\n\nfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (current !== null) {\n      // A lazy component only mounts if it suspended inside a non-\n      // concurrent tree, in an inconsistent state. We want to treat it like\n      // a new mount, even though an empty version of it already committed.\n      // Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n  }\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n\n    if (enableLazyContextPropagation && current !== null) {\n      // Before bailing out, check if there are any context changes in\n      // the children.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      // eslint-disable-next-line react-internal/prod-error-codes\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction checkScheduledUpdateOrContext(\n  current: Fiber,\n  renderLanes: Lanes,\n): boolean {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  const updateLanes = current.lanes;\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  }\n  // No pending update, but because context is propagated lazily, we need\n  // to check for a context change before we bail out.\n  if (enableLazyContextPropagation) {\n    const dependencies = current.dependencies;\n    if (dependencies !== null && checkIfContextChanged(dependencies)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      const root: FiberRoot = workInProgress.stateNode;\n      pushRootTransition(workInProgress, root, renderLanes);\n\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      resetHydrationState();\n      break;\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        pushLegacyContextProvider(workInProgress);\n      }\n      break;\n    }\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n    case ContextProvider: {\n      const newValue = workInProgress.memoizedProps.value;\n      const context: ReactContext<any> = workInProgress.type._context;\n      pushProvider(workInProgress, context, newValue);\n      break;\n    }\n    case Profiler:\n      if (enableProfilerTimer) {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        const hasChildWork = includesSomeLane(\n          renderLanes,\n          workInProgress.childLanes,\n        );\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        if (enableProfilerCommitHooks) {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          const stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      break;\n    case SuspenseComponent: {\n      const state: SuspenseState | null = workInProgress.memoizedState;\n      if (state !== null) {\n        if (state.dehydrated !== null) {\n          pushSuspenseContext(\n            workInProgress,\n            setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n          );\n          // We know that this component will suspend again because if it has\n          // been unsuspended it has committed as a resolved Suspense component.\n          // If it needs to be retried, it should have work scheduled on it.\n          workInProgress.flags |= DidCapture;\n          // We should never render the children of a dehydrated boundary until we\n          // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n          return null;\n        }\n\n        // If this boundary is currently timed out, we need to decide\n        // whether to retry the primary children, or to skip over it and\n        // go straight to the fallback. Check the priority of the primary\n        // child fragment.\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const primaryChildLanes = primaryChildFragment.childLanes;\n        if (includesSomeLane(renderLanes, primaryChildLanes)) {\n          // The primary children have pending work. Use the normal path\n          // to attempt to render the primary children again.\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        } else {\n          // The primary child fragment does not have pending work marked\n          // on it\n          pushSuspenseContext(\n            workInProgress,\n            setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n          );\n          // The primary children do not have pending work with sufficient\n          // priority. Bailout.\n          const child = bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n          if (child !== null) {\n            // The fallback children have pending work. Skip over the\n            // primary children and work on the fallback.\n            return child.sibling;\n          } else {\n            // Note: We can return `null` here because we already checked\n            // whether there were nested context consumers, via the call to\n            // `bailoutOnAlreadyFinishedWork` above.\n            return null;\n          }\n        }\n      } else {\n        pushSuspenseContext(\n          workInProgress,\n          setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n        );\n      }\n      break;\n    }\n    case SuspenseListComponent: {\n      const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n      let hasChildWork = includesSomeLane(\n        renderLanes,\n        workInProgress.childLanes,\n      );\n\n      if (enableLazyContextPropagation && !hasChildWork) {\n        // Context changes may not have been propagated yet. We need to do\n        // that now, before we can decide whether to bail out.\n        // TODO: We use `childLanes` as a heuristic for whether there is\n        // remaining work in a few places, including\n        // `bailoutOnAlreadyFinishedWork` and\n        // `updateDehydratedSuspenseComponent`. We should maybe extract this\n        // into a dedicated function.\n        lazilyPropagateParentContextChanges(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n        hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n      }\n\n      if (didSuspendBefore) {\n        if (hasChildWork) {\n          // If something was in fallback state last time, and we have all the\n          // same children then we're still in progressive loading state.\n          // Something might get unblocked by state updates or retries in the\n          // tree which will affect the tail. So we need to use the normal\n          // path to compute the correct tail.\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        workInProgress.flags |= DidCapture;\n      }\n\n      // If nothing suspended before and we're rendering the same children,\n      // then the tail doesn't matter. Anything new that suspends will work\n      // in the \"together\" mode, so we can continue from the state we had.\n      const renderState = workInProgress.memoizedState;\n      if (renderState !== null) {\n        // Reset to the \"together\" mode in case we've started a different\n        // update in the past but didn't complete it.\n        renderState.rendering = null;\n        renderState.tail = null;\n        renderState.lastEffect = null;\n      }\n      pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n      if (hasChildWork) {\n        break;\n      } else {\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        return null;\n      }\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      // Need to check if the tree still needs to be deferred. This is\n      // almost identical to the logic used in the normal update path,\n      // so we'll just enter that. The only difference is we'll bail out\n      // at the next level instead of this one, because the child props\n      // have not changed. Which is fine.\n      // TODO: Probably should refactor `beginWork` to split the bailout\n      // path from the normal path. I'm tempted to do a labeled break here\n      // but I won't :)\n      workInProgress.lanes = NoLanes;\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      break;\n    }\n  }\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n        current,\n        renderLanes,\n      );\n      if (\n        !hasScheduledUpdateOrContext &&\n        // If this is the second pass of an error or suspense boundary, there\n        // may not be work scheduled on `current`, so we check for this flag.\n        (workInProgress.flags & DidCapture) === NoFlags\n      ) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\n      // Check if this child belongs to a list of muliple children in\n      // its parent.\n      //\n      // In a true multi-threaded implementation, we would render children on\n      // parallel threads. This would represent the beginning of a new render\n      // thread for this subtree.\n      //\n      // We only use this for id generation during hydration, which is why the\n      // logic is located in this special branch.\n      const slotIndex = workInProgress.index;\n      const numberOfForks = getForksAtLevel(workInProgress);\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\n    }\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      if (enableLegacyHidden) {\n        return updateLegacyHiddenComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        return updateCacheComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        return updateTracingMarkerComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {\n  ReactScopeInstance,\n  ReactContext,\n  Wakeable,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport {\n  enableSuspenseAvoidThisFallback,\n  enableLegacyHidden,\n} from 'shared/ReactFeatureFlags';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './Scheduler';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {NoMode, ConcurrentMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  Ref,\n  RefStatic,\n  Placement,\n  Update,\n  Visibility,\n  NoFlags,\n  DidCapture,\n  Snapshot,\n  ChildDeletion,\n  StaticMask,\n  MutationMask,\n  Passive,\n  Incomplete,\n  ShouldCapture,\n  ForceClientRender,\n} from './ReactFiberFlags';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n  popSuspenseContext,\n  pushSuspenseContext,\n  setShallowSuspenseContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  warnIfUnhydratedTailNodes,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n  hasUnhydratedTailNodes,\n  upgradeHydrationErrorsToRecoverable,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableProfilerTimer,\n  enableCache,\n  enableSuspenseLayoutEffectSemantics,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  popRenderLanes,\n  getRenderTargetTime,\n  subtreeRenderLanes,\n  getWorkInProgressTransitions,\n} from './ReactFiberWorkLoop.old';\nimport {\n  OffscreenLane,\n  SomeRetryLane,\n  NoLanes,\n  includesSomeLane,\n  mergeLanes,\n} from './ReactFiberLane.old';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\nimport {popTreeContext} from './ReactFiberTreeContext.old';\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref;\n  if (enableSuspenseLayoutEffectSemantics) {\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nfunction hadNoMutationsEffects(current: null | Fiber, completedWork: Fiber) {\n  const didBailout = current !== null && current.child === completedWork.child;\n  if (didBailout) {\n    return true;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return false;\n  }\n\n  // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n  let child = completedWork.child;\n  while (child !== null) {\n    if (\n      (child.flags & MutationMask) !== NoFlags ||\n      (child.subtreeFlags & MutationMask) !== NoFlags\n    ) {\n      return false;\n    }\n    child = child.sibling;\n  }\n  return true;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildren(parent, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildrenToContainer(containerChildSet, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction bubbleProperties(completedWork: Fiber) {\n  const didBailout =\n    completedWork.alternate !== null &&\n    completedWork.alternate.child === completedWork.child;\n\n  let newChildLanes = NoLanes;\n  let subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let actualDuration = completedWork.actualDuration;\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n        actualDuration += child.actualDuration;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n\n  return didBailout;\n}\n\nfunction completeDehydratedSuspenseBoundary(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextState: SuspenseState | null,\n): boolean {\n  if (\n    hasUnhydratedTailNodes() &&\n    (workInProgress.mode & ConcurrentMode) !== NoMode &&\n    (workInProgress.flags & DidCapture) === NoFlags\n  ) {\n    warnIfUnhydratedTailNodes(workInProgress);\n    resetHydrationState();\n    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n\n    return false;\n  }\n\n  const wasHydrated = popHydrationState(workInProgress);\n\n  if (nextState !== null && nextState.dehydrated !== null) {\n    // We might be inside a hydration state the first time we're picking up this\n    // Suspense boundary, and also after we've reentered it for further hydration.\n    if (current === null) {\n      if (!wasHydrated) {\n        throw new Error(\n          'A dehydrated suspense component was completed without a hydrated node. ' +\n            'This is probably a bug in React.',\n        );\n      }\n      prepareToHydrateHostSuspenseInstance(workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return false;\n    } else {\n      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n      resetHydrationState();\n      if ((workInProgress.flags & DidCapture) === NoFlags) {\n        // This boundary did not suspend so it's now hydrated and unsuspended.\n        workInProgress.memoizedState = null;\n      }\n      // If nothing suspended, we need to schedule an effect to mark this boundary\n      // as having hydrated so events know that they're free to be invoked.\n      // It's also a signal to replay events and the suspense callback.\n      // If something suspended, schedule an effect to attach retry listeners.\n      // So we might as well always mark this.\n      workInProgress.flags |= Update;\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return false;\n    }\n  } else {\n    // Successfully completed this tree. If this was a forced client render,\n    // there may have been recoverable errors during first hydration\n    // attempt. If so, add them to a queue so we can log them in the\n    // commit phase.\n    upgradeHydrationErrorsToRecoverable();\n\n    // Fall through to normal Suspense path\n    return true;\n  }\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostRoot: {\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n\n      if (enableTransitionTracing) {\n        const transitions = getWorkInProgressTransitions();\n        // We set the Passive flag here because if there are new transitions,\n        // we will need to schedule callbacks and process the transitions,\n        // which we do in the passive phase\n        if (transitions !== null) {\n          workInProgress.flags |= Passive;\n        }\n      }\n\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (current !== null) {\n          previousCache = current.memoizedState.cache;\n        }\n        const cache: Cache = workInProgress.memoizedState.cache;\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n        popCacheProvider(workInProgress, cache);\n      }\n      popRootTransition(workInProgress, fiberRoot, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else {\n          if (current !== null) {\n            const prevState: RootState = current.memoizedState;\n            if (\n              // Check if this is a client root\n              !prevState.isDehydrated ||\n              // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags\n            ) {\n              // Schedule an effect to clear this container at the start of the\n              // next commit. This handles the case of React rendering into a\n              // container with previous children. It's also safe to do for\n              // updates too, because current.child would only be null if the\n              // previous render was null (so the container would already\n              // be empty).\n              workInProgress.flags |= Snapshot;\n\n              // If this was a forced client render, there may have been\n              // recoverable errors during first hydration attempt. If so, add\n              // them to a queue so we can log them in the commit phase.\n              upgradeHydrationErrorsToRecoverable();\n            }\n          }\n        }\n      }\n      updateHostContainer(current, workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableTransitionTracing) {\n        if ((workInProgress.subtreeFlags & Visibility) !== NoFlags) {\n          // If any of our suspense children toggle visibility, this means that\n          // the pending boundaries array needs to be updated, which we only\n          // do in the passive phase.\n          workInProgress.flags |= Passive;\n        }\n      }\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          // This can happen when we abort work.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      // Special path for dehydrated boundaries. We may eventually move this\n      // to its own fiber type so that we can add other kinds of hydration\n      // boundaries that aren't associated with a Suspense tree. In anticipation\n      // of such a refactor, all the hydration logic is contained in\n      // this branch.\n      if (\n        current === null ||\n        (current.memoizedState !== null &&\n          current.memoizedState.dehydrated !== null)\n      ) {\n        const fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(\n          current,\n          workInProgress,\n          nextState,\n        );\n        if (!fallthroughToNormalSuspensePath) {\n          if (workInProgress.flags & ShouldCapture) {\n            // Special case. There were remaining unhydrated nodes. We treat\n            // this as a mismatch. Revert to client rendering.\n            return workInProgress;\n          } else {\n            // Did not finish hydrating, either because this is the initial\n            // render or because something suspended.\n            return null;\n          }\n        }\n\n        // Continue with the normal Suspense path.\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        // Don't bubble properties in this case.\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      const prevDidTimeout =\n        current !== null &&\n        (current.memoizedState: null | SuspenseState) !== null;\n\n      if (enableCache && nextDidTimeout) {\n        const offscreenFiber: Fiber = (workInProgress.child: any);\n        let previousCache: Cache | null = null;\n        if (\n          offscreenFiber.alternate !== null &&\n          offscreenFiber.alternate.memoizedState !== null &&\n          offscreenFiber.alternate.memoizedState.cachePool !== null\n        ) {\n          previousCache = offscreenFiber.alternate.memoizedState.cachePool.pool;\n        }\n        let cache: Cache | null = null;\n        if (\n          offscreenFiber.memoizedState !== null &&\n          offscreenFiber.memoizedState.cachePool !== null\n        ) {\n          cache = offscreenFiber.memoizedState.cachePool.pool;\n        }\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          offscreenFiber.flags |= Passive;\n        }\n      }\n\n      // If the suspended state of the boundary changes, we need to schedule\n      // a passive effect, which is when we process the transitions\n      if (nextDidTimeout !== prevDidTimeout) {\n        if (enableTransitionTracing) {\n          const offscreenFiber: Fiber = (workInProgress.child: any);\n          offscreenFiber.flags |= Passive;\n        }\n\n        // If the suspended state of the boundary changes, we need to schedule\n        // an effect to toggle the subtree's visibility. When we switch from\n        // fallback -> primary, the inner Offscreen fiber schedules this effect\n        // as part of its normal complete phase. But when we switch from\n        // primary -> fallback, the inner Offscreen fiber does not have a complete\n        // phase. So we need to schedule its effect here.\n        //\n        // We also use this flag to connect/disconnect the effects, but the same\n        // logic applies: when re-connecting, the Offscreen fiber's complete\n        // phase will handle scheduling the effect. It's only when the fallback\n        // is active that we have to do anything special.\n        if (nextDidTimeout) {\n          const offscreenFiber: Fiber = (workInProgress.child: any);\n          offscreenFiber.flags |= Visibility;\n\n          // TODO: This will still suspend a synchronous tree if anything\n          // in the concurrent tree already suspended during this render.\n          // This is a known bug.\n          if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n            // TODO: Move this back to throwException because this is too late\n            // if this is a large tree which is common for initial loads. We\n            // don't know if we should restart a render or not until we get\n            // this marker, and this is too late.\n            // If this render already had a ping or lower pri updates,\n            // and this is the first time we know we're going to suspend we\n            // should be able to immediately restart from within throwException.\n            const hasInvisibleChildContext =\n              current === null &&\n              (workInProgress.memoizedProps.unstable_avoidThisFallback !==\n                true ||\n                !enableSuspenseAvoidThisFallback);\n            if (\n              hasInvisibleChildContext ||\n              hasSuspenseContext(\n                suspenseStackCursor.current,\n                (InvisibleParentSuspenseContext: SuspenseContext),\n              )\n            ) {\n              // If this was in an invisible tree or a new render, then showing\n              // this boundary is ok.\n              renderDidSuspend();\n            } else {\n              // Otherwise, we're going to have to hide content so we should\n              // suspend for longer if possible.\n              renderDidSuspendDelayIfPossible();\n            }\n          }\n        }\n      }\n\n      const wakeables: Set<Wakeable> | null = (workInProgress.updateQueue: any);\n      if (wakeables !== null) {\n        // Schedule an effect to attach a retry listener to the promise.\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          if (nextDidTimeout) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thenables. Instead, we'll transfer its thenables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThenables = suspended.updateQueue;\n                if (newThenables !== null) {\n                  workInProgress.updateQueue = newThenables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect flags before doing the second pass since that's now invalid.\n                // Reset the child fibers to their original state.\n                workInProgress.subtreeFlags = NoFlags;\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense Context to force suspense and immediately\n                // rerender the children.\n                pushSuspenseContext(\n                  workInProgress,\n                  setShallowSuspenseContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                // Don't bubble properties in this case.\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThenables = suspended.updateQueue;\n            if (newThenables !== null) {\n              workInProgress.updateQueue = newThenables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We're done.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        }\n        pushSuspenseContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        // Don't bubble properties in this case.\n        return next;\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        bubbleProperties(workInProgress);\n        return null;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popRenderLanes(workInProgress);\n      const nextState: OffscreenState | null = workInProgress.memoizedState;\n      const nextIsHidden = nextState !== null;\n\n      if (current !== null) {\n        const prevState: OffscreenState | null = current.memoizedState;\n        const prevIsHidden = prevState !== null;\n        if (\n          prevIsHidden !== nextIsHidden &&\n          // LegacyHidden doesn't do any hiding — it only pre-renders.\n          (!enableLegacyHidden || workInProgress.tag !== LegacyHiddenComponent)\n        ) {\n          workInProgress.flags |= Visibility;\n        }\n      }\n\n      if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n        bubbleProperties(workInProgress);\n      } else {\n        // Don't bubble properties for hidden children unless we're rendering\n        // at offscreen priority.\n        if (includesSomeLane(subtreeRenderLanes, (OffscreenLane: Lane))) {\n          bubbleProperties(workInProgress);\n          if (supportsMutation) {\n            // Check if there was an insertion or update in the hidden subtree.\n            // If so, we need to hide those nodes in the commit phase, so\n            // schedule a visibility effect.\n            if (\n              (!enableLegacyHidden ||\n                workInProgress.tag !== LegacyHiddenComponent) &&\n              workInProgress.subtreeFlags & (Placement | Update)\n            ) {\n              workInProgress.flags |= Visibility;\n            }\n          }\n        }\n      }\n\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (\n          current !== null &&\n          current.memoizedState !== null &&\n          current.memoizedState.cachePool !== null\n        ) {\n          previousCache = current.memoizedState.cachePool.pool;\n        }\n        let cache: Cache | null = null;\n        if (\n          workInProgress.memoizedState !== null &&\n          workInProgress.memoizedState.cachePool !== null\n        ) {\n          cache = workInProgress.memoizedState.cachePool.pool;\n        }\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n      }\n\n      popTransition(workInProgress, current);\n\n      return null;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (current !== null) {\n          previousCache = current.memoizedState.cache;\n        }\n        const cache: Cache = workInProgress.memoizedState.cache;\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n        popCacheProvider(workInProgress, cache);\n        bubbleProperties(workInProgress);\n      }\n      return null;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        // Bubble subtree flags before so we can set the flag property\n        bubbleProperties(workInProgress);\n      }\n      return null;\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Cache} from './ReactFiberCacheComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {enableProfilerTimer, enableCache} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {popSuspenseContext} from './ReactFiberSuspenseContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popRenderLanes} from './ReactFiberWorkLoop.old';\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {popTreeContext} from './ReactFiberTreeContext.old';\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\n\nfunction unwindWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      const root: FiberRoot = workInProgress.stateNode;\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      popRootTransition(workInProgress, root, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      if (\n        (flags & ShouldCapture) !== NoFlags &&\n        (flags & DidCapture) === NoFlags\n      ) {\n        // There was an error during render that wasn't captured by a suspense\n        // boundary. Do a second pass on the root to unmount the children.\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        return workInProgress;\n      }\n      // We unwound to the root without completing it. Exit.\n      return null;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n      if (suspenseState !== null && suspenseState.dehydrated !== null) {\n        if (workInProgress.alternate === null) {\n          throw new Error(\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n        }\n\n        resetHydrationState();\n      }\n\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      popTransition(workInProgress, current);\n      return null;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(\n  current: Fiber | null,\n  interruptedWork: Fiber,\n  renderLanes: Lanes,\n) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      const root: FiberRoot = interruptedWork.stateNode;\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      popRootTransition(interruptedWork, root, renderLanes);\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case ContextProvider:\n      const context: ReactContext<any> = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      popTransition(interruptedWork, current);\n      break;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {\n  OffscreenState,\n  OffscreenInstance,\n} from './ReactFiberOffscreenComponent';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\nimport {\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableSchedulingProfiler,\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableStrictEffects,\n  deletedTreeCleanUpLevel,\n  enableSuspenseLayoutEffectSemantics,\n  enableUpdaterTracking,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {detachDeletedInstance} from './ReactFiberHostConfig';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  ChildDeletion,\n  Snapshot,\n  Update,\n  Ref,\n  Hydrating,\n  Passive,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  Visibility,\n} from './ReactFiberFlags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n  getCurrentFiber as getCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  isCurrentUpdateNested,\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ConcurrentMode, NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {commitUpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n  prepareForCommit,\n  beforeActiveInstanceBlur,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveProfilerEffect,\n  restorePendingUpdaters,\n  addTransitionStartCallbackToPendingTransition,\n  addTransitionCompleteCallbackToPendingTransition,\n  setIsRunningInsertionEffect,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Insertion as HookInsertion,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\nimport {invokeGuardedCallback, clearCaughtError} from 'shared/ReactErrorUtils';\nimport {\n  isDevToolsPresent,\n  markComponentPassiveEffectMountStarted,\n  markComponentPassiveEffectMountStopped,\n  markComponentPassiveEffectUnmountStarted,\n  markComponentPassiveEffectUnmountStopped,\n  markComponentLayoutEffectMountStarted,\n  markComponentLayoutEffectMountStopped,\n  markComponentLayoutEffectUnmountStarted,\n  markComponentLayoutEffectUnmountStopped,\n  onCommitUnmount,\n} from './ReactFiberDevToolsHook.old';\nimport {releaseCache, retainCache} from './ReactFiberCacheComponent.old';\nimport {clearTransitionsForLanes} from './ReactFiberLane.old';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\n// Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n// Only used when enableSuspenseLayoutEffectSemantics is enabled.\nlet offscreenSubtreeIsHidden: boolean = false;\nlet offscreenSubtreeWasHidden: boolean = false;\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nlet nextEffect: Fiber | null = null;\n\n// Used for Profiling builds to track updaters.\nlet inProgressLanes: Lanes | null = null;\nlet inProgressRoot: FiberRoot | null = null;\n\nexport function reportUncaughtErrorInDEV(error: mixed) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  if (__DEV__) {\n    invokeGuardedCallback(null, () => {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallCommitHookLayoutEffectListMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  try {\n    commitHookEffectListMount(HookLayout, current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallComponentDidMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    instance.componentDidMount();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyAttachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      let retVal;\n      try {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          current.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            retVal = ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          retVal = ref(null);\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n      if (__DEV__) {\n        if (typeof retVal === 'function') {\n          console.error(\n            'Unexpected return value from a callback ref in %s. ' +\n              'A callback ref should not return a function.',\n            getComponentNameFromFiber(current),\n          );\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  destroy: () => void,\n) {\n  try {\n    destroy();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function commitBeforeMutationEffects(\n  root: FiberRoot,\n  firstChild: Fiber,\n) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin();\n\n  // We no longer need to track the active instance fiber\n  const shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // This phase is only used for beforeActiveInstanceBlur.\n    // Let's skip the whole loop if it's off.\n    if (enableCreateEventHandleAPI) {\n      // TODO: Should wrap this in flags check, too, as optimization\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const deletion = deletions[i];\n          commitBeforeMutationEffectsDeletion(deletion);\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if (\n      (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags &&\n      child !== null\n    ) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork: Fiber) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  if (enableCreateEventHandleAPI) {\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      // Check to see if the focused element was inside of a hidden (Suspense) subtree.\n      // TODO: Move this out of the hot path using a dedicated effect tag.\n      if (\n        finishedWork.tag === SuspenseComponent &&\n        isSuspenseBoundaryBeingHidden(current, finishedWork) &&\n        doesFiberContain(finishedWork, focusedInstanceHandle)\n      ) {\n        shouldFireAfterActiveInstanceBlur = true;\n        beforeActiveInstanceBlur(finishedWork);\n      }\n    }\n  }\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentDebugFiberInDEV(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        break;\n      }\n      case ClassComponent: {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentNameFromFiber(finishedWork),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n        break;\n      }\n      case HostRoot: {\n        if (supportsMutation) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n        break;\n      }\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n      default: {\n        throw new Error(\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction commitBeforeMutationEffectsDeletion(deletion: Fiber) {\n  if (enableCreateEventHandleAPI) {\n    // TODO (effects) It would be nice to avoid calling doesFiberContain()\n    // Maybe we can repurpose one of the subtreeFlags positions for this instead?\n    // Use it to store which part of the tree the focused instance is in?\n    // This assumes we can safely determine that instance during the \"render\" phase.\n    if (doesFiberContain(deletion, ((focusedInstanceHandle: any): Fiber))) {\n      shouldFireAfterActiveInstanceBlur = true;\n      beforeActiveInstanceBlur(deletion);\n    }\n  }\n}\n\nfunction commitHookEffectListUnmount(\n  flags: HookFlags,\n  finishedWork: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectUnmountStarted(finishedWork);\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectUnmountStarted(finishedWork);\n            }\n          }\n\n          if (__DEV__) {\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(true);\n            }\n          }\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n          if (__DEV__) {\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(false);\n            }\n          }\n\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectUnmountStopped();\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectUnmountStopped();\n            }\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(flags: HookFlags, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        if (enableSchedulingProfiler) {\n          if ((flags & HookPassive) !== NoHookEffect) {\n            markComponentPassiveEffectMountStarted(finishedWork);\n          } else if ((flags & HookLayout) !== NoHookEffect) {\n            markComponentLayoutEffectMountStarted(finishedWork);\n          }\n        }\n\n        // Mount\n        const create = effect.create;\n        if (__DEV__) {\n          if ((flags & HookInsertion) !== NoHookEffect) {\n            setIsRunningInsertionEffect(true);\n          }\n        }\n        effect.destroy = create();\n        if (__DEV__) {\n          if ((flags & HookInsertion) !== NoHookEffect) {\n            setIsRunningInsertionEffect(false);\n          }\n        }\n\n        if (enableSchedulingProfiler) {\n          if ((flags & HookPassive) !== NoHookEffect) {\n            markComponentPassiveEffectMountStopped();\n          } else if ((flags & HookLayout) !== NoHookEffect) {\n            markComponentLayoutEffectMountStopped();\n          }\n        }\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let hookName;\n            if ((effect.tag & HookLayout) !== NoFlags) {\n              hookName = 'useLayoutEffect';\n            } else if ((effect.tag & HookInsertion) !== NoFlags) {\n              hookName = 'useInsertionEffect';\n            } else {\n              hookName = 'useEffect';\n            }\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote ' +\n                hookName +\n                '(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                hookName +\n                '(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              '%s must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              hookName,\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          let phase = finishedWork.alternate === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onPostCommit === 'function') {\n            onPostCommit(id, phase, passiveEffectDuration, commitTime);\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          outer: while (parentFiber !== null) {\n            switch (parentFiber.tag) {\n              case HostRoot:\n                const root = parentFiber.stateNode;\n                root.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n              case Profiler:\n                const parentStateNode = parentFiber.stateNode;\n                parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        if (\n          !enableSuspenseLayoutEffectSemantics ||\n          !offscreenSubtreeWasHidden\n        ) {\n          // At this point layout effects have already been destroyed (during mutation phase).\n          // This is done to prevent sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListMount(\n                HookLayout | HookHasEffect,\n                finishedWork,\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n          }\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = finishedWork.stateNode;\n        if (finishedWork.flags & Update) {\n          if (!offscreenSubtreeWasHidden) {\n            if (current === null) {\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidMount();\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidMount();\n              }\n            } else {\n              const prevProps =\n                finishedWork.elementType === finishedWork.type\n                  ? current.memoizedProps\n                  : resolveDefaultProps(\n                      finishedWork.type,\n                      current.memoizedProps,\n                    );\n              const prevState = current.memoizedState;\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidUpdate(\n                    prevProps,\n                    prevState,\n                    instance.__reactInternalSnapshotBeforeUpdate,\n                  );\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidUpdate(\n                  prevProps,\n                  prevState,\n                  instance.__reactInternalSnapshotBeforeUpdate,\n                );\n              }\n            }\n          }\n        }\n\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostRoot: {\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          let instance = null;\n          if (finishedWork.child !== null) {\n            switch (finishedWork.child.tag) {\n              case HostComponent:\n                instance = getPublicInstance(finishedWork.child.stateNode);\n                break;\n              case ClassComponent:\n                instance = finishedWork.child.stateNode;\n                break;\n            }\n          }\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        const instance: Instance = finishedWork.stateNode;\n\n        // Renderers may schedule work to be done after host components are mounted\n        // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n        // These effects should only be committed when components are first mounted,\n        // aka when there is no current/alternate.\n        if (current === null && finishedWork.flags & Update) {\n          const type = finishedWork.type;\n          const props = finishedWork.memoizedProps;\n          commitMount(instance, type, props, finishedWork);\n        }\n\n        break;\n      }\n      case HostText: {\n        // We have no life-cycles associated with text.\n        break;\n      }\n      case HostPortal: {\n        // We have no life-cycles associated with portals.\n        break;\n      }\n      case Profiler: {\n        if (enableProfilerTimer) {\n          const {onCommit, onRender} = finishedWork.memoizedProps;\n          const {effectDuration} = finishedWork.stateNode;\n\n          const commitTime = getCommitTime();\n\n          let phase = current === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onRender === 'function') {\n            onRender(\n              finishedWork.memoizedProps.id,\n              phase,\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n            );\n          }\n\n          if (enableProfilerCommitHooks) {\n            if (typeof onCommit === 'function') {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                phase,\n                effectDuration,\n                commitTime,\n              );\n            }\n\n            // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n            // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n            // because the effect is also where times bubble to parent Profilers.\n            enqueuePendingPassiveProfilerEffect(finishedWork);\n\n            // Propagate layout effect durations to the next nearest Profiler ancestor.\n            // Do not reset these values until the next render so DevTools has a chance to read them first.\n            let parentFiber = finishedWork.return;\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  const root = parentFiber.stateNode;\n                  root.effectDuration += effectDuration;\n                  break outer;\n                case Profiler:\n                  const parentStateNode = parentFiber.stateNode;\n                  parentStateNode.effectDuration += effectDuration;\n                  break outer;\n              }\n              parentFiber = parentFiber.return;\n            }\n          }\n        }\n        break;\n      }\n      case SuspenseComponent: {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n        break;\n      }\n      case SuspenseListComponent:\n      case IncompleteClassComponent:\n      case ScopeComponent:\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n      case TracingMarkerComponent: {\n        break;\n      }\n\n      default:\n        throw new Error(\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n    }\n  }\n\n  if (!enableSuspenseLayoutEffectSemantics || !offscreenSubtreeWasHidden) {\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (finishedWork.flags & Ref && finishedWork.tag !== ScopeComponent) {\n        commitAttachRef(finishedWork);\n      }\n    } else {\n      if (finishedWork.flags & Ref) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n}\n\nfunction reappearLayoutEffectsOnFiber(node: Fiber) {\n  // Turn on layout effects in a tree that previously disappeared.\n  // TODO (Offscreen) Check: flags & LayoutStatic\n  switch (node.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        node.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n        } finally {\n          recordLayoutEffectDuration(node);\n        }\n      } else {\n        safelyCallCommitHookLayoutEffectListMount(node, node.return);\n      }\n      break;\n    }\n    case ClassComponent: {\n      const instance = node.stateNode;\n      if (typeof instance.componentDidMount === 'function') {\n        safelyCallComponentDidMount(node, node.return, instance);\n      }\n      safelyAttachRef(node, node.return);\n      break;\n    }\n    case HostComponent: {\n      safelyAttachRef(node, node.return);\n      break;\n    }\n  }\n}\n\nfunction commitTransitionProgress(\n  finishedRoot: FiberRoot,\n  offscreenFiber: Fiber,\n) {\n  if (enableTransitionTracing) {\n    // This function adds suspense boundaries to the root\n    // or tracing marker's pendingSuspenseBoundaries map.\n    // When a suspense boundary goes from a resolved to a fallback\n    // state we add the boundary to the map, and when it goes from\n    // a fallback to a resolved state, we remove the boundary from\n    // the map.\n\n    // We use stateNode on the Offscreen component as a stable object\n    // that doesnt change from render to render. This way we can\n    // distinguish between different Offscreen instances (vs. the same\n    // Offscreen instance with different fibers)\n    const offscreenInstance: OffscreenInstance = offscreenFiber.stateNode;\n\n    let prevState: SuspenseState | null = null;\n    const previousFiber = offscreenFiber.alternate;\n    if (previousFiber !== null && previousFiber.memoizedState !== null) {\n      prevState = previousFiber.memoizedState;\n    }\n    const nextState: SuspenseState | null = offscreenFiber.memoizedState;\n\n    const wasHidden = prevState !== null;\n    const isHidden = nextState !== null;\n\n    const rootState: RootState = finishedRoot.current.memoizedState;\n    // TODO(luna) move pendingSuspenseBoundaries and transitions from\n    // HostRoot fiber to FiberRoot\n    const rootPendingBoundaries = rootState.pendingSuspenseBoundaries;\n    const rootTransitions = rootState.transitions;\n\n    // If there is a name on the suspense boundary, store that in\n    // the pending boundaries.\n    let name = null;\n    const parent = offscreenFiber.return;\n    if (\n      parent !== null &&\n      parent.tag === SuspenseComponent &&\n      parent.memoizedProps.unstable_name\n    ) {\n      name = parent.memoizedProps.unstable_name;\n    }\n\n    if (rootPendingBoundaries !== null) {\n      if (previousFiber === null) {\n        // Initial mount\n        if (isHidden) {\n          rootPendingBoundaries.set(offscreenInstance, {\n            name,\n          });\n        }\n      } else {\n        if (wasHidden && !isHidden) {\n          // The suspense boundary went from hidden to visible. Remove\n          // the boundary from the pending suspense boundaries set\n          // if it's there\n          if (rootPendingBoundaries.has(offscreenInstance)) {\n            rootPendingBoundaries.delete(offscreenInstance);\n\n            if (rootPendingBoundaries.size === 0 && rootTransitions !== null) {\n              rootTransitions.forEach(transition => {\n                addTransitionCompleteCallbackToPendingTransition({\n                  transitionName: transition.name,\n                  startTime: transition.startTime,\n                });\n              });\n            }\n          }\n        } else if (!wasHidden && isHidden) {\n          // The suspense boundaries was just hidden. Add the boundary\n          // to the pending boundary set if it's there\n          rootPendingBoundaries.set(offscreenInstance, {\n            name,\n          });\n        }\n      }\n    }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  let hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n          try {\n            const instance = node.stateNode;\n            if (isHidden) {\n              hideInstance(instance);\n            } else {\n              unhideInstance(node.stateNode, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          try {\n            const instance = node.stateNode;\n            if (isHidden) {\n              hideTextInstance(instance);\n            } else {\n              unhideTextInstance(instance, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden.\n        // Don't search any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      let retVal;\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          retVal = ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        retVal = ref(instanceToUse);\n      }\n      if (__DEV__) {\n        if (typeof retVal === 'function') {\n          console.error(\n            'Unexpected return value from a callback ref in %s. ' +\n              'A callback ref should not return a function.',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          currentRef(null);\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        currentRef(null);\n      }\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  }\n\n  // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n  if (!(deletedTreeCleanUpLevel >= 2)) {\n    // This is the default branch (level 0).\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.dependencies = null;\n    fiber.memoizedProps = null;\n    fiber.memoizedState = null;\n    fiber.pendingProps = null;\n    fiber.sibling = null;\n    fiber.stateNode = null;\n    fiber.updateQueue = null;\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n  } else {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null;\n\n    // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n    if (fiber.tag === HostComponent) {\n      const hostInstance: Instance = fiber.stateNode;\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n    fiber.stateNode = null;\n\n    // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n\n    if (deletedTreeCleanUpLevel >= 3) {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null;\n      // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n\n  throw new Error(\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  switch (parentFiber.tag) {\n    case HostComponent: {\n      const parent: Instance = parentFiber.stateNode;\n      if (parentFiber.flags & ContentReset) {\n        // Reset the text content of the parent before doing any insertions\n        resetTextContent(parent);\n        // Clear ContentReset from the effect tag\n        parentFiber.flags &= ~ContentReset;\n      }\n\n      const before = getHostSibling(finishedWork);\n      // We only have the top Fiber that was inserted but we need to recurse down its\n      // children to find all the terminal nodes.\n      insertOrAppendPlacementNode(finishedWork, before, parent);\n      break;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const parent: Container = parentFiber.stateNode.containerInfo;\n      const before = getHostSibling(finishedWork);\n      insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n      break;\n    }\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      throw new Error(\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\n// These are tracked on the stack as we recursively traverse a\n// deleted subtree.\n// TODO: Update these during the whole mutation phase, not just during\n// a deletion.\nlet hostParent: Instance | Container | null = null;\nlet hostParentIsContainer: boolean = false;\n\nfunction commitDeletionEffects(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  deletedFiber: Fiber,\n) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was deleted but we need to recurse down its\n    // children to find all the terminal nodes.\n\n    // Recursively delete all host nodes from the parent, detach refs, clean\n    // up mounted layout effects, and call componentWillUnmount.\n\n    // We only need to remove the topmost host child in each branch. But then we\n    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n    // could split this into two separate traversals functions, where the second\n    // one doesn't include any removeChild logic. This is maybe the same\n    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n    // the layout phase is refactored to use recursion).\n\n    // Before starting, find the nearest host parent on the stack so we know\n    // which instance/container to remove the children from.\n    // TODO: Instead of searching up the fiber return path on every deletion, we\n    // can track the nearest host component on the JS stack as we traverse the\n    // tree during the commit phase. This would make insertions faster, too.\n    let parent = returnFiber;\n    findParent: while (parent !== null) {\n      switch (parent.tag) {\n        case HostComponent: {\n          hostParent = parent.stateNode;\n          hostParentIsContainer = false;\n          break findParent;\n        }\n        case HostRoot: {\n          hostParent = parent.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          break findParent;\n        }\n        case HostPortal: {\n          hostParent = parent.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          break findParent;\n        }\n      }\n      parent = parent.return;\n    }\n    if (hostParent === null) {\n      throw new Error(\n        'Expected to find a host parent. This error is likely caused by ' +\n          'a bug in React. Please file an issue.',\n      );\n    }\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n    hostParent = null;\n    hostParentIsContainer = false;\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n  }\n\n  detachFiberMutation(deletedFiber);\n}\n\nfunction recursivelyTraverseDeletionEffects(\n  finishedRoot,\n  nearestMountedAncestor,\n  parent,\n) {\n  // TODO: Use a static flag to skip trees that don't have unmount effects\n  let child = parent.child;\n  while (child !== null) {\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n    child = child.sibling;\n  }\n}\n\nfunction commitDeletionEffectsOnFiber(\n  finishedRoot: FiberRoot,\n  nearestMountedAncestor: Fiber,\n  deletedFiber: Fiber,\n) {\n  onCommitUnmount(deletedFiber);\n\n  // The cases in this outer switch modify the stack before they traverse\n  // into their subtree. There are simpler cases in the inner switch\n  // that don't modify the stack.\n  switch (deletedFiber.tag) {\n    case HostComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      }\n      // Intentional fallthrough to next branch\n    }\n    // eslint-disable-next-line-no-fallthrough\n    case HostText: {\n      // We only need to remove the nearest host child. Set the host parent\n      // to `null` on the stack to indicate that nested children don't\n      // need to be removed.\n      if (supportsMutation) {\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = null;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n\n        if (hostParent !== null) {\n          // Now that all the child effects have unmounted, we can remove the\n          // node from the tree.\n          if (hostParentIsContainer) {\n            removeChildFromContainer(\n              ((hostParent: any): Container),\n              (deletedFiber.stateNode: Instance | TextInstance),\n            );\n          } else {\n            removeChild(\n              ((hostParent: any): Instance),\n              (deletedFiber.stateNode: Instance | TextInstance),\n            );\n          }\n        }\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((deletedFiber.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Dehydrated fragments don't have any children\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (supportsMutation) {\n        if (hostParent !== null) {\n          if (hostParentIsContainer) {\n            clearSuspenseBoundaryFromContainer(\n              ((hostParent: any): Container),\n              (deletedFiber.stateNode: SuspenseInstance),\n            );\n          } else {\n            clearSuspenseBoundary(\n              ((hostParent: any): Instance),\n              (deletedFiber.stateNode: SuspenseInstance),\n            );\n          }\n        }\n      }\n      return;\n    }\n    case HostPortal: {\n      if (supportsMutation) {\n        // When we go into a portal, it becomes the parent to remove from.\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = deletedFiber.stateNode.containerInfo;\n        hostParentIsContainer = true;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n      } else {\n        emptyPortalContainer(deletedFiber);\n\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      return;\n    }\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        const updateQueue: FunctionComponentUpdateQueue | null = (deletedFiber.updateQueue: any);\n        if (updateQueue !== null) {\n          const lastEffect = updateQueue.lastEffect;\n          if (lastEffect !== null) {\n            const firstEffect = lastEffect.next;\n\n            let effect = firstEffect;\n            do {\n              const {destroy, tag} = effect;\n              if (destroy !== undefined) {\n                if ((tag & HookInsertion) !== NoHookEffect) {\n                  safelyCallDestroy(\n                    deletedFiber,\n                    nearestMountedAncestor,\n                    destroy,\n                  );\n                } else if ((tag & HookLayout) !== NoHookEffect) {\n                  if (enableSchedulingProfiler) {\n                    markComponentLayoutEffectUnmountStarted(deletedFiber);\n                  }\n\n                  if (\n                    enableProfilerTimer &&\n                    enableProfilerCommitHooks &&\n                    deletedFiber.mode & ProfileMode\n                  ) {\n                    startLayoutEffectTimer();\n                    safelyCallDestroy(\n                      deletedFiber,\n                      nearestMountedAncestor,\n                      destroy,\n                    );\n                    recordLayoutEffectDuration(deletedFiber);\n                  } else {\n                    safelyCallDestroy(\n                      deletedFiber,\n                      nearestMountedAncestor,\n                      destroy,\n                    );\n                  }\n\n                  if (enableSchedulingProfiler) {\n                    markComponentLayoutEffectUnmountStopped();\n                  }\n                }\n              }\n              effect = effect.next;\n            } while (effect !== firstEffect);\n          }\n        }\n      }\n\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case ClassComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        const instance = deletedFiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(\n            deletedFiber,\n            nearestMountedAncestor,\n            instance,\n          );\n        }\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case OffscreenComponent: {\n      if (\n        // TODO: Remove this dead flag\n        enableSuspenseLayoutEffectSemantics &&\n        deletedFiber.mode & ConcurrentMode\n      ) {\n        // If this offscreen component is hidden, we already unmounted it. Before\n        // deleting the children, track that it's already unmounted so that we\n        // don't attempt to unmount the effects again.\n        // TODO: If the tree is hidden, in most cases we should be able to skip\n        // over the nested children entirely. An exception is we haven't yet found\n        // the topmost host node to delete, which we already track on the stack.\n        // But the other case is portals, which need to be detached no matter how\n        // deeply they are nested. We should use a subtree flag to track whether a\n        // subtree includes a nested portal.\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeWasHidden =\n          prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n  }\n}\nfunction commitSuspenseCallback(finishedWork: Fiber) {\n  // TODO: Move this to passive phase\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n          if (enableSuspenseCallback) {\n            const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n            if (hydrationCallbacks !== null) {\n              const onHydrated = hydrationCallbacks.onHydrated;\n              if (onHydrated) {\n                onHydrated(suspenseInstance);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork: Fiber) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    let retryCache = finishedWork.stateNode;\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n    wakeables.forEach(wakeable => {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      const retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n      if (!retryCache.has(wakeable)) {\n        retryCache.add(wakeable);\n\n        if (enableUpdaterTracking) {\n          if (isDevToolsPresent) {\n            if (inProgressLanes !== null && inProgressRoot !== null) {\n              // If we have pending work still, associate the original updaters with it.\n              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n            } else {\n              throw Error(\n                'Expected finished root and lanes to be set. This is a bug in React.',\n              );\n            }\n          }\n        }\n\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nexport function commitMutationEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n\n  setCurrentDebugFiberInDEV(finishedWork);\n  commitMutationEffectsOnFiber(finishedWork, root, committedLanes);\n  setCurrentDebugFiberInDEV(finishedWork);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseMutationEffects(\n  root: FiberRoot,\n  parentFiber: Fiber,\n  lanes: Lanes,\n) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects hae fired.\n  const deletions = parentFiber.deletions;\n  if (deletions !== null) {\n    for (let i = 0; i < deletions.length; i++) {\n      const childToDelete = deletions[i];\n      try {\n        commitDeletionEffects(root, parentFiber, childToDelete);\n      } catch (error) {\n        captureCommitPhaseError(childToDelete, parentFiber, error);\n      }\n    }\n  }\n\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  if (parentFiber.subtreeFlags & MutationMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      commitMutationEffectsOnFiber(child, root, lanes);\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitMutationEffectsOnFiber(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  lanes: Lanes,\n) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconcilation, because those can be set on all fiber types.\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        try {\n          commitHookEffectListUnmount(\n            HookInsertion | HookHasEffect,\n            finishedWork,\n            finishedWork.return,\n          );\n          commitHookEffectListMount(\n            HookInsertion | HookHasEffect,\n            finishedWork,\n          );\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Ref) {\n        if (current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n      return;\n    }\n    case HostComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Ref) {\n        if (current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n      if (supportsMutation) {\n        // TODO: ContentReset gets cleared by the children during the commit\n        // phase. This is a refactor hazard because it means we must read\n        // flags the flags after `commitReconciliationEffects` has already run;\n        // the order matters. We should refactor so that ContentReset does not\n        // rely on mutating the flag during commit. Like by setting a flag\n        // during the render phase instead.\n        if (finishedWork.flags & ContentReset) {\n          const instance: Instance = finishedWork.stateNode;\n          try {\n            resetTextContent(instance);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n\n        if (flags & Update) {\n          const instance: Instance = finishedWork.stateNode;\n          if (instance != null) {\n            // Commit the work prepared earlier.\n            const newProps = finishedWork.memoizedProps;\n            // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n            const oldProps =\n              current !== null ? current.memoizedProps : newProps;\n            const type = finishedWork.type;\n            // TODO: Type the updateQueue to be specific to host components.\n            const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n            finishedWork.updateQueue = null;\n            if (updatePayload !== null) {\n              try {\n                commitUpdate(\n                  instance,\n                  updatePayload,\n                  type,\n                  oldProps,\n                  newProps,\n                  finishedWork,\n                );\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error,\n                );\n              }\n            }\n          }\n        }\n      }\n      return;\n    }\n    case HostText: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsMutation) {\n          if (finishedWork.stateNode === null) {\n            throw new Error(\n              'This should have a text node initialized. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          const textInstance: TextInstance = finishedWork.stateNode;\n          const newText: string = finishedWork.memoizedProps;\n          // For hydration we reuse the update path but we treat the oldProps\n          // as the newProps. The updatePayload will contain the real change in\n          // this case.\n          const oldText: string =\n            current !== null ? current.memoizedProps : newText;\n\n          try {\n            commitTextUpdate(textInstance, oldText, newText);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case HostRoot: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsMutation && supportsHydration) {\n          if (current !== null) {\n            const prevRootState: RootState = current.memoizedState;\n            if (prevRootState.isDehydrated) {\n              try {\n                commitHydratedContainer(root.containerInfo);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error,\n                );\n              }\n            }\n          }\n        }\n        if (supportsPersistence) {\n          const containerInfo = root.containerInfo;\n          const pendingChildren = root.pendingChildren;\n          try {\n            replaceContainerChildren(containerInfo, pendingChildren);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case HostPortal: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsPersistence) {\n          const portal = finishedWork.stateNode;\n          const containerInfo = portal.containerInfo;\n          const pendingChildren = portal.pendingChildren;\n          try {\n            replaceContainerChildren(containerInfo, pendingChildren);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      const offscreenFiber: Fiber = (finishedWork.child: any);\n\n      if (offscreenFiber.flags & Visibility) {\n        const offscreenInstance: OffscreenInstance = offscreenFiber.stateNode;\n        const newState: OffscreenState | null = offscreenFiber.memoizedState;\n        const isHidden = newState !== null;\n\n        // Track the current state on the Offscreen instance so we can\n        // read it during an event\n        offscreenInstance.isHidden = isHidden;\n\n        if (isHidden) {\n          const wasHidden =\n            offscreenFiber.alternate !== null &&\n            offscreenFiber.alternate.memoizedState !== null;\n          if (!wasHidden) {\n            // TODO: Move to passive phase\n            markCommitTimeOfFallback();\n          }\n        }\n      }\n\n      if (flags & Update) {\n        try {\n          commitSuspenseCallback(finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        attachSuspenseRetryListeners(finishedWork);\n      }\n      return;\n    }\n    case OffscreenComponent: {\n      const wasHidden = current !== null && current.memoizedState !== null;\n\n      if (\n        // TODO: Remove this dead flag\n        enableSuspenseLayoutEffectSemantics &&\n        finishedWork.mode & ConcurrentMode\n      ) {\n        // Before committing the children, track on the stack whether this\n        // offscreen subtree was already hidden, so that we don't unmount the\n        // effects again.\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n      } else {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      }\n\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Visibility) {\n        const offscreenInstance: OffscreenInstance = finishedWork.stateNode;\n        const newState: OffscreenState | null = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        const offscreenBoundary: Fiber = finishedWork;\n\n        // Track the current state on the Offscreen instance so we can\n        // read it during an event\n        offscreenInstance.isHidden = isHidden;\n\n        if (enableSuspenseLayoutEffectSemantics) {\n          if (isHidden) {\n            if (!wasHidden) {\n              if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                nextEffect = offscreenBoundary;\n                let offscreenChild = offscreenBoundary.child;\n                while (offscreenChild !== null) {\n                  nextEffect = offscreenChild;\n                  disappearLayoutEffects_begin(offscreenChild);\n                  offscreenChild = offscreenChild.sibling;\n                }\n              }\n            }\n          } else {\n            if (wasHidden) {\n              // TODO: Move re-appear call here for symmetry?\n            }\n          }\n        }\n\n        if (supportsMutation) {\n          // TODO: This needs to run whenever there's an insertion or update\n          // inside a hidden Offscreen tree.\n          hideOrUnhideAllChildren(offscreenBoundary, isHidden);\n        }\n      }\n      return;\n    }\n    case SuspenseListComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        attachSuspenseRetryListeners(finishedWork);\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork);\n\n        // TODO: This is a temporary solution that allowed us to transition away\n        // from React Flare on www.\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(finishedWork, finishedWork.return);\n          }\n          safelyAttachRef(finishedWork, finishedWork.return);\n        }\n        if (flags & Update) {\n          const scopeInstance = finishedWork.stateNode;\n          prepareScopeUpdate(scopeInstance, finishedWork);\n        }\n      }\n      return;\n    }\n    default: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      return;\n    }\n  }\n}\nfunction commitReconciliationEffects(finishedWork: Fiber) {\n  // Placement effects (insertions, reorders) can be scheduled on any fiber\n  // type. They needs to happen after the children effects have fired, but\n  // before the effects on this fiber have fired.\n  const flags = finishedWork.flags;\n  if (flags & Placement) {\n    try {\n      commitPlacement(finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n    // Clear the \"placement\" from effect tag so that we know that this is\n    // inserted, before any life-cycles like componentDidMount gets called.\n    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n    // and isMounted is deprecated anyway so we should be able to kill this.\n    finishedWork.flags &= ~Placement;\n  }\n  if (flags & Hydrating) {\n    finishedWork.flags &= ~Hydrating;\n  }\n}\n\nexport function commitLayoutEffects(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n): void {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = finishedWork;\n\n  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitLayoutEffects_begin(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  // Suspense layout effects semantics don't change for legacy roots.\n  const isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (\n      enableSuspenseLayoutEffectSemantics &&\n      fiber.tag === OffscreenComponent &&\n      isModernRoot\n    ) {\n      // Keep track of the current Offscreen stack's state.\n      const isHidden = fiber.memoizedState !== null;\n      const newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n      if (newOffscreenSubtreeIsHidden) {\n        // The Offscreen tree is hidden. Skip over its layout effects.\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      } else {\n        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n        const current = fiber.alternate;\n        const wasHidden = current !== null && current.memoizedState !== null;\n        const newOffscreenSubtreeWasHidden =\n          wasHidden || offscreenSubtreeWasHidden;\n        const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n\n        // Traverse the Offscreen subtree with the current Offscreen as the root.\n        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n          // This is the root of a reappearing boundary. Turn its layout effects\n          // back on.\n          nextEffect = fiber;\n          reappearLayoutEffects_begin(fiber);\n        }\n\n        let child = firstChild;\n        while (child !== null) {\n          nextEffect = child;\n          commitLayoutEffects_begin(\n            child, // New root; bubble back up to here and stop.\n            root,\n            committedLanes,\n          );\n          child = child.sibling;\n        }\n\n        // Restore Offscreen state and resume in our-progress traversal.\n        nextEffect = fiber;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\n        continue;\n      }\n    }\n\n    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n    }\n  }\n}\n\nfunction commitLayoutMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & LayoutMask) !== NoFlags) {\n      const current = fiber.alternate;\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction disappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n          } finally {\n            recordLayoutEffectDuration(fiber);\n          }\n        } else {\n          commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n        }\n        break;\n      }\n      case ClassComponent: {\n        // TODO (Offscreen) Check: flags & RefStatic\n        safelyDetachRef(fiber, fiber.return);\n\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        safelyDetachRef(fiber, fiber.return);\n        break;\n      }\n      case OffscreenComponent: {\n        // Check if this is a\n        const isHidden = fiber.memoizedState !== null;\n        if (isHidden) {\n          // Nested Offscreen tree is already hidden. Don't disappear\n          // its effects.\n          disappearLayoutEffects_complete(subtreeRoot);\n          continue;\n        }\n        break;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      disappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction disappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction reappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (fiber.tag === OffscreenComponent) {\n      const isHidden = fiber.memoizedState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n        reappearLayoutEffects_complete(subtreeRoot);\n        continue;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      reappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction reappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // TODO (Offscreen) Check: flags & LayoutStatic\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      reappearLayoutEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nexport function commitPassiveMountEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n): void {\n  nextEffect = finishedWork;\n  commitPassiveMountEffects_begin(\n    finishedWork,\n    root,\n    committedLanes,\n    committedTransitions,\n  );\n}\n\nfunction commitPassiveMountEffects_begin(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitPassiveMountEffects_complete(\n        subtreeRoot,\n        root,\n        committedLanes,\n        committedTransitions,\n      );\n    }\n  }\n}\n\nfunction commitPassiveMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitPassiveMountOnFiber(\n          root,\n          fiber,\n          committedLanes,\n          committedTransitions,\n        );\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountOnFiber(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n        } finally {\n          recordPassiveEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (finishedWork.alternate !== null) {\n          previousCache = finishedWork.alternate.memoizedState.cache;\n        }\n        const nextCache = finishedWork.memoizedState.cache;\n        // Retain/release the root cache.\n        // Note that on initial mount, previousCache and nextCache will be the same\n        // and this retain won't occur. To counter this, we instead retain the HostRoot's\n        // initial cache when creating the root itself (see createFiberRoot() in\n        // ReactFiberRoot.js). Subsequent updates that change the cache are reflected\n        // here, such that previous/next caches are retained correctly.\n        if (nextCache !== previousCache) {\n          retainCache(nextCache);\n          if (previousCache != null) {\n            releaseCache(previousCache);\n          }\n        }\n      }\n\n      if (enableTransitionTracing) {\n        // Get the transitions that were initiatized during the render\n        // and add a start transition callback for each of them\n        const state = finishedWork.memoizedState;\n        // TODO Since it's a mutable field, this should live on the FiberRoot\n        if (state.transitions === null) {\n          state.transitions = new Set([]);\n        }\n        const pendingTransitions = state.transitions;\n        const pendingSuspenseBoundaries = state.pendingSuspenseBoundaries;\n\n        // Initial render\n        if (committedTransitions !== null) {\n          committedTransitions.forEach(transition => {\n            addTransitionStartCallbackToPendingTransition({\n              transitionName: transition.name,\n              startTime: transition.startTime,\n            });\n            pendingTransitions.add(transition);\n          });\n\n          if (\n            pendingSuspenseBoundaries === null ||\n            pendingSuspenseBoundaries.size === 0\n          ) {\n            pendingTransitions.forEach(transition => {\n              addTransitionCompleteCallbackToPendingTransition({\n                transitionName: transition.name,\n                startTime: transition.startTime,\n              });\n            });\n          }\n\n          clearTransitionsForLanes(finishedRoot, committedLanes);\n        }\n\n        // If there are no more pending suspense boundaries we\n        // clear the transitions because they are all complete.\n        if (\n          pendingSuspenseBoundaries === null ||\n          pendingSuspenseBoundaries.size === 0\n        ) {\n          state.transitions = null;\n        }\n      }\n      break;\n    }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (\n          finishedWork.alternate !== null &&\n          finishedWork.alternate.memoizedState !== null &&\n          finishedWork.alternate.memoizedState.cachePool !== null\n        ) {\n          previousCache = finishedWork.alternate.memoizedState.cachePool.pool;\n        }\n        let nextCache: Cache | null = null;\n        if (\n          finishedWork.memoizedState !== null &&\n          finishedWork.memoizedState.cachePool !== null\n        ) {\n          nextCache = finishedWork.memoizedState.cachePool.pool;\n        }\n        // Retain/release the cache used for pending (suspended) nodes.\n        // Note that this is only reached in the non-suspended/visible case:\n        // when the content is suspended/hidden, the retain/release occurs\n        // via the parent Suspense component (see case above).\n        if (nextCache !== previousCache) {\n          if (nextCache != null) {\n            retainCache(nextCache);\n          }\n          if (previousCache != null) {\n            releaseCache(previousCache);\n          }\n        }\n      }\n\n      if (enableTransitionTracing) {\n        const isFallback = finishedWork.memoizedState;\n        const queue = (finishedWork.updateQueue: any);\n        const rootMemoizedState = finishedRoot.current.memoizedState;\n\n        if (queue !== null) {\n          // We have one instance of the pendingSuspenseBoundaries map.\n          // We only need one because we update it during the commit phase.\n          // We instantiate a new Map if we haven't already\n          if (rootMemoizedState.pendingSuspenseBoundaries === null) {\n            rootMemoizedState.pendingSuspenseBoundaries = new Map();\n          }\n\n          if (isFallback) {\n            const transitions = queue.transitions;\n            let prevTransitions = finishedWork.memoizedState.transitions;\n            // Add all the transitions saved in the update queue during\n            // the render phase (ie the transitions associated with this boundary)\n            // into the transitions set.\n            if (transitions !== null) {\n              if (prevTransitions === null) {\n                // We only have one instance of the transitions set\n                // because we update it only during the commit phase. We\n                // will create the set on a as needed basis in the commit phase\n                finishedWork.memoizedState.transitions = prevTransitions = new Set();\n              }\n\n              transitions.forEach(transition => {\n                prevTransitions.add(transition);\n              });\n            }\n          }\n        }\n\n        commitTransitionProgress(finishedRoot, finishedWork);\n\n        finishedWork.updateQueue = null;\n      }\n\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (finishedWork.alternate !== null) {\n          previousCache = finishedWork.alternate.memoizedState.cache;\n        }\n        const nextCache = finishedWork.memoizedState.cache;\n        // Retain/release the cache. In theory the cache component\n        // could be \"borrowing\" a cache instance owned by some parent,\n        // in which case we could avoid retaining/releasing. But it\n        // is non-trivial to determine when that is the case, so we\n        // always retain/release.\n        if (nextCache !== previousCache) {\n          retainCache(nextCache);\n          if (previousCache != null) {\n            releaseCache(previousCache);\n          }\n        }\n      }\n      break;\n    }\n  }\n}\n\nexport function commitPassiveUnmountEffects(firstChild: Fiber): void {\n  nextEffect = firstChild;\n  commitPassiveUnmountEffects_begin();\n}\n\nfunction commitPassiveUnmountEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const child = fiber.child;\n\n    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const fiberToDelete = deletions[i];\n          nextEffect = fiberToDelete;\n          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n            fiberToDelete,\n            fiber,\n          );\n        }\n\n        if (deletedTreeCleanUpLevel >= 1) {\n          // A fiber was deleted from this parent fiber, but it's still part of\n          // the previous (alternate) parent fiber's list of children. Because\n          // children are a linked list, an earlier sibling that's still alive\n          // will be connected to the deleted fiber via its `alternate`:\n          //\n          //   live fiber\n          //   --alternate--> previous live fiber\n          //   --sibling--> deleted fiber\n          //\n          // We can't disconnect `alternate` on nodes that haven't been deleted\n          // yet, but we can disconnect the `sibling` and `child` pointers.\n          const previousFiber = fiber.alternate;\n          if (previousFiber !== null) {\n            let detachedChild = previousFiber.child;\n            if (detachedChild !== null) {\n              previousFiber.child = null;\n              do {\n                const detachedSibling = detachedChild.sibling;\n                detachedChild.sibling = null;\n                detachedChild = detachedSibling;\n              } while (detachedChild !== null);\n            }\n          }\n        }\n\n        nextEffect = fiber;\n      }\n    }\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffects_complete();\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      commitPassiveUnmountOnFiber(fiber);\n      resetCurrentDebugFiberInDEV();\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork: Fiber): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n      }\n      break;\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n  deletedSubtreeRoot: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n    setCurrentDebugFiberInDEV(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentDebugFiberInDEV();\n\n    const child = fiber.child;\n    // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n    if (child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n        deletedSubtreeRoot,\n      );\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n  deletedSubtreeRoot: Fiber,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const sibling = fiber.sibling;\n    const returnFiber = fiber.return;\n\n    if (deletedTreeCleanUpLevel >= 2) {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    } else {\n      // This is the default branch (level 0). We do not recursively clear all\n      // the fiber fields. Only the root of the deleted subtree.\n      if (fiber === deletedSubtreeRoot) {\n        detachFiberAfterEffects(fiber);\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      sibling.return = returnFiber;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n): void {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n        recordPassiveEffectDuration(current);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n      }\n      break;\n    }\n    // TODO: run passive unmount effects when unmounting a root.\n    // Because passive unmount effects are not currently run,\n    // the cache instance owned by the root will never be freed.\n    // When effects are run, the cache should be freed here:\n    // case HostRoot: {\n    //   if (enableCache) {\n    //     const cache = current.memoizedState.cache;\n    //     releaseCache(cache);\n    //   }\n    //   break;\n    // }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      if (enableCache) {\n        if (\n          current.memoizedState !== null &&\n          current.memoizedState.cachePool !== null\n        ) {\n          const cache: Cache = current.memoizedState.cachePool.pool;\n          // Retain/release the cache used for pending (suspended) nodes.\n          // Note that this is only reached in the non-suspended/visible case:\n          // when the content is suspended/hidden, the retain/release occurs\n          // via the parent Suspense component (see case above).\n          if (cache != null) {\n            retainCache(cache);\n          }\n        }\n      }\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache = current.memoizedState.cache;\n        releaseCache(cache);\n      }\n      break;\n    }\n  }\n}\n\n// TODO: Reuse reappearLayoutEffects traversal here?\nfunction invokeLayoutEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookLayout | HookHasEffect, fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookPassive | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n      }\n    }\n  }\n}\n\nexport {\n  commitPlacement,\n  commitAttachRef,\n  commitDetachRef,\n  invokeLayoutEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokePassiveEffectUnmountInDEV,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\n\nimport {HostComponent, HostText} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {\n  findFiberRoot,\n  getBoundingRect,\n  getInstanceFromNode,\n  getTextContent,\n  isHiddenSubtree,\n  matchAccessibilityRole,\n  setFocusIfFocusable,\n  setupIntersectionObserver,\n  supportsTestSelectors,\n} from './ReactFiberHostConfig';\n\nlet COMPONENT_TYPE = 0b000;\nlet HAS_PSEUDO_CLASS_TYPE = 0b001;\nlet ROLE_TYPE = 0b010;\nlet TEST_NAME_TYPE = 0b011;\nlet TEXT_TYPE = 0b100;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\ntype Type = Symbol | number;\n\ntype ComponentSelector = {|\n  $$typeof: Type,\n  value: React$AbstractComponent<empty, mixed>,\n|};\n\ntype HasPseudoClassSelector = {|\n  $$typeof: Type,\n  value: Array<Selector>,\n|};\n\ntype RoleSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TextSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TestNameSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype Selector =\n  | ComponentSelector\n  | HasPseudoClassSelector\n  | RoleSelector\n  | TextSelector\n  | TestNameSelector;\n\nexport function createComponentSelector(\n  component: React$AbstractComponent<empty, mixed>,\n): ComponentSelector {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component,\n  };\n}\n\nexport function createHasPseudoClassSelector(\n  selectors: Array<Selector>,\n): HasPseudoClassSelector {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors,\n  };\n}\n\nexport function createRoleSelector(role: string): RoleSelector {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role,\n  };\n}\n\nexport function createTextSelector(text: string): TextSelector {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text,\n  };\n}\n\nexport function createTestNameSelector(id: string): TestNameSelector {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id,\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot: Instance): Fiber {\n  const maybeFiber = getInstanceFromNode((hostRoot: any));\n  if (maybeFiber != null) {\n    if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n      throw new Error(\n        'Invalid host root specified. Should be either a React container or a node with a testname attribute.',\n      );\n    }\n\n    return ((maybeFiber: any): Fiber);\n  } else {\n    const fiberRoot = findFiberRoot(hostRoot);\n\n    if (fiberRoot === null) {\n      throw new Error(\n        'Could not find React container within specified host subtree.',\n      );\n    }\n\n    // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n    return ((fiberRoot: any).stateNode.current: Fiber);\n  }\n}\n\nfunction matchSelector(fiber: Fiber, selector: Selector): boolean {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n      break;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(\n        fiber,\n        ((selector: any): HasPseudoClassSelector).value,\n      );\n    case ROLE_TYPE:\n      if (fiber.tag === HostComponent) {\n        const node = fiber.stateNode;\n        if (\n          matchAccessibilityRole(node, ((selector: any): RoleSelector).value)\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEXT_TYPE:\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n        const textContent = getTextContent(fiber);\n        if (\n          textContent !== null &&\n          textContent.indexOf(((selector: any): TextSelector).value) >= 0\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEST_NAME_TYPE:\n      if (fiber.tag === HostComponent) {\n        const dataTestID = fiber.memoizedProps['data-testname'];\n        if (\n          typeof dataTestID === 'string' &&\n          dataTestID.toLowerCase() ===\n            ((selector: any): TestNameSelector).value.toLowerCase()\n        ) {\n          return true;\n        }\n      }\n      break;\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector: Selector): string | null {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      const displayName = getComponentNameFromType(selector.value) || 'Unknown';\n      return `<${displayName}>`;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return `:has(${selectorToString(selector) || ''})`;\n    case ROLE_TYPE:\n      return `[role=\"${((selector: any): RoleSelector).value}\"]`;\n    case TEXT_TYPE:\n      return `\"${((selector: any): TextSelector).value}\"`;\n    case TEST_NAME_TYPE:\n      return `[data-testname=\"${((selector: any): TestNameSelector).value}\"]`;\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n}\n\nfunction findPaths(root: Fiber, selectors: Array<Selector>): Array<Fiber> {\n  const matchingFibers: Array<Fiber> = [];\n\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n}\n\n// Same as findPaths but with eager bailout on first match\nfunction hasMatchingPaths(root: Fiber, selectors: Array<Selector>): boolean {\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function findAllNodes(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<Instance> {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const instanceRoots: Array<Instance> = [];\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const node = ((stack[index++]: any): Fiber);\n    if (node.tag === HostComponent) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n      instanceRoots.push(node.stateNode);\n    } else {\n      let child = node.child;\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\n\nexport function getFindAllNodesFailureDescription(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): string | null {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n\n  let maxSelectorIndex: number = 0;\n  const matchedNames = [];\n\n  // The logic of this loop should be kept in sync with findPaths()\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    const selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    const unmatchedNames = [];\n    for (let i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return (\n      'findAllNodes was able to match part of the selector:\\n' +\n      `  ${matchedNames.join(' > ')}\\n\\n` +\n      'No matching component was found for:\\n' +\n      `  ${unmatchedNames.join(' > ')}`\n    );\n  }\n\n  return null;\n}\n\nexport type BoundingRect = {|\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n|};\n\nexport function findBoundingRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<BoundingRect> {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const boundingRects: Array<BoundingRect> = [];\n  for (let i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (let i = boundingRects.length - 1; i > 0; i--) {\n    const targetRect = boundingRects[i];\n    const targetLeft = targetRect.x;\n    const targetRight = targetLeft + targetRect.width;\n    const targetTop = targetRect.y;\n    const targetBottom = targetTop + targetRect.height;\n\n    for (let j = i - 1; j >= 0; j--) {\n      if (i !== j) {\n        const otherRect = boundingRects[j];\n        const otherLeft = otherRect.x;\n        const otherRight = otherLeft + otherRect.width;\n        const otherTop = otherRect.y;\n        const otherBottom = otherTop + otherRect.height;\n\n        // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (\n          targetLeft >= otherLeft &&\n          targetTop >= otherTop &&\n          targetRight <= otherRight &&\n          targetBottom <= otherBottom\n        ) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetLeft === otherLeft &&\n          targetRect.width === otherRect.width &&\n          !(otherBottom < targetTop) &&\n          !(otherTop > targetBottom)\n        ) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetTop === otherTop &&\n          targetRect.height === otherRect.height &&\n          !(otherRight < targetLeft) &&\n          !(otherLeft > targetRight)\n        ) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\n\nexport function focusWithin(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): boolean {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n    if (fiber.tag === HostComponent) {\n      const node = fiber.stateNode;\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n    let child = fiber.child;\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\n\nconst commitHooks: Array<Function> = [];\n\nexport function onCommitRoot(): void {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(commitHook => commitHook());\n  }\n}\n\nexport type IntersectionObserverOptions = Object;\n\nexport type ObserveVisibleRectsCallback = (\n  intersections: Array<{ratio: number, rect: BoundingRect}>,\n) => void;\n\nexport function observeVisibleRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n  callback: (intersections: Array<{ratio: number, rect: BoundingRect}>) => void,\n  options?: IntersectionObserverOptions,\n): {|disconnect: () => void|} {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const {disconnect, observe, unobserve} = setupIntersectionObserver(\n    instanceRoots,\n    callback,\n    options,\n  );\n\n  // When React mutates the host environment, we may need to change what we're listening to.\n  const commitHook = () => {\n    const nextInstanceRoots = findAllNodes(hostRoot, selectors);\n\n    instanceRoots.forEach(target => {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n\n    nextInstanceRoots.forEach(target => {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n\n  return {\n    disconnect: () => {\n      // Stop listening for React mutations:\n      const index = commitHooks.indexOf(commitHook);\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      }\n\n      // Disconnect the host observer:\n      disconnect();\n    },\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactFiber.old';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nimport {warnsIfNotActing} from './ReactFiberHostConfig';\n\nconst {ReactCurrentActQueue} = ReactSharedInternals;\n\nexport function isLegacyActEnvironment(fiber: Fiber) {\n  if (__DEV__) {\n    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n    // act environment whenever `jest` is defined, but you can still turn off\n    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n    // to false.\n\n    const isReactActEnvironmentGlobal =\n      // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\n        ? IS_REACT_ACT_ENVIRONMENT\n        : undefined;\n\n    // $FlowExpectedError - Flow doesn't know about jest\n    const jestIsDefined = typeof jest !== 'undefined';\n    return (\n      warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false\n    );\n  }\n  return false;\n}\n\nexport function isConcurrentActEnvironment() {\n  if (__DEV__) {\n    const isReactActEnvironmentGlobal =\n      // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\n        ? IS_REACT_ACT_ENVIRONMENT\n        : undefined;\n\n    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n      // TODO: Include link to relevant documentation page.\n      console.error(\n        'The current testing environment is not configured to support ' +\n          'act(...)',\n      );\n    }\n    return isReactActEnvironmentGlobal;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Flags} from './ReactFiberFlags';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {EventPriority} from './ReactEventPriorities.old';\nimport type {\n  PendingTransitionCallbacks,\n  TransitionObject,\n  Transition,\n} from './ReactFiberTracingMarkerComponent.old';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerNestedUpdateScheduledHook,\n  deferRenderPhaseUpdateToNextBatch,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  disableSchedulerTimeoutInWorkLoop,\n  enableStrictEffects,\n  skipUnmountedBoundaries,\n  enableUpdaterTracking,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport is from 'shared/objectIs';\n\nimport {\n  // Aliased because `act` will override and push to an internal queue\n  scheduleCallback as Scheduler_scheduleCallback,\n  cancelCallback as Scheduler_cancelCallback,\n  shouldYield,\n  requestPaint,\n  now,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\nimport {\n  flushSyncCallbacks,\n  flushSyncCallbacksOnlyInLegacyMode,\n  scheduleSyncCallback,\n  scheduleLegacySyncCallback,\n} from './ReactFiberSyncTaskQueue.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\n\nimport {\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  afterActiveInstanceBlur,\n  getCurrentEventPriority,\n  supportsMicrotasks,\n  errorHydratingContainer,\n  scheduleMicrotask,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {didSuspendOrErrorWhileHydratingDEV} from './ReactFiberHydrationContext.old';\nimport {NoMode, ProfileMode, ConcurrentMode} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Profiler,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  Incomplete,\n  StoreConsistency,\n  HostEffectMask,\n  ForceClientRender,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  MountPassiveDev,\n  MountLayoutDev,\n} from './ReactFiberFlags';\nimport {\n  NoLanes,\n  NoLane,\n  SyncLane,\n  NoTimestamp,\n  claimNextTransitionLane,\n  claimNextRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  includesBlockingLane,\n  includesExpiredLane,\n  getNextLanes,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootEntangled,\n  markRootFinished,\n  getHighestPriorityLane,\n  addFiberToLanesMap,\n  movePendingFibersToMemoized,\n  addTransitionToLanesMap,\n  getTransitionsForLanes,\n} from './ReactFiberLane.old';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  lowerEventPriority,\n  lanesToEventPriority,\n} from './ReactEventPriorities.old';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationEffects,\n  commitLayoutEffects,\n  commitMutationEffects,\n  commitPassiveEffectDurations,\n  commitPassiveMountEffects,\n  commitPassiveUnmountEffects,\n  invokeLayoutEffectMountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectUnmountInDEV,\n  reportUncaughtErrorInDEV,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactFiberClassUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {\n  createCapturedValueAtFiber,\n  type CapturedValue,\n} from './ReactCapturedValue';\nimport {\n  push as pushToStack,\n  pop as popFromStack,\n  createCursor,\n} from './ReactFiberStack.old';\nimport {\n  enqueueConcurrentRenderForLane,\n  finishQueueingConcurrentUpdates,\n} from './ReactFiberConcurrentUpdates.old';\n\nimport {\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  resetNestedUpdateFlag,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  isDevToolsPresent,\n  markCommitStarted,\n  markCommitStopped,\n  markComponentRenderStopped,\n  markComponentSuspended,\n  markComponentErrored,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n  onCommitRoot as onCommitRootDevTools,\n  onPostCommitRoot as onPostCommitRootDevTools,\n} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\nimport {releaseCache} from './ReactFiberCacheComponent.old';\nimport {\n  isLegacyActEnvironment,\n  isConcurrentActEnvironment,\n} from './ReactFiberAct.old';\nimport {processTransitionCallbacks} from './ReactFiberTracingMarkerComponent.old';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  ReactCurrentBatchConfig,\n  ReactCurrentActQueue,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b000;\nconst BatchedContext = /*               */ 0b001;\nconst RenderContext = /*                */ 0b010;\nconst CommitContext = /*                */ 0b100;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6;\nconst RootInProgress = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\nconst RootDidNotComplete = 6;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\nexport let subtreeRenderLanes: Lanes = NoLanes;\nconst subtreeRenderLanesCursor: StackCursor<Lanes> = createCursor(NoLanes);\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootInProgress;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\nlet workInProgressRootIncludedLanes: Lanes = NoLanes;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootInterleavedUpdatedLanes: Lanes = NoLanes;\n// Lanes that were updated during the render phase (*not* an interleaved event).\nlet workInProgressRootRenderPhaseUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n// Errors that are thrown during the render phase.\nlet workInProgressRootConcurrentErrors: Array<\n  CapturedValue<mixed>,\n> | null = null;\n// These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\nlet workInProgressRootRecoverableErrors: Array<\n  CapturedValue<mixed>,\n> | null = null;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nlet workInProgressTransitions: Array<Transition> | null = null;\nexport function getWorkInProgressTransitions() {\n  return workInProgressTransitions;\n}\n\nlet currentPendingTransitionCallbacks: PendingTransitionCallbacks | null = null;\n\nexport function addTransitionStartCallbackToPendingTransition(\n  transition: TransitionObject,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: [],\n        transitionComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionStart === null) {\n      currentPendingTransitionCallbacks.transitionStart = [];\n    }\n\n    currentPendingTransitionCallbacks.transitionStart.push(transition);\n  }\n}\n\nexport function addTransitionCompleteCallbackToPendingTransition(\n  transition: TransitionObject,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionComplete: [],\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionComplete === null) {\n      currentPendingTransitionCallbacks.transitionComplete = [];\n    }\n\n    currentPendingTransitionCallbacks.transitionComplete.push(transition);\n  }\n}\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\n// Only used when enableProfilerNestedUpdateScheduledHook is true;\n// to track which root is currently committing layout effects.\nlet rootCommittingMutationOrLayoutEffects: FiberRoot | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\nlet pendingPassiveEffectsRemainingLanes: Lanes = NoLanes;\nlet pendingPassiveTransitions: Array<Transition> | null = null;\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\nlet isFlushingPassiveEffects = false;\nlet didScheduleUpdateDuringPassiveEffects = false;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\nlet rootWithPassiveNestedUpdates: FiberRoot | null = null;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventTransitionLane: Lanes = NoLanes;\n\nlet isRunningInsertionEffect = false;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (__DEV__ && ReactCurrentBatchConfig.transition !== null) {\n      const transition = ReactCurrentBatchConfig.transition;\n      if (!transition._updatedFibers) {\n        transition._updatedFibers = new Set();\n      }\n\n      transition._updatedFibers.add(fiber);\n    }\n    // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n    return currentEventTransitionLane;\n  }\n\n  // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const updateLane: Lane = (getCurrentUpdatePriority(): any);\n  if (updateLane !== NoLane) {\n    return updateLane;\n  }\n\n  // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const eventLane: Lane = (getCurrentEventPriority(): any);\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  }\n\n  return claimNextRetryLane();\n}\n\nexport function scheduleUpdateOnFiber(\n  root: FiberRoot,\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n) {\n  checkForNestedUpdates();\n\n  if (__DEV__) {\n    if (isRunningInsertionEffect) {\n      console.error('useInsertionEffect must not schedule updates.');\n    }\n  }\n\n  if (__DEV__) {\n    if (isFlushingPassiveEffects) {\n      didScheduleUpdateDuringPassiveEffects = true;\n    }\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (\n    (executionContext & RenderContext) !== NoLanes &&\n    root === workInProgressRoot\n  ) {\n    // This update was dispatched during the render phase. This is a mistake\n    // if the update originates from user space (with the exception of local\n    // hook updates, which are handled differently and don't reach this\n    // function), but there are some internal React features that use this as\n    // an implementation detail, like selective hydration.\n    warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n    // Track lanes that were updated during the render phase\n    workInProgressRootRenderPhaseUpdatedLanes = mergeLanes(\n      workInProgressRootRenderPhaseUpdatedLanes,\n      lane,\n    );\n  } else {\n    // This is a normal update, scheduled from outside the render phase. For\n    // example, during an input event.\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        addFiberToLanesMap(root, fiber, lane);\n      }\n    }\n\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      if (\n        (executionContext & CommitContext) !== NoContext &&\n        root === rootCommittingMutationOrLayoutEffects\n      ) {\n        if (fiber.mode & ProfileMode) {\n          let current = fiber;\n          while (current !== null) {\n            if (current.tag === Profiler) {\n              const {id, onNestedUpdateScheduled} = current.memoizedProps;\n              if (typeof onNestedUpdateScheduled === 'function') {\n                onNestedUpdateScheduled(id);\n              }\n            }\n            current = current.return;\n          }\n        }\n      }\n    }\n\n    if (enableTransitionTracing) {\n      const transition = ReactCurrentBatchConfig.transition;\n      if (transition !== null) {\n        if (transition.startTime === -1) {\n          transition.startTime = now();\n        }\n\n        addTransitionToLanesMap(root, transition, lane);\n      }\n    }\n\n    if (root === workInProgressRoot) {\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root. Unless the\n      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n      // phase update. In that case, we don't treat render phase updates as if\n      // they were interleaved, for backwards compat reasons.\n      if (\n        deferRenderPhaseUpdateToNextBatch ||\n        (executionContext & RenderContext) === NoContext\n      ) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(\n          workInProgressRootInterleavedUpdatedLanes,\n          lane,\n        );\n      }\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        markRootSuspended(root, workInProgressRootRenderLanes);\n      }\n    }\n\n    ensureRootIsScheduled(root, eventTime);\n    if (\n      lane === SyncLane &&\n      executionContext === NoContext &&\n      (fiber.mode & ConcurrentMode) === NoMode &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      // Flush the synchronous work now, unless we're already working or inside\n      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n      // without immediately flushing it. We only do this for user-initiated\n      // updates, to preserve historical behavior of legacy mode.\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function scheduleInitialHydrationOnRoot(\n  root: FiberRoot,\n  lane: Lane,\n  eventTime: number,\n) {\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\n  // schedule the initial hydration of a root that has just been created. Most\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\n  //\n  // The main reason for this separate path, though, is to distinguish the\n  // initial children from subsequent updates. In fully client-rendered roots\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n  // updates, but hydration roots are special because the initial render must\n  // match what was rendered on the server.\n  const current = root.current;\n  current.lanes = lane;\n  markRootUpdated(root, lane, eventTime);\n  ensureRootIsScheduled(root, eventTime);\n}\n\nexport function isUnsafeClassRenderPhaseUpdate(fiber: Fiber) {\n  // Check if this is a render phase update. Only called by class components,\n  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n  return (\n    // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n    // decided not to enable it.\n    (!deferRenderPhaseUpdateToNextBatch ||\n      (fiber.mode & ConcurrentMode) === NoMode) &&\n    (executionContext & RenderContext) !== NoContext\n  );\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  }\n\n  // We use the highest priority lane to represent the priority of the callback.\n  const newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n  // Check if there's an existing task. We may be able to reuse it.\n  const existingCallbackPriority = root.callbackPriority;\n  if (\n    existingCallbackPriority === newCallbackPriority &&\n    // Special case related to `act`. If the currently scheduled task is a\n    // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n    // on the `act` queue.\n    !(\n      __DEV__ &&\n      ReactCurrentActQueue.current !== null &&\n      existingCallbackNode !== fakeActCallbackNode\n    )\n  ) {\n    if (__DEV__) {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (\n        existingCallbackNode == null &&\n        existingCallbackPriority !== SyncLane\n      ) {\n        console.error(\n          'Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n    // The priority hasn't changed. We can reuse the existing task. Exit.\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if (__DEV__ && ReactCurrentActQueue.isBatchingLegacy !== null) {\n        ReactCurrentActQueue.didScheduleLegacyUpdate = true;\n      }\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n    if (supportsMicrotasks) {\n      // Flush the queue in a microtask.\n      if (__DEV__ && ReactCurrentActQueue.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(() => {\n          // In Safari, appending an iframe forces microtasks to run.\n          // https://github.com/facebook/react/issues/22459\n          // We don't support running callbacks in the middle of render\n          // or commit so we need to check against that.\n          if (\n            (executionContext & (RenderContext | CommitContext)) ===\n            NoContext\n          ) {\n            // Note that this would still prematurely flush the callbacks\n            // if this happens outside render or commit phase (e.g. in an event).\n            flushSyncCallbacks();\n          }\n        });\n      }\n    } else {\n      // Flush the queue in an Immediate task.\n      scheduleCallback(ImmediateSchedulerPriority, flushSyncCallbacks);\n    }\n    newCallbackNode = null;\n  } else {\n    let schedulerPriorityLevel;\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediateSchedulerPriority;\n        break;\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingSchedulerPriority;\n        break;\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdleSchedulerPriority;\n        break;\n      default:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n    }\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    resetNestedUpdateFlag();\n  }\n\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next lanes to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n  const shouldTimeSlice =\n    !includesBlockingLane(root, lanes) &&\n    !includesExpiredLane(root, lanes) &&\n    (disableSchedulerTimeoutInWorkLoop || !didTimeout);\n  let exitStatus = shouldTimeSlice\n    ? renderRootConcurrent(root, lanes)\n    : renderRootSync(root, lanes);\n  if (exitStatus !== RootInProgress) {\n    if (exitStatus === RootErrored) {\n      // If something threw an error, try rendering one more time. We'll\n      // render synchronously to block concurrent data mutations, and we'll\n      // includes all pending updates are included. If it still fails after\n      // the second attempt, we'll give up and commit the resulting tree.\n      const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n      }\n    }\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    if (exitStatus === RootDidNotComplete) {\n      // The render unwound without completing the tree. This happens in special\n      // cases where need to exit the current render without producing a\n      // consistent tree or committing.\n      //\n      // This should only happen during a concurrent render, not a discrete or\n      // synchronous update. We should have already checked for this when we\n      // unwound the stack.\n      markRootSuspended(root, lanes);\n    } else {\n      // The render completed.\n\n      // Check if this render may have yielded to a concurrent event, and if so,\n      // confirm that any newly rendered stores are consistent.\n      // TODO: It's possible that even a concurrent render may never have yielded\n      // to the main thread, if it was fast enough, or if it expired. We could\n      // skip the consistency check in that case, too.\n      const renderWasConcurrent = !includesBlockingLane(root, lanes);\n      const finishedWork: Fiber = (root.current.alternate: any);\n      if (\n        renderWasConcurrent &&\n        !isRenderConsistentWithExternalStores(finishedWork)\n      ) {\n        // A store was mutated in an interleaved event. Render again,\n        // synchronously, to block further mutations.\n        exitStatus = renderRootSync(root, lanes);\n\n        // We need to check again if something threw\n        if (exitStatus === RootErrored) {\n          const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n          if (errorRetryLanes !== NoLanes) {\n            lanes = errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n            // We assume the tree is now consistent because we didn't yield to any\n            // concurrent events.\n          }\n        }\n        if (exitStatus === RootFatalErrored) {\n          const fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw fatalError;\n        }\n      }\n\n      // We now have a consistent tree. The next step is either to commit it,\n      // or, if something suspended, wait to commit it after a timeout.\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      finishConcurrentRender(root, exitStatus, lanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction recoverFromConcurrentError(root, errorRetryLanes) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n\n  // Before rendering again, save the errors from the previous attempt.\n  const errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n  if (isRootDehydrated(root)) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    const rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n    if (__DEV__) {\n      errorHydratingContainer(root.containerInfo);\n    }\n  }\n\n  const exitStatus = renderRootSync(root, errorRetryLanes);\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n\n    // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n    const errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt;\n    // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  } else {\n    // The UI failed to recover.\n  }\n  return exitStatus;\n}\n\nexport function queueRecoverableErrors(errors: Array<CapturedValue<mixed>>) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    workInProgressRootRecoverableErrors.push.apply(\n      workInProgressRootRecoverableErrors,\n      errors,\n    );\n  }\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored: {\n      throw new Error('Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(\n              null,\n              root,\n              workInProgressRootRecoverableErrors,\n              workInProgressTransitions,\n            ),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(\n              null,\n              root,\n              workInProgressRootRecoverableErrors,\n              workInProgressTransitions,\n            ),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unknown root exit status.');\n    }\n  }\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork: Fiber): boolean {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  let node: Fiber = finishedWork;\n  while (true) {\n    if (node.flags & StoreConsistency) {\n      const updateQueue: FunctionComponentUpdateQueue | null = (node.updateQueue: any);\n      if (updateQueue !== null) {\n        const checks = updateQueue.stores;\n        if (checks !== null) {\n          for (let i = 0; i < checks.length; i++) {\n            const check = checks[i];\n            const getSnapshot = check.getSnapshot;\n            const renderedValue = check.value;\n            try {\n              if (!is(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n    const child = node.child;\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n    if (node === finishedWork) {\n      return true;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n  return true;\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(\n    suspendedLanes,\n    workInProgressRootInterleavedUpdatedLanes,\n  );\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    syncNestedUpdateFlag();\n  }\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  flushPassiveEffects();\n\n  let lanes = getNextLanes(root, NoLanes);\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  let exitStatus = renderRootSync(root, lanes);\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  if (exitStatus === RootDidNotComplete) {\n    throw new Error('Root did not complete. This is a bug in React.');\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(\n    root,\n    workInProgressRootRecoverableErrors,\n    workInProgressTransitions,\n  );\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now());\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DefaultEventPriority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n    if (\n      executionContext === NoContext &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C, D) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\ndeclare function flushSync<R>(fn: () => R): R;\n// eslint-disable-next-line no-redeclare\ndeclare function flushSync(): void;\n// eslint-disable-next-line no-redeclare\nexport function flushSync(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (\n    rootWithPendingPassiveEffects !== null &&\n    rootWithPendingPassiveEffects.tag === LegacyRoot &&\n    (executionContext & (RenderContext | CommitContext)) === NoContext\n  ) {\n    flushPassiveEffects();\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function isAlreadyRendering() {\n  // Used by the renderer to print a warning if certain APIs are called from\n  // the wrong context.\n  return (\n    __DEV__ &&\n    (executionContext & (RenderContext | CommitContext)) !== NoContext\n  );\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function pushRenderLanes(fiber: Fiber, lanes: Lanes) {\n  pushToStack(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(\n    workInProgressRootIncludedLanes,\n    lanes,\n  );\n}\n\nexport function popRenderLanes(fiber: Fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  popFromStack(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes): Fiber {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      const current = interruptedWork.alternate;\n      unwindInterruptedWork(\n        current,\n        interruptedWork,\n        workInProgressRootRenderLanes,\n      );\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  const rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootRenderPhaseUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n\n  finishQueueingConcurrentUpdates();\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n\n  return rootWorkInProgress;\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      if (enableSchedulingProfiler) {\n        markComponentRenderStopped();\n\n        if (\n          thrownValue !== null &&\n          typeof thrownValue === 'object' &&\n          typeof thrownValue.then === 'function'\n        ) {\n          const wakeable: Wakeable = (thrownValue: any);\n          markComponentSuspended(\n            erroredWork,\n            wakeable,\n            workInProgressRootRenderLanes,\n          );\n        } else {\n          markComponentErrored(\n            erroredWork,\n            thrownValue,\n            workInProgressRootRenderLanes,\n          );\n        }\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootInProgress ||\n    workInProgressRootExitStatus === RootSuspended ||\n    workInProgressRootExitStatus === RootErrored\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError(error: CapturedValue<mixed>) {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    throw new Error(\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootInProgress;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(current, completedWork, subtreeRenderLanes);\n\n      // Because this fiber did not complete, don't reset its lanes.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      } else {\n        // We've unwound all the way to the root.\n        workInProgressRootExitStatus = RootDidNotComplete;\n        workInProgress = null;\n        return;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(\n  root: FiberRoot,\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\n  transitions: Array<Transition> | null,\n) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  const previousUpdateLanePriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(\n      root,\n      recoverableErrors,\n      transitions,\n      previousUpdateLanePriority,\n    );\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(\n  root: FiberRoot,\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\n  transitions: Array<Transition> | null,\n  renderPriorityLevel: EventPriority,\n) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    if (__DEV__) {\n      if (lanes === NoLanes) {\n        console.error(\n          'root.finishedLanes should not be empty during a commit. This is a ' +\n            'bug in React.',\n        );\n      }\n    }\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (finishedWork === root.current) {\n    throw new Error(\n      'Cannot commit the same tree as before. This error is likely caused by ' +\n        'a bug in React. Please file an issue.',\n    );\n  }\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n  root.callbackPriority = NoLane;\n\n  // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n  if (\n    (finishedWork.subtreeFlags & PassiveMask) !== NoFlags ||\n    (finishedWork.flags & PassiveMask) !== NoFlags\n  ) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      pendingPassiveEffectsRemainingLanes = remainingLanes;\n      // workInProgressTransitions might be overwritten, so we want\n      // to store it in pendingPassiveTransitions until they get processed\n      // We need to pass this through as an argument to commitRoot\n      // because workInProgressTransitions might have changed between\n      // the previous render and commit if we throttle the commit\n      // with setTimeout\n      pendingPassiveTransitions = transitions;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n        return null;\n      });\n    }\n  }\n\n  // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n  const subtreeHasEffects =\n    (finishedWork.subtreeFlags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n  const rootHasEffect =\n    (finishedWork.flags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = null;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    const shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(\n      root,\n      finishedWork,\n    );\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      // Track the root here, rather than in commitLayoutEffects(), because of ref setters.\n      // Updates scheduled during ref detachment should also be flagged.\n      rootCommittingMutationOrLayoutEffects = root;\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    commitMutationEffects(root, finishedWork, lanes);\n\n    if (enableCreateEventHandleAPI) {\n      if (shouldFireAfterActiveInstanceBlur) {\n        afterActiveInstanceBlur();\n      }\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStarted(lanes);\n      }\n    }\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStarted(lanes);\n    }\n    commitLayoutEffects(finishedWork, root, lanes);\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStopped();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      rootCommittingMutationOrLayoutEffects = null;\n    }\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    executionContext = prevExecutionContext;\n\n    // Reset the priority to the previous non-sync value.\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  } else {\n    // There were no passive effects, so we can immediately release the cache\n    // pool for this render.\n    releaseRootPooledCache(root, remainingLanes);\n    if (__DEV__) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n    }\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (recoverableErrors !== null) {\n    // There were errors during this render, but recovered from them without\n    // needing to surface it to the UI. We log them here.\n    const onRecoverableError = root.onRecoverableError;\n    for (let i = 0; i < recoverableErrors.length; i++) {\n      const recoverableError = recoverableErrors[i];\n      const componentStack = recoverableError.stack;\n      const digest = recoverableError.digest;\n      onRecoverableError(recoverableError.value, {componentStack, digest});\n    }\n  }\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n  if (\n    includesSomeLane(pendingPassiveEffectsLanes, SyncLane) &&\n    root.tag !== LegacyRoot\n  ) {\n    flushPassiveEffects();\n  }\n\n  // Read this again, since a passive effect might have updated it\n  remainingLanes = root.pendingLanes;\n  if (includesSomeLane(remainingLanes, (SyncLane: Lane))) {\n    if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n      markNestedUpdateScheduled();\n    }\n\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbacks();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction releaseRootPooledCache(root: FiberRoot, remainingLanes: Lanes) {\n  if (enableCache) {\n    const pooledCacheLanes = (root.pooledCacheLanes &= remainingLanes);\n    if (pooledCacheLanes === NoLanes) {\n      // None of the remaining work relies on the cache pool. Clear it so\n      // subsequent requests get a new cache\n      const pooledCache = root.pooledCache;\n      if (pooledCache != null) {\n        root.pooledCache = null;\n        releaseCache(pooledCache);\n      }\n    }\n  }\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    // Cache the root since rootWithPendingPassiveEffects is cleared in\n    // flushPassiveEffectsImpl\n    const root = rootWithPendingPassiveEffects;\n    // Cache and clear the remaining lanes flag; it must be reset since this\n    // method can be called from various places, not always from commitRoot\n    // where the remaining lanes are known\n    const remainingLanes = pendingPassiveEffectsRemainingLanes;\n    pendingPassiveEffectsRemainingLanes = NoLanes;\n\n    const renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    const priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    const previousPriority = getCurrentUpdatePriority();\n\n    try {\n      ReactCurrentBatchConfig.transition = null;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig.transition = prevTransition;\n\n      // Once passive effects have run for the tree - giving components a\n      // chance to retain cache instances they use - release the pooled\n      // cache at the root (if there is one)\n      releaseRootPooledCache(root, remainingLanes);\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  // Cache and clear the transitions flag\n  const transitions = pendingPassiveTransitions;\n  pendingPassiveTransitions = null;\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Cannot flush passive effects while already rendering.');\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = true;\n    didScheduleUpdateDuringPassiveEffects = false;\n\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current, lanes, transitions);\n\n  // TODO: Move to commitPassiveMountEffects\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbacks();\n\n  if (enableTransitionTracing) {\n    const prevPendingTransitionCallbacks = currentPendingTransitionCallbacks;\n    const prevRootTransitionCallbacks = root.transitionCallbacks;\n    if (\n      prevPendingTransitionCallbacks !== null &&\n      prevRootTransitionCallbacks !== null\n    ) {\n      // TODO(luna) Refactor this code into the Host Config\n      // TODO(luna) The end time here is not necessarily accurate\n      // because passive effects could be called before paint\n      // (synchronously) or after paint (normally). We need\n      // to come up with a way to get the correct end time for both cases.\n      // One solution is in the host config, if the passive effects\n      // have not yet been run, make a call to flush the passive effects\n      // right after paint.\n      const endTime = now();\n      currentPendingTransitionCallbacks = null;\n\n      scheduleCallback(IdleSchedulerPriority, () =>\n        processTransitionCallbacks(\n          prevPendingTransitionCallbacks,\n          endTime,\n          prevRootTransitionCallbacks,\n        ),\n      );\n    }\n  }\n\n  if (__DEV__) {\n    // If additional passive effects were scheduled, increment a counter. If this\n    // exceeds the limit, we'll fire a warning.\n    if (didScheduleUpdateDuringPassiveEffects) {\n      if (root === rootWithPassiveNestedUpdates) {\n        nestedPassiveUpdateCount++;\n      } else {\n        nestedPassiveUpdateCount = 0;\n        rootWithPassiveNestedUpdates = root;\n      }\n    } else {\n      nestedPassiveUpdateCount = 0;\n    }\n    isFlushingPassiveEffects = false;\n    didScheduleUpdateDuringPassiveEffects = false;\n  }\n\n  // TODO: Move to commitPassiveMountEffects\n  onPostCommitRootDevTools(root);\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  const root = enqueueUpdate(rootFiber, update, (SyncLane: Lane));\n  const eventTime = requestEventTime();\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function captureCommitPhaseError(\n  sourceFiber: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  error: mixed,\n) {\n  if (__DEV__) {\n    reportUncaughtErrorInDEV(error);\n    setIsRunningInsertionEffect(false);\n  }\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = null;\n  if (skipUnmountedBoundaries) {\n    fiber = nearestMountedAncestor;\n  } else {\n    fiber = sourceFiber.return;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        const root = enqueueUpdate(fiber, update, (SyncLane: Lane));\n        const eventTime = requestEventTime();\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n\n  if (__DEV__) {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    console.error(\n      'Internal React error: Attempted to capture a commit phase error ' +\n        'inside a detached tree. This indicates a bug in React. Likely ' +\n        'causes include deleting the same fiber more than once, committing an ' +\n        'already-finished tree, or an inconsistent return pointer.\\n\\n' +\n        'Error message:\\n\\n%s',\n      error,\n    );\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  switch (boundaryFiber.tag) {\n    case SuspenseComponent:\n      retryCache = boundaryFiber.stateNode;\n      const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n      break;\n    case SuspenseListComponent:\n      retryCache = boundaryFiber.stateNode;\n      break;\n    default:\n      throw new Error(\n        'Pinged unknown suspense boundary type. ' +\n          'This is probably a bug in React.',\n      );\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n\n    throw new Error(\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(\n  fiber: Fiber,\n  hasPassiveEffects: boolean,\n) {\n  if (__DEV__ && enableStrictEffects) {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n\n    setCurrentDebugFiberInDEV(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(\n        fiber,\n        MountPassiveDev,\n        invokePassiveEffectUnmountInDEV,\n      );\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction invokeEffectsInDev(\n  firstChild: Fiber,\n  fiberFlags: Flags,\n  invokeEffectFn: (fiber: Fiber) => void,\n): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n\n    let current = firstChild;\n    let subtreeRoot = null;\n    while (current !== null) {\n      const primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n      if (\n        current !== subtreeRoot &&\n        current.child !== null &&\n        primarySubtreeFlag !== NoFlags\n      ) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nexport function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber: Fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        didSuspendOrErrorWhileHydratingDEV() ||\n        (originalError !== null &&\n          typeof originalError === 'object' &&\n          typeof originalError.then === 'function')\n      ) {\n        // Don't replay promises.\n        // Don't replay errors if we are hydrating and have already suspended or handled an error\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(current, unitOfWork, workInProgressRootRenderLanes);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        if (\n          typeof replayError === 'object' &&\n          replayError !== null &&\n          replayError._suppressLogging &&\n          typeof originalError === 'object' &&\n          originalError !== null &&\n          !originalError._suppressLogging\n        ) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      }\n      // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n      throw originalError;\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentNameFromFiber(fiber) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport function restorePendingUpdaters(root: FiberRoot, lanes: Lanes): void {\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      const memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(schedulingFiber => {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      });\n\n      // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\n\nconst fakeActCallbackNode = {};\nfunction scheduleCallback(priorityLevel, callback) {\n  if (__DEV__) {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    const actQueue = ReactCurrentActQueue.current;\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return Scheduler_scheduleCallback(priorityLevel, callback);\n    }\n  } else {\n    // In production, always call Scheduler. This function will be stripped out.\n    return Scheduler_scheduleCallback(priorityLevel, callback);\n  }\n}\n\nfunction cancelCallback(callbackNode) {\n  if (__DEV__ && callbackNode === fakeActCallbackNode) {\n    return;\n  }\n  // In production, always call Scheduler. This function will be stripped out.\n  return Scheduler_cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && ReactCurrentActQueue.current !== null;\n}\n\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (fiber.mode & ConcurrentMode) {\n      if (!isConcurrentActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n    } else {\n      // Legacy mode has additional cases where we suppress a warning.\n      if (!isLegacyActEnvironment(fiber)) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n      if (executionContext !== NoContext) {\n        // Legacy mode doesn't warn if the update is batched, i.e.\n        // batchedUpdates or flushSync.\n        return;\n      }\n      if (\n        fiber.tag !== FunctionComponent &&\n        fiber.tag !== ForwardRef &&\n        fiber.tag !== SimpleMemoComponent\n      ) {\n        // For backwards compatibility with pre-hooks code, legacy mode only\n        // warns for updates that originate from a hook.\n        return;\n      }\n    }\n\n    if (ReactCurrentActQueue.current === null) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentNameFromFiber(fiber),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root: FiberRoot): void {\n  if (__DEV__) {\n    if (\n      root.tag !== LegacyRoot &&\n      isConcurrentActEnvironment() &&\n      ReactCurrentActQueue.current === null\n    ) {\n      console.error(\n        'A suspended resource finished loading inside a test, but the event ' +\n          'was not wrapped in act(...).\\n\\n' +\n          'When testing, code that resolves suspended data should be wrapped ' +\n          'into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* finish loading suspended data */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n      );\n    }\n  }\n}\n\nexport function setIsRunningInsertionEffect(isRunning: boolean): void {\n  if (__DEV__) {\n    isRunningInsertionEffect = isRunning;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactFragment, ReactPortal, ReactScope} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {\n  OffscreenProps,\n  OffscreenInstance,\n} from './ReactFiberOffscreenComponent';\n\nimport {\n  createRootStrictEffectsByDefault,\n  enableCache,\n  enableStrictEffects,\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableLegacyHidden,\n  enableSyncDefaultUpdates,\n  allowConcurrentByDefault,\n  enableTransitionTracing,\n  enableDebugTracing,\n} from 'shared/ReactFeatureFlags';\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  ConcurrentUpdatesByDefaultMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effects are no longer valid.\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement;\n\n  // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(\n  tag: RootTag,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      if (enableStrictEffects) {\n        mode |= StrictEffectsMode;\n      }\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n    if (\n      // We only use this flag for our repo tests to check both behaviors.\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n      !enableSyncDefaultUpdates ||\n      // Only for internal experiments.\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\n    ) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        if (enableLegacyHidden) {\n          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_TRACING_MARKER_TYPE:\n        if (enableTransitionTracing) {\n          return createFiberFromTracingMarker(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        if (enableDebugTracing) {\n          fiberTag = Mode;\n          mode |= DebugTracingMode;\n          break;\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n\n        throw new Error(\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            `but got: ${type == null ? type : typeof type}.${info}`,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error(\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n        typeof pendingProps.id,\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  const primaryChildInstance: OffscreenInstance = {\n    isHidden: false,\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromCache(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromTracingMarker(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(TracingMarkerComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_TRACING_MARKER_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {\n  FiberRoot,\n  SuspenseHydrationCallbacks,\n  TransitionTracingCallbacks,\n} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {\n  PendingSuspenseBoundaries,\n  Transition,\n} from './ReactFiberTracingMarkerComponent.old';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLane,\n  NoLanes,\n  NoTimestamp,\n  TotalLanes,\n  createLaneMap,\n} from './ReactFiberLane.old';\nimport {\n  enableSuspenseCallback,\n  enableCache,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableUpdaterTracking,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {initializeUpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport {LegacyRoot, ConcurrentRoot} from './ReactRootTags';\nimport {createCache, retainCache} from './ReactFiberCacheComponent.old';\n\nexport type RootState = {\n  element: any,\n  isDehydrated: boolean,\n  cache: Cache,\n  pendingSuspenseBoundaries: PendingSuspenseBoundaries | null,\n  transitions: Set<Transition> | null,\n};\n\nfunction FiberRootNode(\n  containerInfo,\n  tag,\n  hydrate,\n  identifierPrefix,\n  onRecoverableError,\n) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  this.identifierPrefix = identifierPrefix;\n  this.onRecoverableError = onRecoverableError;\n\n  if (enableCache) {\n    this.pooledCache = null;\n    this.pooledCacheLanes = NoLanes;\n  }\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (enableTransitionTracing) {\n    this.transitionCallbacks = null;\n    const transitionLanesMap = (this.transitionLanes = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      transitionLanesMap.push(null);\n    }\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  if (enableUpdaterTracking) {\n    this.memoizedUpdaters = new Set();\n    const pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  initialChildren: ReactNodeList,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  // TODO: We have several of these arguments that are conceptually part of the\n  // host config, but because they are passed in at runtime, we have to thread\n  // them through the root constructor. Perhaps we should put them all into a\n  // single type, like a DynamicHostConfig that is defined by the renderer.\n  identifierPrefix: string,\n  onRecoverableError: null | ((error: mixed) => void),\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(\n    containerInfo,\n    tag,\n    hydrate,\n    identifierPrefix,\n    onRecoverableError,\n  ): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  if (enableTransitionTracing) {\n    root.transitionCallbacks = transitionCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(\n    tag,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  if (enableCache) {\n    const initialCache = createCache();\n    retainCache(initialCache);\n\n    // The pooledCache is a fresh cache instance that is used temporarily\n    // for newly mounted boundaries during a render. In general, the\n    // pooledCache is always cleared from the root at the end of a render:\n    // it is either released when render commits, or moved to an Offscreen\n    // component if rendering suspends. Because the lifetime of the pooled\n    // cache is distinct from the main memoizedState.cache, it must be\n    // retained separately.\n    root.pooledCache = initialCache;\n    retainCache(initialCache);\n    const initialState: RootState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: initialCache,\n      transitions: null,\n      pendingSuspenseBoundaries: null,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  } else {\n    const initialState: RootState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: (null: any), // not enabled yet\n      transitions: null,\n      pendingSuspenseBoundaries: null,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\n//\n// TODO: 18.0.0 has not been released to NPM;\n// It exists as a placeholder so that DevTools can support work tag changes between releases.\n// When we next publish a release, update the matching TODO in backend/renderer.js\n// TODO: This module is used both by the release scripts and to expose a version\n// at runtime. We should instead inject the version number as part of the build\n// process, and use the ReactVersions.js module as the single source of truth.\nexport default '18.1.0';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {REACT_PORTAL_TYPE} from 'shared/ReactSymbols';\nimport {checkKeyStringCoercion} from 'shared/CheckStringCoercion';\n\nimport type {ReactNodeList, ReactPortal} from 'shared/ReactTypes';\n\nexport function createPortal(\n  children: ReactNodeList,\n  containerInfo: any,\n  // TODO: figure out the API for cross-renderer implementation.\n  implementation: any,\n  key: ?string = null,\n): ReactPortal {\n  if (__DEV__) {\n    checkKeyStringCoercion(key);\n  }\n  return {\n    // This tag allow us to uniquely identify this as a React Portal\n    $$typeof: REACT_PORTAL_TYPE,\n    key: key == null ? null : '' + key,\n    children,\n    containerInfo,\n    implementation,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Fiber,\n  SuspenseHydrationCallbacks,\n  TransitionTracingCallbacks,\n} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport isArray from 'shared/isArray';\nimport {enableSchedulingProfiler} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {\n  injectInternals,\n  markRenderScheduled,\n  onScheduleRoot,\n} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  scheduleInitialHydrationOnRoot,\n  flushRoot,\n  batchedUpdates,\n  flushSync,\n  isAlreadyRendering,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n} from './ReactFiberLane.old';\nimport {\n  getCurrentUpdatePriority,\n  runWithPriority,\n} from './ReactEventPriorities.old';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport ReactVersion from 'shared/ReactVersion';\nexport {registerMutableSourceForHydration} from './ReactMutableSource.old';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPseudoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      throw new Error('Unable to find node on an unmounted component.');\n    } else {\n      const keys = Object.keys(component).join(',');\n      throw new Error(\n        `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        throw new Error('Unable to find node on an unmounted component.');\n      } else {\n        const keys = Object.keys(component).join(',');\n        throw new Error(\n          `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictLegacyMode) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictLegacyMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  identifierPrefix: string,\n  onRecoverableError: (error: mixed) => void,\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): OpaqueRoot {\n  const hydrate = false;\n  const initialChildren = null;\n  return createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onRecoverableError,\n    transitionCallbacks,\n  );\n}\n\nexport function createHydrationContainer(\n  initialChildren: ReactNodeList,\n  // TODO: Remove `callback` when we delete legacy mode.\n  callback: ?Function,\n  containerInfo: Container,\n  tag: RootTag,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  identifierPrefix: string,\n  onRecoverableError: (error: mixed) => void,\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): OpaqueRoot {\n  const hydrate = true;\n  const root = createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onRecoverableError,\n    transitionCallbacks,\n  );\n\n  // TODO: Move this to FiberRoot constructor\n  root.context = getContextForSubtree(null);\n\n  // Schedule the initial render. In a hydration root, this is different from\n  // a regular update because the initial render must match was was rendered\n  // on the server.\n  // NOTE: This update intentionally doesn't have a payload. We're only using\n  // the update to schedule work on the root fiber (and, for legacy roots, to\n  // enqueue the callback if one is provided).\n  const current = root.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n  const update = createUpdate(eventTime, lane);\n  update.callback =\n    callback !== undefined && callback !== null ? callback : null;\n  enqueueUpdate(current, update, lane);\n  scheduleInitialHydrationOnRoot(root, lane, eventTime);\n\n  return root;\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentNameFromFiber(ReactCurrentFiberCurrent) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  const root = enqueueUpdate(current, update, lane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, current, lane, eventTime);\n    entangleTransitions(root, current, lane);\n  }\n\n  return lane;\n}\n\nexport {\n  batchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushControlled,\n  flushSync,\n  isAlreadyRendering,\n  flushPassiveEffects,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot: {\n      const root: FiberRoot = fiber.stateNode;\n      if (isRootDehydrated(root)) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      flushSync(() => {\n        const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          const eventTime = requestEventTime();\n          scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n        }\n      });\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = SyncLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n    }\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thenables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptDiscreteHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const lane = SyncLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const lane = SelectiveHydrationLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const lane = requestUpdateLane(fiber);\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport {getCurrentUpdatePriority, runWithPriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldErrorImpl = fiber => null;\n\nexport function shouldError(fiber: Fiber): ?boolean {\n  return shouldErrorImpl(fiber);\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setErrorHandler = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  setErrorHandler = (newShouldErrorImpl: Fiber => ?boolean) => {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setErrorHandler,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion,\n  });\n}\n"],"names":["assign","Object","formatProdErrorMessage","code","url","i","arguments","length","encodeURIComponent","get","key","_reactInternals","set","value","ReactSharedInternals","React","enableNewReconciler","enableLazyContextPropagation","enableLegacyHidden","enableSuspenseAvoidThisFallback","enableSchedulingProfiler","__PROFILE__","enableProfilerTimer","enableProfilerCommitHooks","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_SERVER_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","name","getContextName","type","getComponentNameFromType","$$typeof","context","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","context2","_globalName","getComponentNameFromFiber","fiber","tag","NoFlags","PerformedWork","Placement","Update","ChildDeletion","ContentReset","Callback","DidCapture","ForceClientRender","Ref","Snapshot","Passive","Hydrating","Visibility","StoreConsistency","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","PassiveStatic","BeforeMutationMask","enableCreateEventHandleAPI","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","getInstance","assertIsMounted","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","stateNode","current","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","findCurrentHostFiberWithNoPortals","findCurrentHostFiberWithNoPortalsImpl","isArrayImpl","Array","isArray","getPublicInstance","$$$hostConfig","getRootHostContext","getChildHostContext","prepareForCommit","resetAfterCommit","createInstance","appendInitialChild","finalizeInitialChildren","prepareUpdate","shouldSetTextContent","createTextInstance","scheduleTimeout","cancelTimeout","noTimeout","isPrimaryRenderer","warnsIfNotActing","supportsMutation","supportsPersistence","supportsHydration","getInstanceFromNode","beforeActiveInstanceBlur","afterActiveInstanceBlur","preparePortalMount","prepareScopeUpdate","getInstanceFromScope","getCurrentEventPriority","detachDeletedInstance","supportsMicrotasks","scheduleMicrotask","supportsTestSelectors","findFiberRoot","getBoundingRect","getTextContent","isHiddenSubtree","matchAccessibilityRole","setFocusIfFocusable","setupIntersectionObserver","appendChild","appendChildToContainer","commitTextUpdate","commitMount","commitUpdate","insertBefore","insertInContainerBefore","removeChild","removeChildFromContainer","resetTextContent","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","clearContainer","cloneInstance","createContainerChildSet","appendChildToContainerChildSet","finalizeContainerChildren","replaceContainerChildren","cloneHiddenInstance","cloneHiddenTextInstance","canHydrateInstance","canHydrateTextInstance","canHydrateSuspenseInstance","isSuspenseInstancePending","isSuspenseInstanceFallback","getSuspenseInstanceFallbackErrorDetails","registerSuspenseInstanceRetry","getNextHydratableSibling","getFirstHydratableChild","getFirstHydratableChildWithinContainer","getFirstHydratableChildWithinSuspenseInstance","hydrateInstance","hydrateTextInstance","hydrateSuspenseInstance","getNextHydratableInstanceAfterSuspenseInstance","commitHydratedContainer","commitHydratedSuspenseInstance","clearSuspenseBoundary","clearSuspenseBoundaryFromContainer","shouldDeleteUnhydratedTailInstances","didNotMatchHydratedContainerTextInstance","didNotMatchHydratedTextInstance","didNotHydrateInstanceWithinContainer","didNotHydrateInstanceWithinSuspenseInstance","didNotHydrateInstance","didNotFindHydratableInstanceWithinContainer","didNotFindHydratableTextInstanceWithinContainer","didNotFindHydratableSuspenseInstanceWithinContainer","didNotFindHydratableInstanceWithinSuspenseInstance","didNotFindHydratableTextInstanceWithinSuspenseInstance","didNotFindHydratableSuspenseInstanceWithinSuspenseInstance","didNotFindHydratableInstance","didNotFindHydratableTextInstance","didNotFindHydratableSuspenseInstance","errorHydratingContainer","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","source","ownerFn","undefined","Error","stack","trim","reentry","describeNativeComponentFrame","fn","construct","disableNativeComponentFrames","control","previousPrepareStackTrace","prepareStackTrace","Fake","defineProperty","prototype","Reflect","call","sample","sampleLines","split","controlLines","s","c","frame","replace","includes","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","hasOwnProperty","ReactDebugCurrentFrame","valueStack","index","createCursor","defaultValue","pop","cursor","push","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","Component","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","instance","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","NoMode","ConcurrentMode","ProfileMode","StrictLegacyMode","clz32","Math","clz32Fallback","log","LN2","asUint","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","getLabelForLane","lane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","getHighestPriorityLane","getNextLanes","root","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","entangledLanes","entanglements","pickArbitraryLaneIndex","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getHighestPriorityPendingLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyNonUrgentLanes","UrgentLanes","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","higherPriorityLane","createLaneMap","initial","laneMap","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootFinished","remainingLanes","noLongerPendingLanes","mutableReadLanes","markRootEntangled","rootEntangledLanes","getBumpedLaneForHydration","renderLanes","renderLane","addFiberToLanesMap","isDevToolsPresent","pendingUpdatersLaneMap","updaters","add","movePendingFibersToMemoized","memoizedUpdaters","size","forEach","has","clear","getTransitionsForLanes","DiscreteEventPriority","ContinuousEventPriority","DefaultEventPriority","IdleEventPriority","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","runWithPriority","priority","previousPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","scheduleCallback","Scheduler","cancelCallback","shouldYield","requestPaint","now","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","rendererID","injectedHook","injectedProfilingHooks","__REACT_DEVTOOLS_GLOBAL_HOOK__","injectInternals","internals","hook","isDisabled","supportsFiber","getLaneLabelMap","injectProfilingHooks","inject","err","checkDCE","onCommitRoot","eventPriority","onCommitFiberRoot","didError","schedulerPriority","ImmediateSchedulerPriority","UserBlockingSchedulerPriority","NormalSchedulerPriority","IdleSchedulerPriority","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","profilingHooks","map","Map","label","markCommitStarted","markCommitStopped","markComponentRenderStarted","markComponentRenderStopped","markComponentPassiveEffectMountStarted","markComponentPassiveEffectMountStopped","markComponentPassiveEffectUnmountStarted","markComponentPassiveEffectUnmountStopped","markComponentLayoutEffectMountStarted","markComponentLayoutEffectMountStopped","markComponentLayoutEffectUnmountStarted","markComponentLayoutEffectUnmountStopped","markComponentErrored","thrownValue","markComponentSuspended","wakeable","markLayoutEffectsStarted","markLayoutEffectsStopped","markPassiveEffectsStarted","markPassiveEffectsStopped","markRenderStarted","markRenderYielded","markRenderStopped","markRenderScheduled","markForceUpdateScheduled","markStateUpdateScheduled","is","y","objectIs","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","callback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","error","slice","isRootDehydrated","currentState","memoizedState","isDehydrated","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","isForkedChild","warnIfNotHydrating","getForksAtLevel","getTreeId","overflow","idWithLeadingBit","id","getLeadingBit","toString","pushTreeFork","totalChildren","pushTreeId","baseIdWithLeadingBit","baseOverflow","baseLength","getBitLength","baseId","slot","numberOfOverflowBits","newOverflowBits","newOverflow","restOfBaseId","restOfBaseLength","restOfLength","restOfNewBits","newBits","pushMaterializedTreeId","returnFiber","numberOfForks","slotIndex","number","popTreeContext","getSuspendedTreeContext","restoreSuspendedTreeContext","suspendedContext","hydrationParentFiber","nextHydratableInstance","isHydrating","didSuspendOrErrorDEV","hydrationErrors","enterHydrationState","parentInstance","containerInfo","reenterHydrationStateFromDehydratedSuspenseInstance","suspenseInstance","treeContext","deleteHydratableInstance","warnUnhydratedInstance","childToDelete","createFiberFromHostInstanceForDeletion","deletions","insertNonHydratedInstance","warnNonhydratedInstance","tryHydrate","nextInstance","props","pendingProps","text","textInstance","suspenseState","dehydrated","retryLane","dehydratedFragment","createFiberFromDehydratedFragment","shouldClientRenderOnMismatch","mode","throwOnHydrationMismatch","tryToClaimNextHydratableInstance","firstAttemptedInstance","prevHydrationParentFiber","prepareToHydrateHostInstance","rootContainerInstance","hostContext","shouldWarnIfMismatchDev","updatePayload","memoizedProps","updateQueue","prepareToHydrateHostTextInstance","textContent","shouldUpdate","parentContainer","isConcurrentMode","parentType","parentProps","prepareToHydrateHostSuspenseInstance","skipPastDehydratedSuspenseInstance","popToNextHostParent","popHydrationState","warnIfUnhydratedTailNodes","hasUnhydratedTailNodes","resetHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","getIsHydrating","queueHydrationError","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","shallowEqual","objA","objB","keysA","keys","keysB","currentKey","describeFiber","getStackByFiberInDevAndProd","info","message","resetCurrentFiber","resolveDefaultProps","baseProps","defaultProps","propName","valueCursor","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","resetContextDependencies","pushProvider","providerFiber","nextValue","_currentValue","_currentValue2","popProvider","currentValue","enableServerContext","_defaultValue","scheduleContextWorkOnParentPath","propagationRoot","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependencies","dependency","firstContext","update","createUpdate","ForceUpdate","sharedQueue","shared","pending","next","parentSuspense","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","contextItem","memoizedValue","concurrentQueues","pushConcurrentUpdateQueue","finishQueueingConcurrentUpdates","lastInterleavedUpdate","interleaved","firstInterleavedUpdate","lastPendingUpdate","firstPendingUpdate","enqueueConcurrentHookUpdate","markUpdateLaneFromFiberToRoot","enqueueConcurrentHookUpdateAndEagerlyBailout","enqueueConcurrentClassUpdate","enqueueConcurrentRenderForLane","unsafe_markUpdateLaneFromFiberToRoot","sourceFiber","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","effects","cloneUpdateQueue","currentQueue","clone","enqueueUpdate","isUnsafeClassRenderPhaseUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","lastInterleaved","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","emptyRefsObject","refs","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","inst","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldProps","newProps","oldState","nextContext","shouldComponentUpdate","isPureReactComponent","adoptClassInstance","updater","setInstance","constructClassInstance","isLegacyContextConsumer","contextType","state","callComponentWillMount","componentWillMount","UNSAFE_componentWillMount","callComponentWillReceiveProps","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","mountClassInstance","getSnapshotBeforeUpdate","componentDidMount","fiberFlags","resumeMountClassInstance","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","nextUnmaskedContext","componentDidUpdate","UNSAFE_componentWillUpdate","componentWillUpdate","coerceRef","element","mixedRef","ref","_owner","owner","ownerFiber","resolvedInst","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","join","resolveLazy","lazyType","ChildReconciler","shouldTrackSideEffects","deleteChild","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","created","createFiberFromText","existing","updateElement","updateFragment","children","__DEV__","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","reconcileChildrenIterator","newChildrenIterable","iteratorFn","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","NO_CONTEXT","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","findFirstSuspended","row","revealOrder","didSuspend","HasEffect","Insertion","Layout","workInProgressSources","resetWorkInProgressVersions","mutableSource","_workInProgressVersionPrimary","_workInProgressVersionSecondary","registerMutableSourceForHydration","getVersion","_getVersion","version","_source","mutableSourceEagerHydrationData","AbortControllerLocal","enableCache","AbortController","AbortControllerShim","listeners","signal","aborted","addEventListener","listener","abort","CacheContext","Consumer","Provider","_threadCount","createCache","cache","controller","data","refCount","retainCache","releaseCache","pushCacheProvider","popCacheProvider","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","localIdCounter","globalClientIdCounter","RE_RENDER_LIMIT","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","HooksDispatcherOnMount","HooksDispatcherOnUpdate","numberOfReRenders","HooksDispatcherOnRerender","ContextOnlyDispatcher","didRenderTooFewHooks","checkDidRenderIdHook","didRenderIdHook","bailoutHooks","PassiveEffect","UpdateEffect","resetHooksAfterThrow","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","bind","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","hasEagerState","eagerState","interleavedLane","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountMutableSource","getSnapshot","subscribe","updateMutableSource","mountSyncExternalStore","getServerSnapshot","nextSnapshot","getWorkInProgressRoot","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","HookHasEffect","HookPassive","updateStoreInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","latestGetSnapshot","prevValue","mountState","dispatchSetState","updateState","rerenderState","create","destroy","deps","firstEffect","mountRef","initialValue","updateRef","mountEffectImpl","hookFlags","updateEffectImpl","prevEffect","PassiveStaticEffect","mountInsertionEffect","HookInsertion","updateInsertionEffect","mountLayoutEffect","LayoutStaticEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","concat","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","updateDeferredValue","resolvedCurrentHook","updateDeferredValueImpl","rerenderDeferredValue","shouldDeferValue","deferredLane","startTransition","setPending","options","prevTransition","currentTransition","mountTransition","isPending","start","updateTransition","rerenderTransition","mountId","identifierPrefix","treeId","localId","globalClientId","updateId","mountRefresh","refresh","refreshCache","updateRefresh","seedKey","seedValue","refreshUpdate","createLegacyQueueUpdate","enqueueLegacyQueueUpdate","entangleLegacyQueueTransitions","seededCache","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","entangleTransitionUpdate","markUpdateInDevTools","getCacheSignal","getCacheForType","resourceType","cacheForType","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","useCacheRefresh","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","markNestedUpdateScheduled","resetNestedUpdateFlag","syncNestedUpdateFlag","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","parentFiber","effectDuration","parentStateNode","recordPassiveEffectDuration","passiveEffectDuration","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","createCapturedValueAtFiber","digest","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","console","componentName","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","e","setTimeout","PossiblyWeakMap","WeakMap","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","getDerivedStateFromError","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","pingCache","threadIDs","Set","ping","pingSuspendedRoot","restorePendingUpdaters","then","attachRetryListener","suspenseBoundary","wakeables","resetSuspendedComponent","rootRenderLanes","currentSource","getNearestSuspenseBoundaryToCapture","markSuspenseBoundaryShouldCapture","currentSourceFiber","throwException","renderDidSuspendDelayIfPossible","uncaughtSuspenseError","markDidThrowWhileHydratingDEV","renderDidError","isAlreadyFailedLegacyErrorBoundary","resumedCache","peekCacheFromPool","cacheResumedFromPreviousRender","cacheFromRootCachePool","pooledCache","requestCacheFromPool","cacheFromPool","freshCache","pooledCacheLanes","pushTransition","offscreenWorkInProgress","prevCachePool","newTransitions","pool","popTransition","getSuspendedCache","getOffscreenDeferredCache","didReceiveUpdate","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","hasId","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","updateSimpleMemoComponent","createFiberFromTypeAndProps","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","prevProps","updateFunctionComponent","updateOffscreenComponent","baseLanes","cachePool","transitions","pushRenderLanes","spawnedCachePool","nextBaseLanes","prevBaseLanes","subtreeRenderLanes","updateCacheComponent","parentCache","derivedState","nextCache","updateMode","updateProfiler","markRef","updateClassComponent","hasContext","isLegacyContextProvider","pushLegacyContextProvider","resetSuspendedCurrentOnMountInLegacyMode","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","pushRootTransition","overrideState","pendingSuspenseBoundaries","recoverableError","mountHostRootWithoutHydrating","updateHostComponent","isDirectTextChild","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","hint","mountIncompleteClassComponent","mountIndeterminateComponent","SUSPENDED_MARKER","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseContext","getRemainingWorkInPrimaryTree","updateSuspenseComponent","showFallback","mountDehydratedSuspenseComponent","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","enableCPUSuspense","unstable_expectedLoadTime","mountSuspensePrimaryChildren","updateDehydratedSuspenseComponent","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","treeBaseDuration","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","subtreeFlags","retrySuspenseComponentWithoutHydrating","mountSuspenseFallbackAfterRetryWithoutHydrating","fiberMode","capturedValue","attemptHydrationAtLane","retry","retryDehydratedSuspenseBoundary","scheduleSuspenseWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","initSuspenseListRenderState","isBackwards","tail","tailMode","renderState","rendering","renderingStartTime","last","updateSuspenseListComponent","validateRevealOrder","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","updateContextProvider","providerType","newValue","oldValue","hasLegacyContextChanged","updateContextConsumer","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","hasChildWork","primaryChildLanes","beginWork","unresolvedProps","markUpdate","hadNoMutationsEffects","completedWork","didBailout","appendAllChildren","updateHostContainer","needsVisibilityToggle","isHidden","currentHostContext","oldText","newText","branches","appendAllChildrenToContainer","containerChildSet","portalOrRoot","childrenUnchanged","container","newChildSet","pendingChildren","currentInstance","recyclableInstance","newInstance","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","bubbleProperties","newChildLanes","completeDehydratedSuspenseBoundary","wasHydrated","isTimedOutSuspense","completeWork","popLegacyContext","fiberRoot","previousCache","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","fallthroughToNormalSuspensePath","nextDidTimeout","prevDidTimeout","offscreenFiber","hasInvisibleChildContext","unstable_avoidThisFallback","renderDidSuspend","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","previousSibling","popRenderLanes","nextIsHidden","prevIsHidden","unwindWork","unwindInterruptedWork","interruptedWork","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","PossiblyWeakSet","WeakSet","nextEffect","inProgressLanes","inProgressRoot","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallCommitHookLayoutEffectListMount","nearestMountedAncestor","commitHookEffectListMount","captureCommitPhaseError","safelyCallComponentWillUnmount","safelyCallComponentDidMount","safelyAttachRef","commitAttachRef","safelyDetachRef","retVal","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","commitBeforeMutationEffects_complete","setCurrentDebugFiberInDEV","commitBeforeMutationEffectsOnFiber","snapshot","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","NoHookEffect","commitPassiveEffectDurations","finishedRoot","onPostCommit","phase","outer","commitLayoutEffectOnFiber","committedLanes","onCommit","onRender","enqueuePendingPassiveProfilerEffect","commitSuspenseHydrationCallbacks","reappearLayoutEffectsOnFiber","hideOrUnhideAllChildren","hostSubtreeRoot","instanceToUse","detachFiberMutation","detachFiberAfterEffects","hostInstance","emptyPortalContainer","emptyChildSet","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","before","insertOrAppendPlacementNode","insertOrAppendPlacementNodeIntoContainer","isHost","hostParent","hostParentIsContainer","commitDeletionEffects","deletedFiber","findParent","commitDeletionEffectsOnFiber","recursivelyTraverseDeletionEffects","prevHostParent","prevHostParentIsContainer","enableSuspenseLayoutEffectSemantics","prevOffscreenSubtreeWasHidden","commitSuspenseCallback","attachSuspenseRetryListeners","retryCache","resolveRetryWakeable","commitMutationEffects","commitMutationEffectsOnFiber","recursivelyTraverseMutationEffects","commitReconciliationEffects","prevRootState","offscreenInstance","wasHidden","markCommitTimeOfFallback","offscreenBoundary","offscreenChild","disappearLayoutEffects_begin","commitLayoutEffects","commitLayoutEffects_begin","subtreeRoot","isModernRoot","newOffscreenSubtreeIsHidden","commitLayoutMountEffects_complete","newOffscreenSubtreeWasHidden","prevOffscreenSubtreeIsHidden","reappearLayoutEffects_begin","disappearLayoutEffects_complete","reappearLayoutEffects_complete","commitPassiveMountEffects","committedTransitions","commitPassiveMountEffects_begin","commitPassiveMountEffects_complete","commitPassiveMountOnFiber","commitPassiveUnmountEffects","commitPassiveUnmountEffects_begin","fiberToDelete","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","previousFiber","detachedChild","detachedSibling","commitPassiveUnmountEffects_complete","commitPassiveUnmountOnFiber","resetCurrentDebugFiberInDEV","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","symbolFor","createComponentSelector","createHasPseudoClassSelector","selectors","createRoleSelector","role","createTextSelector","createTestNameSelector","findFiberRootForHostRoot","hostRoot","maybeFiber","matchSelector","selector","hasMatchingPaths","indexOf","dataTestID","toLowerCase","selectorToString","findPaths","matchingFibers","selectorIndex","findAllNodes","instanceRoots","from","getFindAllNodesFailureDescription","maxSelectorIndex","matchedNames","unmatchedNames","findBoundingRects","boundingRects","targetRect","targetLeft","targetRight","width","targetTop","targetBottom","height","j","otherRect","otherLeft","otherRight","otherTop","otherBottom","splice","focusWithin","observeVisibleRects","disconnect","observe","unobserve","ReactCurrentActQueue","ceil","NoContext","BatchedContext","RenderContext","CommitContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","workInProgressTransitions","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveProfilerEffects","pendingPassiveEffectsRemainingLanes","pendingPassiveTransitions","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","currentEventTime","currentEventTransitionLane","isTransition","eventLane","requestRetryLane","checkForNestedUpdates","deferRenderPhaseUpdateToNextBatch","ensureRootIsScheduled","scheduleInitialHydrationOnRoot","existingCallbackNode","callbackNode","callbackPriority","newCallbackPriority","existingCallbackPriority","newCallbackNode","performSyncWorkOnRoot","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","disableSchedulerTimeoutInWorkLoop","exitStatus","renderRootConcurrent","renderRootSync","errorRetryLanes","recoverFromConcurrentError","fatalError","prepareFreshStack","renderWasConcurrent","isRenderConsistentWithExternalStores","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","rootWorkInProgress","errorsFromSecondAttempt","errors","apply","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","checks","renderedValue","markRootSuspended_dontCallThisOneDirectly","flushRoot","deferredUpdates","batchedUpdates","prevExecutionContext","discreteUpdates","d","flushSync","isAlreadyRendering","flushControlled","pushToStack","popFromStack","workInProgressRootRenderPhaseUpdatedLanes","handleError","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","prevDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","siblingFiber","recoverableErrors","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","subtreeHasEffects","rootHasEffect","releaseRootPooledCache","onCommitRootDevTools","onRecoverableError","renderPriority","flushPassiveEffectsImpl","profilerEffects","onPostCommitRootDevTools","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","timeElapsed","originalBeginWork","schedulingFiber","priorityLevel","Scheduler_scheduleCallback","Scheduler_cancelCallback","FiberNode","Number","NaN","createFiber","shouldConstruct","isReactComponent","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromCache","elements","primaryChildInstance","content","dehydratedNode","FiberRootNode","hydrate","createFiberRoot","initialChildren","hydrationCallbacks","transitionCallbacks","uninitializedFiber","initialCache","createPortal","getContextForSubtree","parentComponent","findHostInstance","hostFiber","findHostInstanceWithWarning","methodName","createContainer","createHydrationContainer","updateContainer","getPublicRootInstance","containerFiber","attemptSynchronousHydration","markRetryLaneIfNotHydrated","markRetryLaneImpl","attemptDiscreteHydration","attemptContinuousHydration","attemptHydrationAtCurrentPriority","findHostInstanceWithNoPortals","shouldErrorImpl","shouldError","shouldSuspendImpl","shouldSuspend","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","findHostInstanceByFiber","emptyFindFiberByHostInstance","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","ReactVersion"],"mappings":"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"}