{"version":3,"file":"use-sync-external-store-shim.native.production.min.js","sources":["../../../../packages/shared/objectIs.js","../../../../packages/use-sync-external-store/src/useSyncExternalStoreShimClient.js","../../../../packages/use-sync-external-store/src/useSyncExternalStoreShim.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\nimport is from 'shared/objectIs';\n\n// Intentionally not using named imports because Rollup uses dynamic\n// dispatch for CommonJS interop named imports.\nconst {useState, useEffect, useLayoutEffect, useDebugValue} = React;\n\nlet didWarnOld18Alpha = false;\nlet didWarnUncachedGetSnapshot = false;\n\n// Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\nexport function useSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  getServerSnapshot?: () => T,\n): T {\n  if (__DEV__) {\n    if (!didWarnOld18Alpha) {\n      if (React.startTransition !== undefined) {\n        didWarnOld18Alpha = true;\n        console.error(\n          'You are using an outdated, pre-release alpha of React 18 that ' +\n            'does not support useSyncExternalStore. The ' +\n            'use-sync-external-store shim will not work correctly. Upgrade ' +\n            'to a newer pre-release.',\n        );\n      }\n    }\n  }\n\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedValue = getSnapshot();\n      if (!is(value, cachedValue)) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{inst}, forceUpdate] = useState({inst: {value, getSnapshot}});\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  useLayoutEffect(() => {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({inst});\n    }\n  }, [subscribe, value, getSnapshot]);\n\n  useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({inst});\n    }\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({inst});\n      }\n    };\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n  }, [subscribe]);\n\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {useSyncExternalStore as client} from './useSyncExternalStoreShimClient';\nimport {useSyncExternalStore as server} from './useSyncExternalStoreShimServer';\nimport {isServerEnvironment} from './isServerEnvironment';\nimport {useSyncExternalStore as builtInAPI} from 'react';\n\nconst shim = isServerEnvironment ? server : client;\n\nexport const useSyncExternalStore =\n  builtInAPI !== undefined ? ((builtInAPI: any): typeof shim) : shim;\n"],"names":["is","x","y","objectIs","Object","useState","React","useEffect","useLayoutEffect","useDebugValue","useSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","value","inst","forceUpdate","checkIfSnapshotChanged","handleStoreChange","latestGetSnapshot","prevValue","nextValue","error","shim","isServerEnvironment","client","builtInAPI","undefined"],"mappings":";;;;AASA;;;;AAIA,SAASA,EAAT,CAAYC,CAAZ,EAAoBC,CAApB,EAA4B;AAC1B,SACGD,CAAC,KAAKC,CAAN,KAAYD,CAAC,KAAK,CAAN,IAAW,IAAIA,CAAJ,KAAU,IAAIC,CAArC,CAAD,IAA8CD,CAAC,KAAKA,CAAN,IAAWC,CAAC,KAAKA,CADjE;AAAA;AAGD;;AAED,MAAMC,QAAqC,GACzC,OAAOC,MAAM,CAACJ,EAAd,KAAqB,UAArB,GAAkCI,MAAM,CAACJ,EAAzC,GAA8CA,EADhD;;ACNA;;MACOK,WAAuDC;MAA7CC,YAA6CD;MAAlCE,kBAAkCF;MAAjBG,gBAAiBH;AAE9D,AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,AAAO,SAASI,oBAAT,CACLC,SADK,EAELC,WAFK;AAIL;AACA;AACA;AACAC,iBAPK,EAQF;AACH,AAeA;AACA;AACA;;;AACA,QAAMC,KAAK,GAAGF,WAAW,EAAzB;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA7CG,oBA8C2BP,QAAQ,CAAC;AAACU,IAAAA,IAAI,EAAE;AAACD,MAAAA,KAAD;AAAQF,MAAAA;AAAR;AAAP,GAAD,CA9CnC;AAAA,QA8CKG,IA9CL,gBA8CKA,IA9CL;AAAA,QA8CYC,WA9CZ;AAiDH;AACA;;;AACAR,EAAAA,eAAe,CAAC,MAAM;AACpBO,IAAAA,IAAI,CAACD,KAAL,GAAaA,KAAb;AACAC,IAAAA,IAAI,CAACH,WAAL,GAAmBA,WAAnB,CAFoB;AAKpB;AACA;AACA;;AACA,QAAIK,sBAAsB,CAACF,IAAD,CAA1B,EAAkC;AAChC;AACAC,MAAAA,WAAW,CAAC;AAACD,QAAAA;AAAD,OAAD,CAAX;AACD;AACF,GAZc,EAYZ,CAACJ,SAAD,EAAYG,KAAZ,EAAmBF,WAAnB,CAZY,CAAf;AAcAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,QAAIU,sBAAsB,CAACF,IAAD,CAA1B,EAAkC;AAChC;AACAC,MAAAA,WAAW,CAAC;AAACD,QAAAA;AAAD,OAAD,CAAX;AACD;;AACD,UAAMG,iBAAiB,GAAG,MAAM;AAC9B;AACA;AACA;AACA;AAEA;AACA;AACA,UAAID,sBAAsB,CAACF,IAAD,CAA1B,EAAkC;AAChC;AACAC,QAAAA,WAAW,CAAC;AAACD,UAAAA;AAAD,SAAD,CAAX;AACD;AACF,KAZD,CAPc;;;AAqBd,WAAOJ,SAAS,CAACO,iBAAD,CAAhB;AACD,GAtBQ,EAsBN,CAACP,SAAD,CAtBM,CAAT;AAwBAF,EAAAA,aAAa,CAACK,KAAD,CAAb;AACA,SAAOA,KAAP;AACD;;AAED,SAASG,sBAAT,CAAgCF,IAAhC,EAAsC;AACpC,QAAMI,iBAAiB,GAAGJ,IAAI,CAACH,WAA/B;AACA,QAAMQ,SAAS,GAAGL,IAAI,CAACD,KAAvB;;AACA,MAAI;AACF,UAAMO,SAAS,GAAGF,iBAAiB,EAAnC;AACA,WAAO,CAACnB,QAAE,CAACoB,SAAD,EAAYC,SAAZ,CAAV;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF;;AC7HD,MAAMC,IAAI,GAAGC,CAA+BC,oBAA5C;AAEA,MAAaf,sBAAoB,GAC/BgB,0BAAU,KAAKC,SAAf,GAA6BD,0BAA7B,GAA8DH,IADzD;;;;"}