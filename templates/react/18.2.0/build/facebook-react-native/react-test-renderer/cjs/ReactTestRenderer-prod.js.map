{"version":3,"file":"ReactTestRenderer-prod.js","sources":["../../../../packages/shared/assign.js","../../../../packages/shared/ReactInstanceMap.js","../../../../packages/shared/ReactSharedInternals.js","../../../../packages/shared/forks/ReactFeatureFlags.test-renderer.native.js","../../../../packages/react-reconciler/src/ReactWorkTags.js","../../../../packages/shared/ReactSymbols.js","../../../../packages/shared/getComponentNameFromType.js","../../../../packages/react-reconciler/src/getComponentNameFromFiber.js","../../../../packages/react-reconciler/src/ReactFiberFlags.js","../../../../packages/react-reconciler/src/ReactFiberTreeReflection.js","../../../../packages/shared/isArray.js","../../../../packages/react-reconciler/src/Scheduler.js","../../../../packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","../../../../packages/react-reconciler/src/ReactTypeOfMode.js","../../../../packages/react-reconciler/src/clz32.js","../../../../packages/react-reconciler/src/ReactFiberLane.old.js","../../../../packages/react-reconciler/src/ReactEventPriorities.old.js","../../../../packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js","../../../../packages/react-test-renderer/src/ReactTestHostConfig.js","../../../../packages/shared/ReactComponentStackFrame.js","../../../../packages/shared/hasOwnProperty.js","../../../../packages/shared/checkPropTypes.js","../../../../packages/react-reconciler/src/ReactFiberStack.old.js","../../../../packages/react-reconciler/src/ReactFiberContext.old.js","../../../../packages/react-reconciler/src/ReactRootTags.js","../../../../packages/shared/objectIs.js","../../../../packages/react-reconciler/src/ReactFiberSyncTaskQueue.old.js","../../../../packages/react-reconciler/src/ReactFiberShellHydration.js","../../../../packages/react-reconciler/src/ReactFiberTreeContext.old.js","../../../../packages/react-reconciler/src/ReactFiberHydrationContext.old.js","../../../../packages/react-reconciler/src/ReactFiberTransition.js","../../../../packages/shared/shallowEqual.js","../../../../packages/react-reconciler/src/ReactFiberComponentStack.js","../../../../packages/react-reconciler/src/ReactCurrentFiber.js","../../../../packages/react-reconciler/src/ReactFiberLazyComponent.old.js","../../../../packages/react-reconciler/src/ReactFiberNewContext.old.js","../../../../packages/react-reconciler/src/ReactFiberConcurrentUpdates.old.js","../../../../packages/react-reconciler/src/ReactFiberClassUpdateQueue.old.js","../../../../packages/react-reconciler/src/ReactFiberClassComponent.old.js","../../../../packages/react-reconciler/src/ReactChildFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberHostContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","../../../../packages/react-reconciler/src/ReactHookEffectTags.js","../../../../packages/react-reconciler/src/ReactMutableSource.old.js","../../../../packages/react-reconciler/src/ReactFiberCacheComponent.old.js","../../../../packages/react-reconciler/src/ReactFiberHooks.old.js","../../../../packages/react-reconciler/src/ReactProfilerTimer.old.js","../../../../packages/react-reconciler/src/ReactCapturedValue.js","../../../../packages/react-reconciler/src/ReactFiberErrorDialog.js","../../../../packages/react-reconciler/src/ReactFiberErrorLogger.js","../../../../packages/react-reconciler/src/ReactFiberThrow.old.js","../../../../packages/react-reconciler/src/ReactFiberTransition.old.js","../../../../packages/react-reconciler/src/ReactFiberBeginWork.old.js","../../../../packages/react-reconciler/src/ReactFiberCompleteWork.old.js","../../../../packages/react-reconciler/src/ReactFiberUnwindWork.old.js","../../../../packages/react-reconciler/src/ReactFiberCommitWork.old.js","../../../../packages/react-reconciler/src/ReactFiberAct.old.js","../../../../packages/react-reconciler/src/ReactFiberWorkLoop.old.js","../../../../packages/react-reconciler/src/ReactFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberRoot.old.js","../../../../packages/shared/ReactVersion.js","../../../../packages/react-reconciler/src/ReactFiberReconciler.old.js","../../../../packages/react-test-renderer/src/ReactTestRenderer.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst assign = Object.assign;\n\nexport default assign;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\nimport typeof * as ExportsType from './ReactFeatureFlags.test-renderer';\n\nexport const debugRenderPhaseSideEffectsForStrictMode = false;\nexport const enableDebugTracing = false;\nexport const enableSchedulingProfiler = false;\nexport const warnAboutDeprecatedLifecycles = true;\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = false;\nexport const enableProfilerTimer = __PROFILE__;\nexport const enableProfilerCommitHooks = __PROFILE__;\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\nexport const enableProfilerNestedUpdateScheduledHook = false;\nexport const enableUpdaterTracking = false;\nexport const enableCache = true;\nexport const enableCacheElement = true;\nexport const disableJavaScriptURLs = false;\nexport const disableCommentsAsDOMContainers = true;\nexport const disableInputAttributeSyncing = false;\nexport const enableSchedulerDebugging = false;\nexport const enableScopeAPI = false;\nexport const enableCreateEventHandleAPI = false;\nexport const enableSuspenseCallback = false;\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\nexport const warnAboutStringRefs = false;\nexport const disableLegacyContext = false;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\nexport const enableTrustedTypesIntegration = false;\nexport const disableTextareaChildren = false;\nexport const disableModulePatternComponents = false;\nexport const warnAboutSpreadingKeyToJSX = false;\nexport const enableComponentStackLocations = false;\nexport const enableLegacyFBSupport = false;\nexport const enableFilterEmptyStringAttributesDOM = false;\nexport const disableNativeComponentFrames = false;\nexport const skipUnmountedBoundaries = false;\nexport const deletedTreeCleanUpLevel = 3;\nexport const enableSuspenseLayoutEffectSemantics = false;\nexport const enableGetInspectorDataForInstanceInProduction = false;\nexport const enableNewReconciler = false;\nexport const deferRenderPhaseUpdateToNextBatch = false;\nexport const enableSuspenseAvoidThisFallback = false;\nexport const enableSuspenseAvoidThisFallbackFizz = false;\nexport const enableCPUSuspense = false;\nexport const enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay = true;\nexport const enableClientRenderFallbackOnTextMismatch = true;\nexport const enableStrictEffects = false;\nexport const createRootStrictEffectsByDefault = false;\nexport const enableUseRefAccessWarning = false;\n\nexport const disableSchedulerTimeoutInWorkLoop = false;\nexport const enableLazyContextPropagation = false;\nexport const enableLegacyHidden = false;\nexport const enableSyncDefaultUpdates = true;\nexport const allowConcurrentByDefault = true;\n\nexport const consoleManagedByDevToolsDuringStrictMode = false;\nexport const enableServerContext = false;\nexport const enableUseMutableSource = false;\n\nexport const enableTransitionTracing = false;\nexport const enableSymbolFallbackForWWW = false;\n\n// Flow magic to verify the exports of this file match the original version.\n// eslint-disable-next-line no-unused-vars\ntype Check<_X, Y: _X, X: Y = _X> = null;\n// eslint-disable-next-line no-unused-expressions\n(null: Check<ExportsType, FeatureFlagsType>);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const ScopeComponent = 21;\nexport const OffscreenComponent = 22;\nexport const LegacyHiddenComponent = 23;\nexport const CacheComponent = 24;\nexport const TracingMarkerComponent = 25;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types.\nexport const REACT_ELEMENT_TYPE = Symbol.for('react.element');\nexport const REACT_PORTAL_TYPE = Symbol.for('react.portal');\nexport const REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nexport const REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nexport const REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nexport const REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nexport const REACT_CONTEXT_TYPE = Symbol.for('react.context');\nexport const REACT_SERVER_CONTEXT_TYPE = Symbol.for('react.server_context');\nexport const REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nexport const REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nexport const REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nexport const REACT_MEMO_TYPE = Symbol.for('react.memo');\nexport const REACT_LAZY_TYPE = Symbol.for('react.lazy');\nexport const REACT_SCOPE_TYPE = Symbol.for('react.scope');\nexport const REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\n  'react.debug_trace_mode',\n);\nexport const REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nexport const REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');\nexport const REACT_CACHE_TYPE = Symbol.for('react.cache');\nexport const REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');\nexport const REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = Symbol.for(\n  'react.default_value',\n);\n\nconst MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n  REACT_SERVER_CONTEXT_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {\n  enableServerContext,\n  enableTransitionTracing,\n  enableCache,\n} from './ReactFeatureFlags';\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const displayName = (outerType: any).displayName;\n  if (displayName) {\n    return displayName;\n  }\n  const functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName;\n}\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\n// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\nexport default function getComponentNameFromType(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentNameFromType(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n    case REACT_CACHE_TYPE:\n      if (enableCache) {\n        return 'Cache';\n      }\n    // eslint-disable-next-line no-fallthrough\n    case REACT_TRACING_MARKER_TYPE:\n      if (enableTransitionTracing) {\n        return 'TracingMarker';\n      }\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        const outerName = (type: any).displayName || null;\n        if (outerName !== null) {\n          return outerName;\n        }\n        return getComponentNameFromType(type.type) || 'Memo';\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentNameFromType(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n      case REACT_SERVER_CONTEXT_TYPE:\n        if (enableServerContext) {\n          const context2 = ((type: any): ReactContext<any>);\n          return (context2.displayName || context2._globalName) + '.Provider';\n        }\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {enableLegacyHidden} from 'shared/ReactFeatureFlags';\n\nimport {\n  FunctionComponent,\n  ClassComponent,\n  IndeterminateComponent,\n  HostRoot,\n  HostPortal,\n  HostComponent,\n  HostText,\n  Fragment,\n  Mode,\n  ContextConsumer,\n  ContextProvider,\n  ForwardRef,\n  Profiler,\n  SuspenseComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  DehydratedFragment,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nexport default function getComponentNameFromFiber(fiber: Fiber): string | null {\n  const {tag, type} = fiber;\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n    case ContextConsumer:\n      const context: ReactContext<any> = (type: any);\n      return getContextName(context) + '.Consumer';\n    case ContextProvider:\n      const provider: ReactProviderType<any> = (type: any);\n      return getContextName(provider._context) + '.Provider';\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n    case Fragment:\n      return 'Fragment';\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n    case HostPortal:\n      return 'Portal';\n    case HostRoot:\n      return 'Root';\n    case HostText:\n      return 'Text';\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n      return 'Mode';\n    case OffscreenComponent:\n      return 'Offscreen';\n    case Profiler:\n      return 'Profiler';\n    case ScopeComponent:\n      return 'Scope';\n    case SuspenseComponent:\n      return 'Suspense';\n    case SuspenseListComponent:\n      return 'SuspenseList';\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    // The display name for this tags come from the user-provided type:\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return (type: any).displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      break;\n    case LegacyHiddenComponent:\n      if (enableLegacyHidden) {\n        return 'LegacyHidden';\n      }\n  }\n\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b00000000000000000000000000;\nexport const PerformedWork = /*                */ 0b00000000000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b00000000000000000000000010;\nexport const Update = /*                       */ 0b00000000000000000000000100;\nexport const Deletion = /*                     */ 0b00000000000000000000001000;\nexport const ChildDeletion = /*                */ 0b00000000000000000000010000;\nexport const ContentReset = /*                 */ 0b00000000000000000000100000;\nexport const Callback = /*                     */ 0b00000000000000000001000000;\nexport const DidCapture = /*                   */ 0b00000000000000000010000000;\nexport const ForceClientRender = /*            */ 0b00000000000000000100000000;\nexport const Ref = /*                          */ 0b00000000000000001000000000;\nexport const Snapshot = /*                     */ 0b00000000000000010000000000;\nexport const Passive = /*                      */ 0b00000000000000100000000000;\nexport const Hydrating = /*                    */ 0b00000000000001000000000000;\nexport const Visibility = /*                   */ 0b00000000000010000000000000;\nexport const StoreConsistency = /*             */ 0b00000000000100000000000000;\n\nexport const LifecycleEffectMask =\n  Passive | Update | Callback | Ref | Snapshot | StoreConsistency;\n\n// Union of all commit flags (flags with the lifetime of a particular commit)\nexport const HostEffectMask = /*               */ 0b00000000000111111111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b00000000001000000000000000;\nexport const ShouldCapture = /*                */ 0b00000000010000000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b00000000100000000000000000;\nexport const DidPropagateContext = /*          */ 0b00000001000000000000000000;\nexport const NeedsPropagation = /*             */ 0b00000010000000000000000000;\nexport const Forked = /*                       */ 0b00000100000000000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const RefStatic = /*                    */ 0b00001000000000000000000000;\nexport const LayoutStatic = /*                 */ 0b00010000000000000000000000;\nexport const PassiveStatic = /*                */ 0b00100000000000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b01000000000000000000000000;\nexport const MountPassiveDev = /*              */ 0b10000000000000000000000000;\n\n// Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nexport const BeforeMutationMask =\n  // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n  // flag logic (see #20043)\n  Update |\n  Snapshot |\n  (enableCreateEventHandleAPI\n    ? // createEventHandle needs to visit deleted and hidden trees to\n      // fire beforeblur\n      // TODO: Only need to visit Deletions during BeforeMutation phase if an\n      // element is focused.\n      ChildDeletion | Visibility\n    : 0);\n\nexport const MutationMask =\n  Placement |\n  Update |\n  ChildDeletion |\n  ContentReset |\n  Ref |\n  Hydrating |\n  Visibility;\nexport const LayoutMask = Update | Callback | Ref | Visibility;\n\n// TODO: Split into PassiveMountMask and PassiveUnmountMask\nexport const PassiveMask = Passive | ChildDeletion;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromFiber(ownerFiber) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw new Error(\n            'Child was not found in either parent set. This indicates a bug ' +\n              'in React related to the return pointer. Please file an issue.',\n          );\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw new Error(\n        \"Return fibers should always be each others' alternates. \" +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  if (a.tag !== HostRoot) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    const match = findCurrentHostFiberImpl(child);\n    if (match !== null) {\n      return match;\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberWithNoPortalsImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      const match = findCurrentHostFiberWithNoPortalsImpl(child);\n      if (match !== null) {\n        return match;\n      }\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\ndeclare function isArray(a: mixed): boolean %checks(Array.isArray(a));\n\nconst isArrayImpl = Array.isArray;\n\n// eslint-disable-next-line no-redeclare\nfunction isArray(a: mixed): boolean {\n  return isArrayImpl(a);\n}\n\nexport default isArray;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// This module only exists as an ESM wrapper around the external CommonJS\n// Scheduler dependency. Notice that we're intentionally not using named imports\n// because Rollup would use dynamic dispatch for CommonJS interop named imports.\n// When we switch to ESM, we can delete this module.\nimport * as Scheduler from 'scheduler';\n\nexport const scheduleCallback = Scheduler.unstable_scheduleCallback;\nexport const cancelCallback = Scheduler.unstable_cancelCallback;\nexport const shouldYield = Scheduler.unstable_shouldYield;\nexport const requestPaint = Scheduler.unstable_requestPaint;\nexport const now = Scheduler.unstable_now;\nexport const getCurrentPriorityLevel =\n  Scheduler.unstable_getCurrentPriorityLevel;\nexport const ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nexport const UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nexport const NormalPriority = Scheduler.unstable_NormalPriority;\nexport const LowPriority = Scheduler.unstable_LowPriority;\nexport const IdlePriority = Scheduler.unstable_IdlePriority;\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nexport const unstable_yieldValue = Scheduler.unstable_yieldValue;\nexport const unstable_setDisableYieldValue =\n  Scheduler.unstable_setDisableYieldValue;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {EventPriority} from './ReactEventPriorities.old';\n// import type {DevToolsProfilingHooks} from 'react-devtools-shared/src/backend/types';\n// TODO: This import doesn't work because the DevTools depend on the DOM version of React\n// and to properly type check against DOM React we can't also type check again non-DOM\n// React which this hook might be in.\ntype DevToolsProfilingHooks = any;\n\nimport {\n  getLabelForLane,\n  TotalLanes,\n} from 'react-reconciler/src/ReactFiberLane.old';\nimport {DidCapture} from './ReactFiberFlags';\nimport {\n  consoleManagedByDevToolsDuringStrictMode,\n  enableProfilerTimer,\n  enableSchedulingProfiler,\n} from 'shared/ReactFeatureFlags';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n} from './ReactEventPriorities.old';\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n  unstable_yieldValue,\n  unstable_setDisableYieldValue,\n} from './Scheduler';\nimport {setSuppressWarning} from 'shared/consoleWithStackDev';\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet injectedProfilingHooks: DevToolsProfilingHooks | null = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    if (enableSchedulingProfiler) {\n      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n      // This gives DevTools a way to feature detect that isn't tied to version number\n      // (since profiling and timeline are controlled by different feature flags).\n      internals = {\n        ...internals,\n        getLaneLabelMap,\n        injectProfilingHooks,\n      };\n    }\n\n    rendererID = hook.inject(internals);\n\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(root: FiberRoot, eventPriority: EventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        let schedulerPriority;\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediateSchedulerPriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingSchedulerPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriority = IdleSchedulerPriority;\n            break;\n          default:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n        }\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          schedulerPriority,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onPostCommitRoot(root: FiberRoot) {\n  if (\n    injectedHook &&\n    typeof injectedHook.onPostCommitFiberRoot === 'function'\n  ) {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function setIsStrictModeForDevtools(newIsStrictMode: boolean) {\n  if (consoleManagedByDevToolsDuringStrictMode) {\n    if (typeof unstable_yieldValue === 'function') {\n      // We're in a test because Scheduler.unstable_yieldValue only exists\n      // in SchedulerMock. To reduce the noise in strict mode tests,\n      // suppress warnings and disable scheduler yielding during the double render\n      unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n\n    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n      try {\n        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n      } catch (err) {\n        if (__DEV__) {\n          if (!hasLoggedError) {\n            hasLoggedError = true;\n            console.error(\n              'React instrumentation encountered an error: %s',\n              err,\n            );\n          }\n        }\n      }\n    }\n  } else {\n    if (newIsStrictMode) {\n      disableLogs();\n    } else {\n      reenableLogs();\n    }\n  }\n}\n\n// Profiler API hooks\n\nfunction injectProfilingHooks(profilingHooks: DevToolsProfilingHooks): void {\n  injectedProfilingHooks = profilingHooks;\n}\n\nfunction getLaneLabelMap(): Map<Lane, string> | null {\n  if (enableSchedulingProfiler) {\n    const map: Map<Lane, string> = new Map();\n\n    let lane = 1;\n    for (let index = 0; index < TotalLanes; index++) {\n      const label = ((getLabelForLane(lane): any): string);\n      map.set(lane, label);\n      lane *= 2;\n    }\n\n    return map;\n  } else {\n    return null;\n  }\n}\n\nexport function markCommitStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStarted === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStarted(lanes);\n    }\n  }\n}\n\nexport function markCommitStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStopped === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStopped();\n    }\n  }\n}\n\nexport function markComponentRenderStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentErrored(\n  fiber: Fiber,\n  thrownValue: mixed,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentErrored === 'function'\n    ) {\n      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n    }\n  }\n}\n\nexport function markComponentSuspended(\n  fiber: Fiber,\n  wakeable: Wakeable,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentSuspended === 'function'\n    ) {\n      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStopped();\n    }\n  }\n}\n\nexport function markPassiveEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markPassiveEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStopped();\n    }\n  }\n}\n\nexport function markRenderStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStarted(lanes);\n    }\n  }\n}\n\nexport function markRenderYielded(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderYielded === 'function'\n    ) {\n      injectedProfilingHooks.markRenderYielded();\n    }\n  }\n}\n\nexport function markRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStopped();\n    }\n  }\n}\n\nexport function markRenderScheduled(lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markRenderScheduled(lane);\n    }\n  }\n}\n\nexport function markForceUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markForceUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n    }\n  }\n}\n\nexport function markStateUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markStateUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = /*                         */ 0b000000;\n// TODO: Remove ConcurrentMode by reading from the root tag instead\nexport const ConcurrentMode = /*                 */ 0b000001;\nexport const ProfileMode = /*                    */ 0b000010;\nexport const DebugTracingMode = /*               */ 0b000100;\nexport const StrictLegacyMode = /*               */ 0b001000;\nexport const StrictEffectsMode = /*              */ 0b010000;\nexport const ConcurrentUpdatesByDefaultMode = /* */ 0b100000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\n\nexport const clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(x: number): number {\n  const asUint = x >>> 0;\n  if (asUint === 0) {\n    return 32;\n  }\n  return (31 - ((log(asUint) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\n// TODO: Ideally these types would be opaque but that doesn't work well with\n// our reconciler fork infra, since these leak into non-reconciler packages.\n\nexport type Lanes = number;\nexport type Lane = number;\nexport type LaneMap<T> = Array<T>;\n\nimport {\n  enableSchedulingProfiler,\n  enableUpdaterTracking,\n  allowConcurrentByDefault,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {ConcurrentUpdatesByDefaultMode, NoMode} from './ReactTypeOfMode';\nimport {clz32} from './clz32';\n\n// Lane values below should be kept in sync with getLabelForLane(), used by react-devtools-timeline.\n// If those values are changed that package should be rebuilt and redeployed.\n\nexport const TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\n\nexport const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000010;\nexport const InputContinuousLane: Lane = /*             */ 0b0000000000000000000000000000100;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000001000;\nexport const DefaultLane: Lane = /*                     */ 0b0000000000000000000000000010000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000000100000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111111000000;\nconst TransitionLane1: Lane = /*                        */ 0b0000000000000000000000001000000;\nconst TransitionLane2: Lane = /*                        */ 0b0000000000000000000000010000000;\nconst TransitionLane3: Lane = /*                        */ 0b0000000000000000000000100000000;\nconst TransitionLane4: Lane = /*                        */ 0b0000000000000000000001000000000;\nconst TransitionLane5: Lane = /*                        */ 0b0000000000000000000010000000000;\nconst TransitionLane6: Lane = /*                        */ 0b0000000000000000000100000000000;\nconst TransitionLane7: Lane = /*                        */ 0b0000000000000000001000000000000;\nconst TransitionLane8: Lane = /*                        */ 0b0000000000000000010000000000000;\nconst TransitionLane9: Lane = /*                        */ 0b0000000000000000100000000000000;\nconst TransitionLane10: Lane = /*                       */ 0b0000000000000001000000000000000;\nconst TransitionLane11: Lane = /*                       */ 0b0000000000000010000000000000000;\nconst TransitionLane12: Lane = /*                       */ 0b0000000000000100000000000000000;\nconst TransitionLane13: Lane = /*                       */ 0b0000000000001000000000000000000;\nconst TransitionLane14: Lane = /*                       */ 0b0000000000010000000000000000000;\nconst TransitionLane15: Lane = /*                       */ 0b0000000000100000000000000000000;\nconst TransitionLane16: Lane = /*                       */ 0b0000000001000000000000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000111110000000000000000000000;\nconst RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;\nconst RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;\nconst RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;\nconst RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;\nconst RetryLane5: Lane = /*                             */ 0b0000100000000000000000000000000;\n\nexport const SomeRetryLane: Lane = RetryLane1;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0001000000000000000000000000000;\n\nconst NonIdleLanes: Lanes = /*                          */ 0b0001111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0010000000000000000000000000000;\nexport const IdleLane: Lane = /*                        */ 0b0100000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\n// This function is used for the experimental timeline (react-devtools-timeline)\n// It should be kept in sync with the Lanes values above.\nexport function getLabelForLane(lane: Lane): string | void {\n  if (enableSchedulingProfiler) {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\n\nexport const NoTimestamp = -1;\n\nlet nextTransitionLane: Lane = TransitionLane1;\nlet nextRetryLane: Lane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n    case InputContinuousLane:\n      return InputContinuousLane;\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n    case DefaultLane:\n      return DefaultLane;\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n    case IdleLane:\n      return IdleLane;\n    case OffscreenLane:\n      return OffscreenLane;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n      return lanes;\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n  const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n  if (nonIdlePendingLanes !== NoLanes) {\n    const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    const unblockedLanes = pendingLanes & ~suspendedLanes;\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    const nextLane = getHighestPriorityLane(nextLanes);\n    const wipLane = getHighestPriorityLane(wipLanes);\n    if (\n      // Tests whether the next lane is equal or lower priority than the wip\n      // one. This works because the bits decrease in priority as you go left.\n      nextLane >= wipLane ||\n      // Default priority updates should not interrupt transition updates. The\n      // only difference between default updates and transition updates is that\n      // default updates do not support refresh transitions.\n      (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\n    ) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Do nothing, use the lanes as they were assigned.\n  } else if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function includesSyncLane(lanes: Lanes) {\n  return (lanes & SyncLane) !== NoLanes;\n}\n\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyNonUrgentLanes(lanes: Lanes) {\n  const UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n  return (lanes & UrgentLanes) === NoLanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\nexport function includesBlockingLane(root: FiberRoot, lanes: Lanes) {\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Concurrent updates by default always use time slicing.\n    return false;\n  }\n  const SyncDefaultLanes =\n    InputContinuousHydrationLane |\n    InputContinuousLane |\n    DefaultHydrationLane |\n    DefaultLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\n\nexport function includesExpiredLane(root: FiberRoot, lanes: Lanes) {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\n\nexport function isTransitionLane(lane: Lane) {\n  return (lane & TransitionLanes) !== NoLanes;\n}\n\nexport function claimNextTransitionLane(): Lane {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  const lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n    nextTransitionLane = TransitionLane1;\n  }\n  return lane;\n}\n\nexport function claimNextRetryLane(): Lane {\n  const lane = nextRetryLane;\n  nextRetryLane <<= 1;\n  if ((nextRetryLane & RetryLanes) === NoLanes) {\n    nextRetryLane = RetryLane1;\n  }\n  return lane;\n}\n\nexport function getHighestPriorityLane(lanes: Lanes): Lane {\n  return lanes & -lanes;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\nexport function intersectLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a & b;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n  return laneMap;\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = NoLanes;\n  root.pingedLanes = NoLanes;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n\n  const rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n  const entanglements = root.entanglements;\n  let lanes = rootEntangledLanes;\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    if (\n      // Is this one of the newly entangled lanes?\n      (lane & entangledLanes) |\n      // Is this lane transitively entangled with the newly entangled lanes?\n      (entanglements[index] & entangledLanes)\n    ) {\n      entanglements[index] |= entangledLanes;\n    }\n    lanes &= ~lane;\n  }\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  const renderLane = getHighestPriorityLane(renderLanes);\n\n  let lane;\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nexport function addFiberToLanesMap(\n  root: FiberRoot,\n  fiber: Fiber,\n  lanes: Lanes | Lane,\n) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n\n    lanes &= ~lane;\n  }\n}\n\nexport function movePendingFibersToMemoized(root: FiberRoot, lanes: Lanes) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  const memoizedUpdaters = root.memoizedUpdaters;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    if (updaters.size > 0) {\n      updaters.forEach(fiber => {\n        const alternate = fiber.alternate;\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nexport function addTransitionToLanesMap(\n  root: FiberRoot,\n  transition: Transition,\n  lane: Lane,\n) {\n  if (enableTransitionTracing) {\n    const transitionLanesMap = root.transitionLanes;\n    const index = laneToIndex(lane);\n    let transitions = transitionLanesMap[index];\n    if (transitions === null) {\n      transitions = [];\n    }\n    transitions.push(transition);\n\n    transitionLanesMap[index] = transitions;\n  }\n}\n\nexport function getTransitionsForLanes(\n  root: FiberRoot,\n  lanes: Lane | Lanes,\n): Array<Transition> | null {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  const transitionsForLanes = [];\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      transitions.forEach(transition => {\n        transitionsForLanes.push(transition);\n      });\n    }\n\n    lanes &= ~lane;\n  }\n\n  if (transitionsForLanes.length === 0) {\n    return null;\n  }\n\n  return transitionsForLanes;\n}\n\nexport function clearTransitionsForLanes(root: FiberRoot, lanes: Lane | Lanes) {\n  if (!enableTransitionTracing) {\n    return;\n  }\n\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      root.transitionLanes[index] = null;\n    }\n\n    lanes &= ~lane;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  SyncLane,\n  InputContinuousLane,\n  DefaultLane,\n  IdleLane,\n  getHighestPriorityLane,\n  includesNonIdleWork,\n} from './ReactFiberLane.old';\n\nexport opaque type EventPriority = Lane;\n\nexport const DiscreteEventPriority: EventPriority = SyncLane;\nexport const ContinuousEventPriority: EventPriority = InputContinuousLane;\nexport const DefaultEventPriority: EventPriority = DefaultLane;\nexport const IdleEventPriority: EventPriority = IdleLane;\n\nlet currentUpdatePriority: EventPriority = NoLane;\n\nexport function getCurrentUpdatePriority(): EventPriority {\n  return currentUpdatePriority;\n}\n\nexport function setCurrentUpdatePriority(newPriority: EventPriority) {\n  currentUpdatePriority = newPriority;\n}\n\nexport function runWithPriority<T>(priority: EventPriority, fn: () => T): T {\n  const previousPriority = currentUpdatePriority;\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\n\nexport function higherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a !== 0 && a < b ? a : b;\n}\n\nexport function lowerEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a === 0 || a > b ? a : b;\n}\n\nexport function isHigherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): boolean {\n  return a !== 0 && a < b;\n}\n\nexport function lanesToEventPriority(lanes: Lanes): EventPriority {\n  const lane = getHighestPriorityLane(lanes);\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n  return IdleEventPriority;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  throw new Error(\n    'The current renderer does not support hydration. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Hydration (when unsupported)\nexport type SuspenseInstance = mixed;\nexport const supportsHydration = false;\nexport const canHydrateInstance = shim;\nexport const canHydrateTextInstance = shim;\nexport const canHydrateSuspenseInstance = shim;\nexport const isSuspenseInstancePending = shim;\nexport const isSuspenseInstanceFallback = shim;\nexport const getSuspenseInstanceFallbackErrorDetails = shim;\nexport const registerSuspenseInstanceRetry = shim;\nexport const getNextHydratableSibling = shim;\nexport const getFirstHydratableChild = shim;\nexport const getFirstHydratableChildWithinContainer = shim;\nexport const getFirstHydratableChildWithinSuspenseInstance = shim;\nexport const hydrateInstance = shim;\nexport const hydrateTextInstance = shim;\nexport const hydrateSuspenseInstance = shim;\nexport const getNextHydratableInstanceAfterSuspenseInstance = shim;\nexport const commitHydratedContainer = shim;\nexport const commitHydratedSuspenseInstance = shim;\nexport const clearSuspenseBoundary = shim;\nexport const clearSuspenseBoundaryFromContainer = shim;\nexport const shouldDeleteUnhydratedTailInstances = shim;\nexport const didNotMatchHydratedContainerTextInstance = shim;\nexport const didNotMatchHydratedTextInstance = shim;\nexport const didNotHydrateInstanceWithinContainer = shim;\nexport const didNotHydrateInstanceWithinSuspenseInstance = shim;\nexport const didNotHydrateInstance = shim;\nexport const didNotFindHydratableInstanceWithinContainer = shim;\nexport const didNotFindHydratableTextInstanceWithinContainer = shim;\nexport const didNotFindHydratableSuspenseInstanceWithinContainer = shim;\nexport const didNotFindHydratableInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableTextInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableInstance = shim;\nexport const didNotFindHydratableTextInstance = shim;\nexport const didNotFindHydratableSuspenseInstance = shim;\nexport const errorHydratingContainer = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport isArray from 'shared/isArray';\nimport {DefaultEventPriority} from 'react-reconciler/src/ReactEventPriorities';\n\nexport type Type = string;\nexport type Props = Object;\nexport type Container = {|\n  children: Array<Instance | TextInstance>,\n  createNodeMock: Function,\n  tag: 'CONTAINER',\n|};\nexport type Instance = {|\n  type: string,\n  props: Object,\n  isHidden: boolean,\n  children: Array<Instance | TextInstance>,\n  internalInstanceHandle: Object,\n  rootContainerInstance: Container,\n  tag: 'INSTANCE',\n|};\nexport type TextInstance = {|\n  text: string,\n  isHidden: boolean,\n  tag: 'TEXT',\n|};\nexport type HydratableInstance = Instance | TextInstance;\nexport type PublicInstance = Instance | TextInstance;\nexport type HostContext = Object;\nexport type UpdatePayload = Object;\nexport type ChildSet = void; // Unused\nexport type TimeoutHandle = TimeoutID;\nexport type NoTimeout = -1;\nexport type EventResponder = any;\n\nexport type RendererInspectionConfig = $ReadOnly<{||}>;\n\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoPersistence';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoHydration';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoMicrotasks';\n\nconst NO_CONTEXT = {};\nconst UPDATE_SIGNAL = {};\nconst nodeToInstanceMap = new WeakMap();\n\nif (__DEV__) {\n  Object.freeze(NO_CONTEXT);\n  Object.freeze(UPDATE_SIGNAL);\n}\n\nexport function getPublicInstance(inst: Instance | TextInstance): * {\n  switch (inst.tag) {\n    case 'INSTANCE':\n      const createNodeMock = inst.rootContainerInstance.createNodeMock;\n      const mockNode = createNodeMock({\n        type: inst.type,\n        props: inst.props,\n      });\n      if (typeof mockNode === 'object' && mockNode !== null) {\n        nodeToInstanceMap.set(mockNode, inst);\n      }\n      return mockNode;\n    default:\n      return inst;\n  }\n}\n\nexport function appendChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  if (__DEV__) {\n    if (!isArray(parentInstance.children)) {\n      console.error(\n        'An invalid container has been provided. ' +\n          'This may indicate that another renderer is being used in addition to the test renderer. ' +\n          '(For example, ReactDOM.createPortal inside of a ReactTestRenderer tree.) ' +\n          'This is not supported.',\n      );\n    }\n  }\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function insertBefore(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n  beforeChild: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  const beforeIndex = parentInstance.children.indexOf(beforeChild);\n  parentInstance.children.splice(beforeIndex, 0, child);\n}\n\nexport function removeChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  parentInstance.children.splice(index, 1);\n}\n\nexport function clearContainer(container: Container): void {\n  container.children.splice(0);\n}\n\nexport function getRootHostContext(\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function getChildHostContext(\n  parentHostContext: HostContext,\n  type: string,\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function prepareForCommit(containerInfo: Container): null | Object {\n  // noop\n  return null;\n}\n\nexport function resetAfterCommit(containerInfo: Container): void {\n  // noop\n}\n\nexport function createInstance(\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): Instance {\n  return {\n    type,\n    props,\n    isHidden: false,\n    children: [],\n    internalInstanceHandle,\n    rootContainerInstance,\n    tag: 'INSTANCE',\n  };\n}\n\nexport function appendInitialChild(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function finalizeInitialChildren(\n  testElement: Instance,\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): boolean {\n  return false;\n}\n\nexport function prepareUpdate(\n  testElement: Instance,\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): null | {...} {\n  return UPDATE_SIGNAL;\n}\n\nexport function shouldSetTextContent(type: string, props: Props): boolean {\n  return false;\n}\n\nexport function createTextInstance(\n  text: string,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): TextInstance {\n  return {\n    text,\n    isHidden: false,\n    tag: 'TEXT',\n  };\n}\n\nexport function getCurrentEventPriority(): * {\n  return DefaultEventPriority;\n}\n\nexport const isPrimaryRenderer = false;\nexport const warnsIfNotActing = true;\n\nexport const scheduleTimeout = setTimeout;\nexport const cancelTimeout = clearTimeout;\n\nexport const noTimeout = -1;\n\n// -------------------\n//     Mutation\n// -------------------\n\nexport const supportsMutation = true;\n\nexport function commitUpdate(\n  instance: Instance,\n  updatePayload: {...},\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  instance.type = type;\n  instance.props = newProps;\n}\n\nexport function commitMount(\n  instance: Instance,\n  type: string,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  // noop\n}\n\nexport function commitTextUpdate(\n  textInstance: TextInstance,\n  oldText: string,\n  newText: string,\n): void {\n  textInstance.text = newText;\n}\n\nexport function resetTextContent(testElement: Instance): void {\n  // noop\n}\n\nexport const appendChildToContainer = appendChild;\nexport const insertInContainerBefore = insertBefore;\nexport const removeChildFromContainer = removeChild;\n\nexport function hideInstance(instance: Instance): void {\n  instance.isHidden = true;\n}\n\nexport function hideTextInstance(textInstance: TextInstance): void {\n  textInstance.isHidden = true;\n}\n\nexport function unhideInstance(instance: Instance, props: Props): void {\n  instance.isHidden = false;\n}\n\nexport function unhideTextInstance(\n  textInstance: TextInstance,\n  text: string,\n): void {\n  textInstance.isHidden = false;\n}\n\nexport function getInstanceFromNode(mockNode: Object) {\n  const instance = nodeToInstanceMap.get(mockNode);\n  if (instance !== undefined) {\n    return instance.internalInstanceHandle;\n  }\n  return null;\n}\n\nexport function beforeActiveInstanceBlur(internalInstanceHandle: Object) {\n  // noop\n}\n\nexport function afterActiveInstanceBlur() {\n  // noop\n}\n\nexport function preparePortalMount(portalInstance: Instance): void {\n  // noop\n}\n\nexport function prepareScopeUpdate(scopeInstance: Object, inst: Object): void {\n  nodeToInstanceMap.set(scopeInstance, inst);\n}\n\nexport function getInstanceFromScope(scopeInstance: Object): null | Object {\n  return nodeToInstanceMap.get(scopeInstance) || null;\n}\n\nexport function detachDeletedInstance(node: Instance): void {\n  // noop\n}\n\nexport function logRecoverableError(error: mixed): void {\n  // noop\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  enableComponentStackLocations,\n  disableNativeComponentFrames,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (disableNativeComponentFrames || !fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                let frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n                if (fn.displayName && frame.includes('<anonymous>')) {\n                  frame = frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw new Error(\n        'Unexpected context found on stack. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error(\n          `${getComponentNameFromFiber(fiber) ||\n            'Unknown'}.getChildContext(): key \"${contextKey}\" is not defined in childContextTypes.`,\n        );\n      }\n    }\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw new Error(\n        'Expected to have an instance by this point. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n      throw new Error(\n        'Expected subtree parent to be a mounted class component. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n\n    throw new Error(\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1;\n\nexport const LegacyRoot = 0;\nexport const ConcurrentRoot = 1;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {SchedulerCallback} from './Scheduler';\n\nimport {\n  DiscreteEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n} from './ReactEventPriorities.old';\nimport {ImmediatePriority, scheduleCallback} from './Scheduler';\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet includesLegacySyncCallbacks: boolean = false;\nlet isFlushingSyncQueue: boolean = false;\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\n\nexport function scheduleLegacySyncCallback(callback: SchedulerCallback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\n\nexport function flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\n\nexport function flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    const previousUpdatePriority = getCurrentUpdatePriority();\n    try {\n      const isSync = true;\n      const queue = syncQueue;\n      // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n      setCurrentUpdatePriority(DiscreteEventPriority);\n      for (; i < queue.length; i++) {\n        let callback = queue[i];\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      }\n      // Resume flushing in the next tick\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootState} from './ReactFiberRoot.new';\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nexport function isRootDehydrated(root: FiberRoot) {\n  const currentState: RootState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Ids are base 32 strings whose binary representation corresponds to the\n// position of a node in a tree.\n\n// Every time the tree forks into multiple children, we add additional bits to\n// the left of the sequence that represent the position of the child within the\n// current level of children.\n//\n//      00101       00010001011010101\n//      ╰─┬─╯       ╰───────┬───────╯\n//   Fork 5 of 20       Parent id\n//\n// The leading 0s are important. In the above example, you only need 3 bits to\n// represent slot 5. However, you need 5 bits to represent all the forks at\n// the current level, so we must account for the empty bits at the end.\n//\n// For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n// the zeroth id at a level would be indistinguishable from its parent.\n//\n// If a node has only one child, and does not materialize an id (i.e. does not\n// contain a useId hook), then we don't need to allocate any space in the\n// sequence. It's treated as a transparent indirection. For example, these two\n// trees produce the same ids:\n//\n// <>                          <>\n//   <Indirection>               <A />\n//     <A />                     <B />\n//   </Indirection>            </>\n//   <B />\n// </>\n//\n// However, we cannot skip any node that materializes an id. Otherwise, a parent\n// id that does not fork would be indistinguishable from its child id. For\n// example, this tree does not fork, but the parent and child must have\n// different ids.\n//\n// <Parent>\n//   <Child />\n// </Parent>\n//\n// To handle this scenario, every time we materialize an id, we allocate a\n// new level with a single slot. You can think of this as a fork with only one\n// prong, or an array of children with length 1.\n//\n// It's possible for the size of the sequence to exceed 32 bits, the max\n// size for bitwise operations. When this happens, we make more room by\n// converting the right part of the id to a string and storing it in an overflow\n// variable. We use a base 32 string representation, because 32 is the largest\n// power of 2 that is supported by toString(). We want the base to be large so\n// that the resulting ids are compact, and we want the base to be a power of 2\n// because every log2(base) bits corresponds to a single character, i.e. every\n// log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n// affecting the final result.\n\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {clz32} from './clz32';\nimport {Forked, NoFlags} from './ReactFiberFlags';\n\nexport type TreeContext = {\n  id: number,\n  overflow: string,\n};\n\n// TODO: Use the unified fiber stack module instead of this local one?\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\nconst forkStack: Array<any> = [];\nlet forkStackIndex: number = 0;\nlet treeForkProvider: Fiber | null = null;\nlet treeForkCount: number = 0;\n\nconst idStack: Array<any> = [];\nlet idStackIndex: number = 0;\nlet treeContextProvider: Fiber | null = null;\nlet treeContextId: number = 1;\nlet treeContextOverflow: string = '';\n\nexport function isForkedChild(workInProgress: Fiber): boolean {\n  warnIfNotHydrating();\n  return (workInProgress.flags & Forked) !== NoFlags;\n}\n\nexport function getForksAtLevel(workInProgress: Fiber): number {\n  warnIfNotHydrating();\n  return treeForkCount;\n}\n\nexport function getTreeId(): string {\n  const overflow = treeContextOverflow;\n  const idWithLeadingBit = treeContextId;\n  const id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\n\nexport function pushTreeFork(\n  workInProgress: Fiber,\n  totalChildren: number,\n): void {\n  // This is called right after we reconcile an array (or iterator) of child\n  // fibers, because that's the only place where we know how many children in\n  // the whole set without doing extra work later, or storing addtional\n  // information on the fiber.\n  //\n  // That's why this function is separate from pushTreeId — it's called during\n  // the render phase of the fork parent, not the child, which is where we push\n  // the other context values.\n  //\n  // In the Fizz implementation this is much simpler because the child is\n  // rendered in the same callstack as the parent.\n  //\n  // It might be better to just add a `forks` field to the Fiber type. It would\n  // make this module simpler.\n\n  warnIfNotHydrating();\n\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\n\nexport function pushTreeId(\n  workInProgress: Fiber,\n  totalChildren: number,\n  index: number,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextProvider = workInProgress;\n\n  const baseIdWithLeadingBit = treeContextId;\n  const baseOverflow = treeContextOverflow;\n\n  // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n  const baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  const baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n\n  const slot = index + 1;\n  const length = getBitLength(totalChildren) + baseLength;\n\n  // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    const numberOfOverflowBits = baseLength - (baseLength % 5);\n\n    // Then create a bitmask that selects only those bits.\n    const newOverflowBits = (1 << numberOfOverflowBits) - 1;\n\n    // Select the bits, and convert them to a base 32 string.\n    const newOverflow = (baseId & newOverflowBits).toString(32);\n\n    // Now we can remove those bits from the base id.\n    const restOfBaseId = baseId >> numberOfOverflowBits;\n    const restOfBaseLength = baseLength - numberOfOverflowBits;\n\n    // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n    const restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    const restOfNewBits = slot << restOfBaseLength;\n    const id = restOfNewBits | restOfBaseId;\n    const overflow = newOverflow + baseOverflow;\n\n    treeContextId = (1 << restOfLength) | id;\n    treeContextOverflow = overflow;\n  } else {\n    // Normal path\n    const newBits = slot << baseLength;\n    const id = newBits | baseId;\n    const overflow = baseOverflow;\n\n    treeContextId = (1 << length) | id;\n    treeContextOverflow = overflow;\n  }\n}\n\nexport function pushMaterializedTreeId(workInProgress: Fiber) {\n  warnIfNotHydrating();\n\n  // This component materialized an id. This will affect any ids that appear\n  // in its children.\n  const returnFiber = workInProgress.return;\n  if (returnFiber !== null) {\n    const numberOfForks = 1;\n    const slotIndex = 0;\n    pushTreeFork(workInProgress, numberOfForks);\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\n  }\n}\n\nfunction getBitLength(number: number): number {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id: number) {\n  return 1 << (getBitLength(id) - 1);\n}\n\nexport function popTreeContext(workInProgress: Fiber) {\n  // Restore the previous values.\n\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\n\nexport function getSuspendedTreeContext(): TreeContext | null {\n  warnIfNotHydrating();\n  if (treeContextProvider !== null) {\n    return {\n      id: treeContextId,\n      overflow: treeContextOverflow,\n    };\n  } else {\n    return null;\n  }\n}\n\nexport function restoreSuspendedTreeContext(\n  workInProgress: Fiber,\n  suspendedContext: TreeContext,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextId = suspendedContext.id;\n  treeContextOverflow = suspendedContext.overflow;\n  treeContextProvider = workInProgress;\n}\n\nfunction warnIfNotHydrating() {\n  if (__DEV__) {\n    if (!getIsHydrating()) {\n      console.error(\n        'Expected to be hydrating. This is a bug in React. Please file ' +\n          'an issue.',\n      );\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport {NoMode, ConcurrentMode} from './ReactTypeOfMode';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {TreeContext} from './ReactFiberTreeContext.old';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {\n  ChildDeletion,\n  Placement,\n  Hydrating,\n  NoFlags,\n  DidCapture,\n} from './ReactFiberFlags';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  getFirstHydratableChildWithinContainer,\n  getFirstHydratableChildWithinSuspenseInstance,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  shouldDeleteUnhydratedTailInstances,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateInstanceWithinContainer,\n  didNotHydrateInstanceWithinSuspenseInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableInstanceWithinContainer,\n  didNotFindHydratableTextInstanceWithinContainer,\n  didNotFindHydratableSuspenseInstanceWithinContainer,\n  didNotFindHydratableInstanceWithinSuspenseInstance,\n  didNotFindHydratableTextInstanceWithinSuspenseInstance,\n  didNotFindHydratableSuspenseInstanceWithinSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {OffscreenLane} from './ReactFiberLane.old';\nimport {\n  getSuspendedTreeContext,\n  restoreSuspendedTreeContext,\n} from './ReactFiberTreeContext.old';\nimport {queueRecoverableErrors} from './ReactFiberWorkLoop.old';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\n// This flag allows for warning supression when we expect there to be mismatches\n// due to earlier mismatches or a suspended fiber.\nlet didSuspendOrErrorDEV: boolean = false;\n\n// Hydration errors that were thrown inside this boundary\nlet hydrationErrors: Array<CapturedValue<mixed>> | null = null;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nexport function markDidThrowWhileHydratingDEV() {\n  if (__DEV__) {\n    didSuspendOrErrorDEV = true;\n  }\n}\n\nexport function didSuspendOrErrorWhileHydratingDEV() {\n  if (__DEV__) {\n    return didSuspendOrErrorDEV;\n  }\n  return false;\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance: Container = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChildWithinContainer(\n    parentInstance,\n  );\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n  treeContext: TreeContext | null,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(\n    suspenseInstance,\n  );\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n  return true;\n}\n\nfunction warnUnhydratedInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        didNotHydrateInstanceWithinContainer(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      }\n      case HostComponent: {\n        const isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n          // TODO: Delete this argument when we remove the legacy root API.\n          isConcurrentMode,\n        );\n        break;\n      }\n      case SuspenseComponent: {\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\n        if (suspenseState.dehydrated !== null)\n          didNotHydrateInstanceWithinSuspenseInstance(\n            suspenseState.dehydrated,\n            instance,\n          );\n        break;\n      }\n    }\n  }\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  warnUnhydratedInstance(returnFiber, instance);\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n\n  const deletions = returnFiber.deletions;\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction warnNonhydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  if (__DEV__) {\n    if (didSuspendOrErrorDEV) {\n      // Inside a boundary that already suspended. We're currently rendering the\n      // siblings of a suspended node. The mismatch may be due to the missing\n      // data, so it's probably a false positive.\n      return;\n    }\n\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstanceWithinContainer(\n              parentContainer,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstanceWithinContainer(\n              parentContainer,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstanceWithinContainer(\n              parentContainer,\n            );\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent: {\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            const isConcurrentMode =\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n              // TODO: Delete this argument when we remove the legacy root API.\n              isConcurrentMode,\n            );\n            break;\n          }\n          case HostText: {\n            const text = fiber.pendingProps;\n            const isConcurrentMode =\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n              // TODO: Delete this argument when we remove the legacy root API.\n              isConcurrentMode,\n            );\n            break;\n          }\n          case SuspenseComponent: {\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n          }\n        }\n        break;\n      }\n      case SuspenseComponent: {\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\n        const parentInstance = suspenseState.dehydrated;\n        if (parentInstance !== null)\n          switch (fiber.tag) {\n            case HostComponent:\n              const type = fiber.type;\n              const props = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinSuspenseInstance(\n                parentInstance,\n                type,\n                props,\n              );\n              break;\n            case HostText:\n              const text = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinSuspenseInstance(\n                parentInstance,\n                text,\n              );\n              break;\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(\n                parentInstance,\n              );\n              break;\n          }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  warnNonhydratedInstance(returnFiber, fiber);\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        hydrationParentFiber = fiber;\n        nextHydratableInstance = getFirstHydratableChild(instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        hydrationParentFiber = fiber;\n        // Text Instances don't have children so there's nothing to hydrate.\n        nextHydratableInstance = null;\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n        nextInstance,\n      );\n      if (suspenseInstance !== null) {\n        const suspenseState: SuspenseState = {\n          dehydrated: suspenseInstance,\n          treeContext: getSuspendedTreeContext(),\n          retryLane: OffscreenLane,\n        };\n        fiber.memoizedState = suspenseState;\n        // Store the dehydrated fragment as a child fiber.\n        // This simplifies the code for getHostSibling and deleting nodes,\n        // since it doesn't have to consider all Suspense boundaries and\n        // check if they're dehydrated ones or not.\n        const dehydratedFragment = createFiberFromDehydratedFragment(\n          suspenseInstance,\n        );\n        dehydratedFragment.return = fiber;\n        fiber.child = dehydratedFragment;\n        hydrationParentFiber = fiber;\n        // While a Suspense Instance does have children, we won't step into\n        // it during the first pass. Instead, we'll reenter it later.\n        nextHydratableInstance = null;\n        return true;\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction shouldClientRenderOnMismatch(fiber: Fiber) {\n  return (\n    (fiber.mode & ConcurrentMode) !== NoMode &&\n    (fiber.flags & DidCapture) === NoFlags\n  );\n}\n\nfunction throwOnHydrationMismatch(fiber: Fiber) {\n  throw new Error(\n    'Hydration failed because the initial UI does not match what was ' +\n      'rendered on the server.',\n  );\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\n      throwOnHydrationMismatch(fiber);\n    }\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\n      throwOnHydrationMismatch(fiber);\n    }\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    const prevHydrationParentFiber: Fiber = (hydrationParentFiber: any);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n  }\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n    shouldWarnIfMismatchDev,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  const shouldUpdate = hydrateTextInstance(\n    textInstance,\n    textContent,\n    fiber,\n    shouldWarnIfMismatchDev,\n  );\n  if (shouldUpdate) {\n    // We assume that prepareToHydrateHostTextInstance is called in a context where the\n    // hydration parent is the parent host component of this host text.\n    const returnFiber = hydrationParentFiber;\n    if (returnFiber !== null) {\n      switch (returnFiber.tag) {\n        case HostRoot: {\n          const parentContainer = returnFiber.stateNode.containerInfo;\n          const isConcurrentMode =\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotMatchHydratedContainerTextInstance(\n            parentContainer,\n            textInstance,\n            textContent,\n            // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode,\n          );\n          break;\n        }\n        case HostComponent: {\n          const parentType = returnFiber.type;\n          const parentProps = returnFiber.memoizedProps;\n          const parentInstance = returnFiber.stateNode;\n          const isConcurrentMode =\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotMatchHydratedTextInstance(\n            parentType,\n            parentProps,\n            parentInstance,\n            textInstance,\n            textContent,\n            // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode,\n          );\n          break;\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n  if (\n    fiber.tag !== HostRoot &&\n    (fiber.tag !== HostComponent ||\n      (shouldDeleteUnhydratedTailInstances(fiber.type) &&\n        !shouldSetTextContent(fiber.type, fiber.memoizedProps)))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    if (nextInstance) {\n      if (shouldClientRenderOnMismatch(fiber)) {\n        warnIfUnhydratedTailNodes(fiber);\n        throwOnHydrationMismatch(fiber);\n      } else {\n        while (nextInstance) {\n          deleteHydratableInstance(fiber, nextInstance);\n          nextInstance = getNextHydratableSibling(nextInstance);\n        }\n      }\n    }\n  }\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction hasUnhydratedTailNodes() {\n  return isHydrating && nextHydratableInstance !== null;\n}\n\nfunction warnIfUnhydratedTailNodes(fiber: Fiber) {\n  let nextInstance = nextHydratableInstance;\n  while (nextInstance) {\n    warnUnhydratedInstance(fiber, nextInstance);\n    nextInstance = getNextHydratableSibling(nextInstance);\n  }\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n  didSuspendOrErrorDEV = false;\n}\n\nexport function upgradeHydrationErrorsToRecoverable(): void {\n  if (hydrationErrors !== null) {\n    // Successfully completed a forced client render. The errors that occurred\n    // during the hydration attempt are now recovered. We will log them in\n    // commit phase, once the entire tree has finished.\n    queueRecoverableErrors(hydrationErrors);\n    hydrationErrors = null;\n  }\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport function queueHydrationError(error: CapturedValue<mixed>): void {\n  if (hydrationErrors === null) {\n    hydrationErrors = [error];\n  } else {\n    hydrationErrors.push(error);\n  }\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  hasUnhydratedTailNodes,\n  warnIfUnhydratedTailNodes,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.new';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = null;\n\nexport function requestCurrentTransition(): Transition | null {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\nimport hasOwnProperty from './hasOwnProperty';\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    const currentKey = keysA[i];\n    if (\n      !hasOwnProperty.call(objB, currentKey) ||\n      !is(objA[currentKey], objB[currentKey])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber | null) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack =\n      fiber === null ? null : getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function getCurrentFiber(): Fiber | null {\n  if (__DEV__) {\n    return current;\n  }\n  return null;\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport assign from 'shared/assign';\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\nimport type {\n  Fiber,\n  ContextDependency,\n  Dependencies,\n} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SharedQueue} from './ReactFiberClassUpdateQueue.old';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  NoFlags,\n  DidPropagateContext,\n  NeedsPropagation,\n} from './ReactFiberFlags';\n\nimport is from 'shared/objectIs';\nimport {createUpdate, ForceUpdate} from './ReactFiberClassUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  enableLazyContextPropagation,\n  enableServerContext,\n} from 'shared/ReactFeatureFlags';\nimport {REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED} from 'shared/ReactSymbols';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastFullyObservedContext: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(\n  providerFiber: Fiber,\n  context: ReactContext<T>,\n  nextValue: T,\n): void {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(\n  context: ReactContext<any>,\n  providerFiber: Fiber,\n): void {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n  if (isPrimaryRenderer) {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue = context._defaultValue;\n    } else {\n      context._currentValue = currentValue;\n    }\n  } else {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue2 = context._defaultValue;\n    } else {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\n\nexport function scheduleContextWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n  propagationRoot: Fiber,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated.\n      // Normally, this would mean that the rest of the\n      // ancestor path already has sufficient priority.\n      // However, this is not necessarily true inside offscreen\n      // or fallback trees because childLanes may be inconsistent\n      // with the surroundings. This is why we continue the loop.\n    }\n    if (node === propagationRoot) {\n      break;\n    }\n    node = node.return;\n  }\n  if (__DEV__) {\n    if (node !== propagationRoot) {\n      console.error(\n        'Expected to find the propagation root when scheduling context work. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n\nexport function propagateContextChange<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  if (enableLazyContextPropagation) {\n    // TODO: This path is only used by Cache components. Update\n    // lazilyPropagateParentContextChanges to look for Cache components so they\n    // can take advantage of lazy propagation.\n    const forcePropagateEntireTree = true;\n    propagateContextChanges(\n      workInProgress,\n      [context],\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  } else {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  // Only used by eager implementation\n  if (enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n\n            // Inlined `enqueueUpdate` to remove interleaved update check\n            const updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n              // Only occurs if the fiber has been unmounted.\n            } else {\n              const sharedQueue: SharedQueue<any> = (updateQueue: any).shared;\n              const pending = sharedQueue.pending;\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleContextWorkOnParentPath(\n            fiber.return,\n            renderLanes,\n            workInProgress,\n          );\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nfunction propagateContextChanges<T>(\n  workInProgress: Fiber,\n  contexts: Array<any>,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n): void {\n  // Only used by lazy implementation\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dep = list.firstContext;\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context: ReactContext<T> = contexts[i];\n          // Check if the context matches.\n          // TODO: Compare selected values to bail out early.\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleContextWorkOnParentPath(\n              consumer.return,\n              renderLanes,\n              workInProgress,\n            );\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            }\n\n            // Since we already found a match, we can stop traversing the\n            // dependency list.\n            break findChangedDep;\n          }\n        }\n        dep = dependency.next;\n      }\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\nexport function propagateParentContextChangesToDeferredTree(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\nfunction propagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n) {\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n\n  // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n  let contexts = null;\n  let parent = workInProgress;\n  let isInsidePropagationBailout = false;\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n\n      if (currentParent === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      const oldProps = currentParent.memoizedProps;\n      if (oldProps !== null) {\n        const providerType: ReactProviderType<any> = parent.type;\n        const context: ReactContext<any> = providerType._context;\n\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    }\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(\n      workInProgress,\n      contexts,\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  }\n\n  // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them —\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred — that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(currentDependencies: Dependencies) {\n  if (!enableLazyContextPropagation) {\n    return false;\n  }\n  // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n  let dependency = currentDependencies.firstContext;\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer\n      ? context._currentValue\n      : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n    dependency = dependency.next;\n  }\n  return false;\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    if (enableLazyContextPropagation) {\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    } else {\n      const firstContext = dependencies.firstContext;\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        }\n        // Reset the work-in-progress list\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\n\nexport function readContext<T>(context: ReactContext<T>): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  const value = isPrimaryRenderer\n    ? context._currentValue\n    : context._currentValue2;\n\n  if (lastFullyObservedContext === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else {\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      memoizedValue: value,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error(\n          'Context can only be read while React is rendering. ' +\n            'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n            'In function components, you can read it directly in the function body, but not ' +\n            'inside Hooks like useReducer() or useMemo().',\n        );\n      }\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n      };\n      if (enableLazyContextPropagation) {\n        currentlyRenderingFiber.flags |= NeedsPropagation;\n      }\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  UpdateQueue as HookQueue,\n  Update as HookUpdate,\n} from './ReactFiberHooks.old';\nimport type {\n  SharedQueue as ClassQueue,\n  Update as ClassUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport type {Lane} from './ReactFiberLane.old';\n\nimport {warnAboutUpdateOnNotYetMountedFiberInDEV} from './ReactFiberWorkLoop.old';\nimport {mergeLanes} from './ReactFiberLane.old';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\nimport {HostRoot} from './ReactWorkTags';\n\n// An array of all update queues that received updates during the current\n// render. When this render exits, either because it finishes or because it is\n// interrupted, the interleaved updates will be transferred onto the main part\n// of the queue.\nlet concurrentQueues: Array<\n  HookQueue<any, any> | ClassQueue<any>,\n> | null = null;\n\nexport function pushConcurrentUpdateQueue(\n  queue: HookQueue<any, any> | ClassQueue<any>,\n) {\n  if (concurrentQueues === null) {\n    concurrentQueues = [queue];\n  } else {\n    concurrentQueues.push(queue);\n  }\n}\n\nexport function finishQueueingConcurrentUpdates() {\n  // Transfer the interleaved updates onto the main queue. Each queue has a\n  // `pending` field and an `interleaved` field. When they are not null, they\n  // point to the last node in a circular linked list. We need to append the\n  // interleaved list to the end of the pending list by joining them into a\n  // single, circular list.\n  if (concurrentQueues !== null) {\n    for (let i = 0; i < concurrentQueues.length; i++) {\n      const queue = concurrentQueues[i];\n      const lastInterleavedUpdate = queue.interleaved;\n      if (lastInterleavedUpdate !== null) {\n        queue.interleaved = null;\n        const firstInterleavedUpdate = lastInterleavedUpdate.next;\n        const lastPendingUpdate = queue.pending;\n        if (lastPendingUpdate !== null) {\n          const firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = (firstInterleavedUpdate: any);\n          lastInterleavedUpdate.next = (firstPendingUpdate: any);\n        }\n        queue.pending = (lastInterleavedUpdate: any);\n      }\n    }\n    concurrentQueues = null;\n  }\n}\n\nexport function enqueueConcurrentHookUpdate<S, A>(\n  fiber: Fiber,\n  queue: HookQueue<S, A>,\n  update: HookUpdate<S, A>,\n  lane: Lane,\n) {\n  const interleaved = queue.interleaved;\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n    // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n  queue.interleaved = update;\n\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\n\nexport function enqueueConcurrentHookUpdateAndEagerlyBailout<S, A>(\n  fiber: Fiber,\n  queue: HookQueue<S, A>,\n  update: HookUpdate<S, A>,\n  lane: Lane,\n): void {\n  const interleaved = queue.interleaved;\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n    // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n  queue.interleaved = update;\n}\n\nexport function enqueueConcurrentClassUpdate<State>(\n  fiber: Fiber,\n  queue: ClassQueue<State>,\n  update: ClassUpdate<State>,\n  lane: Lane,\n) {\n  const interleaved = queue.interleaved;\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n    // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n  queue.interleaved = update;\n\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\n\nexport function enqueueConcurrentRenderForLane(fiber: Fiber, lane: Lane) {\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\n\n// Calling this function outside this module should only be done for backwards\n// compatibility and should always be accompanied by a warning.\nexport const unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;\n\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  if (__DEV__) {\n    if (\n      alternate === null &&\n      (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n  // Walk the parent path to the root and update the child lanes.\n  let node = sourceFiber;\n  let parent = sourceFiber.return;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      if (__DEV__) {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    node = parent;\n    parent = parent.return;\n  }\n  if (node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  NoLanes,\n  isSubsetOfLanes,\n  mergeLanes,\n  isTransitionLane,\n  intersectLanes,\n  markRootEntangled,\n} from './ReactFiberLane.old';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {Callback, ShouldCapture, DidCapture} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  markSkippedUpdateLanes,\n  isUnsafeClassRenderPhaseUpdate,\n} from './ReactFiberWorkLoop.old';\nimport {\n  enqueueConcurrentClassUpdate,\n  unsafe_markUpdateLaneFromFiberToRoot,\n} from './ReactFiberConcurrentUpdates.old';\nimport {setIsStrictModeForDevtools} from './ReactFiberDevToolsHook.old';\n\nimport assign from 'shared/assign';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\nexport type SharedQueue<State> = {|\n  pending: Update<State> | null,\n  interleaved: Update<State> | null,\n  lanes: Lanes,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  effects: Array<Update<State>> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n    },\n    effects: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(\n  fiber: Fiber,\n  update: Update<State>,\n  lane: Lane,\n): FiberRoot | null {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return null;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n\n  if (isUnsafeClassRenderPhaseUpdate(fiber)) {\n    // This is an unsafe render phase update. Add directly to the update\n    // queue so we can process it immediately during the current render.\n    const pending = sharedQueue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    sharedQueue.pending = update;\n\n    // Update the childLanes even though we're most likely already rendering\n    // this fiber. This is for backwards compatibility in the case where you\n    // update a different component during render phase than the one that is\n    // currently renderings (a pattern that is accompanied by a warning).\n    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n  } else {\n    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n  }\n}\n\nexport function entangleTransitions(root: FiberRoot, fiber: Fiber, lane: Lane) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<mixed> = (updateQueue: any).shared;\n  if (isTransitionLane(lane)) {\n    let queueLanes = sharedQueue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      const updateLane = update.lane;\n      const updateEventTime = update.eventTime;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (\n          callback !== null &&\n          // If the update was already committed, we should not queue its\n          // callback again.\n          update.lane !== NoLane\n        ) {\n          workInProgress.flags |= Callback;\n          const effects = queue.effects;\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    // Interleaved updates are stored on a separate queue. We aren't going to\n    // process them during this render, but we do need to track which lanes\n    // are remaining.\n    const lastInterleaved = queue.shared.interleaved;\n    if (lastInterleaved !== null) {\n      let interleaved = lastInterleaved;\n      do {\n        newLanes = mergeLanes(newLanes, interleaved.lane);\n        interleaved = ((interleaved: any).next: Update<State>);\n      } while (interleaved !== lastInterleaved);\n    } else if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    }\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (typeof callback !== 'function') {\n    throw new Error(\n      'Invalid argument passed as callback. Expected a function. Instead ' +\n        `received: ${callback}`,\n    );\n  }\n\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function commitUpdateQueue<State>(\n  finishedWork: Fiber,\n  finishedQueue: UpdateQueue<State>,\n  instance: any,\n): void {\n  // Commit the effects\n  const effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n  if (effects !== null) {\n    for (let i = 0; i < effects.length; i++) {\n      const effect = effects[i];\n      const callback = effect.callback;\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport * as React from 'react';\nimport {\n  LayoutStatic,\n  MountLayoutDev,\n  Update,\n  Snapshot,\n} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport assign from 'shared/assign';\nimport isArray from 'shared/isArray';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  DebugTracingMode,\n  NoMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  entangleTransitions,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactFiberClassUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook.old';\n\nconst fakeInternalInstance = {};\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentNameFromType(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      throw new Error(\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n  let partialState = getDerivedStateFromProps(nextProps, prevState);\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    let shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(\n            newProps,\n            newState,\n            nextContext,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentNameFromType(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentNameFromType(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentNameFromType(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentNameFromType(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentNameFromType(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  let instance = new ctor(props, context);\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentNameFromType(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentNameFromFiber(workInProgress) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentNameFromFiber(workInProgress) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    let fiberFlags: Flags = Update;\n    if (enableSuspenseLayoutEffectSemantics) {\n      fiberFlags |= LayoutStatic;\n    }\n    if (\n      __DEV__ &&\n      enableStrictEffects &&\n      (workInProgress.mode & StrictEffectsMode) !== NoMode\n    ) {\n      fiberFlags |= MountLayoutDev;\n    }\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing() &&\n    !(\n      enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies)\n    )\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    ) ||\n    // TODO: In some cases, we'll end up checking if context has changed twice,\n    // both before and after `shouldComponentUpdate` has been called. Not ideal,\n    // but I'm loath to refactor this function. This only happens for memoized\n    // components so it's not that common.\n    (enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies));\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {Placement, ChildDeletion, Forked} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\nimport {ClassComponent, HostText, HostPortal, Fragment} from './ReactWorkTags';\nimport isArray from 'shared/isArray';\nimport {warnAboutStringRefs} from 'shared/ReactFeatureFlags';\nimport {checkPropStringCoercion} from 'shared/CheckStringCoercion';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {pushTreeFork} from './ReactFiberTreeContext.old';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n\n    if (typeof child._store !== 'object') {\n      throw new Error(\n        'React Component in warnForMissingKey should have a _store. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    child._store.validated = true;\n\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName =\n          getComponentNameFromFiber(returnFiber) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n\n        if (ownerFiber.tag !== ClassComponent) {\n          throw new Error(\n            'Function components cannot have string refs. ' +\n              'We recommend using useRef() instead. ' +\n              'Learn more about using refs safely here: ' +\n              'https://reactjs.org/link/strict-mode-string-ref',\n          );\n        }\n\n        inst = ownerFiber.stateNode;\n      }\n\n      if (!inst) {\n        throw new Error(\n          `Missing owner for string ref ${mixedRef}. This error is likely caused by a ` +\n            'bug in React. Please file an issue.',\n        );\n      }\n      // Assigning this to a const so Flow knows it won't change in the closure\n      const resolvedInst = inst;\n\n      if (__DEV__) {\n        checkPropStringCoercion(mixedRef, 'ref');\n      }\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = resolvedInst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = resolvedInst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      if (typeof mixedRef !== 'string') {\n        throw new Error(\n          'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n        );\n      }\n\n      if (!element._owner) {\n        throw new Error(\n          `Element ref was specified as a string (${mixedRef}) but no owner was set. This could happen for one of` +\n            ' the following reasons:\\n' +\n            '1. You may be adding a ref to a function component\\n' +\n            \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n            '3. You have multiple copies of React loaded\\n' +\n            'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        );\n      }\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  const childString = Object.prototype.toString.call(newChild);\n\n  throw new Error(\n    `Objects are not valid as a React child (found: ${\n      childString === '[object Object]'\n        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n        : childString\n    }). ` +\n      'If you meant to render a collection of children, use an array ' +\n      'instead.',\n  );\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  const payload = lazyType._payload;\n  const init = lazyType._init;\n  return init(payload);\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const elementType = element.type;\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(\n        returnFiber,\n        current,\n        element.props.children,\n        lanes,\n        element.key,\n      );\n    }\n    if (current !== null) {\n      if (\n        current.elementType === elementType ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__\n          ? isCompatibleFamilyForHotReloading(current, element)\n          : false) ||\n        // Lazy types should reconcile their resolved type.\n        // We need to do this after the Hot Reloading check above,\n        // because hot reloading has different semantics than prod because\n        // it doesn't resuspend. So we can't let the call below suspend.\n        (typeof elementType === 'object' &&\n          elementType !== null &&\n          elementType.$$typeof === REACT_LAZY_TYPE &&\n          resolveLazy(elementType) === current.type)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return createChild(returnFiber, init(payload), lanes);\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return updateFromMap(\n            existingChildren,\n            returnFiber,\n            newIdx,\n            init(payload),\n            lanes,\n          );\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          const payload = child._payload;\n          const init = (child._init: any);\n          warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n          break;\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw new Error(\n        'An object is not an iterable. This error is likely caused by a bug in ' +\n          'React. Please file an issue.',\n      );\n    }\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        const elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        } else {\n          if (\n            child.elementType === elementType ||\n            // Keep this check inline so it only runs on the false path:\n            (__DEV__\n              ? isCompatibleFamilyForHotReloading(child, element)\n              : false) ||\n            // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            (typeof elementType === 'object' &&\n              elementType !== null &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              resolveLazy(elementType) === child.type)\n          ) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props);\n            existing.ref = coerceRef(returnFiber, child, element);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          // TODO: This function is supposed to be non-recursive.\n          return reconcileChildFibers(\n            returnFiber,\n            currentFirstChild,\n            init(payload),\n            lanes,\n          );\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw new Error('Resuming work not yet implemented.');\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  if (c === NO_CONTEXT) {\n    throw new Error(\n      'Expected host context to exist. This error is likely caused by a bug ' +\n        'in React. Please file an issue.',\n    );\n  }\n\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\n// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// Subtree Flags:\n\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\n\n// Shallow Flags:\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function addSubtreeSuspenseContext(\n  parentContext: SuspenseContext,\n  subtreeContext: SubtreeSuspenseContext,\n): SuspenseContext {\n  return parentContext | subtreeContext;\n}\n\nexport function pushSuspenseContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {TreeContext} from './ReactFiberTreeContext.old';\n\nimport {enableSuspenseAvoidThisFallback} from 'shared/ReactFeatureFlags';\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n  unstable_name?: string,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  treeContext: null | TreeContext,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n|};\n\nexport function shouldCaptureSuspense(\n  workInProgress: Fiber,\n  hasInvisibleParent: boolean,\n): boolean {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  const nextState: SuspenseState | null = workInProgress.memoizedState;\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n    return false;\n  }\n  const props = workInProgress.memoizedProps;\n  // Regular boundaries always capture.\n  if (\n    !enableSuspenseAvoidThisFallback ||\n    props.unstable_avoidThisFallback !== true\n  ) {\n    return true;\n  }\n  // If it's a boundary we should avoid, then we prefer to bubble up to the\n  // parent boundary if it is currently invisible.\n  if (hasInvisibleParent) {\n    return false;\n  }\n  // If the parent is not able to handle it, we must handle it.\n  return true;\n}\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*   */ 0b0000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b0001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Insertion = /*  */ 0b0010;\nexport const Layout = /*    */ 0b0100;\nexport const Passive = /*   */ 0b1000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\n\nimport {enableCache} from 'shared/ReactFeatureFlags';\nimport {REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\n\nimport {pushProvider, popProvider} from './ReactFiberNewContext.old';\nimport * as Scheduler from 'scheduler';\n\n// In environments without AbortController (e.g. tests)\n// replace it with a lightweight shim that only has the features we use.\nconst AbortControllerLocal = enableCache\n  ? typeof AbortController !== 'undefined'\n    ? AbortController\n    : (function AbortControllerShim() {\n        const listeners = [];\n        const signal = (this.signal = {\n          aborted: false,\n          addEventListener: (type, listener) => {\n            listeners.push(listener);\n          },\n        });\n\n        this.abort = () => {\n          signal.aborted = true;\n          listeners.forEach(listener => listener());\n        };\n      }: AbortController)\n  : (null: any);\n\nexport type Cache = {|\n  controller: AbortControllerLocal,\n  data: Map<() => mixed, mixed>,\n  refCount: number,\n|};\n\nexport type CacheComponentState = {|\n  +parent: Cache,\n  +cache: Cache,\n|};\n\nexport type SpawnedCachePool = {|\n  +parent: Cache,\n  +pool: Cache,\n|};\n\n// Intentionally not named imports because Rollup would\n// use dynamic dispatch for CommonJS interop named imports.\nconst {\n  unstable_scheduleCallback: scheduleCallback,\n  unstable_NormalPriority: NormalPriority,\n} = Scheduler;\n\nexport const CacheContext: ReactContext<Cache> = enableCache\n  ? {\n      $$typeof: REACT_CONTEXT_TYPE,\n      // We don't use Consumer/Provider for Cache components. So we'll cheat.\n      Consumer: (null: any),\n      Provider: (null: any),\n      // We'll initialize these at the root.\n      _currentValue: (null: any),\n      _currentValue2: (null: any),\n      _threadCount: 0,\n      _defaultValue: (null: any),\n      _globalName: (null: any),\n    }\n  : (null: any);\n\nif (__DEV__ && enableCache) {\n  CacheContext._currentRenderer = null;\n  CacheContext._currentRenderer2 = null;\n}\n\n// Creates a new empty Cache instance with a ref-count of 0. The caller is responsible\n// for retaining the cache once it is in use (retainCache), and releasing the cache\n// once it is no longer needed (releaseCache).\nexport function createCache(): Cache {\n  if (!enableCache) {\n    return (null: any);\n  }\n  const cache: Cache = {\n    controller: new AbortControllerLocal(),\n    data: new Map(),\n    refCount: 0,\n  };\n\n  return cache;\n}\n\nexport function retainCache(cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  if (__DEV__) {\n    if (cache.controller.signal.aborted) {\n      console.warn(\n        'A cache instance was retained after it was already freed. ' +\n          'This likely indicates a bug in React.',\n      );\n    }\n  }\n  cache.refCount++;\n}\n\n// Cleanup a cache instance, potentially freeing it if there are no more references\nexport function releaseCache(cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  cache.refCount--;\n  if (__DEV__) {\n    if (cache.refCount < 0) {\n      console.warn(\n        'A cache instance was released after it was already freed. ' +\n          'This likely indicates a bug in React.',\n      );\n    }\n  }\n  if (cache.refCount === 0) {\n    scheduleCallback(NormalPriority, () => {\n      cache.controller.abort();\n    });\n  }\n}\n\nexport function pushCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  pushProvider(workInProgress, CacheContext, cache);\n}\n\nexport function popCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  popProvider(CacheContext, workInProgress);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n  StartTransitionOptions,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher, HookType} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  enableCache,\n  enableUseRefAccessWarning,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n  enableUseMutableSource,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  SyncLane,\n  NoLanes,\n  isSubsetOfLanes,\n  includesBlockingLane,\n  includesOnlyNonUrgentLanes,\n  claimNextTransitionLane,\n  mergeLanes,\n  removeLanes,\n  intersectLanes,\n  isTransitionLane,\n  markRootEntangled,\n  markRootMutableRead,\n  NoTimestamp,\n} from './ReactFiberLane.old';\nimport {\n  ContinuousEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  higherEventPriority,\n} from './ReactEventPriorities.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {HostRoot, CacheComponent} from './ReactWorkTags';\nimport {\n  LayoutStatic as LayoutStaticEffect,\n  MountLayoutDev as MountLayoutDevEffect,\n  MountPassiveDev as MountPassiveDevEffect,\n  Passive as PassiveEffect,\n  PassiveStatic as PassiveStaticEffect,\n  StaticMask as StaticMaskEffect,\n  Update as UpdateEffect,\n  StoreConsistency,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n  Insertion as HookInsertion,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  markSkippedUpdateLanes,\n} from './ReactFiberWorkLoop.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport is from 'shared/objectIs';\nimport isArray from 'shared/isArray';\nimport {\n  markWorkInProgressReceivedUpdate,\n  checkIfWorkInProgressReceivedUpdate,\n} from './ReactFiberBeginWork.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './ReactFiberDevToolsHook.old';\nimport {createCache, CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createUpdate as createLegacyQueueUpdate,\n  enqueueUpdate as enqueueLegacyQueueUpdate,\n  entangleTransitions as entangleLegacyQueueTransitions,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  enqueueConcurrentHookUpdate,\n  enqueueConcurrentHookUpdateAndEagerlyBailout,\n  enqueueConcurrentRenderForLane,\n} from './ReactFiberConcurrentUpdates.old';\nimport {getTreeId} from './ReactFiberTreeContext.old';\nimport {now} from './Scheduler';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport type Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  hasEagerState: boolean,\n  eagerState: S | null,\n  next: Update<S, A>,\n|};\n\nexport type UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  interleaved: Update<S, A> | null,\n  lanes: Lanes,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnUncachedGetSnapshot;\nif (__DEV__) {\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: any,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\ntype StoreInstance<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\ntype StoreConsistencyCheck<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\nexport type FunctionComponentUpdateQueue = {|\n  lastEffect: Effect | null,\n  stores: Array<StoreConsistencyCheck<any>> | null,\n|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n// Counts the number of useId hooks in this component.\nlet localIdCounter: number = 0;\n// Used for ids that are generated completely client-side (i.e. not during\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\nlet globalClientIdCounter: number = 0;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  throw new Error(\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      localIdCounter = 0;\n\n      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n        throw new Error(\n          'Too many re-renders. React limits the number of renders to prevent ' +\n            'an infinite loop.',\n        );\n      }\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n    if (\n      current !== null &&\n      (current.flags & StaticMaskEffect) !==\n        (workInProgress.flags & StaticMaskEffect) &&\n      // Disable this warning in legacy mode, because legacy Suspense is weird\n      // and creates false positives. To make this work in legacy mode, we'd\n      // need to mark fibers that commit in an incomplete state, somehow. For\n      // now I'll disable the warning that most of the bugs that would trigger\n      // it are either exclusive to concurrent mode or exist in both.\n      (current.mode & ConcurrentMode) !== NoMode\n    ) {\n      console.error(\n        'Internal React error: Expected static flag was missing. Please ' +\n          'notify the React team.',\n      );\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n  // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  if (didRenderTooFewHooks) {\n    throw new Error(\n      'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n        'early return statement.',\n    );\n  }\n\n  if (enableLazyContextPropagation) {\n    if (current !== null) {\n      if (!checkIfWorkInProgressReceivedUpdate()) {\n        // If there were no changes to props or state, we need to check if there\n        // was a context change. We didn't already do this because there's no\n        // 1:1 correspondence between dependencies and hooks. Although, because\n        // there almost always is in the common case (`readContext` is an\n        // internal API), we could compare in there. OTOH, we only hit this case\n        // if everything else bails out, so on the whole it might be better to\n        // keep the comparison out of the common path.\n        const currentDependencies = current.dependencies;\n        if (\n          currentDependencies !== null &&\n          checkIfContextChanged(currentDependencies)\n        ) {\n          markWorkInProgressReceivedUpdate();\n        }\n      }\n    }\n  }\n  return children;\n}\n\nexport function checkDidRenderIdHook() {\n  // This should be called immediately after every renderWithHooks call.\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n  // separate function to avoid using an array tuple.\n  const didRenderIdHook = localIdCounter !== 0;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (workInProgress.mode & StrictEffectsMode) !== NoMode\n  ) {\n    workInProgress.flags &= ~(\n      MountPassiveDevEffect |\n      MountLayoutDevEffect |\n      PassiveEffect |\n      UpdateEffect\n    );\n  } else {\n    workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  }\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n  localIdCounter = 0;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    if (nextCurrentHook === null) {\n      throw new Error('Rendered more hooks than during the previous render.');\n    }\n\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n    stores: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, A> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchReducerAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            hasEagerState: update.hasEagerState,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n  const lastInterleaved = queue.interleaved;\n  if (lastInterleaved !== null) {\n    let interleaved = lastInterleaved;\n    do {\n      const interleavedLane = interleaved.lane;\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        interleavedLane,\n      );\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = ((interleaved: any).next: Update<S, A>);\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubscribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    // Intentioally throw an error to force React to retry synchronously. During\n    // the synchronous retry, it will block interleaved mutations, so we should\n    // get a consistent read. Therefore, the following error should never be\n    // visible to the user.\n\n    // We expect this error not to be thrown during the synchronous retry,\n    // because we blocked interleaved mutations.\n    throw new Error(\n      'Cannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n\n  if (root === null) {\n    throw new Error(\n      'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n    );\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubscribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue: UpdateQueue<Snapshot, BasicStateAction<Snapshot>> = {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchSetState.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubscribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const hook = mountWorkInProgressHook();\n\n  let nextSnapshot;\n  const isHydrating = getIsHydrating();\n  if (isHydrating) {\n    if (getServerSnapshot === undefined) {\n      throw new Error(\n        'Missing getServerSnapshot, which is required for ' +\n          'server-rendered content. Will revert to client rendering.',\n      );\n    }\n    nextSnapshot = getServerSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        if (nextSnapshot !== getServerSnapshot()) {\n          console.error(\n            'The result of getServerSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n  } else {\n    nextSnapshot = getSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        const cachedSnapshot = getSnapshot();\n        if (!is(nextSnapshot, cachedSnapshot)) {\n          console.error(\n            'The result of getSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n    const root: FiberRoot | null = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  hook.memoizedState = nextSnapshot;\n  const inst: StoreInstance<T> = {\n    value: nextSnapshot,\n    getSnapshot,\n  };\n  hook.queue = inst;\n\n  // Schedule an effect to subscribe to the store.\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\n\n  // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n  // TODO: We can move this to the passive phase once we add a pre-commit\n  // consistency check. See the next comment.\n  fiber.flags |= PassiveEffect;\n  pushEffect(\n    HookHasEffect | HookPassive,\n    updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n    undefined,\n    null,\n  );\n\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const hook = updateWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  const nextSnapshot = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedSnapshot = getSnapshot();\n      if (!is(nextSnapshot, cachedSnapshot)) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n  const prevSnapshot = hook.memoizedState;\n  const snapshotChanged = !is(prevSnapshot, nextSnapshot);\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n  const inst = hook.queue;\n\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n    subscribe,\n  ]);\n\n  // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n  if (\n    inst.getSnapshot !== getSnapshot ||\n    snapshotChanged ||\n    // Check if the susbcribe function changed. We can save some memory by\n    // checking whether we scheduled a subscription effect above.\n    (workInProgressHook !== null &&\n      workInProgressHook.memoizedState.tag & HookHasEffect)\n  ) {\n    fiber.flags |= PassiveEffect;\n    pushEffect(\n      HookHasEffect | HookPassive,\n      updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n      undefined,\n      null,\n    );\n\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    const root: FiberRoot | null = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck<T>(\n  fiber: Fiber,\n  getSnapshot: () => T,\n  renderedSnapshot: T,\n) {\n  fiber.flags |= StoreConsistency;\n  const check: StoreConsistencyCheck<T> = {\n    getSnapshot,\n    value: renderedSnapshot,\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.stores = [check];\n  } else {\n    const stores = componentUpdateQueue.stores;\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance<T>(\n  fiber: Fiber,\n  inst: StoreInstance<T>,\n  nextSnapshot: T,\n  getSnapshot: () => T,\n) {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot;\n\n  // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  const handleStoreChange = () => {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  };\n  // Subscribe to the store and return a clean-up function.\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n  }\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchSetState.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nlet stackContainsErrorMessage: boolean | null = null;\n\nfunction getCallerStackFrame(): string {\n  // eslint-disable-next-line react-internal/prod-error-codes\n  const stackFrames = new Error('Error message').stack.split('\\n');\n\n  // Some browsers (e.g. Chrome) include the error message in the stack\n  // but others (e.g. Firefox) do not.\n  if (stackContainsErrorMessage === null) {\n    stackContainsErrorMessage = stackFrames[0].includes('Error message');\n  }\n\n  return stackContainsErrorMessage\n    ? stackFrames.slice(3, 4).join('\\n')\n    : stackFrames.slice(2, 3).join('\\n');\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  if (enableUseRefAccessWarning) {\n    if (__DEV__) {\n      // Support lazy initialization pattern shown in docs.\n      // We need to store the caller stack frame so that we don't warn on subsequent renders.\n      let hasBeenInitialized = initialValue != null;\n      let lazyInitGetterStack = null;\n      let didCheckForLazyInit = false;\n\n      // Only warn once per component+hook.\n      let didWarnAboutRead = false;\n      let didWarnAboutWrite = false;\n\n      let current = initialValue;\n      const ref = {\n        get current() {\n          if (!hasBeenInitialized) {\n            didCheckForLazyInit = true;\n            lazyInitGetterStack = getCallerStackFrame();\n          } else if (currentlyRenderingFiber !== null && !didWarnAboutRead) {\n            if (\n              lazyInitGetterStack === null ||\n              lazyInitGetterStack !== getCallerStackFrame()\n            ) {\n              didWarnAboutRead = true;\n              console.warn(\n                '%s: Unsafe read of a mutable value during render.\\n\\n' +\n                  'Reading from a ref during render is only safe if:\\n' +\n                  '1. The ref value has not been updated, or\\n' +\n                  '2. The ref holds a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n          return current;\n        },\n        set current(value) {\n          if (currentlyRenderingFiber !== null && !didWarnAboutWrite) {\n            if (hasBeenInitialized || !didCheckForLazyInit) {\n              didWarnAboutWrite = true;\n              console.warn(\n                '%s: Unsafe write of a mutable value during render.\\n\\n' +\n                  'Writing to a ref during render is only safe if the ref holds ' +\n                  'a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n\n          hasBeenInitialized = true;\n          current = value;\n        },\n      };\n      Object.seal(ref);\n      hook.memoizedState = ref;\n      return ref;\n    } else {\n      const ref = {current: initialValue};\n      hook.memoizedState = ref;\n      return ref;\n    }\n  } else {\n    const ref = {current: initialValue};\n    hook.memoizedState = ref;\n    return ref;\n  }\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    return mountEffectImpl(\n      MountPassiveDevEffect | PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  } else {\n    return mountEffectImpl(\n      PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  }\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(PassiveEffect, HookPassive, create, deps);\n}\n\nfunction mountInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return mountEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction updateInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(fiberFlags, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(\n    fiberFlags,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = value;\n  return value;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const hook = updateWorkInProgressHook();\n  const resolvedCurrentHook: Hook = (currentHook: any);\n  const prevValue: T = resolvedCurrentHook.memoizedState;\n  return updateDeferredValueImpl(hook, prevValue, value);\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const hook = updateWorkInProgressHook();\n  if (currentHook === null) {\n    // This is a rerender during a mount.\n    hook.memoizedState = value;\n    return value;\n  } else {\n    // This is a rerender during an update.\n    const prevValue: T = currentHook.memoizedState;\n    return updateDeferredValueImpl(hook, prevValue, value);\n  }\n}\n\nfunction updateDeferredValueImpl<T>(hook: Hook, prevValue: T, value: T): T {\n  const shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n  if (shouldDeferValue) {\n    // This is an urgent update. If the value has changed, keep using the\n    // previous value and spawn a deferred render to update it later.\n\n    if (!is(value, prevValue)) {\n      // Schedule a deferred render\n      const deferredLane = claimNextTransitionLane();\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        deferredLane,\n      );\n      markSkippedUpdateLanes(deferredLane);\n\n      // Set this to true to indicate that the rendered value is inconsistent\n      // from the latest value. The name \"baseState\" doesn't really match how we\n      // use it because we're reusing a state hook field instead of creating a\n      // new one.\n      hook.baseState = true;\n    }\n\n    // Reuse the previous value\n    return prevValue;\n  } else {\n    // This is not an urgent update, so we can use the latest value regardless\n    // of what it is. No need to defer it.\n\n    // However, if we're currently inside a spawned render, then we need to mark\n    // this as an update to prevent the fiber from bailing out.\n    //\n    // `baseState` is true when the current value is different from the rendered\n    // value. The name doesn't really match how we use it because we're reusing\n    // a state hook field instead of creating a new one.\n    if (hook.baseState) {\n      // Flip this back to false.\n      hook.baseState = false;\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = value;\n    return value;\n  }\n}\n\nfunction startTransition(setPending, callback, options) {\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(\n    higherEventPriority(previousPriority, ContinuousEventPriority),\n  );\n\n  setPending(true);\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = {};\n  const currentTransition = ReactCurrentBatchConfig.transition;\n\n  if (enableTransitionTracing) {\n    if (options !== undefined && options.name !== undefined) {\n      ReactCurrentBatchConfig.transition.name = options.name;\n      ReactCurrentBatchConfig.transition.startTime = now();\n    }\n  }\n\n  if (__DEV__) {\n    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n  }\n\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    if (__DEV__) {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        const updatedFibersCount = currentTransition._updatedFibers.size;\n        if (updatedFibersCount > 10) {\n          console.warn(\n            'Detected a large number of updates inside startTransition. ' +\n              'If this is due to a subscription please re-write it to use React provided hooks. ' +\n              'Otherwise concurrent mode guarantees are off the table.',\n          );\n        }\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method never changes.\n  const start = startTransition.bind(null, setPending);\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending] = updateState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending] = rerenderState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction mountId(): string {\n  const hook = mountWorkInProgressHook();\n\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n  const identifierPrefix = root.identifierPrefix;\n\n  let id;\n  if (getIsHydrating()) {\n    const treeId = getTreeId();\n\n    // Use a captial R prefix for server-generated ids.\n    id = ':' + identifierPrefix + 'R' + treeId;\n\n    // Unless this is the first id at this level, append a number at the end\n    // that represents the position of this useId hook among all the useId\n    // hooks for this fiber.\n    const localId = localIdCounter++;\n    if (localId > 0) {\n      id += 'H' + localId.toString(32);\n    }\n\n    id += ':';\n  } else {\n    // Use a lowercase r prefix for client-generated ids.\n    const globalClientId = globalClientIdCounter++;\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId(): string {\n  const hook = updateWorkInProgressHook();\n  const id: string = hook.memoizedState;\n  return id;\n}\n\nfunction mountRefresh() {\n  const hook = mountWorkInProgressHook();\n  const refresh = (hook.memoizedState = refreshCache.bind(\n    null,\n    currentlyRenderingFiber,\n  ));\n  return refresh;\n}\n\nfunction updateRefresh() {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction refreshCache<T>(fiber: Fiber, seedKey: ?() => T, seedValue: T) {\n  if (!enableCache) {\n    return;\n  }\n  // TODO: Does Cache work in legacy mode? Should decide and write a test.\n  // TODO: Consider warning if the refresh is at discrete priority, or if we\n  // otherwise suspect that it wasn't batched properly.\n  let provider = fiber.return;\n  while (provider !== null) {\n    switch (provider.tag) {\n      case CacheComponent:\n      case HostRoot: {\n        // Schedule an update on the cache boundary to trigger a refresh.\n        const lane = requestUpdateLane(provider);\n        const eventTime = requestEventTime();\n        const refreshUpdate = createLegacyQueueUpdate(eventTime, lane);\n        const root = enqueueLegacyQueueUpdate(provider, refreshUpdate, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, provider, lane, eventTime);\n          entangleLegacyQueueTransitions(root, provider, lane);\n        }\n\n        // TODO: If a refresh never commits, the new cache created here must be\n        // released. A simple case is start refreshing a cache boundary, but then\n        // unmount that boundary before the refresh completes.\n        const seededCache = createCache();\n        if (seedKey !== null && seedKey !== undefined && root !== null) {\n          // Seed the cache with the value passed by the caller. This could be\n          // from a server mutation, or it could be a streaming response.\n          seededCache.data.set(seedKey, seedValue);\n        }\n\n        const payload = {\n          cache: seededCache,\n        };\n        refreshUpdate.payload = payload;\n        return;\n      }\n    }\n    provider = provider.return;\n  }\n  // TODO: Warn if unmounted?\n}\n\nfunction dispatchReducerAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      const eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction dispatchSetState<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const alternate = fiber.alternate;\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            // TODO: Do we still need to entangle transitions in this case?\n            enqueueConcurrentHookUpdateAndEagerlyBailout(\n              fiber,\n              queue,\n              update,\n              lane,\n            );\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      const eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction isRenderPhaseUpdate(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  return (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  );\n}\n\nfunction enqueueRenderPhaseUpdate<S, A>(\n  queue: UpdateQueue<S, A>,\n  update: Update<S, A>,\n) {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  const pending = queue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  queue.pending = update;\n}\n\n// TODO: Move to ReactFiberConcurrentUpdates?\nfunction entangleTransitionUpdate<S, A>(\n  root: FiberRoot,\n  queue: UpdateQueue<S, A>,\n  lane: Lane,\n) {\n  if (isTransitionLane(lane)) {\n    let queueLanes = queue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nfunction markUpdateInDevTools(fiber, lane, action) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentNameFromFiber(fiber) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nfunction getCacheSignal(): AbortSignal {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  return cache.controller.signal;\n}\n\nfunction getCacheForType<T>(resourceType: () => T): T {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  let cacheForType: T | void = (cache.data.get(resourceType): any);\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.data.set(resourceType, cacheForType);\n  }\n  return cacheForType;\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (ContextOnlyDispatcher: Dispatcher).getCacheSignal = getCacheSignal;\n  (ContextOnlyDispatcher: Dispatcher).getCacheForType = getCacheForType;\n  (ContextOnlyDispatcher: Dispatcher).useCacheRefresh = throwInvalidHookError;\n}\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useInsertionEffect: mountInsertionEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useSyncExternalStore: mountSyncExternalStore,\n  useId: mountId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnMount: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnMount: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnMount: Dispatcher).useCacheRefresh = mountRefresh;\n}\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnUpdate: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnRerender: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnRerender: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnRerender: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      mountHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {HostRoot, Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  isCurrentUpdateNested(): boolean,\n  markNestedUpdateScheduled(): void,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  syncNestedUpdateFlag(): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\nlet currentUpdateIsNested: boolean = false;\nlet nestedUpdateScheduled: boolean = false;\n\nfunction isCurrentUpdateNested(): boolean {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  isCurrentUpdateNested,\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  resetNestedUpdateFlag,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n  digest: string | null,\n|};\n\nexport function createCapturedValueAtFiber<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n    digest: null,\n  };\n}\n\nexport function createCapturedValue<T>(\n  value: T,\n  digest: ?string,\n  stack: ?string,\n): CapturedValue<T> {\n  return {\n    value,\n    source: null,\n    stack: stack != null ? stack : null,\n    digest: digest != null ? digest : null,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  return true;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {HostRoot} from 'react-reconciler/src/ReactWorkTags';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentNameFromFiber(source) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        const errorBoundaryName =\n          getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactFiberClassUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n  IncompleteClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n  ForceClientRender,\n} from './ReactFiberFlags';\nimport {shouldCaptureSuspense} from './ReactFiberSuspenseComponent.old';\nimport {NoMode, ConcurrentMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableLazyContextPropagation,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValueAtFiber} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  renderDidSuspendDelayIfPossible,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n  restorePendingUpdaters,\n} from './ReactFiberWorkLoop.old';\nimport {propagateParentContextChangesToDeferredTree} from './ReactFiberNewContext.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n  includesSyncLane,\n} from './ReactFiberLane.old';\nimport {\n  getIsHydrating,\n  markDidThrowWhileHydratingDEV,\n  queueHydrationError,\n} from './ReactFiberHydrationContext.old';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      return getDerivedStateFromError(error);\n    };\n    update.callback = () => {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentNameFromFiber(fiber) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction attachRetryListener(\n  suspenseBoundary: Fiber,\n  root: FiberRoot,\n  wakeable: Wakeable,\n  lanes: Lanes,\n) {\n  // Retry listener\n  //\n  // If the fallback does commit, we need to attach a different type of\n  // listener. This one schedules an update on the Suspense boundary to turn\n  // the fallback state off.\n  //\n  // Stash the wakeable on the boundary fiber so we can access it in the\n  // commit phase.\n  //\n  // When the wakeable resolves, we'll attempt to render the boundary\n  // again (\"retry\").\n  const wakeables: Set<Wakeable> | null = (suspenseBoundary.updateQueue: any);\n  if (wakeables === null) {\n    const updateQueue = (new Set(): any);\n    updateQueue.add(wakeable);\n    suspenseBoundary.updateQueue = updateQueue;\n  } else {\n    wakeables.add(wakeable);\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber: Fiber, rootRenderLanes: Lanes) {\n  if (enableLazyContextPropagation) {\n    const currentSourceFiber = sourceFiber.alternate;\n    if (currentSourceFiber !== null) {\n      // Since we never visited the children of the suspended component, we\n      // need to propagate the context change now, to ensure that we visit\n      // them during the retry.\n      //\n      // We don't have to do this for errors because we retry errors without\n      // committing in between. So this is specific to Suspense.\n      propagateParentContextChangesToDeferredTree(\n        currentSourceFiber,\n        sourceFiber,\n        rootRenderLanes,\n      );\n    }\n  }\n\n  // Reset the memoizedState to what it was before we attempted to render it.\n  // A legacy mode Suspense quirk, only relevant to hook components.\n  const tag = sourceFiber.tag;\n  if (\n    (sourceFiber.mode & ConcurrentMode) === NoMode &&\n    (tag === FunctionComponent ||\n      tag === ForwardRef ||\n      tag === SimpleMemoComponent)\n  ) {\n    const currentSource = sourceFiber.alternate;\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction getNearestSuspenseBoundaryToCapture(returnFiber: Fiber) {\n  let node = returnFiber;\n  const hasInvisibleParentBoundary = hasSuspenseContext(\n    suspenseStackCursor.current,\n    (InvisibleParentSuspenseContext: SuspenseContext),\n  );\n  do {\n    if (\n      node.tag === SuspenseComponent &&\n      shouldCaptureSuspense(node, hasInvisibleParentBoundary)\n    ) {\n      return node;\n    }\n    // This boundary already captured during this render. Continue to the next\n    // boundary.\n    node = node.return;\n  } while (node !== null);\n  return null;\n}\n\nfunction markSuspenseBoundaryShouldCapture(\n  suspenseBoundary: Fiber,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  root: FiberRoot,\n  rootRenderLanes: Lanes,\n): Fiber | null {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n      // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (sourceFiber.tag === ClassComponent) {\n        const currentSourceFiber = sourceFiber.alternate;\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          const update = createUpdate(NoTimestamp, SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update, SyncLane);\n        }\n      }\n\n      // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n    return suspenseBoundary;\n  }\n  // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n  suspenseBoundary.flags |= ShouldCapture;\n  // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    // This is a wakeable. The component suspended.\n    const wakeable: Wakeable = (value: any);\n    resetSuspendedComponent(sourceFiber, rootRenderLanes);\n\n    if (__DEV__) {\n      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n        markDidThrowWhileHydratingDEV();\n      }\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(sourceFiber) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    const suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n    if (suspenseBoundary !== null) {\n      suspenseBoundary.flags &= ~ForceClientRender;\n      markSuspenseBoundaryShouldCapture(\n        suspenseBoundary,\n        returnFiber,\n        sourceFiber,\n        root,\n        rootRenderLanes,\n      );\n      // We only attach ping listeners in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n      if (suspenseBoundary.mode & ConcurrentMode) {\n        attachPingListener(root, wakeable, rootRenderLanes);\n      }\n      attachRetryListener(suspenseBoundary, root, wakeable, rootRenderLanes);\n      return;\n    } else {\n      // No boundary was found. Unless this is a sync update, this is OK.\n      // We can suspend and wait for more data to arrive.\n\n      if (!includesSyncLane(rootRenderLanes)) {\n        // This is not a sync update. Suspend. Since we're not activating a\n        // Suspense boundary, this will unwind all the way to the root without\n        // performing a second pass to render a fallback. (This is arguably how\n        // refresh transitions should work, too, since we're not going to commit\n        // the fallbacks anyway.)\n        //\n        // This case also applies to initial hydration.\n        attachPingListener(root, wakeable, rootRenderLanes);\n        renderDidSuspendDelayIfPossible();\n        return;\n      }\n\n      // This is a sync/discrete update. We treat this case like an error\n      // because discrete renders are expected to produce a complete tree\n      // synchronously to maintain consistency with external state.\n      const uncaughtSuspenseError = new Error(\n        'A component suspended while responding to synchronous input. This ' +\n          'will cause the UI to be replaced with a loading indicator. To ' +\n          'fix, updates that suspend should be wrapped ' +\n          'with startTransition.',\n      );\n\n      // If we're outside a transition, fall through to the regular error path.\n      // The error will be caught by the nearest suspense boundary.\n      value = uncaughtSuspenseError;\n    }\n  } else {\n    // This is a regular error, not a Suspense wakeable.\n    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n      markDidThrowWhileHydratingDEV();\n      const suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n      // If the error was thrown during hydration, we may be able to recover by\n      // discarding the dehydrated content and switching to a client render.\n      // Instead of surfacing the error, find the nearest Suspense boundary\n      // and render it again without hydration.\n      if (suspenseBoundary !== null) {\n        if ((suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n          // Set a flag to indicate that we should try rendering the normal\n          // children again, not the fallback.\n          suspenseBoundary.flags |= ForceClientRender;\n        }\n        markSuspenseBoundaryShouldCapture(\n          suspenseBoundary,\n          returnFiber,\n          sourceFiber,\n          root,\n          rootRenderLanes,\n        );\n\n        // Even though the user may not be affected by this error, we should\n        // still log it so it can be fixed.\n        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n        return;\n      }\n    } else {\n      // Otherwise, fall through to the error path.\n    }\n  }\n\n  value = createCapturedValueAtFiber(value, sourceFiber);\n  renderDidError(value);\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\nimport {enableCache, enableTransitionTracing} from 'shared/ReactFeatureFlags';\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  getWorkInProgressRoot,\n  getWorkInProgressTransitions,\n} from './ReactFiberWorkLoop.old';\nimport {\n  createCache,\n  retainCache,\n  CacheContext,\n} from './ReactFiberCacheComponent.old';\n\n// When retrying a Suspense/Offscreen boundary, we restore the cache that was\n// used during the previous render by placing it here, on the stack.\nconst resumedCache: StackCursor<Cache | null> = createCursor(null);\n\n// During the render/synchronous commit phase, we don't actually process the\n// transitions. Therefore, we want to lazily combine transitions. Instead of\n// comparing the arrays of transitions when we combine them and storing them\n// and filtering out the duplicates, we will instead store the unprocessed transitions\n// in an array and actually filter them in the passive phase.\nconst transitionStack: StackCursor<Array<Transition> | null> = createCursor(\n  null,\n);\n\nfunction peekCacheFromPool(): Cache | null {\n  if (!enableCache) {\n    return (null: any);\n  }\n\n  // Check if the cache pool already has a cache we can use.\n\n  // If we're rendering inside a Suspense boundary that is currently hidden,\n  // we should use the same cache that we used during the previous render, if\n  // one exists.\n  const cacheResumedFromPreviousRender = resumedCache.current;\n  if (cacheResumedFromPreviousRender !== null) {\n    return cacheResumedFromPreviousRender;\n  }\n\n  // Otherwise, check the root's cache pool.\n  const root = (getWorkInProgressRoot(): any);\n  const cacheFromRootCachePool = root.pooledCache;\n\n  return cacheFromRootCachePool;\n}\n\nexport function requestCacheFromPool(renderLanes: Lanes): Cache {\n  // Similar to previous function, except if there's not already a cache in the\n  // pool, we allocate a new one.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool !== null) {\n    return cacheFromPool;\n  }\n\n  // Create a fresh cache and add it to the root cache pool. A cache can have\n  // multiple owners:\n  // - A cache pool that lives on the FiberRoot. This is where all fresh caches\n  //   are originally created (TODO: except during refreshes, until we implement\n  //   this correctly). The root takes ownership immediately when the cache is\n  //   created. Conceptually, root.pooledCache is an Option<Arc<Cache>> (owned),\n  //   and the return value of this function is a &Arc<Cache> (borrowed).\n  // - One of several fiber types: host root, cache boundary, suspense\n  //   component. These retain and release in the commit phase.\n\n  const root = (getWorkInProgressRoot(): any);\n  const freshCache = createCache();\n  root.pooledCache = freshCache;\n  retainCache(freshCache);\n  if (freshCache !== null) {\n    root.pooledCacheLanes |= renderLanes;\n  }\n  return freshCache;\n}\n\nexport function pushRootTransition(\n  workInProgress: Fiber,\n  root: FiberRoot,\n  renderLanes: Lanes,\n) {\n  if (enableTransitionTracing) {\n    const rootTransitions = getWorkInProgressTransitions();\n    push(transitionStack, rootTransitions, workInProgress);\n  }\n}\n\nexport function popRootTransition(\n  workInProgress: Fiber,\n  root: FiberRoot,\n  renderLanes: Lanes,\n) {\n  if (enableTransitionTracing) {\n    pop(transitionStack, workInProgress);\n  }\n}\n\nexport function pushTransition(\n  offscreenWorkInProgress: Fiber,\n  prevCachePool: SpawnedCachePool | null,\n  newTransitions: Array<Transition> | null,\n): void {\n  if (enableCache) {\n    if (prevCachePool === null) {\n      push(resumedCache, resumedCache.current, offscreenWorkInProgress);\n    } else {\n      push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);\n    }\n  }\n\n  if (enableTransitionTracing) {\n    if (transitionStack.current === null) {\n      push(transitionStack, newTransitions, offscreenWorkInProgress);\n    } else if (newTransitions === null) {\n      push(transitionStack, transitionStack.current, offscreenWorkInProgress);\n    } else {\n      push(\n        transitionStack,\n        transitionStack.current.concat(newTransitions),\n        offscreenWorkInProgress,\n      );\n    }\n  }\n}\n\nexport function popTransition(workInProgress: Fiber, current: Fiber | null) {\n  if (current !== null) {\n    if (enableCache) {\n      pop(resumedCache, workInProgress);\n    }\n\n    if (enableTransitionTracing) {\n      pop(transitionStack, workInProgress);\n    }\n  }\n}\n\nexport function getSuspendedTransitions(): Array<Transition> | null {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  return transitionStack.current;\n}\n\nexport function getSuspendedCache(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n  // This function is called when a Suspense boundary suspends. It returns the\n  // cache that would have been used to render fresh data during this render,\n  // if there was any, so that we can resume rendering with the same cache when\n  // we receive more data.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also save the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n\nexport function getOffscreenDeferredCache(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also store the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  ReactProviderType,\n  ReactContext,\n  ReactNodeList,\n} from 'shared/ReactTypes';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n  OffscreenQueue,\n} from './ReactFiberOffscreenComponent';\nimport type {\n  Cache,\n  CacheComponentState,\n  SpawnedCachePool,\n} from './ReactFiberCacheComponent.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {RootState} from './ReactFiberRoot.old';\nimport {\n  enableSuspenseAvoidThisFallback,\n  enableCPUSuspense,\n  enableUseMutableSource,\n} from 'shared/ReactFeatureFlags';\n\nimport checkPropTypes from 'shared/checkPropTypes';\nimport {\n  markComponentRenderStarted,\n  markComponentRenderStopped,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook.old';\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  RefStatic,\n  ChildDeletion,\n  ForceUpdateForLegacySuspense,\n  StaticMask,\n  ShouldCapture,\n  ForceClientRender,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableCache,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n  enableSchedulingProfiler,\n  enableTransitionTracing,\n  enableLegacyHidden,\n} from 'shared/ReactFeatureFlags';\nimport isArray from 'shared/isArray';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n  enqueueCapturedUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictLegacyMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  getSuspenseInstanceFallbackErrorDetails,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n  isPrimaryRenderer,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {shouldError, shouldSuspend} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseContext,\n  InvisibleParentSuspenseContext,\n  ForceSuspenseFallback,\n  hasSuspenseContext,\n  setDefaultShallowSuspenseContext,\n  addSubtreeSuspenseContext,\n  setShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  lazilyPropagateParentContextChanges,\n  propagateParentContextChangesToDeferredTree,\n  checkIfContextChanged,\n  readContext,\n  prepareToReadContext,\n  scheduleContextWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {\n  renderWithHooks,\n  checkDidRenderIdHook,\n  bailoutHooks,\n} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  getIsHydrating,\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n  queueHydrationError,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n  pushRenderLanes,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\nimport {pushCacheProvider, CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createCapturedValue,\n  createCapturedValueAtFiber,\n  type CapturedValue,\n} from './ReactCapturedValue';\nimport {createClassErrorUpdate} from './ReactFiberThrow.old';\nimport is from 'shared/objectIs';\nimport {\n  getForksAtLevel,\n  isForkedChild,\n  pushTreeId,\n  pushMaterializedTreeId,\n} from './ReactFiberTreeContext.old';\nimport {\n  requestCacheFromPool,\n  pushRootTransition,\n  getSuspendedCache,\n  pushTransition,\n  getOffscreenDeferredCache,\n  getSuspendedTransitions,\n} from './ReactFiberTransition.old';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentNameFromType(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n    current,\n    renderLanes,\n  );\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentNameFromType(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n\n      // The props are shallowly equal. Reuse the previous props object, like we\n      // would during a normal fiber bailout.\n      //\n      // We don't have strong guarantees that the props object is referentially\n      // equal during updates where we can't bail out anyway — like if the props\n      // are shallowly equal, but there's a local state or context update in the\n      // same batch.\n      //\n      // However, as a principle, we should aim to make the behavior consistent\n      // across different ways of memoizing a component. For example, React.memo\n      // has a different internal Fiber layout if you pass a normal function\n      // component (SimpleMemoComponent) versus if you pass a different type\n      // like forwardRef (MemoComponent). But this is an implementation detail.\n      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n      // affect whether the props object is reused during a bailout.\n      workInProgress.pendingProps = nextProps = prevProps;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    (enableLegacyHidden && nextProps.mode === 'unstable-defer-without-hiding')\n  ) {\n    // Rendering a hidden tree.\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Consider how Offscreen should work with transitions in the future\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null,\n      };\n      workInProgress.memoizedState = nextState;\n      if (enableCache) {\n        // push the cache pool even though we're going to bail out\n        // because otherwise there'd be a context mismatch\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      let spawnedCachePool: SpawnedCachePool | null = null;\n      // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n      let nextBaseLanes;\n      if (prevState !== null) {\n        const prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n        if (enableCache) {\n          // Save the cache pool so we can resume later.\n          spawnedCachePool = getOffscreenDeferredCache();\n        }\n      } else {\n        nextBaseLanes = renderLanes;\n      }\n\n      // Schedule this fiber to re-render at offscreen priority. Then bailout.\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n      const nextState: OffscreenState = {\n        baseLanes: nextBaseLanes,\n        cachePool: spawnedCachePool,\n        transitions: null,\n      };\n      workInProgress.memoizedState = nextState;\n      workInProgress.updateQueue = null;\n      if (enableCache) {\n        // push the cache pool even though we're going to bail out\n        // because otherwise there'd be a context mismatch\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      pushRenderLanes(workInProgress, nextBaseLanes);\n\n      if (enableLazyContextPropagation && current !== null) {\n        // Since this tree will resume rendering in a separate render, we need\n        // to propagate parent contexts now so we don't lose track of which\n        // ones changed.\n        propagateParentContextChangesToDeferredTree(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n\n      return null;\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null,\n      };\n      workInProgress.memoizedState = nextState;\n      // Push the lanes that were skipped when we bailed out.\n      const subtreeRenderLanes =\n        prevState !== null ? prevState.baseLanes : renderLanes;\n      if (enableCache && current !== null) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState !== null ? prevState.cachePool : null;\n        // TODO: Consider if and how Offscreen pre-rendering should\n        // be attributed to the transition that spawned it\n        pushTransition(workInProgress, prevCachePool, null);\n      }\n\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    // Rendering a visible tree.\n    let subtreeRenderLanes;\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n\n      subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n      let prevCachePool = null;\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        prevCachePool = prevState.cachePool;\n      }\n\n      pushTransition(workInProgress, prevCachePool, null);\n\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      subtreeRenderLanes = renderLanes;\n\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n    }\n    pushRenderLanes(workInProgress, subtreeRenderLanes);\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateCacheComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableCache) {\n    return null;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const parentCache = readContext(CacheContext);\n\n  if (current === null) {\n    // Initial mount. Request a fresh cache from the pool.\n    const freshCache = requestCacheFromPool(renderLanes);\n    const initialState: CacheComponentState = {\n      parent: parentCache,\n      cache: freshCache,\n    };\n    workInProgress.memoizedState = initialState;\n    initializeUpdateQueue(workInProgress);\n    pushCacheProvider(workInProgress, freshCache);\n  } else {\n    // Check for updates\n    if (includesSomeLane(current.lanes, renderLanes)) {\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, null, null, renderLanes);\n    }\n    const prevState: CacheComponentState = current.memoizedState;\n    const nextState: CacheComponentState = workInProgress.memoizedState;\n\n    // Compare the new parent cache to the previous to see detect there was\n    // a refresh.\n    if (prevState.parent !== parentCache) {\n      // Refresh in parent. Update the parent.\n      const derivedState: CacheComponentState = {\n        parent: parentCache,\n        cache: parentCache,\n      };\n\n      // Copied from getDerivedStateFromProps implementation. Once the update\n      // queue is empty, persist the derived state onto the base state.\n      workInProgress.memoizedState = derivedState;\n      if (workInProgress.lanes === NoLanes) {\n        const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n        workInProgress.memoizedState = updateQueue.baseState = derivedState;\n      }\n\n      pushCacheProvider(workInProgress, parentCache);\n      // No need to propagate a context change because the refreshed parent\n      // already did.\n    } else {\n      // The parent didn't refresh. Now check if this cache did.\n      const nextCache = nextState.cache;\n      pushCacheProvider(workInProgress, nextCache);\n      if (nextCache !== prevState.cache) {\n        // This cache refreshed. Propagate a context change.\n        propagateContextChange(workInProgress, CacheContext, renderLanes);\n      }\n    }\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// This should only be called if the name changes\nfunction updateTracingMarkerComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    if (enableProfilerCommitHooks) {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      const stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n    if (enableSuspenseLayoutEffectSemantics) {\n      workInProgress.flags |= RefStatic;\n    }\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false: {\n        const instance = workInProgress.stateNode;\n        const ctor = workInProgress.type;\n        // TODO This way of resetting the error boundary state is a hack.\n        // Is there a better way to do this?\n        const tempInstance = new ctor(\n          workInProgress.memoizedProps,\n          instance.context,\n        );\n        const state = tempInstance.state;\n        instance.updater.enqueueSetState(instance, state, null);\n        break;\n      }\n      case true: {\n        workInProgress.flags |= DidCapture;\n        workInProgress.flags |= ShouldCapture;\n        // eslint-disable-next-line react-internal/prod-error-codes\n        const error = new Error('Simulated error coming from DevTools');\n        const lane = pickArbitraryLane(renderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        // Schedule the error boundary to re-render using updated state\n        const update = createClassErrorUpdate(\n          workInProgress,\n          createCapturedValueAtFiber(error, workInProgress),\n          lane,\n        );\n        enqueueCapturedUpdate(workInProgress, update);\n        break;\n      }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);\n\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentNameFromFiber(workInProgress) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (enableSchedulingProfiler) {\n      markComponentRenderStarted(workInProgress);\n    }\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n\n  const nextState: RootState = workInProgress.memoizedState;\n  const root: FiberRoot = workInProgress.stateNode;\n  pushRootTransition(workInProgress, root, renderLanes);\n\n  if (enableCache) {\n    const nextCache: Cache = nextState.cache;\n    pushCacheProvider(workInProgress, nextCache);\n    if (nextCache !== prevState.cache) {\n      // The root cache refreshed.\n      propagateContextChange(workInProgress, CacheContext, renderLanes);\n    }\n  }\n\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (supportsHydration && prevState.isDehydrated) {\n    // This is a hydration root whose shell has not yet hydrated. We should\n    // attempt to hydrate.\n\n    // Flip isDehydrated to false to indicate that when this render\n    // finishes, the root will no longer be dehydrated.\n    const overrideState: RootState = {\n      element: nextChildren,\n      isDehydrated: false,\n      cache: nextState.cache,\n      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,\n      transitions: nextState.transitions,\n    };\n    const updateQueue: UpdateQueue<RootState> = (workInProgress.updateQueue: any);\n    // `baseState` can always be the last state because the root doesn't\n    // have reducer functions so it doesn't need rebasing.\n    updateQueue.baseState = overrideState;\n    workInProgress.memoizedState = overrideState;\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during a previous attempt to hydrate the shell, so we\n      // forced a client render.\n      const recoverableError = createCapturedValueAtFiber(\n        new Error(\n          'There was an error while hydrating. Because the error happened outside ' +\n            'of a Suspense boundary, the entire root will switch to ' +\n            'client rendering.',\n        ),\n        workInProgress,\n      );\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n        recoverableError,\n      );\n    } else if (nextChildren !== prevChildren) {\n      const recoverableError = createCapturedValueAtFiber(\n        new Error(\n          'This root received an early update, before anything was able ' +\n            'hydrate. Switched the entire root to client rendering.',\n        ),\n        workInProgress,\n      );\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n        recoverableError,\n      );\n    } else {\n      // The outermost shell has not hydrated yet. Start hydrating.\n      enterHydrationState(workInProgress);\n      if (enableUseMutableSource) {\n        const mutableSourceEagerHydrationData =\n          root.mutableSourceEagerHydrationData;\n        if (mutableSourceEagerHydrationData != null) {\n          for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n            const mutableSource = ((mutableSourceEagerHydrationData[\n              i\n            ]: any): MutableSource<any>);\n            const version = mutableSourceEagerHydrationData[i + 1];\n            setWorkInProgressVersion(mutableSource, version);\n          }\n        }\n      }\n\n      const child = mountChildFibers(\n        workInProgress,\n        null,\n        nextChildren,\n        renderLanes,\n      );\n      workInProgress.child = child;\n\n      let node = child;\n      while (node) {\n        // Mark each child as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n        node.flags = (node.flags & ~Placement) | Hydrating;\n        node = node.sibling;\n      }\n    }\n  } else {\n    // Root is not dehydrated. Either this is a client-only root, or it\n    // already hydrated.\n    resetHydrationState();\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nfunction mountHostRootWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: ReactNodeList,\n  renderLanes: Lanes,\n  recoverableError: CapturedValue<mixed>,\n) {\n  // Revert to client rendering.\n  resetHydrationState();\n\n  queueHydrationError(recoverableError);\n\n  workInProgress.flags |= ForceClientRender;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes,\n      );\n      return child;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  throw new Error(\n    `Element type is invalid. Received a promise that resolves to: ${Component}. ` +\n      `Lazy element type must resolve to a class or function.${hint}`,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n  let hasId;\n\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentNameFromType(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n          hasId = checkDidRenderIdHook();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n\n    if (getIsHydrating() && hasId) {\n      pushMaterializedTreeId(workInProgress);\n    }\n\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache(),\n    transitions: null,\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  let cachePool: SpawnedCachePool | null = null;\n  if (enableCache) {\n    const prevCachePool: SpawnedCachePool | null = prevOffscreenState.cachePool;\n    if (prevCachePool !== null) {\n      const parentCache = isPrimaryRenderer\n        ? CacheContext._currentValue\n        : CacheContext._currentValue2;\n      if (prevCachePool.parent !== parentCache) {\n        // Detected a refresh in the parent. This overrides any previously\n        // suspended cache.\n        cachePool = {\n          parent: parentCache,\n          pool: parentCache,\n        };\n      } else {\n        // We can reuse the cache from last time. The only thing that would have\n        // overridden it is a parent refresh, which we checked for above.\n        cachePool = prevCachePool;\n      }\n    } else {\n      // If there's no previous cache pool, grab the current one.\n      cachePool = getSuspendedCache();\n    }\n  }\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool,\n    transitions: prevOffscreenState.transitions,\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  suspenseContext: SuspenseContext,\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  return hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(\n      suspenseContext,\n      current,\n      workInProgress,\n      renderLanes,\n    )\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (\n      current === null ||\n      (current.memoizedState: null | SuspenseState) !== null\n    ) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n      if (\n        !enableSuspenseAvoidThisFallback ||\n        nextProps.unstable_avoidThisFallback !== true\n      ) {\n        suspenseContext = addSubtreeSuspenseContext(\n          suspenseContext,\n          InvisibleParentSuspenseContext,\n        );\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n\n    // Special path for hydration\n    // If we're currently hydrating, try to hydrate this boundary.\n    tryToClaimNextHydratableInstance(workInProgress);\n    // This could've been a dehydrated suspense component.\n    const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n    if (suspenseState !== null) {\n      const dehydrated = suspenseState.dehydrated;\n      if (dehydrated !== null) {\n        return mountDehydratedSuspenseComponent(\n          workInProgress,\n          dehydrated,\n          renderLanes,\n        );\n      }\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      if (enableTransitionTracing) {\n        const currentTransitions = getSuspendedTransitions();\n        if (currentTransitions !== null) {\n          const primaryChildUpdateQueue: OffscreenQueue = {\n            transitions: currentTransitions,\n          };\n          primaryChildFragment.updateQueue = primaryChildUpdateQueue;\n        }\n      }\n\n      return fallbackFragment;\n    } else if (\n      enableCPUSuspense &&\n      typeof nextProps.unstable_expectedLoadTime === 'number'\n    ) {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // Special path for hydration\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      const dehydrated = prevState.dehydrated;\n      if (dehydrated !== null) {\n        return updateDehydratedSuspenseComponent(\n          current,\n          workInProgress,\n          didSuspend,\n          nextProps,\n          dehydrated,\n          prevState,\n          renderLanes,\n        );\n      }\n    }\n\n    if (showFallback) {\n      const nextFallbackChildren = nextProps.fallback;\n      const nextPrimaryChildren = nextProps.children;\n      const fallbackChildFragment = updateSuspenseFallbackChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      const prevOffscreenState: OffscreenState | null = (current.child: any)\n        .memoizedState;\n      primaryChildFragment.memoizedState =\n        prevOffscreenState === null\n          ? mountSuspenseOffscreenState(renderLanes)\n          : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n      if (enableTransitionTracing) {\n        const currentTransitions = getSuspendedTransitions();\n        if (currentTransitions !== null) {\n          const primaryChildUpdateQueue: OffscreenQueue = {\n            transitions: currentTransitions,\n          };\n          primaryChildFragment.updateQueue = primaryChildUpdateQueue;\n        }\n      }\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n        current,\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    } else {\n      const nextPrimaryChildren = nextProps.children;\n      const primaryChildFragment = updateSuspensePrimaryChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    mode,\n    renderLanes,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if (\n    (mode & ConcurrentMode) === NoMode &&\n    progressedPrimaryFragment !== null\n  ) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(\n      primaryChildProps,\n      mode,\n      NoLanes,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(\n  offscreenProps: OffscreenProps,\n  mode: TypeOfMode,\n  renderLanes: Lanes,\n) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = updateWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    const deletions = workInProgress.deletions;\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & ConcurrentMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n    // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n    primaryChildFragment.subtreeFlags =\n      currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  recoverableError: CapturedValue<mixed> | null,\n) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n  //\n  // The error is passed in as an argument to enforce that every caller provide\n  // a custom message, or explicitly opt out (currently the only path that opts\n  // out is legacy mode; every concurrent path provides an error).\n  if (recoverableError !== null) {\n    queueHydrationError(recoverableError);\n  }\n\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const fiberMode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    fiberMode,\n    NoLanes,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    fiberMode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOMClient.hydrateRoot(container, <App />)' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  didSuspend: boolean,\n  nextProps: any,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (!didSuspend) {\n    // This is the first render pass. Attempt to hydrate.\n\n    // We should never be hydrating at this point because it is the first pass,\n    // but after we've already committed once.\n    warnIfHydrating();\n\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        // TODO: When we delete legacy mode, we should make this error argument\n        // required — every concurrent mode path that causes hydration to\n        // de-opt to client rendering should have an error message.\n        null,\n      );\n    }\n\n    if (isSuspenseInstanceFallback(suspenseInstance)) {\n      // This boundary is in a permanent fallback state. In this case, we'll never\n      // get an update and we'll never be able to hydrate the final content. Let's just try the\n      // client side render instead.\n      let digest, message, stack;\n      if (__DEV__) {\n        ({digest, message, stack} = getSuspenseInstanceFallbackErrorDetails(\n          suspenseInstance,\n        ));\n      } else {\n        ({digest} = getSuspenseInstanceFallbackErrorDetails(suspenseInstance));\n      }\n\n      let error;\n      if (message) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        error = new Error(message);\n      } else {\n        error = new Error(\n          'The server could not finish this Suspense boundary, likely ' +\n            'due to an error during server rendering. Switched to ' +\n            'client rendering.',\n        );\n      }\n      const capturedValue = createCapturedValue(error, digest, stack);\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    }\n\n    if (\n      enableLazyContextPropagation &&\n      // TODO: Factoring is a little weird, since we check this right below, too.\n      // But don't want to re-arrange the if-else chain until/unless this\n      // feature lands.\n      !didReceiveUpdate\n    ) {\n      // We need to check if any children have context before we decide to bail\n      // out, so propagate the changes now.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n    }\n\n    // We use lanes to indicate that a child might depend on context, so if\n    // any context has changed, we need to treat is as if the input might have changed.\n    const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n    if (didReceiveUpdate || hasContextChanged) {\n      // This boundary has changed since the first render. This means that we are now unable to\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n      const root = getWorkInProgressRoot();\n      if (root !== null) {\n        const attemptHydrationAtLane = getBumpedLaneForHydration(\n          root,\n          renderLanes,\n        );\n        if (\n          attemptHydrationAtLane !== NoLane &&\n          attemptHydrationAtLane !== suspenseState.retryLane\n        ) {\n          // Intentionally mutating since this render will get interrupted. This\n          // is one of the very rare times where we mutate the current tree\n          // during the render phase.\n          suspenseState.retryLane = attemptHydrationAtLane;\n          // TODO: Ideally this would inherit the event time of the current render\n          const eventTime = NoTimestamp;\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n          scheduleUpdateOnFiber(\n            root,\n            current,\n            attemptHydrationAtLane,\n            eventTime,\n          );\n        } else {\n          // We have already tried to ping at a higher priority than we're rendering with\n          // so if we got here, we must have failed to hydrate at those levels. We must\n          // now give up. Instead, we're going to delete the whole subtree and instead inject\n          // a new real Suspense boundary to take its place, which may render content\n          // or fallback. This might suspend for a while and if it does we might still have\n          // an opportunity to hydrate before this pass commits.\n        }\n      }\n\n      // If we have scheduled higher pri work above, this will probably just abort the render\n      // since we now have higher priority work, but in case it doesn't, we need to prepare to\n      // render something, if we time out. Even if that requires us to delete everything and\n      // skip hydration.\n      // Delay having to do this as long as the suspense timeout allows us.\n      renderDidSuspendDelayIfPossible();\n      const capturedValue = createCapturedValue(\n        new Error(\n          'This Suspense boundary received an update before it finished ' +\n            'hydrating. This caused the boundary to switch to client rendering. ' +\n            'The usual way to fix this is to wrap the original update ' +\n            'in startTransition.',\n        ),\n      );\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    } else if (isSuspenseInstancePending(suspenseInstance)) {\n      // This component is still pending more data from the server, so we can't hydrate its\n      // content. We treat it as if this component suspended itself. It might seem as if\n      // we could just try to render it client-side instead. However, this will perform a\n      // lot of unnecessary work and is unlikely to complete since it often will suspend\n      // on missing data anyway. Additionally, the server might be able to render more\n      // than we can on the client yet. In that case we'd end up with more fallback states\n      // on the client than if we just leave it alone. If the server times out or errors\n      // these should update this boundary to the permanent Fallback state instead.\n      // Mark it as having captured (i.e. suspended).\n      workInProgress.flags |= DidCapture;\n      // Leave the child in place. I.e. the dehydrated fragment.\n      workInProgress.child = current.child;\n      // Register a callback to retry this boundary once the server has sent the result.\n      const retry = retryDehydratedSuspenseBoundary.bind(null, current);\n      registerSuspenseInstanceRetry(suspenseInstance, retry);\n      return null;\n    } else {\n      // This is the first attempt.\n      reenterHydrationStateFromDehydratedSuspenseInstance(\n        workInProgress,\n        suspenseInstance,\n        suspenseState.treeContext,\n      );\n      const primaryChildren = nextProps.children;\n      const primaryChildFragment = mountSuspensePrimaryChildren(\n        workInProgress,\n        primaryChildren,\n        renderLanes,\n      );\n      // Mark the children as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      primaryChildFragment.flags |= Hydrating;\n      return primaryChildFragment;\n    }\n  } else {\n    // This is the second render pass. We already attempted to hydrated, but\n    // something either suspended or errored.\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during hydration. Try again without hydrating.\n      workInProgress.flags &= ~ForceClientRender;\n      const capturedValue = createCapturedValue(\n        new Error(\n          'There was an error while hydrating this Suspense boundary. ' +\n            'Switched to client rendering.',\n        ),\n      );\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    } else if ((workInProgress.memoizedState: null | SuspenseState) !== null) {\n      // Something suspended and we should still be in dehydrated mode.\n      // Leave the existing child in place.\n      workInProgress.child = current.child;\n      // The dehydrated completion pass expects this flag to be there\n      // but the normal suspense pass doesn't.\n      workInProgress.flags |= DidCapture;\n      return null;\n    } else {\n      // Suspended but we should no longer be in dehydrated mode.\n      // Therefore we now have to render the fallback.\n      const nextPrimaryChildren = nextProps.children;\n      const nextFallbackChildren = nextProps.fallback;\n      const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    }\n  }\n}\n\nfunction scheduleSuspenseWorkOnFiber(\n  fiber: Fiber,\n  renderLanes: Lanes,\n  propagationRoot: Fiber,\n) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isAnArray = isArray(childSlot);\n    const isIterable =\n      !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isAnArray || isIterable) {\n      const type = isAnArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  if (enableLazyContextPropagation) {\n    // In the lazy propagation implementation, we don't scan for matching\n    // consumers until something bails out, because until something bails out\n    // we're going to visit those nodes, anyway. The trade-off is that it shifts\n    // responsibility to the consumer to track whether something has changed.\n  } else {\n    if (oldProps !== null) {\n      const oldValue = oldProps.value;\n      if (is(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (\n          oldProps.children === newProps.children &&\n          !hasLegacyContextChanged()\n        ) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nexport function checkIfWorkInProgressReceivedUpdate() {\n  return didReceiveUpdate;\n}\n\nfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (current !== null) {\n      // A lazy component only mounts if it suspended inside a non-\n      // concurrent tree, in an inconsistent state. We want to treat it like\n      // a new mount, even though an empty version of it already committed.\n      // Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n  }\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n\n    if (enableLazyContextPropagation && current !== null) {\n      // Before bailing out, check if there are any context changes in\n      // the children.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      // eslint-disable-next-line react-internal/prod-error-codes\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction checkScheduledUpdateOrContext(\n  current: Fiber,\n  renderLanes: Lanes,\n): boolean {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  const updateLanes = current.lanes;\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  }\n  // No pending update, but because context is propagated lazily, we need\n  // to check for a context change before we bail out.\n  if (enableLazyContextPropagation) {\n    const dependencies = current.dependencies;\n    if (dependencies !== null && checkIfContextChanged(dependencies)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      const root: FiberRoot = workInProgress.stateNode;\n      pushRootTransition(workInProgress, root, renderLanes);\n\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      resetHydrationState();\n      break;\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        pushLegacyContextProvider(workInProgress);\n      }\n      break;\n    }\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n    case ContextProvider: {\n      const newValue = workInProgress.memoizedProps.value;\n      const context: ReactContext<any> = workInProgress.type._context;\n      pushProvider(workInProgress, context, newValue);\n      break;\n    }\n    case Profiler:\n      if (enableProfilerTimer) {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        const hasChildWork = includesSomeLane(\n          renderLanes,\n          workInProgress.childLanes,\n        );\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        if (enableProfilerCommitHooks) {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          const stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      break;\n    case SuspenseComponent: {\n      const state: SuspenseState | null = workInProgress.memoizedState;\n      if (state !== null) {\n        if (state.dehydrated !== null) {\n          pushSuspenseContext(\n            workInProgress,\n            setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n          );\n          // We know that this component will suspend again because if it has\n          // been unsuspended it has committed as a resolved Suspense component.\n          // If it needs to be retried, it should have work scheduled on it.\n          workInProgress.flags |= DidCapture;\n          // We should never render the children of a dehydrated boundary until we\n          // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n          return null;\n        }\n\n        // If this boundary is currently timed out, we need to decide\n        // whether to retry the primary children, or to skip over it and\n        // go straight to the fallback. Check the priority of the primary\n        // child fragment.\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const primaryChildLanes = primaryChildFragment.childLanes;\n        if (includesSomeLane(renderLanes, primaryChildLanes)) {\n          // The primary children have pending work. Use the normal path\n          // to attempt to render the primary children again.\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        } else {\n          // The primary child fragment does not have pending work marked\n          // on it\n          pushSuspenseContext(\n            workInProgress,\n            setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n          );\n          // The primary children do not have pending work with sufficient\n          // priority. Bailout.\n          const child = bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n          if (child !== null) {\n            // The fallback children have pending work. Skip over the\n            // primary children and work on the fallback.\n            return child.sibling;\n          } else {\n            // Note: We can return `null` here because we already checked\n            // whether there were nested context consumers, via the call to\n            // `bailoutOnAlreadyFinishedWork` above.\n            return null;\n          }\n        }\n      } else {\n        pushSuspenseContext(\n          workInProgress,\n          setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n        );\n      }\n      break;\n    }\n    case SuspenseListComponent: {\n      const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n      let hasChildWork = includesSomeLane(\n        renderLanes,\n        workInProgress.childLanes,\n      );\n\n      if (enableLazyContextPropagation && !hasChildWork) {\n        // Context changes may not have been propagated yet. We need to do\n        // that now, before we can decide whether to bail out.\n        // TODO: We use `childLanes` as a heuristic for whether there is\n        // remaining work in a few places, including\n        // `bailoutOnAlreadyFinishedWork` and\n        // `updateDehydratedSuspenseComponent`. We should maybe extract this\n        // into a dedicated function.\n        lazilyPropagateParentContextChanges(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n        hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n      }\n\n      if (didSuspendBefore) {\n        if (hasChildWork) {\n          // If something was in fallback state last time, and we have all the\n          // same children then we're still in progressive loading state.\n          // Something might get unblocked by state updates or retries in the\n          // tree which will affect the tail. So we need to use the normal\n          // path to compute the correct tail.\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        workInProgress.flags |= DidCapture;\n      }\n\n      // If nothing suspended before and we're rendering the same children,\n      // then the tail doesn't matter. Anything new that suspends will work\n      // in the \"together\" mode, so we can continue from the state we had.\n      const renderState = workInProgress.memoizedState;\n      if (renderState !== null) {\n        // Reset to the \"together\" mode in case we've started a different\n        // update in the past but didn't complete it.\n        renderState.rendering = null;\n        renderState.tail = null;\n        renderState.lastEffect = null;\n      }\n      pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n      if (hasChildWork) {\n        break;\n      } else {\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        return null;\n      }\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      // Need to check if the tree still needs to be deferred. This is\n      // almost identical to the logic used in the normal update path,\n      // so we'll just enter that. The only difference is we'll bail out\n      // at the next level instead of this one, because the child props\n      // have not changed. Which is fine.\n      // TODO: Probably should refactor `beginWork` to split the bailout\n      // path from the normal path. I'm tempted to do a labeled break here\n      // but I won't :)\n      workInProgress.lanes = NoLanes;\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      break;\n    }\n  }\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n        current,\n        renderLanes,\n      );\n      if (\n        !hasScheduledUpdateOrContext &&\n        // If this is the second pass of an error or suspense boundary, there\n        // may not be work scheduled on `current`, so we check for this flag.\n        (workInProgress.flags & DidCapture) === NoFlags\n      ) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\n      // Check if this child belongs to a list of muliple children in\n      // its parent.\n      //\n      // In a true multi-threaded implementation, we would render children on\n      // parallel threads. This would represent the beginning of a new render\n      // thread for this subtree.\n      //\n      // We only use this for id generation during hydration, which is why the\n      // logic is located in this special branch.\n      const slotIndex = workInProgress.index;\n      const numberOfForks = getForksAtLevel(workInProgress);\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\n    }\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      if (enableLegacyHidden) {\n        return updateLegacyHiddenComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        return updateCacheComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        return updateTracingMarkerComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {\n  ReactScopeInstance,\n  ReactContext,\n  Wakeable,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport {\n  enableSuspenseAvoidThisFallback,\n  enableLegacyHidden,\n} from 'shared/ReactFeatureFlags';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './Scheduler';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {NoMode, ConcurrentMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  Ref,\n  RefStatic,\n  Placement,\n  Update,\n  Visibility,\n  NoFlags,\n  DidCapture,\n  Snapshot,\n  ChildDeletion,\n  StaticMask,\n  MutationMask,\n  Passive,\n  Incomplete,\n  ShouldCapture,\n  ForceClientRender,\n} from './ReactFiberFlags';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n  popSuspenseContext,\n  pushSuspenseContext,\n  setShallowSuspenseContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  warnIfUnhydratedTailNodes,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n  hasUnhydratedTailNodes,\n  upgradeHydrationErrorsToRecoverable,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableProfilerTimer,\n  enableCache,\n  enableSuspenseLayoutEffectSemantics,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  popRenderLanes,\n  getRenderTargetTime,\n  subtreeRenderLanes,\n  getWorkInProgressTransitions,\n} from './ReactFiberWorkLoop.old';\nimport {\n  OffscreenLane,\n  SomeRetryLane,\n  NoLanes,\n  includesSomeLane,\n  mergeLanes,\n} from './ReactFiberLane.old';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\nimport {popTreeContext} from './ReactFiberTreeContext.old';\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref;\n  if (enableSuspenseLayoutEffectSemantics) {\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nfunction hadNoMutationsEffects(current: null | Fiber, completedWork: Fiber) {\n  const didBailout = current !== null && current.child === completedWork.child;\n  if (didBailout) {\n    return true;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return false;\n  }\n\n  // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n  let child = completedWork.child;\n  while (child !== null) {\n    if (\n      (child.flags & MutationMask) !== NoFlags ||\n      (child.subtreeFlags & MutationMask) !== NoFlags\n    ) {\n      return false;\n    }\n    child = child.sibling;\n  }\n  return true;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildren(parent, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildrenToContainer(containerChildSet, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction bubbleProperties(completedWork: Fiber) {\n  const didBailout =\n    completedWork.alternate !== null &&\n    completedWork.alternate.child === completedWork.child;\n\n  let newChildLanes = NoLanes;\n  let subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let actualDuration = completedWork.actualDuration;\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n        actualDuration += child.actualDuration;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n\n  return didBailout;\n}\n\nfunction completeDehydratedSuspenseBoundary(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextState: SuspenseState | null,\n): boolean {\n  if (\n    hasUnhydratedTailNodes() &&\n    (workInProgress.mode & ConcurrentMode) !== NoMode &&\n    (workInProgress.flags & DidCapture) === NoFlags\n  ) {\n    warnIfUnhydratedTailNodes(workInProgress);\n    resetHydrationState();\n    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n\n    return false;\n  }\n\n  const wasHydrated = popHydrationState(workInProgress);\n\n  if (nextState !== null && nextState.dehydrated !== null) {\n    // We might be inside a hydration state the first time we're picking up this\n    // Suspense boundary, and also after we've reentered it for further hydration.\n    if (current === null) {\n      if (!wasHydrated) {\n        throw new Error(\n          'A dehydrated suspense component was completed without a hydrated node. ' +\n            'This is probably a bug in React.',\n        );\n      }\n      prepareToHydrateHostSuspenseInstance(workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return false;\n    } else {\n      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n      resetHydrationState();\n      if ((workInProgress.flags & DidCapture) === NoFlags) {\n        // This boundary did not suspend so it's now hydrated and unsuspended.\n        workInProgress.memoizedState = null;\n      }\n      // If nothing suspended, we need to schedule an effect to mark this boundary\n      // as having hydrated so events know that they're free to be invoked.\n      // It's also a signal to replay events and the suspense callback.\n      // If something suspended, schedule an effect to attach retry listeners.\n      // So we might as well always mark this.\n      workInProgress.flags |= Update;\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return false;\n    }\n  } else {\n    // Successfully completed this tree. If this was a forced client render,\n    // there may have been recoverable errors during first hydration\n    // attempt. If so, add them to a queue so we can log them in the\n    // commit phase.\n    upgradeHydrationErrorsToRecoverable();\n\n    // Fall through to normal Suspense path\n    return true;\n  }\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostRoot: {\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n\n      if (enableTransitionTracing) {\n        const transitions = getWorkInProgressTransitions();\n        // We set the Passive flag here because if there are new transitions,\n        // we will need to schedule callbacks and process the transitions,\n        // which we do in the passive phase\n        if (transitions !== null) {\n          workInProgress.flags |= Passive;\n        }\n      }\n\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (current !== null) {\n          previousCache = current.memoizedState.cache;\n        }\n        const cache: Cache = workInProgress.memoizedState.cache;\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n        popCacheProvider(workInProgress, cache);\n      }\n      popRootTransition(workInProgress, fiberRoot, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else {\n          if (current !== null) {\n            const prevState: RootState = current.memoizedState;\n            if (\n              // Check if this is a client root\n              !prevState.isDehydrated ||\n              // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags\n            ) {\n              // Schedule an effect to clear this container at the start of the\n              // next commit. This handles the case of React rendering into a\n              // container with previous children. It's also safe to do for\n              // updates too, because current.child would only be null if the\n              // previous render was null (so the container would already\n              // be empty).\n              workInProgress.flags |= Snapshot;\n\n              // If this was a forced client render, there may have been\n              // recoverable errors during first hydration attempt. If so, add\n              // them to a queue so we can log them in the commit phase.\n              upgradeHydrationErrorsToRecoverable();\n            }\n          }\n        }\n      }\n      updateHostContainer(current, workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableTransitionTracing) {\n        if ((workInProgress.subtreeFlags & Visibility) !== NoFlags) {\n          // If any of our suspense children toggle visibility, this means that\n          // the pending boundaries array needs to be updated, which we only\n          // do in the passive phase.\n          workInProgress.flags |= Passive;\n        }\n      }\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          // This can happen when we abort work.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      // Special path for dehydrated boundaries. We may eventually move this\n      // to its own fiber type so that we can add other kinds of hydration\n      // boundaries that aren't associated with a Suspense tree. In anticipation\n      // of such a refactor, all the hydration logic is contained in\n      // this branch.\n      if (\n        current === null ||\n        (current.memoizedState !== null &&\n          current.memoizedState.dehydrated !== null)\n      ) {\n        const fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(\n          current,\n          workInProgress,\n          nextState,\n        );\n        if (!fallthroughToNormalSuspensePath) {\n          if (workInProgress.flags & ShouldCapture) {\n            // Special case. There were remaining unhydrated nodes. We treat\n            // this as a mismatch. Revert to client rendering.\n            return workInProgress;\n          } else {\n            // Did not finish hydrating, either because this is the initial\n            // render or because something suspended.\n            return null;\n          }\n        }\n\n        // Continue with the normal Suspense path.\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        // Don't bubble properties in this case.\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      const prevDidTimeout =\n        current !== null &&\n        (current.memoizedState: null | SuspenseState) !== null;\n\n      if (enableCache && nextDidTimeout) {\n        const offscreenFiber: Fiber = (workInProgress.child: any);\n        let previousCache: Cache | null = null;\n        if (\n          offscreenFiber.alternate !== null &&\n          offscreenFiber.alternate.memoizedState !== null &&\n          offscreenFiber.alternate.memoizedState.cachePool !== null\n        ) {\n          previousCache = offscreenFiber.alternate.memoizedState.cachePool.pool;\n        }\n        let cache: Cache | null = null;\n        if (\n          offscreenFiber.memoizedState !== null &&\n          offscreenFiber.memoizedState.cachePool !== null\n        ) {\n          cache = offscreenFiber.memoizedState.cachePool.pool;\n        }\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          offscreenFiber.flags |= Passive;\n        }\n      }\n\n      // If the suspended state of the boundary changes, we need to schedule\n      // a passive effect, which is when we process the transitions\n      if (nextDidTimeout !== prevDidTimeout) {\n        if (enableTransitionTracing) {\n          const offscreenFiber: Fiber = (workInProgress.child: any);\n          offscreenFiber.flags |= Passive;\n        }\n\n        // If the suspended state of the boundary changes, we need to schedule\n        // an effect to toggle the subtree's visibility. When we switch from\n        // fallback -> primary, the inner Offscreen fiber schedules this effect\n        // as part of its normal complete phase. But when we switch from\n        // primary -> fallback, the inner Offscreen fiber does not have a complete\n        // phase. So we need to schedule its effect here.\n        //\n        // We also use this flag to connect/disconnect the effects, but the same\n        // logic applies: when re-connecting, the Offscreen fiber's complete\n        // phase will handle scheduling the effect. It's only when the fallback\n        // is active that we have to do anything special.\n        if (nextDidTimeout) {\n          const offscreenFiber: Fiber = (workInProgress.child: any);\n          offscreenFiber.flags |= Visibility;\n\n          // TODO: This will still suspend a synchronous tree if anything\n          // in the concurrent tree already suspended during this render.\n          // This is a known bug.\n          if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n            // TODO: Move this back to throwException because this is too late\n            // if this is a large tree which is common for initial loads. We\n            // don't know if we should restart a render or not until we get\n            // this marker, and this is too late.\n            // If this render already had a ping or lower pri updates,\n            // and this is the first time we know we're going to suspend we\n            // should be able to immediately restart from within throwException.\n            const hasInvisibleChildContext =\n              current === null &&\n              (workInProgress.memoizedProps.unstable_avoidThisFallback !==\n                true ||\n                !enableSuspenseAvoidThisFallback);\n            if (\n              hasInvisibleChildContext ||\n              hasSuspenseContext(\n                suspenseStackCursor.current,\n                (InvisibleParentSuspenseContext: SuspenseContext),\n              )\n            ) {\n              // If this was in an invisible tree or a new render, then showing\n              // this boundary is ok.\n              renderDidSuspend();\n            } else {\n              // Otherwise, we're going to have to hide content so we should\n              // suspend for longer if possible.\n              renderDidSuspendDelayIfPossible();\n            }\n          }\n        }\n      }\n\n      const wakeables: Set<Wakeable> | null = (workInProgress.updateQueue: any);\n      if (wakeables !== null) {\n        // Schedule an effect to attach a retry listener to the promise.\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          if (nextDidTimeout) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thenables. Instead, we'll transfer its thenables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThenables = suspended.updateQueue;\n                if (newThenables !== null) {\n                  workInProgress.updateQueue = newThenables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect flags before doing the second pass since that's now invalid.\n                // Reset the child fibers to their original state.\n                workInProgress.subtreeFlags = NoFlags;\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense Context to force suspense and immediately\n                // rerender the children.\n                pushSuspenseContext(\n                  workInProgress,\n                  setShallowSuspenseContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                // Don't bubble properties in this case.\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThenables = suspended.updateQueue;\n            if (newThenables !== null) {\n              workInProgress.updateQueue = newThenables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We're done.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        }\n        pushSuspenseContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        // Don't bubble properties in this case.\n        return next;\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        bubbleProperties(workInProgress);\n        return null;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popRenderLanes(workInProgress);\n      const nextState: OffscreenState | null = workInProgress.memoizedState;\n      const nextIsHidden = nextState !== null;\n\n      if (current !== null) {\n        const prevState: OffscreenState | null = current.memoizedState;\n        const prevIsHidden = prevState !== null;\n        if (\n          prevIsHidden !== nextIsHidden &&\n          // LegacyHidden doesn't do any hiding — it only pre-renders.\n          (!enableLegacyHidden || workInProgress.tag !== LegacyHiddenComponent)\n        ) {\n          workInProgress.flags |= Visibility;\n        }\n      }\n\n      if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n        bubbleProperties(workInProgress);\n      } else {\n        // Don't bubble properties for hidden children unless we're rendering\n        // at offscreen priority.\n        if (includesSomeLane(subtreeRenderLanes, (OffscreenLane: Lane))) {\n          bubbleProperties(workInProgress);\n          if (supportsMutation) {\n            // Check if there was an insertion or update in the hidden subtree.\n            // If so, we need to hide those nodes in the commit phase, so\n            // schedule a visibility effect.\n            if (\n              (!enableLegacyHidden ||\n                workInProgress.tag !== LegacyHiddenComponent) &&\n              workInProgress.subtreeFlags & (Placement | Update)\n            ) {\n              workInProgress.flags |= Visibility;\n            }\n          }\n        }\n      }\n\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (\n          current !== null &&\n          current.memoizedState !== null &&\n          current.memoizedState.cachePool !== null\n        ) {\n          previousCache = current.memoizedState.cachePool.pool;\n        }\n        let cache: Cache | null = null;\n        if (\n          workInProgress.memoizedState !== null &&\n          workInProgress.memoizedState.cachePool !== null\n        ) {\n          cache = workInProgress.memoizedState.cachePool.pool;\n        }\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n      }\n\n      popTransition(workInProgress, current);\n\n      return null;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (current !== null) {\n          previousCache = current.memoizedState.cache;\n        }\n        const cache: Cache = workInProgress.memoizedState.cache;\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n        popCacheProvider(workInProgress, cache);\n        bubbleProperties(workInProgress);\n      }\n      return null;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        // Bubble subtree flags before so we can set the flag property\n        bubbleProperties(workInProgress);\n      }\n      return null;\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Cache} from './ReactFiberCacheComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {enableProfilerTimer, enableCache} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {popSuspenseContext} from './ReactFiberSuspenseContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popRenderLanes} from './ReactFiberWorkLoop.old';\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {popTreeContext} from './ReactFiberTreeContext.old';\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\n\nfunction unwindWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      const root: FiberRoot = workInProgress.stateNode;\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      popRootTransition(workInProgress, root, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      if (\n        (flags & ShouldCapture) !== NoFlags &&\n        (flags & DidCapture) === NoFlags\n      ) {\n        // There was an error during render that wasn't captured by a suspense\n        // boundary. Do a second pass on the root to unmount the children.\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        return workInProgress;\n      }\n      // We unwound to the root without completing it. Exit.\n      return null;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n      if (suspenseState !== null && suspenseState.dehydrated !== null) {\n        if (workInProgress.alternate === null) {\n          throw new Error(\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n        }\n\n        resetHydrationState();\n      }\n\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      popTransition(workInProgress, current);\n      return null;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(\n  current: Fiber | null,\n  interruptedWork: Fiber,\n  renderLanes: Lanes,\n) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      const root: FiberRoot = interruptedWork.stateNode;\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      popRootTransition(interruptedWork, root, renderLanes);\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case ContextProvider:\n      const context: ReactContext<any> = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      popTransition(interruptedWork, current);\n      break;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {\n  OffscreenState,\n  OffscreenInstance,\n} from './ReactFiberOffscreenComponent';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\nimport {\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableSchedulingProfiler,\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableStrictEffects,\n  deletedTreeCleanUpLevel,\n  enableSuspenseLayoutEffectSemantics,\n  enableUpdaterTracking,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {detachDeletedInstance} from './ReactFiberHostConfig';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  ChildDeletion,\n  Snapshot,\n  Update,\n  Ref,\n  Hydrating,\n  Passive,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  Visibility,\n} from './ReactFiberFlags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n  getCurrentFiber as getCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  isCurrentUpdateNested,\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ConcurrentMode, NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {commitUpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n  prepareForCommit,\n  beforeActiveInstanceBlur,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveProfilerEffect,\n  restorePendingUpdaters,\n  addTransitionStartCallbackToPendingTransition,\n  addTransitionCompleteCallbackToPendingTransition,\n  setIsRunningInsertionEffect,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Insertion as HookInsertion,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\nimport {invokeGuardedCallback, clearCaughtError} from 'shared/ReactErrorUtils';\nimport {\n  isDevToolsPresent,\n  markComponentPassiveEffectMountStarted,\n  markComponentPassiveEffectMountStopped,\n  markComponentPassiveEffectUnmountStarted,\n  markComponentPassiveEffectUnmountStopped,\n  markComponentLayoutEffectMountStarted,\n  markComponentLayoutEffectMountStopped,\n  markComponentLayoutEffectUnmountStarted,\n  markComponentLayoutEffectUnmountStopped,\n  onCommitUnmount,\n} from './ReactFiberDevToolsHook.old';\nimport {releaseCache, retainCache} from './ReactFiberCacheComponent.old';\nimport {clearTransitionsForLanes} from './ReactFiberLane.old';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\n// Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n// Only used when enableSuspenseLayoutEffectSemantics is enabled.\nlet offscreenSubtreeIsHidden: boolean = false;\nlet offscreenSubtreeWasHidden: boolean = false;\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nlet nextEffect: Fiber | null = null;\n\n// Used for Profiling builds to track updaters.\nlet inProgressLanes: Lanes | null = null;\nlet inProgressRoot: FiberRoot | null = null;\n\nexport function reportUncaughtErrorInDEV(error: mixed) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  if (__DEV__) {\n    invokeGuardedCallback(null, () => {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallCommitHookLayoutEffectListMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  try {\n    commitHookEffectListMount(HookLayout, current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallComponentDidMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    instance.componentDidMount();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyAttachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      let retVal;\n      try {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          current.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            retVal = ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          retVal = ref(null);\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n      if (__DEV__) {\n        if (typeof retVal === 'function') {\n          console.error(\n            'Unexpected return value from a callback ref in %s. ' +\n              'A callback ref should not return a function.',\n            getComponentNameFromFiber(current),\n          );\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  destroy: () => void,\n) {\n  try {\n    destroy();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function commitBeforeMutationEffects(\n  root: FiberRoot,\n  firstChild: Fiber,\n) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin();\n\n  // We no longer need to track the active instance fiber\n  const shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // This phase is only used for beforeActiveInstanceBlur.\n    // Let's skip the whole loop if it's off.\n    if (enableCreateEventHandleAPI) {\n      // TODO: Should wrap this in flags check, too, as optimization\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const deletion = deletions[i];\n          commitBeforeMutationEffectsDeletion(deletion);\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if (\n      (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags &&\n      child !== null\n    ) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork: Fiber) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  if (enableCreateEventHandleAPI) {\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      // Check to see if the focused element was inside of a hidden (Suspense) subtree.\n      // TODO: Move this out of the hot path using a dedicated effect tag.\n      if (\n        finishedWork.tag === SuspenseComponent &&\n        isSuspenseBoundaryBeingHidden(current, finishedWork) &&\n        doesFiberContain(finishedWork, focusedInstanceHandle)\n      ) {\n        shouldFireAfterActiveInstanceBlur = true;\n        beforeActiveInstanceBlur(finishedWork);\n      }\n    }\n  }\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentDebugFiberInDEV(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        break;\n      }\n      case ClassComponent: {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentNameFromFiber(finishedWork),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n        break;\n      }\n      case HostRoot: {\n        if (supportsMutation) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n        break;\n      }\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n      default: {\n        throw new Error(\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction commitBeforeMutationEffectsDeletion(deletion: Fiber) {\n  if (enableCreateEventHandleAPI) {\n    // TODO (effects) It would be nice to avoid calling doesFiberContain()\n    // Maybe we can repurpose one of the subtreeFlags positions for this instead?\n    // Use it to store which part of the tree the focused instance is in?\n    // This assumes we can safely determine that instance during the \"render\" phase.\n    if (doesFiberContain(deletion, ((focusedInstanceHandle: any): Fiber))) {\n      shouldFireAfterActiveInstanceBlur = true;\n      beforeActiveInstanceBlur(deletion);\n    }\n  }\n}\n\nfunction commitHookEffectListUnmount(\n  flags: HookFlags,\n  finishedWork: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectUnmountStarted(finishedWork);\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectUnmountStarted(finishedWork);\n            }\n          }\n\n          if (__DEV__) {\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(true);\n            }\n          }\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n          if (__DEV__) {\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(false);\n            }\n          }\n\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectUnmountStopped();\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectUnmountStopped();\n            }\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(flags: HookFlags, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        if (enableSchedulingProfiler) {\n          if ((flags & HookPassive) !== NoHookEffect) {\n            markComponentPassiveEffectMountStarted(finishedWork);\n          } else if ((flags & HookLayout) !== NoHookEffect) {\n            markComponentLayoutEffectMountStarted(finishedWork);\n          }\n        }\n\n        // Mount\n        const create = effect.create;\n        if (__DEV__) {\n          if ((flags & HookInsertion) !== NoHookEffect) {\n            setIsRunningInsertionEffect(true);\n          }\n        }\n        effect.destroy = create();\n        if (__DEV__) {\n          if ((flags & HookInsertion) !== NoHookEffect) {\n            setIsRunningInsertionEffect(false);\n          }\n        }\n\n        if (enableSchedulingProfiler) {\n          if ((flags & HookPassive) !== NoHookEffect) {\n            markComponentPassiveEffectMountStopped();\n          } else if ((flags & HookLayout) !== NoHookEffect) {\n            markComponentLayoutEffectMountStopped();\n          }\n        }\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let hookName;\n            if ((effect.tag & HookLayout) !== NoFlags) {\n              hookName = 'useLayoutEffect';\n            } else if ((effect.tag & HookInsertion) !== NoFlags) {\n              hookName = 'useInsertionEffect';\n            } else {\n              hookName = 'useEffect';\n            }\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote ' +\n                hookName +\n                '(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                hookName +\n                '(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              '%s must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              hookName,\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          let phase = finishedWork.alternate === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onPostCommit === 'function') {\n            onPostCommit(id, phase, passiveEffectDuration, commitTime);\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          outer: while (parentFiber !== null) {\n            switch (parentFiber.tag) {\n              case HostRoot:\n                const root = parentFiber.stateNode;\n                root.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n              case Profiler:\n                const parentStateNode = parentFiber.stateNode;\n                parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        if (\n          !enableSuspenseLayoutEffectSemantics ||\n          !offscreenSubtreeWasHidden\n        ) {\n          // At this point layout effects have already been destroyed (during mutation phase).\n          // This is done to prevent sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListMount(\n                HookLayout | HookHasEffect,\n                finishedWork,\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n          }\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = finishedWork.stateNode;\n        if (finishedWork.flags & Update) {\n          if (!offscreenSubtreeWasHidden) {\n            if (current === null) {\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidMount();\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidMount();\n              }\n            } else {\n              const prevProps =\n                finishedWork.elementType === finishedWork.type\n                  ? current.memoizedProps\n                  : resolveDefaultProps(\n                      finishedWork.type,\n                      current.memoizedProps,\n                    );\n              const prevState = current.memoizedState;\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidUpdate(\n                    prevProps,\n                    prevState,\n                    instance.__reactInternalSnapshotBeforeUpdate,\n                  );\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidUpdate(\n                  prevProps,\n                  prevState,\n                  instance.__reactInternalSnapshotBeforeUpdate,\n                );\n              }\n            }\n          }\n        }\n\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostRoot: {\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          let instance = null;\n          if (finishedWork.child !== null) {\n            switch (finishedWork.child.tag) {\n              case HostComponent:\n                instance = getPublicInstance(finishedWork.child.stateNode);\n                break;\n              case ClassComponent:\n                instance = finishedWork.child.stateNode;\n                break;\n            }\n          }\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        const instance: Instance = finishedWork.stateNode;\n\n        // Renderers may schedule work to be done after host components are mounted\n        // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n        // These effects should only be committed when components are first mounted,\n        // aka when there is no current/alternate.\n        if (current === null && finishedWork.flags & Update) {\n          const type = finishedWork.type;\n          const props = finishedWork.memoizedProps;\n          commitMount(instance, type, props, finishedWork);\n        }\n\n        break;\n      }\n      case HostText: {\n        // We have no life-cycles associated with text.\n        break;\n      }\n      case HostPortal: {\n        // We have no life-cycles associated with portals.\n        break;\n      }\n      case Profiler: {\n        if (enableProfilerTimer) {\n          const {onCommit, onRender} = finishedWork.memoizedProps;\n          const {effectDuration} = finishedWork.stateNode;\n\n          const commitTime = getCommitTime();\n\n          let phase = current === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onRender === 'function') {\n            onRender(\n              finishedWork.memoizedProps.id,\n              phase,\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n            );\n          }\n\n          if (enableProfilerCommitHooks) {\n            if (typeof onCommit === 'function') {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                phase,\n                effectDuration,\n                commitTime,\n              );\n            }\n\n            // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n            // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n            // because the effect is also where times bubble to parent Profilers.\n            enqueuePendingPassiveProfilerEffect(finishedWork);\n\n            // Propagate layout effect durations to the next nearest Profiler ancestor.\n            // Do not reset these values until the next render so DevTools has a chance to read them first.\n            let parentFiber = finishedWork.return;\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  const root = parentFiber.stateNode;\n                  root.effectDuration += effectDuration;\n                  break outer;\n                case Profiler:\n                  const parentStateNode = parentFiber.stateNode;\n                  parentStateNode.effectDuration += effectDuration;\n                  break outer;\n              }\n              parentFiber = parentFiber.return;\n            }\n          }\n        }\n        break;\n      }\n      case SuspenseComponent: {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n        break;\n      }\n      case SuspenseListComponent:\n      case IncompleteClassComponent:\n      case ScopeComponent:\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n      case TracingMarkerComponent: {\n        break;\n      }\n\n      default:\n        throw new Error(\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n    }\n  }\n\n  if (!enableSuspenseLayoutEffectSemantics || !offscreenSubtreeWasHidden) {\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (finishedWork.flags & Ref && finishedWork.tag !== ScopeComponent) {\n        commitAttachRef(finishedWork);\n      }\n    } else {\n      if (finishedWork.flags & Ref) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n}\n\nfunction reappearLayoutEffectsOnFiber(node: Fiber) {\n  // Turn on layout effects in a tree that previously disappeared.\n  // TODO (Offscreen) Check: flags & LayoutStatic\n  switch (node.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        node.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n        } finally {\n          recordLayoutEffectDuration(node);\n        }\n      } else {\n        safelyCallCommitHookLayoutEffectListMount(node, node.return);\n      }\n      break;\n    }\n    case ClassComponent: {\n      const instance = node.stateNode;\n      if (typeof instance.componentDidMount === 'function') {\n        safelyCallComponentDidMount(node, node.return, instance);\n      }\n      safelyAttachRef(node, node.return);\n      break;\n    }\n    case HostComponent: {\n      safelyAttachRef(node, node.return);\n      break;\n    }\n  }\n}\n\nfunction commitTransitionProgress(\n  finishedRoot: FiberRoot,\n  offscreenFiber: Fiber,\n) {\n  if (enableTransitionTracing) {\n    // This function adds suspense boundaries to the root\n    // or tracing marker's pendingSuspenseBoundaries map.\n    // When a suspense boundary goes from a resolved to a fallback\n    // state we add the boundary to the map, and when it goes from\n    // a fallback to a resolved state, we remove the boundary from\n    // the map.\n\n    // We use stateNode on the Offscreen component as a stable object\n    // that doesnt change from render to render. This way we can\n    // distinguish between different Offscreen instances (vs. the same\n    // Offscreen instance with different fibers)\n    const offscreenInstance: OffscreenInstance = offscreenFiber.stateNode;\n\n    let prevState: SuspenseState | null = null;\n    const previousFiber = offscreenFiber.alternate;\n    if (previousFiber !== null && previousFiber.memoizedState !== null) {\n      prevState = previousFiber.memoizedState;\n    }\n    const nextState: SuspenseState | null = offscreenFiber.memoizedState;\n\n    const wasHidden = prevState !== null;\n    const isHidden = nextState !== null;\n\n    const rootState: RootState = finishedRoot.current.memoizedState;\n    // TODO(luna) move pendingSuspenseBoundaries and transitions from\n    // HostRoot fiber to FiberRoot\n    const rootPendingBoundaries = rootState.pendingSuspenseBoundaries;\n    const rootTransitions = rootState.transitions;\n\n    // If there is a name on the suspense boundary, store that in\n    // the pending boundaries.\n    let name = null;\n    const parent = offscreenFiber.return;\n    if (\n      parent !== null &&\n      parent.tag === SuspenseComponent &&\n      parent.memoizedProps.unstable_name\n    ) {\n      name = parent.memoizedProps.unstable_name;\n    }\n\n    if (rootPendingBoundaries !== null) {\n      if (previousFiber === null) {\n        // Initial mount\n        if (isHidden) {\n          rootPendingBoundaries.set(offscreenInstance, {\n            name,\n          });\n        }\n      } else {\n        if (wasHidden && !isHidden) {\n          // The suspense boundary went from hidden to visible. Remove\n          // the boundary from the pending suspense boundaries set\n          // if it's there\n          if (rootPendingBoundaries.has(offscreenInstance)) {\n            rootPendingBoundaries.delete(offscreenInstance);\n\n            if (rootPendingBoundaries.size === 0 && rootTransitions !== null) {\n              rootTransitions.forEach(transition => {\n                addTransitionCompleteCallbackToPendingTransition({\n                  transitionName: transition.name,\n                  startTime: transition.startTime,\n                });\n              });\n            }\n          }\n        } else if (!wasHidden && isHidden) {\n          // The suspense boundaries was just hidden. Add the boundary\n          // to the pending boundary set if it's there\n          rootPendingBoundaries.set(offscreenInstance, {\n            name,\n          });\n        }\n      }\n    }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  let hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n          try {\n            const instance = node.stateNode;\n            if (isHidden) {\n              hideInstance(instance);\n            } else {\n              unhideInstance(node.stateNode, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          try {\n            const instance = node.stateNode;\n            if (isHidden) {\n              hideTextInstance(instance);\n            } else {\n              unhideTextInstance(instance, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden.\n        // Don't search any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      let retVal;\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          retVal = ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        retVal = ref(instanceToUse);\n      }\n      if (__DEV__) {\n        if (typeof retVal === 'function') {\n          console.error(\n            'Unexpected return value from a callback ref in %s. ' +\n              'A callback ref should not return a function.',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          currentRef(null);\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        currentRef(null);\n      }\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  }\n\n  // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n  if (!(deletedTreeCleanUpLevel >= 2)) {\n    // This is the default branch (level 0).\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.dependencies = null;\n    fiber.memoizedProps = null;\n    fiber.memoizedState = null;\n    fiber.pendingProps = null;\n    fiber.sibling = null;\n    fiber.stateNode = null;\n    fiber.updateQueue = null;\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n  } else {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null;\n\n    // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n    if (fiber.tag === HostComponent) {\n      const hostInstance: Instance = fiber.stateNode;\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n    fiber.stateNode = null;\n\n    // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n\n    if (deletedTreeCleanUpLevel >= 3) {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null;\n      // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n\n  throw new Error(\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  switch (parentFiber.tag) {\n    case HostComponent: {\n      const parent: Instance = parentFiber.stateNode;\n      if (parentFiber.flags & ContentReset) {\n        // Reset the text content of the parent before doing any insertions\n        resetTextContent(parent);\n        // Clear ContentReset from the effect tag\n        parentFiber.flags &= ~ContentReset;\n      }\n\n      const before = getHostSibling(finishedWork);\n      // We only have the top Fiber that was inserted but we need to recurse down its\n      // children to find all the terminal nodes.\n      insertOrAppendPlacementNode(finishedWork, before, parent);\n      break;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const parent: Container = parentFiber.stateNode.containerInfo;\n      const before = getHostSibling(finishedWork);\n      insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n      break;\n    }\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      throw new Error(\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\n// These are tracked on the stack as we recursively traverse a\n// deleted subtree.\n// TODO: Update these during the whole mutation phase, not just during\n// a deletion.\nlet hostParent: Instance | Container | null = null;\nlet hostParentIsContainer: boolean = false;\n\nfunction commitDeletionEffects(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  deletedFiber: Fiber,\n) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was deleted but we need to recurse down its\n    // children to find all the terminal nodes.\n\n    // Recursively delete all host nodes from the parent, detach refs, clean\n    // up mounted layout effects, and call componentWillUnmount.\n\n    // We only need to remove the topmost host child in each branch. But then we\n    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n    // could split this into two separate traversals functions, where the second\n    // one doesn't include any removeChild logic. This is maybe the same\n    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n    // the layout phase is refactored to use recursion).\n\n    // Before starting, find the nearest host parent on the stack so we know\n    // which instance/container to remove the children from.\n    // TODO: Instead of searching up the fiber return path on every deletion, we\n    // can track the nearest host component on the JS stack as we traverse the\n    // tree during the commit phase. This would make insertions faster, too.\n    let parent = returnFiber;\n    findParent: while (parent !== null) {\n      switch (parent.tag) {\n        case HostComponent: {\n          hostParent = parent.stateNode;\n          hostParentIsContainer = false;\n          break findParent;\n        }\n        case HostRoot: {\n          hostParent = parent.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          break findParent;\n        }\n        case HostPortal: {\n          hostParent = parent.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          break findParent;\n        }\n      }\n      parent = parent.return;\n    }\n    if (hostParent === null) {\n      throw new Error(\n        'Expected to find a host parent. This error is likely caused by ' +\n          'a bug in React. Please file an issue.',\n      );\n    }\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n    hostParent = null;\n    hostParentIsContainer = false;\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n  }\n\n  detachFiberMutation(deletedFiber);\n}\n\nfunction recursivelyTraverseDeletionEffects(\n  finishedRoot,\n  nearestMountedAncestor,\n  parent,\n) {\n  // TODO: Use a static flag to skip trees that don't have unmount effects\n  let child = parent.child;\n  while (child !== null) {\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n    child = child.sibling;\n  }\n}\n\nfunction commitDeletionEffectsOnFiber(\n  finishedRoot: FiberRoot,\n  nearestMountedAncestor: Fiber,\n  deletedFiber: Fiber,\n) {\n  onCommitUnmount(deletedFiber);\n\n  // The cases in this outer switch modify the stack before they traverse\n  // into their subtree. There are simpler cases in the inner switch\n  // that don't modify the stack.\n  switch (deletedFiber.tag) {\n    case HostComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      }\n      // Intentional fallthrough to next branch\n    }\n    // eslint-disable-next-line-no-fallthrough\n    case HostText: {\n      // We only need to remove the nearest host child. Set the host parent\n      // to `null` on the stack to indicate that nested children don't\n      // need to be removed.\n      if (supportsMutation) {\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = null;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n\n        if (hostParent !== null) {\n          // Now that all the child effects have unmounted, we can remove the\n          // node from the tree.\n          if (hostParentIsContainer) {\n            removeChildFromContainer(\n              ((hostParent: any): Container),\n              (deletedFiber.stateNode: Instance | TextInstance),\n            );\n          } else {\n            removeChild(\n              ((hostParent: any): Instance),\n              (deletedFiber.stateNode: Instance | TextInstance),\n            );\n          }\n        }\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((deletedFiber.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Dehydrated fragments don't have any children\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (supportsMutation) {\n        if (hostParent !== null) {\n          if (hostParentIsContainer) {\n            clearSuspenseBoundaryFromContainer(\n              ((hostParent: any): Container),\n              (deletedFiber.stateNode: SuspenseInstance),\n            );\n          } else {\n            clearSuspenseBoundary(\n              ((hostParent: any): Instance),\n              (deletedFiber.stateNode: SuspenseInstance),\n            );\n          }\n        }\n      }\n      return;\n    }\n    case HostPortal: {\n      if (supportsMutation) {\n        // When we go into a portal, it becomes the parent to remove from.\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = deletedFiber.stateNode.containerInfo;\n        hostParentIsContainer = true;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n      } else {\n        emptyPortalContainer(deletedFiber);\n\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      return;\n    }\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        const updateQueue: FunctionComponentUpdateQueue | null = (deletedFiber.updateQueue: any);\n        if (updateQueue !== null) {\n          const lastEffect = updateQueue.lastEffect;\n          if (lastEffect !== null) {\n            const firstEffect = lastEffect.next;\n\n            let effect = firstEffect;\n            do {\n              const {destroy, tag} = effect;\n              if (destroy !== undefined) {\n                if ((tag & HookInsertion) !== NoHookEffect) {\n                  safelyCallDestroy(\n                    deletedFiber,\n                    nearestMountedAncestor,\n                    destroy,\n                  );\n                } else if ((tag & HookLayout) !== NoHookEffect) {\n                  if (enableSchedulingProfiler) {\n                    markComponentLayoutEffectUnmountStarted(deletedFiber);\n                  }\n\n                  if (\n                    enableProfilerTimer &&\n                    enableProfilerCommitHooks &&\n                    deletedFiber.mode & ProfileMode\n                  ) {\n                    startLayoutEffectTimer();\n                    safelyCallDestroy(\n                      deletedFiber,\n                      nearestMountedAncestor,\n                      destroy,\n                    );\n                    recordLayoutEffectDuration(deletedFiber);\n                  } else {\n                    safelyCallDestroy(\n                      deletedFiber,\n                      nearestMountedAncestor,\n                      destroy,\n                    );\n                  }\n\n                  if (enableSchedulingProfiler) {\n                    markComponentLayoutEffectUnmountStopped();\n                  }\n                }\n              }\n              effect = effect.next;\n            } while (effect !== firstEffect);\n          }\n        }\n      }\n\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case ClassComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        const instance = deletedFiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(\n            deletedFiber,\n            nearestMountedAncestor,\n            instance,\n          );\n        }\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case OffscreenComponent: {\n      if (\n        // TODO: Remove this dead flag\n        enableSuspenseLayoutEffectSemantics &&\n        deletedFiber.mode & ConcurrentMode\n      ) {\n        // If this offscreen component is hidden, we already unmounted it. Before\n        // deleting the children, track that it's already unmounted so that we\n        // don't attempt to unmount the effects again.\n        // TODO: If the tree is hidden, in most cases we should be able to skip\n        // over the nested children entirely. An exception is we haven't yet found\n        // the topmost host node to delete, which we already track on the stack.\n        // But the other case is portals, which need to be detached no matter how\n        // deeply they are nested. We should use a subtree flag to track whether a\n        // subtree includes a nested portal.\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeWasHidden =\n          prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n  }\n}\nfunction commitSuspenseCallback(finishedWork: Fiber) {\n  // TODO: Move this to passive phase\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n          if (enableSuspenseCallback) {\n            const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n            if (hydrationCallbacks !== null) {\n              const onHydrated = hydrationCallbacks.onHydrated;\n              if (onHydrated) {\n                onHydrated(suspenseInstance);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork: Fiber) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    let retryCache = finishedWork.stateNode;\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n    wakeables.forEach(wakeable => {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      const retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n      if (!retryCache.has(wakeable)) {\n        retryCache.add(wakeable);\n\n        if (enableUpdaterTracking) {\n          if (isDevToolsPresent) {\n            if (inProgressLanes !== null && inProgressRoot !== null) {\n              // If we have pending work still, associate the original updaters with it.\n              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n            } else {\n              throw Error(\n                'Expected finished root and lanes to be set. This is a bug in React.',\n              );\n            }\n          }\n        }\n\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nexport function commitMutationEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n\n  setCurrentDebugFiberInDEV(finishedWork);\n  commitMutationEffectsOnFiber(finishedWork, root, committedLanes);\n  setCurrentDebugFiberInDEV(finishedWork);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseMutationEffects(\n  root: FiberRoot,\n  parentFiber: Fiber,\n  lanes: Lanes,\n) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects hae fired.\n  const deletions = parentFiber.deletions;\n  if (deletions !== null) {\n    for (let i = 0; i < deletions.length; i++) {\n      const childToDelete = deletions[i];\n      try {\n        commitDeletionEffects(root, parentFiber, childToDelete);\n      } catch (error) {\n        captureCommitPhaseError(childToDelete, parentFiber, error);\n      }\n    }\n  }\n\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  if (parentFiber.subtreeFlags & MutationMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      commitMutationEffectsOnFiber(child, root, lanes);\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitMutationEffectsOnFiber(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  lanes: Lanes,\n) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconcilation, because those can be set on all fiber types.\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        try {\n          commitHookEffectListUnmount(\n            HookInsertion | HookHasEffect,\n            finishedWork,\n            finishedWork.return,\n          );\n          commitHookEffectListMount(\n            HookInsertion | HookHasEffect,\n            finishedWork,\n          );\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Ref) {\n        if (current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n      return;\n    }\n    case HostComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Ref) {\n        if (current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n      if (supportsMutation) {\n        // TODO: ContentReset gets cleared by the children during the commit\n        // phase. This is a refactor hazard because it means we must read\n        // flags the flags after `commitReconciliationEffects` has already run;\n        // the order matters. We should refactor so that ContentReset does not\n        // rely on mutating the flag during commit. Like by setting a flag\n        // during the render phase instead.\n        if (finishedWork.flags & ContentReset) {\n          const instance: Instance = finishedWork.stateNode;\n          try {\n            resetTextContent(instance);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n\n        if (flags & Update) {\n          const instance: Instance = finishedWork.stateNode;\n          if (instance != null) {\n            // Commit the work prepared earlier.\n            const newProps = finishedWork.memoizedProps;\n            // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n            const oldProps =\n              current !== null ? current.memoizedProps : newProps;\n            const type = finishedWork.type;\n            // TODO: Type the updateQueue to be specific to host components.\n            const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n            finishedWork.updateQueue = null;\n            if (updatePayload !== null) {\n              try {\n                commitUpdate(\n                  instance,\n                  updatePayload,\n                  type,\n                  oldProps,\n                  newProps,\n                  finishedWork,\n                );\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error,\n                );\n              }\n            }\n          }\n        }\n      }\n      return;\n    }\n    case HostText: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsMutation) {\n          if (finishedWork.stateNode === null) {\n            throw new Error(\n              'This should have a text node initialized. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          const textInstance: TextInstance = finishedWork.stateNode;\n          const newText: string = finishedWork.memoizedProps;\n          // For hydration we reuse the update path but we treat the oldProps\n          // as the newProps. The updatePayload will contain the real change in\n          // this case.\n          const oldText: string =\n            current !== null ? current.memoizedProps : newText;\n\n          try {\n            commitTextUpdate(textInstance, oldText, newText);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case HostRoot: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsMutation && supportsHydration) {\n          if (current !== null) {\n            const prevRootState: RootState = current.memoizedState;\n            if (prevRootState.isDehydrated) {\n              try {\n                commitHydratedContainer(root.containerInfo);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error,\n                );\n              }\n            }\n          }\n        }\n        if (supportsPersistence) {\n          const containerInfo = root.containerInfo;\n          const pendingChildren = root.pendingChildren;\n          try {\n            replaceContainerChildren(containerInfo, pendingChildren);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case HostPortal: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsPersistence) {\n          const portal = finishedWork.stateNode;\n          const containerInfo = portal.containerInfo;\n          const pendingChildren = portal.pendingChildren;\n          try {\n            replaceContainerChildren(containerInfo, pendingChildren);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      const offscreenFiber: Fiber = (finishedWork.child: any);\n\n      if (offscreenFiber.flags & Visibility) {\n        const offscreenInstance: OffscreenInstance = offscreenFiber.stateNode;\n        const newState: OffscreenState | null = offscreenFiber.memoizedState;\n        const isHidden = newState !== null;\n\n        // Track the current state on the Offscreen instance so we can\n        // read it during an event\n        offscreenInstance.isHidden = isHidden;\n\n        if (isHidden) {\n          const wasHidden =\n            offscreenFiber.alternate !== null &&\n            offscreenFiber.alternate.memoizedState !== null;\n          if (!wasHidden) {\n            // TODO: Move to passive phase\n            markCommitTimeOfFallback();\n          }\n        }\n      }\n\n      if (flags & Update) {\n        try {\n          commitSuspenseCallback(finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        attachSuspenseRetryListeners(finishedWork);\n      }\n      return;\n    }\n    case OffscreenComponent: {\n      const wasHidden = current !== null && current.memoizedState !== null;\n\n      if (\n        // TODO: Remove this dead flag\n        enableSuspenseLayoutEffectSemantics &&\n        finishedWork.mode & ConcurrentMode\n      ) {\n        // Before committing the children, track on the stack whether this\n        // offscreen subtree was already hidden, so that we don't unmount the\n        // effects again.\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n      } else {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      }\n\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Visibility) {\n        const offscreenInstance: OffscreenInstance = finishedWork.stateNode;\n        const newState: OffscreenState | null = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        const offscreenBoundary: Fiber = finishedWork;\n\n        // Track the current state on the Offscreen instance so we can\n        // read it during an event\n        offscreenInstance.isHidden = isHidden;\n\n        if (enableSuspenseLayoutEffectSemantics) {\n          if (isHidden) {\n            if (!wasHidden) {\n              if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                nextEffect = offscreenBoundary;\n                let offscreenChild = offscreenBoundary.child;\n                while (offscreenChild !== null) {\n                  nextEffect = offscreenChild;\n                  disappearLayoutEffects_begin(offscreenChild);\n                  offscreenChild = offscreenChild.sibling;\n                }\n              }\n            }\n          } else {\n            if (wasHidden) {\n              // TODO: Move re-appear call here for symmetry?\n            }\n          }\n        }\n\n        if (supportsMutation) {\n          // TODO: This needs to run whenever there's an insertion or update\n          // inside a hidden Offscreen tree.\n          hideOrUnhideAllChildren(offscreenBoundary, isHidden);\n        }\n      }\n      return;\n    }\n    case SuspenseListComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        attachSuspenseRetryListeners(finishedWork);\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork);\n\n        // TODO: This is a temporary solution that allowed us to transition away\n        // from React Flare on www.\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(finishedWork, finishedWork.return);\n          }\n          safelyAttachRef(finishedWork, finishedWork.return);\n        }\n        if (flags & Update) {\n          const scopeInstance = finishedWork.stateNode;\n          prepareScopeUpdate(scopeInstance, finishedWork);\n        }\n      }\n      return;\n    }\n    default: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      return;\n    }\n  }\n}\nfunction commitReconciliationEffects(finishedWork: Fiber) {\n  // Placement effects (insertions, reorders) can be scheduled on any fiber\n  // type. They needs to happen after the children effects have fired, but\n  // before the effects on this fiber have fired.\n  const flags = finishedWork.flags;\n  if (flags & Placement) {\n    try {\n      commitPlacement(finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n    // Clear the \"placement\" from effect tag so that we know that this is\n    // inserted, before any life-cycles like componentDidMount gets called.\n    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n    // and isMounted is deprecated anyway so we should be able to kill this.\n    finishedWork.flags &= ~Placement;\n  }\n  if (flags & Hydrating) {\n    finishedWork.flags &= ~Hydrating;\n  }\n}\n\nexport function commitLayoutEffects(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n): void {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = finishedWork;\n\n  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitLayoutEffects_begin(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  // Suspense layout effects semantics don't change for legacy roots.\n  const isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (\n      enableSuspenseLayoutEffectSemantics &&\n      fiber.tag === OffscreenComponent &&\n      isModernRoot\n    ) {\n      // Keep track of the current Offscreen stack's state.\n      const isHidden = fiber.memoizedState !== null;\n      const newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n      if (newOffscreenSubtreeIsHidden) {\n        // The Offscreen tree is hidden. Skip over its layout effects.\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      } else {\n        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n        const current = fiber.alternate;\n        const wasHidden = current !== null && current.memoizedState !== null;\n        const newOffscreenSubtreeWasHidden =\n          wasHidden || offscreenSubtreeWasHidden;\n        const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n\n        // Traverse the Offscreen subtree with the current Offscreen as the root.\n        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n          // This is the root of a reappearing boundary. Turn its layout effects\n          // back on.\n          nextEffect = fiber;\n          reappearLayoutEffects_begin(fiber);\n        }\n\n        let child = firstChild;\n        while (child !== null) {\n          nextEffect = child;\n          commitLayoutEffects_begin(\n            child, // New root; bubble back up to here and stop.\n            root,\n            committedLanes,\n          );\n          child = child.sibling;\n        }\n\n        // Restore Offscreen state and resume in our-progress traversal.\n        nextEffect = fiber;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\n        continue;\n      }\n    }\n\n    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n    }\n  }\n}\n\nfunction commitLayoutMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & LayoutMask) !== NoFlags) {\n      const current = fiber.alternate;\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction disappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n          } finally {\n            recordLayoutEffectDuration(fiber);\n          }\n        } else {\n          commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n        }\n        break;\n      }\n      case ClassComponent: {\n        // TODO (Offscreen) Check: flags & RefStatic\n        safelyDetachRef(fiber, fiber.return);\n\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        safelyDetachRef(fiber, fiber.return);\n        break;\n      }\n      case OffscreenComponent: {\n        // Check if this is a\n        const isHidden = fiber.memoizedState !== null;\n        if (isHidden) {\n          // Nested Offscreen tree is already hidden. Don't disappear\n          // its effects.\n          disappearLayoutEffects_complete(subtreeRoot);\n          continue;\n        }\n        break;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      disappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction disappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction reappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (fiber.tag === OffscreenComponent) {\n      const isHidden = fiber.memoizedState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n        reappearLayoutEffects_complete(subtreeRoot);\n        continue;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      reappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction reappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // TODO (Offscreen) Check: flags & LayoutStatic\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      reappearLayoutEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nexport function commitPassiveMountEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n): void {\n  nextEffect = finishedWork;\n  commitPassiveMountEffects_begin(\n    finishedWork,\n    root,\n    committedLanes,\n    committedTransitions,\n  );\n}\n\nfunction commitPassiveMountEffects_begin(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitPassiveMountEffects_complete(\n        subtreeRoot,\n        root,\n        committedLanes,\n        committedTransitions,\n      );\n    }\n  }\n}\n\nfunction commitPassiveMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitPassiveMountOnFiber(\n          root,\n          fiber,\n          committedLanes,\n          committedTransitions,\n        );\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountOnFiber(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n        } finally {\n          recordPassiveEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (finishedWork.alternate !== null) {\n          previousCache = finishedWork.alternate.memoizedState.cache;\n        }\n        const nextCache = finishedWork.memoizedState.cache;\n        // Retain/release the root cache.\n        // Note that on initial mount, previousCache and nextCache will be the same\n        // and this retain won't occur. To counter this, we instead retain the HostRoot's\n        // initial cache when creating the root itself (see createFiberRoot() in\n        // ReactFiberRoot.js). Subsequent updates that change the cache are reflected\n        // here, such that previous/next caches are retained correctly.\n        if (nextCache !== previousCache) {\n          retainCache(nextCache);\n          if (previousCache != null) {\n            releaseCache(previousCache);\n          }\n        }\n      }\n\n      if (enableTransitionTracing) {\n        // Get the transitions that were initiatized during the render\n        // and add a start transition callback for each of them\n        const state = finishedWork.memoizedState;\n        // TODO Since it's a mutable field, this should live on the FiberRoot\n        if (state.transitions === null) {\n          state.transitions = new Set([]);\n        }\n        const pendingTransitions = state.transitions;\n        const pendingSuspenseBoundaries = state.pendingSuspenseBoundaries;\n\n        // Initial render\n        if (committedTransitions !== null) {\n          committedTransitions.forEach(transition => {\n            addTransitionStartCallbackToPendingTransition({\n              transitionName: transition.name,\n              startTime: transition.startTime,\n            });\n            pendingTransitions.add(transition);\n          });\n\n          if (\n            pendingSuspenseBoundaries === null ||\n            pendingSuspenseBoundaries.size === 0\n          ) {\n            pendingTransitions.forEach(transition => {\n              addTransitionCompleteCallbackToPendingTransition({\n                transitionName: transition.name,\n                startTime: transition.startTime,\n              });\n            });\n          }\n\n          clearTransitionsForLanes(finishedRoot, committedLanes);\n        }\n\n        // If there are no more pending suspense boundaries we\n        // clear the transitions because they are all complete.\n        if (\n          pendingSuspenseBoundaries === null ||\n          pendingSuspenseBoundaries.size === 0\n        ) {\n          state.transitions = null;\n        }\n      }\n      break;\n    }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (\n          finishedWork.alternate !== null &&\n          finishedWork.alternate.memoizedState !== null &&\n          finishedWork.alternate.memoizedState.cachePool !== null\n        ) {\n          previousCache = finishedWork.alternate.memoizedState.cachePool.pool;\n        }\n        let nextCache: Cache | null = null;\n        if (\n          finishedWork.memoizedState !== null &&\n          finishedWork.memoizedState.cachePool !== null\n        ) {\n          nextCache = finishedWork.memoizedState.cachePool.pool;\n        }\n        // Retain/release the cache used for pending (suspended) nodes.\n        // Note that this is only reached in the non-suspended/visible case:\n        // when the content is suspended/hidden, the retain/release occurs\n        // via the parent Suspense component (see case above).\n        if (nextCache !== previousCache) {\n          if (nextCache != null) {\n            retainCache(nextCache);\n          }\n          if (previousCache != null) {\n            releaseCache(previousCache);\n          }\n        }\n      }\n\n      if (enableTransitionTracing) {\n        const isFallback = finishedWork.memoizedState;\n        const queue = (finishedWork.updateQueue: any);\n        const rootMemoizedState = finishedRoot.current.memoizedState;\n\n        if (queue !== null) {\n          // We have one instance of the pendingSuspenseBoundaries map.\n          // We only need one because we update it during the commit phase.\n          // We instantiate a new Map if we haven't already\n          if (rootMemoizedState.pendingSuspenseBoundaries === null) {\n            rootMemoizedState.pendingSuspenseBoundaries = new Map();\n          }\n\n          if (isFallback) {\n            const transitions = queue.transitions;\n            let prevTransitions = finishedWork.memoizedState.transitions;\n            // Add all the transitions saved in the update queue during\n            // the render phase (ie the transitions associated with this boundary)\n            // into the transitions set.\n            if (transitions !== null) {\n              if (prevTransitions === null) {\n                // We only have one instance of the transitions set\n                // because we update it only during the commit phase. We\n                // will create the set on a as needed basis in the commit phase\n                finishedWork.memoizedState.transitions = prevTransitions = new Set();\n              }\n\n              transitions.forEach(transition => {\n                prevTransitions.add(transition);\n              });\n            }\n          }\n        }\n\n        commitTransitionProgress(finishedRoot, finishedWork);\n\n        finishedWork.updateQueue = null;\n      }\n\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (finishedWork.alternate !== null) {\n          previousCache = finishedWork.alternate.memoizedState.cache;\n        }\n        const nextCache = finishedWork.memoizedState.cache;\n        // Retain/release the cache. In theory the cache component\n        // could be \"borrowing\" a cache instance owned by some parent,\n        // in which case we could avoid retaining/releasing. But it\n        // is non-trivial to determine when that is the case, so we\n        // always retain/release.\n        if (nextCache !== previousCache) {\n          retainCache(nextCache);\n          if (previousCache != null) {\n            releaseCache(previousCache);\n          }\n        }\n      }\n      break;\n    }\n  }\n}\n\nexport function commitPassiveUnmountEffects(firstChild: Fiber): void {\n  nextEffect = firstChild;\n  commitPassiveUnmountEffects_begin();\n}\n\nfunction commitPassiveUnmountEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const child = fiber.child;\n\n    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const fiberToDelete = deletions[i];\n          nextEffect = fiberToDelete;\n          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n            fiberToDelete,\n            fiber,\n          );\n        }\n\n        if (deletedTreeCleanUpLevel >= 1) {\n          // A fiber was deleted from this parent fiber, but it's still part of\n          // the previous (alternate) parent fiber's list of children. Because\n          // children are a linked list, an earlier sibling that's still alive\n          // will be connected to the deleted fiber via its `alternate`:\n          //\n          //   live fiber\n          //   --alternate--> previous live fiber\n          //   --sibling--> deleted fiber\n          //\n          // We can't disconnect `alternate` on nodes that haven't been deleted\n          // yet, but we can disconnect the `sibling` and `child` pointers.\n          const previousFiber = fiber.alternate;\n          if (previousFiber !== null) {\n            let detachedChild = previousFiber.child;\n            if (detachedChild !== null) {\n              previousFiber.child = null;\n              do {\n                const detachedSibling = detachedChild.sibling;\n                detachedChild.sibling = null;\n                detachedChild = detachedSibling;\n              } while (detachedChild !== null);\n            }\n          }\n        }\n\n        nextEffect = fiber;\n      }\n    }\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffects_complete();\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      commitPassiveUnmountOnFiber(fiber);\n      resetCurrentDebugFiberInDEV();\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork: Fiber): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n      }\n      break;\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n  deletedSubtreeRoot: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n    setCurrentDebugFiberInDEV(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentDebugFiberInDEV();\n\n    const child = fiber.child;\n    // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n    if (child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n        deletedSubtreeRoot,\n      );\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n  deletedSubtreeRoot: Fiber,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const sibling = fiber.sibling;\n    const returnFiber = fiber.return;\n\n    if (deletedTreeCleanUpLevel >= 2) {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    } else {\n      // This is the default branch (level 0). We do not recursively clear all\n      // the fiber fields. Only the root of the deleted subtree.\n      if (fiber === deletedSubtreeRoot) {\n        detachFiberAfterEffects(fiber);\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      sibling.return = returnFiber;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n): void {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n        recordPassiveEffectDuration(current);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n      }\n      break;\n    }\n    // TODO: run passive unmount effects when unmounting a root.\n    // Because passive unmount effects are not currently run,\n    // the cache instance owned by the root will never be freed.\n    // When effects are run, the cache should be freed here:\n    // case HostRoot: {\n    //   if (enableCache) {\n    //     const cache = current.memoizedState.cache;\n    //     releaseCache(cache);\n    //   }\n    //   break;\n    // }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      if (enableCache) {\n        if (\n          current.memoizedState !== null &&\n          current.memoizedState.cachePool !== null\n        ) {\n          const cache: Cache = current.memoizedState.cachePool.pool;\n          // Retain/release the cache used for pending (suspended) nodes.\n          // Note that this is only reached in the non-suspended/visible case:\n          // when the content is suspended/hidden, the retain/release occurs\n          // via the parent Suspense component (see case above).\n          if (cache != null) {\n            retainCache(cache);\n          }\n        }\n      }\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache = current.memoizedState.cache;\n        releaseCache(cache);\n      }\n      break;\n    }\n  }\n}\n\n// TODO: Reuse reappearLayoutEffects traversal here?\nfunction invokeLayoutEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookLayout | HookHasEffect, fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookPassive | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n      }\n    }\n  }\n}\n\nexport {\n  commitPlacement,\n  commitAttachRef,\n  commitDetachRef,\n  invokeLayoutEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokePassiveEffectUnmountInDEV,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactFiber.old';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nimport {warnsIfNotActing} from './ReactFiberHostConfig';\n\nconst {ReactCurrentActQueue} = ReactSharedInternals;\n\nexport function isLegacyActEnvironment(fiber: Fiber) {\n  if (__DEV__) {\n    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n    // act environment whenever `jest` is defined, but you can still turn off\n    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n    // to false.\n\n    const isReactActEnvironmentGlobal =\n      // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\n        ? IS_REACT_ACT_ENVIRONMENT\n        : undefined;\n\n    // $FlowExpectedError - Flow doesn't know about jest\n    const jestIsDefined = typeof jest !== 'undefined';\n    return (\n      warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false\n    );\n  }\n  return false;\n}\n\nexport function isConcurrentActEnvironment() {\n  if (__DEV__) {\n    const isReactActEnvironmentGlobal =\n      // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\n        ? IS_REACT_ACT_ENVIRONMENT\n        : undefined;\n\n    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n      // TODO: Include link to relevant documentation page.\n      console.error(\n        'The current testing environment is not configured to support ' +\n          'act(...)',\n      );\n    }\n    return isReactActEnvironmentGlobal;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Flags} from './ReactFiberFlags';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {EventPriority} from './ReactEventPriorities.old';\nimport type {\n  PendingTransitionCallbacks,\n  TransitionObject,\n  Transition,\n} from './ReactFiberTracingMarkerComponent.old';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerNestedUpdateScheduledHook,\n  deferRenderPhaseUpdateToNextBatch,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  disableSchedulerTimeoutInWorkLoop,\n  enableStrictEffects,\n  skipUnmountedBoundaries,\n  enableUpdaterTracking,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport is from 'shared/objectIs';\n\nimport {\n  // Aliased because `act` will override and push to an internal queue\n  scheduleCallback as Scheduler_scheduleCallback,\n  cancelCallback as Scheduler_cancelCallback,\n  shouldYield,\n  requestPaint,\n  now,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\nimport {\n  flushSyncCallbacks,\n  flushSyncCallbacksOnlyInLegacyMode,\n  scheduleSyncCallback,\n  scheduleLegacySyncCallback,\n} from './ReactFiberSyncTaskQueue.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\n\nimport {\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  afterActiveInstanceBlur,\n  getCurrentEventPriority,\n  supportsMicrotasks,\n  errorHydratingContainer,\n  scheduleMicrotask,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {didSuspendOrErrorWhileHydratingDEV} from './ReactFiberHydrationContext.old';\nimport {NoMode, ProfileMode, ConcurrentMode} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Profiler,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  Incomplete,\n  StoreConsistency,\n  HostEffectMask,\n  ForceClientRender,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  MountPassiveDev,\n  MountLayoutDev,\n} from './ReactFiberFlags';\nimport {\n  NoLanes,\n  NoLane,\n  SyncLane,\n  NoTimestamp,\n  claimNextTransitionLane,\n  claimNextRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  includesBlockingLane,\n  includesExpiredLane,\n  getNextLanes,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootEntangled,\n  markRootFinished,\n  getHighestPriorityLane,\n  addFiberToLanesMap,\n  movePendingFibersToMemoized,\n  addTransitionToLanesMap,\n  getTransitionsForLanes,\n} from './ReactFiberLane.old';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  lowerEventPriority,\n  lanesToEventPriority,\n} from './ReactEventPriorities.old';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationEffects,\n  commitLayoutEffects,\n  commitMutationEffects,\n  commitPassiveEffectDurations,\n  commitPassiveMountEffects,\n  commitPassiveUnmountEffects,\n  invokeLayoutEffectMountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectUnmountInDEV,\n  reportUncaughtErrorInDEV,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactFiberClassUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {\n  createCapturedValueAtFiber,\n  type CapturedValue,\n} from './ReactCapturedValue';\nimport {\n  push as pushToStack,\n  pop as popFromStack,\n  createCursor,\n} from './ReactFiberStack.old';\nimport {\n  enqueueConcurrentRenderForLane,\n  finishQueueingConcurrentUpdates,\n} from './ReactFiberConcurrentUpdates.old';\n\nimport {\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  resetNestedUpdateFlag,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  isDevToolsPresent,\n  markCommitStarted,\n  markCommitStopped,\n  markComponentRenderStopped,\n  markComponentSuspended,\n  markComponentErrored,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n  onCommitRoot as onCommitRootDevTools,\n  onPostCommitRoot as onPostCommitRootDevTools,\n} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\nimport {releaseCache} from './ReactFiberCacheComponent.old';\nimport {\n  isLegacyActEnvironment,\n  isConcurrentActEnvironment,\n} from './ReactFiberAct.old';\nimport {processTransitionCallbacks} from './ReactFiberTracingMarkerComponent.old';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  ReactCurrentBatchConfig,\n  ReactCurrentActQueue,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b000;\nconst BatchedContext = /*               */ 0b001;\nconst RenderContext = /*                */ 0b010;\nconst CommitContext = /*                */ 0b100;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6;\nconst RootInProgress = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\nconst RootDidNotComplete = 6;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\nexport let subtreeRenderLanes: Lanes = NoLanes;\nconst subtreeRenderLanesCursor: StackCursor<Lanes> = createCursor(NoLanes);\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootInProgress;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\nlet workInProgressRootIncludedLanes: Lanes = NoLanes;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootInterleavedUpdatedLanes: Lanes = NoLanes;\n// Lanes that were updated during the render phase (*not* an interleaved event).\nlet workInProgressRootRenderPhaseUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n// Errors that are thrown during the render phase.\nlet workInProgressRootConcurrentErrors: Array<\n  CapturedValue<mixed>,\n> | null = null;\n// These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\nlet workInProgressRootRecoverableErrors: Array<\n  CapturedValue<mixed>,\n> | null = null;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nlet workInProgressTransitions: Array<Transition> | null = null;\nexport function getWorkInProgressTransitions() {\n  return workInProgressTransitions;\n}\n\nlet currentPendingTransitionCallbacks: PendingTransitionCallbacks | null = null;\n\nexport function addTransitionStartCallbackToPendingTransition(\n  transition: TransitionObject,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: [],\n        transitionComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionStart === null) {\n      currentPendingTransitionCallbacks.transitionStart = [];\n    }\n\n    currentPendingTransitionCallbacks.transitionStart.push(transition);\n  }\n}\n\nexport function addTransitionCompleteCallbackToPendingTransition(\n  transition: TransitionObject,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionComplete: [],\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionComplete === null) {\n      currentPendingTransitionCallbacks.transitionComplete = [];\n    }\n\n    currentPendingTransitionCallbacks.transitionComplete.push(transition);\n  }\n}\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\n// Only used when enableProfilerNestedUpdateScheduledHook is true;\n// to track which root is currently committing layout effects.\nlet rootCommittingMutationOrLayoutEffects: FiberRoot | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\nlet pendingPassiveEffectsRemainingLanes: Lanes = NoLanes;\nlet pendingPassiveTransitions: Array<Transition> | null = null;\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\nlet isFlushingPassiveEffects = false;\nlet didScheduleUpdateDuringPassiveEffects = false;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\nlet rootWithPassiveNestedUpdates: FiberRoot | null = null;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventTransitionLane: Lanes = NoLanes;\n\nlet isRunningInsertionEffect = false;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (__DEV__ && ReactCurrentBatchConfig.transition !== null) {\n      const transition = ReactCurrentBatchConfig.transition;\n      if (!transition._updatedFibers) {\n        transition._updatedFibers = new Set();\n      }\n\n      transition._updatedFibers.add(fiber);\n    }\n    // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n    return currentEventTransitionLane;\n  }\n\n  // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const updateLane: Lane = (getCurrentUpdatePriority(): any);\n  if (updateLane !== NoLane) {\n    return updateLane;\n  }\n\n  // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const eventLane: Lane = (getCurrentEventPriority(): any);\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  }\n\n  return claimNextRetryLane();\n}\n\nexport function scheduleUpdateOnFiber(\n  root: FiberRoot,\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n) {\n  checkForNestedUpdates();\n\n  if (__DEV__) {\n    if (isRunningInsertionEffect) {\n      console.error('useInsertionEffect must not schedule updates.');\n    }\n  }\n\n  if (__DEV__) {\n    if (isFlushingPassiveEffects) {\n      didScheduleUpdateDuringPassiveEffects = true;\n    }\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (\n    (executionContext & RenderContext) !== NoLanes &&\n    root === workInProgressRoot\n  ) {\n    // This update was dispatched during the render phase. This is a mistake\n    // if the update originates from user space (with the exception of local\n    // hook updates, which are handled differently and don't reach this\n    // function), but there are some internal React features that use this as\n    // an implementation detail, like selective hydration.\n    warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n    // Track lanes that were updated during the render phase\n    workInProgressRootRenderPhaseUpdatedLanes = mergeLanes(\n      workInProgressRootRenderPhaseUpdatedLanes,\n      lane,\n    );\n  } else {\n    // This is a normal update, scheduled from outside the render phase. For\n    // example, during an input event.\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        addFiberToLanesMap(root, fiber, lane);\n      }\n    }\n\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      if (\n        (executionContext & CommitContext) !== NoContext &&\n        root === rootCommittingMutationOrLayoutEffects\n      ) {\n        if (fiber.mode & ProfileMode) {\n          let current = fiber;\n          while (current !== null) {\n            if (current.tag === Profiler) {\n              const {id, onNestedUpdateScheduled} = current.memoizedProps;\n              if (typeof onNestedUpdateScheduled === 'function') {\n                onNestedUpdateScheduled(id);\n              }\n            }\n            current = current.return;\n          }\n        }\n      }\n    }\n\n    if (enableTransitionTracing) {\n      const transition = ReactCurrentBatchConfig.transition;\n      if (transition !== null) {\n        if (transition.startTime === -1) {\n          transition.startTime = now();\n        }\n\n        addTransitionToLanesMap(root, transition, lane);\n      }\n    }\n\n    if (root === workInProgressRoot) {\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root. Unless the\n      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n      // phase update. In that case, we don't treat render phase updates as if\n      // they were interleaved, for backwards compat reasons.\n      if (\n        deferRenderPhaseUpdateToNextBatch ||\n        (executionContext & RenderContext) === NoContext\n      ) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(\n          workInProgressRootInterleavedUpdatedLanes,\n          lane,\n        );\n      }\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        markRootSuspended(root, workInProgressRootRenderLanes);\n      }\n    }\n\n    ensureRootIsScheduled(root, eventTime);\n    if (\n      lane === SyncLane &&\n      executionContext === NoContext &&\n      (fiber.mode & ConcurrentMode) === NoMode &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      // Flush the synchronous work now, unless we're already working or inside\n      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n      // without immediately flushing it. We only do this for user-initiated\n      // updates, to preserve historical behavior of legacy mode.\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function scheduleInitialHydrationOnRoot(\n  root: FiberRoot,\n  lane: Lane,\n  eventTime: number,\n) {\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\n  // schedule the initial hydration of a root that has just been created. Most\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\n  //\n  // The main reason for this separate path, though, is to distinguish the\n  // initial children from subsequent updates. In fully client-rendered roots\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n  // updates, but hydration roots are special because the initial render must\n  // match what was rendered on the server.\n  const current = root.current;\n  current.lanes = lane;\n  markRootUpdated(root, lane, eventTime);\n  ensureRootIsScheduled(root, eventTime);\n}\n\nexport function isUnsafeClassRenderPhaseUpdate(fiber: Fiber) {\n  // Check if this is a render phase update. Only called by class components,\n  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n  return (\n    // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n    // decided not to enable it.\n    (!deferRenderPhaseUpdateToNextBatch ||\n      (fiber.mode & ConcurrentMode) === NoMode) &&\n    (executionContext & RenderContext) !== NoContext\n  );\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  }\n\n  // We use the highest priority lane to represent the priority of the callback.\n  const newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n  // Check if there's an existing task. We may be able to reuse it.\n  const existingCallbackPriority = root.callbackPriority;\n  if (\n    existingCallbackPriority === newCallbackPriority &&\n    // Special case related to `act`. If the currently scheduled task is a\n    // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n    // on the `act` queue.\n    !(\n      __DEV__ &&\n      ReactCurrentActQueue.current !== null &&\n      existingCallbackNode !== fakeActCallbackNode\n    )\n  ) {\n    if (__DEV__) {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (\n        existingCallbackNode == null &&\n        existingCallbackPriority !== SyncLane\n      ) {\n        console.error(\n          'Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n    // The priority hasn't changed. We can reuse the existing task. Exit.\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if (__DEV__ && ReactCurrentActQueue.isBatchingLegacy !== null) {\n        ReactCurrentActQueue.didScheduleLegacyUpdate = true;\n      }\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n    if (supportsMicrotasks) {\n      // Flush the queue in a microtask.\n      if (__DEV__ && ReactCurrentActQueue.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(() => {\n          // In Safari, appending an iframe forces microtasks to run.\n          // https://github.com/facebook/react/issues/22459\n          // We don't support running callbacks in the middle of render\n          // or commit so we need to check against that.\n          if (\n            (executionContext & (RenderContext | CommitContext)) ===\n            NoContext\n          ) {\n            // Note that this would still prematurely flush the callbacks\n            // if this happens outside render or commit phase (e.g. in an event).\n            flushSyncCallbacks();\n          }\n        });\n      }\n    } else {\n      // Flush the queue in an Immediate task.\n      scheduleCallback(ImmediateSchedulerPriority, flushSyncCallbacks);\n    }\n    newCallbackNode = null;\n  } else {\n    let schedulerPriorityLevel;\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediateSchedulerPriority;\n        break;\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingSchedulerPriority;\n        break;\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdleSchedulerPriority;\n        break;\n      default:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n    }\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    resetNestedUpdateFlag();\n  }\n\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next lanes to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n  const shouldTimeSlice =\n    !includesBlockingLane(root, lanes) &&\n    !includesExpiredLane(root, lanes) &&\n    (disableSchedulerTimeoutInWorkLoop || !didTimeout);\n  let exitStatus = shouldTimeSlice\n    ? renderRootConcurrent(root, lanes)\n    : renderRootSync(root, lanes);\n  if (exitStatus !== RootInProgress) {\n    if (exitStatus === RootErrored) {\n      // If something threw an error, try rendering one more time. We'll\n      // render synchronously to block concurrent data mutations, and we'll\n      // includes all pending updates are included. If it still fails after\n      // the second attempt, we'll give up and commit the resulting tree.\n      const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n      }\n    }\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    if (exitStatus === RootDidNotComplete) {\n      // The render unwound without completing the tree. This happens in special\n      // cases where need to exit the current render without producing a\n      // consistent tree or committing.\n      //\n      // This should only happen during a concurrent render, not a discrete or\n      // synchronous update. We should have already checked for this when we\n      // unwound the stack.\n      markRootSuspended(root, lanes);\n    } else {\n      // The render completed.\n\n      // Check if this render may have yielded to a concurrent event, and if so,\n      // confirm that any newly rendered stores are consistent.\n      // TODO: It's possible that even a concurrent render may never have yielded\n      // to the main thread, if it was fast enough, or if it expired. We could\n      // skip the consistency check in that case, too.\n      const renderWasConcurrent = !includesBlockingLane(root, lanes);\n      const finishedWork: Fiber = (root.current.alternate: any);\n      if (\n        renderWasConcurrent &&\n        !isRenderConsistentWithExternalStores(finishedWork)\n      ) {\n        // A store was mutated in an interleaved event. Render again,\n        // synchronously, to block further mutations.\n        exitStatus = renderRootSync(root, lanes);\n\n        // We need to check again if something threw\n        if (exitStatus === RootErrored) {\n          const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n          if (errorRetryLanes !== NoLanes) {\n            lanes = errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n            // We assume the tree is now consistent because we didn't yield to any\n            // concurrent events.\n          }\n        }\n        if (exitStatus === RootFatalErrored) {\n          const fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw fatalError;\n        }\n      }\n\n      // We now have a consistent tree. The next step is either to commit it,\n      // or, if something suspended, wait to commit it after a timeout.\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      finishConcurrentRender(root, exitStatus, lanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction recoverFromConcurrentError(root, errorRetryLanes) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n\n  // Before rendering again, save the errors from the previous attempt.\n  const errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n  if (isRootDehydrated(root)) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    const rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n    if (__DEV__) {\n      errorHydratingContainer(root.containerInfo);\n    }\n  }\n\n  const exitStatus = renderRootSync(root, errorRetryLanes);\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n\n    // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n    const errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt;\n    // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  } else {\n    // The UI failed to recover.\n  }\n  return exitStatus;\n}\n\nexport function queueRecoverableErrors(errors: Array<CapturedValue<mixed>>) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    workInProgressRootRecoverableErrors.push.apply(\n      workInProgressRootRecoverableErrors,\n      errors,\n    );\n  }\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored: {\n      throw new Error('Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(\n              null,\n              root,\n              workInProgressRootRecoverableErrors,\n              workInProgressTransitions,\n            ),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(\n              null,\n              root,\n              workInProgressRootRecoverableErrors,\n              workInProgressTransitions,\n            ),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unknown root exit status.');\n    }\n  }\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork: Fiber): boolean {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  let node: Fiber = finishedWork;\n  while (true) {\n    if (node.flags & StoreConsistency) {\n      const updateQueue: FunctionComponentUpdateQueue | null = (node.updateQueue: any);\n      if (updateQueue !== null) {\n        const checks = updateQueue.stores;\n        if (checks !== null) {\n          for (let i = 0; i < checks.length; i++) {\n            const check = checks[i];\n            const getSnapshot = check.getSnapshot;\n            const renderedValue = check.value;\n            try {\n              if (!is(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n    const child = node.child;\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n    if (node === finishedWork) {\n      return true;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n  return true;\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(\n    suspendedLanes,\n    workInProgressRootInterleavedUpdatedLanes,\n  );\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    syncNestedUpdateFlag();\n  }\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  flushPassiveEffects();\n\n  let lanes = getNextLanes(root, NoLanes);\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  let exitStatus = renderRootSync(root, lanes);\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  if (exitStatus === RootDidNotComplete) {\n    throw new Error('Root did not complete. This is a bug in React.');\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(\n    root,\n    workInProgressRootRecoverableErrors,\n    workInProgressTransitions,\n  );\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now());\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DefaultEventPriority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n    if (\n      executionContext === NoContext &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C, D) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\ndeclare function flushSync<R>(fn: () => R): R;\n// eslint-disable-next-line no-redeclare\ndeclare function flushSync(): void;\n// eslint-disable-next-line no-redeclare\nexport function flushSync(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (\n    rootWithPendingPassiveEffects !== null &&\n    rootWithPendingPassiveEffects.tag === LegacyRoot &&\n    (executionContext & (RenderContext | CommitContext)) === NoContext\n  ) {\n    flushPassiveEffects();\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function isAlreadyRendering() {\n  // Used by the renderer to print a warning if certain APIs are called from\n  // the wrong context.\n  return (\n    __DEV__ &&\n    (executionContext & (RenderContext | CommitContext)) !== NoContext\n  );\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function pushRenderLanes(fiber: Fiber, lanes: Lanes) {\n  pushToStack(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(\n    workInProgressRootIncludedLanes,\n    lanes,\n  );\n}\n\nexport function popRenderLanes(fiber: Fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  popFromStack(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes): Fiber {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      const current = interruptedWork.alternate;\n      unwindInterruptedWork(\n        current,\n        interruptedWork,\n        workInProgressRootRenderLanes,\n      );\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  const rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootRenderPhaseUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n\n  finishQueueingConcurrentUpdates();\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n\n  return rootWorkInProgress;\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      if (enableSchedulingProfiler) {\n        markComponentRenderStopped();\n\n        if (\n          thrownValue !== null &&\n          typeof thrownValue === 'object' &&\n          typeof thrownValue.then === 'function'\n        ) {\n          const wakeable: Wakeable = (thrownValue: any);\n          markComponentSuspended(\n            erroredWork,\n            wakeable,\n            workInProgressRootRenderLanes,\n          );\n        } else {\n          markComponentErrored(\n            erroredWork,\n            thrownValue,\n            workInProgressRootRenderLanes,\n          );\n        }\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootInProgress ||\n    workInProgressRootExitStatus === RootSuspended ||\n    workInProgressRootExitStatus === RootErrored\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError(error: CapturedValue<mixed>) {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    throw new Error(\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootInProgress;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(current, completedWork, subtreeRenderLanes);\n\n      // Because this fiber did not complete, don't reset its lanes.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      } else {\n        // We've unwound all the way to the root.\n        workInProgressRootExitStatus = RootDidNotComplete;\n        workInProgress = null;\n        return;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(\n  root: FiberRoot,\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\n  transitions: Array<Transition> | null,\n) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  const previousUpdateLanePriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(\n      root,\n      recoverableErrors,\n      transitions,\n      previousUpdateLanePriority,\n    );\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(\n  root: FiberRoot,\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\n  transitions: Array<Transition> | null,\n  renderPriorityLevel: EventPriority,\n) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    if (__DEV__) {\n      if (lanes === NoLanes) {\n        console.error(\n          'root.finishedLanes should not be empty during a commit. This is a ' +\n            'bug in React.',\n        );\n      }\n    }\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (finishedWork === root.current) {\n    throw new Error(\n      'Cannot commit the same tree as before. This error is likely caused by ' +\n        'a bug in React. Please file an issue.',\n    );\n  }\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n  root.callbackPriority = NoLane;\n\n  // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n  if (\n    (finishedWork.subtreeFlags & PassiveMask) !== NoFlags ||\n    (finishedWork.flags & PassiveMask) !== NoFlags\n  ) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      pendingPassiveEffectsRemainingLanes = remainingLanes;\n      // workInProgressTransitions might be overwritten, so we want\n      // to store it in pendingPassiveTransitions until they get processed\n      // We need to pass this through as an argument to commitRoot\n      // because workInProgressTransitions might have changed between\n      // the previous render and commit if we throttle the commit\n      // with setTimeout\n      pendingPassiveTransitions = transitions;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n        return null;\n      });\n    }\n  }\n\n  // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n  const subtreeHasEffects =\n    (finishedWork.subtreeFlags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n  const rootHasEffect =\n    (finishedWork.flags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = null;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    const shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(\n      root,\n      finishedWork,\n    );\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      // Track the root here, rather than in commitLayoutEffects(), because of ref setters.\n      // Updates scheduled during ref detachment should also be flagged.\n      rootCommittingMutationOrLayoutEffects = root;\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    commitMutationEffects(root, finishedWork, lanes);\n\n    if (enableCreateEventHandleAPI) {\n      if (shouldFireAfterActiveInstanceBlur) {\n        afterActiveInstanceBlur();\n      }\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStarted(lanes);\n      }\n    }\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStarted(lanes);\n    }\n    commitLayoutEffects(finishedWork, root, lanes);\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStopped();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      rootCommittingMutationOrLayoutEffects = null;\n    }\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    executionContext = prevExecutionContext;\n\n    // Reset the priority to the previous non-sync value.\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  } else {\n    // There were no passive effects, so we can immediately release the cache\n    // pool for this render.\n    releaseRootPooledCache(root, remainingLanes);\n    if (__DEV__) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n    }\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (recoverableErrors !== null) {\n    // There were errors during this render, but recovered from them without\n    // needing to surface it to the UI. We log them here.\n    const onRecoverableError = root.onRecoverableError;\n    for (let i = 0; i < recoverableErrors.length; i++) {\n      const recoverableError = recoverableErrors[i];\n      const componentStack = recoverableError.stack;\n      const digest = recoverableError.digest;\n      onRecoverableError(recoverableError.value, {componentStack, digest});\n    }\n  }\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n  if (\n    includesSomeLane(pendingPassiveEffectsLanes, SyncLane) &&\n    root.tag !== LegacyRoot\n  ) {\n    flushPassiveEffects();\n  }\n\n  // Read this again, since a passive effect might have updated it\n  remainingLanes = root.pendingLanes;\n  if (includesSomeLane(remainingLanes, (SyncLane: Lane))) {\n    if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n      markNestedUpdateScheduled();\n    }\n\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbacks();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction releaseRootPooledCache(root: FiberRoot, remainingLanes: Lanes) {\n  if (enableCache) {\n    const pooledCacheLanes = (root.pooledCacheLanes &= remainingLanes);\n    if (pooledCacheLanes === NoLanes) {\n      // None of the remaining work relies on the cache pool. Clear it so\n      // subsequent requests get a new cache\n      const pooledCache = root.pooledCache;\n      if (pooledCache != null) {\n        root.pooledCache = null;\n        releaseCache(pooledCache);\n      }\n    }\n  }\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    // Cache the root since rootWithPendingPassiveEffects is cleared in\n    // flushPassiveEffectsImpl\n    const root = rootWithPendingPassiveEffects;\n    // Cache and clear the remaining lanes flag; it must be reset since this\n    // method can be called from various places, not always from commitRoot\n    // where the remaining lanes are known\n    const remainingLanes = pendingPassiveEffectsRemainingLanes;\n    pendingPassiveEffectsRemainingLanes = NoLanes;\n\n    const renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    const priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    const previousPriority = getCurrentUpdatePriority();\n\n    try {\n      ReactCurrentBatchConfig.transition = null;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig.transition = prevTransition;\n\n      // Once passive effects have run for the tree - giving components a\n      // chance to retain cache instances they use - release the pooled\n      // cache at the root (if there is one)\n      releaseRootPooledCache(root, remainingLanes);\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  // Cache and clear the transitions flag\n  const transitions = pendingPassiveTransitions;\n  pendingPassiveTransitions = null;\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Cannot flush passive effects while already rendering.');\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = true;\n    didScheduleUpdateDuringPassiveEffects = false;\n\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current, lanes, transitions);\n\n  // TODO: Move to commitPassiveMountEffects\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbacks();\n\n  if (enableTransitionTracing) {\n    const prevPendingTransitionCallbacks = currentPendingTransitionCallbacks;\n    const prevRootTransitionCallbacks = root.transitionCallbacks;\n    if (\n      prevPendingTransitionCallbacks !== null &&\n      prevRootTransitionCallbacks !== null\n    ) {\n      // TODO(luna) Refactor this code into the Host Config\n      // TODO(luna) The end time here is not necessarily accurate\n      // because passive effects could be called before paint\n      // (synchronously) or after paint (normally). We need\n      // to come up with a way to get the correct end time for both cases.\n      // One solution is in the host config, if the passive effects\n      // have not yet been run, make a call to flush the passive effects\n      // right after paint.\n      const endTime = now();\n      currentPendingTransitionCallbacks = null;\n\n      scheduleCallback(IdleSchedulerPriority, () =>\n        processTransitionCallbacks(\n          prevPendingTransitionCallbacks,\n          endTime,\n          prevRootTransitionCallbacks,\n        ),\n      );\n    }\n  }\n\n  if (__DEV__) {\n    // If additional passive effects were scheduled, increment a counter. If this\n    // exceeds the limit, we'll fire a warning.\n    if (didScheduleUpdateDuringPassiveEffects) {\n      if (root === rootWithPassiveNestedUpdates) {\n        nestedPassiveUpdateCount++;\n      } else {\n        nestedPassiveUpdateCount = 0;\n        rootWithPassiveNestedUpdates = root;\n      }\n    } else {\n      nestedPassiveUpdateCount = 0;\n    }\n    isFlushingPassiveEffects = false;\n    didScheduleUpdateDuringPassiveEffects = false;\n  }\n\n  // TODO: Move to commitPassiveMountEffects\n  onPostCommitRootDevTools(root);\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  const root = enqueueUpdate(rootFiber, update, (SyncLane: Lane));\n  const eventTime = requestEventTime();\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function captureCommitPhaseError(\n  sourceFiber: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  error: mixed,\n) {\n  if (__DEV__) {\n    reportUncaughtErrorInDEV(error);\n    setIsRunningInsertionEffect(false);\n  }\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = null;\n  if (skipUnmountedBoundaries) {\n    fiber = nearestMountedAncestor;\n  } else {\n    fiber = sourceFiber.return;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        const root = enqueueUpdate(fiber, update, (SyncLane: Lane));\n        const eventTime = requestEventTime();\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n\n  if (__DEV__) {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    console.error(\n      'Internal React error: Attempted to capture a commit phase error ' +\n        'inside a detached tree. This indicates a bug in React. Likely ' +\n        'causes include deleting the same fiber more than once, committing an ' +\n        'already-finished tree, or an inconsistent return pointer.\\n\\n' +\n        'Error message:\\n\\n%s',\n      error,\n    );\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  switch (boundaryFiber.tag) {\n    case SuspenseComponent:\n      retryCache = boundaryFiber.stateNode;\n      const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n      break;\n    case SuspenseListComponent:\n      retryCache = boundaryFiber.stateNode;\n      break;\n    default:\n      throw new Error(\n        'Pinged unknown suspense boundary type. ' +\n          'This is probably a bug in React.',\n      );\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n\n    throw new Error(\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(\n  fiber: Fiber,\n  hasPassiveEffects: boolean,\n) {\n  if (__DEV__ && enableStrictEffects) {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n\n    setCurrentDebugFiberInDEV(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(\n        fiber,\n        MountPassiveDev,\n        invokePassiveEffectUnmountInDEV,\n      );\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction invokeEffectsInDev(\n  firstChild: Fiber,\n  fiberFlags: Flags,\n  invokeEffectFn: (fiber: Fiber) => void,\n): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n\n    let current = firstChild;\n    let subtreeRoot = null;\n    while (current !== null) {\n      const primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n      if (\n        current !== subtreeRoot &&\n        current.child !== null &&\n        primarySubtreeFlag !== NoFlags\n      ) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nexport function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber: Fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        didSuspendOrErrorWhileHydratingDEV() ||\n        (originalError !== null &&\n          typeof originalError === 'object' &&\n          typeof originalError.then === 'function')\n      ) {\n        // Don't replay promises.\n        // Don't replay errors if we are hydrating and have already suspended or handled an error\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(current, unitOfWork, workInProgressRootRenderLanes);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        if (\n          typeof replayError === 'object' &&\n          replayError !== null &&\n          replayError._suppressLogging &&\n          typeof originalError === 'object' &&\n          originalError !== null &&\n          !originalError._suppressLogging\n        ) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      }\n      // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n      throw originalError;\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentNameFromFiber(fiber) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport function restorePendingUpdaters(root: FiberRoot, lanes: Lanes): void {\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      const memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(schedulingFiber => {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      });\n\n      // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\n\nconst fakeActCallbackNode = {};\nfunction scheduleCallback(priorityLevel, callback) {\n  if (__DEV__) {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    const actQueue = ReactCurrentActQueue.current;\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return Scheduler_scheduleCallback(priorityLevel, callback);\n    }\n  } else {\n    // In production, always call Scheduler. This function will be stripped out.\n    return Scheduler_scheduleCallback(priorityLevel, callback);\n  }\n}\n\nfunction cancelCallback(callbackNode) {\n  if (__DEV__ && callbackNode === fakeActCallbackNode) {\n    return;\n  }\n  // In production, always call Scheduler. This function will be stripped out.\n  return Scheduler_cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && ReactCurrentActQueue.current !== null;\n}\n\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (fiber.mode & ConcurrentMode) {\n      if (!isConcurrentActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n    } else {\n      // Legacy mode has additional cases where we suppress a warning.\n      if (!isLegacyActEnvironment(fiber)) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n      if (executionContext !== NoContext) {\n        // Legacy mode doesn't warn if the update is batched, i.e.\n        // batchedUpdates or flushSync.\n        return;\n      }\n      if (\n        fiber.tag !== FunctionComponent &&\n        fiber.tag !== ForwardRef &&\n        fiber.tag !== SimpleMemoComponent\n      ) {\n        // For backwards compatibility with pre-hooks code, legacy mode only\n        // warns for updates that originate from a hook.\n        return;\n      }\n    }\n\n    if (ReactCurrentActQueue.current === null) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentNameFromFiber(fiber),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root: FiberRoot): void {\n  if (__DEV__) {\n    if (\n      root.tag !== LegacyRoot &&\n      isConcurrentActEnvironment() &&\n      ReactCurrentActQueue.current === null\n    ) {\n      console.error(\n        'A suspended resource finished loading inside a test, but the event ' +\n          'was not wrapped in act(...).\\n\\n' +\n          'When testing, code that resolves suspended data should be wrapped ' +\n          'into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* finish loading suspended data */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n      );\n    }\n  }\n}\n\nexport function setIsRunningInsertionEffect(isRunning: boolean): void {\n  if (__DEV__) {\n    isRunningInsertionEffect = isRunning;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactFragment, ReactPortal, ReactScope} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {\n  OffscreenProps,\n  OffscreenInstance,\n} from './ReactFiberOffscreenComponent';\n\nimport {\n  createRootStrictEffectsByDefault,\n  enableCache,\n  enableStrictEffects,\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableLegacyHidden,\n  enableSyncDefaultUpdates,\n  allowConcurrentByDefault,\n  enableTransitionTracing,\n  enableDebugTracing,\n} from 'shared/ReactFeatureFlags';\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  ConcurrentUpdatesByDefaultMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effects are no longer valid.\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement;\n\n  // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(\n  tag: RootTag,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      if (enableStrictEffects) {\n        mode |= StrictEffectsMode;\n      }\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n    if (\n      // We only use this flag for our repo tests to check both behaviors.\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n      !enableSyncDefaultUpdates ||\n      // Only for internal experiments.\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\n    ) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        if (enableLegacyHidden) {\n          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_TRACING_MARKER_TYPE:\n        if (enableTransitionTracing) {\n          return createFiberFromTracingMarker(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        if (enableDebugTracing) {\n          fiberTag = Mode;\n          mode |= DebugTracingMode;\n          break;\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n\n        throw new Error(\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            `but got: ${type == null ? type : typeof type}.${info}`,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error(\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n        typeof pendingProps.id,\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  const primaryChildInstance: OffscreenInstance = {\n    isHidden: false,\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromCache(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromTracingMarker(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(TracingMarkerComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_TRACING_MARKER_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {\n  FiberRoot,\n  SuspenseHydrationCallbacks,\n  TransitionTracingCallbacks,\n} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {\n  PendingSuspenseBoundaries,\n  Transition,\n} from './ReactFiberTracingMarkerComponent.old';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLane,\n  NoLanes,\n  NoTimestamp,\n  TotalLanes,\n  createLaneMap,\n} from './ReactFiberLane.old';\nimport {\n  enableSuspenseCallback,\n  enableCache,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableUpdaterTracking,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {initializeUpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport {LegacyRoot, ConcurrentRoot} from './ReactRootTags';\nimport {createCache, retainCache} from './ReactFiberCacheComponent.old';\n\nexport type RootState = {\n  element: any,\n  isDehydrated: boolean,\n  cache: Cache,\n  pendingSuspenseBoundaries: PendingSuspenseBoundaries | null,\n  transitions: Set<Transition> | null,\n};\n\nfunction FiberRootNode(\n  containerInfo,\n  tag,\n  hydrate,\n  identifierPrefix,\n  onRecoverableError,\n) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  this.identifierPrefix = identifierPrefix;\n  this.onRecoverableError = onRecoverableError;\n\n  if (enableCache) {\n    this.pooledCache = null;\n    this.pooledCacheLanes = NoLanes;\n  }\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (enableTransitionTracing) {\n    this.transitionCallbacks = null;\n    const transitionLanesMap = (this.transitionLanes = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      transitionLanesMap.push(null);\n    }\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  if (enableUpdaterTracking) {\n    this.memoizedUpdaters = new Set();\n    const pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  initialChildren: ReactNodeList,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  // TODO: We have several of these arguments that are conceptually part of the\n  // host config, but because they are passed in at runtime, we have to thread\n  // them through the root constructor. Perhaps we should put them all into a\n  // single type, like a DynamicHostConfig that is defined by the renderer.\n  identifierPrefix: string,\n  onRecoverableError: null | ((error: mixed) => void),\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(\n    containerInfo,\n    tag,\n    hydrate,\n    identifierPrefix,\n    onRecoverableError,\n  ): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  if (enableTransitionTracing) {\n    root.transitionCallbacks = transitionCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(\n    tag,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  if (enableCache) {\n    const initialCache = createCache();\n    retainCache(initialCache);\n\n    // The pooledCache is a fresh cache instance that is used temporarily\n    // for newly mounted boundaries during a render. In general, the\n    // pooledCache is always cleared from the root at the end of a render:\n    // it is either released when render commits, or moved to an Offscreen\n    // component if rendering suspends. Because the lifetime of the pooled\n    // cache is distinct from the main memoizedState.cache, it must be\n    // retained separately.\n    root.pooledCache = initialCache;\n    retainCache(initialCache);\n    const initialState: RootState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: initialCache,\n      transitions: null,\n      pendingSuspenseBoundaries: null,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  } else {\n    const initialState: RootState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: (null: any), // not enabled yet\n      transitions: null,\n      pendingSuspenseBoundaries: null,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\n//\n// TODO: 18.0.0 has not been released to NPM;\n// It exists as a placeholder so that DevTools can support work tag changes between releases.\n// When we next publish a release, update the matching TODO in backend/renderer.js\n// TODO: This module is used both by the release scripts and to expose a version\n// at runtime. We should instead inject the version number as part of the build\n// process, and use the ReactVersions.js module as the single source of truth.\nexport default '18.1.0';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Fiber,\n  SuspenseHydrationCallbacks,\n  TransitionTracingCallbacks,\n} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport isArray from 'shared/isArray';\nimport {enableSchedulingProfiler} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {\n  injectInternals,\n  markRenderScheduled,\n  onScheduleRoot,\n} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  scheduleInitialHydrationOnRoot,\n  flushRoot,\n  batchedUpdates,\n  flushSync,\n  isAlreadyRendering,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n} from './ReactFiberLane.old';\nimport {\n  getCurrentUpdatePriority,\n  runWithPriority,\n} from './ReactEventPriorities.old';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport ReactVersion from 'shared/ReactVersion';\nexport {registerMutableSourceForHydration} from './ReactMutableSource.old';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPseudoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      throw new Error('Unable to find node on an unmounted component.');\n    } else {\n      const keys = Object.keys(component).join(',');\n      throw new Error(\n        `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        throw new Error('Unable to find node on an unmounted component.');\n      } else {\n        const keys = Object.keys(component).join(',');\n        throw new Error(\n          `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictLegacyMode) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictLegacyMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  identifierPrefix: string,\n  onRecoverableError: (error: mixed) => void,\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): OpaqueRoot {\n  const hydrate = false;\n  const initialChildren = null;\n  return createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onRecoverableError,\n    transitionCallbacks,\n  );\n}\n\nexport function createHydrationContainer(\n  initialChildren: ReactNodeList,\n  // TODO: Remove `callback` when we delete legacy mode.\n  callback: ?Function,\n  containerInfo: Container,\n  tag: RootTag,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  identifierPrefix: string,\n  onRecoverableError: (error: mixed) => void,\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): OpaqueRoot {\n  const hydrate = true;\n  const root = createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onRecoverableError,\n    transitionCallbacks,\n  );\n\n  // TODO: Move this to FiberRoot constructor\n  root.context = getContextForSubtree(null);\n\n  // Schedule the initial render. In a hydration root, this is different from\n  // a regular update because the initial render must match was was rendered\n  // on the server.\n  // NOTE: This update intentionally doesn't have a payload. We're only using\n  // the update to schedule work on the root fiber (and, for legacy roots, to\n  // enqueue the callback if one is provided).\n  const current = root.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n  const update = createUpdate(eventTime, lane);\n  update.callback =\n    callback !== undefined && callback !== null ? callback : null;\n  enqueueUpdate(current, update, lane);\n  scheduleInitialHydrationOnRoot(root, lane, eventTime);\n\n  return root;\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentNameFromFiber(ReactCurrentFiberCurrent) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  const root = enqueueUpdate(current, update, lane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, current, lane, eventTime);\n    entangleTransitions(root, current, lane);\n  }\n\n  return lane;\n}\n\nexport {\n  batchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushControlled,\n  flushSync,\n  isAlreadyRendering,\n  flushPassiveEffects,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot: {\n      const root: FiberRoot = fiber.stateNode;\n      if (isRootDehydrated(root)) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      flushSync(() => {\n        const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          const eventTime = requestEventTime();\n          scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n        }\n      });\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = SyncLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n    }\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thenables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptDiscreteHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const lane = SyncLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const lane = SelectiveHydrationLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const lane = requestUpdateLane(fiber);\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport {getCurrentUpdatePriority, runWithPriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldErrorImpl = fiber => null;\n\nexport function shouldError(fiber: Fiber): ?boolean {\n  return shouldErrorImpl(fiber);\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setErrorHandler = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  setErrorHandler = (newShouldErrorImpl: Fiber => ?boolean) => {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setErrorHandler,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion,\n  });\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {FiberRoot} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance, TextInstance} from './ReactTestHostConfig';\n\nimport * as React from 'react';\nimport * as Scheduler from 'scheduler/unstable_mock';\nimport {\n  getPublicRootInstance,\n  createContainer,\n  updateContainer,\n  flushSync,\n  injectIntoDevTools,\n  batchedUpdates,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport {findCurrentFiberUsingSlowPath} from 'react-reconciler/src/ReactFiberTreeReflection';\nimport {\n  Fragment,\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  HostPortal,\n  HostText,\n  HostRoot,\n  ContextConsumer,\n  ContextProvider,\n  Mode,\n  ForwardRef,\n  Profiler,\n  MemoComponent,\n  SimpleMemoComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport isArray from 'shared/isArray';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactVersion from 'shared/ReactVersion';\nimport {checkPropStringCoercion} from 'shared/CheckStringCoercion';\n\nimport {getPublicInstance} from './ReactTestHostConfig';\nimport {ConcurrentRoot, LegacyRoot} from 'react-reconciler/src/ReactRootTags';\nimport {allowConcurrentByDefault} from 'shared/ReactFeatureFlags';\n\nconst act = React.unstable_act;\n\n// TODO: Remove from public bundle\n\ntype TestRendererOptions = {\n  createNodeMock: (element: React$Element<any>) => any,\n  unstable_isConcurrent: boolean,\n  unstable_strictMode: boolean,\n  unstable_concurrentUpdatesByDefault: boolean,\n  ...\n};\n\ntype ReactTestRendererJSON = {|\n  type: string,\n  props: {[propName: string]: any, ...},\n  children: null | Array<ReactTestRendererNode>,\n  $$typeof?: Symbol, // Optional because we add it with defineProperty().\n|};\ntype ReactTestRendererNode = ReactTestRendererJSON | string;\n\ntype FindOptions = $Shape<{\n  // performs a \"greedy\" search: if a matching node is found, will continue\n  // to search within the matching node's children. (default: true)\n  deep: boolean,\n  ...\n}>;\n\nexport type Predicate = (node: ReactTestInstance) => ?boolean;\n\nconst defaultTestOptions = {\n  createNodeMock: function() {\n    return null;\n  },\n};\n\nfunction toJSON(inst: Instance | TextInstance): ReactTestRendererNode | null {\n  if (inst.isHidden) {\n    // Omit timed out children from output entirely. This seems like the least\n    // surprising behavior. We could perhaps add a separate API that includes\n    // them, if it turns out people need it.\n    return null;\n  }\n  switch (inst.tag) {\n    case 'TEXT':\n      return inst.text;\n    case 'INSTANCE': {\n      /* eslint-disable no-unused-vars */\n      // We don't include the `children` prop in JSON.\n      // Instead, we will include the actual rendered children.\n      const {children, ...props} = inst.props;\n      /* eslint-enable */\n      let renderedChildren = null;\n      if (inst.children && inst.children.length) {\n        for (let i = 0; i < inst.children.length; i++) {\n          const renderedChild = toJSON(inst.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      const json: ReactTestRendererJSON = {\n        type: inst.type,\n        props: props,\n        children: renderedChildren,\n      };\n      Object.defineProperty(json, '$$typeof', {\n        value: Symbol.for('react.test.json'),\n      });\n      return json;\n    }\n    default:\n      throw new Error(`Unexpected node type in toJSON: ${inst.tag}`);\n  }\n}\n\nfunction childrenToTree(node) {\n  if (!node) {\n    return null;\n  }\n  const children = nodeAndSiblingsArray(node);\n  if (children.length === 0) {\n    return null;\n  } else if (children.length === 1) {\n    return toTree(children[0]);\n  }\n  return flatten(children.map(toTree));\n}\n\nfunction nodeAndSiblingsArray(nodeWithSibling) {\n  const array = [];\n  let node = nodeWithSibling;\n  while (node != null) {\n    array.push(node);\n    node = node.sibling;\n  }\n  return array;\n}\n\nfunction flatten(arr) {\n  const result = [];\n  const stack = [{i: 0, array: arr}];\n  while (stack.length) {\n    const n = stack.pop();\n    while (n.i < n.array.length) {\n      const el = n.array[n.i];\n      n.i += 1;\n      if (isArray(el)) {\n        stack.push(n);\n        stack.push({i: 0, array: el});\n        break;\n      }\n      result.push(el);\n    }\n  }\n  return result;\n}\n\nfunction toTree(node: ?Fiber) {\n  if (node == null) {\n    return null;\n  }\n  switch (node.tag) {\n    case HostRoot:\n      return childrenToTree(node.child);\n    case HostPortal:\n      return childrenToTree(node.child);\n    case ClassComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: node.stateNode,\n        rendered: childrenToTree(node.child),\n      };\n    case FunctionComponent:\n    case SimpleMemoComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null,\n        rendered: childrenToTree(node.child),\n      };\n    case HostComponent: {\n      return {\n        nodeType: 'host',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null, // TODO: use createNodeMock here somehow?\n        rendered: flatten(nodeAndSiblingsArray(node.child).map(toTree)),\n      };\n    }\n    case HostText:\n      return node.stateNode.text;\n    case Fragment:\n    case ContextProvider:\n    case ContextConsumer:\n    case Mode:\n    case Profiler:\n    case ForwardRef:\n    case MemoComponent:\n    case IncompleteClassComponent:\n    case ScopeComponent:\n      return childrenToTree(node.child);\n    default:\n      throw new Error(\n        `toTree() does not yet know how to handle nodes with tag=${node.tag}`,\n      );\n  }\n}\n\nconst validWrapperTypes = new Set([\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  // Normally skipped, but used when there's more than one root child.\n  HostRoot,\n]);\n\nfunction getChildren(parent: Fiber) {\n  const children = [];\n  const startingNode = parent;\n  let node: Fiber = startingNode;\n  if (node.child === null) {\n    return children;\n  }\n  node.child.return = node;\n  node = node.child;\n  outer: while (true) {\n    let descend = false;\n    if (validWrapperTypes.has(node.tag)) {\n      children.push(wrapFiber(node));\n    } else if (node.tag === HostText) {\n      if (__DEV__) {\n        checkPropStringCoercion(node.memoizedProps, 'memoizedProps');\n      }\n      children.push('' + node.memoizedProps);\n    } else {\n      descend = true;\n    }\n    if (descend && node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    while (node.sibling === null) {\n      if (node.return === startingNode) {\n        break outer;\n      }\n      node = (node.return: any);\n    }\n    (node.sibling: any).return = node.return;\n    node = (node.sibling: any);\n  }\n  return children;\n}\n\nclass ReactTestInstance {\n  _fiber: Fiber;\n\n  _currentFiber(): Fiber {\n    // Throws if this component has been unmounted.\n    const fiber = findCurrentFiberUsingSlowPath(this._fiber);\n\n    if (fiber === null) {\n      throw new Error(\n        \"Can't read from currently-mounting component. This error is likely \" +\n          'caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    return fiber;\n  }\n\n  constructor(fiber: Fiber) {\n    if (!validWrapperTypes.has(fiber.tag)) {\n      throw new Error(\n        `Unexpected object passed to ReactTestInstance constructor (tag: ${fiber.tag}). ` +\n          'This is probably a bug in React.',\n      );\n    }\n\n    this._fiber = fiber;\n  }\n\n  get instance() {\n    if (this._fiber.tag === HostComponent) {\n      return getPublicInstance(this._fiber.stateNode);\n    } else {\n      return this._fiber.stateNode;\n    }\n  }\n\n  get type() {\n    return this._fiber.type;\n  }\n\n  get props(): Object {\n    return this._currentFiber().memoizedProps;\n  }\n\n  get parent(): ?ReactTestInstance {\n    let parent = this._fiber.return;\n    while (parent !== null) {\n      if (validWrapperTypes.has(parent.tag)) {\n        if (parent.tag === HostRoot) {\n          // Special case: we only \"materialize\" instances for roots\n          // if they have more than a single child. So we'll check that now.\n          if (getChildren(parent).length < 2) {\n            return null;\n          }\n        }\n        return wrapFiber(parent);\n      }\n      parent = parent.return;\n    }\n    return null;\n  }\n\n  get children(): Array<ReactTestInstance | string> {\n    return getChildren(this._currentFiber());\n  }\n\n  // Custom search functions\n  find(predicate: Predicate): ReactTestInstance {\n    return expectOne(\n      this.findAll(predicate, {deep: false}),\n      `matching custom predicate: ${predicate.toString()}`,\n    );\n  }\n\n  findByType(type: any): ReactTestInstance {\n    return expectOne(\n      this.findAllByType(type, {deep: false}),\n      `with node type: \"${getComponentNameFromType(type) || 'Unknown'}\"`,\n    );\n  }\n\n  findByProps(props: Object): ReactTestInstance {\n    return expectOne(\n      this.findAllByProps(props, {deep: false}),\n      `with props: ${JSON.stringify(props)}`,\n    );\n  }\n\n  findAll(\n    predicate: Predicate,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, predicate, options);\n  }\n\n  findAllByType(\n    type: any,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, node => node.type === type, options);\n  }\n\n  findAllByProps(\n    props: Object,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(\n      this,\n      node => node.props && propsMatch(node.props, props),\n      options,\n    );\n  }\n}\n\nfunction findAll(\n  root: ReactTestInstance,\n  predicate: Predicate,\n  options: ?FindOptions,\n): Array<ReactTestInstance> {\n  const deep = options ? options.deep : true;\n  const results = [];\n\n  if (predicate(root)) {\n    results.push(root);\n    if (!deep) {\n      return results;\n    }\n  }\n\n  root.children.forEach(child => {\n    if (typeof child === 'string') {\n      return;\n    }\n    results.push(...findAll(child, predicate, options));\n  });\n\n  return results;\n}\n\nfunction expectOne(\n  all: Array<ReactTestInstance>,\n  message: string,\n): ReactTestInstance {\n  if (all.length === 1) {\n    return all[0];\n  }\n\n  const prefix =\n    all.length === 0\n      ? 'No instances found '\n      : `Expected 1 but found ${all.length} instances `;\n\n  throw new Error(prefix + message);\n}\n\nfunction propsMatch(props: Object, filter: Object): boolean {\n  for (const key in filter) {\n    if (props[key] !== filter[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction onRecoverableError(error) {\n  // TODO: Expose onRecoverableError option to userspace\n  // eslint-disable-next-line react-internal/no-production-logging, react-internal/warning-args\n  console.error(error);\n}\n\nfunction create(element: React$Element<any>, options: TestRendererOptions) {\n  let createNodeMock = defaultTestOptions.createNodeMock;\n  let isConcurrent = false;\n  let isStrictMode = false;\n  let concurrentUpdatesByDefault = null;\n  if (typeof options === 'object' && options !== null) {\n    if (typeof options.createNodeMock === 'function') {\n      createNodeMock = options.createNodeMock;\n    }\n    if (options.unstable_isConcurrent === true) {\n      isConcurrent = true;\n    }\n    if (options.unstable_strictMode === true) {\n      isStrictMode = true;\n    }\n    if (allowConcurrentByDefault) {\n      if (options.unstable_concurrentUpdatesByDefault !== undefined) {\n        concurrentUpdatesByDefault =\n          options.unstable_concurrentUpdatesByDefault;\n      }\n    }\n  }\n  let container = {\n    children: [],\n    createNodeMock,\n    tag: 'CONTAINER',\n  };\n  let root: FiberRoot | null = createContainer(\n    container,\n    isConcurrent ? ConcurrentRoot : LegacyRoot,\n    null,\n    isStrictMode,\n    concurrentUpdatesByDefault,\n    '',\n    onRecoverableError,\n    null,\n  );\n\n  if (root == null) {\n    throw new Error('something went wrong');\n  }\n\n  updateContainer(element, root, null, null);\n\n  const entry = {\n    _Scheduler: Scheduler,\n\n    root: undefined, // makes flow happy\n    // we define a 'getter' for 'root' below using 'Object.defineProperty'\n    toJSON(): Array<ReactTestRendererNode> | ReactTestRendererNode | null {\n      if (root == null || root.current == null || container == null) {\n        return null;\n      }\n      if (container.children.length === 0) {\n        return null;\n      }\n      if (container.children.length === 1) {\n        return toJSON(container.children[0]);\n      }\n      if (\n        container.children.length === 2 &&\n        container.children[0].isHidden === true &&\n        container.children[1].isHidden === false\n      ) {\n        // Omit timed out children from output entirely, including the fact that we\n        // temporarily wrap fallback and timed out children in an array.\n        return toJSON(container.children[1]);\n      }\n      let renderedChildren = null;\n      if (container.children && container.children.length) {\n        for (let i = 0; i < container.children.length; i++) {\n          const renderedChild = toJSON(container.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      return renderedChildren;\n    },\n    toTree() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return toTree(root.current);\n    },\n    update(newElement: React$Element<any>) {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(newElement, root, null, null);\n    },\n    unmount() {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(null, root, null, null);\n      container = null;\n      root = null;\n    },\n    getInstance() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return getPublicRootInstance(root);\n    },\n\n    unstable_flushSync: flushSync,\n  };\n\n  Object.defineProperty(\n    entry,\n    'root',\n    ({\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (root === null) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        }\n        const children = getChildren(root.current);\n        if (children.length === 0) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        } else if (children.length === 1) {\n          // Normally, we skip the root and just give you the child.\n          return children[0];\n        } else {\n          // However, we give you the root if there's more than one root child.\n          // We could make this the behavior for all cases but it would be a breaking change.\n          return wrapFiber(root.current);\n        }\n      },\n    }: Object),\n  );\n\n  return entry;\n}\n\nconst fiberToWrapper = new WeakMap();\nfunction wrapFiber(fiber: Fiber): ReactTestInstance {\n  let wrapper = fiberToWrapper.get(fiber);\n  if (wrapper === undefined && fiber.alternate !== null) {\n    wrapper = fiberToWrapper.get(fiber.alternate);\n  }\n  if (wrapper === undefined) {\n    wrapper = new ReactTestInstance(fiber);\n    fiberToWrapper.set(fiber, wrapper);\n  }\n  return wrapper;\n}\n\n// Enable ReactTestRenderer to be used to test DevTools integration.\ninjectIntoDevTools({\n  findFiberByHostInstance: (() => {\n    throw new Error('TestRenderer does not support findFiberByHostInstance()');\n  }: any),\n  bundleType: __DEV__ ? 1 : 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-test-renderer',\n});\n\nexport {\n  Scheduler as _Scheduler,\n  create,\n  /* eslint-disable-next-line camelcase */\n  batchedUpdates as unstable_batchedUpdates,\n  act,\n};\n"],"names":["assign","Object","get","key","_reactInternals","set","value","ReactSharedInternals","React","enableSchedulingProfiler","enableProfilerTimer","__PROFILE__","enableProfilerCommitHooks","enableNewReconciler","enableSuspenseAvoidThisFallback","enableLazyContextPropagation","enableLegacyHidden","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","name","getContextName","type","getComponentNameFromType","$$typeof","context","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","getComponentNameFromFiber","fiber","tag","NoFlags","PerformedWork","Placement","Update","ChildDeletion","ContentReset","Callback","DidCapture","ForceClientRender","Ref","Snapshot","Passive","Hydrating","Visibility","StoreConsistency","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","PassiveStatic","BeforeMutationMask","enableCreateEventHandleAPI","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","getInstance","assertIsMounted","Error","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","stateNode","current","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","isArrayImpl","Array","isArray","scheduleCallback","Scheduler","cancelCallback","shouldYield","requestPaint","now","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","rendererID","injectedHook","injectInternals","internals","__REACT_DEVTOOLS_GLOBAL_HOOK__","hook","isDisabled","supportsFiber","getLaneLabelMap","injectProfilingHooks","inject","err","checkDCE","onCommitRoot","root","eventPriority","onCommitFiberRoot","didError","schedulerPriority","DiscreteEventPriority","ImmediateSchedulerPriority","ContinuousEventPriority","UserBlockingSchedulerPriority","DefaultEventPriority","NormalSchedulerPriority","IdleEventPriority","IdleSchedulerPriority","undefined","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","profilingHooks","injectedProfilingHooks","markComponentRenderStopped","markComponentErrored","thrownValue","lanes","markComponentSuspended","wakeable","NoMode","ConcurrentMode","ProfileMode","StrictLegacyMode","ConcurrentUpdatesByDefaultMode","clz32","Math","clz32Fallback","log","LN2","asUint","TotalLanes","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","getHighestPriorityLane","getNextLanes","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","allowConcurrentByDefault","mode","entangledLanes","entanglements","index","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyNonUrgentLanes","UrgentLanes","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","createLaneMap","initial","laneMap","i","push","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootFinished","remainingLanes","noLongerPendingLanes","mutableReadLanes","markRootEntangled","rootEntangledLanes","getBumpedLaneForHydration","renderLanes","renderLane","getTransitionsForLanes","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","shim","isSuspenseInstancePending","isSuspenseInstanceFallback","getSuspenseInstanceFallbackErrorDetails","registerSuspenseInstanceRetry","hydrateTextInstance","clearSuspenseBoundary","clearSuspenseBoundaryFromContainer","NO_CONTEXT","UPDATE_SIGNAL","nodeToInstanceMap","WeakMap","getPublicInstance","inst","createNodeMock","rootContainerInstance","mockNode","props","appendChild","parentInstance","children","indexOf","splice","insertBefore","beforeChild","beforeIndex","removeChild","clearContainer","container","getRootHostContext","getChildHostContext","parentHostContext","prepareForCommit","containerInfo","resetAfterCommit","createInstance","hostContext","internalInstanceHandle","isHidden","appendInitialChild","prepareUpdate","testElement","oldProps","newProps","shouldSetTextContent","createTextInstance","text","getCurrentEventPriority","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","commitUpdate","instance","updatePayload","commitTextUpdate","textInstance","oldText","newText","resetTextContent","appendChildToContainer","insertInContainerBefore","removeChildFromContainer","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","preparePortalMount","portalInstance","ReactCurrentDispatcher","describeBuiltInComponentFrame","source","ownerFn","ownerName","describeComponentFrame","sourceInfo","describeClassComponentFrame","ctor","describeFunctionComponentFrame","fn","hasOwnProperty","prototype","ReactDebugCurrentFrame","valueStack","createCursor","defaultValue","pop","cursor","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","Component","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","is","y","objectIs","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","callback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","length","error","slice","isRootDehydrated","currentState","memoizedState","isDehydrated","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","popTreeContext","isHydrating","hydrationErrors","reenterHydrationStateFromDehydratedSuspenseInstance","suspenseInstance","treeContext","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","shouldUpdate","prepareToHydrateHostSuspenseInstance","popHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","getIsHydrating","queueHydrationError","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","shallowEqual","objA","objB","keysA","keys","keysB","currentKey","call","describeFiber","__DEV__","getStackByFiberInDevAndProd","info","message","stack","resetCurrentFiber","resolveDefaultProps","baseProps","defaultProps","propName","valueCursor","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","resetContextDependencies","pushProvider","providerFiber","nextValue","_currentValue2","popProvider","currentValue","scheduleContextWorkOnParentPath","propagationRoot","childLanes","propagateContextChange","propagateContextChange_eager","nextFiber","list","dependencies","dependency","firstContext","update","createUpdate","ForceUpdate","updateQueue","sharedQueue","shared","pending","next","parentSuspense","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","isPrimaryRenderer","contextItem","memoizedValue","concurrentQueues","pushConcurrentUpdateQueue","finishQueueingConcurrentUpdates","lastInterleavedUpdate","interleaved","firstInterleavedUpdate","lastPendingUpdate","firstPendingUpdate","enqueueConcurrentHookUpdate","markUpdateLaneFromFiberToRoot","enqueueConcurrentHookUpdateAndEagerlyBailout","enqueueConcurrentClassUpdate","enqueueConcurrentRenderForLane","unsafe_markUpdateLaneFromFiberToRoot","sourceFiber","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","effects","cloneUpdateQueue","currentQueue","clone","enqueueUpdate","isUnsafeClassRenderPhaseUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","lastInterleaved","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","emptyRefsObject","refs","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","isPureReactComponent","adoptClassInstance","updater","setInstance","constructClassInstance","isLegacyContextConsumer","contextType","state","callComponentWillMount","componentWillMount","UNSAFE_componentWillMount","callComponentWillReceiveProps","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","mountClassInstance","getSnapshotBeforeUpdate","componentDidMount","fiberFlags","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","componentDidUpdate","UNSAFE_componentWillUpdate","componentWillUpdate","coerceRef","returnFiber","element","mixedRef","ref","_owner","owner","ownerFiber","resolvedInst","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","toString","join","resolveLazy","lazyType","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","deletions","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","Map","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","existing","updateElement","updateFragment","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","forEach","reconcileChildrenIterator","newChildrenIterable","iteratorFn","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","c","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","dehydrated","findFirstSuspended","row","revealOrder","didSuspend","HasEffect","Insertion","Layout","workInProgressSources","resetWorkInProgressVersions","mutableSource","_workInProgressVersionSecondary","AbortControllerLocal","enableCache","AbortController","AbortControllerShim","listeners","signal","aborted","addEventListener","listener","abort","CacheContext","Consumer","Provider","_currentValue","_threadCount","_defaultValue","_globalName","createCache","cache","controller","data","refCount","retainCache","releaseCache","pushCacheProvider","popCacheProvider","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","globalClientIdCounter","RE_RENDER_LIMIT","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","HooksDispatcherOnMount","HooksDispatcherOnUpdate","numberOfReRenders","localIdCounter","HooksDispatcherOnRerender","ContextOnlyDispatcher","didRenderTooFewHooks","bailoutHooks","PassiveEffect","UpdateEffect","resetHooksAfterThrow","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","bind","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","hasEagerState","eagerState","interleavedLane","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountMutableSource","getSnapshot","subscribe","updateMutableSource","mountSyncExternalStore","getServerSnapshot","nextSnapshot","getWorkInProgressRoot","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","HookHasEffect","HookPassive","updateStoreInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","latestGetSnapshot","prevValue","mountState","dispatchSetState","updateState","rerenderState","create","destroy","deps","firstEffect","mountRef","initialValue","updateRef","mountEffectImpl","hookFlags","updateEffectImpl","prevEffect","PassiveStaticEffect","mountInsertionEffect","HookInsertion","updateInsertionEffect","mountLayoutEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","concat","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","updateDeferredValue","resolvedCurrentHook","updateDeferredValueImpl","rerenderDeferredValue","shouldDeferValue","deferredLane","startTransition","setPending","options","previousPriority","prevTransition","currentTransition","mountTransition","isPending","start","updateTransition","rerenderTransition","mountId","identifierPrefix","id","globalClientId","updateId","mountRefresh","refresh","refreshCache","updateRefresh","seedKey","seedValue","refreshUpdate","createLegacyQueueUpdate","enqueueLegacyQueueUpdate","entangleLegacyQueueTransitions","seededCache","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","entangleTransitionUpdate","getCacheSignal","getCacheForType","resourceType","cacheForType","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","useCacheRefresh","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","recordLayoutEffectDuration","startLayoutEffectTimer","createCapturedValueAtFiber","digest","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","console","componentName","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","e","PossiblyWeakMap","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","getDerivedStateFromError","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","pingCache","threadIDs","Set","has","add","ping","pingSuspendedRoot","then","attachRetryListener","suspenseBoundary","wakeables","resetSuspendedComponent","rootRenderLanes","currentSource","getNearestSuspenseBoundaryToCapture","markSuspenseBoundaryShouldCapture","currentSourceFiber","throwException","renderDidSuspendDelayIfPossible","uncaughtSuspenseError","renderDidError","isAlreadyFailedLegacyErrorBoundary","resumedCache","peekCacheFromPool","cacheResumedFromPreviousRender","cacheFromRootCachePool","pooledCache","requestCacheFromPool","cacheFromPool","freshCache","pooledCacheLanes","pushTransition","offscreenWorkInProgress","prevCachePool","newTransitions","pool","popTransition","getSuspendedCache","getOffscreenDeferredCache","didReceiveUpdate","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","hasId","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","updateSimpleMemoComponent","createFiberFromTypeAndProps","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","prevProps","updateFunctionComponent","updateOffscreenComponent","baseLanes","cachePool","transitions","pushRenderLanes","spawnedCachePool","nextBaseLanes","prevBaseLanes","subtreeRenderLanes","updateCacheComponent","parentCache","derivedState","nextCache","updateMode","updateProfiler","markRef","updateClassComponent","hasContext","isLegacyContextProvider","pushLegacyContextProvider","resetSuspendedCurrentOnMountInLegacyMode","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","pushRootTransition","updateHostComponent","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","hint","mountIncompleteClassComponent","mountIndeterminateComponent","SUSPENDED_MARKER","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseContext","suspenseState","getRemainingWorkInPrimaryTree","updateSuspenseComponent","showFallback","mountDehydratedSuspenseComponent","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","mountSuspensePrimaryChildren","updateDehydratedSuspenseComponent","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","subtreeFlags","retrySuspenseComponentWithoutHydrating","recoverableError","mountSuspenseFallbackAfterRetryWithoutHydrating","fiberMode","capturedValue","attemptHydrationAtLane","retry","retryDehydratedSuspenseBoundary","scheduleSuspenseWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","initSuspenseListRenderState","isBackwards","tail","tailMode","renderState","rendering","renderingStartTime","last","updateSuspenseListComponent","validateRevealOrder","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","updateContextProvider","providerType","newValue","oldValue","hasLegacyContextChanged","updateContextConsumer","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","primaryChildLanes","hasChildWork","beginWork","unresolvedProps","markUpdate","appendAllChildren","updateHostContainer","needsVisibilityToggle","currentHostContext","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","bubbleProperties","completedWork","didBailout","newChildLanes","completeDehydratedSuspenseBoundary","wasHydrated","completeWork","popLegacyContext","fiberRoot","previousCache","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","fallthroughToNormalSuspensePath","nextDidTimeout","prevDidTimeout","offscreenFiber","hasInvisibleChildContext","unstable_avoidThisFallback","renderDidSuspend","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","previousSibling","popRenderLanes","nextIsHidden","prevIsHidden","unwindWork","unwindInterruptedWork","interruptedWork","PossiblyWeakSet","WeakSet","nextEffect","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","nearestMountedAncestor","captureCommitPhaseError","safelyDetachRef","retVal","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","commitBeforeMutationEffects_complete","setCurrentDebugFiberInDEV","commitBeforeMutationEffectsOnFiber","snapshot","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitHookEffectListMount","commitLayoutEffectOnFiber","finishedRoot","committedLanes","commitMount","commitSuspenseHydrationCallbacks","commitAttachRef","hideOrUnhideAllChildren","hostSubtreeRoot","instanceToUse","detachFiberMutation","detachFiberAfterEffects","hostInstance","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","parentFiber","before","insertOrAppendPlacementNode","insertOrAppendPlacementNodeIntoContainer","isHost","hostParent","hostParentIsContainer","commitDeletionEffects","deletedFiber","findParent","commitDeletionEffectsOnFiber","recursivelyTraverseDeletionEffects","prevHostParent","prevHostParentIsContainer","NoHookEffect","commitSuspenseCallback","attachSuspenseRetryListeners","retryCache","resolveRetryWakeable","commitMutationEffects","inProgressLanes","commitMutationEffectsOnFiber","recursivelyTraverseMutationEffects","commitReconciliationEffects","offscreenInstance","wasHidden","markCommitTimeOfFallback","offscreenBoundary","commitLayoutEffects","commitLayoutEffects_begin","subtreeRoot","isModernRoot","commitLayoutMountEffects_complete","commitPassiveMountEffects","committedTransitions","commitPassiveMountEffects_begin","commitPassiveMountEffects_complete","commitPassiveMountOnFiber","commitPassiveUnmountEffects","commitPassiveUnmountEffects_begin","fiberToDelete","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","previousFiber","detachedChild","detachedSibling","commitPassiveUnmountEffects_complete","commitPassiveUnmountOnFiber","resetCurrentDebugFiberInDEV","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","ReactCurrentActQueue","ceil","NoContext","BatchedContext","RenderContext","CommitContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","workInProgressTransitions","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveEffectsRemainingLanes","pendingPassiveTransitions","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","currentEventTime","currentEventTransitionLane","isTransition","eventLane","requestRetryLane","checkForNestedUpdates","deferRenderPhaseUpdateToNextBatch","ensureRootIsScheduled","existingCallbackNode","callbackNode","callbackPriority","newCallbackPriority","existingCallbackPriority","newCallbackNode","performSyncWorkOnRoot","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","disableSchedulerTimeoutInWorkLoop","exitStatus","renderRootConcurrent","renderRootSync","errorRetryLanes","recoverFromConcurrentError","fatalError","prepareFreshStack","renderWasConcurrent","isRenderConsistentWithExternalStores","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","rootWorkInProgress","errorsFromSecondAttempt","errors","apply","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","checks","renderedValue","markRootSuspended_dontCallThisOneDirectly","batchedUpdates","prevExecutionContext","flushSync","pushToStack","popFromStack","workInProgressRootRenderPhaseUpdatedLanes","handleError","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","prevDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","siblingFiber","recoverableErrors","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","subtreeHasEffects","rootHasEffect","releaseRootPooledCache","onCommitRootDevTools","onRecoverableError","renderPriority","priority","flushPassiveEffectsImpl","onPostCommitRootDevTools","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","timeElapsed","originalBeginWork","priorityLevel","Scheduler_scheduleCallback","Scheduler_cancelCallback","FiberNode","createFiber","shouldConstruct","isReactComponent","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromCache","elements","primaryChildInstance","content","pendingChildren","FiberRootNode","hydrate","createFiberRoot","initialChildren","hydrationCallbacks","transitionCallbacks","uninitializedFiber","initialCache","pendingSuspenseBoundaries","getContextForSubtree","parentComponent","createContainer","updateContainer","getPublicRootInstance","containerFiber","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","findHostInstanceByFiber","hostFiber","emptyFindFiberByHostInstance","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","version","rendererPackageName","rendererConfig","currentDispatcherRef","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","ReactVersion","act","defaultTestOptions","toJSON","renderedChildren","renderedChild","json","defineProperty","childrenToTree","nodeAndSiblingsArray","toTree","flatten","map","nodeWithSibling","array","arr","result","n","el","nodeType","rendered","validWrapperTypes","getChildren","startingNode","outer","descend","wrapFiber","ReactTestInstance","_currentFiber","_fiber","find","predicate","expectOne","findAll","deep","findByType","findAllByType","findByProps","findAllByProps","JSON","stringify","propsMatch","results","all","prefix","filter","isConcurrent","concurrentUpdatesByDefault","unstable_isConcurrent","unstable_strictMode","unstable_concurrentUpdatesByDefault","entry","_Scheduler","newElement","unmount","unstable_flushSync","configurable","enumerable","fiberToWrapper","wrapper"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,MAAMA,MAAM,GAAGC,MAAM,CAACD,MAAtB;;ACFA;;;;;;;;;AAmBO,SAASE,GAAT,CAAaC,GAAb,EAAkB;AACvB,SAAOA,GAAG,CAACC,eAAX;AACD;AAED,AAIO,SAASC,GAAT,CAAaF,GAAb,EAAkBG,KAAlB,EAAyB;AAC9BH,EAAAA,GAAG,CAACC,eAAJ,GAAsBE,KAAtB;AACD;;ACzBD,MAAMC,oBAAoB,GACxBC,wDADF;;ACGO,MAAMC,wBAAwB,GAAG,KAAjC;AACP,AAEO,MAAMC,mBAAmB,GAAGC,KAA5B;AACP,AAAO,MAAMC,yBAAyB,GAAGD,KAAlC;AACP,AA4BO,MAAME,mBAAmB,GAAG,KAA5B;AACP,AACO,MAAMC,+BAA+B,GAAG,KAAxC;AACP,AASO,MAAMC,4BAA4B,GAAG,KAArC;AACP,AAAO,MAAMC,kBAAkB,GAAG,KAA3B;;ACvBA,MAAMC,iBAAiB,GAAG,CAA1B;AACP,AAAO,MAAMC,cAAc,GAAG,CAAvB;AACP,AAAO,MAAMC,sBAAsB,GAAG,CAA/B;;AACP,AAAO,MAAMC,QAAQ,GAAG,CAAjB;;AACP,AAAO,MAAMC,UAAU,GAAG,CAAnB;;AACP,AAAO,MAAMC,aAAa,GAAG,CAAtB;AACP,AAAO,MAAMC,QAAQ,GAAG,CAAjB;AACP,AAAO,MAAMC,QAAQ,GAAG,CAAjB;AACP,AAAO,MAAMC,IAAI,GAAG,CAAb;AACP,AAAO,MAAMC,eAAe,GAAG,CAAxB;AACP,AAAO,MAAMC,eAAe,GAAG,EAAxB;AACP,AAAO,MAAMC,UAAU,GAAG,EAAnB;AACP,AAAO,MAAMC,QAAQ,GAAG,EAAjB;AACP,AAAO,MAAMC,iBAAiB,GAAG,EAA1B;AACP,AAAO,MAAMC,aAAa,GAAG,EAAtB;AACP,AAAO,MAAMC,mBAAmB,GAAG,EAA5B;AACP,AAAO,MAAMC,aAAa,GAAG,EAAtB;AACP,AAAO,MAAMC,wBAAwB,GAAG,EAAjC;AACP,AAAO,MAAMC,kBAAkB,GAAG,EAA3B;AACP,AAAO,MAAMC,qBAAqB,GAAG,EAA9B;AACP,AAAO,MAAMC,cAAc,GAAG,EAAvB;AACP,AAAO,MAAMC,kBAAkB,GAAG,EAA3B;AACP,AAAO,MAAMC,qBAAqB,GAAG,EAA9B;AACP,AAAO,MAAMC,cAAc,GAAG,EAAvB;AACP,AAAO,MAAMC,sBAAsB,GAAG,EAA/B;;ACpDP;AACA;AACA;AAEA;AACA,AAAO,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,GAAP,CAAW,eAAX,CAA3B;AACP,AAAO,MAAMC,iBAAiB,GAAGF,MAAM,CAACC,GAAP,CAAW,cAAX,CAA1B;AACP,AAAO,MAAME,mBAAmB,GAAGH,MAAM,CAACC,GAAP,CAAW,gBAAX,CAA5B;AACP,AAAO,MAAMG,sBAAsB,GAAGJ,MAAM,CAACC,GAAP,CAAW,mBAAX,CAA/B;AACP,AAAO,MAAMI,mBAAmB,GAAGL,MAAM,CAACC,GAAP,CAAW,gBAAX,CAA5B;AACP,AAAO,MAAMK,mBAAmB,GAAGN,MAAM,CAACC,GAAP,CAAW,gBAAX,CAA5B;AACP,AAAO,MAAMM,kBAAkB,GAAGP,MAAM,CAACC,GAAP,CAAW,eAAX,CAA3B;AACP,AACO,MAAMO,sBAAsB,GAAGR,MAAM,CAACC,GAAP,CAAW,mBAAX,CAA/B;AACP,AAAO,MAAMQ,mBAAmB,GAAGT,MAAM,CAACC,GAAP,CAAW,gBAAX,CAA5B;AACP,AAAO,MAAMS,wBAAwB,GAAGV,MAAM,CAACC,GAAP,CAAW,qBAAX,CAAjC;AACP,AAAO,MAAMU,eAAe,GAAGX,MAAM,CAACC,GAAP,CAAW,YAAX,CAAxB;AACP,AAAO,MAAMW,eAAe,GAAGZ,MAAM,CAACC,GAAP,CAAW,YAAX,CAAxB;AACP,AAAO,MAAMY,gBAAgB,GAAGb,MAAM,CAACC,GAAP,CAAW,aAAX,CAAzB;AACP,AAAO,MAAMa,6BAA6B,GAAGd,MAAM,CAACC,GAAP,CAC3C,wBAD2C,CAAtC;AAGP,AAAO,MAAMc,oBAAoB,GAAGf,MAAM,CAACC,GAAP,CAAW,iBAAX,CAA7B;AACP,AAAO,MAAMe,wBAAwB,GAAGhB,MAAM,CAACC,GAAP,CAAW,qBAAX,CAAjC;AACP,AAAO,MAAMgB,gBAAgB,GAAGjB,MAAM,CAACC,GAAP,CAAW,aAAX,CAAzB;AACP,AAAO,MAAMiB,yBAAyB,GAAGlB,MAAM,CAACC,GAAP,CAAW,sBAAX,CAAlC;AACP,AAIA,MAAMkB,qBAAqB,GAAGnB,MAAM,CAACoB,QAArC;AACA,MAAMC,oBAAoB,GAAG,YAA7B;AAEA,AAAO,SAASC,aAAT,CAAuBC,aAAvB,EAAiE;AACtE,MAAIA,aAAa,KAAK,IAAlB,IAA0B,OAAOA,aAAP,KAAyB,QAAvD,EAAiE;AAC/D,WAAO,IAAP;AACD;;AACD,QAAMC,aAAa,GAChBL,qBAAqB,IAAII,aAAa,CAACJ,qBAAD,CAAvC,IACAI,aAAa,CAACF,oBAAD,CAFf;;AAGA,MAAI,OAAOG,aAAP,KAAyB,UAA7B,EAAyC;AACvC,WAAOA,aAAP;AACD;;AACD,SAAO,IAAP;AACD;;ACjBD,SAASC,cAAT,CACEC,SADF,EAEEC,SAFF,EAGEC,WAHF,EAIU;AACR,QAAMC,WAAW,GAAIH,SAAD,CAAiBG,WAArC;;AACA,MAAIA,WAAJ,EAAiB;AACf,WAAOA,WAAP;AACD;;AACD,QAAMC,YAAY,GAAGH,SAAS,CAACE,WAAV,IAAyBF,SAAS,CAACI,IAAnC,IAA2C,EAAhE;AACA,SAAOD,YAAY,KAAK,EAAjB,GAAyBF,WAAzB,SAAwCE,YAAxC,SAA0DF,WAAjE;AACD;;;AAGD,SAASI,cAAT,CAAwBC,IAAxB,EAAiD;AAC/C,SAAOA,IAAI,CAACJ,WAAL,IAAoB,SAA3B;AACD;;;AAGD,AAAe,SAASK,wBAAT,CAAkCD,IAAlC,EAA8D;AAC3E,MAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACA,WAAO,IAAP;AACD;;AASD,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAQA,IAAD,CAAYJ,WAAZ,IAA2BI,IAAI,CAACF,IAAhC,IAAwC,IAA/C;AACD;;AACD,MAAI,OAAOE,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAOA,IAAP;AACD;;AACD,UAAQA,IAAR;AACE,SAAK9B,mBAAL;AACE,aAAO,UAAP;;AACF,SAAKD,iBAAL;AACE,aAAO,QAAP;;AACF,SAAKG,mBAAL;AACE,aAAO,UAAP;;AACF,SAAKD,sBAAL;AACE,aAAO,YAAP;;AACF,SAAKK,mBAAL;AACE,aAAO,UAAP;;AACF,SAAKC,wBAAL;AACE,aAAO,cAAP;;AACF,SAAKO,gBAAL;AACE,MAAiB;AACf,eAAO,OAAP;AACD;;AAhBL;;AAuBA,MAAI,OAAOgB,IAAP,KAAgB,QAApB,EAA8B;AAC5B,YAAQA,IAAI,CAACE,QAAb;AACE,WAAK5B,kBAAL;AACE,cAAM6B,OAA0B,GAAIH,IAApC;AACA,eAAOD,cAAc,CAACI,OAAD,CAAd,GAA0B,WAAjC;;AACF,WAAK9B,mBAAL;AACE,cAAM+B,QAAgC,GAAIJ,IAA1C;AACA,eAAOD,cAAc,CAACK,QAAQ,CAACC,QAAV,CAAd,GAAoC,WAA3C;;AACF,WAAK9B,sBAAL;AACE,eAAOiB,cAAc,CAACQ,IAAD,EAAOA,IAAI,CAACM,MAAZ,EAAoB,YAApB,CAArB;;AACF,WAAK5B,eAAL;AACE,cAAM6B,SAAS,GAAIP,IAAD,CAAYJ,WAAZ,IAA2B,IAA7C;;AACA,YAAIW,SAAS,KAAK,IAAlB,EAAwB;AACtB,iBAAOA,SAAP;AACD;;AACD,eAAON,wBAAwB,CAACD,IAAI,CAACA,IAAN,CAAxB,IAAuC,MAA9C;;AACF,WAAKrB,eAAL;AAAsB;AACpB,gBAAM6B,aAAsC,GAAIR,IAAhD;AACA,gBAAMS,OAAO,GAAGD,aAAa,CAACE,QAA9B;AACA,gBAAMC,IAAI,GAAGH,aAAa,CAACI,KAA3B;;AACA,cAAI;AACF,mBAAOX,wBAAwB,CAACU,IAAI,CAACF,OAAD,CAAL,CAA/B;AACD,WAFD,CAEE,OAAOI,CAAP,EAAU;AACV,mBAAO,IAAP;AACD;AACF;;AAMD;AA9BF;AAgCD;;AACD,SAAO,IAAP;AACD;;ACxFD,SAASrB,gBAAT,CACEC,SADF,EAEEC,SAFF,EAGEC,WAHF,EAIU;AACR,QAAME,YAAY,GAAGH,SAAS,CAACE,WAAV,IAAyBF,SAAS,CAACI,IAAnC,IAA2C,EAAhE;AACA,SACGL,SAAD,CAAiBG,WAAjB,KACCC,YAAY,KAAK,EAAjB,GAAyBF,WAAzB,SAAwCE,YAAxC,SAA0DF,WAD3D,CADF;AAID;;;AAGD,SAASI,gBAAT,CAAwBC,IAAxB,EAAiD;AAC/C,SAAOA,IAAI,CAACJ,WAAL,IAAoB,SAA3B;AACD;;AAED,AAAe,SAASkB,yBAAT,CAAmCC,KAAnC,EAAgE;AAAA,QACtEC,GADsE,GACzDD,KADyD,CACtEC,GADsE;AAAA,QACjEhB,IADiE,GACzDe,KADyD,CACjEf,IADiE;;AAE7E,UAAQgB,GAAR;AACE,SAAKpD,cAAL;AACE,aAAO,OAAP;;AACF,SAAKd,eAAL;AACE,YAAMqD,OAA0B,GAAIH,IAApC;AACA,aAAOD,gBAAc,CAACI,OAAD,CAAd,GAA0B,WAAjC;;AACF,SAAKpD,eAAL;AACE,YAAMqD,QAAgC,GAAIJ,IAA1C;AACA,aAAOD,gBAAc,CAACK,QAAQ,CAACC,QAAV,CAAd,GAAoC,WAA3C;;AACF,SAAK9C,kBAAL;AACE,aAAO,oBAAP;;AACF,SAAKP,UAAL;AACE,aAAOwC,gBAAc,CAACQ,IAAD,EAAOA,IAAI,CAACM,MAAZ,EAAoB,YAApB,CAArB;;AACF,SAAK1D,QAAL;AACE,aAAO,UAAP;;AACF,SAAKF,aAAL;AACE;AACA,aAAOsD,IAAP;;AACF,SAAKvD,UAAL;AACE,aAAO,QAAP;;AACF,SAAKD,QAAL;AACE,aAAO,MAAP;;AACF,SAAKG,QAAL;AACE,aAAO,MAAP;;AACF,SAAKU,aAAL;AACE;AACA,aAAO4C,wBAAwB,CAACD,IAAD,CAA/B;;AACF,SAAKnD,IAAL;AACE,UAAImD,IAAI,KAAK7B,sBAAb,EAAqC;AACnC;AACA,eAAO,YAAP;AACD;;AACD,aAAO,MAAP;;AACF,SAAKT,kBAAL;AACE,aAAO,WAAP;;AACF,SAAKT,QAAL;AACE,aAAO,UAAP;;AACF,SAAKQ,cAAL;AACE,aAAO,OAAP;;AACF,SAAKP,iBAAL;AACE,aAAO,UAAP;;AACF,SAAKM,qBAAL;AACE,aAAO,cAAP;;AACF,SAAKK,sBAAL;AACE,aAAO,eAAP;AACF;;AACA,SAAKvB,cAAL;AACA,SAAKD,iBAAL;AACA,SAAKiB,wBAAL;AACA,SAAKf,sBAAL;AACA,SAAKY,aAAL;AACA,SAAKC,mBAAL;AACE,UAAI,OAAO4C,IAAP,KAAgB,UAApB,EAAgC;AAC9B,eAAQA,IAAD,CAAYJ,WAAZ,IAA2BI,IAAI,CAACF,IAAhC,IAAwC,IAA/C;AACD;;AACD,UAAI,OAAOE,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAOA,IAAP;AACD;;AACD;;AA1DJ;;AAiEA,SAAO,IAAP;AACD;;ACpHD;AACA,AAAO,MAAMiB,OAAO;AAAG;AAA2B,4BAA3C;AACP,AAAO,MAAMC,aAAa;AAAG;AAAqB,4BAA3C;;AAGP,AAAO,MAAMC,SAAS;AAAG;AAAyB,4BAA3C;AACP,AAAO,MAAMC,MAAM;AAAG;AAA4B,4BAA3C;AACP,AACO,MAAMC,aAAa;AAAG;AAAqB,4BAA3C;AACP,AAAO,MAAMC,YAAY;AAAG;AAAsB,4BAA3C;AACP,AAAO,MAAMC,QAAQ;AAAG;AAA0B,4BAA3C;AACP,AAAO,MAAMC,UAAU;AAAG;AAAwB,4BAA3C;AACP,AAAO,MAAMC,iBAAiB;AAAG;AAAiB,4BAA3C;AACP,AAAO,MAAMC,GAAG;AAAG;AAA+B,4BAA3C;AACP,AAAO,MAAMC,QAAQ;AAAG;AAA0B,4BAA3C;AACP,AAAO,MAAMC,OAAO;AAAG;AAA2B,4BAA3C;AACP,AAAO,MAAMC,SAAS;AAAG;AAAyB,4BAA3C;AACP,AAAO,MAAMC,UAAU;AAAG;AAAwB,4BAA3C;AACP,AAAO,MAAMC,gBAAgB;AAAG;AAAkB,4BAA3C;AAEP,AAAO,MAAMC,mBAAmB,GAC9BJ,OAAO,GAAGR,MAAV,GAAmBG,QAAnB,GAA8BG,GAA9B,GAAoCC,QAApC,GAA+CI,gBAD1C;;AAIP,AAAO,MAAME,cAAc;AAAG;AAAoB,4BAA3C;;AAGP,AAAO,MAAMC,UAAU;AAAG;AAAwB,4BAA3C;AACP,AAAO,MAAMC,aAAa;AAAG;AAAqB,4BAA3C;AACP,AAAO,MAAMC,4BAA4B;AAAG;AAAM,4BAA3C;AACP,AAEO,MAAMC,MAAM;AAAG;AAA4B,4BAA3C;AAGP;AACA;AACA;AACA;;AACA,AAAO,MAAMC,SAAS;AAAG;AAAyB,4BAA3C;AACP,AAAO,MAAMC,YAAY;AAAG;AAAsB,4BAA3C;AACP,AAAO,MAAMC,aAAa;AAAG;AAAqB,4BAA3C;AAGP,AAMA;;AAEA,AAAO,MAAMC,kBAAkB;AAE7B;AACArB,MAAM,GACNO,QADA,IAECe,CAMG,CARJ,CAHK;AAaP,AAAO,MAAMC,YAAY,GACvBxB,SAAS,GACTC,MADA,GAEAC,aAFA,GAGAC,YAHA,GAIAI,GAJA,GAKAG,SALA,GAMAC,UAPK;AAQP,AAAO,MAAMc,UAAU,GAAGxB,MAAM,GAAGG,QAAT,GAAoBG,GAApB,GAA0BI,UAA7C;;AAGP,AAAO,MAAMe,WAAW,GAAGjB,OAAO,GAAGP,aAA9B;AAGP;AACA;;AACA,AAAO,MAAMyB,UAAU,GAAGP,YAAY,GAAGC,aAAf,GAA+BF,SAAlD;;ACpEP,MAAMS,iBAAiB,GAAGpH,oBAAoB,CAACoH,iBAA/C;AAEA,AAAO,SAASC,sBAAT,CAAgCjC,KAAhC,EAA4D;AACjE,MAAIkC,IAAI,GAAGlC,KAAX;AACA,MAAImC,cAAc,GAAGnC,KAArB;;AACA,MAAI,CAACA,KAAK,CAACoC,SAAX,EAAsB;AACpB;AACA;AACA,QAAIC,QAAQ,GAAGH,IAAf;;AACA,OAAG;AACDA,MAAAA,IAAI,GAAGG,QAAP;;AACA,UAAI,CAACH,IAAI,CAACI,KAAL,IAAclC,SAAS,GAAGU,SAA1B,CAAD,MAA2CZ,OAA/C,EAAwD;AACtD;AACA;AACA;AACAiC,QAAAA,cAAc,GAAGD,IAAI,CAACK,MAAtB;AACD;;AACDF,MAAAA,QAAQ,GAAGH,IAAI,CAACK,MAAhB;AACD,KATD,QASSF,QATT;AAUD,GAdD,MAcO;AACL,WAAOH,IAAI,CAACK,MAAZ,EAAoB;AAClBL,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;AACF;;AACD,MAAIL,IAAI,CAACjC,GAAL,KAAaxE,QAAjB,EAA2B;AACzB;AACA;AACA,WAAO0G,cAAP;AACD,GA1BgE;AA4BjE;;;AACA,SAAO,IAAP;AACD;AAED,AAwBO,SAASK,cAAT,CAAwBxC,KAAxB,EAA+C;AACpD,SAAOiC,sBAAsB,CAACjC,KAAD,CAAtB,KAAkCA,KAAzC;AACD;AAED,AAAO,SAASyC,SAAT,CAAmBC,SAAnB,EAAkE;AACvE;AAmBA,QAAM1C,KAAa,GAAG2C,GAAW,CAACD,SAAD,CAAjC;;AACA,MAAI,CAAC1C,KAAL,EAAY;AACV,WAAO,KAAP;AACD;;AACD,SAAOiC,sBAAsB,CAACjC,KAAD,CAAtB,KAAkCA,KAAzC;AACD;;AAED,SAAS4C,eAAT,CAAyB5C,KAAzB,EAAgC;AAC9B,MAAIiC,sBAAsB,CAACjC,KAAD,CAAtB,KAAkCA,KAAtC,EAA6C;AAC3C,UAAM,IAAI6C,KAAJ,CAAU,gDAAV,CAAN;AACD;AACF;;AAED,AAAO,SAASC,6BAAT,CAAuC9C,KAAvC,EAAmE;AACxE,QAAMoC,SAAS,GAAGpC,KAAK,CAACoC,SAAxB;;AACA,MAAI,CAACA,SAAL,EAAgB;AACd;AACA,UAAMD,cAAc,GAAGF,sBAAsB,CAACjC,KAAD,CAA7C;;AAEA,QAAImC,cAAc,KAAK,IAAvB,EAA6B;AAC3B,YAAM,IAAIU,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,QAAIV,cAAc,KAAKnC,KAAvB,EAA8B;AAC5B,aAAO,IAAP;AACD;;AACD,WAAOA,KAAP;AACD,GAduE;AAgBxE;AACA;;;AACA,MAAI+C,CAAQ,GAAG/C,KAAf;AACA,MAAIgD,CAAQ,GAAGZ,SAAf;;AACA,SAAO,IAAP,EAAa;AACX,UAAMa,OAAO,GAAGF,CAAC,CAACR,MAAlB;;AACA,QAAIU,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACD;;AACD,UAAMC,OAAO,GAAGD,OAAO,CAACb,SAAxB;;AACA,QAAIc,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACA,YAAMC,UAAU,GAAGF,OAAO,CAACV,MAA3B;;AACA,UAAIY,UAAU,KAAK,IAAnB,EAAyB;AACvBJ,QAAAA,CAAC,GAAGC,CAAC,GAAGG,UAAR;AACA;AACD,OATmB;;;AAWpB;AACD,KAnBU;AAsBX;AACA;;;AACA,QAAIF,OAAO,CAACG,KAAR,KAAkBF,OAAO,CAACE,KAA9B,EAAqC;AACnC,UAAIA,KAAK,GAAGH,OAAO,CAACG,KAApB;;AACA,aAAOA,KAAP,EAAc;AACZ,YAAIA,KAAK,KAAKL,CAAd,EAAiB;AACf;AACAH,UAAAA,eAAe,CAACK,OAAD,CAAf;AACA,iBAAOjD,KAAP;AACD;;AACD,YAAIoD,KAAK,KAAKJ,CAAd,EAAiB;AACf;AACAJ,UAAAA,eAAe,CAACK,OAAD,CAAf;AACA,iBAAOb,SAAP;AACD;;AACDgB,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD,OAdkC;AAiBnC;;;AACA,YAAM,IAAIR,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,QAAIE,CAAC,CAACR,MAAF,KAAaS,CAAC,CAACT,MAAnB,EAA2B;AACzB;AACA;AACA;AACA;AACAQ,MAAAA,CAAC,GAAGE,OAAJ;AACAD,MAAAA,CAAC,GAAGE,OAAJ;AACD,KAPD,MAOO;AACL;AACA;AACA;AACA;AACA;AACA,UAAII,YAAY,GAAG,KAAnB;AACA,UAAIF,KAAK,GAAGH,OAAO,CAACG,KAApB;;AACA,aAAOA,KAAP,EAAc;AACZ,YAAIA,KAAK,KAAKL,CAAd,EAAiB;AACfO,UAAAA,YAAY,GAAG,IAAf;AACAP,UAAAA,CAAC,GAAGE,OAAJ;AACAD,UAAAA,CAAC,GAAGE,OAAJ;AACA;AACD;;AACD,YAAIE,KAAK,KAAKJ,CAAd,EAAiB;AACfM,UAAAA,YAAY,GAAG,IAAf;AACAN,UAAAA,CAAC,GAAGC,OAAJ;AACAF,UAAAA,CAAC,GAAGG,OAAJ;AACA;AACD;;AACDE,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AACD,UAAI,CAACC,YAAL,EAAmB;AACjB;AACAF,QAAAA,KAAK,GAAGF,OAAO,CAACE,KAAhB;;AACA,eAAOA,KAAP,EAAc;AACZ,cAAIA,KAAK,KAAKL,CAAd,EAAiB;AACfO,YAAAA,YAAY,GAAG,IAAf;AACAP,YAAAA,CAAC,GAAGG,OAAJ;AACAF,YAAAA,CAAC,GAAGC,OAAJ;AACA;AACD;;AACD,cAAIG,KAAK,KAAKJ,CAAd,EAAiB;AACfM,YAAAA,YAAY,GAAG,IAAf;AACAN,YAAAA,CAAC,GAAGE,OAAJ;AACAH,YAAAA,CAAC,GAAGE,OAAJ;AACA;AACD;;AACDG,UAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAED,YAAI,CAACC,YAAL,EAAmB;AACjB,gBAAM,IAAIT,KAAJ,CACJ,oEACE,+DAFE,CAAN;AAID;AACF;AACF;;AAED,QAAIE,CAAC,CAACX,SAAF,KAAgBY,CAApB,EAAuB;AACrB,YAAM,IAAIH,KAAJ,CACJ,6DACE,sEAFE,CAAN;AAID;AACF,GAjIuE;AAoIxE;;;AACA,MAAIE,CAAC,CAAC9C,GAAF,KAAUxE,QAAd,EAAwB;AACtB,UAAM,IAAIoH,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,MAAIE,CAAC,CAACQ,SAAF,CAAYC,OAAZ,KAAwBT,CAA5B,EAA+B;AAC7B;AACA,WAAO/C,KAAP;AACD,GA5IuE;;;AA8IxE,SAAOoC,SAAP;AACD;AAED,AAAO,SAASqB,oBAAT,CAA8BC,MAA9B,EAA2D;AAChE,QAAMC,aAAa,GAAGb,6BAA6B,CAACY,MAAD,CAAnD;AACA,SAAOC,aAAa,KAAK,IAAlB,GACHC,wBAAwB,CAACD,aAAD,CADrB,GAEH,IAFJ;AAGD;;AAED,SAASC,wBAAT,CAAkC1B,IAAlC,EAA+C;AAC7C;AACA,MAAIA,IAAI,CAACjC,GAAL,KAAatE,aAAb,IAA8BuG,IAAI,CAACjC,GAAL,KAAarE,QAA/C,EAAyD;AACvD,WAAOsG,IAAP;AACD;;AAED,MAAIkB,KAAK,GAAGlB,IAAI,CAACkB,KAAjB;;AACA,SAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrB,UAAMS,KAAK,GAAGD,wBAAwB,CAACR,KAAD,CAAtC;;AACA,QAAIS,KAAK,KAAK,IAAd,EAAoB;AAClB,aAAOA,KAAP;AACD;;AACDT,IAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAED,SAAO,IAAP;AACD;;ACtRD,MAAMS,WAAW,GAAGC,KAAK,CAACC,OAA1B;;AAGA,SAASA,OAAT,CAAiBjB,CAAjB,EAAoC;AAClC,SAAOe,WAAW,CAACf,CAAD,CAAlB;AACD;;ACPD;AACA,AAKO,MAAMkB,gBAAgB,GAAGC,qCAAzB;AACP,AAAO,MAAMC,cAAc,GAAGD,mCAAvB;AACP,AAAO,MAAME,WAAW,GAAGF,gCAApB;AACP,AAAO,MAAMG,YAAY,GAAGH,iCAArB;AACP,AAAO,MAAMI,GAAG,GAAGJ,wBAAZ;AACP,AAEO,MAAMK,iBAAiB,GAAGL,sCAA1B;AACP,AAAO,MAAMM,oBAAoB,GAAGN,yCAA7B;AACP,AAAO,MAAMO,cAAc,GAAGP,mCAAvB;AACP,AACO,MAAMQ,YAAY,GAAGR,iCAArB;;ACsBP,IAAIS,UAAU,GAAG,IAAjB;AACA,IAAIC,YAAY,GAAG,IAAnB;AACA,AAMO,SAASC,eAAT,CAAyBC,SAAzB,EAAqD;AAC1D,MAAI,OAAOC,8BAAP,KAA0C,WAA9C,EAA2D;AACzD;AACA,WAAO,KAAP;AACD;;AACD,QAAMC,IAAI,GAAGD,8BAAb;;AACA,MAAIC,IAAI,CAACC,UAAT,EAAqB;AACnB;AACA;AACA;AACA,WAAO,IAAP;AACD;;AACD,MAAI,CAACD,IAAI,CAACE,aAAV,EAAyB;AACvB;;AAQA,WAAO,IAAP;AACD;;AACD,MAAI;AACF,QAAIpK,wBAAJ,EAA8B;AAC5B;AACA;AACA;AACAgK,MAAAA,SAAS,cACJA,SADI;AAEPK,QAAAA,eAFO;AAGPC,QAAAA;AAHO,QAAT;AAKD;;AAEDT,IAAAA,UAAU,GAAGK,IAAI,CAACK,MAAL,CAAYP,SAAZ,CAAb,CAZE;;AAeFF,IAAAA,YAAY,GAAGI,IAAf;AACD,GAhBD,CAgBE,OAAOM,GAAP,EAAY;AACZ,AAID;;AACD,MAAIN,IAAI,CAACO,QAAT,EAAmB;AACjB;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL;AACA,WAAO,KAAP;AACD;AACF;AAED,AAkBO,SAASC,YAAT,CAAsBC,IAAtB,EAAuCC,aAAvC,EAAqE;AAC1E,MAAId,YAAY,IAAI,OAAOA,YAAY,CAACe,iBAApB,KAA0C,UAA9D,EAA0E;AACxE,QAAI;AACF,YAAMC,QAAQ,GAAG,CAACH,IAAI,CAACjC,OAAL,CAAalB,KAAb,GAAqB7B,UAAtB,MAAsCA,UAAvD;;AACA,UAAI1F,mBAAJ,EAAyB;AACvB,YAAI8K,iBAAJ;;AACA,gBAAQH,aAAR;AACE,eAAKI,qBAAL;AACED,YAAAA,iBAAiB,GAAGE,iBAApB;AACA;;AACF,eAAKC,uBAAL;AACEH,YAAAA,iBAAiB,GAAGI,oBAApB;AACA;;AACF,eAAKC,oBAAL;AACEL,YAAAA,iBAAiB,GAAGM,cAApB;AACA;;AACF,eAAKC,iBAAL;AACEP,YAAAA,iBAAiB,GAAGQ,YAApB;AACA;;AACF;AACER,YAAAA,iBAAiB,GAAGM,cAApB;AACA;AAfJ;;AAiBAvB,QAAAA,YAAY,CAACe,iBAAb,CACEhB,UADF,EAEEc,IAFF,EAGEI,iBAHF,EAIED,QAJF;AAMD,OAzBD,MAyBO;AACLhB,QAAAA,YAAY,CAACe,iBAAb,CAA+BhB,UAA/B,EAA2Cc,IAA3C,EAAiDa,SAAjD,EAA4DV,QAA5D;AACD;AACF,KA9BD,CA8BE,OAAON,GAAP,EAAY;AACZ,AAMD;AACF;AACF;AAED,AAAO,SAASiB,gBAAT,CAA0Bd,IAA1B,EAA2C;AAChD,MACEb,YAAY,IACZ,OAAOA,YAAY,CAAC4B,qBAApB,KAA8C,UAFhD,EAGE;AACA,QAAI;AACF5B,MAAAA,YAAY,CAAC4B,qBAAb,CAAmC7B,UAAnC,EAA+Cc,IAA/C;AACD,KAFD,CAEE,OAAOH,GAAP,EAAY;AACZ,AAMD;AACF;AACF;AAED,AAAO,SAASmB,eAAT,CAAyBzG,KAAzB,EAAuC;AAC5C,MAAI4E,YAAY,IAAI,OAAOA,YAAY,CAAC8B,oBAApB,KAA6C,UAAjE,EAA6E;AAC3E,QAAI;AACF9B,MAAAA,YAAY,CAAC8B,oBAAb,CAAkC/B,UAAlC,EAA8C3E,KAA9C;AACD,KAFD,CAEE,OAAOsF,GAAP,EAAY;AACZ,AAMD;AACF;AACF;AAED;AAoCA,SAASF,oBAAT,CAA8BuB,cAA9B,EAA4E;AAC1EC,AACD;;AAED,SAASzB,eAAT,GAAqD;AACnD,EAWO;AACL,WAAO,IAAP;AACD;AACF;AAmCM,SAAS0B,0BAAT,GAA4C;AACjD,AAQD;AAED,AAgGO,SAASC,oBAAT,CACL9G,KADK,EAEL+G,WAFK,EAGLC,KAHK,EAIC;AACN,AAQD;AAED,AAAO,SAASC,sBAAT,CACLjH,KADK,EAELkH,QAFK,EAGLF,KAHK,EAIC;AACN,AAQD;;AClaM,MAAMG,MAAM;AAAG;AAA8B,QAA7C;;AAEP,AAAO,MAAMC,cAAc;AAAG;AAAsB,QAA7C;AACP,AAAO,MAAMC,WAAW;AAAG;AAAyB,QAA7C;AACP,AACO,MAAMC,gBAAgB;AAAG;AAAoB,QAA7C;AACP,AACO,MAAMC,8BAA8B;AAAG;AAAM,QAA7C;;ACTP;AAEA,AAAO,MAAMC,KAAK,GAAGC,IAAI,CAACD,KAAL,GAAaC,IAAI,CAACD,KAAlB,GAA0BE,aAAxC;AAGP;AACA;;AACA,MAAMC,GAAG,GAAGF,IAAI,CAACE,GAAjB;AACA,MAAMC,GAAG,GAAGH,IAAI,CAACG,GAAjB;;AACA,SAASF,aAAT,CAAuB5H,CAAvB,EAA0C;AACxC,QAAM+H,MAAM,GAAG/H,CAAC,KAAK,CAArB;;AACA,MAAI+H,MAAM,KAAK,CAAf,EAAkB;AAChB,WAAO,EAAP;AACD;;AACD,SAAQ,MAAOF,GAAG,CAACE,MAAD,CAAH,GAAcD,GAAf,GAAsB,CAA5B,CAAD,GAAmC,CAA1C;AACD;;ACZD;AACA,AAiBA;;AAEA,AAAO,MAAME,UAAU,GAAG,EAAnB;AAEP,AAAO,MAAMC,OAAc;AAAG;AAA6B,iCAApD;AACP,AAAO,MAAMC,MAAY;AAAG;AAA+B,iCAApD;AAEP,AAAO,MAAMC,QAAc;AAAG;AAA6B,iCAApD;AAEP,AAAO,MAAMC,4BAAkC;AAAG;AAAS,iCAApD;AACP,AAAO,MAAMC,mBAAyB;AAAG;AAAkB,iCAApD;AAEP,AAAO,MAAMC,oBAA0B;AAAG;AAAiB,iCAApD;AACP,AAAO,MAAMC,WAAiB;AAAG;AAA0B,iCAApD;AAEP,MAAMC,uBAA6B;AAAG;AAAqB,iCAA3D;AACA,MAAMC,eAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,eAAqB;AAAG;AAA6B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AACA,MAAMC,gBAAsB;AAAG;AAA4B,iCAA3D;AAEA,MAAMC,UAAiB;AAAG;AAAiC,iCAA3D;AACA,MAAMC,UAAgB;AAAG;AAAkC,iCAA3D;AACA,MAAMC,UAAgB;AAAG;AAAkC,iCAA3D;AACA,MAAMC,UAAgB;AAAG;AAAkC,iCAA3D;AACA,MAAMC,UAAgB;AAAG;AAAkC,iCAA3D;AACA,MAAMC,UAAgB;AAAG;AAAkC,iCAA3D;AAEA,AAAO,MAAMC,aAAmB,GAAGL,UAA5B;AAEP,AAAO,MAAMM,sBAA4B;AAAG;AAAe,iCAApD;AAEP,MAAMC,YAAmB;AAAG;AAA+B,iCAA3D;AAEA,AAAO,MAAMC,iBAAuB;AAAG;AAAoB,iCAApD;AACP,AAAO,MAAMC,QAAc;AAAG;AAA6B,iCAApD;AAEP,AAAO,MAAMC,aAAmB;AAAG;AAAwB,iCAApD;AAGP,AA0CO,MAAMC,WAAW,GAAG,CAAC,CAArB;AAEP,IAAIC,kBAAwB,GAAG7B,eAA/B;AACA,IAAI8B,aAAmB,GAAGb,UAA1B;;AAEA,SAASc,uBAAT,CAAiCvD,KAAjC,EAA6D;AAC3D,UAAQwD,sBAAsB,CAACxD,KAAD,CAA9B;AACE,SAAKiB,QAAL;AACE,aAAOA,QAAP;;AACF,SAAKC,4BAAL;AACE,aAAOA,4BAAP;;AACF,SAAKC,mBAAL;AACE,aAAOA,mBAAP;;AACF,SAAKC,oBAAL;AACE,aAAOA,oBAAP;;AACF,SAAKC,WAAL;AACE,aAAOA,WAAP;;AACF,SAAKC,uBAAL;AACE,aAAOA,uBAAP;;AACF,SAAKE,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACE,aAAOvC,KAAK,GAAGuB,eAAf;;AACF,SAAKkB,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACE,aAAO7C,KAAK,GAAGwC,UAAf;;AACF,SAAKO,sBAAL;AACE,aAAOA,sBAAP;;AACF,SAAKE,iBAAL;AACE,aAAOA,iBAAP;;AACF,SAAKC,QAAL;AACE,aAAOA,QAAP;;AACF,SAAKC,aAAL;AACE,aAAOA,aAAP;;AACF;AACE;;AAMA,aAAOnD,KAAP;AAnDJ;AAqDD;;AAED,AAAO,SAASyD,YAAT,CAAsBhF,IAAtB,EAAuCiF,QAAvC,EAA+D;AACpE;AACA,QAAMC,YAAY,GAAGlF,IAAI,CAACkF,YAA1B;;AACA,MAAIA,YAAY,KAAK5C,OAArB,EAA8B;AAC5B,WAAOA,OAAP;AACD;;AAED,MAAI6C,SAAS,GAAG7C,OAAhB;AAEA,QAAM8C,cAAc,GAAGpF,IAAI,CAACoF,cAA5B;AACA,QAAMC,WAAW,GAAGrF,IAAI,CAACqF,WAAzB,CAVoE;AAapE;;AACA,QAAMC,mBAAmB,GAAGJ,YAAY,GAAGX,YAA3C;;AACA,MAAIe,mBAAmB,KAAKhD,OAA5B,EAAqC;AACnC,UAAMiD,qBAAqB,GAAGD,mBAAmB,GAAG,CAACF,cAArD;;AACA,QAAIG,qBAAqB,KAAKjD,OAA9B,EAAuC;AACrC6C,MAAAA,SAAS,GAAGL,uBAAuB,CAACS,qBAAD,CAAnC;AACD,KAFD,MAEO;AACL,YAAMC,kBAAkB,GAAGF,mBAAmB,GAAGD,WAAjD;;AACA,UAAIG,kBAAkB,KAAKlD,OAA3B,EAAoC;AAClC6C,QAAAA,SAAS,GAAGL,uBAAuB,CAACU,kBAAD,CAAnC;AACD;AACF;AACF,GAVD,MAUO;AACL;AACA,UAAMC,cAAc,GAAGP,YAAY,GAAG,CAACE,cAAvC;;AACA,QAAIK,cAAc,KAAKnD,OAAvB,EAAgC;AAC9B6C,MAAAA,SAAS,GAAGL,uBAAuB,CAACW,cAAD,CAAnC;AACD,KAFD,MAEO;AACL,UAAIJ,WAAW,KAAK/C,OAApB,EAA6B;AAC3B6C,QAAAA,SAAS,GAAGL,uBAAuB,CAACO,WAAD,CAAnC;AACD;AACF;AACF;;AAED,MAAIF,SAAS,KAAK7C,OAAlB,EAA2B;AACzB;AACA;AACA,WAAOA,OAAP;AACD,GAzCmE;AA4CpE;AACA;;;AACA,MACE2C,QAAQ,KAAK3C,OAAb,IACA2C,QAAQ,KAAKE,SADb;AAGA;AACA,GAACF,QAAQ,GAAGG,cAAZ,MAAgC9C,OALlC,EAME;AACA,UAAMoD,QAAQ,GAAGX,sBAAsB,CAACI,SAAD,CAAvC;AACA,UAAMQ,OAAO,GAAGZ,sBAAsB,CAACE,QAAD,CAAtC;;AACA;AAEE;AACAS,IAAAA,QAAQ,IAAIC,OAAZ;AAEA;AACA;AACCD,IAAAA,QAAQ,KAAK9C,WAAb,IAA4B,CAAC+C,OAAO,GAAG7C,eAAX,MAAgCR,OAP/D,EAQE;AACA;AACA,aAAO2C,QAAP;AACD;AACF;;AAED,MACEW,CACA,CAAC5F,IAAI,CAACjC,OAAL,CAAa8H,IAAb,GAAoB/D,8BAArB,MAAyDJ,MAF3D,EAGE,CAHF,MAKO,IAAI,CAACyD,SAAS,GAAGzC,mBAAb,MAAsCJ,OAA1C,EAAmD;AACxD;AACA;AACA;AACA;AACA6C,IAAAA,SAAS,IAAID,YAAY,GAAGtC,WAA5B;AACD,GAhFmE;AAmFpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAMkD,cAAc,GAAG9F,IAAI,CAAC8F,cAA5B;;AACA,MAAIA,cAAc,KAAKxD,OAAvB,EAAgC;AAC9B,UAAMyD,aAAa,GAAG/F,IAAI,CAAC+F,aAA3B;AACA,QAAIxE,KAAK,GAAG4D,SAAS,GAAGW,cAAxB;;AACA,WAAOvE,KAAK,GAAG,CAAf,EAAkB;AAChB,YAAMyE,KAAK,GAAGC,sBAAsB,CAAC1E,KAAD,CAApC;AACA,YAAM2E,IAAI,GAAG,KAAKF,KAAlB;AAEAb,MAAAA,SAAS,IAAIY,aAAa,CAACC,KAAD,CAA1B;AAEAzE,MAAAA,KAAK,IAAI,CAAC2E,IAAV;AACD;AACF;;AAED,SAAOf,SAAP;AACD;AAED,AAAO,SAASgB,sBAAT,CAAgCnG,IAAhC,EAAiDuB,KAAjD,EAAuE;AAC5E,QAAM6E,UAAU,GAAGpG,IAAI,CAACoG,UAAxB;AAEA,MAAIC,mBAAmB,GAAG1B,WAA1B;;AACA,SAAOpD,KAAK,GAAG,CAAf,EAAkB;AAChB,UAAMyE,KAAK,GAAGC,sBAAsB,CAAC1E,KAAD,CAApC;AACA,UAAM2E,IAAI,GAAG,KAAKF,KAAlB;AAEA,UAAMM,SAAS,GAAGF,UAAU,CAACJ,KAAD,CAA5B;;AACA,QAAIM,SAAS,GAAGD,mBAAhB,EAAqC;AACnCA,MAAAA,mBAAmB,GAAGC,SAAtB;AACD;;AAED/E,IAAAA,KAAK,IAAI,CAAC2E,IAAV;AACD;;AAED,SAAOG,mBAAP;AACD;;AAED,SAASE,qBAAT,CAA+BL,IAA/B,EAA2CM,WAA3C,EAAgE;AAC9D,UAAQN,IAAR;AACE,SAAK1D,QAAL;AACA,SAAKC,4BAAL;AACA,SAAKC,mBAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAO8D,WAAW,GAAG,GAArB;;AACF,SAAK7D,oBAAL;AACA,SAAKC,WAAL;AACA,SAAKC,uBAAL;AACA,SAAKE,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACE,aAAO0C,WAAW,GAAG,IAArB;;AACF,SAAKxC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACE;AACA;AACA;AACA;AACA;AACA,aAAOO,WAAP;;AACF,SAAKL,sBAAL;AACA,SAAKE,iBAAL;AACA,SAAKC,QAAL;AACA,SAAKC,aAAL;AACE;AACA,aAAOC,WAAP;;AACF;AACE;AAKA,aAAOA,WAAP;AAzDJ;AA2DD;;AAED,AAAO,SAAS8B,yBAAT,CACLzG,IADK,EAELwG,WAFK,EAGC;AACN;AACA;AACA;AAEA,QAAMtB,YAAY,GAAGlF,IAAI,CAACkF,YAA1B;AACA,QAAME,cAAc,GAAGpF,IAAI,CAACoF,cAA5B;AACA,QAAMC,WAAW,GAAGrF,IAAI,CAACqF,WAAzB;AACA,QAAMqB,eAAe,GAAG1G,IAAI,CAAC0G,eAA7B,CARM;AAWN;AACA;;AACA,MAAInF,KAAK,GAAG2D,YAAZ;;AACA,SAAO3D,KAAK,GAAG,CAAf,EAAkB;AAChB,UAAMyE,KAAK,GAAGC,sBAAsB,CAAC1E,KAAD,CAApC;AACA,UAAM2E,IAAI,GAAG,KAAKF,KAAlB;AAEA,UAAMW,cAAc,GAAGD,eAAe,CAACV,KAAD,CAAtC;;AACA,QAAIW,cAAc,KAAKhC,WAAvB,EAAoC;AAClC;AACA;AACA;AACA,UACE,CAACuB,IAAI,GAAGd,cAAR,MAA4B9C,OAA5B,IACA,CAAC4D,IAAI,GAAGb,WAAR,MAAyB/C,OAF3B,EAGE;AACA;AACAoE,QAAAA,eAAe,CAACV,KAAD,CAAf,GAAyBO,qBAAqB,CAACL,IAAD,EAAOM,WAAP,CAA9C;AACD;AACF,KAXD,MAWO,IAAIG,cAAc,IAAIH,WAAtB,EAAmC;AACxC;AACAxG,MAAAA,IAAI,CAAC4G,YAAL,IAAqBV,IAArB;AACD;;AAED3E,IAAAA,KAAK,IAAI,CAAC2E,IAAV;AACD;AACF;AAGD,AAKO,SAASW,mCAAT,CAA6C7G,IAA7C,EAAqE;AAC1E,QAAM8G,sBAAsB,GAAG9G,IAAI,CAACkF,YAAL,GAAoB,CAACR,aAApD;;AACA,MAAIoC,sBAAsB,KAAKxE,OAA/B,EAAwC;AACtC,WAAOwE,sBAAP;AACD;;AACD,MAAIA,sBAAsB,GAAGpC,aAA7B,EAA4C;AAC1C,WAAOA,aAAP;AACD;;AACD,SAAOpC,OAAP;AACD;AAED,AAAO,SAASyE,gBAAT,CAA0BxF,KAA1B,EAAwC;AAC7C,SAAO,CAACA,KAAK,GAAGiB,QAAT,MAAuBF,OAA9B;AACD;AAED,AAAO,SAAS0E,mBAAT,CAA6BzF,KAA7B,EAA2C;AAChD,SAAO,CAACA,KAAK,GAAGgD,YAAT,MAA2BjC,OAAlC;AACD;AACD,AAAO,SAAS2E,mBAAT,CAA6B1F,KAA7B,EAA2C;AAChD,SAAO,CAACA,KAAK,GAAGwC,UAAT,MAAyBxC,KAAhC;AACD;AACD,AAAO,SAAS2F,0BAAT,CAAoC3F,KAApC,EAAkD;AACvD,QAAM4F,WAAW,GAAG3E,QAAQ,GAAGE,mBAAX,GAAiCE,WAArD;AACA,SAAO,CAACrB,KAAK,GAAG4F,WAAT,MAA0B7E,OAAjC;AACD;AACD,AAAO,SAAS8E,uBAAT,CAAiC7F,KAAjC,EAA+C;AACpD,SAAO,CAACA,KAAK,GAAGuB,eAAT,MAA8BvB,KAArC;AACD;AAED,AAAO,SAAS8F,oBAAT,CAA8BrH,IAA9B,EAA+CuB,KAA/C,EAA6D;AAClE,MACEqE,CACA,CAAC5F,IAAI,CAACjC,OAAL,CAAa8H,IAAb,GAAoB/D,8BAArB,MAAyDJ,MAF3D,EAGE;AACA;AACA,WAAO,KAAP;AACD;;AACD,QAAM4F,gBAAgB,GACpB7E,4BAA4B,GAC5BC,mBADA,GAEAC,oBAFA,GAGAC,WAJF;AAKA,SAAO,CAACrB,KAAK,GAAG+F,gBAAT,MAA+BhF,OAAtC;AACD;AAED,AAAO,SAASiF,mBAAT,CAA6BvH,IAA7B,EAA8CuB,KAA9C,EAA4D;AACjE;AACA;AACA,SAAO,CAACA,KAAK,GAAGvB,IAAI,CAAC4G,YAAd,MAAgCtE,OAAvC;AACD;AAED,AAAO,SAASkF,gBAAT,CAA0BtB,IAA1B,EAAsC;AAC3C,SAAO,CAACA,IAAI,GAAGpD,eAAR,MAA6BR,OAApC;AACD;AAED,AAAO,SAASmF,uBAAT,GAAyC;AAC9C;AACA;AACA;AACA,QAAMvB,IAAI,GAAGtB,kBAAb;AACAA,EAAAA,kBAAkB,KAAK,CAAvB;;AACA,MAAI,CAACA,kBAAkB,GAAG9B,eAAtB,MAA2CR,OAA/C,EAAwD;AACtDsC,IAAAA,kBAAkB,GAAG7B,eAArB;AACD;;AACD,SAAOmD,IAAP;AACD;AAED,AAAO,SAASwB,kBAAT,GAAoC;AACzC,QAAMxB,IAAI,GAAGrB,aAAb;AACAA,EAAAA,aAAa,KAAK,CAAlB;;AACA,MAAI,CAACA,aAAa,GAAGd,UAAjB,MAAiCzB,OAArC,EAA8C;AAC5CuC,IAAAA,aAAa,GAAGb,UAAhB;AACD;;AACD,SAAOkC,IAAP;AACD;AAED,AAAO,SAASnB,sBAAT,CAAgCxD,KAAhC,EAAoD;AACzD,SAAOA,KAAK,GAAG,CAACA,KAAhB;AACD;AAED,AAAO,SAASoG,iBAAT,CAA2BpG,KAA3B,EAA+C;AACpD;AACA;AACA;AACA;AACA,SAAOwD,sBAAsB,CAACxD,KAAD,CAA7B;AACD;;AAED,SAAS0E,sBAAT,CAAgC1E,KAAhC,EAA8C;AAC5C,SAAO,KAAKQ,KAAK,CAACR,KAAD,CAAjB;AACD;;AAED,SAASqG,WAAT,CAAqB1B,IAArB,EAAiC;AAC/B,SAAOD,sBAAsB,CAACC,IAAD,CAA7B;AACD;;AAED,AAAO,SAAS2B,gBAAT,CAA0BvK,CAA1B,EAA2CC,CAA3C,EAA4D;AACjE,SAAO,CAACD,CAAC,GAAGC,CAAL,MAAY+E,OAAnB;AACD;AAED,AAAO,SAASwF,eAAT,CAAyB7S,GAAzB,EAAqC8S,MAArC,EAA2D;AAChE,SAAO,CAAC9S,GAAG,GAAG8S,MAAP,MAAmBA,MAA1B;AACD;AAED,AAAO,SAASC,UAAT,CAAoB1K,CAApB,EAAqCC,CAArC,EAA6D;AAClE,SAAOD,CAAC,GAAGC,CAAX;AACD;AAED,AAAO,SAAS0K,WAAT,CAAqBhT,GAArB,EAAiC8S,MAAjC,EAA8D;AACnE,SAAO9S,GAAG,GAAG,CAAC8S,MAAd;AACD;AAED,AAAO,SAASG,cAAT,CAAwB5K,CAAxB,EAAyCC,CAAzC,EAAiE;AACtE,SAAOD,CAAC,GAAGC,CAAX;AACD;AAGD;;AACA,AAAO,SAAS4K,WAAT,CAAqBjC,IAArB,EAAwC;AAC7C,SAAOA,IAAP;AACD;AAED,AAKO,SAASkC,aAAT,CAA0BC,OAA1B,EAAkD;AACvD;AACA;AACA,QAAMC,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlG,UAApB,EAAgCkG,CAAC,EAAjC,EAAqC;AACnCD,IAAAA,OAAO,CAACE,IAAR,CAAaH,OAAb;AACD;;AACD,SAAOC,OAAP;AACD;AAED,AAAO,SAASG,eAAT,CACLzI,IADK,EAEL0I,UAFK,EAGLpC,SAHK,EAIL;AACAtG,EAAAA,IAAI,CAACkF,YAAL,IAAqBwD,UAArB,CADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIA,UAAU,KAAKjE,QAAnB,EAA6B;AAC3BzE,IAAAA,IAAI,CAACoF,cAAL,GAAsB9C,OAAtB;AACAtC,IAAAA,IAAI,CAACqF,WAAL,GAAmB/C,OAAnB;AACD;;AAED,QAAM8D,UAAU,GAAGpG,IAAI,CAACoG,UAAxB;AACA,QAAMJ,KAAK,GAAG4B,WAAW,CAACc,UAAD,CAAzB,CArBA;AAuBA;;AACAtC,EAAAA,UAAU,CAACJ,KAAD,CAAV,GAAoBM,SAApB;AACD;AAED,AAAO,SAASqC,iBAAT,CAA2B3I,IAA3B,EAA4CoF,cAA5C,EAAmE;AACxEpF,EAAAA,IAAI,CAACoF,cAAL,IAAuBA,cAAvB;AACApF,EAAAA,IAAI,CAACqF,WAAL,IAAoB,CAACD,cAArB,CAFwE;;AAKxE,QAAMsB,eAAe,GAAG1G,IAAI,CAAC0G,eAA7B;AACA,MAAInF,KAAK,GAAG6D,cAAZ;;AACA,SAAO7D,KAAK,GAAG,CAAf,EAAkB;AAChB,UAAMyE,KAAK,GAAGC,sBAAsB,CAAC1E,KAAD,CAApC;AACA,UAAM2E,IAAI,GAAG,KAAKF,KAAlB;AAEAU,IAAAA,eAAe,CAACV,KAAD,CAAf,GAAyBrB,WAAzB;AAEApD,IAAAA,KAAK,IAAI,CAAC2E,IAAV;AACD;AACF;AAED,AAAO,SAAS0C,cAAT,CACL5I,IADK,EAELqF,WAFK,EAGLiB,SAHK,EAIL;AACAtG,EAAAA,IAAI,CAACqF,WAAL,IAAoBrF,IAAI,CAACoF,cAAL,GAAsBC,WAA1C;AACD;AAED,AAIO,SAASwD,gBAAT,CAA0B7I,IAA1B,EAA2C8I,cAA3C,EAAkE;AACvE,QAAMC,oBAAoB,GAAG/I,IAAI,CAACkF,YAAL,GAAoB,CAAC4D,cAAlD;AAEA9I,EAAAA,IAAI,CAACkF,YAAL,GAAoB4D,cAApB,CAHuE;;AAMvE9I,EAAAA,IAAI,CAACoF,cAAL,GAAsB9C,OAAtB;AACAtC,EAAAA,IAAI,CAACqF,WAAL,GAAmB/C,OAAnB;AAEAtC,EAAAA,IAAI,CAAC4G,YAAL,IAAqBkC,cAArB;AACA9I,EAAAA,IAAI,CAACgJ,gBAAL,IAAyBF,cAAzB;AAEA9I,EAAAA,IAAI,CAAC8F,cAAL,IAAuBgD,cAAvB;AAEA,QAAM/C,aAAa,GAAG/F,IAAI,CAAC+F,aAA3B;AACA,QAAMK,UAAU,GAAGpG,IAAI,CAACoG,UAAxB;AACA,QAAMM,eAAe,GAAG1G,IAAI,CAAC0G,eAA7B,CAhBuE;;AAmBvE,MAAInF,KAAK,GAAGwH,oBAAZ;;AACA,SAAOxH,KAAK,GAAG,CAAf,EAAkB;AAChB,UAAMyE,KAAK,GAAGC,sBAAsB,CAAC1E,KAAD,CAApC;AACA,UAAM2E,IAAI,GAAG,KAAKF,KAAlB;AAEAD,IAAAA,aAAa,CAACC,KAAD,CAAb,GAAuB1D,OAAvB;AACA8D,IAAAA,UAAU,CAACJ,KAAD,CAAV,GAAoBrB,WAApB;AACA+B,IAAAA,eAAe,CAACV,KAAD,CAAf,GAAyBrB,WAAzB;AAEApD,IAAAA,KAAK,IAAI,CAAC2E,IAAV;AACD;AACF;AAED,AAAO,SAAS+C,iBAAT,CAA2BjJ,IAA3B,EAA4C8F,cAA5C,EAAmE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMoD,kBAAkB,GAAIlJ,IAAI,CAAC8F,cAAL,IAAuBA,cAAnD;AACA,QAAMC,aAAa,GAAG/F,IAAI,CAAC+F,aAA3B;AACA,MAAIxE,KAAK,GAAG2H,kBAAZ;;AACA,SAAO3H,KAAP,EAAc;AACZ,UAAMyE,KAAK,GAAGC,sBAAsB,CAAC1E,KAAD,CAApC;AACA,UAAM2E,IAAI,GAAG,KAAKF,KAAlB;;AACA;AAEGE,IAAAA,IAAI,GAAGJ,cAAR;AAECC,IAAAA,aAAa,CAACC,KAAD,CAAb,GAAuBF,cAJ1B,EAKE;AACAC,MAAAA,aAAa,CAACC,KAAD,CAAb,IAAwBF,cAAxB;AACD;;AACDvE,IAAAA,KAAK,IAAI,CAAC2E,IAAV;AACD;AACF;AAED,AAAO,SAASiD,yBAAT,CACLnJ,IADK,EAELoJ,WAFK,EAGC;AACN,QAAMC,UAAU,GAAGtE,sBAAsB,CAACqE,WAAD,CAAzC;AAEA,MAAIlD,IAAJ;;AACA,UAAQmD,UAAR;AACE,SAAK3G,mBAAL;AACEwD,MAAAA,IAAI,GAAGzD,4BAAP;AACA;;AACF,SAAKG,WAAL;AACEsD,MAAAA,IAAI,GAAGvD,oBAAP;AACA;;AACF,SAAKI,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,eAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,gBAAL;AACA,SAAKE,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACA,SAAKC,UAAL;AACE8B,MAAAA,IAAI,GAAGrD,uBAAP;AACA;;AACF,SAAK4B,QAAL;AACEyB,MAAAA,IAAI,GAAG1B,iBAAP;AACA;;AACF;AACE;AACA;AACA0B,MAAAA,IAAI,GAAG3D,MAAP;AACA;AArCJ,GAJM;AA6CN;AACA;;;AACA,MAAI,CAAC2D,IAAI,IAAIlG,IAAI,CAACoF,cAAL,GAAsBgE,WAA1B,CAAL,MAAiD7G,MAArD,EAA6D;AAC3D;AACA,WAAOA,MAAP;AACD;;AAED,SAAO2D,IAAP;AACD;AAED,AAqEO,SAASoD,sBAAT,CACLtJ,IADK,EAELuB,KAFK,EAGqB;AAC1B,EAA8B;AAC5B,WAAO,IAAP;AACD;AAqBF;;AC3zBM,MAAMlB,qBAAoC,GAAGmC,QAA7C;AACP,AAAO,MAAMjC,uBAAsC,GAAGmC,mBAA/C;AACP,AAAO,MAAMjC,oBAAmC,GAAGmC,WAA5C;AACP,AAAO,MAAMjC,iBAAgC,GAAG8D,QAAzC;AAEP,IAAI8E,qBAAoC,GAAGhH,MAA3C;AAEA,AAAO,SAASiH,wBAAT,GAAmD;AACxD,SAAOD,qBAAP;AACD;AAED,AAAO,SAASE,wBAAT,CAAkCC,WAAlC,EAA8D;AACnEH,EAAAA,qBAAqB,GAAGG,WAAxB;AACD;AAED,AAUO,SAASC,mBAAT,CACLrM,CADK,EAELC,CAFK,EAGU;AACf,SAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAf,GAAmBD,CAAnB,GAAuBC,CAA9B;AACD;AAED,AAAO,SAASqM,kBAAT,CACLtM,CADK,EAELC,CAFK,EAGU;AACf,SAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAf,GAAmBD,CAAnB,GAAuBC,CAA9B;AACD;AAED,AAAO,SAASsM,qBAAT,CACLvM,CADK,EAELC,CAFK,EAGI;AACT,SAAOD,CAAC,KAAK,CAAN,IAAWA,CAAC,GAAGC,CAAtB;AACD;AAED,AAAO,SAASuM,oBAAT,CAA8BvI,KAA9B,EAA2D;AAChE,QAAM2E,IAAI,GAAGnB,sBAAsB,CAACxD,KAAD,CAAnC;;AACA,MAAI,CAACsI,qBAAqB,CAACxJ,qBAAD,EAAwB6F,IAAxB,CAA1B,EAAyD;AACvD,WAAO7F,qBAAP;AACD;;AACD,MAAI,CAACwJ,qBAAqB,CAACtJ,uBAAD,EAA0B2F,IAA1B,CAA1B,EAA2D;AACzD,WAAO3F,uBAAP;AACD;;AACD,MAAIyG,mBAAmB,CAACd,IAAD,CAAvB,EAA+B;AAC7B,WAAOzF,oBAAP;AACD;;AACD,SAAOE,iBAAP;AACD;;ACxED;AACA;AAEA,SAASoJ,IAAT,GAA4B;AAC1B,QAAM,IAAI3M,KAAJ,CACJ,sDACE,iDADF,GAEE,uBAHE,CAAN;AAKD;AAQM,MAAM4M,yBAAyB,GAAGD,IAAlC;AACP,AAAO,MAAME,0BAA0B,GAAGF,IAAnC;AACP,AAAO,MAAMG,uCAAuC,GAAGH,IAAhD;AACP,AAAO,MAAMI,6BAA6B,GAAGJ,IAAtC;AACP,AAKO,MAAMK,mBAAmB,GAAGL,IAA5B;AACP,AAIO,MAAMM,qBAAqB,GAAGN,IAA9B;AACP,AAAO,MAAMO,kCAAkC,GAAGP,IAA3C;;ACQP,MAAMQ,UAAU,GAAG,EAAnB;AACA,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,iBAAiB,GAAG,IAAIC,OAAJ,EAA1B;;AAOA,AAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAA6D;AAClE,UAAQA,IAAI,CAACpQ,GAAb;AACE,SAAK,UAAL;AACE,YAAMqQ,cAAc,GAAGD,IAAI,CAACE,qBAAL,CAA2BD,cAAlD;AACA,YAAME,QAAQ,GAAGF,cAAc,CAAC;AAC9BrR,QAAAA,IAAI,EAAEoR,IAAI,CAACpR,IADmB;AAE9BwR,QAAAA,KAAK,EAAEJ,IAAI,CAACI;AAFkB,OAAD,CAA/B;;AAIA,UAAI,OAAOD,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrDN,QAAAA,iBAAiB,CAACxV,GAAlB,CAAsB8V,QAAtB,EAAgCH,IAAhC;AACD;;AACD,aAAOG,QAAP;;AACF;AACE,aAAOH,IAAP;AAZJ;AAcD;AAED,AAAO,SAASK,WAAT,CACLC,cADK,EAELvN,KAFK,EAGC;AACN;AAUA,QAAMqI,KAAK,GAAGkF,cAAc,CAACC,QAAf,CAAwBC,OAAxB,CAAgCzN,KAAhC,CAAd;;AACA,MAAIqI,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBkF,IAAAA,cAAc,CAACC,QAAf,CAAwBE,MAAxB,CAA+BrF,KAA/B,EAAsC,CAAtC;AACD;;AACDkF,EAAAA,cAAc,CAACC,QAAf,CAAwB3C,IAAxB,CAA6B7K,KAA7B;AACD;AAED,AAAO,SAAS2N,YAAT,CACLJ,cADK,EAELvN,KAFK,EAGL4N,WAHK,EAIC;AACN,QAAMvF,KAAK,GAAGkF,cAAc,CAACC,QAAf,CAAwBC,OAAxB,CAAgCzN,KAAhC,CAAd;;AACA,MAAIqI,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBkF,IAAAA,cAAc,CAACC,QAAf,CAAwBE,MAAxB,CAA+BrF,KAA/B,EAAsC,CAAtC;AACD;;AACD,QAAMwF,WAAW,GAAGN,cAAc,CAACC,QAAf,CAAwBC,OAAxB,CAAgCG,WAAhC,CAApB;AACAL,EAAAA,cAAc,CAACC,QAAf,CAAwBE,MAAxB,CAA+BG,WAA/B,EAA4C,CAA5C,EAA+C7N,KAA/C;AACD;AAED,AAAO,SAAS8N,WAAT,CACLP,cADK,EAELvN,KAFK,EAGC;AACN,QAAMqI,KAAK,GAAGkF,cAAc,CAACC,QAAf,CAAwBC,OAAxB,CAAgCzN,KAAhC,CAAd;AACAuN,EAAAA,cAAc,CAACC,QAAf,CAAwBE,MAAxB,CAA+BrF,KAA/B,EAAsC,CAAtC;AACD;AAED,AAAO,SAAS0F,cAAT,CAAwBC,SAAxB,EAAoD;AACzDA,EAAAA,SAAS,CAACR,QAAV,CAAmBE,MAAnB,CAA0B,CAA1B;AACD;AAED,AAAO,SAASO,kBAAT,CACLd,qBADK,EAEQ;AACb,SAAOP,UAAP;AACD;AAED,AAAO,SAASsB,mBAAT,CACLC,iBADK,EAELtS,IAFK,EAGLsR,qBAHK,EAIQ;AACb,SAAOP,UAAP;AACD;AAED,AAAO,SAASwB,gBAAT,CAA0BC,aAA1B,EAAmE;AACxE;AACA,SAAO,IAAP;AACD;AAED,AAAO,SAASC,gBAAT,CAA0BD,aAA1B,EAA0D;AAEhE;AAED,AAAO,SAASE,cAAT,CACL1S,IADK,EAELwR,KAFK,EAGLF,qBAHK,EAILqB,WAJK,EAKLC,sBALK,EAMK;AACV,SAAO;AACL5S,IAAAA,IADK;AAELwR,IAAAA,KAFK;AAGLqB,IAAAA,QAAQ,EAAE,KAHL;AAILlB,IAAAA,QAAQ,EAAE,EAJL;AAKLiB,IAAAA,sBALK;AAMLtB,IAAAA,qBANK;AAOLtQ,IAAAA,GAAG,EAAE;AAPA,GAAP;AASD;AAED,AAAO,SAAS8R,kBAAT,CACLpB,cADK,EAELvN,KAFK,EAGC;AACN,QAAMqI,KAAK,GAAGkF,cAAc,CAACC,QAAf,CAAwBC,OAAxB,CAAgCzN,KAAhC,CAAd;;AACA,MAAIqI,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBkF,IAAAA,cAAc,CAACC,QAAf,CAAwBE,MAAxB,CAA+BrF,KAA/B,EAAsC,CAAtC;AACD;;AACDkF,EAAAA,cAAc,CAACC,QAAf,CAAwB3C,IAAxB,CAA6B7K,KAA7B;AACD;AAED,AAUO,SAAS4O,aAAT,CACLC,WADK,EAELhT,IAFK,EAGLiT,QAHK,EAILC,QAJK,EAKL5B,qBALK,EAMLqB,WANK,EAOS;AACd,SAAO3B,aAAP;AACD;AAED,AAAO,SAASmC,oBAAT,CAA8BnT,IAA9B,EAA4CwR,KAA5C,EAAmE;AACxE,SAAO,KAAP;AACD;AAED,AAAO,SAAS4B,kBAAT,CACLC,IADK,EAEL/B,qBAFK,EAGLqB,WAHK,EAILC,sBAJK,EAKS;AACd,SAAO;AACLS,IAAAA,IADK;AAELR,IAAAA,QAAQ,EAAE,KAFL;AAGL7R,IAAAA,GAAG,EAAE;AAHA,GAAP;AAKD;AAED,AAAO,SAASsS,uBAAT,GAAsC;AAC3C,SAAOrM,oBAAP;AACD;AAED,AAGO,MAAMsM,eAAe,GAAGC,UAAxB;AACP,AAAO,MAAMC,aAAa,GAAGC,YAAtB;AAEP,AAAO,MAAMC,SAAS,GAAG,CAAC,CAAnB;AAGP,AAKO,SAASC,YAAT,CACLC,QADK,EAELC,aAFK,EAGL9T,IAHK,EAILiT,QAJK,EAKLC,QALK,EAMLN,sBANK,EAOC;AACNiB,EAAAA,QAAQ,CAAC7T,IAAT,GAAgBA,IAAhB;AACA6T,EAAAA,QAAQ,CAACrC,KAAT,GAAiB0B,QAAjB;AACD;AAED,AASO,SAASa,gBAAT,CACLC,YADK,EAELC,OAFK,EAGLC,OAHK,EAIC;AACNF,EAAAA,YAAY,CAACX,IAAb,GAAoBa,OAApB;AACD;AAED,AAAO,SAASC,gBAAT,CAA0BnB,WAA1B,EAAuD;AAE7D;AAED,AAAO,MAAMoB,sBAAsB,GAAG3C,WAA/B;AACP,AAAO,MAAM4C,uBAAuB,GAAGvC,YAAhC;AACP,AAAO,MAAMwC,wBAAwB,GAAGrC,WAAjC;AAEP,AAAO,SAASsC,YAAT,CAAsBV,QAAtB,EAAgD;AACrDA,EAAAA,QAAQ,CAAChB,QAAT,GAAoB,IAApB;AACD;AAED,AAAO,SAAS2B,gBAAT,CAA0BR,YAA1B,EAA4D;AACjEA,EAAAA,YAAY,CAACnB,QAAb,GAAwB,IAAxB;AACD;AAED,AAAO,SAAS4B,cAAT,CAAwBZ,QAAxB,EAA4CrC,KAA5C,EAAgE;AACrEqC,EAAAA,QAAQ,CAAChB,QAAT,GAAoB,KAApB;AACD;AAED,AAAO,SAAS6B,kBAAT,CACLV,YADK,EAELX,IAFK,EAGC;AACNW,EAAAA,YAAY,CAACnB,QAAb,GAAwB,KAAxB;AACD;AAED,AAgBO,SAAS8B,kBAAT,CAA4BC,cAA5B,EAA4D;AAElE;;MClRMC,yBAA0BlZ,qBAA1BkZ;AAEP,AACO,SAASC,6BAAT,CACLhV,IADK,EAELiV,MAFK,EAGLC,OAHK,EAIG;AACR,EAYO;AACL,QAAIC,SAAS,GAAG,IAAhB;;AAIA,WAAOC,sBAAsB,CAACpV,IAAD,EAAOiV,MAAP,EAAeE,SAAf,CAA7B;AACD;AACF;AAED;AA4JA,SAASC,sBAAT,CACEpV,IADF,EAEEiV,MAFF,EAGEE,SAHF,EAIE;AACA,MAAIE,UAAU,GAAG,EAAjB;;AACA,EAgBO,IAAIF,SAAJ,EAAe;AACpBE,IAAAA,UAAU,GAAG,kBAAkBF,SAAlB,GAA8B,GAA3C;AACD;;AACD,SAAO,eAAenV,IAAI,IAAI,SAAvB,IAAoCqV,UAA3C;AACD;;AAED,AAAO,SAASC,2BAAT,CACLC,IADK,EAELN,MAFK,EAGLC,OAHK,EAIG;AACR,EAEO;AACL,WAAOM,8BAA8B,CAACD,IAAD,EAAON,MAAP,AAAA,CAArC;AACD;AACF;AAED,AAAO,SAASO,8BAAT,CACLC,EADK,EAELR,MAFK,EAGLC,OAHK,EAIG;AACR,EAEO;AACL,QAAI,CAACO,EAAL,EAAS;AACP,aAAO,EAAP;AACD;;AACD,UAAMzV,IAAI,GAAGyV,EAAE,CAAC3V,WAAH,IAAkB2V,EAAE,CAACzV,IAArB,IAA6B,IAA1C;AACA,QAAImV,SAAS,GAAG,IAAhB;;AAIA,WAAOC,sBAAsB,CAACpV,IAAD,EAAOiV,MAAP,EAAeE,SAAf,CAA7B;AACD;AACF;;ACvQD,MAAMO,cAAc,GAAGna,MAAM,CAACoa,SAAP,CAAiBD,cAAxC;;ACOA,MAAME,sBAAsB,GAAG/Z,oBAAoB,CAAC+Z,sBAApD;;ACHA,MAAMC,UAAsB,GAAG,EAA/B;AAEA;AAMA,IAAInJ,KAAK,GAAG,CAAC,CAAb;;AAEA,SAASoJ,YAAT,CAAyBC,YAAzB,EAA0D;AACxD,SAAO;AACLtR,IAAAA,OAAO,EAAEsR;AADJ,GAAP;AAGD;;AAMD,SAASC,GAAT,CAAgBC,MAAhB,EAAwChV,KAAxC,EAA4D;AAC1D,MAAIyL,KAAK,GAAG,CAAZ,EAAe;AACb;AAGA;AACD;;AAQDuJ,EAAAA,MAAM,CAACxR,OAAP,GAAiBoR,UAAU,CAACnJ,KAAD,CAA3B;AAEAmJ,EAAAA,UAAU,CAACnJ,KAAD,CAAV,GAAoB,IAApB;;AAMAA,EAAAA,KAAK;AACN;;AAED,SAASwC,IAAT,CAAiB+G,MAAjB,EAAyCra,KAAzC,EAAmDqF,KAAnD,EAAuE;AACrEyL,EAAAA,KAAK;AAELmJ,EAAAA,UAAU,CAACnJ,KAAD,CAAV,GAAoBuJ,MAAM,CAACxR,OAA3B;;AAMAwR,EAAAA,MAAM,CAACxR,OAAP,GAAiB7I,KAAjB;AACD;;AC1CM,MAAMsa,kBAAkB,GAAG,EAA3B;;;AAMP,MAAMC,kBAAuC,GAAGL,YAAY,CAC1DI,kBAD0D,CAA5D;;AAIA,MAAME,yBAA+C,GAAGN,YAAY,CAAC,KAAD,CAApE;AAEA;AACA;;AACA,IAAIO,eAAuB,GAAGH,kBAA9B;;AAEA,SAASI,kBAAT,CACEC,cADF,EAEEC,SAFF,EAGEC,2BAHF,EAIU;AACR,EAEO;AACL,QAAIA,2BAA2B,IAAIC,iBAAiB,CAACF,SAAD,CAApD,EAAiE;AAC/D;AACA;AACA;AACA;AACA,aAAOH,eAAP;AACD;;AACD,WAAOF,kBAAkB,CAAC1R,OAA1B;AACD;AACF;;AAED,SAASkS,YAAT,CACEJ,cADF,EAEEK,eAFF,EAGEC,aAHF,EAIQ;AACN,EAEO;AACL,UAAM9C,QAAQ,GAAGwC,cAAc,CAAC/R,SAAhC;AACAuP,IAAAA,QAAQ,CAAC+C,2CAAT,GAAuDF,eAAvD;AACA7C,IAAAA,QAAQ,CAACgD,yCAAT,GAAqDF,aAArD;AACD;AACF;;AAED,SAASG,gBAAT,CACET,cADF,EAEEK,eAFF,EAGU;AACR,EAEO;AACL,UAAM1W,IAAI,GAAGqW,cAAc,CAACrW,IAA5B;AACA,UAAM+W,YAAY,GAAG/W,IAAI,CAAC+W,YAA1B;;AACA,QAAI,CAACA,YAAL,EAAmB;AACjB,aAAOf,kBAAP;AACD,KALI;AAQL;AACA;;;AACA,UAAMnC,QAAQ,GAAGwC,cAAc,CAAC/R,SAAhC;;AACA,QACEuP,QAAQ,IACRA,QAAQ,CAAC+C,2CAAT,KAAyDF,eAF3D,EAGE;AACA,aAAO7C,QAAQ,CAACgD,yCAAhB;AACD;;AAED,UAAM1W,OAAO,GAAG,EAAhB;;AACA,SAAK,MAAM5E,GAAX,IAAkBwb,YAAlB,EAAgC;AAC9B5W,MAAAA,OAAO,CAAC5E,GAAD,CAAP,GAAemb,eAAe,CAACnb,GAAD,CAA9B;AACD;AAQD;;;AACA,QAAIsY,QAAJ,EAAc;AACZ4C,MAAAA,YAAY,CAACJ,cAAD,EAAiBK,eAAjB,EAAkCvW,OAAlC,CAAZ;AACD;;AAED,WAAOA,OAAP;AACD;AACF;;AAED,SAAS6W,iBAAT,GAAsC;AACpC,EAEO;AACL,WAAOd,yBAAyB,CAAC3R,OAAjC;AACD;AACF;;AAED,SAASiS,iBAAT,CAA2BxW,IAA3B,EAAoD;AAClD,EAEO;AACL,UAAMiX,iBAAiB,GAAGjX,IAAI,CAACiX,iBAA/B;AACA,WAAOA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK5P,SAA3D;AACD;AACF;;AAED,SAAS6P,UAAT,CAAoBnW,KAApB,EAAwC;AACtC,EAEO;AACL+U,IAAAA,GAAG,CAACI,yBAAD,AAAA,CAAH;AACAJ,IAAAA,GAAG,CAACG,kBAAD,AAAA,CAAH;AACD;AACF;;AAED,SAASkB,wBAAT,CAAkCpW,KAAlC,EAAsD;AACpD,EAEO;AACL+U,IAAAA,GAAG,CAACI,yBAAD,AAAA,CAAH;AACAJ,IAAAA,GAAG,CAACG,kBAAD,AAAA,CAAH;AACD;AACF;;AAED,SAASmB,yBAAT,CACErW,KADF,EAEEZ,OAFF,EAGEkX,SAHF,EAIQ;AACN,EAEO;AACL,QAAIpB,kBAAkB,CAAC1R,OAAnB,KAA+ByR,kBAAnC,EAAuD;AACrD,YAAM,IAAIpS,KAAJ,CACJ,wCACE,sEAFE,CAAN;AAID;;AAEDoL,IAAAA,IAAI,CAACiH,kBAAD,EAAqB9V,OAArB,AAAA,CAAJ;AACA6O,IAAAA,IAAI,CAACkH,yBAAD,EAA4BmB,SAA5B,AAAA,CAAJ;AACD;AACF;;AAED,SAASC,mBAAT,CACEvW,KADF,EAEEf,IAFF,EAGEuX,aAHF,EAIU;AACR,EAEO;AACL,UAAM1D,QAAQ,GAAG9S,KAAK,CAACuD,SAAvB;AACA,UAAM2S,iBAAiB,GAAGjX,IAAI,CAACiX,iBAA/B,CAFK;AAKL;;AACA,QAAI,OAAOpD,QAAQ,CAAC2D,eAAhB,KAAoC,UAAxC,EAAoD;AAClD;AAcA,aAAOD,aAAP;AACD;;AAED,UAAME,YAAY,GAAG5D,QAAQ,CAAC2D,eAAT,EAArB;;AACA,SAAK,MAAME,UAAX,IAAyBD,YAAzB,EAAuC;AACrC,UAAI,EAAEC,UAAU,IAAIT,iBAAhB,CAAJ,EAAwC;AACtC,cAAM,IAAIrT,KAAJ,EACD9C,yBAAyB,CAACC,KAAD,CAAzB,IACD,SAFE,mCAEmC2W,UAFnC,6CAAN;AAID;AACF;;AAMD,sBAAWH,aAAX,EAA6BE,YAA7B;AACD;AACF;;AAED,SAASE,mBAAT,CAA6BtB,cAA7B,EAA6D;AAC3D,EAEO;AACL,UAAMxC,QAAQ,GAAGwC,cAAc,CAAC/R,SAAhC,CADK;AAGL;AACA;;AACA,UAAMsT,0BAA0B,GAC7B/D,QAAQ,IAAIA,QAAQ,CAACgE,yCAAtB,IACA7B,kBAFF,CALK;AAUL;;AACAG,IAAAA,eAAe,GAAGF,kBAAkB,CAAC1R,OAArC;AACAyK,IAAAA,IAAI,CAACiH,kBAAD,EAAqB2B,0BAArB,AAAA,CAAJ;AACA5I,IAAAA,IAAI,CACFkH,yBADE,EAEFA,yBAAyB,CAAC3R,OAFxB,AAAA,CAAJ;AAMA,WAAO,IAAP;AACD;AACF;;AAED,SAASuT,yBAAT,CACEzB,cADF,EAEErW,IAFF,EAGEqX,SAHF,EAIQ;AACN,EAEO;AACL,UAAMxD,QAAQ,GAAGwC,cAAc,CAAC/R,SAAhC;;AAEA,QAAI,CAACuP,QAAL,EAAe;AACb,YAAM,IAAIjQ,KAAJ,CACJ,iDACE,sEAFE,CAAN;AAID;;AAED,QAAIyT,SAAJ,EAAe;AACb;AACA;AACA;AACA,YAAMU,aAAa,GAAGT,mBAAmB,CACvCjB,cADuC,EAEvCrW,IAFuC,EAGvCmW,eAHuC,CAAzC;AAKAtC,MAAAA,QAAQ,CAACgE,yCAAT,GAAqDE,aAArD,CATa;AAYb;;AACAjC,MAAAA,GAAG,CAACI,yBAAD,AAAA,CAAH;AACAJ,MAAAA,GAAG,CAACG,kBAAD,AAAA,CAAH,CAda;;AAgBbjH,MAAAA,IAAI,CAACiH,kBAAD,EAAqB8B,aAArB,AAAA,CAAJ;AACA/I,MAAAA,IAAI,CAACkH,yBAAD,EAA4BmB,SAA5B,AAAA,CAAJ;AACD,KAlBD,MAkBO;AACLvB,MAAAA,GAAG,CAACI,yBAAD,AAAA,CAAH;AACAlH,MAAAA,IAAI,CAACkH,yBAAD,EAA4BmB,SAA5B,AAAA,CAAJ;AACD;AACF;AACF;;AAED,SAASW,0BAAT,CAAoCjX,KAApC,EAA0D;AACxD,EAEO;AACL;AACA;AACA,QAAI,CAACwC,cAAc,CAACxC,KAAD,CAAf,IAA0BA,KAAK,CAACC,GAAN,KAAc1E,cAA5C,EAA4D;AAC1D,YAAM,IAAIsH,KAAJ,CACJ,8DACE,sEAFE,CAAN;AAID;;AAED,QAAIX,IAAI,GAAGlC,KAAX;;AACA,OAAG;AACD,cAAQkC,IAAI,CAACjC,GAAb;AACE,aAAKxE,QAAL;AACE,iBAAOyG,IAAI,CAACqB,SAAL,CAAenE,OAAtB;;AACF,aAAK7D,cAAL;AAAqB;AACnB,kBAAMga,SAAS,GAAGrT,IAAI,CAACjD,IAAvB;;AACA,gBAAIwW,iBAAiB,CAACF,SAAD,CAArB,EAAkC;AAChC,qBAAOrT,IAAI,CAACqB,SAAL,CAAeuT,yCAAtB;AACD;;AACD;AACD;AATH;;AAWA5U,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD,KAbD,QAaSL,IAAI,KAAK,IAblB;;AAeA,UAAM,IAAIW,KAAJ,CACJ,+CACE,sEAFE,CAAN;AAID;AACF;;AC1TM,MAAMqU,UAAU,GAAG,CAAnB;AACP,AAAO,MAAMC,cAAc,GAAG,CAAvB;;ACHP;;;;AAIA,SAASC,EAAT,CAAYtX,CAAZ,EAAoBuX,CAApB,EAA4B;AAC1B,SACGvX,CAAC,KAAKuX,CAAN,KAAYvX,CAAC,KAAK,CAAN,IAAW,IAAIA,CAAJ,KAAU,IAAIuX,CAArC,CAAD,IAA8CvX,CAAC,KAAKA,CAAN,IAAWuX,CAAC,KAAKA,CADjE;AAAA;AAGD;;AAED,MAAMC,QAAqC,GACzC,OAAOhd,MAAM,CAAC8c,EAAd,KAAqB,UAArB,GAAkC9c,MAAM,CAAC8c,EAAzC,GAA8CA,EADhD;;ACDA,IAAIG,SAA0C,GAAG,IAAjD;AACA,IAAIC,2BAAoC,GAAG,KAA3C;AACA,IAAIC,mBAA4B,GAAG,KAAnC;AAEA,AAAO,SAASC,oBAAT,CAA8BC,QAA9B,EAA2D;AAChE;AACA;AACA,MAAIJ,SAAS,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,SAAS,GAAG,CAACI,QAAD,CAAZ;AACD,GAFD,MAEO;AACL;AACA;AACAJ,IAAAA,SAAS,CAACtJ,IAAV,CAAe0J,QAAf;AACD;AACF;AAED,AAAO,SAASC,0BAAT,CAAoCD,QAApC,EAAiE;AACtEH,EAAAA,2BAA2B,GAAG,IAA9B;AACAE,EAAAA,oBAAoB,CAACC,QAAD,CAApB;AACD;AAED,AAAO,SAASE,kCAAT,GAA8C;AACnD;AACA;AACA;AACA;AACA;AACA,MAAIL,2BAAJ,EAAiC;AAC/BM,IAAAA,kBAAkB;AACnB;AACF;AAED,AAAO,SAASA,kBAAT,GAA8B;AACnC,MAAI,CAACL,mBAAD,IAAwBF,SAAS,KAAK,IAA1C,EAAgD;AAC9C;AACAE,IAAAA,mBAAmB,GAAG,IAAtB;AACA,QAAIzJ,CAAC,GAAG,CAAR;AACA,UAAM+J,sBAAsB,GAAG9I,wBAAwB,EAAvD;;AACA,QAAI;AACF,YAAM+I,MAAM,GAAG,IAAf;AACA,YAAMC,KAAK,GAAGV,SAAd,CAFE;AAIF;;AACArI,MAAAA,wBAAwB,CAACpJ,qBAAD,CAAxB;;AACA,aAAOkI,CAAC,GAAGiK,KAAK,CAACC,MAAjB,EAAyBlK,CAAC,EAA1B,EAA8B;AAC5B,YAAI2J,QAAQ,GAAGM,KAAK,CAACjK,CAAD,CAApB;;AACA,WAAG;AACD2J,UAAAA,QAAQ,GAAGA,QAAQ,CAACK,MAAD,CAAnB;AACD,SAFD,QAESL,QAAQ,KAAK,IAFtB;AAGD;;AACDJ,MAAAA,SAAS,GAAG,IAAZ;AACAC,MAAAA,2BAA2B,GAAG,KAA9B;AACD,KAdD,CAcE,OAAOW,KAAP,EAAc;AACd;AACA,UAAIZ,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,GAAGA,SAAS,CAACa,KAAV,CAAgBpK,CAAC,GAAG,CAApB,CAAZ;AACD,OAJa;;;AAMd/J,MAAAA,gBAAgB,CAACM,iBAAD,EAAoBuT,kBAApB,CAAhB;AACA,YAAMK,KAAN;AACD,KAtBD,SAsBU;AACRjJ,MAAAA,wBAAwB,CAAC6I,sBAAD,CAAxB;AACAN,MAAAA,mBAAmB,GAAG,KAAtB;AACD;AACF;;AACD,SAAO,IAAP;AACD;;ACxED;AACA;AACA;AACA,AAAO,SAASY,gBAAT,CAA0B5S,IAA1B,EAA2C;AAChD,QAAM6S,YAAuB,GAAG7S,IAAI,CAACjC,OAAL,CAAa+U,aAA7C;AACA,SAAOD,YAAY,CAACE,YAApB;AACD;;ACTD;AACA,AA6DA;AACA;AACA;AACA;AACA,MAAMC,SAAqB,GAAG,EAA9B;AACA,IAAIC,cAAsB,GAAG,CAA7B;AACA,IAAIC,gBAA8B,GAAG,IAArC;AACA,IAAIC,aAAqB,GAAG,CAA5B;AAEA,MAAMC,OAAmB,GAAG,EAA5B;AACA,IAAIC,YAAoB,GAAG,CAA3B;AACA,IAAIC,mBAAiC,GAAG,IAAxC;AACA,IAAIC,aAAqB,GAAG,CAA5B;AACA,IAAIC,mBAA2B,GAAG,EAAlC;AAEA;AA2IA,AAAO,SAASC,cAAT,CAAwB5D,cAAxB,EAA+C;AACpD;AAEA;AACA;AACA;AACA;AAEA,SAAOA,cAAc,KAAKqD,gBAA1B,EAA4C;AAC1CA,IAAAA,gBAAgB,GAAGF,SAAS,CAAC,EAAEC,cAAH,CAA5B;AACAD,IAAAA,SAAS,CAACC,cAAD,CAAT,GAA4B,IAA5B;AACAE,IAAAA,aAAa,GAAGH,SAAS,CAAC,EAAEC,cAAH,CAAzB;AACAD,IAAAA,SAAS,CAACC,cAAD,CAAT,GAA4B,IAA5B;AACD;;AAED,SAAOpD,cAAc,KAAKyD,mBAA1B,EAA+C;AAC7CA,IAAAA,mBAAmB,GAAGF,OAAO,CAAC,EAAEC,YAAH,CAA7B;AACAD,IAAAA,OAAO,CAACC,YAAD,CAAP,GAAwB,IAAxB;AACAG,IAAAA,mBAAmB,GAAGJ,OAAO,CAAC,EAAEC,YAAH,CAA7B;AACAD,IAAAA,OAAO,CAACC,YAAD,CAAP,GAAwB,IAAxB;AACAE,IAAAA,aAAa,GAAGH,OAAO,CAAC,EAAEC,YAAH,CAAvB;AACAD,IAAAA,OAAO,CAACC,YAAD,CAAP,GAAwB,IAAxB;AACD;AACF;;ACtKD,IAAIK,WAAoB,GAAG,KAA3B;AAGA;AAIA,IAAIC,eAAmD,GAAG,IAA1D;;AAyCA,SAASC,mDAAT,CACErZ,KADF,EAEEsZ,gBAFF,EAGEC,WAHF,EAIW;AACT,EAAwB;AACtB,WAAO,KAAP;AACD;AAYF;;AAuSD,SAASC,4BAAT,CACExZ,KADF,EAEEuQ,qBAFF,EAGEqB,WAHF,EAIW;AACT,EAAwB;AACtB,UAAM,IAAI/O,KAAJ,CACJ,iEACE,sEAFE,CAAN;AAID;AAqBF;;AAED,SAAS4W,gCAAT,CAA0CzZ,KAA1C,EAAiE;AAC/D,EAAwB;AACtB,UAAM,IAAI6C,KAAJ,CACJ,qEACE,sEAFE,CAAN;AAID;AAKD,QAAM6W,YAAY,GAAG7J,mBAAmB,CACtCoD,AADsC,CAAxC;AA8CD;;AAED,SAAS0G,oCAAT,CAA8C3Z,KAA9C,EAAkE;AAChE,EAAwB;AACtB,UAAM,IAAI6C,KAAJ,CACJ,yEACE,sEAFE,CAAN;AAID;AAcF;;AAsCD,SAAS+W,iBAAT,CAA2B5Z,KAA3B,EAAkD;AAChD,EAAwB;AACtB,WAAO,KAAP;AACD;AA+CF;;AAyBD,AAAO,SAAS6Z,mCAAT,GAAqD;AAC1D,MAAIT,eAAe,KAAK,IAAxB,EAA8B;AAC5B;AACA;AACA;AACAU,IAAAA,sBAAsB,CAACV,eAAD,CAAtB;AACAA,IAAAA,eAAe,GAAG,IAAlB;AACD;AACF;;AAED,SAASW,cAAT,GAAmC;AACjC,SAAOZ,WAAP;AACD;;AAED,AAAO,SAASa,mBAAT,CAA6B7B,KAA7B,EAAgE;AACrE,MAAIiB,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,IAAAA,eAAe,GAAG,CAACjB,KAAD,CAAlB;AACD,GAFD,MAEO;AACLiB,IAAAA,eAAe,CAACnL,IAAhB,CAAqBkK,KAArB;AACD;AACF;;MCrqBM8B,0BAA2Brf,qBAA3Bqf;AAEP,AAAO,MAAMC,YAAY,GAAG,IAArB;AAEP,AAAO,SAASC,wBAAT,GAAuD;AAC5D,SAAOF,uBAAuB,CAACG,UAA/B;AACD;;ACND;;;;;;AAKA,SAASC,YAAT,CAAsBC,IAAtB,EAAmCC,IAAnC,EAAyD;AACvD,MAAInD,QAAE,CAACkD,IAAD,EAAOC,IAAP,CAAN,EAAoB;AAClB,WAAO,IAAP;AACD;;AAED,MACE,OAAOD,IAAP,KAAgB,QAAhB,IACAA,IAAI,KAAK,IADT,IAEA,OAAOC,IAAP,KAAgB,QAFhB,IAGAA,IAAI,KAAK,IAJX,EAKE;AACA,WAAO,KAAP;AACD;;AAED,QAAMC,KAAK,GAAGlgB,MAAM,CAACmgB,IAAP,CAAYH,IAAZ,CAAd;AACA,QAAMI,KAAK,GAAGpgB,MAAM,CAACmgB,IAAP,CAAYF,IAAZ,CAAd;;AAEA,MAAIC,KAAK,CAACtC,MAAN,KAAiBwC,KAAK,CAACxC,MAA3B,EAAmC;AACjC,WAAO,KAAP;AACD,GAnBsD;;;AAsBvD,OAAK,IAAIlK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwM,KAAK,CAACtC,MAA1B,EAAkClK,CAAC,EAAnC,EAAuC;AACrC,UAAM2M,UAAU,GAAGH,KAAK,CAACxM,CAAD,CAAxB;;AACA,QACE,CAACyG,cAAc,CAACmG,IAAf,CAAoBL,IAApB,EAA0BI,UAA1B,CAAD,IACA,CAACvD,QAAE,CAACkD,IAAI,CAACK,UAAD,CAAL,EAAmBJ,IAAI,CAACI,UAAD,CAAvB,CAFL,EAGE;AACA,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;ACtBD,SAASE,aAAT,CAAuB7a,KAAvB,EAA6C;AAC3C,AAKA,QAAMgU,MAAM,GAAG8G,CAA+B,IAA9C;;AACA,UAAQ9a,KAAK,CAACC,GAAd;AACE,SAAKtE,aAAL;AACE,aAAOoY,6BAA6B,CAAC/T,KAAK,CAACf,IAAP,EAAa+U,MAAb,AAAA,CAApC;;AACF,SAAK1X,aAAL;AACE,aAAOyX,6BAA6B,CAAC,MAAD,EAASC,MAAT,AAAA,CAApC;;AACF,SAAK7X,iBAAL;AACE,aAAO4X,6BAA6B,CAAC,UAAD,EAAaC,MAAb,AAAA,CAApC;;AACF,SAAKvX,qBAAL;AACE,aAAOsX,6BAA6B,CAAC,cAAD,EAAiBC,MAAjB,AAAA,CAApC;;AACF,SAAK1Y,iBAAL;AACA,SAAKE,sBAAL;AACA,SAAKa,mBAAL;AACE,aAAOkY,8BAA8B,CAACvU,KAAK,CAACf,IAAP,EAAa+U,MAAb,AAAA,CAArC;;AACF,SAAK/X,UAAL;AACE,aAAOsY,8BAA8B,CAACvU,KAAK,CAACf,IAAN,CAAWM,MAAZ,EAAoByU,MAApB,AAAA,CAArC;;AACF,SAAKzY,cAAL;AACE,aAAO8Y,2BAA2B,CAACrU,KAAK,CAACf,IAAP,EAAa+U,MAAb,AAAA,CAAlC;;AACF;AACE,aAAO,EAAP;AAlBJ;AAoBD;;AAED,AAAO,SAAS+G,2BAAT,CAAqCzF,cAArC,EAAoE;AACzE,MAAI;AACF,QAAI0F,IAAI,GAAG,EAAX;AACA,QAAI9Y,IAAI,GAAGoT,cAAX;;AACA,OAAG;AACD0F,MAAAA,IAAI,IAAIH,aAAa,CAAC3Y,IAAD,CAArB;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD,KAHD,QAGSL,IAHT;;AAIA,WAAO8Y,IAAP;AACD,GARD,CAQE,OAAOlb,CAAP,EAAU;AACV,WAAO,+BAA+BA,CAAC,CAACmb,OAAjC,GAA2C,IAA3C,GAAkDnb,CAAC,CAACob,KAA3D;AACD;AACF;;ACtDD,MAAMvG,wBAAsB,GAAG/Z,oBAAoB,CAAC+Z,sBAApD;AAEA;AA4BA,AAAO,SAASwG,iBAAT,GAA6B;AAClC,AAKD;;ACxCM,SAASC,mBAAT,CAA6B7F,SAA7B,EAA6C8F,SAA7C,EAAwE;AAC7E,MAAI9F,SAAS,IAAIA,SAAS,CAAC+F,YAA3B,EAAyC;AACvC;AACA,UAAM7K,KAAK,GAAGpW,MAAM,CAAC,EAAD,EAAKghB,SAAL,CAApB;AACA,UAAMC,YAAY,GAAG/F,SAAS,CAAC+F,YAA/B;;AACA,SAAK,MAAMC,QAAX,IAAuBD,YAAvB,EAAqC;AACnC,UAAI7K,KAAK,CAAC8K,QAAD,CAAL,KAAoBjV,SAAxB,EAAmC;AACjCmK,QAAAA,KAAK,CAAC8K,QAAD,CAAL,GAAkBD,YAAY,CAACC,QAAD,CAA9B;AACD;AACF;;AACD,WAAO9K,KAAP;AACD;;AACD,SAAO4K,SAAP;AACD;;ACyBD,MAAMG,WAA+B,GAAG3G,YAAY,CAAC,IAAD,CAApD;AAEA;AAMA,IAAI4G,uBAAqC,GAAG,IAA5C;AACA,IAAIC,qBAAsD,GAAG,IAA7D;AACA,IAAIC,wBAAkD,GAAG,IAAzD;AAEA,AAEO,SAASC,wBAAT,GAA0C;AAC/C;AACA;AACAH,EAAAA,uBAAuB,GAAG,IAA1B;AACAC,EAAAA,qBAAqB,GAAG,IAAxB;AACAC,EAAAA,wBAAwB,GAAG,IAA3B;AAID;AAED,AAYO,SAASE,YAAT,CACLC,aADK,EAEL1c,OAFK,EAGL2c,SAHK,EAIC;AACN,EAiBO;AACL9N,IAAAA,IAAI,CAACuN,WAAD,EAAcpc,OAAO,CAAC4c,cAAtB,AAAA,CAAJ;AAEA5c,IAAAA,OAAO,CAAC4c,cAAR,GAAyBD,SAAzB;AAcD;AACF;AAED,AAAO,SAASE,WAAT,CACL7c,OADK,EAEL0c,aAFK,EAGC;AACN,QAAMI,YAAY,GAAGV,WAAW,CAAChY,OAAjC;AACAuR,EAAAA,GAAG,CAACyG,WAAD,AAAA,CAAH;;AACA,EASO;AACL,IAKO;AACLpc,MAAAA,OAAO,CAAC4c,cAAR,GAAyBE,YAAzB;AACD;AACF;AACF;AAED,AAAO,SAASC,+BAAT,CACLzY,MADK,EAELmL,WAFK,EAGLuN,eAHK,EAIL;AACA;AACA,MAAIla,IAAI,GAAGwB,MAAX;;AACA,SAAOxB,IAAI,KAAK,IAAhB,EAAsB;AACpB,UAAME,SAAS,GAAGF,IAAI,CAACE,SAAvB;;AACA,QAAI,CAACmL,eAAe,CAACrL,IAAI,CAACma,UAAN,EAAkBxN,WAAlB,CAApB,EAAoD;AAClD3M,MAAAA,IAAI,CAACma,UAAL,GAAkB5O,UAAU,CAACvL,IAAI,CAACma,UAAN,EAAkBxN,WAAlB,CAA5B;;AACA,UAAIzM,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,CAACia,UAAV,GAAuB5O,UAAU,CAACrL,SAAS,CAACia,UAAX,EAAuBxN,WAAvB,CAAjC;AACD;AACF,KALD,MAKO,IACLzM,SAAS,KAAK,IAAd,IACA,CAACmL,eAAe,CAACnL,SAAS,CAACia,UAAX,EAAuBxN,WAAvB,CAFX,EAGL;AACAzM,MAAAA,SAAS,CAACia,UAAV,GAAuB5O,UAAU,CAACrL,SAAS,CAACia,UAAX,EAAuBxN,WAAvB,CAAjC;AACD,KALM;;AAaP,QAAI3M,IAAI,KAAKka,eAAb,EAA8B;AAC5B;AACD;;AACDla,IAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;AASF;AAED,AAAO,SAAS+Z,sBAAT,CACLhH,cADK,EAELlW,OAFK,EAGLyP,WAHK,EAIC;AACN,EAWO;AACL0N,IAAAA,4BAA4B,CAACjH,cAAD,EAAiBlW,OAAjB,EAA0ByP,WAA1B,CAA5B;AACD;AACF;;AAED,SAAS0N,4BAAT,CACEjH,cADF,EAEElW,OAFF,EAGEyP,WAHF,EAIQ;AACN;AAIA,MAAI7O,KAAK,GAAGsV,cAAc,CAAClS,KAA3B;;AACA,MAAIpD,KAAK,KAAK,IAAd,EAAoB;AAClB;AACAA,IAAAA,KAAK,CAACuC,MAAN,GAAe+S,cAAf;AACD;;AACD,SAAOtV,KAAK,KAAK,IAAjB,EAAuB;AACrB,QAAIwc,SAAJ,CADqB;;AAIrB,UAAMC,IAAI,GAAGzc,KAAK,CAAC0c,YAAnB;;AACA,QAAID,IAAI,KAAK,IAAb,EAAmB;AACjBD,MAAAA,SAAS,GAAGxc,KAAK,CAACoD,KAAlB;AAEA,UAAIuZ,UAAU,GAAGF,IAAI,CAACG,YAAtB;;AACA,aAAOD,UAAU,KAAK,IAAtB,EAA4B;AAC1B;AACA,YAAIA,UAAU,CAACvd,OAAX,KAAuBA,OAA3B,EAAoC;AAClC;AACA,cAAIY,KAAK,CAACC,GAAN,KAAc1E,cAAlB,EAAkC;AAChC;AACA,kBAAMoQ,IAAI,GAAGyB,iBAAiB,CAACyB,WAAD,CAA9B;AACA,kBAAMgO,MAAM,GAAGC,YAAY,CAAC1S,WAAD,EAAcuB,IAAd,CAA3B;AACAkR,YAAAA,MAAM,CAAC5c,GAAP,GAAa8c,WAAb,CAJgC;AAMhC;AACA;AACA;AAEA;;AACA,kBAAMC,WAAW,GAAGhd,KAAK,CAACgd,WAA1B;;AACA,gBAAIA,WAAW,KAAK,IAApB,EAA0B,CAA1B,MAEO;AACL,oBAAMC,WAA6B,GAAID,WAAD,CAAmBE,MAAzD;AACA,oBAAMC,OAAO,GAAGF,WAAW,CAACE,OAA5B;;AACA,kBAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAN,gBAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd;AACD,eAHD,MAGO;AACLA,gBAAAA,MAAM,CAACO,IAAP,GAAcD,OAAO,CAACC,IAAtB;AACAD,gBAAAA,OAAO,CAACC,IAAR,GAAeP,MAAf;AACD;;AACDI,cAAAA,WAAW,CAACE,OAAZ,GAAsBN,MAAtB;AACD;AACF;;AAED7c,UAAAA,KAAK,CAACgH,KAAN,GAAcyG,UAAU,CAACzN,KAAK,CAACgH,KAAP,EAAc6H,WAAd,CAAxB;AACA,gBAAMzM,SAAS,GAAGpC,KAAK,CAACoC,SAAxB;;AACA,cAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,YAAAA,SAAS,CAAC4E,KAAV,GAAkByG,UAAU,CAACrL,SAAS,CAAC4E,KAAX,EAAkB6H,WAAlB,CAA5B;AACD;;AACDsN,UAAAA,+BAA+B,CAC7Bnc,KAAK,CAACuC,MADuB,EAE7BsM,WAF6B,EAG7ByG,cAH6B,CAA/B,CAnCkC;;AA0ClCmH,UAAAA,IAAI,CAACzV,KAAL,GAAayG,UAAU,CAACgP,IAAI,CAACzV,KAAN,EAAa6H,WAAb,CAAvB,CA1CkC;AA6ClC;;AACA;AACD;;AACD8N,QAAAA,UAAU,GAAGA,UAAU,CAACS,IAAxB;AACD;AACF,KAxDD,MAwDO,IAAIpd,KAAK,CAACC,GAAN,KAAcjE,eAAlB,EAAmC;AACxC;AACAwgB,MAAAA,SAAS,GAAGxc,KAAK,CAACf,IAAN,KAAeqW,cAAc,CAACrW,IAA9B,GAAqC,IAArC,GAA4Ce,KAAK,CAACoD,KAA9D;AACD,KAHM,MAGA,IAAIpD,KAAK,CAACC,GAAN,KAAczD,kBAAlB,EAAsC;AAC3C;AACA;AACA;AACA,YAAM6gB,cAAc,GAAGrd,KAAK,CAACuC,MAA7B;;AAEA,UAAI8a,cAAc,KAAK,IAAvB,EAA6B;AAC3B,cAAM,IAAIxa,KAAJ,CACJ,kFADI,CAAN;AAGD;;AAEDwa,MAAAA,cAAc,CAACrW,KAAf,GAAuByG,UAAU,CAAC4P,cAAc,CAACrW,KAAhB,EAAuB6H,WAAvB,CAAjC;AACA,YAAMzM,SAAS,GAAGib,cAAc,CAACjb,SAAjC;;AACA,UAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,QAAAA,SAAS,CAAC4E,KAAV,GAAkByG,UAAU,CAACrL,SAAS,CAAC4E,KAAX,EAAkB6H,WAAlB,CAA5B;AACD,OAhB0C;AAkB3C;AACA;AACA;;;AACAsN,MAAAA,+BAA+B,CAC7BkB,cAD6B,EAE7BxO,WAF6B,EAG7ByG,cAH6B,CAA/B;AAKAkH,MAAAA,SAAS,GAAGxc,KAAK,CAACqD,OAAlB;AACD,KA3BM,MA2BA;AACL;AACAmZ,MAAAA,SAAS,GAAGxc,KAAK,CAACoD,KAAlB;AACD;;AAED,QAAIoZ,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACAA,MAAAA,SAAS,CAACja,MAAV,GAAmBvC,KAAnB;AACD,KAHD,MAGO;AACL;AACAwc,MAAAA,SAAS,GAAGxc,KAAZ;;AACA,aAAOwc,SAAS,KAAK,IAArB,EAA2B;AACzB,YAAIA,SAAS,KAAKlH,cAAlB,EAAkC;AAChC;AACAkH,UAAAA,SAAS,GAAG,IAAZ;AACA;AACD;;AACD,cAAMnZ,OAAO,GAAGmZ,SAAS,CAACnZ,OAA1B;;AACA,YAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAA,UAAAA,OAAO,CAACd,MAAR,GAAiBia,SAAS,CAACja,MAA3B;AACAia,UAAAA,SAAS,GAAGnZ,OAAZ;AACA;AACD,SAZwB;;;AAczBmZ,QAAAA,SAAS,GAAGA,SAAS,CAACja,MAAtB;AACD;AACF;;AACDvC,IAAAA,KAAK,GAAGwc,SAAR;AACD;AACF;AA+QM,SAASc,oBAAT,CACLhI,cADK,EAELzG,WAFK,EAGC;AACN4M,EAAAA,uBAAuB,GAAGnG,cAA1B;AACAoG,EAAAA,qBAAqB,GAAG,IAAxB;AACAC,EAAAA,wBAAwB,GAAG,IAA3B;AAEA,QAAMe,YAAY,GAAGpH,cAAc,CAACoH,YAApC;;AACA,MAAIA,YAAY,KAAK,IAArB,EAA2B;AACzB,IAGO;AACL,YAAME,YAAY,GAAGF,YAAY,CAACE,YAAlC;;AACA,UAAIA,YAAY,KAAK,IAArB,EAA2B;AACzB,YAAItP,gBAAgB,CAACoP,YAAY,CAAC1V,KAAd,EAAqB6H,WAArB,CAApB,EAAuD;AACrD;AACA0O,UAAAA,gCAAgC;AACjC,SAJwB;;;AAMzBb,QAAAA,YAAY,CAACE,YAAb,GAA4B,IAA5B;AACD;AACF;AACF;AACF;AAED,AAAO,SAASY,WAAT,CAAwBpe,OAAxB,EAAqD;AAC1D;AAaA,QAAMzE,KAAK,GAAG8iB,CAEVre,OAAO,CAAC4c,cAFZ;;AAIA,MAAIL,wBAAwB,KAAKvc,OAAjC,EAA0C,CAA1C,MAEO;AACL,UAAMse,WAAW,GAAG;AAClBte,MAAAA,OAAO,EAAIA,OADO;AAElBue,MAAAA,aAAa,EAAEhjB,KAFG;AAGlByiB,MAAAA,IAAI,EAAE;AAHY,KAApB;;AAMA,QAAI1B,qBAAqB,KAAK,IAA9B,EAAoC;AAClC,UAAID,uBAAuB,KAAK,IAAhC,EAAsC;AACpC,cAAM,IAAI5Y,KAAJ,CACJ,wDACE,gFADF,GAEE,iFAFF,GAGE,8CAJE,CAAN;AAMD,OARiC;;;AAWlC6Y,MAAAA,qBAAqB,GAAGgC,WAAxB;AACAjC,MAAAA,uBAAuB,CAACiB,YAAxB,GAAuC;AACrC1V,QAAAA,KAAK,EAAEe,OAD8B;AAErC6U,QAAAA,YAAY,EAAEc;AAFuB,OAAvC;AAOD,KAnBD,MAmBO;AACL;AACAhC,MAAAA,qBAAqB,GAAGA,qBAAqB,CAAC0B,IAAtB,GAA6BM,WAArD;AACD;AACF;;AACD,SAAO/iB,KAAP;AACD;;ACrqBD;AACA;AACA;;AACA,IAAIijB,gBAEI,GAAG,IAFX;AAIA,AAAO,SAASC,yBAAT,CACL5F,KADK,EAEL;AACA,MAAI2F,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,IAAAA,gBAAgB,GAAG,CAAC3F,KAAD,CAAnB;AACD,GAFD,MAEO;AACL2F,IAAAA,gBAAgB,CAAC3P,IAAjB,CAAsBgK,KAAtB;AACD;AACF;AAED,AAAO,SAAS6F,+BAAT,GAA2C;AAChD;AACA;AACA;AACA;AACA;AACA,MAAIF,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,SAAK,IAAI5P,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4P,gBAAgB,CAAC1F,MAArC,EAA6ClK,CAAC,EAA9C,EAAkD;AAChD,YAAMiK,KAAK,GAAG2F,gBAAgB,CAAC5P,CAAD,CAA9B;AACA,YAAM+P,qBAAqB,GAAG9F,KAAK,CAAC+F,WAApC;;AACA,UAAID,qBAAqB,KAAK,IAA9B,EAAoC;AAClC9F,QAAAA,KAAK,CAAC+F,WAAN,GAAoB,IAApB;AACA,cAAMC,sBAAsB,GAAGF,qBAAqB,CAACX,IAArD;AACA,cAAMc,iBAAiB,GAAGjG,KAAK,CAACkF,OAAhC;;AACA,YAAIe,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,gBAAMC,kBAAkB,GAAGD,iBAAiB,CAACd,IAA7C;AACAc,UAAAA,iBAAiB,CAACd,IAAlB,GAA0Ba,sBAA1B;AACAF,UAAAA,qBAAqB,CAACX,IAAtB,GAA8Be,kBAA9B;AACD;;AACDlG,QAAAA,KAAK,CAACkF,OAAN,GAAiBY,qBAAjB;AACD;AACF;;AACDH,IAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;AAED,AAAO,SAASQ,2BAAT,CACLpe,KADK,EAELiY,KAFK,EAGL4E,MAHK,EAILlR,IAJK,EAKL;AACA,QAAMqS,WAAW,GAAG/F,KAAK,CAAC+F,WAA1B;;AACA,MAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACAnB,IAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd,CAFwB;AAIxB;;AACAgB,IAAAA,yBAAyB,CAAC5F,KAAD,CAAzB;AACD,GAND,MAMO;AACL4E,IAAAA,MAAM,CAACO,IAAP,GAAcY,WAAW,CAACZ,IAA1B;AACAY,IAAAA,WAAW,CAACZ,IAAZ,GAAmBP,MAAnB;AACD;;AACD5E,EAAAA,KAAK,CAAC+F,WAAN,GAAoBnB,MAApB;AAEA,SAAOwB,6BAA6B,CAACre,KAAD,EAAQ2L,IAAR,CAApC;AACD;AAED,AAAO,SAAS2S,4CAAT,CACLte,KADK,EAELiY,KAFK,EAGL4E,MAHK,EAILlR,IAJK,EAKC;AACN,QAAMqS,WAAW,GAAG/F,KAAK,CAAC+F,WAA1B;;AACA,MAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACAnB,IAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd,CAFwB;AAIxB;;AACAgB,IAAAA,yBAAyB,CAAC5F,KAAD,CAAzB;AACD,GAND,MAMO;AACL4E,IAAAA,MAAM,CAACO,IAAP,GAAcY,WAAW,CAACZ,IAA1B;AACAY,IAAAA,WAAW,CAACZ,IAAZ,GAAmBP,MAAnB;AACD;;AACD5E,EAAAA,KAAK,CAAC+F,WAAN,GAAoBnB,MAApB;AACD;AAED,AAAO,SAAS0B,4BAAT,CACLve,KADK,EAELiY,KAFK,EAGL4E,MAHK,EAILlR,IAJK,EAKL;AACA,QAAMqS,WAAW,GAAG/F,KAAK,CAAC+F,WAA1B;;AACA,MAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACAnB,IAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd,CAFwB;AAIxB;;AACAgB,IAAAA,yBAAyB,CAAC5F,KAAD,CAAzB;AACD,GAND,MAMO;AACL4E,IAAAA,MAAM,CAACO,IAAP,GAAcY,WAAW,CAACZ,IAA1B;AACAY,IAAAA,WAAW,CAACZ,IAAZ,GAAmBP,MAAnB;AACD;;AACD5E,EAAAA,KAAK,CAAC+F,WAAN,GAAoBnB,MAApB;AAEA,SAAOwB,6BAA6B,CAACre,KAAD,EAAQ2L,IAAR,CAApC;AACD;AAED,AAAO,SAAS6S,8BAAT,CAAwCxe,KAAxC,EAAsD2L,IAAtD,EAAkE;AACvE,SAAO0S,6BAA6B,CAACre,KAAD,EAAQ2L,IAAR,CAApC;AACD;AAGD;;AACA,AAAO,MAAM8S,oCAAoC,GAAGJ,6BAA7C;;AAEP,SAASA,6BAAT,CACEK,WADF,EAEE/S,IAFF,EAGoB;AAClB;AACA+S,EAAAA,WAAW,CAAC1X,KAAZ,GAAoByG,UAAU,CAACiR,WAAW,CAAC1X,KAAb,EAAoB2E,IAApB,CAA9B;AACA,MAAIvJ,SAAS,GAAGsc,WAAW,CAACtc,SAA5B;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,SAAS,CAAC4E,KAAV,GAAkByG,UAAU,CAACrL,SAAS,CAAC4E,KAAX,EAAkB2E,IAAlB,CAA5B;AACD;;;AAUD,MAAIzJ,IAAI,GAAGwc,WAAX;AACA,MAAIhb,MAAM,GAAGgb,WAAW,CAACnc,MAAzB;;AACA,SAAOmB,MAAM,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,MAAM,CAAC2Y,UAAP,GAAoB5O,UAAU,CAAC/J,MAAM,CAAC2Y,UAAR,EAAoB1Q,IAApB,CAA9B;AACAvJ,IAAAA,SAAS,GAAGsB,MAAM,CAACtB,SAAnB;;AACA,QAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,MAAAA,SAAS,CAACia,UAAV,GAAuB5O,UAAU,CAACrL,SAAS,CAACia,UAAX,EAAuB1Q,IAAvB,CAAjC;AACD,KAFD;;AASAzJ,IAAAA,IAAI,GAAGwB,MAAP;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAACnB,MAAhB;AACD;;AACD,MAAIL,IAAI,CAACjC,GAAL,KAAaxE,QAAjB,EAA2B;AACzB,UAAMgK,IAAe,GAAGvD,IAAI,CAACqB,SAA7B;AACA,WAAOkC,IAAP;AACD,GAHD,MAGO;AACL,WAAO,IAAP;AACD;AACF;;AC9KD;AACA,AAwIO,MAAMkZ,WAAW,GAAG,CAApB;AACP,AAAO,MAAMC,YAAY,GAAG,CAArB;AACP,AAAO,MAAM7B,WAAW,GAAG,CAApB;AACP,AAAO,MAAM8B,aAAa,GAAG,CAAtB;AAGP;AACA;;AACA,IAAIC,cAAc,GAAG,KAArB;AAEA;AAWA,AAAO,SAASC,qBAAT,CAAsC/e,KAAtC,EAA0D;AAC/D,QAAMiY,KAAyB,GAAG;AAChC+G,IAAAA,SAAS,EAAEhf,KAAK,CAACuY,aADe;AAEhC0G,IAAAA,eAAe,EAAE,IAFe;AAGhCC,IAAAA,cAAc,EAAE,IAHgB;AAIhChC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,IADH;AAENa,MAAAA,WAAW,EAAE,IAFP;AAGNhX,MAAAA,KAAK,EAAEe;AAHD,KAJwB;AAShCoX,IAAAA,OAAO,EAAE;AATuB,GAAlC;AAWAnf,EAAAA,KAAK,CAACgd,WAAN,GAAoB/E,KAApB;AACD;AAED,AAAO,SAASmH,gBAAT,CACL5b,OADK,EAEL8R,cAFK,EAGC;AACN;AACA,QAAM2C,KAAyB,GAAI3C,cAAc,CAAC0H,WAAlD;AACA,QAAMqC,YAAgC,GAAI7b,OAAO,CAACwZ,WAAlD;;AACA,MAAI/E,KAAK,KAAKoH,YAAd,EAA4B;AAC1B,UAAMC,KAAyB,GAAG;AAChCN,MAAAA,SAAS,EAAEK,YAAY,CAACL,SADQ;AAEhCC,MAAAA,eAAe,EAAEI,YAAY,CAACJ,eAFE;AAGhCC,MAAAA,cAAc,EAAEG,YAAY,CAACH,cAHG;AAIhChC,MAAAA,MAAM,EAAEmC,YAAY,CAACnC,MAJW;AAKhCiC,MAAAA,OAAO,EAAEE,YAAY,CAACF;AALU,KAAlC;AAOA7J,IAAAA,cAAc,CAAC0H,WAAf,GAA6BsC,KAA7B;AACD;AACF;AAED,AAAO,SAASxC,YAAT,CAAsB/Q,SAAtB,EAAyCJ,IAAzC,EAAgE;AACrE,QAAMkR,MAAiB,GAAG;AACxB9Q,IAAAA,SADwB;AAExBJ,IAAAA,IAFwB;AAIxB1L,IAAAA,GAAG,EAAE0e,WAJmB;AAKxBjf,IAAAA,OAAO,EAAE,IALe;AAMxBiY,IAAAA,QAAQ,EAAE,IANc;AAQxByF,IAAAA,IAAI,EAAE;AARkB,GAA1B;AAUA,SAAOP,MAAP;AACD;AAED,AAAO,SAAS0C,aAAT,CACLvf,KADK,EAEL6c,MAFK,EAGLlR,IAHK,EAIa;AAClB,QAAMqR,WAAW,GAAGhd,KAAK,CAACgd,WAA1B;;AACA,MAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA,WAAO,IAAP;AACD;;AAED,QAAMC,WAA+B,GAAID,WAAD,CAAmBE,MAA3D;;AAiBA,MAAIsC,8BAA8B,CAACxf,AAAD,CAAlC,EAA2C;AACzC;AACA;AACA,UAAMmd,OAAO,GAAGF,WAAW,CAACE,OAA5B;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAN,MAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd;AACD,KAHD,MAGO;AACLA,MAAAA,MAAM,CAACO,IAAP,GAAcD,OAAO,CAACC,IAAtB;AACAD,MAAAA,OAAO,CAACC,IAAR,GAAeP,MAAf;AACD;;AACDI,IAAAA,WAAW,CAACE,OAAZ,GAAsBN,MAAtB,CAXyC;AAczC;AACA;AACA;;AACA,WAAO4B,oCAAoC,CAACze,KAAD,EAAQ2L,IAAR,CAA3C;AACD,GAlBD,MAkBO;AACL,WAAO4S,4BAA4B,CAACve,KAAD,EAAQid,WAAR,EAAqBJ,MAArB,EAA6BlR,IAA7B,CAAnC;AACD;AACF;AAED,AAAO,SAAS8T,mBAAT,CAA6Bha,IAA7B,EAA8CzF,KAA9C,EAA4D2L,IAA5D,EAAwE;AAC7E,QAAMqR,WAAW,GAAGhd,KAAK,CAACgd,WAA1B;;AACA,MAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACD;;AAED,QAAMC,WAA+B,GAAID,WAAD,CAAmBE,MAA3D;;AACA,MAAIjQ,gBAAgB,CAACtB,IAAD,CAApB,EAA4B;AAC1B,QAAI+T,UAAU,GAAGzC,WAAW,CAACjW,KAA7B,CAD0B;AAI1B;AACA;AACA;AACA;;AACA0Y,IAAAA,UAAU,GAAG/R,cAAc,CAAC+R,UAAD,EAAaja,IAAI,CAACkF,YAAlB,CAA3B,CAR0B;;AAW1B,UAAMgV,aAAa,GAAGlS,UAAU,CAACiS,UAAD,EAAa/T,IAAb,CAAhC;AACAsR,IAAAA,WAAW,CAACjW,KAAZ,GAAoB2Y,aAApB,CAZ0B;AAc1B;AACA;;AACAjR,IAAAA,iBAAiB,CAACjJ,IAAD,EAAOka,aAAP,CAAjB;AACD;AACF;AAED,AAAO,SAASC,qBAAT,CACLtK,cADK,EAELuK,cAFK,EAGL;AACA;AACA;AACA;AACA,MAAI5H,KAAyB,GAAI3C,cAAc,CAAC0H,WAAhD,CAJA;;AAOA,QAAMxZ,OAAO,GAAG8R,cAAc,CAAClT,SAA/B;;AACA,MAAIoB,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAM6b,YAAgC,GAAI7b,OAAO,CAACwZ,WAAlD;;AACA,QAAI/E,KAAK,KAAKoH,YAAd,EAA4B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,UAAIS,QAAQ,GAAG,IAAf;AACA,UAAIC,OAAO,GAAG,IAAd;AACA,YAAMd,eAAe,GAAGhH,KAAK,CAACgH,eAA9B;;AACA,UAAIA,eAAe,KAAK,IAAxB,EAA8B;AAC5B;AACA,YAAIpC,MAAM,GAAGoC,eAAb;;AACA,WAAG;AACD,gBAAMK,KAAoB,GAAG;AAC3BvT,YAAAA,SAAS,EAAE8Q,MAAM,CAAC9Q,SADS;AAE3BJ,YAAAA,IAAI,EAAEkR,MAAM,CAAClR,IAFc;AAI3B1L,YAAAA,GAAG,EAAE4c,MAAM,CAAC5c,GAJe;AAK3BP,YAAAA,OAAO,EAAEmd,MAAM,CAACnd,OALW;AAM3BiY,YAAAA,QAAQ,EAAEkF,MAAM,CAAClF,QANU;AAQ3ByF,YAAAA,IAAI,EAAE;AARqB,WAA7B;;AAUA,cAAI2C,OAAO,KAAK,IAAhB,EAAsB;AACpBD,YAAAA,QAAQ,GAAGC,OAAO,GAAGT,KAArB;AACD,WAFD,MAEO;AACLS,YAAAA,OAAO,CAAC3C,IAAR,GAAekC,KAAf;AACAS,YAAAA,OAAO,GAAGT,KAAV;AACD;;AACDzC,UAAAA,MAAM,GAAGA,MAAM,CAACO,IAAhB;AACD,SAlBD,QAkBSP,MAAM,KAAK,IAlBpB,EAH4B;;;AAwB5B,YAAIkD,OAAO,KAAK,IAAhB,EAAsB;AACpBD,UAAAA,QAAQ,GAAGC,OAAO,GAAGF,cAArB;AACD,SAFD,MAEO;AACLE,UAAAA,OAAO,CAAC3C,IAAR,GAAeyC,cAAf;AACAE,UAAAA,OAAO,GAAGF,cAAV;AACD;AACF,OA9BD,MA8BO;AACL;AACAC,QAAAA,QAAQ,GAAGC,OAAO,GAAGF,cAArB;AACD;;AACD5H,MAAAA,KAAK,GAAG;AACN+G,QAAAA,SAAS,EAAEK,YAAY,CAACL,SADlB;AAENC,QAAAA,eAAe,EAAEa,QAFX;AAGNZ,QAAAA,cAAc,EAAEa,OAHV;AAIN7C,QAAAA,MAAM,EAAEmC,YAAY,CAACnC,MAJf;AAKNiC,QAAAA,OAAO,EAAEE,YAAY,CAACF;AALhB,OAAR;AAOA7J,MAAAA,cAAc,CAAC0H,WAAf,GAA6B/E,KAA7B;AACA;AACD;AACF,GAhED;;;AAmEA,QAAMiH,cAAc,GAAGjH,KAAK,CAACiH,cAA7B;;AACA,MAAIA,cAAc,KAAK,IAAvB,EAA6B;AAC3BjH,IAAAA,KAAK,CAACgH,eAAN,GAAwBY,cAAxB;AACD,GAFD,MAEO;AACLX,IAAAA,cAAc,CAAC9B,IAAf,GAAsByC,cAAtB;AACD;;AACD5H,EAAAA,KAAK,CAACiH,cAAN,GAAuBW,cAAvB;AACD;;AAED,SAASG,kBAAT,CACE1K,cADF,EAEE2C,KAFF,EAGE4E,MAHF,EAIEoD,SAJF,EAKEC,SALF,EAMEpN,QANF,EAOO;AACL,UAAQ+J,MAAM,CAAC5c,GAAf;AACE,SAAK2e,YAAL;AAAmB;AACjB,cAAMlf,OAAO,GAAGmd,MAAM,CAACnd,OAAvB;;AACA,YAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;AACjC;AAIA,gBAAMygB,SAAS,GAAGzgB,OAAO,CAACkb,IAAR,CAAa9H,QAAb,EAAuBmN,SAAvB,EAAkCC,SAAlC,CAAlB;;AAeA,iBAAOC,SAAP;AACD,SAvBgB;;;AAyBjB,eAAOzgB,OAAP;AACD;;AACD,SAAKmf,aAAL;AAAoB;AAClBvJ,QAAAA,cAAc,CAAChT,KAAf,GACGgT,cAAc,CAAChT,KAAf,GAAuB,CAAClB,aAAzB,GAA0CX,UAD5C;AAED;AACD;;AACA,SAAKke,WAAL;AAAkB;AAChB,cAAMjf,OAAO,GAAGmd,MAAM,CAACnd,OAAvB;AACA,YAAI0gB,YAAJ;;AACA,YAAI,OAAO1gB,OAAP,KAAmB,UAAvB,EAAmC;AACjC;AAIA0gB,UAAAA,YAAY,GAAG1gB,OAAO,CAACkb,IAAR,CAAa9H,QAAb,EAAuBmN,SAAvB,EAAkCC,SAAlC,CAAf;AAeD,SApBD,MAoBO;AACL;AACAE,UAAAA,YAAY,GAAG1gB,OAAf;AACD;;AACD,YAAI0gB,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK9Z,SAA9C,EAAyD;AACvD;AACA,iBAAO2Z,SAAP;AACD,SA9Be;;;AAgChB,eAAO5lB,MAAM,CAAC,EAAD,EAAK4lB,SAAL,EAAgBG,YAAhB,CAAb;AACD;;AACD,SAAKrD,WAAL;AAAkB;AAChB+B,QAAAA,cAAc,GAAG,IAAjB;AACA,eAAOmB,SAAP;AACD;AAtEH;;AAwEA,SAAOA,SAAP;AACD;;AAED,AAAO,SAASI,kBAAT,CACL/K,cADK,EAEL7E,KAFK,EAGLqC,QAHK,EAILjE,WAJK,EAKC;AACN;AACA,QAAMoJ,KAAyB,GAAI3C,cAAc,CAAC0H,WAAlD;AAEA8B,EAAAA,cAAc,GAAG,KAAjB;;AAMA,MAAIG,eAAe,GAAGhH,KAAK,CAACgH,eAA5B;AACA,MAAIC,cAAc,GAAGjH,KAAK,CAACiH,cAA3B,CAXM;;AAcN,MAAIoB,YAAY,GAAGrI,KAAK,CAACiF,MAAN,CAAaC,OAAhC;;AACA,MAAImD,YAAY,KAAK,IAArB,EAA2B;AACzBrI,IAAAA,KAAK,CAACiF,MAAN,CAAaC,OAAb,GAAuB,IAAvB,CADyB;AAIzB;;AACA,UAAMe,iBAAiB,GAAGoC,YAA1B;AACA,UAAMnC,kBAAkB,GAAGD,iBAAiB,CAACd,IAA7C;AACAc,IAAAA,iBAAiB,CAACd,IAAlB,GAAyB,IAAzB,CAPyB;;AASzB,QAAI8B,cAAc,KAAK,IAAvB,EAA6B;AAC3BD,MAAAA,eAAe,GAAGd,kBAAlB;AACD,KAFD,MAEO;AACLe,MAAAA,cAAc,CAAC9B,IAAf,GAAsBe,kBAAtB;AACD;;AACDe,IAAAA,cAAc,GAAGhB,iBAAjB,CAdyB;AAiBzB;AACA;AACA;AACA;;AACA,UAAM1a,OAAO,GAAG8R,cAAc,CAAClT,SAA/B;;AACA,QAAIoB,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA,YAAM6b,YAAgC,GAAI7b,OAAO,CAACwZ,WAAlD;AACA,YAAMuD,qBAAqB,GAAGlB,YAAY,CAACH,cAA3C;;AACA,UAAIqB,qBAAqB,KAAKrB,cAA9B,EAA8C;AAC5C,YAAIqB,qBAAqB,KAAK,IAA9B,EAAoC;AAClClB,UAAAA,YAAY,CAACJ,eAAb,GAA+Bd,kBAA/B;AACD,SAFD,MAEO;AACLoC,UAAAA,qBAAqB,CAACnD,IAAtB,GAA6Be,kBAA7B;AACD;;AACDkB,QAAAA,YAAY,CAACH,cAAb,GAA8BhB,iBAA9B;AACD;AACF;AACF,GAlDK;;;AAqDN,MAAIe,eAAe,KAAK,IAAxB,EAA8B;AAC5B;AACA,QAAIuB,QAAQ,GAAGvI,KAAK,CAAC+G,SAArB,CAF4B;AAI5B;;AACA,QAAIyB,QAAQ,GAAG1Y,OAAf;AAEA,QAAI2Y,YAAY,GAAG,IAAnB;AACA,QAAIC,kBAAkB,GAAG,IAAzB;AACA,QAAIC,iBAAiB,GAAG,IAAxB;AAEA,QAAI/D,MAAM,GAAGoC,eAAb;;AACA,OAAG;AACD,YAAM9Q,UAAU,GAAG0O,MAAM,CAAClR,IAA1B;AACA,YAAMkV,eAAe,GAAGhE,MAAM,CAAC9Q,SAA/B;;AACA,UAAI,CAACwB,eAAe,CAACsB,WAAD,EAAcV,UAAd,CAApB,EAA+C;AAC7C;AACA;AACA;AACA,cAAMmR,KAAoB,GAAG;AAC3BvT,UAAAA,SAAS,EAAE8U,eADgB;AAE3BlV,UAAAA,IAAI,EAAEwC,UAFqB;AAI3BlO,UAAAA,GAAG,EAAE4c,MAAM,CAAC5c,GAJe;AAK3BP,UAAAA,OAAO,EAAEmd,MAAM,CAACnd,OALW;AAM3BiY,UAAAA,QAAQ,EAAEkF,MAAM,CAAClF,QANU;AAQ3ByF,UAAAA,IAAI,EAAE;AARqB,SAA7B;;AAUA,YAAIwD,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BD,UAAAA,kBAAkB,GAAGC,iBAAiB,GAAGtB,KAAzC;AACAoB,UAAAA,YAAY,GAAGF,QAAf;AACD,SAHD,MAGO;AACLI,UAAAA,iBAAiB,GAAGA,iBAAiB,CAACxD,IAAlB,GAAyBkC,KAA7C;AACD,SAnB4C;;;AAqB7CmB,QAAAA,QAAQ,GAAGhT,UAAU,CAACgT,QAAD,EAAWtS,UAAX,CAArB;AACD,OAtBD,MAsBO;AACL;AAEA,YAAIyS,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,gBAAMtB,KAAoB,GAAG;AAC3BvT,YAAAA,SAAS,EAAE8U,eADgB;AAE3B;AACA;AACA;AACAlV,YAAAA,IAAI,EAAE3D,MALqB;AAO3B/H,YAAAA,GAAG,EAAE4c,MAAM,CAAC5c,GAPe;AAQ3BP,YAAAA,OAAO,EAAEmd,MAAM,CAACnd,OARW;AAS3BiY,YAAAA,QAAQ,EAAEkF,MAAM,CAAClF,QATU;AAW3ByF,YAAAA,IAAI,EAAE;AAXqB,WAA7B;AAaAwD,UAAAA,iBAAiB,GAAGA,iBAAiB,CAACxD,IAAlB,GAAyBkC,KAA7C;AACD,SAlBI;;;AAqBLkB,QAAAA,QAAQ,GAAGR,kBAAkB,CAC3B1K,cAD2B,EAE3B2C,KAF2B,EAG3B4E,MAH2B,EAI3B2D,QAJ2B,EAK3B/P,KAL2B,EAM3BqC,QAN2B,CAA7B;AAQA,cAAM6E,QAAQ,GAAGkF,MAAM,CAAClF,QAAxB;;AACA,YACEA,QAAQ,KAAK,IAAb;AAEA;AACAkF,QAAAA,MAAM,CAAClR,IAAP,KAAgB3D,MAJlB,EAKE;AACAsN,UAAAA,cAAc,CAAChT,KAAf,IAAwB9B,QAAxB;AACA,gBAAM2e,OAAO,GAAGlH,KAAK,CAACkH,OAAtB;;AACA,cAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBlH,YAAAA,KAAK,CAACkH,OAAN,GAAgB,CAACtC,MAAD,CAAhB;AACD,WAFD,MAEO;AACLsC,YAAAA,OAAO,CAAClR,IAAR,CAAa4O,MAAb;AACD;AACF;AACF;;AACDA,MAAAA,MAAM,GAAGA,MAAM,CAACO,IAAhB;;AACA,UAAIP,MAAM,KAAK,IAAf,EAAqB;AACnByD,QAAAA,YAAY,GAAGrI,KAAK,CAACiF,MAAN,CAAaC,OAA5B;;AACA,YAAImD,YAAY,KAAK,IAArB,EAA2B;AACzB;AACD,SAFD,MAEO;AACL;AACA;AACA,gBAAMpC,iBAAiB,GAAGoC,YAA1B,CAHK;AAKL;;AACA,gBAAMnC,kBAAkB,GAAKD,iBAAiB,CAACd,IAA/C;AACAc,UAAAA,iBAAiB,CAACd,IAAlB,GAAyB,IAAzB;AACAP,UAAAA,MAAM,GAAGsB,kBAAT;AACAlG,UAAAA,KAAK,CAACiH,cAAN,GAAuBhB,iBAAvB;AACAjG,UAAAA,KAAK,CAACiF,MAAN,CAAaC,OAAb,GAAuB,IAAvB;AACD;AACF;AACF,KAxFD,QAwFS,IAxFT;;AA0FA,QAAIyD,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BF,MAAAA,YAAY,GAAGF,QAAf;AACD;;AAEDvI,IAAAA,KAAK,CAAC+G,SAAN,GAAoB0B,YAApB;AACAzI,IAAAA,KAAK,CAACgH,eAAN,GAAwB0B,kBAAxB;AACA1I,IAAAA,KAAK,CAACiH,cAAN,GAAuB0B,iBAAvB,CA5G4B;AA+G5B;AACA;;AACA,UAAME,eAAe,GAAG7I,KAAK,CAACiF,MAAN,CAAac,WAArC;;AACA,QAAI8C,eAAe,KAAK,IAAxB,EAA8B;AAC5B,UAAI9C,WAAW,GAAG8C,eAAlB;;AACA,SAAG;AACDL,QAAAA,QAAQ,GAAGhT,UAAU,CAACgT,QAAD,EAAWzC,WAAW,CAACrS,IAAvB,CAArB;AACAqS,QAAAA,WAAW,GAAKA,WAAD,CAAmBZ,IAAlC;AACD,OAHD,QAGSY,WAAW,KAAK8C,eAHzB;AAID,KAND,MAMO,IAAI7B,eAAe,KAAK,IAAxB,EAA8B;AACnC;AACA;AACAhH,MAAAA,KAAK,CAACiF,MAAN,CAAalW,KAAb,GAAqBe,OAArB;AACD,KA5H2B;AA+H5B;AACA;AACA;AACA;AACA;AACA;;;AACAgZ,IAAAA,sBAAsB,CAACN,QAAD,CAAtB;AACAnL,IAAAA,cAAc,CAACtO,KAAf,GAAuByZ,QAAvB;AACAnL,IAAAA,cAAc,CAACiD,aAAf,GAA+BiI,QAA/B;AACD;AAKF;;AAED,SAASQ,YAAT,CAAsBrJ,QAAtB,EAAgCvY,OAAhC,EAAyC;AACvC,MAAI,OAAOuY,QAAP,KAAoB,UAAxB,EAAoC;AAClC,UAAM,IAAI9U,KAAJ,CACJ,uFACe8U,QADf,CADI,CAAN;AAID;;AAEDA,EAAAA,QAAQ,CAACiD,IAAT,CAAcxb,OAAd;AACD;;AAED,AAAO,SAAS6hB,mCAAT,GAA+C;AACpDnC,EAAAA,cAAc,GAAG,KAAjB;AACD;AAED,AAAO,SAASoC,kCAAT,GAAuD;AAC5D,SAAOpC,cAAP;AACD;AAED,AAAO,SAASqC,iBAAT,CACLC,YADK,EAELC,aAFK,EAGLvO,QAHK,EAIC;AACN;AACA,QAAMqM,OAAO,GAAGkC,aAAa,CAAClC,OAA9B;AACAkC,EAAAA,aAAa,CAAClC,OAAd,GAAwB,IAAxB;;AACA,MAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB,SAAK,IAAInR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmR,OAAO,CAACjH,MAA5B,EAAoClK,CAAC,EAArC,EAAyC;AACvC,YAAMsT,MAAM,GAAGnC,OAAO,CAACnR,CAAD,CAAtB;AACA,YAAM2J,QAAQ,GAAG2J,MAAM,CAAC3J,QAAxB;;AACA,UAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB2J,QAAAA,MAAM,CAAC3J,QAAP,GAAkB,IAAlB;AACAqJ,QAAAA,YAAY,CAACrJ,QAAD,EAAW7E,QAAX,CAAZ;AACD;AACF;AACF;AACF;;ACjmBD;;AACA,AAAO,MAAMyO,eAAe,GAAG,IAAI1mB,eAAJ,GAAsB2mB,IAA9C;AAEP;AA0EA,SAASC,0BAAT,CACEnM,cADF,EAEEhB,IAFF,EAGEoN,wBAHF,EAIExB,SAJF,EAKE;AACA,QAAMD,SAAS,GAAG3K,cAAc,CAACiD,aAAjC;AACA,MAAI6H,YAAY,GAAGsB,wBAAwB,CAACxB,SAAD,EAAYD,SAAZ,CAA3C;;;AAiBA,QAAM1H,aAAa,GACjB6H,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK9Z,SAA1C,GACI2Z,SADJ,GAEI5lB,MAAM,CAAC,EAAD,EAAK4lB,SAAL,EAAgBG,YAAhB,CAHZ;AAIA9K,EAAAA,cAAc,CAACiD,aAAf,GAA+BA,aAA/B,CAvBA;AA0BA;;AACA,MAAIjD,cAAc,CAACtO,KAAf,KAAyBe,OAA7B,EAAsC;AACpC;AACA,UAAMiV,WAA6B,GAAI1H,cAAc,CAAC0H,WAAtD;AACAA,IAAAA,WAAW,CAACgC,SAAZ,GAAwBzG,aAAxB;AACD;AACF;;AAED,MAAMoJ,qBAAqB,GAAG;AAC5Blf,EAAAA,SAD4B;;AAE5Bmf,EAAAA,eAAe,CAACvR,IAAD,EAAO3Q,OAAP,EAAgBiY,QAAhB,EAA0B;AACvC,UAAM3X,KAAK,GAAG2C,GAAW,CAAC0N,IAAD,CAAzB;AACA,UAAMtE,SAAS,GAAG8V,gBAAgB,EAAlC;AACA,UAAMlW,IAAI,GAAGmW,iBAAiB,CAAC9hB,KAAD,CAA9B;AAEA,UAAM6c,MAAM,GAAGC,YAAY,CAAC/Q,SAAD,EAAYJ,IAAZ,CAA3B;AACAkR,IAAAA,MAAM,CAACnd,OAAP,GAAiBA,OAAjB;;AACA,QAAIiY,QAAQ,KAAKrR,SAAb,IAA0BqR,QAAQ,KAAK,IAA3C,EAAiD;AAC/C;AAGAkF,MAAAA,MAAM,CAAClF,QAAP,GAAkBA,QAAlB;AACD;;AAED,UAAMlS,IAAI,GAAG8Z,aAAa,CAACvf,KAAD,EAAQ6c,MAAR,EAAgBlR,IAAhB,CAA1B;;AACA,QAAIlG,IAAI,KAAK,IAAb,EAAmB;AACjBsc,MAAAA,qBAAqB,CAACtc,IAAD,EAAOzF,KAAP,EAAc2L,IAAd,EAAoBI,SAApB,CAArB;AACA0T,MAAAA,mBAAmB,CAACha,IAAD,EAAOzF,KAAP,EAAc2L,IAAd,CAAnB;AACD;AAcF,GAlC2B;;AAmC5BqW,EAAAA,mBAAmB,CAAC3R,IAAD,EAAO3Q,OAAP,EAAgBiY,QAAhB,EAA0B;AAC3C,UAAM3X,KAAK,GAAG2C,GAAW,CAAC0N,IAAD,CAAzB;AACA,UAAMtE,SAAS,GAAG8V,gBAAgB,EAAlC;AACA,UAAMlW,IAAI,GAAGmW,iBAAiB,CAAC9hB,KAAD,CAA9B;AAEA,UAAM6c,MAAM,GAAGC,YAAY,CAAC/Q,SAAD,EAAYJ,IAAZ,CAA3B;AACAkR,IAAAA,MAAM,CAAC5c,GAAP,GAAa2e,YAAb;AACA/B,IAAAA,MAAM,CAACnd,OAAP,GAAiBA,OAAjB;;AAEA,QAAIiY,QAAQ,KAAKrR,SAAb,IAA0BqR,QAAQ,KAAK,IAA3C,EAAiD;AAC/C;AAGAkF,MAAAA,MAAM,CAAClF,QAAP,GAAkBA,QAAlB;AACD;;AAED,UAAMlS,IAAI,GAAG8Z,aAAa,CAACvf,KAAD,EAAQ6c,MAAR,EAAgBlR,IAAhB,CAA1B;;AACA,QAAIlG,IAAI,KAAK,IAAb,EAAmB;AACjBsc,MAAAA,qBAAqB,CAACtc,IAAD,EAAOzF,KAAP,EAAc2L,IAAd,EAAoBI,SAApB,CAArB;AACA0T,MAAAA,mBAAmB,CAACha,IAAD,EAAOzF,KAAP,EAAc2L,IAAd,CAAnB;AACD;AAcF,GArE2B;;AAsE5BsW,EAAAA,kBAAkB,CAAC5R,IAAD,EAAOsH,QAAP,EAAiB;AACjC,UAAM3X,KAAK,GAAG2C,GAAW,CAAC0N,IAAD,CAAzB;AACA,UAAMtE,SAAS,GAAG8V,gBAAgB,EAAlC;AACA,UAAMlW,IAAI,GAAGmW,iBAAiB,CAAC9hB,KAAD,CAA9B;AAEA,UAAM6c,MAAM,GAAGC,YAAY,CAAC/Q,SAAD,EAAYJ,IAAZ,CAA3B;AACAkR,IAAAA,MAAM,CAAC5c,GAAP,GAAa8c,WAAb;;AAEA,QAAIpF,QAAQ,KAAKrR,SAAb,IAA0BqR,QAAQ,KAAK,IAA3C,EAAiD;AAC/C;AAGAkF,MAAAA,MAAM,CAAClF,QAAP,GAAkBA,QAAlB;AACD;;AAED,UAAMlS,IAAI,GAAG8Z,aAAa,CAACvf,KAAD,EAAQ6c,MAAR,EAAgBlR,IAAhB,CAA1B;;AACA,QAAIlG,IAAI,KAAK,IAAb,EAAmB;AACjBsc,MAAAA,qBAAqB,CAACtc,IAAD,EAAOzF,KAAP,EAAc2L,IAAd,EAAoBI,SAApB,CAArB;AACA0T,MAAAA,mBAAmB,CAACha,IAAD,EAAOzF,KAAP,EAAc2L,IAAd,CAAnB;AACD;AAcF;;AAvG2B,CAA9B;;AA0GA,SAASuW,0BAAT,CACE5M,cADF,EAEEhB,IAFF,EAGEpC,QAHF,EAIEC,QAJF,EAKEgQ,QALF,EAME3B,QANF,EAOE4B,WAPF,EAQE;AACA,QAAMtP,QAAQ,GAAGwC,cAAc,CAAC/R,SAAhC;;AACA,MAAI,OAAOuP,QAAQ,CAACuP,qBAAhB,KAA0C,UAA9C,EAA0D;AACxD,QAAI3I,YAAY,GAAG5G,QAAQ,CAACuP,qBAAT,CACjBlQ,QADiB,EAEjBqO,QAFiB,EAGjB4B,WAHiB,CAAnB;;AA+BA,WAAO1I,YAAP;AACD;;AAED,MAAIpF,IAAI,CAACI,SAAL,IAAkBJ,IAAI,CAACI,SAAL,CAAe4N,oBAArC,EAA2D;AACzD,WACE,CAACjI,YAAY,CAACnI,QAAD,EAAWC,QAAX,CAAb,IAAqC,CAACkI,YAAY,CAAC8H,QAAD,EAAW3B,QAAX,CADpD;AAGD;;AAED,SAAO,IAAP;AACD;;AA8ND,SAAS+B,kBAAT,CAA4BjN,cAA5B,EAAmDxC,QAAnD,EAAwE;AACtEA,EAAAA,QAAQ,CAAC0P,OAAT,GAAmBb,qBAAnB;AACArM,EAAAA,cAAc,CAAC/R,SAAf,GAA2BuP,QAA3B,CAFsE;;AAItE2P,EAAAA,GAAW,CAAC3P,QAAD,EAAWwC,cAAX,CAAX;AAID;;AAED,SAASoN,sBAAT,CACEpN,cADF,EAEEhB,IAFF,EAGE7D,KAHF,EAIO;AACL,MAAIkS,uBAAuB,GAAG,KAA9B;AACA,MAAIhN,eAAe,GAAGV,kBAAtB;AACA,MAAI7V,OAAO,GAAG6V,kBAAd;AACA,QAAM2N,WAAW,GAAGtO,IAAI,CAACsO,WAAzB;;AA4CA,MAAI,OAAOA,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3DxjB,IAAAA,OAAO,GAAGoe,WAAW,CAAEoF,WAAF,CAArB;AACD,GAFD,MAEO,AAA2B;AAChCjN,IAAAA,eAAe,GAAGN,kBAAkB,CAACC,cAAD,EAAiBhB,IAAjB,EAAuB,IAAvB,CAApC;AACA,UAAM0B,YAAY,GAAG1B,IAAI,CAAC0B,YAA1B;AACA2M,IAAAA,uBAAuB,GACrB3M,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK1P,SAD5C;AAEAlH,IAAAA,OAAO,GAAGujB,uBAAuB,GAC7B5M,gBAAgB,CAACT,cAAD,EAAiBK,eAAjB,CADa,GAE7BV,kBAFJ;AAGD;;AAED,MAAInC,QAAQ,GAAG,IAAIwB,IAAJ,CAAS7D,KAAT,EAAgBrR,OAAhB,CAAf,CA5DK;;AA4EL,QAAMyjB,KAAK,GAAIvN,cAAc,CAACiD,aAAf,GACbzF,QAAQ,CAAC+P,KAAT,KAAmB,IAAnB,IAA2B/P,QAAQ,CAAC+P,KAAT,KAAmBvc,SAA9C,GACIwM,QAAQ,CAAC+P,KADb,GAEI,IAHN;AAIAN,EAAAA,kBAAkB,CAACjN,cAAD,EAAiBxC,QAAjB,CAAlB;AAsFA;;;AACA,MAAI6P,uBAAJ,EAA6B;AAC3BjN,IAAAA,YAAY,CAACJ,cAAD,EAAiBK,eAAjB,EAAkCvW,OAAlC,CAAZ;AACD;;AAED,SAAO0T,QAAP;AACD;;AAED,SAASgQ,sBAAT,CAAgCxN,cAAhC,EAAgDxC,QAAhD,EAA0D;AACxD,QAAMqP,QAAQ,GAAGrP,QAAQ,CAAC+P,KAA1B;;AAEA,MAAI,OAAO/P,QAAQ,CAACiQ,kBAAhB,KAAuC,UAA3C,EAAuD;AACrDjQ,IAAAA,QAAQ,CAACiQ,kBAAT;AACD;;AACD,MAAI,OAAOjQ,QAAQ,CAACkQ,yBAAhB,KAA8C,UAAlD,EAA8D;AAC5DlQ,IAAAA,QAAQ,CAACkQ,yBAAT;AACD;;AAED,MAAIb,QAAQ,KAAKrP,QAAQ,CAAC+P,KAA1B,EAAiC;AAC/B;AAQAlB,IAAAA,qBAAqB,CAACK,mBAAtB,CAA0ClP,QAA1C,EAAoDA,QAAQ,CAAC+P,KAA7D,EAAoE,IAApE;AACD;AACF;;AAED,SAASI,6BAAT,CACE3N,cADF,EAEExC,QAFF,EAGEX,QAHF,EAIEiQ,WAJF,EAKE;AACA,QAAMD,QAAQ,GAAGrP,QAAQ,CAAC+P,KAA1B;;AACA,MAAI,OAAO/P,QAAQ,CAACoQ,yBAAhB,KAA8C,UAAlD,EAA8D;AAC5DpQ,IAAAA,QAAQ,CAACoQ,yBAAT,CAAmC/Q,QAAnC,EAA6CiQ,WAA7C;AACD;;AACD,MAAI,OAAOtP,QAAQ,CAACqQ,gCAAhB,KAAqD,UAAzD,EAAqE;AACnErQ,IAAAA,QAAQ,CAACqQ,gCAAT,CAA0ChR,QAA1C,EAAoDiQ,WAApD;AACD;;AAED,MAAItP,QAAQ,CAAC+P,KAAT,KAAmBV,QAAvB,EAAiC;AAC/B;AAaAR,IAAAA,qBAAqB,CAACK,mBAAtB,CAA0ClP,QAA1C,EAAoDA,QAAQ,CAAC+P,KAA7D,EAAoE,IAApE;AACD;AACF;;;AAGD,SAASO,kBAAT,CACE9N,cADF,EAEEhB,IAFF,EAGEnC,QAHF,EAIEtD,WAJF,EAKQ;AACN;AAIA,QAAMiE,QAAQ,GAAGwC,cAAc,CAAC/R,SAAhC;AACAuP,EAAAA,QAAQ,CAACrC,KAAT,GAAiB0B,QAAjB;AACAW,EAAAA,QAAQ,CAAC+P,KAAT,GAAiBvN,cAAc,CAACiD,aAAhC;AACAzF,EAAAA,QAAQ,CAAC0O,IAAT,GAAgBD,eAAhB;AAEAxC,EAAAA,qBAAqB,CAACzJ,cAAD,CAArB;AAEA,QAAMsN,WAAW,GAAGtO,IAAI,CAACsO,WAAzB;;AACA,MAAI,OAAOA,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3D9P,IAAAA,QAAQ,CAAC1T,OAAT,GAAmBoe,WAAW,CAACoF,WAAD,CAA9B;AACD,GAFD,MAEO,AAEA;AACL,UAAMjN,eAAe,GAAGN,kBAAkB,CAACC,cAAD,EAAiBhB,IAAjB,EAAuB,IAAvB,CAA1C;AACAxB,IAAAA,QAAQ,CAAC1T,OAAT,GAAmB2W,gBAAgB,CAACT,cAAD,EAAiBK,eAAjB,CAAnC;AACD;;AA+BD7C,EAAAA,QAAQ,CAAC+P,KAAT,GAAiBvN,cAAc,CAACiD,aAAhC;AAEA,QAAMmJ,wBAAwB,GAAGpN,IAAI,CAACoN,wBAAtC;;AACA,MAAI,OAAOA,wBAAP,KAAoC,UAAxC,EAAoD;AAClDD,IAAAA,0BAA0B,CACxBnM,cADwB,EAExBhB,IAFwB,EAGxBoN,wBAHwB,EAIxBvP,QAJwB,CAA1B;AAMAW,IAAAA,QAAQ,CAAC+P,KAAT,GAAiBvN,cAAc,CAACiD,aAAhC;AACD,GA9DK;AAiEN;;;AACA,MACE,OAAOjE,IAAI,CAACoN,wBAAZ,KAAyC,UAAzC,IACA,OAAO5O,QAAQ,CAACuQ,uBAAhB,KAA4C,UAD5C,KAEC,OAAOvQ,QAAQ,CAACkQ,yBAAhB,KAA8C,UAA9C,IACC,OAAOlQ,QAAQ,CAACiQ,kBAAhB,KAAuC,UAHzC,CADF,EAKE;AACAD,IAAAA,sBAAsB,CAACxN,cAAD,EAAiBxC,QAAjB,CAAtB,CADA;AAGA;;AACAuN,IAAAA,kBAAkB,CAAC/K,cAAD,EAAiBnD,QAAjB,EAA2BW,QAA3B,EAAqCjE,WAArC,CAAlB;AACAiE,IAAAA,QAAQ,CAAC+P,KAAT,GAAiBvN,cAAc,CAACiD,aAAhC;AACD;;AAED,MAAI,OAAOzF,QAAQ,CAACwQ,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,QAAIC,UAAiB,GAAGljB,MAAxB;;AAWAiV,IAAAA,cAAc,CAAChT,KAAf,IAAwBihB,UAAxB;AACD;AACF;;AAED,SAASC,wBAAT,CACElO,cADF,EAEEhB,IAFF,EAGEnC,QAHF,EAIEtD,WAJF,EAKW;AACT,QAAMiE,QAAQ,GAAGwC,cAAc,CAAC/R,SAAhC;AAEA,QAAM2O,QAAQ,GAAGoD,cAAc,CAACmO,aAAhC;AACA3Q,EAAAA,QAAQ,CAACrC,KAAT,GAAiByB,QAAjB;AAEA,QAAMwR,UAAU,GAAG5Q,QAAQ,CAAC1T,OAA5B;AACA,QAAMwjB,WAAW,GAAGtO,IAAI,CAACsO,WAAzB;AACA,MAAIR,WAAW,GAAGnN,kBAAlB;;AACA,MAAI,OAAO2N,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3DR,IAAAA,WAAW,GAAG5E,WAAW,CAACoF,WAAD,CAAzB;AACD,GAFD,MAEO,AAA2B;AAChC,UAAMe,yBAAyB,GAAGtO,kBAAkB,CAClDC,cADkD,EAElDhB,IAFkD,EAGlD,IAHkD,CAApD;AAKA8N,IAAAA,WAAW,GAAGrM,gBAAgB,CAACT,cAAD,EAAiBqO,yBAAjB,CAA9B;AACD;;AAED,QAAMjC,wBAAwB,GAAGpN,IAAI,CAACoN,wBAAtC;AACA,QAAMkC,gBAAgB,GACpB,OAAOlC,wBAAP,KAAoC,UAApC,IACA,OAAO5O,QAAQ,CAACuQ,uBAAhB,KAA4C,UAF9C,CArBS;AA0BT;AACA;AAEA;AACA;;AACA,MACE,CAACO,gBAAD,KACC,OAAO9Q,QAAQ,CAACqQ,gCAAhB,KAAqD,UAArD,IACC,OAAOrQ,QAAQ,CAACoQ,yBAAhB,KAA8C,UAFhD,CADF,EAIE;AACA,QAAIhR,QAAQ,KAAKC,QAAb,IAAyBuR,UAAU,KAAKtB,WAA5C,EAAyD;AACvDa,MAAAA,6BAA6B,CAC3B3N,cAD2B,EAE3BxC,QAF2B,EAG3BX,QAH2B,EAI3BiQ,WAJ2B,CAA7B;AAMD;AACF;;AAEDnB,EAAAA,mCAAmC;AAEnC,QAAMkB,QAAQ,GAAG7M,cAAc,CAACiD,aAAhC;AACA,MAAIiI,QAAQ,GAAI1N,QAAQ,CAAC+P,KAAT,GAAiBV,QAAjC;AACA9B,EAAAA,kBAAkB,CAAC/K,cAAD,EAAiBnD,QAAjB,EAA2BW,QAA3B,EAAqCjE,WAArC,CAAlB;AACA2R,EAAAA,QAAQ,GAAGlL,cAAc,CAACiD,aAA1B;;AACA,MACErG,QAAQ,KAAKC,QAAb,IACAgQ,QAAQ,KAAK3B,QADb,IAEA,CAACvK,iBAAiB,EAFlB,IAGA,CAACiL,kCAAkC,EAJrC,EAKE;AACA;AACA;AACA,QAAI,OAAOpO,QAAQ,CAACwQ,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,UAAIC,UAAiB,GAAGljB,MAAxB;;AAWAiV,MAAAA,cAAc,CAAChT,KAAf,IAAwBihB,UAAxB;AACD;;AACD,WAAO,KAAP;AACD;;AAED,MAAI,OAAO7B,wBAAP,KAAoC,UAAxC,EAAoD;AAClDD,IAAAA,0BAA0B,CACxBnM,cADwB,EAExBhB,IAFwB,EAGxBoN,wBAHwB,EAIxBvP,QAJwB,CAA1B;AAMAqO,IAAAA,QAAQ,GAAGlL,cAAc,CAACiD,aAA1B;AACD;;AAED,QAAMmB,YAAY,GAChBwH,kCAAkC,MAClCgB,0BAA0B,CACxB5M,cADwB,EAExBhB,IAFwB,EAGxBpC,QAHwB,EAIxBC,QAJwB,EAKxBgQ,QALwB,EAMxB3B,QANwB,EAOxB4B,WAPwB,CAF5B;;AAYA,MAAI1I,YAAJ,EAAkB;AAChB;AACA;AACA,QACE,CAACkK,gBAAD,KACC,OAAO9Q,QAAQ,CAACkQ,yBAAhB,KAA8C,UAA9C,IACC,OAAOlQ,QAAQ,CAACiQ,kBAAhB,KAAuC,UAFzC,CADF,EAIE;AACA,UAAI,OAAOjQ,QAAQ,CAACiQ,kBAAhB,KAAuC,UAA3C,EAAuD;AACrDjQ,QAAAA,QAAQ,CAACiQ,kBAAT;AACD;;AACD,UAAI,OAAOjQ,QAAQ,CAACkQ,yBAAhB,KAA8C,UAAlD,EAA8D;AAC5DlQ,QAAAA,QAAQ,CAACkQ,yBAAT;AACD;AACF;;AACD,QAAI,OAAOlQ,QAAQ,CAACwQ,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,UAAIC,UAAiB,GAAGljB,MAAxB;;AAWAiV,MAAAA,cAAc,CAAChT,KAAf,IAAwBihB,UAAxB;AACD;AACF,GA7BD,MA6BO;AACL;AACA;AACA,QAAI,OAAOzQ,QAAQ,CAACwQ,iBAAhB,KAAsC,UAA1C,EAAsD;AACpD,UAAIC,UAAiB,GAAGljB,MAAxB;;AAWAiV,MAAAA,cAAc,CAAChT,KAAf,IAAwBihB,UAAxB;AACD,KAhBI;AAmBL;;;AACAjO,IAAAA,cAAc,CAACmO,aAAf,GAA+BtR,QAA/B;AACAmD,IAAAA,cAAc,CAACiD,aAAf,GAA+BiI,QAA/B;AACD,GAtJQ;AAyJT;;;AACA1N,EAAAA,QAAQ,CAACrC,KAAT,GAAiB0B,QAAjB;AACAW,EAAAA,QAAQ,CAAC+P,KAAT,GAAiBrC,QAAjB;AACA1N,EAAAA,QAAQ,CAAC1T,OAAT,GAAmBgjB,WAAnB;AAEA,SAAO1I,YAAP;AACD;;;AAGD,SAASmK,mBAAT,CACErgB,OADF,EAEE8R,cAFF,EAGEhB,IAHF,EAIEnC,QAJF,EAKEtD,WALF,EAMW;AACT,QAAMiE,QAAQ,GAAGwC,cAAc,CAAC/R,SAAhC;AAEA6b,EAAAA,gBAAgB,CAAC5b,OAAD,EAAU8R,cAAV,CAAhB;AAEA,QAAMwO,kBAAkB,GAAGxO,cAAc,CAACmO,aAA1C;AACA,QAAMvR,QAAQ,GACZoD,cAAc,CAACrW,IAAf,KAAwBqW,cAAc,CAACyO,WAAvC,GACID,kBADJ,GAEI1I,mBAAmB,CAAC9F,cAAc,CAACrW,IAAhB,EAAsB6kB,kBAAtB,CAHzB;AAIAhR,EAAAA,QAAQ,CAACrC,KAAT,GAAiByB,QAAjB;AACA,QAAM8R,kBAAkB,GAAG1O,cAAc,CAAC2O,YAA1C;AAEA,QAAMP,UAAU,GAAG5Q,QAAQ,CAAC1T,OAA5B;AACA,QAAMwjB,WAAW,GAAGtO,IAAI,CAACsO,WAAzB;AACA,MAAIR,WAAW,GAAGnN,kBAAlB;;AACA,MAAI,OAAO2N,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;AAC3DR,IAAAA,WAAW,GAAG5E,WAAW,CAACoF,WAAD,CAAzB;AACD,GAFD,MAEO,AAA2B;AAChC,UAAMsB,mBAAmB,GAAG7O,kBAAkB,CAACC,cAAD,EAAiBhB,IAAjB,EAAuB,IAAvB,CAA9C;AACA8N,IAAAA,WAAW,GAAGrM,gBAAgB,CAACT,cAAD,EAAiB4O,mBAAjB,CAA9B;AACD;;AAED,QAAMxC,wBAAwB,GAAGpN,IAAI,CAACoN,wBAAtC;AACA,QAAMkC,gBAAgB,GACpB,OAAOlC,wBAAP,KAAoC,UAApC,IACA,OAAO5O,QAAQ,CAACuQ,uBAAhB,KAA4C,UAF9C,CAxBS;AA6BT;AACA;AAEA;AACA;;AACA,MACE,CAACO,gBAAD,KACC,OAAO9Q,QAAQ,CAACqQ,gCAAhB,KAAqD,UAArD,IACC,OAAOrQ,QAAQ,CAACoQ,yBAAhB,KAA8C,UAFhD,CADF,EAIE;AACA,QACEY,kBAAkB,KAAKE,kBAAvB,IACAN,UAAU,KAAKtB,WAFjB,EAGE;AACAa,MAAAA,6BAA6B,CAC3B3N,cAD2B,EAE3BxC,QAF2B,EAG3BX,QAH2B,EAI3BiQ,WAJ2B,CAA7B;AAMD;AACF;;AAEDnB,EAAAA,mCAAmC;AAEnC,QAAMkB,QAAQ,GAAG7M,cAAc,CAACiD,aAAhC;AACA,MAAIiI,QAAQ,GAAI1N,QAAQ,CAAC+P,KAAT,GAAiBV,QAAjC;AACA9B,EAAAA,kBAAkB,CAAC/K,cAAD,EAAiBnD,QAAjB,EAA2BW,QAA3B,EAAqCjE,WAArC,CAAlB;AACA2R,EAAAA,QAAQ,GAAGlL,cAAc,CAACiD,aAA1B;;AAEA,MACEuL,kBAAkB,KAAKE,kBAAvB,IACA7B,QAAQ,KAAK3B,QADb,IAEA,CAACvK,iBAAiB,EAFlB,IAGA,CAACiL,kCAAkC,EAHnC,IAIA,EACE9lB,4BAA4B,CAA5B,CAAA,CADF,CALF,EAWE;AACA;AACA;AACA,QAAI,OAAO0X,QAAQ,CAACqR,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD,UACEL,kBAAkB,KAAKtgB,OAAO,CAACigB,aAA/B,IACAtB,QAAQ,KAAK3e,OAAO,CAAC+U,aAFvB,EAGE;AACAjD,QAAAA,cAAc,CAAChT,KAAf,IAAwBjC,MAAxB;AACD;AACF;;AACD,QAAI,OAAOyS,QAAQ,CAACuQ,uBAAhB,KAA4C,UAAhD,EAA4D;AAC1D,UACES,kBAAkB,KAAKtgB,OAAO,CAACigB,aAA/B,IACAtB,QAAQ,KAAK3e,OAAO,CAAC+U,aAFvB,EAGE;AACAjD,QAAAA,cAAc,CAAChT,KAAf,IAAwB1B,QAAxB;AACD;AACF;;AACD,WAAO,KAAP;AACD;;AAED,MAAI,OAAO8gB,wBAAP,KAAoC,UAAxC,EAAoD;AAClDD,IAAAA,0BAA0B,CACxBnM,cADwB,EAExBhB,IAFwB,EAGxBoN,wBAHwB,EAIxBvP,QAJwB,CAA1B;AAMAqO,IAAAA,QAAQ,GAAGlL,cAAc,CAACiD,aAA1B;AACD;;AAED,QAAMmB,YAAY,GAChBwH,kCAAkC,MAClCgB,0BAA0B,CACxB5M,cADwB,EAExBhB,IAFwB,EAGxBpC,QAHwB,EAIxBC,QAJwB,EAKxBgQ,QALwB,EAMxB3B,QANwB,EAOxB4B,WAPwB,CAD1B;AAWA;AACA;AACA;AACChnB,EAAAA,4BAA4B,CAA5B,CAAA,CAfH;;AAoBA,MAAIse,YAAJ,EAAkB;AAChB;AACA;AACA,QACE,CAACkK,gBAAD,KACC,OAAO9Q,QAAQ,CAACsR,0BAAhB,KAA+C,UAA/C,IACC,OAAOtR,QAAQ,CAACuR,mBAAhB,KAAwC,UAF1C,CADF,EAIE;AACA,UAAI,OAAOvR,QAAQ,CAACuR,mBAAhB,KAAwC,UAA5C,EAAwD;AACtDvR,QAAAA,QAAQ,CAACuR,mBAAT,CAA6BlS,QAA7B,EAAuCqO,QAAvC,EAAiD4B,WAAjD;AACD;;AACD,UAAI,OAAOtP,QAAQ,CAACsR,0BAAhB,KAA+C,UAAnD,EAA+D;AAC7DtR,QAAAA,QAAQ,CAACsR,0BAAT,CAAoCjS,QAApC,EAA8CqO,QAA9C,EAAwD4B,WAAxD;AACD;AACF;;AACD,QAAI,OAAOtP,QAAQ,CAACqR,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD7O,MAAAA,cAAc,CAAChT,KAAf,IAAwBjC,MAAxB;AACD;;AACD,QAAI,OAAOyS,QAAQ,CAACuQ,uBAAhB,KAA4C,UAAhD,EAA4D;AAC1D/N,MAAAA,cAAc,CAAChT,KAAf,IAAwB1B,QAAxB;AACD;AACF,GArBD,MAqBO;AACL;AACA;AACA,QAAI,OAAOkS,QAAQ,CAACqR,kBAAhB,KAAuC,UAA3C,EAAuD;AACrD,UACEL,kBAAkB,KAAKtgB,OAAO,CAACigB,aAA/B,IACAtB,QAAQ,KAAK3e,OAAO,CAAC+U,aAFvB,EAGE;AACAjD,QAAAA,cAAc,CAAChT,KAAf,IAAwBjC,MAAxB;AACD;AACF;;AACD,QAAI,OAAOyS,QAAQ,CAACuQ,uBAAhB,KAA4C,UAAhD,EAA4D;AAC1D,UACES,kBAAkB,KAAKtgB,OAAO,CAACigB,aAA/B,IACAtB,QAAQ,KAAK3e,OAAO,CAAC+U,aAFvB,EAGE;AACAjD,QAAAA,cAAc,CAAChT,KAAf,IAAwB1B,QAAxB;AACD;AACF,KAlBI;AAqBL;;;AACA0U,IAAAA,cAAc,CAACmO,aAAf,GAA+BtR,QAA/B;AACAmD,IAAAA,cAAc,CAACiD,aAAf,GAA+BiI,QAA/B;AACD,GAvKQ;AA0KT;;;AACA1N,EAAAA,QAAQ,CAACrC,KAAT,GAAiB0B,QAAjB;AACAW,EAAAA,QAAQ,CAAC+P,KAAT,GAAiBrC,QAAjB;AACA1N,EAAAA,QAAQ,CAAC1T,OAAT,GAAmBgjB,WAAnB;AAEA,SAAO1I,YAAP;AACD;;AC5pCD,SAAS4K,SAAT,CACEC,WADF,EAEE/gB,OAFF,EAGEghB,OAHF,EAIE;AACA,QAAMC,QAAQ,GAAGD,OAAO,CAACE,GAAzB;;AACA,MACED,QAAQ,KAAK,IAAb,IACA,OAAOA,QAAP,KAAoB,UADpB,IAEA,OAAOA,QAAP,KAAoB,QAHtB,EAIE;AACA;AA0CA,QAAID,OAAO,CAACG,MAAZ,EAAoB;AAClB,YAAMC,KAAa,GAAIJ,OAAO,CAACG,MAA/B;AACA,UAAItU,IAAJ;;AACA,UAAIuU,KAAJ,EAAW;AACT,cAAMC,UAAU,GAAKD,KAArB;;AAEA,YAAIC,UAAU,CAAC5kB,GAAX,KAAmB1E,cAAvB,EAAuC;AACrC,gBAAM,IAAIsH,KAAJ,CACJ,kDACE,uCADF,GAEE,2CAFF,GAGE,iDAJE,CAAN;AAMD;;AAEDwN,QAAAA,IAAI,GAAGwU,UAAU,CAACthB,SAAlB;AACD;;AAED,UAAI,CAAC8M,IAAL,EAAW;AACT,cAAM,IAAIxN,KAAJ,CACJ,kCAAgC4hB,QAAhC,2CACE,qCAFE,CAAN;AAID,OAvBiB;;;AAyBlB,YAAMK,YAAY,GAAGzU,IAArB;;AAKA,YAAM0U,SAAS,GAAG,KAAKN,QAAvB,CA9BkB;;AAgClB,UACEjhB,OAAO,KAAK,IAAZ,IACAA,OAAO,CAACkhB,GAAR,KAAgB,IADhB,IAEA,OAAOlhB,OAAO,CAACkhB,GAAf,KAAuB,UAFvB,IAGAlhB,OAAO,CAACkhB,GAAR,CAAYM,UAAZ,KAA2BD,SAJ7B,EAKE;AACA,eAAOvhB,OAAO,CAACkhB,GAAf;AACD;;AACD,YAAMA,GAAG,GAAG,UAAS/pB,KAAT,EAAgB;AAC1B,YAAI6mB,IAAI,GAAGsD,YAAY,CAACtD,IAAxB;;AACA,YAAIA,IAAI,KAAKD,eAAb,EAA8B;AAC5B;AACAC,UAAAA,IAAI,GAAGsD,YAAY,CAACtD,IAAb,GAAoB,EAA3B;AACD;;AACD,YAAI7mB,KAAK,KAAK,IAAd,EAAoB;AAClB,iBAAO6mB,IAAI,CAACuD,SAAD,CAAX;AACD,SAFD,MAEO;AACLvD,UAAAA,IAAI,CAACuD,SAAD,CAAJ,GAAkBpqB,KAAlB;AACD;AACF,OAXD;;AAYA+pB,MAAAA,GAAG,CAACM,UAAJ,GAAiBD,SAAjB;AACA,aAAOL,GAAP;AACD,KAtDD,MAsDO;AACL,UAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAChC,cAAM,IAAI5hB,KAAJ,CACJ,4FADI,CAAN;AAGD;;AAED,UAAI,CAAC2hB,OAAO,CAACG,MAAb,EAAqB;AACnB,cAAM,IAAI9hB,KAAJ,CACJ,4CAA0C4hB,QAA1C,4DACE,2BADF,GAEE,sDAFF,GAGE,qGAHF,GAIE,+CAJF,GAKE,yEANE,CAAN;AAQD;AACF;AACF;;AACD,SAAOA,QAAP;AACD;;AAED,SAASQ,wBAAT,CAAkCV,WAAlC,EAAsDW,QAAtD,EAAwE;AACtE,QAAMC,WAAW,GAAG7qB,MAAM,CAACoa,SAAP,CAAiB0Q,QAAjB,CAA0BxK,IAA1B,CAA+BsK,QAA/B,CAApB;AAEA,QAAM,IAAIriB,KAAJ,CACJ,qDACEsiB,WAAW,KAAK,iBAAhB,GACI,uBAAuB7qB,MAAM,CAACmgB,IAAP,CAAYyK,QAAZ,EAAsBG,IAAtB,CAA2B,IAA3B,CAAvB,GAA0D,GAD9D,GAEIF,WAHN,YAKE,gEALF,GAME,UAPE,CAAN;AASD;;AAmBD,SAASG,WAAT,CAAqBC,QAArB,EAA+B;AAC7B,QAAM7lB,OAAO,GAAG6lB,QAAQ,CAAC5lB,QAAzB;AACA,QAAMC,IAAI,GAAG2lB,QAAQ,CAAC1lB,KAAtB;AACA,SAAOD,IAAI,CAACF,OAAD,CAAX;AACD;AAGD;AACA;AACA;;;AACA,SAAS8lB,eAAT,CAAyBC,sBAAzB,EAAiD;AAC/C,WAASC,WAAT,CAAqBnB,WAArB,EAAyCoB,aAAzC,EAAqE;AACnE,QAAI,CAACF,sBAAL,EAA6B;AAC3B;AACA;AACD;;AACD,UAAMG,SAAS,GAAGrB,WAAW,CAACqB,SAA9B;;AACA,QAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBrB,MAAAA,WAAW,CAACqB,SAAZ,GAAwB,CAACD,aAAD,CAAxB;AACApB,MAAAA,WAAW,CAACjiB,KAAZ,IAAqBhC,aAArB;AACD,KAHD,MAGO;AACLslB,MAAAA,SAAS,CAAC3X,IAAV,CAAe0X,aAAf;AACD;AACF;;AAED,WAASE,uBAAT,CACEtB,WADF,EAEEuB,iBAFF,EAGQ;AACN,QAAI,CAACL,sBAAL,EAA6B;AAC3B;AACA,aAAO,IAAP;AACD,KAJK;AAON;;;AACA,QAAIE,aAAa,GAAGG,iBAApB;;AACA,WAAOH,aAAa,KAAK,IAAzB,EAA+B;AAC7BD,MAAAA,WAAW,CAACnB,WAAD,EAAcoB,aAAd,CAAX;AACAA,MAAAA,aAAa,GAAGA,aAAa,CAACtiB,OAA9B;AACD;;AACD,WAAO,IAAP;AACD;;AAED,WAAS0iB,oBAAT,CACExB,WADF,EAEEuB,iBAFF,EAG+B;AAC7B;AACA;AACA;AACA,UAAME,gBAA6C,GAAG,IAAIC,GAAJ,EAAtD;AAEA,QAAIC,aAAa,GAAGJ,iBAApB;;AACA,WAAOI,aAAa,KAAK,IAAzB,EAA+B;AAC7B,UAAIA,aAAa,CAAC1rB,GAAd,KAAsB,IAA1B,EAAgC;AAC9BwrB,QAAAA,gBAAgB,CAACtrB,GAAjB,CAAqBwrB,aAAa,CAAC1rB,GAAnC,EAAwC0rB,aAAxC;AACD,OAFD,MAEO;AACLF,QAAAA,gBAAgB,CAACtrB,GAAjB,CAAqBwrB,aAAa,CAACza,KAAnC,EAA0Cya,aAA1C;AACD;;AACDA,MAAAA,aAAa,GAAGA,aAAa,CAAC7iB,OAA9B;AACD;;AACD,WAAO2iB,gBAAP;AACD;;AAED,WAASG,QAAT,CAAkBnmB,KAAlB,EAAgCikB,YAAhC,EAA4D;AAC1D;AACA;AACA,UAAM3E,KAAK,GAAG8G,oBAAoB,CAACpmB,KAAD,EAAQikB,YAAR,CAAlC;AACA3E,IAAAA,KAAK,CAAC7T,KAAN,GAAc,CAAd;AACA6T,IAAAA,KAAK,CAACjc,OAAN,GAAgB,IAAhB;AACA,WAAOic,KAAP;AACD;;AAED,WAAS+G,UAAT,CACEC,QADF,EAEEC,eAFF,EAGEC,QAHF,EAIU;AACRF,IAAAA,QAAQ,CAAC7a,KAAT,GAAiB+a,QAAjB;;AACA,QAAI,CAACf,sBAAL,EAA6B;AAC3B;AACA;AACAa,MAAAA,QAAQ,CAAChkB,KAAT,IAAkBhB,MAAlB;AACA,aAAOilB,eAAP;AACD;;AACD,UAAM/iB,OAAO,GAAG8iB,QAAQ,CAAClkB,SAAzB;;AACA,QAAIoB,OAAO,KAAK,IAAhB,EAAsB;AACpB,YAAMijB,QAAQ,GAAGjjB,OAAO,CAACiI,KAAzB;;AACA,UAAIgb,QAAQ,GAAGF,eAAf,EAAgC;AAC9B;AACAD,QAAAA,QAAQ,CAAChkB,KAAT,IAAkBlC,SAAlB;AACA,eAAOmmB,eAAP;AACD,OAJD,MAIO;AACL;AACA,eAAOE,QAAP;AACD;AACF,KAVD,MAUO;AACL;AACAH,MAAAA,QAAQ,CAAChkB,KAAT,IAAkBlC,SAAlB;AACA,aAAOmmB,eAAP;AACD;AACF;;AAED,WAASG,gBAAT,CAA0BJ,QAA1B,EAAkD;AAChD;AACA;AACA,QAAIb,sBAAsB,IAAIa,QAAQ,CAAClkB,SAAT,KAAuB,IAArD,EAA2D;AACzDkkB,MAAAA,QAAQ,CAAChkB,KAAT,IAAkBlC,SAAlB;AACD;;AACD,WAAOkmB,QAAP;AACD;;AAED,WAASK,cAAT,CACEpC,WADF,EAEE/gB,OAFF,EAGEojB,WAHF,EAIE5f,KAJF,EAKE;AACA,QAAIxD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACvD,GAAR,KAAgBrE,QAAxC,EAAkD;AAChD;AACA,YAAMirB,OAAO,GAAGC,mBAAmB,CAACF,WAAD,EAAcrC,WAAW,CAACjZ,IAA1B,EAAgCtE,KAAhC,CAAnC;AACA6f,MAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,aAAOsC,OAAP;AACD,KALD,MAKO;AACL;AACA,YAAME,QAAQ,GAAGZ,QAAQ,CAAC3iB,OAAD,EAAUojB,WAAV,CAAzB;AACAG,MAAAA,QAAQ,CAACxkB,MAAT,GAAkBgiB,WAAlB;AACA,aAAOwC,QAAP;AACD;AACF;;AAED,WAASC,aAAT,CACEzC,WADF,EAEE/gB,OAFF,EAGEghB,OAHF,EAIExd,KAJF,EAKS;AACP,UAAM+c,WAAW,GAAGS,OAAO,CAACvlB,IAA5B;;AACA,QAAI8kB,WAAW,KAAK5mB,mBAApB,EAAyC;AACvC,aAAO8pB,cAAc,CACnB1C,WADmB,EAEnB/gB,OAFmB,EAGnBghB,OAAO,CAAC/T,KAAR,CAAcG,QAHK,EAInB5J,KAJmB,EAKnBwd,OAAO,CAAChqB,GALW,CAArB;AAOD;;AACD,QAAIgJ,OAAO,KAAK,IAAhB,EAAsB;AACpB,UACEA,OAAO,CAACugB,WAAR,KAAwBA,WAAxB;AAECjJ,MAAAA,CAEG,KAJJ;AAMA;AACA;AACA;AACC,aAAOiJ,WAAP,KAAuB,QAAvB,IACCA,WAAW,KAAK,IADjB,IAECA,WAAW,CAAC5kB,QAAZ,KAAyBvB,eAF1B,IAGC0nB,WAAW,CAACvB,WAAD,CAAX,KAA6BvgB,OAAO,CAACvE,IAbzC,EAcE;AACA;AACA,cAAM8nB,QAAQ,GAAGZ,QAAQ,CAAC3iB,OAAD,EAAUghB,OAAO,CAAC/T,KAAlB,CAAzB;AACAsW,QAAAA,QAAQ,CAACrC,GAAT,GAAeJ,SAAS,CAACC,WAAD,EAAc/gB,OAAd,EAAuBghB,OAAvB,CAAxB;AACAuC,QAAAA,QAAQ,CAACxkB,MAAT,GAAkBgiB,WAAlB;;AAKA,eAAOwC,QAAP;AACD;AACF,KArCM;;;AAuCP,UAAMF,OAAO,GAAGK,sBAAsB,CAAC1C,OAAD,EAAUD,WAAW,CAACjZ,IAAtB,EAA4BtE,KAA5B,CAAtC;AACA6f,IAAAA,OAAO,CAACnC,GAAR,GAAcJ,SAAS,CAACC,WAAD,EAAc/gB,OAAd,EAAuBghB,OAAvB,CAAvB;AACAqC,IAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,WAAOsC,OAAP;AACD;;AAED,WAASM,YAAT,CACE5C,WADF,EAEE/gB,OAFF,EAGE4jB,MAHF,EAIEpgB,KAJF,EAKS;AACP,QACExD,OAAO,KAAK,IAAZ,IACAA,OAAO,CAACvD,GAAR,KAAgBvE,UADhB,IAEA8H,OAAO,CAACD,SAAR,CAAkBkO,aAAlB,KAAoC2V,MAAM,CAAC3V,aAF3C,IAGAjO,OAAO,CAACD,SAAR,CAAkB8jB,cAAlB,KAAqCD,MAAM,CAACC,cAJ9C,EAKE;AACA;AACA,YAAMR,OAAO,GAAGS,qBAAqB,CAACF,MAAD,EAAS7C,WAAW,CAACjZ,IAArB,EAA2BtE,KAA3B,CAArC;AACA6f,MAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,aAAOsC,OAAP;AACD,KAVD,MAUO;AACL;AACA,YAAME,QAAQ,GAAGZ,QAAQ,CAAC3iB,OAAD,EAAU4jB,MAAM,CAACxW,QAAP,IAAmB,EAA7B,CAAzB;AACAmW,MAAAA,QAAQ,CAACxkB,MAAT,GAAkBgiB,WAAlB;AACA,aAAOwC,QAAP;AACD;AACF;;AAED,WAASE,cAAT,CACE1C,WADF,EAEE/gB,OAFF,EAGE+jB,QAHF,EAIEvgB,KAJF,EAKExM,GALF,EAMS;AACP,QAAIgJ,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACvD,GAAR,KAAgBpE,QAAxC,EAAkD;AAChD;AACA,YAAMgrB,OAAO,GAAGW,uBAAuB,CACrCD,QADqC,EAErChD,WAAW,CAACjZ,IAFyB,EAGrCtE,KAHqC,EAIrCxM,GAJqC,CAAvC;AAMAqsB,MAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,aAAOsC,OAAP;AACD,KAVD,MAUO;AACL;AACA,YAAME,QAAQ,GAAGZ,QAAQ,CAAC3iB,OAAD,EAAU+jB,QAAV,CAAzB;AACAR,MAAAA,QAAQ,CAACxkB,MAAT,GAAkBgiB,WAAlB;AACA,aAAOwC,QAAP;AACD;AACF;;AAED,WAASU,WAAT,CACElD,WADF,EAEEW,QAFF,EAGEle,KAHF,EAIgB;AACd,QACG,OAAOke,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,EAA9C,IACA,OAAOA,QAAP,KAAoB,QAFtB,EAGE;AACA;AACA;AACA;AACA,YAAM2B,OAAO,GAAGC,mBAAmB,CACjC,KAAK5B,QAD4B,EAEjCX,WAAW,CAACjZ,IAFqB,EAGjCtE,KAHiC,CAAnC;AAKA6f,MAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,aAAOsC,OAAP;AACD;;AAED,QAAI,OAAO3B,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,cAAQA,QAAQ,CAAC/lB,QAAjB;AACE,aAAKpC,kBAAL;AAAyB;AACvB,kBAAM8pB,OAAO,GAAGK,sBAAsB,CACpChC,QADoC,EAEpCX,WAAW,CAACjZ,IAFwB,EAGpCtE,KAHoC,CAAtC;AAKA6f,YAAAA,OAAO,CAACnC,GAAR,GAAcJ,SAAS,CAACC,WAAD,EAAc,IAAd,EAAoBW,QAApB,CAAvB;AACA2B,YAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,mBAAOsC,OAAP;AACD;;AACD,aAAK3pB,iBAAL;AAAwB;AACtB,kBAAM2pB,OAAO,GAAGS,qBAAqB,CACnCpC,QADmC,EAEnCX,WAAW,CAACjZ,IAFuB,EAGnCtE,KAHmC,CAArC;AAKA6f,YAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,mBAAOsC,OAAP;AACD;;AACD,aAAKjpB,eAAL;AAAsB;AACpB,kBAAM8B,OAAO,GAAGwlB,QAAQ,CAACvlB,QAAzB;AACA,kBAAMC,IAAI,GAAGslB,QAAQ,CAACrlB,KAAtB;AACA,mBAAO4nB,WAAW,CAAClD,WAAD,EAAc3kB,IAAI,CAACF,OAAD,CAAlB,EAA6BsH,KAA7B,CAAlB;AACD;AAxBH;;AA2BA,UAAIhD,OAAO,CAACkhB,QAAD,CAAP,IAAqB5mB,aAAa,CAAC4mB,QAAD,CAAtC,EAAkD;AAChD,cAAM2B,OAAO,GAAGW,uBAAuB,CACrCtC,QADqC,EAErCX,WAAW,CAACjZ,IAFyB,EAGrCtE,KAHqC,EAIrC,IAJqC,CAAvC;AAMA6f,QAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,eAAOsC,OAAP;AACD;;AAED5B,MAAAA,wBAAwB,CAACV,WAAD,EAAcW,QAAd,CAAxB;AACD;;AAQD,WAAO,IAAP;AACD;;AAED,WAASwC,UAAT,CACEnD,WADF,EAEEoD,QAFF,EAGEzC,QAHF,EAIEle,KAJF,EAKgB;AACd;AAEA,UAAMxM,GAAG,GAAGmtB,QAAQ,KAAK,IAAb,GAAoBA,QAAQ,CAACntB,GAA7B,GAAmC,IAA/C;;AAEA,QACG,OAAO0qB,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,EAA9C,IACA,OAAOA,QAAP,KAAoB,QAFtB,EAGE;AACA;AACA;AACA;AACA,UAAI1qB,GAAG,KAAK,IAAZ,EAAkB;AAChB,eAAO,IAAP;AACD;;AACD,aAAOmsB,cAAc,CAACpC,WAAD,EAAcoD,QAAd,EAAwB,KAAKzC,QAA7B,EAAuCle,KAAvC,CAArB;AACD;;AAED,QAAI,OAAOke,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,cAAQA,QAAQ,CAAC/lB,QAAjB;AACE,aAAKpC,kBAAL;AAAyB;AACvB,gBAAImoB,QAAQ,CAAC1qB,GAAT,KAAiBA,GAArB,EAA0B;AACxB,qBAAOwsB,aAAa,CAACzC,WAAD,EAAcoD,QAAd,EAAwBzC,QAAxB,EAAkCle,KAAlC,CAApB;AACD,aAFD,MAEO;AACL,qBAAO,IAAP;AACD;AACF;;AACD,aAAK9J,iBAAL;AAAwB;AACtB,gBAAIgoB,QAAQ,CAAC1qB,GAAT,KAAiBA,GAArB,EAA0B;AACxB,qBAAO2sB,YAAY,CAAC5C,WAAD,EAAcoD,QAAd,EAAwBzC,QAAxB,EAAkCle,KAAlC,CAAnB;AACD,aAFD,MAEO;AACL,qBAAO,IAAP;AACD;AACF;;AACD,aAAKpJ,eAAL;AAAsB;AACpB,kBAAM8B,OAAO,GAAGwlB,QAAQ,CAACvlB,QAAzB;AACA,kBAAMC,IAAI,GAAGslB,QAAQ,CAACrlB,KAAtB;AACA,mBAAO6nB,UAAU,CAACnD,WAAD,EAAcoD,QAAd,EAAwB/nB,IAAI,CAACF,OAAD,CAA5B,EAAuCsH,KAAvC,CAAjB;AACD;AAnBH;;AAsBA,UAAIhD,OAAO,CAACkhB,QAAD,CAAP,IAAqB5mB,aAAa,CAAC4mB,QAAD,CAAtC,EAAkD;AAChD,YAAI1qB,GAAG,KAAK,IAAZ,EAAkB;AAChB,iBAAO,IAAP;AACD;;AAED,eAAOysB,cAAc,CAAC1C,WAAD,EAAcoD,QAAd,EAAwBzC,QAAxB,EAAkCle,KAAlC,EAAyC,IAAzC,CAArB;AACD;;AAEDie,MAAAA,wBAAwB,CAACV,WAAD,EAAcW,QAAd,CAAxB;AACD;;AAQD,WAAO,IAAP;AACD;;AAED,WAAS0C,aAAT,CACE5B,gBADF,EAEEzB,WAFF,EAGEsD,MAHF,EAIE3C,QAJF,EAKEle,KALF,EAMgB;AACd,QACG,OAAOke,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,EAA9C,IACA,OAAOA,QAAP,KAAoB,QAFtB,EAGE;AACA;AACA;AACA,YAAM4C,YAAY,GAAG9B,gBAAgB,CAACzrB,GAAjB,CAAqBstB,MAArB,KAAgC,IAArD;AACA,aAAOlB,cAAc,CAACpC,WAAD,EAAcuD,YAAd,EAA4B,KAAK5C,QAAjC,EAA2Cle,KAA3C,CAArB;AACD;;AAED,QAAI,OAAOke,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,cAAQA,QAAQ,CAAC/lB,QAAjB;AACE,aAAKpC,kBAAL;AAAyB;AACvB,kBAAM+qB,YAAY,GAChB9B,gBAAgB,CAACzrB,GAAjB,CACE2qB,QAAQ,CAAC1qB,GAAT,KAAiB,IAAjB,GAAwBqtB,MAAxB,GAAiC3C,QAAQ,CAAC1qB,GAD5C,KAEK,IAHP;AAIA,mBAAOwsB,aAAa,CAACzC,WAAD,EAAcuD,YAAd,EAA4B5C,QAA5B,EAAsCle,KAAtC,CAApB;AACD;;AACD,aAAK9J,iBAAL;AAAwB;AACtB,kBAAM4qB,YAAY,GAChB9B,gBAAgB,CAACzrB,GAAjB,CACE2qB,QAAQ,CAAC1qB,GAAT,KAAiB,IAAjB,GAAwBqtB,MAAxB,GAAiC3C,QAAQ,CAAC1qB,GAD5C,KAEK,IAHP;AAIA,mBAAO2sB,YAAY,CAAC5C,WAAD,EAAcuD,YAAd,EAA4B5C,QAA5B,EAAsCle,KAAtC,CAAnB;AACD;;AACD,aAAKpJ,eAAL;AACE,gBAAM8B,OAAO,GAAGwlB,QAAQ,CAACvlB,QAAzB;AACA,gBAAMC,IAAI,GAAGslB,QAAQ,CAACrlB,KAAtB;AACA,iBAAO+nB,aAAa,CAClB5B,gBADkB,EAElBzB,WAFkB,EAGlBsD,MAHkB,EAIlBjoB,IAAI,CAACF,OAAD,CAJc,EAKlBsH,KALkB,CAApB;AAlBJ;;AA2BA,UAAIhD,OAAO,CAACkhB,QAAD,CAAP,IAAqB5mB,aAAa,CAAC4mB,QAAD,CAAtC,EAAkD;AAChD,cAAM4C,YAAY,GAAG9B,gBAAgB,CAACzrB,GAAjB,CAAqBstB,MAArB,KAAgC,IAArD;AACA,eAAOZ,cAAc,CAAC1C,WAAD,EAAcuD,YAAd,EAA4B5C,QAA5B,EAAsCle,KAAtC,EAA6C,IAA7C,CAArB;AACD;;AAEDie,MAAAA,wBAAwB,CAACV,WAAD,EAAcW,QAAd,CAAxB;AACD;;AAQD,WAAO,IAAP;AACD;AAED;AAkDA,WAAS6C,sBAAT,CACExD,WADF,EAEEuB,iBAFF,EAGEkC,WAHF,EAIEhhB,KAJF,EAKgB;AACd;AA4BA,QAAIihB,mBAAiC,GAAG,IAAxC;AACA,QAAIC,gBAA8B,GAAG,IAArC;AAEA,QAAIP,QAAQ,GAAG7B,iBAAf;AACA,QAAIS,eAAe,GAAG,CAAtB;AACA,QAAIsB,MAAM,GAAG,CAAb;AACA,QAAIM,YAAY,GAAG,IAAnB;;AACA,WAAOR,QAAQ,KAAK,IAAb,IAAqBE,MAAM,GAAGG,WAAW,CAAC9P,MAAjD,EAAyD2P,MAAM,EAA/D,EAAmE;AACjE,UAAIF,QAAQ,CAAClc,KAAT,GAAiBoc,MAArB,EAA6B;AAC3BM,QAAAA,YAAY,GAAGR,QAAf;AACAA,QAAAA,QAAQ,GAAG,IAAX;AACD,OAHD,MAGO;AACLQ,QAAAA,YAAY,GAAGR,QAAQ,CAACtkB,OAAxB;AACD;;AACD,YAAMijB,QAAQ,GAAGoB,UAAU,CACzBnD,WADyB,EAEzBoD,QAFyB,EAGzBK,WAAW,CAACH,MAAD,CAHc,EAIzB7gB,KAJyB,CAA3B;;AAMA,UAAIsf,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACA,YAAIqB,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,UAAAA,QAAQ,GAAGQ,YAAX;AACD;;AACD;AACD;;AACD,UAAI1C,sBAAJ,EAA4B;AAC1B,YAAIkC,QAAQ,IAAIrB,QAAQ,CAAClkB,SAAT,KAAuB,IAAvC,EAA6C;AAC3C;AACA;AACAsjB,UAAAA,WAAW,CAACnB,WAAD,EAAcoD,QAAd,CAAX;AACD;AACF;;AACDpB,MAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BsB,MAA5B,CAA5B;;AACA,UAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,QAAAA,mBAAmB,GAAG3B,QAAtB;AACD,OAHD,MAGO;AACL;AACA;AACA;AACA;AACA4B,QAAAA,gBAAgB,CAAC7kB,OAAjB,GAA2BijB,QAA3B;AACD;;AACD4B,MAAAA,gBAAgB,GAAG5B,QAAnB;AACAqB,MAAAA,QAAQ,GAAGQ,YAAX;AACD;;AAED,QAAIN,MAAM,KAAKG,WAAW,CAAC9P,MAA3B,EAAmC;AACjC;AACA2N,MAAAA,uBAAuB,CAACtB,WAAD,EAAcoD,QAAd,CAAvB;;AAKA,aAAOM,mBAAP;AACD;;AAED,QAAIN,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,aAAOE,MAAM,GAAGG,WAAW,CAAC9P,MAA5B,EAAoC2P,MAAM,EAA1C,EAA8C;AAC5C,cAAMvB,QAAQ,GAAGmB,WAAW,CAAClD,WAAD,EAAcyD,WAAW,CAACH,MAAD,CAAzB,EAAmC7gB,KAAnC,CAA5B;;AACA,YAAIsf,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACD;;AACDC,QAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BsB,MAA5B,CAA5B;;AACA,YAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,UAAAA,mBAAmB,GAAG3B,QAAtB;AACD,SAHD,MAGO;AACL4B,UAAAA,gBAAgB,CAAC7kB,OAAjB,GAA2BijB,QAA3B;AACD;;AACD4B,QAAAA,gBAAgB,GAAG5B,QAAnB;AACD;;AAKD,aAAO2B,mBAAP;AACD,KAjHa;;;AAoHd,UAAMjC,gBAAgB,GAAGD,oBAAoB,CAACxB,WAAD,EAAcoD,QAAd,CAA7C,CApHc;;AAuHd,WAAOE,MAAM,GAAGG,WAAW,CAAC9P,MAA5B,EAAoC2P,MAAM,EAA1C,EAA8C;AAC5C,YAAMvB,QAAQ,GAAGsB,aAAa,CAC5B5B,gBAD4B,EAE5BzB,WAF4B,EAG5BsD,MAH4B,EAI5BG,WAAW,CAACH,MAAD,CAJiB,EAK5B7gB,KAL4B,CAA9B;;AAOA,UAAIsf,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAIb,sBAAJ,EAA4B;AAC1B,cAAIa,QAAQ,CAAClkB,SAAT,KAAuB,IAA3B,EAAiC;AAC/B;AACA;AACA;AACA;AACA4jB,YAAAA,gBAAgB,CAACoC,MAAjB,CACE9B,QAAQ,CAAC9rB,GAAT,KAAiB,IAAjB,GAAwBqtB,MAAxB,GAAiCvB,QAAQ,CAAC9rB,GAD5C;AAGD;AACF;;AACD+rB,QAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BsB,MAA5B,CAA5B;;AACA,YAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BD,UAAAA,mBAAmB,GAAG3B,QAAtB;AACD,SAFD,MAEO;AACL4B,UAAAA,gBAAgB,CAAC7kB,OAAjB,GAA2BijB,QAA3B;AACD;;AACD4B,QAAAA,gBAAgB,GAAG5B,QAAnB;AACD;AACF;;AAED,QAAIb,sBAAJ,EAA4B;AAC1B;AACA;AACAO,MAAAA,gBAAgB,CAACqC,OAAjB,CAAyBjlB,KAAK,IAAIsiB,WAAW,CAACnB,WAAD,EAAcnhB,KAAd,CAA7C;AACD;;AAMD,WAAO6kB,mBAAP;AACD;;AAED,WAASK,yBAAT,CACE/D,WADF,EAEEuB,iBAFF,EAGEyC,mBAHF,EAIEvhB,KAJF,EAKgB;AACd;AACA;AAEA,UAAMwhB,UAAU,GAAGlqB,aAAa,CAACiqB,mBAAD,CAAhC;;AAEA,QAAI,OAAOC,UAAP,KAAsB,UAA1B,EAAsC;AACpC,YAAM,IAAI3lB,KAAJ,CACJ,2EACE,8BAFE,CAAN;AAID;;AA8CD,UAAMmlB,WAAW,GAAGQ,UAAU,CAAC5N,IAAX,CAAgB2N,mBAAhB,CAApB;;AAEA,QAAIP,WAAW,IAAI,IAAnB,EAAyB;AACvB,YAAM,IAAInlB,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,QAAIolB,mBAAiC,GAAG,IAAxC;AACA,QAAIC,gBAA8B,GAAG,IAArC;AAEA,QAAIP,QAAQ,GAAG7B,iBAAf;AACA,QAAIS,eAAe,GAAG,CAAtB;AACA,QAAIsB,MAAM,GAAG,CAAb;AACA,QAAIM,YAAY,GAAG,IAAnB;AAEA,QAAIM,IAAI,GAAGT,WAAW,CAAC5K,IAAZ,EAAX;;AACA,WAEEuK,QAAQ,KAAK,IAAb,IAAqB,CAACc,IAAI,CAACC,IAF7B,EAGEb,MAAM,IAAIY,IAAI,GAAGT,WAAW,CAAC5K,IAAZ,EAHnB,EAIE;AACA,UAAIuK,QAAQ,CAAClc,KAAT,GAAiBoc,MAArB,EAA6B;AAC3BM,QAAAA,YAAY,GAAGR,QAAf;AACAA,QAAAA,QAAQ,GAAG,IAAX;AACD,OAHD,MAGO;AACLQ,QAAAA,YAAY,GAAGR,QAAQ,CAACtkB,OAAxB;AACD;;AACD,YAAMijB,QAAQ,GAAGoB,UAAU,CAACnD,WAAD,EAAcoD,QAAd,EAAwBc,IAAI,CAAC9tB,KAA7B,EAAoCqM,KAApC,CAA3B;;AACA,UAAIsf,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA;AACA;AACA,YAAIqB,QAAQ,KAAK,IAAjB,EAAuB;AACrBA,UAAAA,QAAQ,GAAGQ,YAAX;AACD;;AACD;AACD;;AACD,UAAI1C,sBAAJ,EAA4B;AAC1B,YAAIkC,QAAQ,IAAIrB,QAAQ,CAAClkB,SAAT,KAAuB,IAAvC,EAA6C;AAC3C;AACA;AACAsjB,UAAAA,WAAW,CAACnB,WAAD,EAAcoD,QAAd,CAAX;AACD;AACF;;AACDpB,MAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BsB,MAA5B,CAA5B;;AACA,UAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,QAAAA,mBAAmB,GAAG3B,QAAtB;AACD,OAHD,MAGO;AACL;AACA;AACA;AACA;AACA4B,QAAAA,gBAAgB,CAAC7kB,OAAjB,GAA2BijB,QAA3B;AACD;;AACD4B,MAAAA,gBAAgB,GAAG5B,QAAnB;AACAqB,MAAAA,QAAQ,GAAGQ,YAAX;AACD;;AAED,QAAIM,IAAI,CAACC,IAAT,EAAe;AACb;AACA7C,MAAAA,uBAAuB,CAACtB,WAAD,EAAcoD,QAAd,CAAvB;;AAKA,aAAOM,mBAAP;AACD;;AAED,QAAIN,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,aAAO,CAACc,IAAI,CAACC,IAAb,EAAmBb,MAAM,IAAIY,IAAI,GAAGT,WAAW,CAAC5K,IAAZ,EAApC,EAAwD;AACtD,cAAMkJ,QAAQ,GAAGmB,WAAW,CAAClD,WAAD,EAAckE,IAAI,CAAC9tB,KAAnB,EAA0BqM,KAA1B,CAA5B;;AACA,YAAIsf,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AACD;;AACDC,QAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BsB,MAA5B,CAA5B;;AACA,YAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACAD,UAAAA,mBAAmB,GAAG3B,QAAtB;AACD,SAHD,MAGO;AACL4B,UAAAA,gBAAgB,CAAC7kB,OAAjB,GAA2BijB,QAA3B;AACD;;AACD4B,QAAAA,gBAAgB,GAAG5B,QAAnB;AACD;;AAKD,aAAO2B,mBAAP;AACD,KApJa;;;AAuJd,UAAMjC,gBAAgB,GAAGD,oBAAoB,CAACxB,WAAD,EAAcoD,QAAd,CAA7C,CAvJc;;AA0Jd,WAAO,CAACc,IAAI,CAACC,IAAb,EAAmBb,MAAM,IAAIY,IAAI,GAAGT,WAAW,CAAC5K,IAAZ,EAApC,EAAwD;AACtD,YAAMkJ,QAAQ,GAAGsB,aAAa,CAC5B5B,gBAD4B,EAE5BzB,WAF4B,EAG5BsD,MAH4B,EAI5BY,IAAI,CAAC9tB,KAJuB,EAK5BqM,KAL4B,CAA9B;;AAOA,UAAIsf,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAIb,sBAAJ,EAA4B;AAC1B,cAAIa,QAAQ,CAAClkB,SAAT,KAAuB,IAA3B,EAAiC;AAC/B;AACA;AACA;AACA;AACA4jB,YAAAA,gBAAgB,CAACoC,MAAjB,CACE9B,QAAQ,CAAC9rB,GAAT,KAAiB,IAAjB,GAAwBqtB,MAAxB,GAAiCvB,QAAQ,CAAC9rB,GAD5C;AAGD;AACF;;AACD+rB,QAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BsB,MAA5B,CAA5B;;AACA,YAAIK,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BD,UAAAA,mBAAmB,GAAG3B,QAAtB;AACD,SAFD,MAEO;AACL4B,UAAAA,gBAAgB,CAAC7kB,OAAjB,GAA2BijB,QAA3B;AACD;;AACD4B,QAAAA,gBAAgB,GAAG5B,QAAnB;AACD;AACF;;AAED,QAAIb,sBAAJ,EAA4B;AAC1B;AACA;AACAO,MAAAA,gBAAgB,CAACqC,OAAjB,CAAyBjlB,KAAK,IAAIsiB,WAAW,CAACnB,WAAD,EAAcnhB,KAAd,CAA7C;AACD;;AAMD,WAAO6kB,mBAAP;AACD;;AAED,WAASU,uBAAT,CACEpE,WADF,EAEEuB,iBAFF,EAGEc,WAHF,EAIE5f,KAJF,EAKS;AACP;AACA;AACA,QAAI8e,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,CAAC7lB,GAAlB,KAA0BrE,QAA5D,EAAsE;AACpE;AACA;AACAiqB,MAAAA,uBAAuB,CAACtB,WAAD,EAAcuB,iBAAiB,CAACziB,OAAhC,CAAvB;AACA,YAAM0jB,QAAQ,GAAGZ,QAAQ,CAACL,iBAAD,EAAoBc,WAApB,CAAzB;AACAG,MAAAA,QAAQ,CAACxkB,MAAT,GAAkBgiB,WAAlB;AACA,aAAOwC,QAAP;AACD,KAVM;AAYP;;;AACAlB,IAAAA,uBAAuB,CAACtB,WAAD,EAAcuB,iBAAd,CAAvB;AACA,UAAMe,OAAO,GAAGC,mBAAmB,CAACF,WAAD,EAAcrC,WAAW,CAACjZ,IAA1B,EAAgCtE,KAAhC,CAAnC;AACA6f,IAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,WAAOsC,OAAP;AACD;;AAED,WAAS+B,sBAAT,CACErE,WADF,EAEEuB,iBAFF,EAGEtB,OAHF,EAIExd,KAJF,EAKS;AACP,UAAMxM,GAAG,GAAGgqB,OAAO,CAAChqB,GAApB;AACA,QAAI4I,KAAK,GAAG0iB,iBAAZ;;AACA,WAAO1iB,KAAK,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,UAAIA,KAAK,CAAC5I,GAAN,KAAcA,GAAlB,EAAuB;AACrB,cAAMupB,WAAW,GAAGS,OAAO,CAACvlB,IAA5B;;AACA,YAAI8kB,WAAW,KAAK5mB,mBAApB,EAAyC;AACvC,cAAIiG,KAAK,CAACnD,GAAN,KAAcpE,QAAlB,EAA4B;AAC1BgqB,YAAAA,uBAAuB,CAACtB,WAAD,EAAcnhB,KAAK,CAACC,OAApB,CAAvB;AACA,kBAAM0jB,QAAQ,GAAGZ,QAAQ,CAAC/iB,KAAD,EAAQohB,OAAO,CAAC/T,KAAR,CAAcG,QAAtB,CAAzB;AACAmW,YAAAA,QAAQ,CAACxkB,MAAT,GAAkBgiB,WAAlB;;AAKA,mBAAOwC,QAAP;AACD;AACF,SAXD,MAWO;AACL,cACE3jB,KAAK,CAAC2gB,WAAN,KAAsBA,WAAtB;AAECjJ,UAAAA,CAEG,KAJJ;AAMA;AACA;AACA;AACC,iBAAOiJ,WAAP,KAAuB,QAAvB,IACCA,WAAW,KAAK,IADjB,IAECA,WAAW,CAAC5kB,QAAZ,KAAyBvB,eAF1B,IAGC0nB,WAAW,CAACvB,WAAD,CAAX,KAA6B3gB,KAAK,CAACnE,IAbvC,EAcE;AACA4mB,YAAAA,uBAAuB,CAACtB,WAAD,EAAcnhB,KAAK,CAACC,OAApB,CAAvB;AACA,kBAAM0jB,QAAQ,GAAGZ,QAAQ,CAAC/iB,KAAD,EAAQohB,OAAO,CAAC/T,KAAhB,CAAzB;AACAsW,YAAAA,QAAQ,CAACrC,GAAT,GAAeJ,SAAS,CAACC,WAAD,EAAcnhB,KAAd,EAAqBohB,OAArB,CAAxB;AACAuC,YAAAA,QAAQ,CAACxkB,MAAT,GAAkBgiB,WAAlB;;AAKA,mBAAOwC,QAAP;AACD;AACF,SAvCoB;;;AAyCrBlB,QAAAA,uBAAuB,CAACtB,WAAD,EAAcnhB,KAAd,CAAvB;AACA;AACD,OA3CD,MA2CO;AACLsiB,QAAAA,WAAW,CAACnB,WAAD,EAAcnhB,KAAd,CAAX;AACD;;AACDA,MAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAED,QAAImhB,OAAO,CAACvlB,IAAR,KAAiB9B,mBAArB,EAA0C;AACxC,YAAM0pB,OAAO,GAAGW,uBAAuB,CACrChD,OAAO,CAAC/T,KAAR,CAAcG,QADuB,EAErC2T,WAAW,CAACjZ,IAFyB,EAGrCtE,KAHqC,EAIrCwd,OAAO,CAAChqB,GAJ6B,CAAvC;AAMAqsB,MAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,aAAOsC,OAAP;AACD,KATD,MASO;AACL,YAAMA,OAAO,GAAGK,sBAAsB,CAAC1C,OAAD,EAAUD,WAAW,CAACjZ,IAAtB,EAA4BtE,KAA5B,CAAtC;AACA6f,MAAAA,OAAO,CAACnC,GAAR,GAAcJ,SAAS,CAACC,WAAD,EAAcuB,iBAAd,EAAiCtB,OAAjC,CAAvB;AACAqC,MAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,aAAOsC,OAAP;AACD;AACF;;AAED,WAASgC,qBAAT,CACEtE,WADF,EAEEuB,iBAFF,EAGEsB,MAHF,EAIEpgB,KAJF,EAKS;AACP,UAAMxM,GAAG,GAAG4sB,MAAM,CAAC5sB,GAAnB;AACA,QAAI4I,KAAK,GAAG0iB,iBAAZ;;AACA,WAAO1iB,KAAK,KAAK,IAAjB,EAAuB;AACrB;AACA;AACA,UAAIA,KAAK,CAAC5I,GAAN,KAAcA,GAAlB,EAAuB;AACrB,YACE4I,KAAK,CAACnD,GAAN,KAAcvE,UAAd,IACA0H,KAAK,CAACG,SAAN,CAAgBkO,aAAhB,KAAkC2V,MAAM,CAAC3V,aADzC,IAEArO,KAAK,CAACG,SAAN,CAAgB8jB,cAAhB,KAAmCD,MAAM,CAACC,cAH5C,EAIE;AACAxB,UAAAA,uBAAuB,CAACtB,WAAD,EAAcnhB,KAAK,CAACC,OAApB,CAAvB;AACA,gBAAM0jB,QAAQ,GAAGZ,QAAQ,CAAC/iB,KAAD,EAAQgkB,MAAM,CAACxW,QAAP,IAAmB,EAA3B,CAAzB;AACAmW,UAAAA,QAAQ,CAACxkB,MAAT,GAAkBgiB,WAAlB;AACA,iBAAOwC,QAAP;AACD,SATD,MASO;AACLlB,UAAAA,uBAAuB,CAACtB,WAAD,EAAcnhB,KAAd,CAAvB;AACA;AACD;AACF,OAdD,MAcO;AACLsiB,QAAAA,WAAW,CAACnB,WAAD,EAAcnhB,KAAd,CAAX;AACD;;AACDA,MAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;;AAED,UAAMwjB,OAAO,GAAGS,qBAAqB,CAACF,MAAD,EAAS7C,WAAW,CAACjZ,IAArB,EAA2BtE,KAA3B,CAArC;AACA6f,IAAAA,OAAO,CAACtkB,MAAR,GAAiBgiB,WAAjB;AACA,WAAOsC,OAAP;AACD,GA/8B8C;AAk9B/C;AACA;;;AACA,WAASiC,oBAAT,CACEvE,WADF,EAEEuB,iBAFF,EAGEZ,QAHF,EAIEle,KAJF,EAKgB;AACd;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,UAAM+hB,yBAAyB,GAC7B,OAAO7D,QAAP,KAAoB,QAApB,IACAA,QAAQ,KAAK,IADb,IAEAA,QAAQ,CAACjmB,IAAT,KAAkB9B,mBAFlB,IAGA+nB,QAAQ,CAAC1qB,GAAT,KAAiB,IAJnB;;AAKA,QAAIuuB,yBAAJ,EAA+B;AAC7B7D,MAAAA,QAAQ,GAAGA,QAAQ,CAACzU,KAAT,CAAeG,QAA1B;AACD,KAhBa;;;AAmBd,QAAI,OAAOsU,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;AACrD,cAAQA,QAAQ,CAAC/lB,QAAjB;AACE,aAAKpC,kBAAL;AACE,iBAAO2pB,gBAAgB,CACrBkC,sBAAsB,CACpBrE,WADoB,EAEpBuB,iBAFoB,EAGpBZ,QAHoB,EAIpBle,KAJoB,CADD,CAAvB;;AAQF,aAAK9J,iBAAL;AACE,iBAAOwpB,gBAAgB,CACrBmC,qBAAqB,CACnBtE,WADmB,EAEnBuB,iBAFmB,EAGnBZ,QAHmB,EAInBle,KAJmB,CADA,CAAvB;;AAQF,aAAKpJ,eAAL;AACE,gBAAM8B,OAAO,GAAGwlB,QAAQ,CAACvlB,QAAzB;AACA,gBAAMC,IAAI,GAAGslB,QAAQ,CAACrlB,KAAtB,CAFF;;AAIE,iBAAOipB,oBAAoB,CACzBvE,WADyB,EAEzBuB,iBAFyB,EAGzBlmB,IAAI,CAACF,OAAD,CAHqB,EAIzBsH,KAJyB,CAA3B;AAvBJ;;AA+BA,UAAIhD,OAAO,CAACkhB,QAAD,CAAX,EAAuB;AACrB,eAAO6C,sBAAsB,CAC3BxD,WAD2B,EAE3BuB,iBAF2B,EAG3BZ,QAH2B,EAI3Ble,KAJ2B,CAA7B;AAMD;;AAED,UAAI1I,aAAa,CAAC4mB,QAAD,CAAjB,EAA6B;AAC3B,eAAOoD,yBAAyB,CAC9B/D,WAD8B,EAE9BuB,iBAF8B,EAG9BZ,QAH8B,EAI9Ble,KAJ8B,CAAhC;AAMD;;AAEDie,MAAAA,wBAAwB,CAACV,WAAD,EAAcW,QAAd,CAAxB;AACD;;AAED,QACG,OAAOA,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,EAA9C,IACA,OAAOA,QAAP,KAAoB,QAFtB,EAGE;AACA,aAAOwB,gBAAgB,CACrBiC,uBAAuB,CACrBpE,WADqB,EAErBuB,iBAFqB,EAGrB,KAAKZ,QAHgB,EAIrBle,KAJqB,CADF,CAAvB;AAQD;;;AASD,WAAO6e,uBAAuB,CAACtB,WAAD,EAAcuB,iBAAd,CAA9B;AACD;;AAED,SAAOgD,oBAAP;AACD;;AAED,AAAO,MAAMA,oBAAoB,GAAGtD,eAAe,CAAC,IAAD,CAA5C;AACP,AAAO,MAAMwD,gBAAgB,GAAGxD,eAAe,CAAC,KAAD,CAAxC;AAEP,AAAO,SAASyD,gBAAT,CACLzlB,OADK,EAEL8R,cAFK,EAGC;AACN,MAAI9R,OAAO,KAAK,IAAZ,IAAoB8R,cAAc,CAAClS,KAAf,KAAyBI,OAAO,CAACJ,KAAzD,EAAgE;AAC9D,UAAM,IAAIP,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,MAAIyS,cAAc,CAAClS,KAAf,KAAyB,IAA7B,EAAmC;AACjC;AACD;;AAED,MAAI8lB,YAAY,GAAG5T,cAAc,CAAClS,KAAlC;AACA,MAAI8hB,QAAQ,GAAGkB,oBAAoB,CAAC8C,YAAD,EAAeA,YAAY,CAACjF,YAA5B,CAAnC;AACA3O,EAAAA,cAAc,CAAClS,KAAf,GAAuB8hB,QAAvB;AAEAA,EAAAA,QAAQ,CAAC3iB,MAAT,GAAkB+S,cAAlB;;AACA,SAAO4T,YAAY,CAAC7lB,OAAb,KAAyB,IAAhC,EAAsC;AACpC6lB,IAAAA,YAAY,GAAGA,YAAY,CAAC7lB,OAA5B;AACA6hB,IAAAA,QAAQ,GAAGA,QAAQ,CAAC7hB,OAAT,GAAmB+iB,oBAAoB,CAChD8C,YADgD,EAEhDA,YAAY,CAACjF,YAFmC,CAAlD;AAIAiB,IAAAA,QAAQ,CAAC3iB,MAAT,GAAkB+S,cAAlB;AACD;;AACD4P,EAAAA,QAAQ,CAAC7hB,OAAT,GAAmB,IAAnB;AACD;;AAGD,AAAO,SAAS8lB,gBAAT,CAA0B7T,cAA1B,EAAiDtO,KAAjD,EAAqE;AAC1E,MAAI5D,KAAK,GAAGkS,cAAc,CAAClS,KAA3B;;AACA,SAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrBgmB,IAAAA,mBAAmB,CAAChmB,KAAD,EAAQ4D,KAAR,CAAnB;AACA5D,IAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;AACF;;ACz1CD,MAAM2M,YAAsB,GAAI,EAAhC;AAEA,MAAMkF,oBAAyD,GAAGL,YAAY,CAC5E7E,YAD4E,CAA9E;AAGA,MAAMqZ,uBAAwD,GAAGxU,YAAY,CAC3E7E,YAD2E,CAA7E;AAGA,MAAMsZ,uBAEL,GAAGzU,YAAY,CAAC7E,YAAD,CAFhB;;AAIA,SAASuZ,eAAT,CAAgCC,CAAhC,EAA8D;AAC5D,MAAIA,CAAC,KAAKxZ,YAAV,EAAsB;AACpB,UAAM,IAAInN,KAAJ,CACJ,0EACE,iCAFE,CAAN;AAID;;AAED,SAAQ2mB,CAAR;AACD;;AAED,SAASC,oBAAT,GAA2C;AACzC,QAAMC,YAAY,GAAGH,eAAe,CAACD,uBAAuB,CAAC9lB,OAAzB,CAApC;AACA,SAAOkmB,YAAP;AACD;;AAED,SAASC,iBAAT,CAA2B3pB,KAA3B,EAAyC4pB,gBAAzC,EAAsE;AACpE;AACA;AACA3b,EAAAA,IAAI,CAACqb,uBAAD,EAA0BM,gBAA1B,AAAA,CAAJ,CAHoE;AAKpE;;AACA3b,EAAAA,IAAI,CAACob,uBAAD,EAA0BrpB,KAA1B,AAAA,CAAJ,CANoE;AASpE;AACA;AACA;AACA;;AACAiO,EAAAA,IAAI,CAACiH,oBAAD,EAAqBlF,YAArB,CAAJ;AACA,QAAM6Z,eAAe,GAAGxY,kBAAkB,CAACuY,AAAD,CAA1C,CAdoE;;AAgBpE7U,EAAAA,GAAG,CAACG,oBAAD,CAAH;AACAjH,EAAAA,IAAI,CAACiH,oBAAD,EAAqB2U,eAArB,AAAA,CAAJ;AACD;;AAED,SAASC,gBAAT,CAA0B9pB,KAA1B,EAAwC;AACtC+U,EAAAA,GAAG,CAACG,oBAAD,CAAH;AACAH,EAAAA,GAAG,CAACsU,uBAAD,AAAA,CAAH;AACAtU,EAAAA,GAAG,CAACuU,uBAAD,AAAA,CAAH;AACD;;AAED,SAASS,cAAT,GAAuC;AACrC,QAAM3qB,OAAO,GAAGmqB,eAAe,CAACrU,oBAAkB,CAAC1R,OAApB,CAA/B;AACA,SAAOpE,OAAP;AACD;;AAED,SAAS4qB,eAAT,CAAyBhqB,KAAzB,EAA6C;AAC3C,QAAM0pB,YAAuB,GAAGH,eAAe,CAC7CD,uBAAuB,CAAC9lB,OADqB,CAA/C;AAGA,QAAMpE,OAAoB,GAAGmqB,eAAe,CAACrU,oBAAkB,CAAC1R,OAApB,CAA5C;AACA,QAAM4e,WAAW,GAAG9Q,mBAAmB,CAAClS,OAAD,EAAUY,KAAK,CAACf,IAAhB,AAAA,CAAvC,CAL2C;;AAQ3C,MAAIG,OAAO,KAAKgjB,WAAhB,EAA6B;AAC3B;AACD,GAV0C;AAa3C;;;AACAnU,EAAAA,IAAI,CAACob,uBAAD,EAA0BrpB,KAA1B,AAAA,CAAJ;AACAiO,EAAAA,IAAI,CAACiH,oBAAD,EAAqBkN,WAArB,AAAA,CAAJ;AACD;;AAED,SAAS6H,cAAT,CAAwBjqB,KAAxB,EAA4C;AAC1C;AACA;AACA,MAAIqpB,uBAAuB,CAAC7lB,OAAxB,KAAoCxD,KAAxC,EAA+C;AAC7C;AACD;;AAED+U,EAAAA,GAAG,CAACG,oBAAD,CAAH;AACAH,EAAAA,GAAG,CAACsU,uBAAD,AAAA,CAAH;AACD;;ACrFD,MAAMa,sBAAuC,GAAG,IAAhD;AAGA;AACA;AACA;;AACA,MAAMC,0BAA2C,GAAG,IAApD;AAIA;AACA;AACA;AACA;AACA;AACA;;AACA,AAAO,MAAMC,8BAAsD,GAAG,IAA/D;AAIP;AACA;;AACA,AAAO,MAAMC,qBAA6C,GAAG,IAAtD;AAEP,AAAO,MAAMC,mBAAiD,GAAGzV,YAAY,CAC3EqV,sBAD2E,CAAtE;AAIP,AAAO,SAASK,kBAAT,CACL/T,aADK,EAELgU,IAFK,EAGI;AACT,SAAO,CAAChU,aAAa,GAAGgU,IAAjB,MAA2B,CAAlC;AACD;AAED,AAAO,SAASC,gCAAT,CACLjU,aADK,EAEY;AACjB,SAAOA,aAAa,GAAG2T,0BAAvB;AACD;AAED,AAAO,SAASO,yBAAT,CACLlU,aADK,EAELmU,cAFK,EAGY;AACjB,SAAQnU,aAAa,GAAG2T,0BAAjB,GAA+CQ,cAAtD;AACD;AAED,AAAO,SAASC,yBAAT,CACLpU,aADK,EAELqU,cAFK,EAGY;AACjB,SAAOrU,aAAa,GAAGqU,cAAvB;AACD;AAED,AAAO,SAASC,mBAAT,CACL9qB,KADK,EAEL+qB,UAFK,EAGC;AACN9c,EAAAA,IAAI,CAACqc,mBAAD,EAAsBS,UAAtB,AAAA,CAAJ;AACD;AAED,AAAO,SAASC,kBAAT,CAA4BhrB,KAA5B,EAAgD;AACrD+U,EAAAA,GAAG,CAACuV,mBAAD,AAAA,CAAH;AACD;;ACbM,SAASW,qBAAT,CACL3V,cADK,EAEL4V,kBAFK,EAGI;AACT;AACA;AACA,QAAM/K,SAA+B,GAAG7K,cAAc,CAACiD,aAAvD;;AACA,MAAI4H,SAAS,KAAK,IAAlB,EAAwB;AACtB,QAAIA,SAAS,CAACgL,UAAV,KAAyB,IAA7B,EAAmC;AACjC;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AACD,QAAM1a,KAAK,GAAG6E,cAAc,CAACmO,aAA7B,CAXS;;AAaT,EAGE;AACA,WAAO,IAAP;AACD,GAlBQ;AAoBT,AAMD;AAED,AAAO,SAAS2H,kBAAT,CAA4BC,GAA5B,EAAsD;AAC3D,MAAInpB,IAAI,GAAGmpB,GAAX;;AACA,SAAOnpB,IAAI,KAAK,IAAhB,EAAsB;AACpB,QAAIA,IAAI,CAACjC,GAAL,KAAa9D,iBAAjB,EAAoC;AAClC,YAAM0mB,KAA2B,GAAG3gB,IAAI,CAACqW,aAAzC;;AACA,UAAIsK,KAAK,KAAK,IAAd,EAAoB;AAClB,cAAMsI,UAAmC,GAAGtI,KAAK,CAACsI,UAAlD;;AACA,YACEA,UAAU,KAAK,IAAf,IACA1b,yBAAyB,CAAC0b,AAAD,CADzB,IAEAzb,0BAA0B,CAACyb,AAAD,CAH5B,EAIE;AACA,iBAAOjpB,IAAP;AACD;AACF;AACF,KAZD,MAYO,IACLA,IAAI,CAACjC,GAAL,KAAaxD,qBAAb;AAEA;AACAyF,IAAAA,IAAI,CAACuhB,aAAL,CAAmB6H,WAAnB,KAAmChlB,SAJ9B,EAKL;AACA,YAAMilB,UAAU,GAAG,CAACrpB,IAAI,CAACI,KAAL,GAAa7B,UAAd,MAA8BP,OAAjD;;AACA,UAAIqrB,UAAJ,EAAgB;AACd,eAAOrpB,IAAP;AACD;AACF,KAVM,MAUA,IAAIA,IAAI,CAACkB,KAAL,KAAe,IAAnB,EAAyB;AAC9BlB,MAAAA,IAAI,CAACkB,KAAL,CAAWb,MAAX,GAAoBL,IAApB;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACkB,KAAZ;AACA;AACD;;AACD,QAAIlB,IAAI,KAAKmpB,GAAb,EAAkB;AAChB,aAAO,IAAP;AACD;;AACD,WAAOnpB,IAAI,CAACmB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,UAAInB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgB8oB,GAA5C,EAAiD;AAC/C,eAAO,IAAP;AACD;;AACDnpB,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AACDL,IAAAA,IAAI,CAACmB,OAAL,CAAad,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,IAAAA,IAAI,GAAGA,IAAI,CAACmB,OAAZ;AACD;;AACD,SAAO,IAAP;AACD;;ACpIM,MAAMnD,SAAO;AAAG;AAAQ,MAAxB;;AAGP,AAAO,MAAMsrB,SAAS;AAAG;AAAM,MAAxB;;AAGP,AAAO,MAAMC,SAAS;AAAG;AAAO,MAAzB;AACP,AAAO,MAAMC,MAAM;AAAG;AAAS,MAAxB;AACP,AAAO,MAAM7qB,SAAO;AAAG;AAAQ,MAAxB;;ACJP;AACA;;AACA,MAAM8qB,qBAAgD,GAAG,EAAzD;AAEA,AAUO,SAASC,2BAAT,GAA6C;AAClD,OAAK,IAAI5d,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2d,qBAAqB,CAACzT,MAA1C,EAAkDlK,CAAC,EAAnD,EAAuD;AACrD,UAAM6d,aAAa,GAAGF,qBAAqB,CAAC3d,CAAD,CAA3C;;AACA,IAEO;AACL6d,MAAAA,aAAa,CAACC,+BAAd,GAAgD,IAAhD;AACD;AACF;;AACDH,EAAAA,qBAAqB,CAACzT,MAAtB,GAA+B,CAA/B;AACD;;ACrBD;;AACA,MAAM6T,oBAAoB,GAAGC,CACzB,OAAOC,eAAP,KAA2B,WAA3B,GACEA,eADF,GAEG,SAASC,mBAAT,GAA+B;AAC9B,QAAMC,SAAS,GAAG,EAAlB;AACA,QAAMC,MAAM,GAAI,KAAKA,MAAL,GAAc;AAC5BC,IAAAA,OAAO,EAAE,KADmB;AAE5BC,IAAAA,gBAAgB,EAAE,CAACrtB,IAAD,EAAOstB,QAAP,KAAoB;AACpCJ,MAAAA,SAAS,CAACle,IAAV,CAAese,QAAf;AACD;AAJ2B,GAA9B;;AAOA,OAAKC,KAAL,GAAa,MAAM;AACjBJ,IAAAA,MAAM,CAACC,OAAP,GAAiB,IAAjB;AACAF,IAAAA,SAAS,CAAC9D,OAAV,CAAkBkE,QAAQ,IAAIA,QAAQ,EAAtC;AACD,GAHD;AAID,CAhBiC,CAAxC;AAmCA;AACA;MAE6BtoB,qBAEzBC;MADuBO,mBACvBP;AAEJ,AAAO,MAAMuoB,YAAiC,GAAGT,CAC7C;AACE7sB,EAAAA,QAAQ,EAAE5B,kBADZ;AAEE;AACAmvB,EAAAA,QAAQ,EAAG,IAHb;AAIEC,EAAAA,QAAQ,EAAG,IAJb;AAKE;AACAC,EAAAA,aAAa,EAAG,IANlB;AAOE5Q,EAAAA,cAAc,EAAG,IAPnB;AAQE6Q,EAAAA,YAAY,EAAE,CARhB;AASEC,EAAAA,aAAa,EAAG,IATlB;AAUEC,EAAAA,WAAW,EAAG;AAVhB,CADwD,CAArD;AAqBP;AACA;;;AACA,AAAO,SAASC,WAAT,GAA8B;AACnC;AAGA,QAAMC,KAAY,GAAG;AACnBC,IAAAA,UAAU,EAAE,IAAInB,oBAAJ,EADO;AAEnBoB,IAAAA,IAAI,EAAE,IAAIlH,GAAJ,EAFa;AAGnBmH,IAAAA,QAAQ,EAAE;AAHS,GAArB;AAMA,SAAOH,KAAP;AACD;AAED,AAAO,SAASI,WAAT,CAAqBJ,KAArB,EAAmC;AACxC;AAWAA,EAAAA,KAAK,CAACG,QAAN;AACD;;AAGD,AAAO,SAASE,YAAT,CAAsBL,KAAtB,EAAoC;AACzC;AAGAA,EAAAA,KAAK,CAACG,QAAN;;AASA,MAAIH,KAAK,CAACG,QAAN,KAAmB,CAAvB,EAA0B;AACxBnpB,IAAAA,kBAAgB,CAACQ,gBAAD,EAAiB,MAAM;AACrCwoB,MAAAA,KAAK,CAACC,UAAN,CAAiBV,KAAjB;AACD,KAFe,CAAhB;AAGD;AACF;AAED,AAAO,SAASe,iBAAT,CAA2BjY,cAA3B,EAAkD2X,KAAlD,EAAgE;AACrE;AAGApR,EAAAA,YAAY,CAACvG,cAAD,EAAiBmX,YAAjB,EAA+BQ,KAA/B,CAAZ;AACD;AAED,AAAO,SAASO,gBAAT,CAA0BlY,cAA1B,EAAiD2X,KAAjD,EAA+D;AACpE;AAGAhR,EAAAA,WAAW,CAACwQ,YAAD,AAAA,CAAX;AACD;;MCxBM3Y,2BAAmDlZ,qBAAnDkZ;MAAwBmG,4BAA2Brf,qBAA3Bqf;AAmB/B;AAyCA;AACA,IAAIpL,WAAkB,GAAG9G,OAAzB;AAEA;;AACA,IAAI0T,yBAA8B,GAAI,IAAtC;AAGA;AACA;AACA;;AACA,IAAIgS,WAAwB,GAAG,IAA/B;AACA,IAAIC,kBAA+B,GAAG,IAAtC;AAGA;AACA;AACA;;AACA,IAAIC,4BAAqC,GAAG,KAA5C;AAEA;AACA;AACA;;AACA,IAAIC,0CAAmD,GAAG,KAA1D;AAIA;AACA;;AACA,IAAIC,qBAA6B,GAAG,CAApC;AAEA,MAAMC,eAAe,GAAG,EAAxB;;AAuGA,SAASC,qBAAT,GAAiC;AAC/B,QAAM,IAAIlrB,KAAJ,CACJ,kHACE,kCADF,GAEE,wFAFF,GAGE,+CAHF,GAIE,iEAJF,GAKE,kGANE,CAAN;AAQD;;AAED,SAASmrB,kBAAT,CACEC,QADF,EAEEC,QAFF,EAGE;AACA;AAOA,MAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AAQA,WAAO,KAAP;AACD;;AAiBD,OAAK,IAAIlgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkgB,QAAQ,CAAChW,MAAb,IAAuBlK,CAAC,GAAGigB,QAAQ,CAAC/V,MAApD,EAA4DlK,CAAC,EAA7D,EAAiE;AAC/D,QAAIoJ,QAAE,CAAC6W,QAAQ,CAACjgB,CAAD,CAAT,EAAckgB,QAAQ,CAAClgB,CAAD,CAAtB,CAAN,EAAkC;AAChC;AACD;;AACD,WAAO,KAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAED,AAAO,SAASmgB,eAAT,CACL3qB,OADK,EAEL8R,cAFK,EAGLC,SAHK,EAIL9E,KAJK,EAKL2d,SALK,EAMLC,eANK,EAOA;AACLxf,EAAAA,WAAW,GAAGwf,eAAd;AACA5S,EAAAA,yBAAuB,GAAGnG,cAA1B;;AAaAA,EAAAA,cAAc,CAACiD,aAAf,GAA+B,IAA/B;AACAjD,EAAAA,cAAc,CAAC0H,WAAf,GAA6B,IAA7B;AACA1H,EAAAA,cAAc,CAACtO,KAAf,GAAuBe,OAAvB,CAjBK;AAoBL;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA,EAaO;AACL+L,IAAAA,wBAAsB,CAACtQ,OAAvB,GACEA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC+U,aAAR,KAA0B,IAA9C,GACI+V,sBADJ,GAEIC,uBAHN;AAID;;AAED,MAAI3d,QAAQ,GAAG2E,SAAS,CAAC9E,KAAD,EAAQ2d,SAAR,CAAxB,CArDK;;AAwDL,MAAIR,0CAAJ,EAAgD;AAC9C;AACA;AACA,QAAIY,iBAAyB,GAAG,CAAhC;;AACA,OAAG;AACDZ,MAAAA,0CAA0C,GAAG,KAA7C;AACAa;AAEA,UAAID,iBAAiB,IAAIV,eAAzB,EAA0C;AACxC,cAAM,IAAIjrB,KAAJ,CACJ,wEACE,mBAFE,CAAN;AAID;;AAED2rB,MAAAA,iBAAiB,IAAI,CAArB;;;AAQAf,MAAAA,WAAW,GAAG,IAAd;AACAC,MAAAA,kBAAkB,GAAG,IAArB;AAEApY,MAAAA,cAAc,CAAC0H,WAAf,GAA6B,IAA7B;;AAOAlJ,MAAAA,wBAAsB,CAACtQ,OAAvB,GAAiCsX,CAE7B4T,yBAFJ;AAIA9d,MAAAA,QAAQ,GAAG2E,SAAS,CAAC9E,KAAD,EAAQ2d,SAAR,CAApB;AACD,KAlCD,QAkCSR,0CAlCT;AAmCD,GA/FI;AAkGL;;;AACA9Z,EAAAA,wBAAsB,CAACtQ,OAAvB,GAAiCmrB,qBAAjC;AAOA;;;AACA,QAAMC,oBAAoB,GACxBnB,WAAW,KAAK,IAAhB,IAAwBA,WAAW,CAACrQ,IAAZ,KAAqB,IAD/C;AAGAvO,EAAAA,WAAW,GAAG9G,OAAd;AACA0T,EAAAA,yBAAuB,GAAI,IAA3B;AAEAgS,EAAAA,WAAW,GAAG,IAAd;AACAC,EAAAA,kBAAkB,GAAG,IAArB;;AA6BAC,EAAAA,4BAA4B,GAAG,KAA/B,CA/IK;AAiJL;;AAEA,MAAIiB,oBAAJ,EAA0B;AACxB,UAAM,IAAI/rB,KAAJ,CACJ,6EACE,yBAFE,CAAN;AAID;;AAsBD,SAAO+N,QAAP;AACD;AAED,AASO,SAASie,YAAT,CACLrrB,OADK,EAEL8R,cAFK,EAGLtO,KAHK,EAIL;AACAsO,EAAAA,cAAc,CAAC0H,WAAf,GAA6BxZ,OAAO,CAACwZ,WAArC,CADA;AAGA;;AACA,EAWO;AACL1H,IAAAA,cAAc,CAAChT,KAAf,IAAwB,EAAEwsB,OAAa,GAAGC,MAAlB,CAAxB;AACD;;AACDvrB,EAAAA,OAAO,CAACwD,KAAR,GAAgB0G,WAAW,CAAClK,OAAO,CAACwD,KAAT,EAAgBA,KAAhB,CAA3B;AACD;AAED,AAAO,SAASgoB,oBAAT,GAAsC;AAC3C;AACA;AACAlb,EAAAA,wBAAsB,CAACtQ,OAAvB,GAAiCmrB,qBAAjC;;AAEA,MAAIhB,4BAAJ,EAAkC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI3oB,IAAiB,GAAGyW,yBAAuB,CAAClD,aAAhD;;AACA,WAAOvT,IAAI,KAAK,IAAhB,EAAsB;AACpB,YAAMiT,KAAK,GAAGjT,IAAI,CAACiT,KAAnB;;AACA,UAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBA,QAAAA,KAAK,CAACkF,OAAN,GAAgB,IAAhB;AACD;;AACDnY,MAAAA,IAAI,GAAGA,IAAI,CAACoY,IAAZ;AACD;;AACDuQ,IAAAA,4BAA4B,GAAG,KAA/B;AACD;;AAED9e,EAAAA,WAAW,GAAG9G,OAAd;AACA0T,EAAAA,yBAAuB,GAAI,IAA3B;AAEAgS,EAAAA,WAAW,GAAG,IAAd;AACAC,EAAAA,kBAAkB,GAAG,IAArB;;AAWAE,EAAAA,0CAA0C,GAAG,KAA7C;AACAa,AACD;;AAED,SAASQ,uBAAT,GAAyC;AACvC,QAAMjqB,IAAU,GAAG;AACjBuT,IAAAA,aAAa,EAAE,IADE;AAGjByG,IAAAA,SAAS,EAAE,IAHM;AAIjBkQ,IAAAA,SAAS,EAAE,IAJM;AAKjBjX,IAAAA,KAAK,EAAE,IALU;AAOjBmF,IAAAA,IAAI,EAAE;AAPW,GAAnB;;AAUA,MAAIsQ,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B;AACAjS,IAAAA,yBAAuB,CAAClD,aAAxB,GAAwCmV,kBAAkB,GAAG1oB,IAA7D;AACD,GAHD,MAGO;AACL;AACA0oB,IAAAA,kBAAkB,GAAGA,kBAAkB,CAACtQ,IAAnB,GAA0BpY,IAA/C;AACD;;AACD,SAAO0oB,kBAAP;AACD;;AAED,SAASyB,wBAAT,GAA0C;AACxC;AACA;AACA;AACA;AACA;AACA,MAAIC,eAAJ;;AACA,MAAI3B,WAAW,KAAK,IAApB,EAA0B;AACxB,UAAMjqB,OAAO,GAAGiY,yBAAuB,CAACrZ,SAAxC;;AACA,QAAIoB,OAAO,KAAK,IAAhB,EAAsB;AACpB4rB,MAAAA,eAAe,GAAG5rB,OAAO,CAAC+U,aAA1B;AACD,KAFD,MAEO;AACL6W,MAAAA,eAAe,GAAG,IAAlB;AACD;AACF,GAPD,MAOO;AACLA,IAAAA,eAAe,GAAG3B,WAAW,CAACrQ,IAA9B;AACD;;AAED,MAAIiS,sBAAJ;;AACA,MAAI3B,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B2B,IAAAA,sBAAsB,GAAG5T,yBAAuB,CAAClD,aAAjD;AACD,GAFD,MAEO;AACL8W,IAAAA,sBAAsB,GAAG3B,kBAAkB,CAACtQ,IAA5C;AACD;;AAED,MAAIiS,sBAAsB,KAAK,IAA/B,EAAqC;AACnC;AACA3B,IAAAA,kBAAkB,GAAG2B,sBAArB;AACAA,IAAAA,sBAAsB,GAAG3B,kBAAkB,CAACtQ,IAA5C;AAEAqQ,IAAAA,WAAW,GAAG2B,eAAd;AACD,GAND,MAMO;AACL;AAEA,QAAIA,eAAe,KAAK,IAAxB,EAA8B;AAC5B,YAAM,IAAIvsB,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED4qB,IAAAA,WAAW,GAAG2B,eAAd;AAEA,UAAME,OAAa,GAAG;AACpB/W,MAAAA,aAAa,EAAEkV,WAAW,CAAClV,aADP;AAGpByG,MAAAA,SAAS,EAAEyO,WAAW,CAACzO,SAHH;AAIpBkQ,MAAAA,SAAS,EAAEzB,WAAW,CAACyB,SAJH;AAKpBjX,MAAAA,KAAK,EAAEwV,WAAW,CAACxV,KALC;AAOpBmF,MAAAA,IAAI,EAAE;AAPc,KAAtB;;AAUA,QAAIsQ,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B;AACAjS,MAAAA,yBAAuB,CAAClD,aAAxB,GAAwCmV,kBAAkB,GAAG4B,OAA7D;AACD,KAHD,MAGO;AACL;AACA5B,MAAAA,kBAAkB,GAAGA,kBAAkB,CAACtQ,IAAnB,GAA0BkS,OAA/C;AACD;AACF;;AACD,SAAO5B,kBAAP;AACD;;AAED,SAAS6B,kCAAT,GAA4E;AAC1E,SAAO;AACLC,IAAAA,UAAU,EAAE,IADP;AAELC,IAAAA,MAAM,EAAE;AAFH,GAAP;AAID;;AAED,SAASC,iBAAT,CAA8B7M,KAA9B,EAAwC8M,MAAxC,EAAwE;AACtE;AACA,SAAO,OAAOA,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAAC9M,KAAD,CAArC,GAA+C8M,MAAtD;AACD;;AAED,SAASC,YAAT,CACEC,OADF,EAEEC,UAFF,EAGElwB,IAHF,EAIoB;AAClB,QAAMoF,IAAI,GAAGiqB,uBAAuB,EAApC;AACA,MAAIc,YAAJ;;AACA,MAAInwB,IAAI,KAAK0G,SAAb,EAAwB;AACtBypB,IAAAA,YAAY,GAAGnwB,IAAI,CAACkwB,UAAD,CAAnB;AACD,GAFD,MAEO;AACLC,IAAAA,YAAY,GAAKD,UAAjB;AACD;;AACD9qB,EAAAA,IAAI,CAACuT,aAAL,GAAqBvT,IAAI,CAACga,SAAL,GAAiB+Q,YAAtC;AACA,QAAM9X,KAAwB,GAAG;AAC/BkF,IAAAA,OAAO,EAAE,IADsB;AAE/Ba,IAAAA,WAAW,EAAE,IAFkB;AAG/BhX,IAAAA,KAAK,EAAEe,OAHwB;AAI/BioB,IAAAA,QAAQ,EAAE,IAJqB;AAK/BC,IAAAA,mBAAmB,EAAEJ,OALU;AAM/BK,IAAAA,iBAAiB,EAAGH;AANW,GAAjC;AAQA/qB,EAAAA,IAAI,CAACiT,KAAL,GAAaA,KAAb;AACA,QAAM+X,QAAqB,GAAI/X,KAAK,CAAC+X,QAAN,GAAkBG,qBAAqB,CAACC,IAAtB,CAC/C,IAD+C,EAE/C3U,yBAF+C,EAG/CxD,KAH+C,CAAjD;AAKA,SAAO,CAACjT,IAAI,CAACuT,aAAN,EAAqByX,QAArB,CAAP;AACD;;AAED,SAASK,aAAT,CACER,OADF,EAEEC,UAFF,EAGElwB,IAHF,EAIoB;AAClB,QAAMoF,IAAI,GAAGmqB,wBAAwB,EAArC;AACA,QAAMlX,KAAK,GAAGjT,IAAI,CAACiT,KAAnB;;AAEA,MAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAM,IAAIpV,KAAJ,CACJ,2EADI,CAAN;AAGD;;AAEDoV,EAAAA,KAAK,CAACgY,mBAAN,GAA4BJ,OAA5B;AAEA,QAAMrsB,OAAa,GAAIiqB,WAAvB,CAZkB;;AAelB,MAAIyB,SAAS,GAAG1rB,OAAO,CAAC0rB,SAAxB,CAfkB;;AAkBlB,QAAM5O,YAAY,GAAGrI,KAAK,CAACkF,OAA3B;;AACA,MAAImD,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA;AACA,QAAI4O,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,YAAMoB,SAAS,GAAGpB,SAAS,CAAC9R,IAA5B;AACA,YAAMmT,YAAY,GAAGjQ,YAAY,CAAClD,IAAlC;AACA8R,MAAAA,SAAS,CAAC9R,IAAV,GAAiBmT,YAAjB;AACAjQ,MAAAA,YAAY,CAAClD,IAAb,GAAoBkT,SAApB;AACD;;AAWD9sB,IAAAA,OAAO,CAAC0rB,SAAR,GAAoBA,SAAS,GAAG5O,YAAhC;AACArI,IAAAA,KAAK,CAACkF,OAAN,GAAgB,IAAhB;AACD;;AAED,MAAI+R,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,UAAMsB,KAAK,GAAGtB,SAAS,CAAC9R,IAAxB;AACA,QAAIoD,QAAQ,GAAGhd,OAAO,CAACwb,SAAvB;AAEA,QAAI0B,YAAY,GAAG,IAAnB;AACA,QAAI+P,iBAAiB,GAAG,IAAxB;AACA,QAAIC,gBAAgB,GAAG,IAAvB;AACA,QAAI7T,MAAM,GAAG2T,KAAb;;AACA,OAAG;AACD,YAAMriB,UAAU,GAAG0O,MAAM,CAAClR,IAA1B;;AACA,UAAI,CAAC4B,eAAe,CAACsB,WAAD,EAAcV,UAAd,CAApB,EAA+C;AAC7C;AACA;AACA;AACA,cAAMmR,KAAmB,GAAG;AAC1B3T,UAAAA,IAAI,EAAEwC,UADoB;AAE1BwhB,UAAAA,MAAM,EAAE9S,MAAM,CAAC8S,MAFW;AAG1BgB,UAAAA,aAAa,EAAE9T,MAAM,CAAC8T,aAHI;AAI1BC,UAAAA,UAAU,EAAE/T,MAAM,CAAC+T,UAJO;AAK1BxT,UAAAA,IAAI,EAAG;AALmB,SAA5B;;AAOA,YAAIsT,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BD,UAAAA,iBAAiB,GAAGC,gBAAgB,GAAGpR,KAAvC;AACAoB,UAAAA,YAAY,GAAGF,QAAf;AACD,SAHD,MAGO;AACLkQ,UAAAA,gBAAgB,GAAGA,gBAAgB,CAACtT,IAAjB,GAAwBkC,KAA3C;AACD,SAhB4C;AAkB7C;AACA;;;AACA7D,QAAAA,yBAAuB,CAACzU,KAAxB,GAAgCyG,UAAU,CACxCgO,yBAAuB,CAACzU,KADgB,EAExCmH,UAFwC,CAA1C;AAIA4S,QAAAA,sBAAsB,CAAC5S,UAAD,CAAtB;AACD,OAzBD,MAyBO;AACL;AAEA,YAAIuiB,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,gBAAMpR,KAAmB,GAAG;AAC1B;AACA;AACA;AACA3T,YAAAA,IAAI,EAAE3D,MAJoB;AAK1B2nB,YAAAA,MAAM,EAAE9S,MAAM,CAAC8S,MALW;AAM1BgB,YAAAA,aAAa,EAAE9T,MAAM,CAAC8T,aANI;AAO1BC,YAAAA,UAAU,EAAE/T,MAAM,CAAC+T,UAPO;AAQ1BxT,YAAAA,IAAI,EAAG;AARmB,WAA5B;AAUAsT,UAAAA,gBAAgB,GAAGA,gBAAgB,CAACtT,IAAjB,GAAwBkC,KAA3C;AACD,SAfI;;;AAkBL,YAAIzC,MAAM,CAAC8T,aAAX,EAA0B;AACxB;AACA;AACAnQ,UAAAA,QAAQ,GAAK3D,MAAM,CAAC+T,UAApB;AACD,SAJD,MAIO;AACL,gBAAMjB,MAAM,GAAG9S,MAAM,CAAC8S,MAAtB;AACAnP,UAAAA,QAAQ,GAAGqP,OAAO,CAACrP,QAAD,EAAWmP,MAAX,CAAlB;AACD;AACF;;AACD9S,MAAAA,MAAM,GAAGA,MAAM,CAACO,IAAhB;AACD,KAvDD,QAuDSP,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK2T,KAvDvC;;AAyDA,QAAIE,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BhQ,MAAAA,YAAY,GAAGF,QAAf;AACD,KAFD,MAEO;AACLkQ,MAAAA,gBAAgB,CAACtT,IAAjB,GAAyBqT,iBAAzB;AACD,KAtEqB;AAyEtB;;;AACA,QAAI,CAACrZ,QAAE,CAACoJ,QAAD,EAAWxb,IAAI,CAACuT,aAAhB,CAAP,EAAuC;AACrCgF,MAAAA,gCAAgC;AACjC;;AAEDvY,IAAAA,IAAI,CAACuT,aAAL,GAAqBiI,QAArB;AACAxb,IAAAA,IAAI,CAACga,SAAL,GAAiB0B,YAAjB;AACA1b,IAAAA,IAAI,CAACkqB,SAAL,GAAiBwB,gBAAjB;AAEAzY,IAAAA,KAAK,CAACiY,iBAAN,GAA0B1P,QAA1B;AACD,GA9HiB;AAiIlB;AACA;;;AACA,QAAMM,eAAe,GAAG7I,KAAK,CAAC+F,WAA9B;;AACA,MAAI8C,eAAe,KAAK,IAAxB,EAA8B;AAC5B,QAAI9C,WAAW,GAAG8C,eAAlB;;AACA,OAAG;AACD,YAAM+P,eAAe,GAAG7S,WAAW,CAACrS,IAApC;AACA8P,MAAAA,yBAAuB,CAACzU,KAAxB,GAAgCyG,UAAU,CACxCgO,yBAAuB,CAACzU,KADgB,EAExC6pB,eAFwC,CAA1C;AAIA9P,MAAAA,sBAAsB,CAAC8P,eAAD,CAAtB;AACA7S,MAAAA,WAAW,GAAKA,WAAD,CAAmBZ,IAAlC;AACD,KARD,QAQSY,WAAW,KAAK8C,eARzB;AASD,GAXD,MAWO,IAAIoO,SAAS,KAAK,IAAlB,EAAwB;AAC7B;AACA;AACAjX,IAAAA,KAAK,CAACjR,KAAN,GAAce,OAAd;AACD;;AAED,QAAMioB,QAAqB,GAAI/X,KAAK,CAAC+X,QAArC;AACA,SAAO,CAAChrB,IAAI,CAACuT,aAAN,EAAqByX,QAArB,CAAP;AACD;;AAED,SAASc,eAAT,CACEjB,OADF,EAEEC,UAFF,EAGElwB,IAHF,EAIoB;AAClB,QAAMoF,IAAI,GAAGmqB,wBAAwB,EAArC;AACA,QAAMlX,KAAK,GAAGjT,IAAI,CAACiT,KAAnB;;AAEA,MAAIA,KAAK,KAAK,IAAd,EAAoB;AAClB,UAAM,IAAIpV,KAAJ,CACJ,2EADI,CAAN;AAGD;;AAEDoV,EAAAA,KAAK,CAACgY,mBAAN,GAA4BJ,OAA5B,CAVkB;AAalB;;AACA,QAAMG,QAAqB,GAAI/X,KAAK,CAAC+X,QAArC;AACA,QAAMe,qBAAqB,GAAG9Y,KAAK,CAACkF,OAApC;AACA,MAAIqD,QAAQ,GAAGxb,IAAI,CAACuT,aAApB;;AACA,MAAIwY,qBAAqB,KAAK,IAA9B,EAAoC;AAClC;AACA9Y,IAAAA,KAAK,CAACkF,OAAN,GAAgB,IAAhB;AAEA,UAAM6T,sBAAsB,GAAGD,qBAAqB,CAAC3T,IAArD;AACA,QAAIP,MAAM,GAAGmU,sBAAb;;AACA,OAAG;AACD;AACA;AACA;AACA,YAAMrB,MAAM,GAAG9S,MAAM,CAAC8S,MAAtB;AACAnP,MAAAA,QAAQ,GAAGqP,OAAO,CAACrP,QAAD,EAAWmP,MAAX,CAAlB;AACA9S,MAAAA,MAAM,GAAGA,MAAM,CAACO,IAAhB;AACD,KAPD,QAOSP,MAAM,KAAKmU,sBAPpB,EANkC;AAgBlC;;;AACA,QAAI,CAAC5Z,QAAE,CAACoJ,QAAD,EAAWxb,IAAI,CAACuT,aAAhB,CAAP,EAAuC;AACrCgF,MAAAA,gCAAgC;AACjC;;AAEDvY,IAAAA,IAAI,CAACuT,aAAL,GAAqBiI,QAArB,CArBkC;AAuBlC;AACA;AACA;;AACA,QAAIxb,IAAI,CAACkqB,SAAL,KAAmB,IAAvB,EAA6B;AAC3BlqB,MAAAA,IAAI,CAACga,SAAL,GAAiBwB,QAAjB;AACD;;AAEDvI,IAAAA,KAAK,CAACiY,iBAAN,GAA0B1P,QAA1B;AACD;;AACD,SAAO,CAACA,QAAD,EAAWwP,QAAX,CAAP;AACD;;AAwQD,SAASiB,kBAAT,CACEjd,MADF,EAEEkd,WAFF,EAGEC,SAHF,EAIY;AACV,EAA6B;AAC3B,WAAQ7qB,SAAR;AACD;AAYF;;AAED,SAAS8qB,mBAAT,CACEpd,MADF,EAEEkd,WAFF,EAGEC,SAHF,EAIY;AACV,EAA6B;AAC3B,WAAQ7qB,SAAR;AACD;AAIF;;AAED,SAAS+qB,sBAAT,CACEF,SADF,EAEED,WAFF,EAGEI,iBAHF,EAIK;AACH,QAAMtxB,KAAK,GAAGyb,yBAAd;AACA,QAAMzW,IAAI,GAAGiqB,uBAAuB,EAApC;AAEA,MAAIsC,YAAJ;AACA;AACA,EAkBO;AACLA,IAAAA,YAAY,GAAGL,WAAW,EAA1B;AAaA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAMzrB,IAAsB,GAAG+rB,qBAAqB,EAApD;;AAEA,QAAI/rB,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAM,IAAI5C,KAAJ,CACJ,iFADI,CAAN;AAGD;;AAED,QAAI,CAACiK,oBAAoB,CAACrH,IAAD,EAAOoJ,WAAP,CAAzB,EAA8C;AAC5C4iB,MAAAA,yBAAyB,CAACzxB,KAAD,EAAQkxB,WAAR,EAAqBK,YAArB,CAAzB;AACD;AACF,GAvDE;AA0DH;AACA;;;AACAvsB,EAAAA,IAAI,CAACuT,aAAL,GAAqBgZ,YAArB;AACA,QAAMlhB,IAAsB,GAAG;AAC7B1V,IAAAA,KAAK,EAAE42B,YADsB;AAE7BL,IAAAA;AAF6B,GAA/B;AAIAlsB,EAAAA,IAAI,CAACiT,KAAL,GAAa5H,IAAb,CAjEG;;AAoEHqhB,EAAAA,WAAW,CAACC,gBAAgB,CAACvB,IAAjB,CAAsB,IAAtB,EAA4BpwB,KAA5B,EAAmCqQ,IAAnC,EAAyC8gB,SAAzC,CAAD,EAAsD,CAACA,SAAD,CAAtD,CAAX,CApEG;AAuEH;AACA;AACA;AACA;AACA;AACA;;AACAnxB,EAAAA,KAAK,CAACsC,KAAN,IAAewsB,OAAf;AACA8C,EAAAA,UAAU,CACRC,SAAa,GAAGC,SADR,EAERC,mBAAmB,CAAC3B,IAApB,CAAyB,IAAzB,EAA+BpwB,KAA/B,EAAsCqQ,IAAtC,EAA4CkhB,YAA5C,EAA0DL,WAA1D,CAFQ,EAGR5qB,SAHQ,EAIR,IAJQ,CAAV;AAOA,SAAOirB,YAAP;AACD;;AAED,SAASS,uBAAT,CACEb,SADF,EAEED,WAFF,EAGEI,iBAHF,EAIK;AACH,QAAMtxB,KAAK,GAAGyb,yBAAd;AACA,QAAMzW,IAAI,GAAGmqB,wBAAwB,EAArC,CAFG;AAIH;AACA;;AACA,QAAMoC,YAAY,GAAGL,WAAW,EAAhC;;AAYA,QAAMe,YAAY,GAAGjtB,IAAI,CAACuT,aAA1B;AACA,QAAM2Z,eAAe,GAAG,CAAC9a,QAAE,CAAC6a,YAAD,EAAeV,YAAf,CAA3B;;AACA,MAAIW,eAAJ,EAAqB;AACnBltB,IAAAA,IAAI,CAACuT,aAAL,GAAqBgZ,YAArB;AACAhU,IAAAA,gCAAgC;AACjC;;AACD,QAAMlN,IAAI,GAAGrL,IAAI,CAACiT,KAAlB;AAEAka,EAAAA,YAAY,CAACR,gBAAgB,CAACvB,IAAjB,CAAsB,IAAtB,EAA4BpwB,KAA5B,EAAmCqQ,IAAnC,EAAyC8gB,SAAzC,CAAD,EAAsD,CAChEA,SADgE,CAAtD,CAAZ,CA1BG;AA+BH;AACA;AACA;;AACA,MACE9gB,IAAI,CAAC6gB,WAAL,KAAqBA,WAArB,IACAgB,eADA;AAGA;AACCxE,EAAAA,kBAAkB,KAAK,IAAvB,IACCA,kBAAkB,CAACnV,aAAnB,CAAiCtY,GAAjC,GAAuC4xB,SAN3C,EAOE;AACA7xB,IAAAA,KAAK,CAACsC,KAAN,IAAewsB,OAAf;AACA8C,IAAAA,UAAU,CACRC,SAAa,GAAGC,SADR,EAERC,mBAAmB,CAAC3B,IAApB,CAAyB,IAAzB,EAA+BpwB,KAA/B,EAAsCqQ,IAAtC,EAA4CkhB,YAA5C,EAA0DL,WAA1D,CAFQ,EAGR5qB,SAHQ,EAIR,IAJQ,CAAV,CAFA;AAUA;AACA;;AACA,UAAMb,IAAsB,GAAG+rB,qBAAqB,EAApD;;AAEA,QAAI/rB,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAM,IAAI5C,KAAJ,CACJ,iFADI,CAAN;AAGD;;AAED,QAAI,CAACiK,oBAAoB,CAACrH,IAAD,EAAOoJ,WAAP,CAAzB,EAA8C;AAC5C4iB,MAAAA,yBAAyB,CAACzxB,KAAD,EAAQkxB,WAAR,EAAqBK,YAArB,CAAzB;AACD;AACF;;AAED,SAAOA,YAAP;AACD;;AAED,SAASE,yBAAT,CACEzxB,KADF,EAEEkxB,WAFF,EAGEkB,gBAHF,EAIE;AACApyB,EAAAA,KAAK,CAACsC,KAAN,IAAetB,gBAAf;AACA,QAAMqxB,KAA+B,GAAG;AACtCnB,IAAAA,WADsC;AAEtCv2B,IAAAA,KAAK,EAAEy3B;AAF+B,GAAxC;AAIA,MAAIE,oBAAyD,GAAI7W,yBAAuB,CAACuB,WAAzF;;AACA,MAAIsV,oBAAoB,KAAK,IAA7B,EAAmC;AACjCA,IAAAA,oBAAoB,GAAG/C,kCAAkC,EAAzD;AACA9T,IAAAA,yBAAuB,CAACuB,WAAxB,GAAuCsV,oBAAvC;AACAA,IAAAA,oBAAoB,CAAC7C,MAArB,GAA8B,CAAC4C,KAAD,CAA9B;AACD,GAJD,MAIO;AACL,UAAM5C,MAAM,GAAG6C,oBAAoB,CAAC7C,MAApC;;AACA,QAAIA,MAAM,KAAK,IAAf,EAAqB;AACnB6C,MAAAA,oBAAoB,CAAC7C,MAArB,GAA8B,CAAC4C,KAAD,CAA9B;AACD,KAFD,MAEO;AACL5C,MAAAA,MAAM,CAACxhB,IAAP,CAAYokB,KAAZ;AACD;AACF;AACF;;AAED,SAASN,mBAAT,CACE/xB,KADF,EAEEqQ,IAFF,EAGEkhB,YAHF,EAIEL,WAJF,EAKE;AACA;AACA7gB,EAAAA,IAAI,CAAC1V,KAAL,GAAa42B,YAAb;AACAlhB,EAAAA,IAAI,CAAC6gB,WAAL,GAAmBA,WAAnB,CAHA;AAMA;AACA;AACA;;AACA,MAAIqB,sBAAsB,CAACliB,IAAD,CAA1B,EAAkC;AAChC;AACAmiB,IAAAA,kBAAkB,CAACxyB,KAAD,CAAlB;AACD;AACF;;AAED,SAAS2xB,gBAAT,CAA0B3xB,KAA1B,EAAiCqQ,IAAjC,EAAuC8gB,SAAvC,EAAkD;AAChD,QAAMsB,iBAAiB,GAAG,MAAM;AAC9B;AACA;AACA,QAAIF,sBAAsB,CAACliB,IAAD,CAA1B,EAAkC;AAChC;AACAmiB,MAAAA,kBAAkB,CAACxyB,KAAD,CAAlB;AACD;AACF,GAPD,CADgD;;;AAUhD,SAAOmxB,SAAS,CAACsB,iBAAD,CAAhB;AACD;;AAED,SAASF,sBAAT,CAAgCliB,IAAhC,EAAsC;AACpC,QAAMqiB,iBAAiB,GAAGriB,IAAI,CAAC6gB,WAA/B;AACA,QAAMyB,SAAS,GAAGtiB,IAAI,CAAC1V,KAAvB;;AACA,MAAI;AACF,UAAMohB,SAAS,GAAG2W,iBAAiB,EAAnC;AACA,WAAO,CAACtb,QAAE,CAACub,SAAD,EAAY5W,SAAZ,CAAV;AACD,GAHD,CAGE,OAAO5D,KAAP,EAAc;AACd,WAAO,IAAP;AACD;AACF;;AAED,SAASqa,kBAAT,CAA4BxyB,KAA5B,EAAmC;AACjC,QAAMyF,IAAI,GAAG+Y,8BAA8B,CAACxe,KAAD,EAAQiI,QAAR,CAA3C;;AACA,MAAIxC,IAAI,KAAK,IAAb,EAAmB;AACjBsc,IAAAA,qBAAqB,CAACtc,IAAD,EAAOzF,KAAP,EAAciI,QAAd,EAAwBmC,WAAxB,CAArB;AACD;AACF;;AAED,SAASwoB,UAAT,CACE7C,YADF,EAEsC;AACpC,QAAM/qB,IAAI,GAAGiqB,uBAAuB,EAApC;;AACA,MAAI,OAAOc,YAAP,KAAwB,UAA5B,EAAwC;AACtC;AACAA,IAAAA,YAAY,GAAGA,YAAY,EAA3B;AACD;;AACD/qB,EAAAA,IAAI,CAACuT,aAAL,GAAqBvT,IAAI,CAACga,SAAL,GAAiB+Q,YAAtC;AACA,QAAM9X,KAA0C,GAAG;AACjDkF,IAAAA,OAAO,EAAE,IADwC;AAEjDa,IAAAA,WAAW,EAAE,IAFoC;AAGjDhX,IAAAA,KAAK,EAAEe,OAH0C;AAIjDioB,IAAAA,QAAQ,EAAE,IAJuC;AAKjDC,IAAAA,mBAAmB,EAAEP,iBAL4B;AAMjDQ,IAAAA,iBAAiB,EAAGH;AAN6B,GAAnD;AAQA/qB,EAAAA,IAAI,CAACiT,KAAL,GAAaA,KAAb;AACA,QAAM+X,QAEL,GAAI/X,KAAK,CAAC+X,QAAN,GAAkB6C,gBAAgB,CAACzC,IAAjB,CACrB,IADqB,EAErB3U,yBAFqB,EAGrBxD,KAHqB,CAFvB;AAOA,SAAO,CAACjT,IAAI,CAACuT,aAAN,EAAqByX,QAArB,CAAP;AACD;;AAED,SAAS8C,WAAT,CACE/C,YADF,EAEsC;AACpC,SAAOM,aAAa,CAACX,iBAAD,AAAA,CAApB;AACD;;AAED,SAASqD,aAAT,CACEhD,YADF,EAEsC;AACpC,SAAOe,eAAe,CAACpB,iBAAD,AAAA,CAAtB;AACD;;AAED,SAASkC,UAAT,CAAoB3xB,GAApB,EAAyB+yB,MAAzB,EAAiCC,OAAjC,EAA0CC,IAA1C,EAAgD;AAC9C,QAAM5R,MAAc,GAAG;AACrBrhB,IAAAA,GADqB;AAErB+yB,IAAAA,MAFqB;AAGrBC,IAAAA,OAHqB;AAIrBC,IAAAA,IAJqB;AAKrB;AACA9V,IAAAA,IAAI,EAAG;AANc,GAAvB;AAQA,MAAIkV,oBAAyD,GAAI7W,yBAAuB,CAACuB,WAAzF;;AACA,MAAIsV,oBAAoB,KAAK,IAA7B,EAAmC;AACjCA,IAAAA,oBAAoB,GAAG/C,kCAAkC,EAAzD;AACA9T,IAAAA,yBAAuB,CAACuB,WAAxB,GAAuCsV,oBAAvC;AACAA,IAAAA,oBAAoB,CAAC9C,UAArB,GAAkClO,MAAM,CAAClE,IAAP,GAAckE,MAAhD;AACD,GAJD,MAIO;AACL,UAAMkO,UAAU,GAAG8C,oBAAoB,CAAC9C,UAAxC;;AACA,QAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB8C,MAAAA,oBAAoB,CAAC9C,UAArB,GAAkClO,MAAM,CAAClE,IAAP,GAAckE,MAAhD;AACD,KAFD,MAEO;AACL,YAAM6R,WAAW,GAAG3D,UAAU,CAACpS,IAA/B;AACAoS,MAAAA,UAAU,CAACpS,IAAX,GAAkBkE,MAAlB;AACAA,MAAAA,MAAM,CAAClE,IAAP,GAAc+V,WAAd;AACAb,MAAAA,oBAAoB,CAAC9C,UAArB,GAAkClO,MAAlC;AACD;AACF;;AACD,SAAOA,MAAP;AACD;;AAmBD,SAAS8R,QAAT,CAAqBC,YAArB,EAAsD;AACpD,QAAMruB,IAAI,GAAGiqB,uBAAuB,EAApC;;AACA,EA4DO;AACL,UAAMvK,GAAG,GAAG;AAAClhB,MAAAA,OAAO,EAAE6vB;AAAV,KAAZ;AACAruB,IAAAA,IAAI,CAACuT,aAAL,GAAqBmM,GAArB;AACA,WAAOA,GAAP;AACD;AACF;;AAED,SAAS4O,SAAT,CAAsBD,YAAtB,EAAuD;AACrD,QAAMruB,IAAI,GAAGmqB,wBAAwB,EAArC;AACA,SAAOnqB,IAAI,CAACuT,aAAZ;AACD;;AAED,SAASgb,eAAT,CAAyBhQ,UAAzB,EAAqCiQ,SAArC,EAAgDR,MAAhD,EAAwDE,IAAxD,EAAoE;AAClE,QAAMluB,IAAI,GAAGiqB,uBAAuB,EAApC;AACA,QAAMhB,QAAQ,GAAGiF,IAAI,KAAK5sB,SAAT,GAAqB,IAArB,GAA4B4sB,IAA7C;AACAzX,EAAAA,yBAAuB,CAACnZ,KAAxB,IAAiCihB,UAAjC;AACAve,EAAAA,IAAI,CAACuT,aAAL,GAAqBqZ,UAAU,CAC7BC,SAAa,GAAG2B,SADa,EAE7BR,MAF6B,EAG7B1sB,SAH6B,EAI7B2nB,QAJ6B,CAA/B;AAMD;;AAED,SAASwF,gBAAT,CAA0BlQ,UAA1B,EAAsCiQ,SAAtC,EAAiDR,MAAjD,EAAyDE,IAAzD,EAAqE;AACnE,QAAMluB,IAAI,GAAGmqB,wBAAwB,EAArC;AACA,QAAMlB,QAAQ,GAAGiF,IAAI,KAAK5sB,SAAT,GAAqB,IAArB,GAA4B4sB,IAA7C;AACA,MAAID,OAAO,GAAG3sB,SAAd;;AAEA,MAAImnB,WAAW,KAAK,IAApB,EAA0B;AACxB,UAAMiG,UAAU,GAAGjG,WAAW,CAAClV,aAA/B;AACA0a,IAAAA,OAAO,GAAGS,UAAU,CAACT,OAArB;;AACA,QAAIhF,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAMC,QAAQ,GAAGwF,UAAU,CAACR,IAA5B;;AACA,UAAIlF,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;AAC1ClpB,QAAAA,IAAI,CAACuT,aAAL,GAAqBqZ,UAAU,CAAC4B,SAAD,EAAYR,MAAZ,EAAoBC,OAApB,EAA6BhF,QAA7B,CAA/B;AACA;AACD;AACF;AACF;;AAEDxS,EAAAA,yBAAuB,CAACnZ,KAAxB,IAAiCihB,UAAjC;AAEAve,EAAAA,IAAI,CAACuT,aAAL,GAAqBqZ,UAAU,CAC7BC,SAAa,GAAG2B,SADa,EAE7BR,MAF6B,EAG7BC,OAH6B,EAI7BhF,QAJ6B,CAA/B;AAMD;;AAED,SAASyD,WAAT,CACEsB,MADF,EAEEE,IAFF,EAGQ;AACN,EAWO;AACL,WAAOK,eAAe,CACpBzE,OAAa,GAAG6E,aADI,EAEpB7B,SAFoB,EAGpBkB,MAHoB,EAIpBE,IAJoB,CAAtB;AAMD;AACF;;AAED,SAASf,YAAT,CACEa,MADF,EAEEE,IAFF,EAGQ;AACN,SAAOO,gBAAgB,CAAC3E,OAAD,EAAgBgD,SAAhB,EAA6BkB,MAA7B,EAAqCE,IAArC,CAAvB;AACD;;AAED,SAASU,oBAAT,CACEZ,MADF,EAEEE,IAFF,EAGQ;AACN,SAAOK,eAAe,CAACxE,MAAD,EAAe8E,SAAf,EAA8Bb,MAA9B,EAAsCE,IAAtC,CAAtB;AACD;;AAED,SAASY,qBAAT,CACEd,MADF,EAEEE,IAFF,EAGQ;AACN,SAAOO,gBAAgB,CAAC1E,MAAD,EAAe8E,SAAf,EAA8Bb,MAA9B,EAAsCE,IAAtC,CAAvB;AACD;;AAED,SAASa,iBAAT,CACEf,MADF,EAEEE,IAFF,EAGQ;AACN,MAAI3P,UAAiB,GAAGwL,MAAxB;;AAWA,SAAOwE,eAAe,CAAChQ,UAAD,EAAayQ,MAAb,EAAyBhB,MAAzB,EAAiCE,IAAjC,CAAtB;AACD;;AAED,SAASe,kBAAT,CACEjB,MADF,EAEEE,IAFF,EAGQ;AACN,SAAOO,gBAAgB,CAAC1E,MAAD,EAAeiF,MAAf,EAA2BhB,MAA3B,EAAmCE,IAAnC,CAAvB;AACD;;AAED,SAASgB,sBAAT,CACElB,MADF,EAEEtO,GAFF,EAGE;AACA,MAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7B,UAAMyP,WAAW,GAAGzP,GAApB;AACA,UAAMrU,IAAI,GAAG2iB,MAAM,EAAnB;AACAmB,IAAAA,WAAW,CAAC9jB,IAAD,CAAX;AACA,WAAO,MAAM;AACX8jB,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAFD;AAGD,GAPD,MAOO,IAAIzP,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKpe,SAA5B,EAAuC;AAC5C,UAAM8tB,SAAS,GAAG1P,GAAlB;;AAUA,UAAMrU,IAAI,GAAG2iB,MAAM,EAAnB;AACAoB,IAAAA,SAAS,CAAC5wB,OAAV,GAAoB6M,IAApB;AACA,WAAO,MAAM;AACX+jB,MAAAA,SAAS,CAAC5wB,OAAV,GAAoB,IAApB;AACD,KAFD;AAGD;AACF;;AAED,SAAS6wB,qBAAT,CACE3P,GADF,EAEEsO,MAFF,EAGEE,IAHF,EAIQ;AACN;;AAWA,QAAMoB,UAAU,GACdpB,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK5sB,SAA1B,GAAsC4sB,IAAI,CAACqB,MAAL,CAAY,CAAC7P,GAAD,CAAZ,CAAtC,GAA2D,IAD7D;AAGA,MAAInB,UAAiB,GAAGwL,MAAxB;;AAWA,SAAOwE,eAAe,CACpBhQ,UADoB,EAEpByQ,MAFoB,EAGpBE,sBAAsB,CAAC9D,IAAvB,CAA4B,IAA5B,EAAkC4C,MAAlC,EAA0CtO,GAA1C,CAHoB,EAIpB4P,UAJoB,CAAtB;AAMD;;AAED,SAASE,sBAAT,CACE9P,GADF,EAEEsO,MAFF,EAGEE,IAHF,EAIQ;AACN;;AAWA,QAAMoB,UAAU,GACdpB,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK5sB,SAA1B,GAAsC4sB,IAAI,CAACqB,MAAL,CAAY,CAAC7P,GAAD,CAAZ,CAAtC,GAA2D,IAD7D;AAGA,SAAO+O,gBAAgB,CACrB1E,MADqB,EAErBiF,MAFqB,EAGrBE,sBAAsB,CAAC9D,IAAvB,CAA4B,IAA5B,EAAkC4C,MAAlC,EAA0CtO,GAA1C,CAHqB,EAIrB4P,UAJqB,CAAvB;AAMD;;AAED,SAASG,eAAT,CAA4B95B,KAA5B,EAAsC+5B,WAAtC,EAA+E;AAE7E;AACA;AACD;;AAED,MAAMC,gBAAgB,GAAGF,eAAzB;;AAEA,SAASG,aAAT,CAA0Bjd,QAA1B,EAAuCub,IAAvC,EAA4E;AAC1E,QAAMluB,IAAI,GAAGiqB,uBAAuB,EAApC;AACA,QAAMhB,QAAQ,GAAGiF,IAAI,KAAK5sB,SAAT,GAAqB,IAArB,GAA4B4sB,IAA7C;AACAluB,EAAAA,IAAI,CAACuT,aAAL,GAAqB,CAACZ,QAAD,EAAWsW,QAAX,CAArB;AACA,SAAOtW,QAAP;AACD;;AAED,SAASkd,cAAT,CAA2Bld,QAA3B,EAAwCub,IAAxC,EAA6E;AAC3E,QAAMluB,IAAI,GAAGmqB,wBAAwB,EAArC;AACA,QAAMlB,QAAQ,GAAGiF,IAAI,KAAK5sB,SAAT,GAAqB,IAArB,GAA4B4sB,IAA7C;AACA,QAAMjT,SAAS,GAAGjb,IAAI,CAACuT,aAAvB;;AACA,MAAI0H,SAAS,KAAK,IAAlB,EAAwB;AACtB,QAAIgO,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAMC,QAA6B,GAAGjO,SAAS,CAAC,CAAD,CAA/C;;AACA,UAAI+N,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;AAC1C,eAAOjO,SAAS,CAAC,CAAD,CAAhB;AACD;AACF;AACF;;AACDjb,EAAAA,IAAI,CAACuT,aAAL,GAAqB,CAACZ,QAAD,EAAWsW,QAAX,CAArB;AACA,SAAOtW,QAAP;AACD;;AAED,SAASmd,SAAT,CACEC,UADF,EAEE7B,IAFF,EAGK;AACH,QAAMluB,IAAI,GAAGiqB,uBAAuB,EAApC;AACA,QAAMhB,QAAQ,GAAGiF,IAAI,KAAK5sB,SAAT,GAAqB,IAArB,GAA4B4sB,IAA7C;AACA,QAAMnX,SAAS,GAAGgZ,UAAU,EAA5B;AACA/vB,EAAAA,IAAI,CAACuT,aAAL,GAAqB,CAACwD,SAAD,EAAYkS,QAAZ,CAArB;AACA,SAAOlS,SAAP;AACD;;AAED,SAASiZ,UAAT,CACED,UADF,EAEE7B,IAFF,EAGK;AACH,QAAMluB,IAAI,GAAGmqB,wBAAwB,EAArC;AACA,QAAMlB,QAAQ,GAAGiF,IAAI,KAAK5sB,SAAT,GAAqB,IAArB,GAA4B4sB,IAA7C;AACA,QAAMjT,SAAS,GAAGjb,IAAI,CAACuT,aAAvB;;AACA,MAAI0H,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA,QAAIgO,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAMC,QAA6B,GAAGjO,SAAS,CAAC,CAAD,CAA/C;;AACA,UAAI+N,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;AAC1C,eAAOjO,SAAS,CAAC,CAAD,CAAhB;AACD;AACF;AACF;;AACD,QAAMlE,SAAS,GAAGgZ,UAAU,EAA5B;AACA/vB,EAAAA,IAAI,CAACuT,aAAL,GAAqB,CAACwD,SAAD,EAAYkS,QAAZ,CAArB;AACA,SAAOlS,SAAP;AACD;;AAED,SAASkZ,kBAAT,CAA+Bt6B,KAA/B,EAA4C;AAC1C,QAAMqK,IAAI,GAAGiqB,uBAAuB,EAApC;AACAjqB,EAAAA,IAAI,CAACuT,aAAL,GAAqB5d,KAArB;AACA,SAAOA,KAAP;AACD;;AAED,SAASu6B,mBAAT,CAAgCv6B,KAAhC,EAA6C;AAC3C,QAAMqK,IAAI,GAAGmqB,wBAAwB,EAArC;AACA,QAAMgG,mBAAyB,GAAI1H,WAAnC;AACA,QAAMkF,SAAY,GAAGwC,mBAAmB,CAAC5c,aAAzC;AACA,SAAO6c,uBAAuB,CAACpwB,IAAD,EAAO2tB,SAAP,EAAkBh4B,KAAlB,CAA9B;AACD;;AAED,SAAS06B,qBAAT,CAAkC16B,KAAlC,EAA+C;AAC7C,QAAMqK,IAAI,GAAGmqB,wBAAwB,EAArC;;AACA,MAAI1B,WAAW,KAAK,IAApB,EAA0B;AACxB;AACAzoB,IAAAA,IAAI,CAACuT,aAAL,GAAqB5d,KAArB;AACA,WAAOA,KAAP;AACD,GAJD,MAIO;AACL;AACA,UAAMg4B,SAAY,GAAGlF,WAAW,CAAClV,aAAjC;AACA,WAAO6c,uBAAuB,CAACpwB,IAAD,EAAO2tB,SAAP,EAAkBh4B,KAAlB,CAA9B;AACD;AACF;;AAED,SAASy6B,uBAAT,CAAoCpwB,IAApC,EAAgD2tB,SAAhD,EAA8Dh4B,KAA9D,EAA2E;AACzE,QAAM26B,gBAAgB,GAAG,CAAC3oB,0BAA0B,CAACkC,WAAD,CAApD;;AACA,MAAIymB,gBAAJ,EAAsB;AACpB;AACA;AAEA,QAAI,CAACle,QAAE,CAACzc,KAAD,EAAQg4B,SAAR,CAAP,EAA2B;AACzB;AACA,YAAM4C,YAAY,GAAGroB,uBAAuB,EAA5C;AACAuO,MAAAA,yBAAuB,CAACzU,KAAxB,GAAgCyG,UAAU,CACxCgO,yBAAuB,CAACzU,KADgB,EAExCuuB,YAFwC,CAA1C;AAIAxU,MAAAA,sBAAsB,CAACwU,YAAD,CAAtB,CAPyB;AAUzB;AACA;AACA;;AACAvwB,MAAAA,IAAI,CAACga,SAAL,GAAiB,IAAjB;AACD,KAlBmB;;;AAqBpB,WAAO2T,SAAP;AACD,GAtBD,MAsBO;AACL;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI3tB,IAAI,CAACga,SAAT,EAAoB;AAClB;AACAha,MAAAA,IAAI,CAACga,SAAL,GAAiB,KAAjB;AACAzB,MAAAA,gCAAgC;AACjC;;AAEDvY,IAAAA,IAAI,CAACuT,aAAL,GAAqB5d,KAArB;AACA,WAAOA,KAAP;AACD;AACF;;AAED,SAAS66B,eAAT,CAAyBC,UAAzB,EAAqC9d,QAArC,EAA+C+d,OAA/C,EAAwD;AACtD,QAAMC,gBAAgB,GAAG1mB,wBAAwB,EAAjD;AACAC,EAAAA,wBAAwB,CACtBE,mBAAmB,CAACumB,gBAAD,EAAmB3vB,uBAAnB,CADG,CAAxB;AAIAyvB,EAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,QAAMG,cAAc,GAAG3b,yBAAuB,CAACG,UAA/C;AACAH,EAAAA,yBAAuB,CAACG,UAAxB,GAAqC,EAArC;AACA,QAAMyb,iBAAiB,GAAG5b,yBAAuB,CAACG,UAAlD;;AAaA,MAAI;AACFqb,IAAAA,UAAU,CAAC,KAAD,CAAV;AACA9d,IAAAA,QAAQ;AACT,GAHD,SAGU;AACRzI,IAAAA,wBAAwB,CAACymB,gBAAD,CAAxB;AAEA1b,IAAAA,yBAAuB,CAACG,UAAxB,GAAqCwb,cAArC;AAeD;AACF;;AAED,SAASE,eAAT,GAGE;AAAA,sBACgClD,UAAU,CAAC,KAAD,CAD1C;AAAA,QACOmD,SADP;AAAA,QACkBN,UADlB;;;AAGA,QAAMO,KAAK,GAAGR,eAAe,CAACpF,IAAhB,CAAqB,IAArB,EAA2BqF,UAA3B,CAAd;AACA,QAAMzwB,IAAI,GAAGiqB,uBAAuB,EAApC;AACAjqB,EAAAA,IAAI,CAACuT,aAAL,GAAqByd,KAArB;AACA,SAAO,CAACD,SAAD,EAAYC,KAAZ,CAAP;AACD;;AAED,SAASC,gBAAT,GAGE;AAAA,uBACoBnD,WAAW,CAAC,AAAD,CAD/B;AAAA,QACOiD,SADP;;AAEA,QAAM/wB,IAAI,GAAGmqB,wBAAwB,EAArC;AACA,QAAM6G,KAAK,GAAGhxB,IAAI,CAACuT,aAAnB;AACA,SAAO,CAACwd,SAAD,EAAYC,KAAZ,CAAP;AACD;;AAED,SAASE,kBAAT,GAGE;AAAA,yBACoBnD,aAAa,CAAC,AAAD,CADjC;AAAA,QACOgD,SADP;;AAEA,QAAM/wB,IAAI,GAAGmqB,wBAAwB,EAArC;AACA,QAAM6G,KAAK,GAAGhxB,IAAI,CAACuT,aAAnB;AACA,SAAO,CAACwd,SAAD,EAAYC,KAAZ,CAAP;AACD;;AASD,SAASG,OAAT,GAA2B;AACzB,QAAMnxB,IAAI,GAAGiqB,uBAAuB,EAApC;AAEA,QAAMxpB,IAAI,GAAK+rB,qBAAqB,EAApC,CAHyB;AAKzB;AACA;AACA;AACA;;AACA,QAAM4E,gBAAgB,GAAG3wB,IAAI,CAAC2wB,gBAA9B;AAEA,MAAIC,EAAJ;;AACA,EAeO;AACL;AACA,UAAMC,cAAc,GAAGzI,qBAAqB,EAA5C;AACAwI,IAAAA,EAAE,GAAG,MAAMD,gBAAN,GAAyB,GAAzB,GAA+BE,cAAc,CAAClR,QAAf,CAAwB,EAAxB,CAA/B,GAA6D,GAAlE;AACD;;AAEDpgB,EAAAA,IAAI,CAACuT,aAAL,GAAqB8d,EAArB;AACA,SAAOA,EAAP;AACD;;AAED,SAASE,QAAT,GAA4B;AAC1B,QAAMvxB,IAAI,GAAGmqB,wBAAwB,EAArC;AACA,QAAMkH,EAAU,GAAGrxB,IAAI,CAACuT,aAAxB;AACA,SAAO8d,EAAP;AACD;;AAED,SAASG,YAAT,GAAwB;AACtB,QAAMxxB,IAAI,GAAGiqB,uBAAuB,EAApC;AACA,QAAMwH,OAAO,GAAIzxB,IAAI,CAACuT,aAAL,GAAqBme,YAAY,CAACtG,IAAb,CACpC,IADoC,EAEpC3U,yBAFoC,CAAtC;AAIA,SAAOgb,OAAP;AACD;;AAED,SAASE,aAAT,GAAyB;AACvB,QAAM3xB,IAAI,GAAGmqB,wBAAwB,EAArC;AACA,SAAOnqB,IAAI,CAACuT,aAAZ;AACD;;AAED,SAASme,YAAT,CAAyB12B,KAAzB,EAAuC42B,OAAvC,EAA0DC,SAA1D,EAAwE;AACtE,AAIA;AACA;;;AACA,MAAIx3B,QAAQ,GAAGW,KAAK,CAACuC,MAArB;;AACA,SAAOlD,QAAQ,KAAK,IAApB,EAA0B;AACxB,YAAQA,QAAQ,CAACY,GAAjB;AACE,WAAKpD,cAAL;AACA,WAAKpB,QAAL;AAAe;AACb;AACA,gBAAMkQ,IAAI,GAAGmW,iBAAiB,CAACziB,QAAD,CAA9B;AACA,gBAAM0M,SAAS,GAAG8V,gBAAgB,EAAlC;AACA,gBAAMiV,aAAa,GAAGC,YAAuB,CAAChrB,SAAD,EAAYJ,IAAZ,CAA7C;AACA,gBAAMlG,IAAI,GAAGuxB,aAAwB,CAAC33B,QAAD,EAAWy3B,aAAX,EAA0BnrB,IAA1B,CAArC;;AACA,cAAIlG,IAAI,KAAK,IAAb,EAAmB;AACjBsc,YAAAA,qBAAqB,CAACtc,IAAD,EAAOpG,QAAP,EAAiBsM,IAAjB,EAAuBI,SAAvB,CAArB;AACAkrB,YAAAA,mBAA8B,CAACxxB,IAAD,EAAOpG,QAAP,EAAiBsM,IAAjB,CAA9B;AACD,WATY;AAYb;AACA;;;AACA,gBAAMurB,WAAW,GAAGlK,WAAW,EAA/B;;AACA,cAAI4J,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKtwB,SAAhC,IAA6Cb,IAAI,KAAK,IAA1D,EAAgE;AAC9D;AACA;AACAyxB,YAAAA,WAAW,CAAC/J,IAAZ,CAAiBzyB,GAAjB,CAAqBk8B,OAArB,EAA8BC,SAA9B;AACD;;AAED,gBAAMn3B,OAAO,GAAG;AACdutB,YAAAA,KAAK,EAAEiK;AADO,WAAhB;AAGAJ,UAAAA,aAAa,CAACp3B,OAAd,GAAwBA,OAAxB;AACA;AACD;AA5BH;;AA8BAL,IAAAA,QAAQ,GAAGA,QAAQ,CAACkD,MAApB;AACD,GAxCqE;;AA0CvE;;AAED,SAAS4tB,qBAAT,CACEnwB,KADF,EAEEiY,KAFF,EAGE0X,MAHF,EAIE;AACA;AAUA,QAAMhkB,IAAI,GAAGmW,iBAAiB,CAAC9hB,KAAD,CAA9B;AAEA,QAAM6c,MAAoB,GAAG;AAC3BlR,IAAAA,IAD2B;AAE3BgkB,IAAAA,MAF2B;AAG3BgB,IAAAA,aAAa,EAAE,KAHY;AAI3BC,IAAAA,UAAU,EAAE,IAJe;AAK3BxT,IAAAA,IAAI,EAAG;AALoB,GAA7B;;AAQA,MAAI+Z,mBAAmB,CAACn3B,KAAD,CAAvB,EAAgC;AAC9Bo3B,IAAAA,wBAAwB,CAACnf,KAAD,EAAQ4E,MAAR,CAAxB;AACD,GAFD,MAEO;AACL,UAAMpX,IAAI,GAAG2Y,2BAA2B,CAACpe,KAAD,EAAQiY,KAAR,EAAe4E,MAAf,EAAuBlR,IAAvB,CAAxC;;AACA,QAAIlG,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAMsG,SAAS,GAAG8V,gBAAgB,EAAlC;AACAE,MAAAA,qBAAqB,CAACtc,IAAD,EAAOzF,KAAP,EAAc2L,IAAd,EAAoBI,SAApB,CAArB;AACAsrB,MAAAA,wBAAwB,CAAC5xB,IAAD,EAAOwS,KAAP,EAActM,IAAd,CAAxB;AACD;AACF;AAGF;;AAED,SAASknB,gBAAT,CACE7yB,KADF,EAEEiY,KAFF,EAGE0X,MAHF,EAIE;AACA;AAUA,QAAMhkB,IAAI,GAAGmW,iBAAiB,CAAC9hB,KAAD,CAA9B;AAEA,QAAM6c,MAAoB,GAAG;AAC3BlR,IAAAA,IAD2B;AAE3BgkB,IAAAA,MAF2B;AAG3BgB,IAAAA,aAAa,EAAE,KAHY;AAI3BC,IAAAA,UAAU,EAAE,IAJe;AAK3BxT,IAAAA,IAAI,EAAG;AALoB,GAA7B;;AAQA,MAAI+Z,mBAAmB,CAACn3B,KAAD,CAAvB,EAAgC;AAC9Bo3B,IAAAA,wBAAwB,CAACnf,KAAD,EAAQ4E,MAAR,CAAxB;AACD,GAFD,MAEO;AACL,UAAMza,SAAS,GAAGpC,KAAK,CAACoC,SAAxB;;AACA,QACEpC,KAAK,CAACgH,KAAN,KAAgBe,OAAhB,KACC3F,SAAS,KAAK,IAAd,IAAsBA,SAAS,CAAC4E,KAAV,KAAoBe,OAD3C,CADF,EAGE;AACA;AACA;AACA;AACA,YAAMkoB,mBAAmB,GAAGhY,KAAK,CAACgY,mBAAlC;;AACA,UAAIA,mBAAmB,KAAK,IAA5B,EAAkC;AAChC;AAKA,YAAI;AACF,gBAAM3X,YAAe,GAAIL,KAAK,CAACiY,iBAA/B;AACA,gBAAMU,UAAU,GAAGX,mBAAmB,CAAC3X,YAAD,EAAeqX,MAAf,CAAtC,CAFE;AAIF;AACA;AACA;;AACA9S,UAAAA,MAAM,CAAC8T,aAAP,GAAuB,IAAvB;AACA9T,UAAAA,MAAM,CAAC+T,UAAP,GAAoBA,UAApB;;AACA,cAAIxZ,QAAE,CAACwZ,UAAD,EAAatY,YAAb,CAAN,EAAkC;AAChC;AACA;AACA;AACA;AACA;AACAgG,YAAAA,4CAA4C,CAC1Cte,KAD0C,EAE1CiY,KAF0C,EAG1C4E,MAH0C,EAI1ClR,IAJ0C,CAA5C;AAMA;AACD;AACF,SAvBD,CAuBE,OAAOwM,KAAP,EAAc;AAEf,SAzBD,SAyBU;AACR,AAGD;AACF;AACF;;AAED,UAAM1S,IAAI,GAAG2Y,2BAA2B,CAACpe,KAAD,EAAQiY,KAAR,EAAe4E,MAAf,EAAuBlR,IAAvB,CAAxC;;AACA,QAAIlG,IAAI,KAAK,IAAb,EAAmB;AACjB,YAAMsG,SAAS,GAAG8V,gBAAgB,EAAlC;AACAE,MAAAA,qBAAqB,CAACtc,IAAD,EAAOzF,KAAP,EAAc2L,IAAd,EAAoBI,SAApB,CAArB;AACAsrB,MAAAA,wBAAwB,CAAC5xB,IAAD,EAAOwS,KAAP,EAActM,IAAd,CAAxB;AACD;AACF;AAGF;;AAED,SAASwrB,mBAAT,CAA6Bn3B,KAA7B,EAA2C;AACzC,QAAMoC,SAAS,GAAGpC,KAAK,CAACoC,SAAxB;AACA,SACEpC,KAAK,KAAKyb,yBAAV,IACCrZ,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKqZ,yBAFvC;AAID;;AAED,SAAS2b,wBAAT,CACEnf,KADF,EAEE4E,MAFF,EAGE;AACA;AACA;AACA;AACA+Q,EAAAA,0CAA0C,GAAGD,4BAA4B,GAAG,IAA5E;AACA,QAAMxQ,OAAO,GAAGlF,KAAK,CAACkF,OAAtB;;AACA,MAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACAN,IAAAA,MAAM,CAACO,IAAP,GAAcP,MAAd;AACD,GAHD,MAGO;AACLA,IAAAA,MAAM,CAACO,IAAP,GAAcD,OAAO,CAACC,IAAtB;AACAD,IAAAA,OAAO,CAACC,IAAR,GAAeP,MAAf;AACD;;AACD5E,EAAAA,KAAK,CAACkF,OAAN,GAAgBN,MAAhB;AACD;;;AAGD,SAASwa,wBAAT,CACE5xB,IADF,EAEEwS,KAFF,EAGEtM,IAHF,EAIE;AACA,MAAIsB,gBAAgB,CAACtB,IAAD,CAApB,EAA4B;AAC1B,QAAI+T,UAAU,GAAGzH,KAAK,CAACjR,KAAvB,CAD0B;AAI1B;AACA;AACA;AACA;;AACA0Y,IAAAA,UAAU,GAAG/R,cAAc,CAAC+R,UAAD,EAAaja,IAAI,CAACkF,YAAlB,CAA3B,CAR0B;;AAW1B,UAAMgV,aAAa,GAAGlS,UAAU,CAACiS,UAAD,EAAa/T,IAAb,CAAhC;AACAsM,IAAAA,KAAK,CAACjR,KAAN,GAAc2Y,aAAd,CAZ0B;AAc1B;AACA;;AACAjR,IAAAA,iBAAiB,CAACjJ,IAAD,EAAOka,aAAP,CAAjB;AACD;AACF;;AAiBD,SAAS2X,cAAT,GAAuC;AACrC;AAGA,QAAMrK,KAAY,GAAGzP,WAAW,CAACiP,YAAD,CAAhC;AACA,SAAOQ,KAAK,CAACC,UAAN,CAAiBd,MAAxB;AACD;;AAED,SAASmL,eAAT,CAA4BC,YAA5B,EAAsD;AACpD;AAGA,QAAMvK,KAAY,GAAGzP,WAAW,CAACiP,YAAD,CAAhC;AACA,MAAIgL,YAAsB,GAAIxK,KAAK,CAACE,IAAN,CAAW5yB,GAAX,CAAei9B,YAAf,CAA9B;;AACA,MAAIC,YAAY,KAAKnxB,SAArB,EAAgC;AAC9BmxB,IAAAA,YAAY,GAAGD,YAAY,EAA3B;AACAvK,IAAAA,KAAK,CAACE,IAAN,CAAWzyB,GAAX,CAAe88B,YAAf,EAA6BC,YAA7B;AACD;;AACD,SAAOA,YAAP;AACD;;AAED,AAAO,MAAM9I,qBAAiC,GAAG;AAC/CnR,EAAAA,WAD+C;AAG/Cka,EAAAA,WAAW,EAAE3J,qBAHkC;AAI/C4J,EAAAA,UAAU,EAAE5J,qBAJmC;AAK/C6J,EAAAA,SAAS,EAAE7J,qBALoC;AAM/C8J,EAAAA,mBAAmB,EAAE9J,qBAN0B;AAO/C+J,EAAAA,kBAAkB,EAAE/J,qBAP2B;AAQ/CgK,EAAAA,eAAe,EAAEhK,qBAR8B;AAS/CiK,EAAAA,OAAO,EAAEjK,qBATsC;AAU/CkK,EAAAA,UAAU,EAAElK,qBAVmC;AAW/CmK,EAAAA,MAAM,EAAEnK,qBAXuC;AAY/CoK,EAAAA,QAAQ,EAAEpK,qBAZqC;AAa/CqK,EAAAA,aAAa,EAAErK,qBAbgC;AAc/CsK,EAAAA,gBAAgB,EAAEtK,qBAd6B;AAe/CuK,EAAAA,aAAa,EAAEvK,qBAfgC;AAgB/CwK,EAAAA,gBAAgB,EAAExK,qBAhB6B;AAiB/CyK,EAAAA,oBAAoB,EAAEzK,qBAjByB;AAkB/C0K,EAAAA,KAAK,EAAE1K,qBAlBwC;AAoB/C2K,EAAAA,wBAAwB,EAAEx9B;AApBqB,CAA1C;;AAsBP,AAAiB;AACdyzB,EAAAA,qBAAD,CAAoC2I,cAApC,GAAqDA,cAArD;AACC3I,EAAAA,qBAAD,CAAoC4I,eAApC,GAAsDA,eAAtD;AACC5I,EAAAA,qBAAD,CAAoCgK,eAApC,GAAsD5K,qBAAtD;AACD;;AAED,MAAMO,sBAAkC,GAAG;AACzC9Q,EAAAA,WADyC;AAGzCka,EAAAA,WAAW,EAAE9C,aAH4B;AAIzC+C,EAAAA,UAAU,EAAEna,WAJ6B;AAKzCoa,EAAAA,SAAS,EAAElG,WAL8B;AAMzCmG,EAAAA,mBAAmB,EAAExD,qBANoB;AAOzC0D,EAAAA,eAAe,EAAEhE,iBAPwB;AAQzC+D,EAAAA,kBAAkB,EAAElE,oBARqB;AASzCoE,EAAAA,OAAO,EAAElD,SATgC;AAUzCmD,EAAAA,UAAU,EAAErI,YAV6B;AAWzCsI,EAAAA,MAAM,EAAE9E,QAXiC;AAYzC+E,EAAAA,QAAQ,EAAEvF,UAZ+B;AAazCwF,EAAAA,aAAa,EAAE3D,eAb0B;AAczC4D,EAAAA,gBAAgB,EAAEpD,kBAduB;AAezCqD,EAAAA,aAAa,EAAExC,eAf0B;AAgBzCyC,EAAAA,gBAAgB,EAAEtH,kBAhBuB;AAiBzCuH,EAAAA,oBAAoB,EAAEnH,sBAjBmB;AAkBzCoH,EAAAA,KAAK,EAAEtC,OAlBkC;AAoBzCuC,EAAAA,wBAAwB,EAAEx9B;AApBe,CAA3C;;AAsBA,AAAiB;AACdozB,EAAAA,sBAAD,CAAqCgJ,cAArC,GAAsDA,cAAtD;AACChJ,EAAAA,sBAAD,CAAqCiJ,eAArC,GAAuDA,eAAvD;AACCjJ,EAAAA,sBAAD,CAAqCqK,eAArC,GAAuDnC,YAAvD;AACD;;AACD,MAAMjI,uBAAmC,GAAG;AAC1C/Q,EAAAA,WAD0C;AAG1Cka,EAAAA,WAAW,EAAE7C,cAH6B;AAI1C8C,EAAAA,UAAU,EAAEna,WAJ8B;AAK1Coa,EAAAA,SAAS,EAAEzF,YAL+B;AAM1C0F,EAAAA,mBAAmB,EAAErD,sBANqB;AAO1CsD,EAAAA,kBAAkB,EAAEhE,qBAPsB;AAQ1CiE,EAAAA,eAAe,EAAE9D,kBARyB;AAS1C+D,EAAAA,OAAO,EAAEhD,UATiC;AAU1CiD,EAAAA,UAAU,EAAE5H,aAV8B;AAW1C6H,EAAAA,MAAM,EAAE5E,SAXkC;AAY1C6E,EAAAA,QAAQ,EAAErF,WAZgC;AAa1CsF,EAAAA,aAAa,EAAEzD,gBAb2B;AAc1C0D,EAAAA,gBAAgB,EAAEnD,mBAdwB;AAe1CoD,EAAAA,aAAa,EAAErC,gBAf2B;AAgB1CsC,EAAAA,gBAAgB,EAAEnH,mBAhBwB;AAiB1CoH,EAAAA,oBAAoB,EAAExG,uBAjBoB;AAkB1CyG,EAAAA,KAAK,EAAElC,QAlBmC;AAoB1CmC,EAAAA,wBAAwB,EAAEx9B;AApBgB,CAA5C;;AAsBA,AAAiB;AACdqzB,EAAAA,uBAAD,CAAsC+I,cAAtC,GAAuDA,cAAvD;AACC/I,EAAAA,uBAAD,CAAsCgJ,eAAtC,GAAwDA,eAAxD;AACChJ,EAAAA,uBAAD,CAAsCoK,eAAtC,GAAwDhC,aAAxD;AACD;;AAED,MAAMjI,yBAAqC,GAAG;AAC5ClR,EAAAA,WAD4C;AAG5Cka,EAAAA,WAAW,EAAE7C,cAH+B;AAI5C8C,EAAAA,UAAU,EAAEna,WAJgC;AAK5Coa,EAAAA,SAAS,EAAEzF,YALiC;AAM5C0F,EAAAA,mBAAmB,EAAErD,sBANuB;AAO5CsD,EAAAA,kBAAkB,EAAEhE,qBAPwB;AAQ5CiE,EAAAA,eAAe,EAAE9D,kBAR2B;AAS5C+D,EAAAA,OAAO,EAAEhD,UATmC;AAU5CiD,EAAAA,UAAU,EAAEnH,eAVgC;AAW5CoH,EAAAA,MAAM,EAAE5E,SAXoC;AAY5C6E,EAAAA,QAAQ,EAAEpF,aAZkC;AAa5CqF,EAAAA,aAAa,EAAEzD,gBAb6B;AAc5C0D,EAAAA,gBAAgB,EAAEhD,qBAd0B;AAe5CiD,EAAAA,aAAa,EAAEpC,kBAf6B;AAgB5CqC,EAAAA,gBAAgB,EAAEnH,mBAhB0B;AAiB5CoH,EAAAA,oBAAoB,EAAExG,uBAjBsB;AAkB5CyG,EAAAA,KAAK,EAAElC,QAlBqC;AAoB5CmC,EAAAA,wBAAwB,EAAEx9B;AApBkB,CAA9C;;AAsBA,AAAiB;AACdwzB,EAAAA,yBAAD,CAAwC4I,cAAxC,GAAyDA,cAAzD;AACC5I,EAAAA,yBAAD,CAAwC6I,eAAxC,GAA0DA,eAA1D;AACC7I,EAAAA,yBAAD,CAAwCiK,eAAxC,GAA0DhC,aAA1D;AACD;;ACn2ED,SAASiC,wCAAT,CACE54B,KADF,EAEE64B,gBAFF,EAGQ;AACN,EAA0B;AACxB;AACD;AAUF;;AAED,SAASC,0BAAT,CAAoC94B,KAApC,EAAwD;AACtD,EAAwD;AACtD;AACD;AAwBF;;AAsCD,SAAS+4B,sBAAT,GAAwC;AACtC,EAAwD;AACtD;AACD;AAEF;;ACtLM,SAASC,0BAAT,CACLr+B,KADK,EAELqZ,MAFK,EAGa;AAClB;AACA;AACA,SAAO;AACLrZ,IAAAA,KADK;AAELqZ,IAAAA,MAFK;AAGLkH,IAAAA,KAAK,EAAEH,2BAA2B,CAAC/G,MAAD,CAH7B;AAILilB,IAAAA,MAAM,EAAE;AAJH,GAAP;AAMD;AAED,AAAO,SAASC,mBAAT,CACLv+B,KADK,EAELs+B,MAFK,EAGL/d,KAHK,EAIa;AAClB,SAAO;AACLvgB,IAAAA,KADK;AAELqZ,IAAAA,MAAM,EAAE,IAFH;AAGLkH,IAAAA,KAAK,EAAEA,KAAK,IAAI,IAAT,GAAgBA,KAAhB,GAAwB,IAH1B;AAIL+d,IAAAA,MAAM,EAAEA,MAAM,IAAI,IAAV,GAAiBA,MAAjB,GAA0B;AAJ7B,GAAP;AAMD;;ACjCD;AACA;AACA;AAEA,AAAO,SAASE,eAAT,CACLC,QADK,EAELC,SAFK,EAGI;AACT,SAAO,IAAP;AACD;;ACJM,SAASC,gBAAT,CACLF,QADK,EAELC,SAFK,EAGC;AACN,MAAI;AACF,UAAME,QAAQ,GAAGJ,eAAe,CAACC,QAAD,EAAWC,SAAX,CAAhC,CADE;AAIF;;AACA,QAAIE,QAAQ,KAAK,KAAjB,EAAwB;AACtB;AACD;;AAED,UAAMphB,KAAK,GAAIkhB,SAAS,CAAC1+B,KAAzB;;AACA,QAAImgB,KAAJ,EAAa;AACX,YAAM9G,MAAM,GAAGqlB,SAAS,CAACrlB,MAAzB;AACA,YAAMkH,KAAK,GAAGme,SAAS,CAACne,KAAxB;AACA,YAAMse,cAAc,GAAGte,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB,EAAhD,CAHW;AAKX;AACA;;AACA,UAAI/C,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACshB,gBAA3B,EAA6C;AAC3C,YAAIL,QAAQ,CAACn5B,GAAT,KAAiB1E,cAArB,EAAqC;AACnC;AACA;AACA;AACA;AACD,SAN0C;AAQ3C;AACA;AACA;;;AACAm+B,QAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBvhB,KAAjB,EAX2C;AAY3C;AACA;AACD;;AAED,YAAMwhB,aAAa,GAAG3lB,MAAM,GAAGjU,yBAAyB,CAACiU,MAAD,CAA5B,GAAuC,IAAnE;AACA,YAAM4lB,oBAAoB,GAAGD,aAAa,yCACFA,aADE,oBAEtC,2DAFJ;AAIA,UAAIE,oBAAJ;;AACA,UAAIT,QAAQ,CAACn5B,GAAT,KAAiBxE,QAArB,EAA+B;AAC7Bo+B,QAAAA,oBAAoB,GAClB,2FACA,uFAFF;AAGD,OAJD,MAIO;AACL,cAAMC,iBAAiB,GACrB/5B,yBAAyB,CAACq5B,QAAD,CAAzB,IAAuC,WADzC;AAEAS,QAAAA,oBAAoB,GAClB,8GAC0CC,iBAD1C,OADF;AAGD;;AACD,YAAMC,eAAe,GAChBH,oBAAH,UAA4BJ,cAA5B,kBACGK,oBADH,CADF,CAxCW;AA6CX;AACA;AACA;;AACAH,MAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBK,eAAjB,EAhDW;AAiDZ,KAjDD,MAiDO;AACL;AACA;AACA;AACAL,MAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBvhB,KAAjB,EAJK;AAKN;AACF,GAjED,CAiEE,OAAO6hB,CAAP,EAAU;AACV;AACA;AACA;AACA;AACAvnB,IAAAA,UAAU,CAAC,MAAM;AACf,YAAMunB,CAAN;AACD,KAFS,CAAV;AAGD;AACF;;ACXD,MAAMC,eAAe,GAAG,OAAO9pB,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0C8V,GAAlE;;AAEA,SAASiU,qBAAT,CACEl6B,KADF,EAEEq5B,SAFF,EAGE1tB,IAHF,EAIiB;AACf,QAAMkR,MAAM,GAAGC,YAAY,CAAC1S,WAAD,EAAcuB,IAAd,CAA3B,CADe;;AAGfkR,EAAAA,MAAM,CAAC5c,GAAP,GAAa4e,aAAb,CAHe;AAKf;;AACAhC,EAAAA,MAAM,CAACnd,OAAP,GAAiB;AAAC8kB,IAAAA,OAAO,EAAE;AAAV,GAAjB;AACA,QAAMrM,KAAK,GAAGkhB,SAAS,CAAC1+B,KAAxB;;AACAkiB,EAAAA,MAAM,CAAClF,QAAP,GAAkB,MAAM;AACtBwiB,IAAAA,eAAe,CAAChiB,KAAD,CAAf;AACAmhB,IAAAA,gBAAgB,CAACt5B,KAAD,EAAQq5B,SAAR,CAAhB;AACD,GAHD;;AAIA,SAAOxc,MAAP;AACD;;AAED,SAASud,sBAAT,CACEp6B,KADF,EAEEq5B,SAFF,EAGE1tB,IAHF,EAIiB;AACf,QAAMkR,MAAM,GAAGC,YAAY,CAAC1S,WAAD,EAAcuB,IAAd,CAA3B;AACAkR,EAAAA,MAAM,CAAC5c,GAAP,GAAa4e,aAAb;AACA,QAAMwb,wBAAwB,GAAGr6B,KAAK,CAACf,IAAN,CAAWo7B,wBAA5C;;AACA,MAAI,OAAOA,wBAAP,KAAoC,UAAxC,EAAoD;AAClD,UAAMliB,KAAK,GAAGkhB,SAAS,CAAC1+B,KAAxB;;AACAkiB,IAAAA,MAAM,CAACnd,OAAP,GAAiB,MAAM;AACrB,aAAO26B,wBAAwB,CAACliB,KAAD,CAA/B;AACD,KAFD;;AAGA0E,IAAAA,MAAM,CAAClF,QAAP,GAAkB,MAAM;AACtB;AAGA2hB,MAAAA,gBAAgB,CAACt5B,KAAD,EAAQq5B,SAAR,CAAhB;AACD,KALD;AAMD;;AAED,QAAMhpB,IAAI,GAAGrQ,KAAK,CAACuD,SAAnB;;AACA,MAAI8M,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAI,CAACiqB,iBAAZ,KAAkC,UAAvD,EAAmE;AACjEzd,IAAAA,MAAM,CAAClF,QAAP,GAAkB,SAASA,QAAT,GAAoB;AACpC;AAGA2hB,MAAAA,gBAAgB,CAACt5B,KAAD,EAAQq5B,SAAR,CAAhB;;AACA,UAAI,OAAOgB,wBAAP,KAAoC,UAAxC,EAAoD;AAClD;AACA;AACA;AACA;AACA;AACAE,QAAAA,+BAA+B,CAAC,IAAD,CAA/B;AACD;;AACD,YAAMpiB,KAAK,GAAGkhB,SAAS,CAAC1+B,KAAxB;AACA,YAAMugB,KAAK,GAAGme,SAAS,CAACne,KAAxB;AACA,WAAKof,iBAAL,CAAuBniB,KAAvB,EAA8B;AAC5BqhB,QAAAA,cAAc,EAAEte,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB;AADb,OAA9B;AAiBD,KAhCD;AAiCD;;AACD,SAAO2B,MAAP;AACD;;AAED,SAAS2d,kBAAT,CAA4B/0B,IAA5B,EAA6CyB,QAA7C,EAAiEF,KAAjE,EAA+E;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIyzB,SAAS,GAAGh1B,IAAI,CAACg1B,SAArB;AACA,MAAIC,SAAJ;;AACA,MAAID,SAAS,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,SAAS,GAAGh1B,IAAI,CAACg1B,SAAL,GAAiB,IAAIR,eAAJ,EAA7B;AACAS,IAAAA,SAAS,GAAG,IAAIC,GAAJ,EAAZ;AACAF,IAAAA,SAAS,CAAC//B,GAAV,CAAcwM,QAAd,EAAwBwzB,SAAxB;AACD,GAJD,MAIO;AACLA,IAAAA,SAAS,GAAGD,SAAS,CAAClgC,GAAV,CAAc2M,QAAd,CAAZ;;AACA,QAAIwzB,SAAS,KAAKp0B,SAAlB,EAA6B;AAC3Bo0B,MAAAA,SAAS,GAAG,IAAIC,GAAJ,EAAZ;AACAF,MAAAA,SAAS,CAAC//B,GAAV,CAAcwM,QAAd,EAAwBwzB,SAAxB;AACD;AACF;;AACD,MAAI,CAACA,SAAS,CAACE,GAAV,CAAc5zB,KAAd,CAAL,EAA2B;AACzB;AACA0zB,IAAAA,SAAS,CAACG,GAAV,CAAc7zB,KAAd;AACA,UAAM8zB,IAAI,GAAGC,iBAAiB,CAAC3K,IAAlB,CAAuB,IAAvB,EAA6B3qB,IAA7B,EAAmCyB,QAAnC,EAA6CF,KAA7C,CAAb;;AAOAE,IAAAA,QAAQ,CAAC8zB,IAAT,CAAcF,IAAd,EAAoBA,IAApB;AACD;AACF;;AAED,SAASG,mBAAT,CACEC,gBADF,EAEEz1B,IAFF,EAGEyB,QAHF,EAIEF,KAJF,EAKE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMm0B,SAA+B,GAAID,gBAAgB,CAACle,WAA1D;;AACA,MAAIme,SAAS,KAAK,IAAlB,EAAwB;AACtB,UAAMne,WAAW,GAAI,IAAI2d,GAAJ,EAArB;AACA3d,IAAAA,WAAW,CAAC6d,GAAZ,CAAgB3zB,QAAhB;AACAg0B,IAAAA,gBAAgB,CAACle,WAAjB,GAA+BA,WAA/B;AACD,GAJD,MAIO;AACLme,IAAAA,SAAS,CAACN,GAAV,CAAc3zB,QAAd;AACD;AACF;;AAED,SAASk0B,uBAAT,CAAiC1c,WAAjC,EAAqD2c,eAArD,EAA6E;AAC3E,AAkBA;;;AACA,QAAMp7B,GAAG,GAAGye,WAAW,CAACze,GAAxB;;AACA,MACE,CAACye,WAAW,CAACpT,IAAZ,GAAmBlE,cAApB,MAAwCD,MAAxC,KACClH,GAAG,KAAK3E,iBAAR,IACC2E,GAAG,KAAKhE,UADT,IAECgE,GAAG,KAAK5D,mBAHV,CADF,EAKE;AACA,UAAMi/B,aAAa,GAAG5c,WAAW,CAACtc,SAAlC;;AACA,QAAIk5B,aAAJ,EAAmB;AACjB5c,MAAAA,WAAW,CAAC1B,WAAZ,GAA0Bse,aAAa,CAACte,WAAxC;AACA0B,MAAAA,WAAW,CAACnG,aAAZ,GAA4B+iB,aAAa,CAAC/iB,aAA1C;AACAmG,MAAAA,WAAW,CAAC1X,KAAZ,GAAoBs0B,aAAa,CAACt0B,KAAlC;AACD,KAJD,MAIO;AACL0X,MAAAA,WAAW,CAAC1B,WAAZ,GAA0B,IAA1B;AACA0B,MAAAA,WAAW,CAACnG,aAAZ,GAA4B,IAA5B;AACD;AACF;AACF;;AAED,SAASgjB,mCAAT,CAA6ChX,WAA7C,EAAiE;AAC/D,MAAIriB,IAAI,GAAGqiB,WAAX;AACA;AAIA,KAAG;AACD,QACEriB,IAAI,CAACjC,GAAL,KAAa9D,iBAAb,IACA8uB,qBAAqB,CAAC/oB,IAAD,AAAA,CAFvB,EAGE;AACA,aAAOA,IAAP;AACD,KANA;AAQD;;;AACAA,IAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD,GAVD,QAUSL,IAAI,KAAK,IAVlB;;AAWA,SAAO,IAAP;AACD;;AAED,SAASs5B,iCAAT,CACEN,gBADF,EAEE3W,WAFF,EAGE7F,WAHF,EAIEjZ,IAJF,EAKE41B,eALF,EAMgB;AACd;AACA;AACA,MAAI,CAACH,gBAAgB,CAAC5vB,IAAjB,GAAwBlE,cAAzB,MAA6CD,MAAjD,EAAyD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,QAAI+zB,gBAAgB,KAAK3W,WAAzB,EAAsC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA2W,MAAAA,gBAAgB,CAAC54B,KAAjB,IAA0BlB,aAA1B;AACD,KAjBD,MAiBO;AACL85B,MAAAA,gBAAgB,CAAC54B,KAAjB,IAA0B7B,UAA1B;AACAie,MAAAA,WAAW,CAACpc,KAAZ,IAAqBjB,4BAArB,CAFK;AAKL;AACA;;AACAqd,MAAAA,WAAW,CAACpc,KAAZ,IAAqB,EAAErB,mBAAmB,GAAGE,UAAxB,CAArB;;AAEA,UAAIud,WAAW,CAACze,GAAZ,KAAoB1E,cAAxB,EAAwC;AACtC,cAAMkgC,kBAAkB,GAAG/c,WAAW,CAACtc,SAAvC;;AACA,YAAIq5B,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B;AACA;AACA;AACA/c,UAAAA,WAAW,CAACze,GAAZ,GAAkB1D,wBAAlB;AACD,SALD,MAKO;AACL;AACA;AACA;AACA,gBAAMsgB,MAAM,GAAGC,YAAY,CAAC1S,WAAD,EAAcnC,QAAd,CAA3B;AACA4U,UAAAA,MAAM,CAAC5c,GAAP,GAAa8c,WAAb;AACAwC,UAAAA,aAAa,CAACb,WAAD,EAAc7B,MAAd,EAAsB5U,QAAtB,CAAb;AACD;AACF,OAxBI;AA2BL;;;AACAyW,MAAAA,WAAW,CAAC1X,KAAZ,GAAoByG,UAAU,CAACiR,WAAW,CAAC1X,KAAb,EAAoBiB,QAApB,CAA9B;AACD;;AACD,WAAOizB,gBAAP;AACD,GA1Da;AA4Dd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,EAAAA,gBAAgB,CAAC54B,KAAjB,IAA0BlB,aAA1B,CApGc;AAsGd;;AACA85B,EAAAA,gBAAgB,CAACl0B,KAAjB,GAAyBq0B,eAAzB;AACA,SAAOH,gBAAP;AACD;;AAED,SAASQ,cAAT,CACEj2B,IADF,EAEE8e,WAFF,EAGE7F,WAHF,EAIE/jB,KAJF,EAKE0gC,eALF,EAME;AACA;AACA3c,EAAAA,WAAW,CAACpc,KAAZ,IAAqBnB,UAArB;;AASA,MACExG,KAAK,KAAK,IAAV,IACA,OAAOA,KAAP,KAAiB,QADjB,IAEA,OAAOA,KAAK,CAACqgC,IAAb,KAAsB,UAHxB,EAIE;AACA;AACA,UAAM9zB,QAAkB,GAAIvM,KAA5B;AACAygC,IAAAA,uBAAuB,CAAC1c,WAAD,AAAA,CAAvB;;;AAkBA,UAAMwc,gBAAgB,GAAGK,mCAAmC,CAAChX,WAAD,CAA5D;;AACA,QAAI2W,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,MAAAA,gBAAgB,CAAC54B,KAAjB,IAA0B,CAAC5B,iBAA3B;AACA86B,MAAAA,iCAAiC,CAC/BN,gBAD+B,EAE/B3W,WAF+B,EAG/B7F,WAH+B,EAI/BjZ,IAJ+B,EAK/B41B,eAL+B,CAAjC,CAF6B;AAU7B;;AACA,UAAIH,gBAAgB,CAAC5vB,IAAjB,GAAwBlE,cAA5B,EAA4C;AAC1CozB,QAAAA,kBAAkB,CAAC/0B,IAAD,EAAOyB,QAAP,EAAiBm0B,eAAjB,CAAlB;AACD;;AACDJ,MAAAA,mBAAmB,CAACC,gBAAD,EAAmBz1B,IAAnB,EAAyByB,QAAzB,AAAA,CAAnB;AACA;AACD,KAhBD,MAgBO;AACL;AACA;AAEA,UAAI,CAACsF,gBAAgB,CAAC6uB,eAAD,CAArB,EAAwC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,QAAAA,kBAAkB,CAAC/0B,IAAD,EAAOyB,QAAP,EAAiBm0B,eAAjB,CAAlB;AACAM,QAAAA,+BAA+B;AAC/B;AACD,OAfI;AAkBL;AACA;;;AACA,YAAMC,qBAAqB,GAAG,IAAI/4B,KAAJ,CAC5B,uEACE,gEADF,GAEE,8CAFF,GAGE,uBAJ0B,CAA9B,CApBK;AA4BL;;AACAlI,MAAAA,KAAK,GAAGihC,qBAAR;AACD;AACF,GAzED;;AA0GAjhC,EAAAA,KAAK,GAAGq+B,0BAA0B,CAACr+B,KAAD,EAAQ+jB,WAAR,CAAlC;AACAmd,EAAAA,cAAc,CAAClhC,KAAD,CAAd,CAtHA;AAyHA;AACA;;AACA,MAAI2a,cAAc,GAAGiP,WAArB;;AACA,KAAG;AACD,YAAQjP,cAAc,CAACrV,GAAvB;AACE,WAAKxE,QAAL;AAAe;AACb,gBAAM49B,SAAS,GAAG1+B,KAAlB;AACA2a,UAAAA,cAAc,CAAChT,KAAf,IAAwBlB,aAAxB;AACA,gBAAMuK,IAAI,GAAGyB,iBAAiB,CAACiuB,eAAD,CAA9B;AACA/lB,UAAAA,cAAc,CAACtO,KAAf,GAAuByG,UAAU,CAAC6H,cAAc,CAACtO,KAAhB,EAAuB2E,IAAvB,CAAjC;AACA,gBAAMkR,MAAM,GAAGqd,qBAAqB,CAAC5kB,cAAD,EAAiB+jB,SAAjB,EAA4B1tB,IAA5B,CAApC;AACAiU,UAAAA,qBAAqB,CAACtK,cAAD,EAAiBuH,MAAjB,CAArB;AACA;AACD;;AACD,WAAKthB,cAAL;AACE;AACA,cAAM89B,SAAS,GAAG1+B,KAAlB;AACA,cAAM2Z,IAAI,GAAGgB,cAAc,CAACrW,IAA5B;AACA,cAAM6T,QAAQ,GAAGwC,cAAc,CAAC/R,SAAhC;;AACA,YACE,CAAC+R,cAAc,CAAChT,KAAf,GAAuB7B,UAAxB,MAAwCP,OAAxC,KACC,OAAOoU,IAAI,CAAC+lB,wBAAZ,KAAyC,UAAzC,IACEvnB,QAAQ,KAAK,IAAb,IACC,OAAOA,QAAQ,CAACwnB,iBAAhB,KAAsC,UADvC,IAEC,CAACwB,kCAAkC,CAAChpB,QAAD,CAJvC,CADF,EAME;AACAwC,UAAAA,cAAc,CAAChT,KAAf,IAAwBlB,aAAxB;AACA,gBAAMuK,IAAI,GAAGyB,iBAAiB,CAACiuB,eAAD,CAA9B;AACA/lB,UAAAA,cAAc,CAACtO,KAAf,GAAuByG,UAAU,CAAC6H,cAAc,CAACtO,KAAhB,EAAuB2E,IAAvB,CAAjC,CAHA;;AAKA,gBAAMkR,MAAM,GAAGud,sBAAsB,CACnC9kB,cADmC,EAEnC+jB,SAFmC,EAGnC1tB,IAHmC,CAArC;AAKAiU,UAAAA,qBAAqB,CAACtK,cAAD,EAAiBuH,MAAjB,CAArB;AACA;AACD;;AACD;AAlCJ;;AAsCAvH,IAAAA,cAAc,GAAGA,cAAc,CAAC/S,MAAhC;AACD,GAxCD,QAwCS+S,cAAc,KAAK,IAxC5B;AAyCD;;ACniBD;;AACA,MAAMymB,YAAuC,GAAGlnB,YAAY,CAAC,IAAD,CAA5D;AAGA;AAQA,SAASmnB,iBAAT,GAA2C;AACzC,AAMA;AACA;AACA;;;AACA,QAAMC,8BAA8B,GAAGF,YAAY,CAACv4B,OAApD;;AACA,MAAIy4B,8BAA8B,KAAK,IAAvC,EAA6C;AAC3C,WAAOA,8BAAP;AACD,GAbwC;;;AAgBzC,QAAMx2B,IAAI,GAAI+rB,qBAAqB,EAAnC;AACA,QAAM0K,sBAAsB,GAAGz2B,IAAI,CAAC02B,WAApC;AAEA,SAAOD,sBAAP;AACD;;AAED,AAAO,SAASE,oBAAT,CAA8BvtB,WAA9B,EAAyD;AAC9D;AACA;AACA,QAAMwtB,aAAa,GAAGL,iBAAiB,EAAvC;;AACA,MAAIK,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAOA,aAAP;AACD,GAN6D;AAS9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAM52B,IAAI,GAAI+rB,qBAAqB,EAAnC;AACA,QAAM8K,UAAU,GAAGtP,WAAW,EAA9B;AACAvnB,EAAAA,IAAI,CAAC02B,WAAL,GAAmBG,UAAnB;AACAjP,EAAAA,WAAW,CAACiP,UAAD,CAAX;;AACA,MAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB72B,IAAAA,IAAI,CAAC82B,gBAAL,IAAyB1tB,WAAzB;AACD;;AACD,SAAOytB,UAAP;AACD;AAED,AAqBO,SAASE,cAAT,CACLC,uBADK,EAELC,aAFK,EAGLC,cAHK,EAIC;AACN,EAAiB;AACf,QAAID,aAAa,KAAK,IAAtB,EAA4B;AAC1BzuB,MAAAA,IAAI,CAAC8tB,YAAD,EAAeA,YAAY,CAACv4B,OAA5B,AAAA,CAAJ;AACD,KAFD,MAEO;AACLyK,MAAAA,IAAI,CAAC8tB,YAAD,EAAeW,aAAa,CAACE,IAA7B,AAAA,CAAJ;AACD;AACF;AAeF;AAED,AAAO,SAASC,aAAT,CAAuBvnB,cAAvB,EAA8C9R,OAA9C,EAAqE;AAC1E,MAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB,IAAiB;AACfuR,MAAAA,GAAG,CAACgnB,YAAD,AAAA,CAAH;AACD;AAKF;AACF;AAED,AAQO,SAASe,iBAAT,GAAsD;AAC3D,AAIA;AACA;AACA;;;AACA,QAAMT,aAAa,GAAGL,iBAAiB,EAAvC;;AACA,MAAIK,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,IAAP;AACD;;AAED,SAAO;AACL;AACA;AACA34B,IAAAA,MAAM,EAAE+Z,CAEJgP,YAAY,CAACzQ,cALZ;AAML4gB,IAAAA,IAAI,EAAEP;AAND,GAAP;AAQD;AAED,AAAO,SAASU,yBAAT,GAA8D;AACnE;AAIA,QAAMV,aAAa,GAAGL,iBAAiB,EAAvC;;AACA,MAAIK,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,IAAP;AACD;;AAED,SAAO;AACL;AACA;AACA34B,IAAAA,MAAM,EAAE+Z,CAEJgP,YAAY,CAACzQ,cALZ;AAML4gB,IAAAA,IAAI,EAAEP;AAND,GAAP;AAQD;;AC6DD,MAAMr6B,mBAAiB,GAAGpH,oBAAoB,CAACoH,iBAA/C;AAEA,IAAIg7B,gBAAyB,GAAG,KAAhC;AAEA;AAsBA,AAAO,SAASC,iBAAT,CACLz5B,OADK,EAEL8R,cAFK,EAGL4nB,YAHK,EAILruB,WAJK,EAKL;AACA,MAAIrL,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACA8R,IAAAA,cAAc,CAAClS,KAAf,GAAuB4lB,gBAAgB,CACrC1T,cADqC,EAErC,IAFqC,EAGrC4nB,YAHqC,EAIrCruB,WAJqC,CAAvC;AAMD,GAXD,MAWO;AACL;AACA;AACA;AAEA;AACA;AACAyG,IAAAA,cAAc,CAAClS,KAAf,GAAuB0lB,oBAAoB,CACzCxT,cADyC,EAEzC9R,OAAO,CAACJ,KAFiC,EAGzC85B,YAHyC,EAIzCruB,WAJyC,CAA3C;AAMD;AACF;;AAED,SAASsuB,+BAAT,CACE35B,OADF,EAEE8R,cAFF,EAGE4nB,YAHF,EAIEruB,WAJF,EAKE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAyG,EAAAA,cAAc,CAAClS,KAAf,GAAuB0lB,oBAAoB,CACzCxT,cADyC,EAEzC9R,OAAO,CAACJ,KAFiC,EAGzC,IAHyC,EAIzCyL,WAJyC,CAA3C,CATA;AAgBA;AACA;AACA;;AACAyG,EAAAA,cAAc,CAAClS,KAAf,GAAuB0lB,oBAAoB,CACzCxT,cADyC,EAEzC,IAFyC,EAGzC4nB,YAHyC,EAIzCruB,WAJyC,CAA3C;AAMD;;AAED,SAASuuB,gBAAT,CACE55B,OADF,EAEE8R,cAFF,EAGEC,SAHF,EAIE2K,SAJF,EAKErR,WALF,EAME;AACA;AAoBA,QAAMtP,MAAM,GAAGgW,SAAS,CAAChW,MAAzB;AACA,QAAMmlB,GAAG,GAAGpP,cAAc,CAACoP,GAA3B,CAtBA;;AAyBA,MAAIwY,YAAJ;AACA,AACA5f,EAAAA,oBAAoB,CAAChI,cAAD,EAAiBzG,WAAjB,CAApB;;AAIA,EAgCO;AACLquB,IAAAA,YAAY,GAAG/O,eAAe,CAC5B3qB,OAD4B,EAE5B8R,cAF4B,EAG5B/V,MAH4B,EAI5B2gB,SAJ4B,EAK5BwE,GAL4B,EAM5B7V,WAN4B,CAA9B;AAQAwuB,AACD;;AAKD,MAAI75B,OAAO,KAAK,IAAZ,IAAoB,CAACw5B,gBAAzB,EAA2C;AACzCnO,IAAAA,YAAY,CAACrrB,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAAZ;AACA,WAAOyuB,4BAA4B,CAAC95B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAAnC;AACD;;;AAODyG,EAAAA,cAAc,CAAChT,KAAf,IAAwBnC,aAAxB;AACA88B,EAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B4nB,YAA1B,EAAwCruB,WAAxC,CAAjB;AACA,SAAOyG,cAAc,CAAClS,KAAtB;AACD;;AAED,SAASm6B,mBAAT,CACE/5B,OADF,EAEE8R,cAFF,EAGEC,SAHF,EAIE2K,SAJF,EAKErR,WALF,EAMgB;AACd,MAAIrL,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAMvE,IAAI,GAAGsW,SAAS,CAACtW,IAAvB;;AACA,QACEu+B,yBAAyB,CAACv+B,IAAD,CAAzB,IACAsW,SAAS,CAACkoB,OAAV,KAAsB,IADtB;AAGAloB,IAAAA,SAAS,CAAC+F,YAAV,KAA2BhV,SAJ7B,EAKE;AACA,UAAIo3B,YAAY,GAAGz+B,IAAnB;AAKA;AACA;;;AACAqW,MAAAA,cAAc,CAACrV,GAAf,GAAqB5D,mBAArB;AACAiZ,MAAAA,cAAc,CAACrW,IAAf,GAAsBy+B,YAAtB;;AAIA,aAAOC,yBAAyB,CAC9Bn6B,OAD8B,EAE9B8R,cAF8B,EAG9BooB,YAH8B,EAI9Bxd,SAJ8B,EAK9BrR,WAL8B,CAAhC;AAOD;;AAcD,UAAMzL,KAAK,GAAGw6B,2BAA2B,CACvCroB,SAAS,CAACtW,IAD6B,EAEvC,IAFuC,EAGvCihB,SAHuC,EAIvC5K,cAJuC,EAKvCA,cAAc,CAAChK,IALwB,EAMvCuD,WANuC,CAAzC;AAQAzL,IAAAA,KAAK,CAACshB,GAAN,GAAYpP,cAAc,CAACoP,GAA3B;AACAthB,IAAAA,KAAK,CAACb,MAAN,GAAe+S,cAAf;AACAA,IAAAA,cAAc,CAAClS,KAAf,GAAuBA,KAAvB;AACA,WAAOA,KAAP;AACD;;AAeD,QAAM8lB,YAAY,GAAK1lB,OAAO,CAACJ,KAA/B,CArEc;;AAsEd,QAAMy6B,2BAA2B,GAAGC,6BAA6B,CAC/Dt6B,OAD+D,EAE/DqL,WAF+D,CAAjE;;AAIA,MAAI,CAACgvB,2BAAL,EAAkC;AAChC;AACA;AACA,UAAME,SAAS,GAAG7U,YAAY,CAACzF,aAA/B,CAHgC;;AAKhC,QAAIga,OAAO,GAAGloB,SAAS,CAACkoB,OAAxB;AACAA,IAAAA,OAAO,GAAGA,OAAO,KAAK,IAAZ,GAAmBA,OAAnB,GAA6BpjB,YAAvC;;AACA,QAAIojB,OAAO,CAACM,SAAD,EAAY7d,SAAZ,CAAP,IAAiC1c,OAAO,CAACkhB,GAAR,KAAgBpP,cAAc,CAACoP,GAApE,EAAyE;AACvE,aAAO4Y,4BAA4B,CAAC95B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAAnC;AACD;AACF,GApFa;;;AAsFdyG,EAAAA,cAAc,CAAChT,KAAf,IAAwBnC,aAAxB;AACA,QAAM+kB,QAAQ,GAAGkB,oBAAoB,CAAC8C,YAAD,EAAehJ,SAAf,CAArC;AACAgF,EAAAA,QAAQ,CAACR,GAAT,GAAepP,cAAc,CAACoP,GAA9B;AACAQ,EAAAA,QAAQ,CAAC3iB,MAAT,GAAkB+S,cAAlB;AACAA,EAAAA,cAAc,CAAClS,KAAf,GAAuB8hB,QAAvB;AACA,SAAOA,QAAP;AACD;;AAED,SAASyY,yBAAT,CACEn6B,OADF,EAEE8R,cAFF,EAGEC,SAHF,EAIE2K,SAJF,EAKErR,WALF,EAMgB;AACd;AAkCA,MAAIrL,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAMu6B,SAAS,GAAGv6B,OAAO,CAACigB,aAA1B;;AACA,QACEpJ,YAAY,CAAC0jB,SAAD,EAAY7d,SAAZ,CAAZ,IACA1c,OAAO,CAACkhB,GAAR,KAAgBpP,cAAc,CAACoP,GAD/B;AAGC5J,IAAAA,CAAiD,IAHlD,CADF,EAKE;AACAkiB,MAAAA,gBAAgB,GAAG,KAAnB,CADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA1nB,MAAAA,cAAc,CAAC2O,YAAf,GAA8B/D,SAAS,GAAG6d,SAA1C;;AAEA,UAAI,CAACD,6BAA6B,CAACt6B,OAAD,EAAUqL,WAAV,CAAlC,EAA0D;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAyG,QAAAA,cAAc,CAACtO,KAAf,GAAuBxD,OAAO,CAACwD,KAA/B;AACA,eAAOs2B,4BAA4B,CACjC95B,OADiC,EAEjC8R,cAFiC,EAGjCzG,WAHiC,CAAnC;AAKD,OApBD,MAoBO,IAAI,CAACrL,OAAO,CAAClB,KAAR,GAAgBjB,4BAAjB,MAAmDnB,OAAvD,EAAgE;AACrE;AACA;AACA88B,QAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;AACF;;AACD,SAAOgB,uBAAuB,CAC5Bx6B,OAD4B,EAE5B8R,cAF4B,EAG5BC,SAH4B,EAI5B2K,SAJ4B,EAK5BrR,WAL4B,CAA9B;AAOD;;AAED,SAASovB,wBAAT,CACEz6B,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACA,QAAMqR,SAAyB,GAAG5K,cAAc,CAAC2O,YAAjD;AACA,QAAMiZ,YAAY,GAAGhd,SAAS,CAACtP,QAA/B;AAEA,QAAMqP,SAAgC,GACpCzc,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAAC+U,aAA3B,GAA2C,IAD7C;;AAGA,MACE2H,SAAS,CAAC5U,IAAV,KAAmB,QAAnB,IACCjQ,kBAAkB,CAFrB,EAGE;AACA;AACA,QAAI,CAACia,cAAc,CAAChK,IAAf,GAAsBlE,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD;AACA;AACA,YAAMgZ,SAAyB,GAAG;AAChC+d,QAAAA,SAAS,EAAEn2B,OADqB;AAEhCo2B,QAAAA,SAAS,EAAE,IAFqB;AAGhCC,QAAAA,WAAW,EAAE;AAHmB,OAAlC;AAKA9oB,MAAAA,cAAc,CAACiD,aAAf,GAA+B4H,SAA/B;;AACA,MAAiB;AACf;AACA;AACA,YAAI3c,OAAO,KAAK,IAAhB,EAAsB;AACpBg5B,UAAAA,cAAc,CAAClnB,cAAD,EAAiB,IAAjB,AAAA,CAAd;AACD;AACF;;AACD+oB,MAAAA,eAAe,CAAC/oB,cAAD,EAAiBzG,WAAjB,CAAf;AACD,KAjBD,MAiBO,IAAI,CAACvB,gBAAgB,CAACuB,WAAD,EAAe1E,aAAf,CAArB,EAA2D;AAChE,UAAIm0B,gBAAyC,GAAG,IAAhD,CADgE;AAGhE;;AACA,UAAIC,aAAJ;;AACA,UAAIte,SAAS,KAAK,IAAlB,EAAwB;AACtB,cAAMue,aAAa,GAAGve,SAAS,CAACie,SAAhC;AACAK,QAAAA,aAAa,GAAG9wB,UAAU,CAAC+wB,aAAD,EAAgB3vB,WAAhB,CAA1B;;AACA,QAAiB;AACf;AACAyvB,UAAAA,gBAAgB,GAAGvB,yBAAyB,EAA5C;AACD;AACF,OAPD,MAOO;AACLwB,QAAAA,aAAa,GAAG1vB,WAAhB;AACD,OAd+D;;;AAiBhEyG,MAAAA,cAAc,CAACtO,KAAf,GAAuBsO,cAAc,CAAC+G,UAAf,GAA4BzO,WAAW,CAC5DzD,aAD4D,CAA9D;AAGA,YAAMgW,SAAyB,GAAG;AAChC+d,QAAAA,SAAS,EAAEK,aADqB;AAEhCJ,QAAAA,SAAS,EAAEG,gBAFqB;AAGhCF,QAAAA,WAAW,EAAE;AAHmB,OAAlC;AAKA9oB,MAAAA,cAAc,CAACiD,aAAf,GAA+B4H,SAA/B;AACA7K,MAAAA,cAAc,CAAC0H,WAAf,GAA6B,IAA7B;;AACA,MAAiB;AACf;AACA;AACA,YAAIxZ,OAAO,KAAK,IAAhB,EAAsB;AACpBg5B,UAAAA,cAAc,CAAClnB,cAAD,EAAiB,IAAjB,AAAA,CAAd;AACD;AACF,OAjC+D;AAoChE;;;AACA+oB,MAAAA,eAAe,CAAC/oB,cAAD,EAAiBipB,aAAjB,CAAf;;AAaA,aAAO,IAAP;AACD,KAnDM,MAmDA;AACL;AACA;AAEA;AACA,YAAMpe,SAAyB,GAAG;AAChC+d,QAAAA,SAAS,EAAEn2B,OADqB;AAEhCo2B,QAAAA,SAAS,EAAE,IAFqB;AAGhCC,QAAAA,WAAW,EAAE;AAHmB,OAAlC;AAKA9oB,MAAAA,cAAc,CAACiD,aAAf,GAA+B4H,SAA/B,CAVK;;AAYL,YAAMse,kBAAkB,GACtBxe,SAAS,KAAK,IAAd,GAAqBA,SAAS,CAACie,SAA/B,GAA2CrvB,WAD7C;;AAEA,UAAImd,CAAexoB,OAAO,KAAK,IAA/B,EAAqC;AACnC;AACA;AACA;AACA,cAAMk5B,aAAa,GAAGzc,SAAS,KAAK,IAAd,GAAqBA,SAAS,CAACke,SAA/B,GAA2C,IAAjE,CAJmC;AAMnC;;AACA3B,QAAAA,cAAc,CAAClnB,cAAD,EAAiBonB,aAAjB,AAAA,CAAd;AACD;;AAED2B,MAAAA,eAAe,CAAC/oB,cAAD,EAAiBmpB,kBAAjB,CAAf;AACD;AACF,GAnGD,MAmGO;AACL;AACA,QAAIA,kBAAJ;;AACA,QAAIxe,SAAS,KAAK,IAAlB,EAAwB;AACtB;AAEAwe,MAAAA,kBAAkB,GAAGhxB,UAAU,CAACwS,SAAS,CAACie,SAAX,EAAsBrvB,WAAtB,CAA/B;AAEA,UAAI6tB,aAAa,GAAG,IAApB;;AACA,MAAiB;AACf;AACA;AACA;AACAA,QAAAA,aAAa,GAAGzc,SAAS,CAACke,SAA1B;AACD;;AAED3B,MAAAA,cAAc,CAAClnB,cAAD,EAAiBonB,aAAjB,AAAA,CAAd,CAbsB;;AAgBtBpnB,MAAAA,cAAc,CAACiD,aAAf,GAA+B,IAA/B;AACD,KAjBD,MAiBO;AACL;AACA;AACA;AACAkmB,MAAAA,kBAAkB,GAAG5vB,WAArB;;AAEA,MAAiB;AACf;AACA;AACA;AACA,YAAIrL,OAAO,KAAK,IAAhB,EAAsB;AACpBg5B,UAAAA,cAAc,CAAClnB,cAAD,EAAiB,IAAjB,AAAA,CAAd;AACD;AACF;AACF;;AACD+oB,IAAAA,eAAe,CAAC/oB,cAAD,EAAiBmpB,kBAAjB,CAAf;AACD;;AAEDxB,EAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B4nB,YAA1B,EAAwCruB,WAAxC,CAAjB;AACA,SAAOyG,cAAc,CAAClS,KAAtB;AACD;AAGD;AAIA,SAASs7B,oBAAT,CACEl7B,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACA;AAIAyO,EAAAA,oBAAoB,CAAChI,cAAD,EAAiBzG,WAAjB,CAApB;AACA,QAAM8vB,WAAW,GAAGnhB,WAAW,CAACiP,YAAD,CAA/B;;AAEA,MAAIjpB,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA,UAAM84B,UAAU,GAAGF,oBAAoB,CAACvtB,WAAD,CAAvC;AACA,UAAMkhB,YAAiC,GAAG;AACxCrsB,MAAAA,MAAM,EAAEi7B,WADgC;AAExC1R,MAAAA,KAAK,EAAEqP;AAFiC,KAA1C;AAIAhnB,IAAAA,cAAc,CAACiD,aAAf,GAA+BwX,YAA/B;AACAhR,IAAAA,qBAAqB,CAACzJ,cAAD,CAArB;AACAiY,IAAAA,iBAAiB,CAACjY,cAAD,EAAiBgnB,UAAjB,CAAjB;AACD,GAVD,MAUO;AACL;AACA,QAAIhvB,gBAAgB,CAAC9J,OAAO,CAACwD,KAAT,EAAgB6H,WAAhB,CAApB,EAAkD;AAChDuQ,MAAAA,gBAAgB,CAAC5b,OAAD,EAAU8R,cAAV,CAAhB;AACA+K,MAAAA,kBAAkB,CAAC/K,cAAD,EAAiB,IAAjB,EAAuB,IAAvB,EAA6BzG,WAA7B,CAAlB;AACD;;AACD,UAAMoR,SAA8B,GAAGzc,OAAO,CAAC+U,aAA/C;AACA,UAAM4H,SAA8B,GAAG7K,cAAc,CAACiD,aAAtD,CAPK;AAUL;;AACA,QAAI0H,SAAS,CAACvc,MAAV,KAAqBi7B,WAAzB,EAAsC;AACpC;AACA,YAAMC,YAAiC,GAAG;AACxCl7B,QAAAA,MAAM,EAAEi7B,WADgC;AAExC1R,QAAAA,KAAK,EAAE0R;AAFiC,OAA1C,CAFoC;AAQpC;;AACArpB,MAAAA,cAAc,CAACiD,aAAf,GAA+BqmB,YAA/B;;AACA,UAAItpB,cAAc,CAACtO,KAAf,KAAyBe,OAA7B,EAAsC;AACpC,cAAMiV,WAA6B,GAAI1H,cAAc,CAAC0H,WAAtD;AACA1H,QAAAA,cAAc,CAACiD,aAAf,GAA+ByE,WAAW,CAACgC,SAAZ,GAAwB4f,YAAvD;AACD;;AAEDrR,MAAAA,iBAAiB,CAACjY,cAAD,EAAiBqpB,WAAjB,CAAjB,CAfoC;AAiBpC;AACD,KAlBD,MAkBO;AACL;AACA,YAAME,SAAS,GAAG1e,SAAS,CAAC8M,KAA5B;AACAM,MAAAA,iBAAiB,CAACjY,cAAD,EAAiBupB,SAAjB,CAAjB;;AACA,UAAIA,SAAS,KAAK5e,SAAS,CAACgN,KAA5B,EAAmC;AACjC;AACA3Q,QAAAA,sBAAsB,CAAChH,cAAD,EAAiBmX,YAAjB,EAA+B5d,WAA/B,CAAtB;AACD;AACF;AACF;;AAED,QAAMquB,YAAY,GAAG5nB,cAAc,CAAC2O,YAAf,CAA4BrT,QAAjD;AACAqsB,EAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B4nB,YAA1B,EAAwCruB,WAAxC,CAAjB;AACA,SAAOyG,cAAc,CAAClS,KAAtB;AACD;;AAiBD,SAAS6jB,cAAT,CACEzjB,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACA,QAAMquB,YAAY,GAAG5nB,cAAc,CAAC2O,YAApC;AACAgZ,EAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B4nB,YAA1B,EAAwCruB,WAAxC,CAAjB;AACA,SAAOyG,cAAc,CAAClS,KAAtB;AACD;;AAED,SAAS07B,UAAT,CACEt7B,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACA,QAAMquB,YAAY,GAAG5nB,cAAc,CAAC2O,YAAf,CAA4BrT,QAAjD;AACAqsB,EAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B4nB,YAA1B,EAAwCruB,WAAxC,CAAjB;AACA,SAAOyG,cAAc,CAAClS,KAAtB;AACD;;AAED,SAAS27B,cAAT,CACEv7B,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACA;AAWA,QAAMqR,SAAS,GAAG5K,cAAc,CAAC2O,YAAjC;AACA,QAAMiZ,YAAY,GAAGhd,SAAS,CAACtP,QAA/B;AACAqsB,EAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B4nB,YAA1B,EAAwCruB,WAAxC,CAAjB;AACA,SAAOyG,cAAc,CAAClS,KAAtB;AACD;;AAED,SAAS47B,OAAT,CAAiBx7B,OAAjB,EAAwC8R,cAAxC,EAA+D;AAC7D,QAAMoP,GAAG,GAAGpP,cAAc,CAACoP,GAA3B;;AACA,MACGlhB,OAAO,KAAK,IAAZ,IAAoBkhB,GAAG,KAAK,IAA7B,IACClhB,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACkhB,GAAR,KAAgBA,GAFvC,EAGE;AACA;AACApP,IAAAA,cAAc,CAAChT,KAAf,IAAwB3B,GAAxB;AAID;AACF;;AAED,SAASq9B,uBAAT,CACEx6B,OADF,EAEE8R,cAFF,EAGEC,SAHF,EAIE2K,SAJF,EAKErR,WALF,EAME;AACA;AAgBA,MAAIzP,OAAJ;;AACA,EAA2B;AACzB,UAAMuW,eAAe,GAAGN,kBAAkB,CAACC,cAAD,EAAiBC,SAAjB,EAA4B,IAA5B,CAA1C;AACAnW,IAAAA,OAAO,GAAG2W,gBAAgB,CAACT,cAAD,EAAiBK,eAAjB,CAA1B;AACD;;AAED,MAAIunB,YAAJ;AACA,AACA5f,EAAAA,oBAAoB,CAAChI,cAAD,EAAiBzG,WAAjB,CAApB;;AAIA,EAgCO;AACLquB,IAAAA,YAAY,GAAG/O,eAAe,CAC5B3qB,OAD4B,EAE5B8R,cAF4B,EAG5BC,SAH4B,EAI5B2K,SAJ4B,EAK5B9gB,OAL4B,EAM5ByP,WAN4B,CAA9B;AAQAwuB,AACD;;AAKD,MAAI75B,OAAO,KAAK,IAAZ,IAAoB,CAACw5B,gBAAzB,EAA2C;AACzCnO,IAAAA,YAAY,CAACrrB,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAAZ;AACA,WAAOyuB,4BAA4B,CAAC95B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAAnC;AACD;;;AAODyG,EAAAA,cAAc,CAAChT,KAAf,IAAwBnC,aAAxB;AACA88B,EAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B4nB,YAA1B,EAAwCruB,WAAxC,CAAjB;AACA,SAAOyG,cAAc,CAAClS,KAAtB;AACD;;AAED,SAAS67B,oBAAT,CACEz7B,OADF,EAEE8R,cAFF,EAGEC,SAHF,EAIE2K,SAJF,EAKErR,WALF,EAME;AACA,AAkDA;AACA;;;AACA,MAAIqwB,UAAJ;;AACA,MAAIC,iBAAuB,CAAC5pB,SAAD,CAA3B,EAAwC;AACtC2pB,IAAAA,UAAU,GAAG,IAAb;AACAE,IAAAA,mBAAyB,CAAC9pB,cAAD,CAAzB;AACD,GAHD,MAGO;AACL4pB,IAAAA,UAAU,GAAG,KAAb;AACD;;AACD5hB,EAAAA,oBAAoB,CAAChI,cAAD,EAAiBzG,WAAjB,CAApB;AAEA,QAAMiE,QAAQ,GAAGwC,cAAc,CAAC/R,SAAhC;AACA,MAAImW,YAAJ;;AACA,MAAI5G,QAAQ,KAAK,IAAjB,EAAuB;AACrBusB,IAAAA,wCAAwC,CAAC77B,OAAD,EAAU8R,cAAV,CAAxC,CADqB;;AAIrBoN,IAAAA,sBAAsB,CAACpN,cAAD,EAAiBC,SAAjB,EAA4B2K,SAA5B,CAAtB;AACAkD,IAAAA,kBAAkB,CAAC9N,cAAD,EAAiBC,SAAjB,EAA4B2K,SAA5B,EAAuCrR,WAAvC,CAAlB;AACA6K,IAAAA,YAAY,GAAG,IAAf;AACD,GAPD,MAOO,IAAIlW,OAAO,KAAK,IAAhB,EAAsB;AAC3B;AACAkW,IAAAA,YAAY,GAAG8J,wBAAwB,CACrClO,cADqC,EAErCC,SAFqC,EAGrC2K,SAHqC,EAIrCrR,WAJqC,CAAvC;AAMD,GARM,MAQA;AACL6K,IAAAA,YAAY,GAAGmK,mBAAmB,CAChCrgB,OADgC,EAEhC8R,cAFgC,EAGhCC,SAHgC,EAIhC2K,SAJgC,EAKhCrR,WALgC,CAAlC;AAOD;;AACD,QAAMywB,cAAc,GAAGC,oBAAoB,CACzC/7B,OADyC,EAEzC8R,cAFyC,EAGzCC,SAHyC,EAIzCmE,YAJyC,EAKzCwlB,UALyC,EAMzCrwB,WANyC,CAA3C;;AAqBA,SAAOywB,cAAP;AACD;;AAED,SAASC,oBAAT,CACE/7B,OADF,EAEE8R,cAFF,EAGEC,SAHF,EAIEmE,YAJF,EAKEwlB,UALF,EAMErwB,WANF,EAOE;AACA;AACAmwB,EAAAA,OAAO,CAACx7B,OAAD,EAAU8R,cAAV,CAAP;AAEA,QAAMkqB,eAAe,GAAG,CAAClqB,cAAc,CAAChT,KAAf,GAAuB7B,UAAxB,MAAwCP,OAAhE;;AAEA,MAAI,CAACwZ,YAAD,IAAiB,CAAC8lB,eAAtB,EAAuC;AACrC;AACA,QAAIN,UAAJ,EAAgB;AACdnoB,MAAAA,yBAAyB,CAACzB,cAAD,EAAiBC,SAAjB,EAA4B,KAA5B,CAAzB;AACD;;AAED,WAAO+nB,4BAA4B,CAAC95B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAAnC;AACD;;AAED,QAAMiE,QAAQ,GAAGwC,cAAc,CAAC/R,SAAhC,CAfA;;AAkBAvB,EAAAA,mBAAiB,CAACwB,OAAlB,GAA4B8R,cAA5B;AACA,MAAI4nB,YAAJ;;AACA,MACEsC,eAAe,IACf,OAAOjqB,SAAS,CAAC8kB,wBAAjB,KAA8C,UAFhD,EAGE;AACA;AACA;AACA;AACA;AACA;AACA6C,IAAAA,YAAY,GAAG,IAAf;AAKD,GAdD,MAcO;AACL;AAGA,IAeO;AACLA,MAAAA,YAAY,GAAGpqB,QAAQ,CAACvT,MAAT,EAAf;AACD;AAIF,GA3DD;;;AA8DA+V,EAAAA,cAAc,CAAChT,KAAf,IAAwBnC,aAAxB;;AACA,MAAIqD,OAAO,KAAK,IAAZ,IAAoBg8B,eAAxB,EAAyC;AACvC;AACA;AACA;AACA;AACArC,IAAAA,+BAA+B,CAC7B35B,OAD6B,EAE7B8R,cAF6B,EAG7B4nB,YAH6B,EAI7BruB,WAJ6B,CAA/B;AAMD,GAXD,MAWO;AACLouB,IAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B4nB,YAA1B,EAAwCruB,WAAxC,CAAjB;AACD,GA5ED;AA+EA;;;AACAyG,EAAAA,cAAc,CAACiD,aAAf,GAA+BzF,QAAQ,CAAC+P,KAAxC,CAhFA;;AAmFA,MAAIqc,UAAJ,EAAgB;AACdnoB,IAAAA,yBAAyB,CAACzB,cAAD,EAAiBC,SAAjB,EAA4B,IAA5B,CAAzB;AACD;;AAED,SAAOD,cAAc,CAAClS,KAAtB;AACD;;AAED,SAASq8B,mBAAT,CAA6BnqB,cAA7B,EAA6C;AAC3C,QAAM7P,IAAI,GAAI6P,cAAc,CAAC/R,SAA7B;;AACA,MAAIkC,IAAI,CAACi6B,cAAT,EAAyB;AACvBrpB,IAAAA,yBAAyB,CACvBf,cADuB,EAEvB7P,IAAI,CAACi6B,cAFkB,EAGvBj6B,IAAI,CAACi6B,cAAL,KAAwBj6B,IAAI,CAACrG,OAHN,CAAzB;AAKD,GAND,MAMO,IAAIqG,IAAI,CAACrG,OAAT,EAAkB;AACvB;AACAiX,IAAAA,yBAAyB,CAACf,cAAD,EAAiB7P,IAAI,CAACrG,OAAtB,EAA+B,KAA/B,CAAzB;AACD;;AACDuqB,EAAAA,iBAAiB,CAACrU,cAAD,EAAiB7P,IAAI,CAACgM,aAAtB,CAAjB;AACD;;AAED,SAASkuB,cAAT,CAAwBn8B,OAAxB,EAAiC8R,cAAjC,EAAiDzG,WAAjD,EAA8D;AAC5D4wB,EAAAA,mBAAmB,CAACnqB,cAAD,CAAnB;;AAEA,MAAI9R,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAM,IAAIX,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,QAAMqd,SAAS,GAAG5K,cAAc,CAAC2O,YAAjC;AACA,QAAMhE,SAAS,GAAG3K,cAAc,CAACiD,aAAjC;AACA,QAAMqnB,YAAY,GAAG3f,SAAS,CAACuE,OAA/B;AACApF,EAAAA,gBAAgB,CAAC5b,OAAD,EAAU8R,cAAV,CAAhB;AACA+K,EAAAA,kBAAkB,CAAC/K,cAAD,EAAiB4K,SAAjB,EAA4B,IAA5B,EAAkCrR,WAAlC,CAAlB;AAEA,QAAMsR,SAAoB,GAAG7K,cAAc,CAACiD,aAA5C;AACA,QAAM9S,IAAe,GAAG6P,cAAc,CAAC/R,SAAvC;AACAs8B;AAEA,EAAiB;AACf,UAAMhB,SAAgB,GAAG1e,SAAS,CAAC8M,KAAnC;AACAM,IAAAA,iBAAiB,CAACjY,cAAD,EAAiBupB,SAAjB,CAAjB;;AACA,QAAIA,SAAS,KAAK5e,SAAS,CAACgN,KAA5B,EAAmC;AACjC;AACA3Q,MAAAA,sBAAsB,CAAChH,cAAD,EAAiBmX,YAAjB,EAA+B5d,WAA/B,CAAtB;AACD;AACF,GAxB2D;AA2B5D;;;AACA,QAAMquB,YAAY,GAAG/c,SAAS,CAACqE,OAA/B;;AACA,EAyFO;AACL;AAGA,QAAI0Y,YAAY,KAAK0C,YAArB,EAAmC;AACjC,aAAOtC,4BAA4B,CAAC95B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAAnC;AACD;;AACDouB,IAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B4nB,YAA1B,EAAwCruB,WAAxC,CAAjB;AACD;;AACD,SAAOyG,cAAc,CAAClS,KAAtB;AACD;;AAoBD,SAAS08B,mBAAT,CACEt8B,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACAmb,EAAAA,eAAe,CAAC1U,cAAD,CAAf;;AAMA,QAAMrW,IAAI,GAAGqW,cAAc,CAACrW,IAA5B;AACA,QAAMihB,SAAS,GAAG5K,cAAc,CAAC2O,YAAjC;AACA,QAAM8Z,SAAS,GAAGv6B,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAACigB,aAA3B,GAA2C,IAA7D;AAEA,MAAIyZ,YAAY,GAAGhd,SAAS,CAACtP,QAA7B;AACA;AAEA,EAMO,IAAImtB,SAAS,KAAK,IAAd,IAAsB3rB,oBAAoB,CAACnT,AAAD,CAA9C,EAAiE;AACtE;AACA;AACAqW,IAAAA,cAAc,CAAChT,KAAf,IAAwB/B,YAAxB;AACD;;AAEDy+B,EAAAA,OAAO,CAACx7B,OAAD,EAAU8R,cAAV,CAAP;AACA2nB,EAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B4nB,YAA1B,EAAwCruB,WAAxC,CAAjB;AACA,SAAOyG,cAAc,CAAClS,KAAtB;AACD;;AAED,SAAS28B,cAAT,CAAwBv8B,OAAxB,EAAiC8R,cAAjC,EAAiD;AAC/C,AAIA;;;AACA,SAAO,IAAP;AACD;;AAED,SAAS0qB,kBAAT,CACEC,QADF,EAEE3qB,cAFF,EAGEyO,WAHF,EAIElV,WAJF,EAKE;AACAwwB,EAAAA,wCAAwC,CAACY,QAAD,EAAW3qB,cAAX,CAAxC;AAEA,QAAM7E,KAAK,GAAG6E,cAAc,CAAC2O,YAA7B;AACA,QAAMxkB,aAA0C,GAAGskB,WAAnD;AACA,QAAMrkB,OAAO,GAAGD,aAAa,CAACE,QAA9B;AACA,QAAMC,IAAI,GAAGH,aAAa,CAACI,KAA3B;AACA,MAAI0V,SAAS,GAAG3V,IAAI,CAACF,OAAD,CAApB,CAPA;;AASA4V,EAAAA,cAAc,CAACrW,IAAf,GAAsBsW,SAAtB;AACA,QAAM2qB,WAAW,GAAI5qB,cAAc,CAACrV,GAAf,GAAqBkgC,uBAAuB,CAAC5qB,SAAD,CAAjE;AACA,QAAM6qB,aAAa,GAAGhlB,mBAAmB,CAAC7F,SAAD,EAAY9E,KAAZ,CAAzC;AACA,MAAIrN,KAAJ;;AACA,UAAQ88B,WAAR;AACE,SAAK5kC,iBAAL;AAAwB;AACtB;AAMA8H,QAAAA,KAAK,GAAG46B,uBAAuB,CAC7B,IAD6B,EAE7B1oB,cAF6B,EAG7BC,SAH6B,EAI7B6qB,aAJ6B,EAK7BvxB,WAL6B,CAA/B;AAOA,eAAOzL,KAAP;AACD;;AACD,SAAK7H,cAAL;AAAqB;AACnB;AAKA6H,QAAAA,KAAK,GAAG67B,oBAAoB,CAC1B,IAD0B,EAE1B3pB,cAF0B,EAG1BC,SAH0B,EAI1B6qB,aAJ0B,EAK1BvxB,WAL0B,CAA5B;AAOA,eAAOzL,KAAP;AACD;;AACD,SAAKnH,UAAL;AAAiB;AACf;AAKAmH,QAAAA,KAAK,GAAGg6B,gBAAgB,CACtB,IADsB,EAEtB9nB,cAFsB,EAGtBC,SAHsB,EAItB6qB,aAJsB,EAKtBvxB,WALsB,CAAxB;AAOA,eAAOzL,KAAP;AACD;;AACD,SAAKhH,aAAL;AAAoB;AAClB;AAaAgH,QAAAA,KAAK,GAAGm6B,mBAAmB,CACzB,IADyB,EAEzBjoB,cAFyB,EAGzBC,SAHyB,EAIzB6F,mBAAmB,CAAC7F,SAAS,CAACtW,IAAX,EAAiBmhC,aAAjB,CAJM;AAKzBvxB,QAAAA,WALyB,CAA3B;AAOA,eAAOzL,KAAP;AACD;AArEH;;AAuEA,MAAIi9B,IAAI,GAAG,EAAX;AAYA;AACA;;;AACA,QAAM,IAAIx9B,KAAJ,CACJ,mEAAiE0S,SAAjE,sEAC2D8qB,IAD3D,CADI,CAAN;AAID;;AAED,SAASC,6BAAT,CACEL,QADF,EAEE3qB,cAFF,EAGEC,SAHF,EAIE2K,SAJF,EAKErR,WALF,EAME;AACAwwB,EAAAA,wCAAwC,CAACY,QAAD,EAAW3qB,cAAX,CAAxC,CADA;;AAIAA,EAAAA,cAAc,CAACrV,GAAf,GAAqB1E,cAArB,CAJA;AAQA;AACA;AACA;;AACA,MAAI2jC,UAAJ;;AACA,MAAIC,iBAAuB,CAAC5pB,SAAD,CAA3B,EAAwC;AACtC2pB,IAAAA,UAAU,GAAG,IAAb;AACAE,IAAAA,mBAAyB,CAAC9pB,cAAD,CAAzB;AACD,GAHD,MAGO;AACL4pB,IAAAA,UAAU,GAAG,KAAb;AACD;;AACD5hB,EAAAA,oBAAoB,CAAChI,cAAD,EAAiBzG,WAAjB,CAApB;AAEA6T,EAAAA,sBAAsB,CAACpN,cAAD,EAAiBC,SAAjB,EAA4B2K,SAA5B,CAAtB;AACAkD,EAAAA,kBAAkB,CAAC9N,cAAD,EAAiBC,SAAjB,EAA4B2K,SAA5B,EAAuCrR,WAAvC,CAAlB;AAEA,SAAO0wB,oBAAoB,CACzB,IADyB,EAEzBjqB,cAFyB,EAGzBC,SAHyB,EAIzB,IAJyB,EAKzB2pB,UALyB,EAMzBrwB,WANyB,CAA3B;AAQD;;AAED,SAAS0xB,2BAAT,CACEN,QADF,EAEE3qB,cAFF,EAGEC,SAHF,EAIE1G,WAJF,EAKE;AACAwwB,EAAAA,wCAAwC,CAACY,QAAD,EAAW3qB,cAAX,CAAxC;AAEA,QAAM7E,KAAK,GAAG6E,cAAc,CAAC2O,YAA7B;AACA,MAAI7kB,OAAJ;;AACA,EAA2B;AACzB,UAAMuW,eAAe,GAAGN,kBAAkB,CACxCC,cADwC,EAExCC,SAFwC,EAGxC,KAHwC,CAA1C;AAKAnW,IAAAA,OAAO,GAAG2W,gBAAgB,CAACT,cAAD,EAAiBK,eAAjB,CAA1B;AACD;;AAED2H,EAAAA,oBAAoB,CAAChI,cAAD,EAAiBzG,WAAjB,CAApB;AACA,MAAIlU,KAAJ;AACA;AAKA,EAkCO;AACLA,IAAAA,KAAK,GAAGwzB,eAAe,CACrB,IADqB,EAErB7Y,cAFqB,EAGrBC,SAHqB,EAIrB9E,KAJqB,EAKrBrR,OALqB,EAMrByP,WANqB,CAAvB;AAQAwuB,AACD;;;AAMD/nB,EAAAA,cAAc,CAAChT,KAAf,IAAwBnC,aAAxB;;AA4BA;AAEE;AACA,GACA,OAAOxF,KAAP,KAAiB,QADjB,IAEAA,KAAK,KAAK,IAFV,IAGA,OAAOA,KAAK,CAAC4E,MAAb,KAAwB,UAHxB,IAIA5E,KAAK,CAACwE,QAAN,KAAmBmH,SAPrB,EAQE;AACA;;AAkBAgP,IAAAA,cAAc,CAACrV,GAAf,GAAqB1E,cAArB,CAnBA;;AAsBA+Z,IAAAA,cAAc,CAACiD,aAAf,GAA+B,IAA/B;AACAjD,IAAAA,cAAc,CAAC0H,WAAf,GAA6B,IAA7B,CAvBA;AA0BA;AACA;;AACA,QAAIkiB,UAAU,GAAG,KAAjB;;AACA,QAAIC,iBAAuB,CAAC5pB,SAAD,CAA3B,EAAwC;AACtC2pB,MAAAA,UAAU,GAAG,IAAb;AACAE,MAAAA,mBAAyB,CAAC9pB,cAAD,CAAzB;AACD,KAHD,MAGO;AACL4pB,MAAAA,UAAU,GAAG,KAAb;AACD;;AAED5pB,IAAAA,cAAc,CAACiD,aAAf,GACE5d,KAAK,CAACkoB,KAAN,KAAgB,IAAhB,IAAwBloB,KAAK,CAACkoB,KAAN,KAAgBvc,SAAxC,GAAoD3L,KAAK,CAACkoB,KAA1D,GAAkE,IADpE;AAGA9D,IAAAA,qBAAqB,CAACzJ,cAAD,CAArB;AAEAiN,IAAAA,kBAAkB,CAACjN,cAAD,EAAiB3a,KAAjB,CAAlB;AACAyoB,IAAAA,kBAAkB,CAAC9N,cAAD,EAAiBC,SAAjB,EAA4B9E,KAA5B,EAAmC5B,WAAnC,CAAlB;AACA,WAAO0wB,oBAAoB,CACzB,IADyB,EAEzBjqB,cAFyB,EAGzBC,SAHyB,EAIzB,IAJyB,EAKzB2pB,UALyB,EAMzBrwB,WANyB,CAA3B;AAQD,GA3DD,MA2DO;AACL;AACAyG,IAAAA,cAAc,CAACrV,GAAf,GAAqB3E,iBAArB;;AAmCA2hC,IAAAA,iBAAiB,CAAC,IAAD,EAAO3nB,cAAP,EAAuB3a,KAAvB,EAA8BkU,WAA9B,CAAjB;;AAIA,WAAOyG,cAAc,CAAClS,KAAtB;AACD;AACF;;AAgFD,MAAMo9B,gBAA+B,GAAG;AACtCrV,EAAAA,UAAU,EAAE,IAD0B;AAEtC5R,EAAAA,WAAW,EAAE,IAFyB;AAGtCknB,EAAAA,SAAS,EAAEz4B;AAH2B,CAAxC;;AAMA,SAAS04B,2BAAT,CAAqC7xB,WAArC,EAAyE;AACvE,SAAO;AACLqvB,IAAAA,SAAS,EAAErvB,WADN;AAELsvB,IAAAA,SAAS,EAAErB,iBAAiB,EAFvB;AAGLsB,IAAAA,WAAW,EAAE;AAHR,GAAP;AAKD;;AAED,SAASuC,4BAAT,CACEC,kBADF,EAEE/xB,WAFF,EAGkB;AAChB,MAAIsvB,SAAkC,GAAG,IAAzC;;AACA,EAAiB;AACf,UAAMzB,aAAsC,GAAGkE,kBAAkB,CAACzC,SAAlE;;AACA,QAAIzB,aAAa,KAAK,IAAtB,EAA4B;AAC1B,YAAMiC,WAAW,GAAGlhB,CAEhBgP,YAAY,CAACzQ,cAFjB;;AAGA,UAAI0gB,aAAa,CAACh5B,MAAd,KAAyBi7B,WAA7B,EAA0C;AACxC;AACA;AACAR,QAAAA,SAAS,GAAG;AACVz6B,UAAAA,MAAM,EAAEi7B,WADE;AAEV/B,UAAAA,IAAI,EAAE+B;AAFI,SAAZ;AAID,OAPD,MAOO;AACL;AACA;AACAR,QAAAA,SAAS,GAAGzB,aAAZ;AACD;AACF,KAhBD,MAgBO;AACL;AACAyB,MAAAA,SAAS,GAAGrB,iBAAiB,EAA7B;AACD;AACF;;AACD,SAAO;AACLoB,IAAAA,SAAS,EAAEzwB,UAAU,CAACmzB,kBAAkB,CAAC1C,SAApB,EAA+BrvB,WAA/B,CADhB;AAELsvB,IAAAA,SAFK;AAGLC,IAAAA,WAAW,EAAEwC,kBAAkB,CAACxC;AAH3B,GAAP;AAKD;;;AAGD,SAASyC,sBAAT,CACEC,eADF,EAEEt9B,OAFF,EAGE8R,cAHF,EAIEzG,WAJF,EAKE;AACA;AACA;AACA;AACA,MAAIrL,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAMu9B,aAA4B,GAAGv9B,OAAO,CAAC+U,aAA7C;;AACA,QAAIwoB,aAAa,KAAK,IAAtB,EAA4B;AAC1B;AACA;AACA;AACA;AACA,aAAO,KAAP;AACD;AACF,GAbD;;;AAgBA,SAAOxW,kBAAkB,CACvBuW,eADuB,EAEtBzW,qBAFsB,CAAzB;AAID;;AAED,SAAS2W,6BAAT,CAAuCx9B,OAAvC,EAAuDqL,WAAvD,EAAoE;AAClE;AACA,SAAOnB,WAAW,CAAClK,OAAO,CAAC6Y,UAAT,EAAqBxN,WAArB,CAAlB;AACD;;AAED,SAASoyB,uBAAT,CAAiCz9B,OAAjC,EAA0C8R,cAA1C,EAA0DzG,WAA1D,EAAuE;AACrE,QAAMqR,SAAS,GAAG5K,cAAc,CAAC2O,YAAjC,CADqE;;AAUrE,MAAI6c,eAAgC,GAAGxW,mBAAmB,CAAC9mB,OAA3D;AAEA,MAAI09B,YAAY,GAAG,KAAnB;AACA,QAAM3V,UAAU,GAAG,CAACjW,cAAc,CAAChT,KAAf,GAAuB7B,UAAxB,MAAwCP,OAA3D;;AAEA,MACEqrB,UAAU,IACVsV,sBAAsB,CACpBC,eADoB,EAEpBt9B,OAFoB,AAAA,CAFxB,EAQE;AACA;AACA;AACA09B,IAAAA,YAAY,GAAG,IAAf;AACA5rB,IAAAA,cAAc,CAAChT,KAAf,IAAwB,CAAC7B,UAAzB;AACD,GAbD,MAaO;AACL;AACA,QACE+C,OAAO,KAAK,IAAZ,IACCA,OAAO,CAAC+U,aAAT,KAAkD,IAFpD,EAGE;AACA;AACA;AACA;AACA;AACA,MAGE;AACAuoB,QAAAA,eAAe,GAAGlW,yBAAyB,CACzCkW,eADyC,EAEzC1W,8BAFyC,CAA3C;AAID;AACF;AACF;;AAED0W,EAAAA,eAAe,GAAGrW,gCAAgC,CAACqW,eAAD,CAAlD;AAEAhW,EAAAA,mBAAmB,CAACxV,cAAD,EAAiBwrB,eAAjB,CAAnB,CApDqE;AAuDrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIt9B,OAAO,KAAK,IAAhB,EAAsB;AACpB;AAMA,UAAMu9B,aAAmC,GAAGzrB,cAAc,CAACiD,aAA3D;;AACA,QAAIwoB,aAAa,KAAK,IAAtB,EAA4B;AAC1B,YAAM5V,UAAU,GAAG4V,aAAa,CAAC5V,UAAjC;;AACA,UAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB,eAAOgW,gCAAgC,CACrC7rB,cADqC,AAAA,CAAvC;AAKD;AACF;;AAED,UAAM8rB,mBAAmB,GAAGlhB,SAAS,CAACtP,QAAtC;AACA,UAAMywB,oBAAoB,GAAGnhB,SAAS,CAACohB,QAAvC;;AAEA,QAAIJ,YAAJ,EAAkB;AAChB,YAAMK,gBAAgB,GAAGC,6BAA6B,CACpDlsB,cADoD,EAEpD8rB,mBAFoD,EAGpDC,oBAHoD,EAIpDxyB,WAJoD,CAAtD;AAMA,YAAM4yB,oBAA2B,GAAInsB,cAAc,CAAClS,KAApD;AACAq+B,MAAAA,oBAAoB,CAAClpB,aAArB,GAAqCmoB,2BAA2B,CAC9D7xB,WAD8D,CAAhE;AAGAyG,MAAAA,cAAc,CAACiD,aAAf,GAA+BioB,gBAA/B;;AAWA,aAAOe,gBAAP;AACD,KAvBD,MAuBO,AA6BA;AACL,aAAOG,4BAA4B,CACjCpsB,cADiC,EAEjC8rB,mBAFiC,AAAA,CAAnC;AAKD;AACF,GAjFD,MAiFO;AACL;AAEA;AACA,UAAMnhB,SAA+B,GAAGzc,OAAO,CAAC+U,aAAhD;;AACA,QAAI0H,SAAS,KAAK,IAAlB,EAAwB;AACtB,YAAMkL,UAAU,GAAGlL,SAAS,CAACkL,UAA7B;;AACA,UAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB,eAAOwW,iCAAiC,CACtCn+B,OADsC,EAEtC8R,cAFsC,EAGtCiW,UAHsC,EAItCrL,SAJsC,EAKtCiL,UALsC,EAMtClL,SANsC,EAOtCpR,WAPsC,CAAxC;AASD;AACF;;AAED,QAAIqyB,YAAJ,EAAkB;AAChB,YAAMG,oBAAoB,GAAGnhB,SAAS,CAACohB,QAAvC;AACA,YAAMF,mBAAmB,GAAGlhB,SAAS,CAACtP,QAAtC;AACA,YAAMgxB,qBAAqB,GAAGC,8BAA8B,CAC1Dr+B,OAD0D,EAE1D8R,cAF0D,EAG1D8rB,mBAH0D,EAI1DC,oBAJ0D,EAK1DxyB,WAL0D,CAA5D;AAOA,YAAM4yB,oBAA2B,GAAInsB,cAAc,CAAClS,KAApD;AACA,YAAMw9B,kBAAyC,GAAIp9B,OAAO,CAACJ,KAAT,CAC/CmV,aADH;AAEAkpB,MAAAA,oBAAoB,CAAClpB,aAArB,GACEqoB,kBAAkB,KAAK,IAAvB,GACIF,2BAA2B,CAAC7xB,WAAD,CAD/B,GAEI8xB,4BAA4B,CAACC,kBAAD,EAAqB/xB,WAArB,CAHlC;;AAaA4yB,MAAAA,oBAAoB,CAACplB,UAArB,GAAkC2kB,6BAA6B,CAC7Dx9B,OAD6D,EAE7DqL,WAF6D,CAA/D;AAIAyG,MAAAA,cAAc,CAACiD,aAAf,GAA+BioB,gBAA/B;AACA,aAAOoB,qBAAP;AACD,KAhCD,MAgCO;AACL,YAAMR,mBAAmB,GAAGlhB,SAAS,CAACtP,QAAtC;AACA,YAAM6wB,oBAAoB,GAAGK,6BAA6B,CACxDt+B,OADwD,EAExD8R,cAFwD,EAGxD8rB,mBAHwD,EAIxDvyB,WAJwD,CAA1D;AAMAyG,MAAAA,cAAc,CAACiD,aAAf,GAA+B,IAA/B;AACA,aAAOkpB,oBAAP;AACD;AACF;AACF;;AAED,SAASC,4BAAT,CACEpsB,cADF,EAEEysB,eAFF,EAGElzB,WAHF,EAIE;AACA,QAAMvD,IAAI,GAAGgK,cAAc,CAAChK,IAA5B;AACA,QAAM02B,iBAAiC,GAAG;AACxC12B,IAAAA,IAAI,EAAE,SADkC;AAExCsF,IAAAA,QAAQ,EAAEmxB;AAF8B,GAA1C;AAIA,QAAMN,oBAAoB,GAAGQ,iCAAiC,CAC5DD,iBAD4D,EAE5D12B,IAF4D,AAAA,CAA9D;AAKAm2B,EAAAA,oBAAoB,CAACl/B,MAArB,GAA8B+S,cAA9B;AACAA,EAAAA,cAAc,CAAClS,KAAf,GAAuBq+B,oBAAvB;AACA,SAAOA,oBAAP;AACD;;AAED,SAASD,6BAAT,CACElsB,cADF,EAEEysB,eAFF,EAGEG,gBAHF,EAIErzB,WAJF,EAKE;AACA,QAAMvD,IAAI,GAAGgK,cAAc,CAAChK,IAA5B;AACA,QAAM62B,yBAAuC,GAAG7sB,cAAc,CAAClS,KAA/D;AAEA,QAAM4+B,iBAAiC,GAAG;AACxC12B,IAAAA,IAAI,EAAE,QADkC;AAExCsF,IAAAA,QAAQ,EAAEmxB;AAF8B,GAA1C;AAKA,MAAIN,oBAAJ;AACA,MAAIG,qBAAJ;;AACA,MACE,CAACt2B,IAAI,GAAGlE,cAAR,MAA4BD,MAA5B,IACAg7B,yBAAyB,KAAK,IAFhC,EAGE;AACA;AACA;AACAV,IAAAA,oBAAoB,GAAGU,yBAAvB;AACAV,IAAAA,oBAAoB,CAACplB,UAArB,GAAkCtU,OAAlC;AACA05B,IAAAA,oBAAoB,CAACxd,YAArB,GAAoC+d,iBAApC;;AAaAJ,IAAAA,qBAAqB,GAAGpa,uBAAuB,CAC7C0a,gBAD6C,EAE7C52B,IAF6C,EAG7CuD,WAH6C,EAI7C,IAJ6C,CAA/C;AAMD,GA3BD,MA2BO;AACL4yB,IAAAA,oBAAoB,GAAGQ,iCAAiC,CACtDD,iBADsD,EAEtD12B,IAFsD,AAAA,CAAxD;AAKAs2B,IAAAA,qBAAqB,GAAGpa,uBAAuB,CAC7C0a,gBAD6C,EAE7C52B,IAF6C,EAG7CuD,WAH6C,EAI7C,IAJ6C,CAA/C;AAMD;;AAED4yB,EAAAA,oBAAoB,CAACl/B,MAArB,GAA8B+S,cAA9B;AACAssB,EAAAA,qBAAqB,CAACr/B,MAAtB,GAA+B+S,cAA/B;AACAmsB,EAAAA,oBAAoB,CAACp+B,OAArB,GAA+Bu+B,qBAA/B;AACAtsB,EAAAA,cAAc,CAAClS,KAAf,GAAuBq+B,oBAAvB;AACA,SAAOG,qBAAP;AACD;;AAED,SAASK,iCAAT,CACEG,cADF,EAEE92B,IAFF,EAGEuD,WAHF,EAIE;AACA;AACA;AACA,SAAOwzB,wBAAwB,CAACD,cAAD,EAAiB92B,IAAjB,EAAuBvD,OAAvB,EAAgC,IAAhC,CAA/B;AACD;;AAED,SAASu6B,kCAAT,CACE9+B,OADF,EAEE4+B,cAFF,EAGE;AACA;AACA;AACA,SAAOhc,oBAAoB,CAAC5iB,OAAD,EAAU4+B,cAAV,CAA3B;AACD;;AAED,SAASN,6BAAT,CACEt+B,OADF,EAEE8R,cAFF,EAGEysB,eAHF,EAIElzB,WAJF,EAKE;AACA,QAAM0zB,2BAAkC,GAAI/+B,OAAO,CAACJ,KAApD;AACA,QAAMo/B,4BAA0C,GAC9CD,2BAA2B,CAACl/B,OAD9B;AAGA,QAAMo+B,oBAAoB,GAAGa,kCAAkC,CAC7DC,2BAD6D,EAE7D;AACEj3B,IAAAA,IAAI,EAAE,SADR;AAEEsF,IAAAA,QAAQ,EAAEmxB;AAFZ,GAF6D,CAA/D;;AAOA,MAAI,CAACzsB,cAAc,CAAChK,IAAf,GAAsBlE,cAAvB,MAA2CD,MAA/C,EAAuD;AACrDs6B,IAAAA,oBAAoB,CAACz6B,KAArB,GAA6B6H,WAA7B;AACD;;AACD4yB,EAAAA,oBAAoB,CAACl/B,MAArB,GAA8B+S,cAA9B;AACAmsB,EAAAA,oBAAoB,CAACp+B,OAArB,GAA+B,IAA/B;;AACA,MAAIm/B,4BAA4B,KAAK,IAArC,EAA2C;AACzC;AACA,UAAM5c,SAAS,GAAGtQ,cAAc,CAACsQ,SAAjC;;AACA,QAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBtQ,MAAAA,cAAc,CAACsQ,SAAf,GAA2B,CAAC4c,4BAAD,CAA3B;AACAltB,MAAAA,cAAc,CAAChT,KAAf,IAAwBhC,aAAxB;AACD,KAHD,MAGO;AACLslB,MAAAA,SAAS,CAAC3X,IAAV,CAAeu0B,4BAAf;AACD;AACF;;AAEDltB,EAAAA,cAAc,CAAClS,KAAf,GAAuBq+B,oBAAvB;AACA,SAAOA,oBAAP;AACD;;AAED,SAASI,8BAAT,CACEr+B,OADF,EAEE8R,cAFF,EAGEysB,eAHF,EAIEG,gBAJF,EAKErzB,WALF,EAME;AACA,QAAMvD,IAAI,GAAGgK,cAAc,CAAChK,IAA5B;AACA,QAAMi3B,2BAAkC,GAAI/+B,OAAO,CAACJ,KAApD;AACA,QAAMo/B,4BAA0C,GAC9CD,2BAA2B,CAACl/B,OAD9B;AAGA,QAAM2+B,iBAAiC,GAAG;AACxC12B,IAAAA,IAAI,EAAE,QADkC;AAExCsF,IAAAA,QAAQ,EAAEmxB;AAF8B,GAA1C;AAKA,MAAIN,oBAAJ;;AACA;AAEE;AACA,GAACn2B,IAAI,GAAGlE,cAAR,MAA4BD,MAA5B;AAEA;AACA;AACA;AACA;AACA;AACAmO,EAAAA,cAAc,CAAClS,KAAf,KAAyBm/B,2BAV3B,EAWE;AACA,UAAMJ,yBAAgC,GAAI7sB,cAAc,CAAClS,KAAzD;AACAq+B,IAAAA,oBAAoB,GAAGU,yBAAvB;AACAV,IAAAA,oBAAoB,CAACplB,UAArB,GAAkCtU,OAAlC;AACA05B,IAAAA,oBAAoB,CAACxd,YAArB,GAAoC+d,iBAApC;AAgBA;AACA;;;AACA1sB,IAAAA,cAAc,CAACsQ,SAAf,GAA2B,IAA3B;AACD,GAlCD,MAkCO;AACL6b,IAAAA,oBAAoB,GAAGa,kCAAkC,CACvDC,2BADuD,EAEvDP,iBAFuD,CAAzD,CADK;AAML;AACA;;AACAP,IAAAA,oBAAoB,CAACgB,YAArB,GACEF,2BAA2B,CAACE,YAA5B,GAA2C1gC,UAD7C;AAED;;AACD,MAAI6/B,qBAAJ;;AACA,MAAIY,4BAA4B,KAAK,IAArC,EAA2C;AACzCZ,IAAAA,qBAAqB,GAAGxb,oBAAoB,CAC1Coc,4BAD0C,EAE1CN,gBAF0C,CAA5C;AAID,GALD,MAKO;AACLN,IAAAA,qBAAqB,GAAGpa,uBAAuB,CAC7C0a,gBAD6C,EAE7C52B,IAF6C,EAG7CuD,WAH6C,EAI7C,IAJ6C,CAA/C,CADK;AAQL;;AACA+yB,IAAAA,qBAAqB,CAACt/B,KAAtB,IAA+BlC,SAA/B;AACD;;AAEDwhC,EAAAA,qBAAqB,CAACr/B,MAAtB,GAA+B+S,cAA/B;AACAmsB,EAAAA,oBAAoB,CAACl/B,MAArB,GAA8B+S,cAA9B;AACAmsB,EAAAA,oBAAoB,CAACp+B,OAArB,GAA+Bu+B,qBAA/B;AACAtsB,EAAAA,cAAc,CAAClS,KAAf,GAAuBq+B,oBAAvB;AAEA,SAAOG,qBAAP;AACD;;AAED,SAASc,sCAAT,CACEl/B,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE8zB,gBAJF,EAKE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIA,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B3oB,IAAAA,mBAAmB,CAAC2oB,gBAAD,CAAnB;AACD,GAVD;;;AAaA7Z,EAAAA,oBAAoB,CAACxT,cAAD,EAAiB9R,OAAO,CAACJ,KAAzB,EAAgC,IAAhC,EAAsCyL,WAAtC,CAApB,CAbA;;AAgBA,QAAMqR,SAAS,GAAG5K,cAAc,CAAC2O,YAAjC;AACA,QAAM8d,eAAe,GAAG7hB,SAAS,CAACtP,QAAlC;AACA,QAAM6wB,oBAAoB,GAAGC,4BAA4B,CACvDpsB,cADuD,EAEvDysB,eAFuD,AAAA,CAAzD,CAlBA;AAwBA;;AACAN,EAAAA,oBAAoB,CAACn/B,KAArB,IAA8BlC,SAA9B;AACAkV,EAAAA,cAAc,CAACiD,aAAf,GAA+B,IAA/B;AAEA,SAAOkpB,oBAAP;AACD;;AAED,SAASmB,+CAAT,CACEp/B,OADF,EAEE8R,cAFF,EAGEysB,eAHF,EAIEG,gBAJF,EAKErzB,WALF,EAME;AACA,QAAMg0B,SAAS,GAAGvtB,cAAc,CAAChK,IAAjC;AACA,QAAM02B,iBAAiC,GAAG;AACxC12B,IAAAA,IAAI,EAAE,SADkC;AAExCsF,IAAAA,QAAQ,EAAEmxB;AAF8B,GAA1C;AAIA,QAAMN,oBAAoB,GAAGQ,iCAAiC,CAC5DD,iBAD4D,EAE5Da,SAF4D,AAAA,CAA9D;AAKA,QAAMjB,qBAAqB,GAAGpa,uBAAuB,CACnD0a,gBADmD,EAEnDW,SAFmD,EAGnDh0B,WAHmD,EAInD,IAJmD,CAArD,CAXA;AAkBA;;AACA+yB,EAAAA,qBAAqB,CAACt/B,KAAtB,IAA+BlC,SAA/B;AAEAqhC,EAAAA,oBAAoB,CAACl/B,MAArB,GAA8B+S,cAA9B;AACAssB,EAAAA,qBAAqB,CAACr/B,MAAtB,GAA+B+S,cAA/B;AACAmsB,EAAAA,oBAAoB,CAACp+B,OAArB,GAA+Bu+B,qBAA/B;AACAtsB,EAAAA,cAAc,CAAClS,KAAf,GAAuBq+B,oBAAvB;;AAEA,MAAI,CAACnsB,cAAc,CAAChK,IAAf,GAAsBlE,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD;AACA;AACA2hB,IAAAA,oBAAoB,CAACxT,cAAD,EAAiB9R,OAAO,CAACJ,KAAzB,EAAgC,IAAhC,EAAsCyL,WAAtC,CAApB;AACD;;AAED,SAAO+yB,qBAAP;AACD;;AAED,SAAST,gCAAT,CACE7rB,cADF,EAEEgE,gBAFF,EAGEzK,WAHF,EAIgB;AACd;AACA;AACA,MAAI,CAACyG,cAAc,CAAChK,IAAf,GAAsBlE,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD;AASAmO,IAAAA,cAAc,CAACtO,KAAf,GAAuB4G,WAAW,CAAC3F,QAAD,CAAlC;AACD,GAXD,MAWO,IAAIyH,0BAA0B,CAAC4J,AAAD,CAA9B,EAAkD;AACvD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACAhE,IAAAA,cAAc,CAACtO,KAAf,GAAuB4G,WAAW,CAACxF,oBAAD,CAAlC;AACD,GAdM,MAcA;AACL;AACA;AACAkN,IAAAA,cAAc,CAACtO,KAAf,GAAuB4G,WAAW,CAACzD,aAAD,CAAlC;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASw3B,iCAAT,CACEn+B,OADF,EAEE8R,cAFF,EAGEiW,UAHF,EAIErL,SAJF,EAKE5G,gBALF,EAMEynB,aANF,EAOElyB,WAPF,EAQgB;AACd,MAAI,CAAC0c,UAAL,EAAiB;AACf;AAMA,QAAI,CAACjW,cAAc,CAAChK,IAAf,GAAsBlE,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD,aAAOu7B,sCAAsC,CAC3Cl/B,OAD2C,EAE3C8R,cAF2C,EAG3CzG,WAH2C;AAK3C;AACA;AACA,UAP2C,CAA7C;AASD;;AAED,QAAIa,0BAA0B,CAAC4J,AAAD,CAA9B,EAAkD;AAChD;AACA;AACA;AACA,UAAI2f,MAAJ,EAAYhe,AAASC,KAArB;;AACA,MAIO;AAAA,qCACOvL,uCAAuC,CAAC2J,AAAD,CAD9C;;AACH2f,QAAAA,MADG,0BACHA,MADG;AAEN;;AAED,UAAI9gB,KAAJ;;AACA,MAGO;AACLA,QAAAA,KAAK,GAAG,IAAItV,KAAJ,CACN,gEACE,uDADF,GAEE,mBAHI,CAAR;AAKD;;AACD,YAAMigC,aAAa,GAAG5J,mBAAmB,CAAC/gB,KAAD,EAAQ8gB,MAAR,EAAgB/d,KAAhB,CAAzC;AACA,aAAOwnB,sCAAsC,CAC3Cl/B,OAD2C,EAE3C8R,cAF2C,EAG3CzG,WAH2C,EAI3Ci0B,aAJ2C,CAA7C;AAMD;AAeD;;;AACA,UAAM7sB,iBAAiB,GAAG3I,gBAAgB,CAACuB,WAAD,EAAcrL,OAAO,CAAC6Y,UAAtB,CAA1C;;AACA,QAAI2gB,gBAAgB,IAAI/mB,iBAAxB,EAA2C;AACzC;AACA;AACA,YAAMxQ,IAAI,GAAG+rB,qBAAqB,EAAlC;;AACA,UAAI/rB,IAAI,KAAK,IAAb,EAAmB;AACjB,cAAMs9B,sBAAsB,GAAGn0B,yBAAyB,CACtDnJ,IADsD,EAEtDoJ,WAFsD,CAAxD;;AAIA,YACEk0B,sBAAsB,KAAK/6B,MAA3B,IACA+6B,sBAAsB,KAAKhC,aAAa,CAACN,SAF3C,EAGE;AACA;AACA;AACA;AACAM,UAAAA,aAAa,CAACN,SAAd,GAA0BsC,sBAA1B,CAJA;;AAMA,gBAAMh3B,SAAS,GAAG3B,WAAlB;AACAoU,UAAAA,8BAA8B,CAAChb,OAAD,EAAUu/B,sBAAV,CAA9B;AACAhhB,UAAAA,qBAAqB,CACnBtc,IADmB,EAEnBjC,OAFmB,EAGnBu/B,sBAHmB,EAInBh3B,SAJmB,CAArB;AAMD,SAjBD;AAyBD,OAlCwC;AAqCzC;AACA;AACA;AACA;;;AACA4vB,MAAAA,+BAA+B;AAC/B,YAAMmH,aAAa,GAAG5J,mBAAmB,CACvC,IAAIr2B,KAAJ,CACE,kEACE,qEADF,GAEE,2DAFF,GAGE,qBAJJ,CADuC,CAAzC;AAQA,aAAO6/B,sCAAsC,CAC3Cl/B,OAD2C,EAE3C8R,cAF2C,EAG3CzG,WAH2C,EAI3Ci0B,aAJ2C,CAA7C;AAMD,KAxDD,MAwDO,IAAIrzB,yBAAyB,CAAC6J,AAAD,CAA7B,EAAiD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhE,MAAAA,cAAc,CAAChT,KAAf,IAAwB7B,UAAxB,CAVsD;;AAYtD6U,MAAAA,cAAc,CAAClS,KAAf,GAAuBI,OAAO,CAACJ,KAA/B,CAZsD;;AActD,YAAM4/B,KAAK,GAAGC,+BAA+B,CAAC7S,IAAhC,CAAqC,IAArC,EAA2C5sB,OAA3C,CAAd;AACAoM,MAAAA,6BAA6B,CAAC0J,AAAD,CAA7B;AACA,aAAO,IAAP;AACD,KAjBM,MAiBA;AACL;AACAD,MAAAA,mDAAmD,CACjD/D,cADiD,EAEjDgE,gBAFiD,EAGjDynB,aAAa,CAACxnB,WAHmC,CAAnD;AAKA,YAAMwoB,eAAe,GAAG7hB,SAAS,CAACtP,QAAlC;AACA,YAAM6wB,oBAAoB,GAAGC,4BAA4B,CACvDpsB,cADuD,EAEvDysB,eAFuD,AAAA,CAAzD,CARK;AAcL;AACA;AACA;AACA;AACA;;AACAN,MAAAA,oBAAoB,CAACn/B,KAArB,IAA8BxB,SAA9B;AACA,aAAO2gC,oBAAP;AACD;AACF,GAlKD,MAkKO;AACL;AACA;AAEA,QAAInsB,cAAc,CAAChT,KAAf,GAAuB5B,iBAA3B,EAA8C;AAC5C;AACA4U,MAAAA,cAAc,CAAChT,KAAf,IAAwB,CAAC5B,iBAAzB;AACA,YAAMoiC,aAAa,GAAG5J,mBAAmB,CACvC,IAAIr2B,KAAJ,CACE,gEACE,+BAFJ,CADuC,CAAzC;AAMA,aAAO6/B,sCAAsC,CAC3Cl/B,OAD2C,EAE3C8R,cAF2C,EAG3CzG,WAH2C,EAI3Ci0B,aAJ2C,CAA7C;AAMD,KAfD,MAeO,IAAKxtB,cAAc,CAACiD,aAAhB,KAAyD,IAA7D,EAAmE;AACxE;AACA;AACAjD,MAAAA,cAAc,CAAClS,KAAf,GAAuBI,OAAO,CAACJ,KAA/B,CAHwE;AAKxE;;AACAkS,MAAAA,cAAc,CAAChT,KAAf,IAAwB7B,UAAxB;AACA,aAAO,IAAP;AACD,KARM,MAQA;AACL;AACA;AACA,YAAM2gC,mBAAmB,GAAGlhB,SAAS,CAACtP,QAAtC;AACA,YAAMywB,oBAAoB,GAAGnhB,SAAS,CAACohB,QAAvC;AACA,YAAMM,qBAAqB,GAAGgB,+CAA+C,CAC3Ep/B,OAD2E,EAE3E8R,cAF2E,EAG3E8rB,mBAH2E,EAI3EC,oBAJ2E,EAK3ExyB,WAL2E,CAA7E;AAOA,YAAM4yB,oBAA2B,GAAInsB,cAAc,CAAClS,KAApD;AACAq+B,MAAAA,oBAAoB,CAAClpB,aAArB,GAAqCmoB,2BAA2B,CAC9D7xB,WAD8D,CAAhE;AAGAyG,MAAAA,cAAc,CAACiD,aAAf,GAA+BioB,gBAA/B;AACA,aAAOoB,qBAAP;AACD;AACF;AACF;;AAED,SAASsB,2BAAT,CACEljC,KADF,EAEE6O,WAFF,EAGEuN,eAHF,EAIE;AACApc,EAAAA,KAAK,CAACgH,KAAN,GAAcyG,UAAU,CAACzN,KAAK,CAACgH,KAAP,EAAc6H,WAAd,CAAxB;AACA,QAAMzM,SAAS,GAAGpC,KAAK,CAACoC,SAAxB;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,SAAS,CAAC4E,KAAV,GAAkByG,UAAU,CAACrL,SAAS,CAAC4E,KAAX,EAAkB6H,WAAlB,CAA5B;AACD;;AACDsN,EAAAA,+BAA+B,CAACnc,KAAK,CAACuC,MAAP,EAAesM,WAAf,EAA4BuN,eAA5B,CAA/B;AACD;;AAED,SAAS+mB,8BAAT,CACE7tB,cADF,EAEE8tB,UAFF,EAGEv0B,WAHF,EAIQ;AACN;AACA;AACA;AACA,MAAI3M,IAAI,GAAGkhC,UAAX;;AACA,SAAOlhC,IAAI,KAAK,IAAhB,EAAsB;AACpB,QAAIA,IAAI,CAACjC,GAAL,KAAa9D,iBAAjB,EAAoC;AAClC,YAAM0mB,KAA2B,GAAG3gB,IAAI,CAACqW,aAAzC;;AACA,UAAIsK,KAAK,KAAK,IAAd,EAAoB;AAClBqgB,QAAAA,2BAA2B,CAAChhC,IAAD,EAAO2M,WAAP,EAAoByG,cAApB,CAA3B;AACD;AACF,KALD,MAKO,IAAIpT,IAAI,CAACjC,GAAL,KAAaxD,qBAAjB,EAAwC;AAC7C;AACA;AACA;AACA;AACA;AACAymC,MAAAA,2BAA2B,CAAChhC,IAAD,EAAO2M,WAAP,EAAoByG,cAApB,CAA3B;AACD,KAPM,MAOA,IAAIpT,IAAI,CAACkB,KAAL,KAAe,IAAnB,EAAyB;AAC9BlB,MAAAA,IAAI,CAACkB,KAAL,CAAWb,MAAX,GAAoBL,IAApB;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACkB,KAAZ;AACA;AACD;;AACD,QAAIlB,IAAI,KAAKoT,cAAb,EAA6B;AAC3B;AACD;;AACD,WAAOpT,IAAI,CAACmB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,UAAInB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgB+S,cAA5C,EAA4D;AAC1D;AACD;;AACDpT,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AACDL,IAAAA,IAAI,CAACmB,OAAL,CAAad,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,IAAAA,IAAI,GAAGA,IAAI,CAACmB,OAAZ;AACD;AACF;;AAED,SAASggC,kBAAT,CAA4BD,UAA5B,EAAoE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAI/X,GAAG,GAAG+X,UAAV;AACA,MAAIE,cAA4B,GAAG,IAAnC;;AACA,SAAOjY,GAAG,KAAK,IAAf,EAAqB;AACnB,UAAMkY,UAAU,GAAGlY,GAAG,CAACjpB,SAAvB,CADmB;;AAGnB,QAAImhC,UAAU,KAAK,IAAf,IAAuBnY,kBAAkB,CAACmY,UAAD,CAAlB,KAAmC,IAA9D,EAAoE;AAClED,MAAAA,cAAc,GAAGjY,GAAjB;AACD;;AACDA,IAAAA,GAAG,GAAGA,GAAG,CAAChoB,OAAV;AACD;;AACD,SAAOigC,cAAP;AACD;;AAqJD,SAASE,2BAAT,CACEluB,cADF,EAEEmuB,WAFF,EAGEC,IAHF,EAIEJ,cAJF,EAKEK,QALF,EAMQ;AACN,QAAMC,WAA2C,GAC/CtuB,cAAc,CAACiD,aADjB;;AAEA,MAAIqrB,WAAW,KAAK,IAApB,EAA0B;AACxBtuB,IAAAA,cAAc,CAACiD,aAAf,GAAgC;AAC9BkrB,MAAAA,WAAW,EAAEA,WADiB;AAE9BI,MAAAA,SAAS,EAAE,IAFmB;AAG9BC,MAAAA,kBAAkB,EAAE,CAHU;AAI9BC,MAAAA,IAAI,EAAET,cAJwB;AAK9BI,MAAAA,IAAI,EAAEA,IALwB;AAM9BC,MAAAA,QAAQ,EAAEA;AANoB,KAAhC;AAQD,GATD,MASO;AACL;AACAC,IAAAA,WAAW,CAACH,WAAZ,GAA0BA,WAA1B;AACAG,IAAAA,WAAW,CAACC,SAAZ,GAAwB,IAAxB;AACAD,IAAAA,WAAW,CAACE,kBAAZ,GAAiC,CAAjC;AACAF,IAAAA,WAAW,CAACG,IAAZ,GAAmBT,cAAnB;AACAM,IAAAA,WAAW,CAACF,IAAZ,GAAmBA,IAAnB;AACAE,IAAAA,WAAW,CAACD,QAAZ,GAAuBA,QAAvB;AACD;AACF;AAGD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,2BAAT,CACExgC,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACA,QAAMqR,SAAS,GAAG5K,cAAc,CAAC2O,YAAjC;AACA,QAAMqH,WAAoC,GAAGpL,SAAS,CAACoL,WAAvD;AACA,QAAMqY,QAA8B,GAAGzjB,SAAS,CAACwjB,IAAjD;AACA,QAAM1b,WAAW,GAAG9H,SAAS,CAACtP,QAA9B;AAEAqzB,AAIAhH,EAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B0S,WAA1B,EAAuCnZ,WAAvC,CAAjB;AAEA,MAAIiyB,eAAgC,GAAGxW,mBAAmB,CAAC9mB,OAA3D;AAEA,QAAM0gC,mBAAmB,GAAG3Z,kBAAkB,CAC5CuW,eAD4C,EAE3CzW,qBAF2C,CAA9C;;AAIA,MAAI6Z,mBAAJ,EAAyB;AACvBpD,IAAAA,eAAe,GAAGpW,yBAAyB,CACzCoW,eADyC,EAEzCzW,qBAFyC,CAA3C;AAIA/U,IAAAA,cAAc,CAAChT,KAAf,IAAwB7B,UAAxB;AACD,GAND,MAMO;AACL,UAAM0jC,gBAAgB,GACpB3gC,OAAO,KAAK,IAAZ,IAAoB,CAACA,OAAO,CAAClB,KAAR,GAAgB7B,UAAjB,MAAiCP,OADvD;;AAEA,QAAIikC,gBAAJ,EAAsB;AACpB;AACA;AACA;AACAhB,MAAAA,8BAA8B,CAC5B7tB,cAD4B,EAE5BA,cAAc,CAAClS,KAFa,EAG5ByL,WAH4B,CAA9B;AAKD;;AACDiyB,IAAAA,eAAe,GAAGrW,gCAAgC,CAACqW,eAAD,CAAlD;AACD;;AACDhW,EAAAA,mBAAmB,CAACxV,cAAD,EAAiBwrB,eAAjB,CAAnB;;AAEA,MAAI,CAACxrB,cAAc,CAAChK,IAAf,GAAsBlE,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD;AACA;AACAmO,IAAAA,cAAc,CAACiD,aAAf,GAA+B,IAA/B;AACD,GAJD,MAIO;AACL,YAAQ+S,WAAR;AACE,WAAK,UAAL;AAAiB;AACf,gBAAMgY,cAAc,GAAGD,kBAAkB,CAAC/tB,cAAc,CAAClS,KAAhB,CAAzC;AACA,cAAIsgC,IAAJ;;AACA,cAAIJ,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA;AACAI,YAAAA,IAAI,GAAGpuB,cAAc,CAAClS,KAAtB;AACAkS,YAAAA,cAAc,CAAClS,KAAf,GAAuB,IAAvB;AACD,WALD,MAKO;AACL;AACA;AACAsgC,YAAAA,IAAI,GAAGJ,cAAc,CAACjgC,OAAtB;AACAigC,YAAAA,cAAc,CAACjgC,OAAf,GAAyB,IAAzB;AACD;;AACDmgC,UAAAA,2BAA2B,CACzBluB,cADyB,EAEzB,KAFyB;AAGzBouB,UAAAA,IAHyB,EAIzBJ,cAJyB,EAKzBK,QALyB,CAA3B;AAOA;AACD;;AACD,WAAK,WAAL;AAAkB;AAChB;AACA;AACA;AACA;AACA,cAAID,IAAI,GAAG,IAAX;AACA,cAAIrY,GAAG,GAAG/V,cAAc,CAAClS,KAAzB;AACAkS,UAAAA,cAAc,CAAClS,KAAf,GAAuB,IAAvB;;AACA,iBAAOioB,GAAG,KAAK,IAAf,EAAqB;AACnB,kBAAMkY,UAAU,GAAGlY,GAAG,CAACjpB,SAAvB,CADmB;;AAGnB,gBAAImhC,UAAU,KAAK,IAAf,IAAuBnY,kBAAkB,CAACmY,UAAD,CAAlB,KAAmC,IAA9D,EAAoE;AAClE;AACAjuB,cAAAA,cAAc,CAAClS,KAAf,GAAuBioB,GAAvB;AACA;AACD;;AACD,kBAAM+Y,OAAO,GAAG/Y,GAAG,CAAChoB,OAApB;AACAgoB,YAAAA,GAAG,CAAChoB,OAAJ,GAAcqgC,IAAd;AACAA,YAAAA,IAAI,GAAGrY,GAAP;AACAA,YAAAA,GAAG,GAAG+Y,OAAN;AACD,WApBe;;;AAsBhBZ,UAAAA,2BAA2B,CACzBluB,cADyB,EAEzB,IAFyB;AAGzBouB,UAAAA,IAHyB,EAIzB,IAJyB;AAKzBC,UAAAA,QALyB,CAA3B;AAOA;AACD;;AACD,WAAK,UAAL;AAAiB;AACfH,UAAAA,2BAA2B,CACzBluB,cADyB,EAEzB,KAFyB;AAGzB,cAHyB;AAIzB,cAJyB;AAKzBhP,UAAAA,SALyB,CAA3B;AAOA;AACD;;AACD;AAAS;AACP;AACA;AACAgP,UAAAA,cAAc,CAACiD,aAAf,GAA+B,IAA/B;AACD;AArEH;AAuED;;AACD,SAAOjD,cAAc,CAAClS,KAAtB;AACD;;AAED,SAASihC,qBAAT,CACE7gC,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACA8a,EAAAA,iBAAiB,CAACrU,cAAD,EAAiBA,cAAc,CAAC/R,SAAf,CAAyBkO,aAA1C,CAAjB;AACA,QAAMyrB,YAAY,GAAG5nB,cAAc,CAAC2O,YAApC;;AACA,MAAIzgB,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACA;AACA8R,IAAAA,cAAc,CAAClS,KAAf,GAAuB0lB,oBAAoB,CACzCxT,cADyC,EAEzC,IAFyC,EAGzC4nB,YAHyC,EAIzCruB,WAJyC,CAA3C;AAMD,GAZD,MAYO;AACLouB,IAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B4nB,YAA1B,EAAwCruB,WAAxC,CAAjB;AACD;;AACD,SAAOyG,cAAc,CAAClS,KAAtB;AACD;;AAID,SAASkhC,qBAAT,CACE9gC,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACA,QAAM01B,YAAoC,GAAGjvB,cAAc,CAACrW,IAA5D;AACA,QAAMG,OAA0B,GAAGmlC,YAAY,CAACjlC,QAAhD;AAEA,QAAM6S,QAAQ,GAAGmD,cAAc,CAAC2O,YAAhC;AACA,QAAM/R,QAAQ,GAAGoD,cAAc,CAACmO,aAAhC;AAEA,QAAM+gB,QAAQ,GAAGryB,QAAQ,CAACxX,KAA1B;;AAkBAkhB,EAAAA,YAAY,CAACvG,cAAD,EAAiBlW,OAAjB,EAA0BolC,QAA1B,CAAZ;;AAEA,EAKO;AACL,QAAItyB,QAAQ,KAAK,IAAjB,EAAuB;AACrB,YAAMuyB,QAAQ,GAAGvyB,QAAQ,CAACvX,KAA1B;;AACA,UAAIyc,QAAE,CAACqtB,QAAD,EAAWD,QAAX,CAAN,EAA4B;AAC1B;AACA,YACEtyB,QAAQ,CAACtB,QAAT,KAAsBuB,QAAQ,CAACvB,QAA/B,IACA,CAAC8zB,iBAAuB,EAF1B,EAGE;AACA,iBAAOpH,4BAA4B,CACjC95B,OADiC,EAEjC8R,cAFiC,EAGjCzG,WAHiC,CAAnC;AAKD;AACF,OAZD,MAYO;AACL;AACA;AACAyN,QAAAA,sBAAsB,CAAChH,cAAD,EAAiBlW,OAAjB,EAA0ByP,WAA1B,CAAtB;AACD;AACF;AACF;;AAED,QAAMmZ,WAAW,GAAG7V,QAAQ,CAACvB,QAA7B;AACAqsB,EAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B0S,WAA1B,EAAuCnZ,WAAvC,CAAjB;AACA,SAAOyG,cAAc,CAAClS,KAAtB;AACD;;AAID,SAASuhC,qBAAT,CACEnhC,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACA,MAAIzP,OAA0B,GAAGkW,cAAc,CAACrW,IAAhD,CADA;AAGA;AAwBA,QAAMkT,QAAQ,GAAGmD,cAAc,CAAC2O,YAAhC;AACA,QAAM1kB,MAAM,GAAG4S,QAAQ,CAACvB,QAAxB;;AAaA0M,EAAAA,oBAAoB,CAAChI,cAAD,EAAiBzG,WAAjB,CAApB;AACA,QAAM21B,QAAQ,GAAGhnB,WAAW,CAACpe,OAAD,CAA5B;;AAIA,MAAI4oB,WAAJ;;AACA,EAKO;AACLA,IAAAA,WAAW,GAAGzoB,MAAM,CAACilC,QAAD,CAApB;AACD;;;AAMDlvB,EAAAA,cAAc,CAAChT,KAAf,IAAwBnC,aAAxB;AACA88B,EAAAA,iBAAiB,CAACz5B,OAAD,EAAU8R,cAAV,EAA0B0S,WAA1B,EAAuCnZ,WAAvC,CAAjB;AACA,SAAOyG,cAAc,CAAClS,KAAtB;AACD;;AAUD,AAAO,SAASma,gCAAT,GAA4C;AACjDyf,EAAAA,gBAAgB,GAAG,IAAnB;AACD;AAED;AAIA,SAASqC,wCAAT,CAAkD77B,OAAlD,EAA2D8R,cAA3D,EAA2E;AACzE,MAAI,CAACA,cAAc,CAAChK,IAAf,GAAsBlE,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD,QAAI3D,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA;AACA;AACA;AACAA,MAAAA,OAAO,CAACpB,SAAR,GAAoB,IAApB;AACAkT,MAAAA,cAAc,CAAClT,SAAf,GAA2B,IAA3B,CANoB;;AAQpBkT,MAAAA,cAAc,CAAChT,KAAf,IAAwBlC,SAAxB;AACD;AACF;AACF;;AAED,SAASk9B,4BAAT,CACE95B,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIgB;AACd,MAAIrL,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA8R,IAAAA,cAAc,CAACoH,YAAf,GAA8BlZ,OAAO,CAACkZ,YAAtC;AACD;;AAODqE,EAAAA,sBAAsB,CAACzL,cAAc,CAACtO,KAAhB,CAAtB,CAXc;;AAcd,MAAI,CAACsG,gBAAgB,CAACuB,WAAD,EAAcyG,cAAc,CAAC+G,UAA7B,CAArB,EAA+D;AAC7D;AACA;AACA;AAEA,IAOO;AACL,aAAO,IAAP;AACD;AACF,GA7Ba;AAgCd;;;AACA4M,EAAAA,gBAAgB,CAACzlB,OAAD,EAAU8R,cAAV,CAAhB;AACA,SAAOA,cAAc,CAAClS,KAAtB;AACD;;AAkED,SAAS06B,6BAAT,CACEt6B,OADF,EAEEqL,WAFF,EAGW;AACT;AACA;AACA,QAAM+1B,WAAW,GAAGphC,OAAO,CAACwD,KAA5B;;AACA,MAAIsG,gBAAgB,CAACs3B,WAAD,EAAc/1B,WAAd,CAApB,EAAgD;AAC9C,WAAO,IAAP;AACD,GANQ;AAQT;AAOA,SAAO,KAAP;AACD;;AAED,SAASg2B,sCAAT,CACErhC,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACA;AACA;AACA;AACA,UAAQyG,cAAc,CAACrV,GAAvB;AACE,SAAKxE,QAAL;AACEgkC,MAAAA,mBAAmB,CAACnqB,cAAD,CAAnB;AACA,YAAM7P,IAAe,GAAG6P,cAAc,CAAC/R,SAAvC;AACAs8B;AAEA,MAAiB;AACf,cAAM5S,KAAY,GAAGzpB,OAAO,CAAC+U,aAAR,CAAsB0U,KAA3C;AACAM,QAAAA,iBAAiB,CAACjY,cAAD,EAAiB2X,KAAjB,CAAjB;AACD;AAED;;AACF,SAAKtxB,aAAL;AACEquB,MAAAA,eAAe,CAAC1U,cAAD,CAAf;AACA;;AACF,SAAK/Z,cAAL;AAAqB;AACnB,cAAMga,SAAS,GAAGD,cAAc,CAACrW,IAAjC;;AACA,YAAIkgC,iBAAuB,CAAC5pB,SAAD,CAA3B,EAAwC;AACtC6pB,UAAAA,mBAAyB,CAAC9pB,cAAD,CAAzB;AACD;;AACD;AACD;;AACD,SAAK5Z,UAAL;AACEiuB,MAAAA,iBAAiB,CAACrU,cAAD,EAAiBA,cAAc,CAAC/R,SAAf,CAAyBkO,aAA1C,CAAjB;AACA;;AACF,SAAKzV,eAAL;AAAsB;AACpB,cAAMwoC,QAAQ,GAAGlvB,cAAc,CAACmO,aAAf,CAA6B9oB,KAA9C;AACA,cAAMyE,OAA0B,GAAGkW,cAAc,CAACrW,IAAf,CAAoBK,QAAvD;AACAuc,QAAAA,YAAY,CAACvG,cAAD,EAAiBlW,OAAjB,EAA0BolC,QAA1B,CAAZ;AACA;AACD;;AACD,SAAKtoC,QAAL;AACE;AAkBA;;AACF,SAAKC,iBAAL;AAAwB;AACtB,cAAM0mB,KAA2B,GAAGvN,cAAc,CAACiD,aAAnD;;AACA,YAAIsK,KAAK,KAAK,IAAd,EAAoB;AAClB,cAAIA,KAAK,CAACsI,UAAN,KAAqB,IAAzB,EAA+B;AAC7BL,YAAAA,mBAAmB,CACjBxV,cADiB,EAEjBmV,gCAAgC,CAACH,mBAAmB,CAAC9mB,OAArB,CAFf,CAAnB,CAD6B;AAM7B;AACA;;AACA8R,YAAAA,cAAc,CAAChT,KAAf,IAAwB7B,UAAxB,CAR6B;AAU7B;;AACA,mBAAO,IAAP;AACD,WAbiB;AAgBlB;AACA;AACA;;;AACA,gBAAMghC,oBAA2B,GAAInsB,cAAc,CAAClS,KAApD;AACA,gBAAM0hC,iBAAiB,GAAGrD,oBAAoB,CAACplB,UAA/C;;AACA,cAAI/O,gBAAgB,CAACuB,WAAD,EAAci2B,iBAAd,CAApB,EAAsD;AACpD;AACA;AACA,mBAAO7D,uBAAuB,CAACz9B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAA9B;AACD,WAJD,MAIO;AACL;AACA;AACAic,YAAAA,mBAAmB,CACjBxV,cADiB,EAEjBmV,gCAAgC,CAACH,mBAAmB,CAAC9mB,OAArB,CAFf,CAAnB,CAHK;AAQL;;AACA,kBAAMJ,KAAK,GAAGk6B,4BAA4B,CACxC95B,OADwC,EAExC8R,cAFwC,EAGxCzG,WAHwC,CAA1C;;AAKA,gBAAIzL,KAAK,KAAK,IAAd,EAAoB;AAClB;AACA;AACA,qBAAOA,KAAK,CAACC,OAAb;AACD,aAJD,MAIO;AACL;AACA;AACA;AACA,qBAAO,IAAP;AACD;AACF;AACF,SAlDD,MAkDO;AACLynB,UAAAA,mBAAmB,CACjBxV,cADiB,EAEjBmV,gCAAgC,CAACH,mBAAmB,CAAC9mB,OAArB,CAFf,CAAnB;AAID;;AACD;AACD;;AACD,SAAK/G,qBAAL;AAA4B;AAC1B,cAAM0nC,gBAAgB,GAAG,CAAC3gC,OAAO,CAAClB,KAAR,GAAgB7B,UAAjB,MAAiCP,OAA1D;AAEA,YAAI6kC,YAAY,GAAGz3B,gBAAgB,CACjCuB,WADiC,EAEjCyG,cAAc,CAAC+G,UAFkB,CAAnC;;AAqBA,YAAI8nB,gBAAJ,EAAsB;AACpB,cAAIY,YAAJ,EAAkB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAOf,2BAA2B,CAChCxgC,OADgC,EAEhC8R,cAFgC,EAGhCzG,WAHgC,CAAlC;AAKD,WAZmB;AAcpB;AACA;;;AACAyG,UAAAA,cAAc,CAAChT,KAAf,IAAwB7B,UAAxB;AACD,SAzCyB;AA4C1B;AACA;;;AACA,cAAMmjC,WAAW,GAAGtuB,cAAc,CAACiD,aAAnC;;AACA,YAAIqrB,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACAA,UAAAA,WAAW,CAACC,SAAZ,GAAwB,IAAxB;AACAD,UAAAA,WAAW,CAACF,IAAZ,GAAmB,IAAnB;AACAE,UAAAA,WAAW,CAACpU,UAAZ,GAAyB,IAAzB;AACD;;AACD1E,QAAAA,mBAAmB,CAACxV,cAAD,EAAiBgV,mBAAmB,CAAC9mB,OAArC,CAAnB;;AAEA,YAAIuhC,YAAJ,EAAkB;AAChB;AACD,SAFD,MAEO;AACL;AACA;AACA;AACA,iBAAO,IAAP;AACD;AACF;;AACD,SAAKpoC,kBAAL;AACA,SAAKC,qBAAL;AAA4B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA0Y,QAAAA,cAAc,CAACtO,KAAf,GAAuBe,OAAvB;AACA,eAAOk2B,wBAAwB,CAACz6B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAA/B;AACD;;AACD,SAAKhS,cAAL;AAAqB;AACnB,QAAiB;AACf,gBAAMowB,KAAY,GAAGzpB,OAAO,CAAC+U,aAAR,CAAsB0U,KAA3C;AACAM,UAAAA,iBAAiB,CAACjY,cAAD,EAAiB2X,KAAjB,CAAjB;AACD;;AACD;AACD;AAnMH;;AAqMA,SAAOqQ,4BAA4B,CAAC95B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAAnC;AACD;;AAED,SAASm2B,SAAT,CACExhC,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIgB;AACd;AAkBA,MAAIrL,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAM0O,QAAQ,GAAG1O,OAAO,CAACigB,aAAzB;AACA,UAAMtR,QAAQ,GAAGmD,cAAc,CAAC2O,YAAhC;;AAEA,QACE/R,QAAQ,KAAKC,QAAb,IACAuyB,iBAAuB,EADvB;AAGC5pB,IAAAA,CAAiD,KAHlD,CADF,EAKE;AACA;AACA;AACAkiB,MAAAA,gBAAgB,GAAG,IAAnB;AACD,KATD,MASO;AACL;AACA;AACA,YAAMa,2BAA2B,GAAGC,6BAA6B,CAC/Dt6B,OAD+D,EAE/DqL,WAF+D,CAAjE;;AAIA,UACE,CAACgvB,2BAAD;AAEA;AACA,OAACvoB,cAAc,CAAChT,KAAf,GAAuB7B,UAAxB,MAAwCP,OAJ1C,EAKE;AACA;AACA88B,QAAAA,gBAAgB,GAAG,KAAnB;AACA,eAAO6H,sCAAsC,CAC3CrhC,OAD2C,EAE3C8R,cAF2C,EAG3CzG,WAH2C,CAA7C;AAKD;;AACD,UAAI,CAACrL,OAAO,CAAClB,KAAR,GAAgBjB,4BAAjB,MAAmDnB,OAAvD,EAAgE;AAC9D;AACA;AACA88B,QAAAA,gBAAgB,GAAG,IAAnB;AACD,OAJD,MAIO;AACL;AACA;AACA;AACA;AACAA,QAAAA,gBAAgB,GAAG,KAAnB;AACD;AACF;AACF,GA9CD,MA8CO;AACLA,IAAAA,gBAAgB,GAAG,KAAnB;AAgBD,GAlFa;AAqFd;AACA;AACA;AACA;;;AACA1nB,EAAAA,cAAc,CAACtO,KAAf,GAAuBe,OAAvB;;AAEA,UAAQuN,cAAc,CAACrV,GAAvB;AACE,SAAKzE,sBAAL;AAA6B;AAC3B,eAAO+kC,2BAA2B,CAChC/8B,OADgC,EAEhC8R,cAFgC,EAGhCA,cAAc,CAACrW,IAHiB,EAIhC4P,WAJgC,CAAlC;AAMD;;AACD,SAAKvS,aAAL;AAAoB;AAClB,cAAMynB,WAAW,GAAGzO,cAAc,CAACyO,WAAnC;AACA,eAAOic,kBAAkB,CACvBx8B,OADuB,EAEvB8R,cAFuB,EAGvByO,WAHuB,EAIvBlV,WAJuB,CAAzB;AAMD;;AACD,SAAKvT,iBAAL;AAAwB;AACtB,cAAMia,SAAS,GAAGD,cAAc,CAACrW,IAAjC;AACA,cAAMgmC,eAAe,GAAG3vB,cAAc,CAAC2O,YAAvC;AACA,cAAMmc,aAAa,GACjB9qB,cAAc,CAACyO,WAAf,KAA+BxO,SAA/B,GACI0vB,eADJ,GAEI7pB,mBAAmB,CAAC7F,SAAD,EAAY0vB,eAAZ,CAHzB;AAIA,eAAOjH,uBAAuB,CAC5Bx6B,OAD4B,EAE5B8R,cAF4B,EAG5BC,SAH4B,EAI5B6qB,aAJ4B,EAK5BvxB,WAL4B,CAA9B;AAOD;;AACD,SAAKtT,cAAL;AAAqB;AACnB,cAAMga,SAAS,GAAGD,cAAc,CAACrW,IAAjC;AACA,cAAMgmC,eAAe,GAAG3vB,cAAc,CAAC2O,YAAvC;AACA,cAAMmc,aAAa,GACjB9qB,cAAc,CAACyO,WAAf,KAA+BxO,SAA/B,GACI0vB,eADJ,GAEI7pB,mBAAmB,CAAC7F,SAAD,EAAY0vB,eAAZ,CAHzB;AAIA,eAAOhG,oBAAoB,CACzBz7B,OADyB,EAEzB8R,cAFyB,EAGzBC,SAHyB,EAIzB6qB,aAJyB,EAKzBvxB,WALyB,CAA3B;AAOD;;AACD,SAAKpT,QAAL;AACE,aAAOkkC,cAAc,CAACn8B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAArB;;AACF,SAAKlT,aAAL;AACE,aAAOmkC,mBAAmB,CAACt8B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAA1B;;AACF,SAAKjT,QAAL;AACE,aAAOmkC,cAAc,CAACv8B,AAAD,CAArB;;AACF,SAAKrH,iBAAL;AACE,aAAO8kC,uBAAuB,CAACz9B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAA9B;;AACF,SAAKnT,UAAL;AACE,aAAO2oC,qBAAqB,CAAC7gC,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAA5B;;AACF,SAAK5S,UAAL;AAAiB;AACf,cAAMgD,IAAI,GAAGqW,cAAc,CAACrW,IAA5B;AACA,cAAMgmC,eAAe,GAAG3vB,cAAc,CAAC2O,YAAvC;AACA,cAAMmc,aAAa,GACjB9qB,cAAc,CAACyO,WAAf,KAA+B9kB,IAA/B,GACIgmC,eADJ,GAEI7pB,mBAAmB,CAACnc,IAAD,EAAOgmC,eAAP,CAHzB;AAIA,eAAO7H,gBAAgB,CACrB55B,OADqB,EAErB8R,cAFqB,EAGrBrW,IAHqB,EAIrBmhC,aAJqB,EAKrBvxB,WALqB,CAAvB;AAOD;;AACD,SAAKhT,QAAL;AACE,aAAOorB,cAAc,CAACzjB,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAArB;;AACF,SAAK/S,IAAL;AACE,aAAOgjC,UAAU,CAACt7B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAAjB;;AACF,SAAK3S,QAAL;AACE,aAAO6iC,cAAc,CAACv7B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAArB;;AACF,SAAK7S,eAAL;AACE,aAAOsoC,qBAAqB,CAAC9gC,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAA5B;;AACF,SAAK9S,eAAL;AACE,aAAO4oC,qBAAqB,CAACnhC,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAA5B;;AACF,SAAKzS,aAAL;AAAoB;AAClB,cAAM6C,IAAI,GAAGqW,cAAc,CAACrW,IAA5B;AACA,cAAMgmC,eAAe,GAAG3vB,cAAc,CAAC2O,YAAvC,CAFkB;;AAIlB,YAAImc,aAAa,GAAGhlB,mBAAmB,CAACnc,IAAD,EAAOgmC,eAAP,CAAvC;;AAcA7E,QAAAA,aAAa,GAAGhlB,mBAAmB,CAACnc,IAAI,CAACA,IAAN,EAAYmhC,aAAZ,CAAnC;AACA,eAAO7C,mBAAmB,CACxB/5B,OADwB,EAExB8R,cAFwB,EAGxBrW,IAHwB,EAIxBmhC,aAJwB,EAKxBvxB,WALwB,CAA1B;AAOD;;AACD,SAAKxS,mBAAL;AAA0B;AACxB,eAAOshC,yBAAyB,CAC9Bn6B,OAD8B,EAE9B8R,cAF8B,EAG9BA,cAAc,CAACrW,IAHe,EAI9BqW,cAAc,CAAC2O,YAJe,EAK9BpV,WAL8B,CAAhC;AAOD;;AACD,SAAKtS,wBAAL;AAA+B;AAC7B,cAAMgZ,SAAS,GAAGD,cAAc,CAACrW,IAAjC;AACA,cAAMgmC,eAAe,GAAG3vB,cAAc,CAAC2O,YAAvC;AACA,cAAMmc,aAAa,GACjB9qB,cAAc,CAACyO,WAAf,KAA+BxO,SAA/B,GACI0vB,eADJ,GAEI7pB,mBAAmB,CAAC7F,SAAD,EAAY0vB,eAAZ,CAHzB;AAIA,eAAO3E,6BAA6B,CAClC98B,OADkC,EAElC8R,cAFkC,EAGlCC,SAHkC,EAIlC6qB,aAJkC,EAKlCvxB,WALkC,CAApC;AAOD;;AACD,SAAKpS,qBAAL;AAA4B;AAC1B,eAAOunC,2BAA2B,CAACxgC,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAAlC;AACD;;AACD,SAAKnS,cAAL;AAAqB;AACnB;AAGA;AACD;;AACD,SAAKC,kBAAL;AAAyB;AACvB,eAAOshC,wBAAwB,CAACz6B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAA/B;AACD;;AACD,SAAKjS,qBAAL;AAA4B;AAC1B;AAOA;AACD;;AACD,SAAKC,cAAL;AAAqB;AACnB,QAAiB;AACf,iBAAO6hC,oBAAoB,CAACl7B,OAAD,EAAU8R,cAAV,EAA0BzG,WAA1B,CAA3B;AACD;AAEF;AAjKH;;AA8KA,QAAM,IAAIhM,KAAJ,CACJ,+BAA6ByS,cAAc,CAACrV,GAA5C,mDACE,8BAFE,CAAN;AAID;;AC7sHD,SAASilC,UAAT,CAAoB5vB,cAApB,EAA2C;AACzC;AACA;AACAA,EAAAA,cAAc,CAAChT,KAAf,IAAwBjC,MAAxB;AACD;;AAED,SAAS2+B,SAAT,CAAiB1pB,cAAjB,EAAwC;AACtCA,EAAAA,cAAc,CAAChT,KAAf,IAAwB3B,GAAxB;AAID;;AA2BD,IAAIwkC,iBAAJ;AACA,IAAIC,mBAAJ;AACA,IAAItF,qBAAJ;AACA,IAAIC,gBAAJ;;AACA,AAAsB;AACpB;AAEAoF,EAAAA,iBAAiB,GAAG,UAClBzhC,MADkB,EAElB4R,cAFkB,EAGlB+vB,qBAHkB,EAIlBvzB,QAJkB,EAKlB;AACA;AACA;AACA,QAAI5P,IAAI,GAAGoT,cAAc,CAAClS,KAA1B;;AACA,WAAOlB,IAAI,KAAK,IAAhB,EAAsB;AACpB,UAAIA,IAAI,CAACjC,GAAL,KAAatE,aAAb,IAA8BuG,IAAI,CAACjC,GAAL,KAAarE,QAA/C,EAAyD;AACvDmW,QAAAA,kBAAkB,CAACrO,MAAD,EAASxB,IAAI,CAACqB,SAAd,CAAlB;AACD,OAFD,MAEO,IAAIrB,IAAI,CAACjC,GAAL,KAAavE,UAAjB,EAA6B,CAA7B,MAIA,IAAIwG,IAAI,CAACkB,KAAL,KAAe,IAAnB,EAAyB;AAC9BlB,QAAAA,IAAI,CAACkB,KAAL,CAAWb,MAAX,GAAoBL,IAApB;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAACkB,KAAZ;AACA;AACD;;AACD,UAAIlB,IAAI,KAAKoT,cAAb,EAA6B;AAC3B;AACD;;AACD,aAAOpT,IAAI,CAACmB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,YAAInB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgB+S,cAA5C,EAA4D;AAC1D;AACD;;AACDpT,QAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AACDL,MAAAA,IAAI,CAACmB,OAAL,CAAad,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,MAAAA,IAAI,GAAGA,IAAI,CAACmB,OAAZ;AACD;AACF,GAjCD;;AAmCA+hC,EAAAA,mBAAmB,GAAG,UAAS5hC,OAAT,EAAgC8R,cAAhC,EAAuD;AAE5E,GAFD;;AAGAwqB,EAAAA,qBAAmB,GAAG,UACpBt8B,OADoB,EAEpB8R,cAFoB,EAGpBrW,IAHoB,EAIpBkT,QAJoB,EAKpB5B,qBALoB,EAMpB;AACA;AACA;AACA,UAAM2B,QAAQ,GAAG1O,OAAO,CAACigB,aAAzB;;AACA,QAAIvR,QAAQ,KAAKC,QAAjB,EAA2B;AACzB;AACA;AACA;AACD,KARD;AAWA;AACA;AACA;;;AACA,UAAMW,QAAkB,GAAGwC,cAAc,CAAC/R,SAA1C;AACA,UAAM+hC,kBAAkB,GAAGvb,cAAc,EAAzC,CAfA;AAiBA;AACA;;AACA,UAAMhX,aAAa,GAAGf,aAAa,CACjCc,AADiC,CAAnC,CAnBA;;AA4BAwC,IAAAA,cAAc,CAAC0H,WAAf,GAA8BjK,aAA9B,CA5BA;AA8BA;;AACA,QAAIA,aAAJ,EAAmB;AACjBmyB,MAAAA,UAAU,CAAC5vB,cAAD,CAAV;AACD;AACF,GAxCD;;AAyCAyqB,EAAAA,gBAAc,GAAG,UACfv8B,OADe,EAEf8R,cAFe,EAGfpC,OAHe,EAIfC,OAJe,EAKf;AACA;AACA,QAAID,OAAO,KAAKC,OAAhB,EAAyB;AACvB+xB,MAAAA,UAAU,CAAC5vB,cAAD,CAAV;AACD;AACF,GAVD;AAWD,CA7FD;;AAwWA,SAASiwB,kBAAT,CACE3B,WADF,EAEE4B,wBAFF,EAGE;AACA;AAKA,UAAQ5B,WAAW,CAACD,QAApB;AACE,SAAK,QAAL;AAAe;AACb;AACA;AACA;AACA;AACA;AACA,YAAI8B,QAAQ,GAAG7B,WAAW,CAACF,IAA3B;AACA,YAAIgC,YAAY,GAAG,IAAnB;;AACA,eAAOD,QAAQ,KAAK,IAApB,EAA0B;AACxB,cAAIA,QAAQ,CAACrjC,SAAT,KAAuB,IAA3B,EAAiC;AAC/BsjC,YAAAA,YAAY,GAAGD,QAAf;AACD;;AACDA,UAAAA,QAAQ,GAAGA,QAAQ,CAACpiC,OAApB;AACD,SAbY;AAeb;;;AACA,YAAIqiC,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA9B,UAAAA,WAAW,CAACF,IAAZ,GAAmB,IAAnB;AACD,SAHD,MAGO;AACL;AACA;AACAgC,UAAAA,YAAY,CAACriC,OAAb,GAAuB,IAAvB;AACD;;AACD;AACD;;AACD,SAAK,WAAL;AAAkB;AAChB;AACA;AACA;AACA;AACA;AACA,YAAIoiC,QAAQ,GAAG7B,WAAW,CAACF,IAA3B;AACA,YAAIgC,YAAY,GAAG,IAAnB;;AACA,eAAOD,QAAQ,KAAK,IAApB,EAA0B;AACxB,cAAIA,QAAQ,CAACrjC,SAAT,KAAuB,IAA3B,EAAiC;AAC/BsjC,YAAAA,YAAY,GAAGD,QAAf;AACD;;AACDA,UAAAA,QAAQ,GAAGA,QAAQ,CAACpiC,OAApB;AACD,SAbe;AAehB;;;AACA,YAAIqiC,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA,cAAI,CAACF,wBAAD,IAA6B5B,WAAW,CAACF,IAAZ,KAAqB,IAAtD,EAA4D;AAC1D;AACA;AACAE,YAAAA,WAAW,CAACF,IAAZ,CAAiBrgC,OAAjB,GAA2B,IAA3B;AACD,WAJD,MAIO;AACLugC,YAAAA,WAAW,CAACF,IAAZ,GAAmB,IAAnB;AACD;AACF,SATD,MASO;AACL;AACA;AACAgC,UAAAA,YAAY,CAACriC,OAAb,GAAuB,IAAvB;AACD;;AACD;AACD;AA1DH;AA4DD;;AAED,SAASsiC,gBAAT,CAA0BC,aAA1B,EAAgD;AAC9C,QAAMC,UAAU,GACdD,aAAa,CAACxjC,SAAd,KAA4B,IAA5B,IACAwjC,aAAa,CAACxjC,SAAd,CAAwBgB,KAAxB,KAAkCwiC,aAAa,CAACxiC,KAFlD;AAIA,MAAI0iC,aAAa,GAAG/9B,OAApB;AACA,MAAI06B,YAAY,GAAGviC,OAAnB;;AAEA,MAAI,CAAC2lC,UAAL,EAAiB;AACf;AACA,IA+BO;AACL,UAAIziC,KAAK,GAAGwiC,aAAa,CAACxiC,KAA1B;;AACA,aAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrB0iC,QAAAA,aAAa,GAAGr4B,UAAU,CACxBq4B,aADwB,EAExBr4B,UAAU,CAACrK,KAAK,CAAC4D,KAAP,EAAc5D,KAAK,CAACiZ,UAApB,CAFc,CAA1B;AAKAomB,QAAAA,YAAY,IAAIr/B,KAAK,CAACq/B,YAAtB;AACAA,QAAAA,YAAY,IAAIr/B,KAAK,CAACd,KAAtB,CAPqB;AAUrB;AACA;;AACAc,QAAAA,KAAK,CAACb,MAAN,GAAeqjC,aAAf;AAEAxiC,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;AACF;;AAEDuiC,IAAAA,aAAa,CAACnD,YAAd,IAA8BA,YAA9B;AACD,GAtDD,MAsDO;AACL;AACA,IAwBO;AACL,UAAIr/B,KAAK,GAAGwiC,aAAa,CAACxiC,KAA1B;;AACA,aAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrB0iC,QAAAA,aAAa,GAAGr4B,UAAU,CACxBq4B,aADwB,EAExBr4B,UAAU,CAACrK,KAAK,CAAC4D,KAAP,EAAc5D,KAAK,CAACiZ,UAApB,CAFc,CAA1B,CADqB;AAOrB;AACA;AACA;;AACAomB,QAAAA,YAAY,IAAIr/B,KAAK,CAACq/B,YAAN,GAAqB1gC,UAArC;AACA0gC,QAAAA,YAAY,IAAIr/B,KAAK,CAACd,KAAN,GAAcP,UAA9B,CAXqB;AAcrB;AACA;;AACAqB,QAAAA,KAAK,CAACb,MAAN,GAAeqjC,aAAf;AAEAxiC,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;AACF;;AAEDuiC,IAAAA,aAAa,CAACnD,YAAd,IAA8BA,YAA9B;AACD;;AAEDmD,EAAAA,aAAa,CAACvpB,UAAd,GAA2BypB,aAA3B;AAEA,SAAOD,UAAP;AACD;;AAED,SAASE,kCAAT,CACEviC,OADF,EAEE8R,cAFF,EAGE6K,SAHF,EAIW;AACT;AAYA,QAAM6lB,WAAW,GAAGpsB,iBAAiB,CAACtE,AAAD,CAArC;;AAEA,MAAI6K,SAAS,KAAK,IAAd,IAAsBA,SAAS,CAACgL,UAAV,KAAyB,IAAnD,EAAyD;AACvD;AACA;AACA,QAAI3nB,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAI,CAACwiC,WAAL,EAAkB;AAChB,cAAM,IAAInjC,KAAJ,CACJ,4EACE,kCAFE,CAAN;AAID;;AACD8W,MAAAA,oCAAoC,CAACrE,AAAD,CAApC;AACAqwB,MAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;;AAcA,aAAO,KAAP;AACD,KAvBD,MAuBO;AACL;AAGA,UAAI,CAACA,cAAc,CAAChT,KAAf,GAAuB7B,UAAxB,MAAwCP,OAA5C,EAAqD;AACnD;AACAoV,QAAAA,cAAc,CAACiD,aAAf,GAA+B,IAA/B;AACD,OAPI;AASL;AACA;AACA;AACA;;;AACAjD,MAAAA,cAAc,CAAChT,KAAf,IAAwBjC,MAAxB;AACAslC,MAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;;AAcA,aAAO,KAAP;AACD;AACF,GAxDD,MAwDO;AACL;AACA;AACA;AACA;AACAuE,IAAAA,mCAAmC,GAL9B;;AAQL,WAAO,IAAP;AACD;AACF;;AAED,SAASosB,YAAT,CACEziC,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIgB;AACd,QAAMsD,QAAQ,GAAGmD,cAAc,CAAC2O,YAAhC,CADc;AAGd;AACA;AACA;;AACA/K,EAAAA,cAAc,CAAC5D,cAAD,CAAd;;AACA,UAAQA,cAAc,CAACrV,GAAvB;AACE,SAAKzE,sBAAL;AACA,SAAKc,aAAL;AACA,SAAKD,mBAAL;AACA,SAAKf,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKJ,QAAL;AACA,SAAKC,IAAL;AACA,SAAKI,QAAL;AACA,SAAKH,eAAL;AACA,SAAKK,aAAL;AACEupC,MAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACA,aAAO,IAAP;;AACF,SAAK/Z,cAAL;AAAqB;AACnB,cAAMga,SAAS,GAAGD,cAAc,CAACrW,IAAjC;;AACA,YAAIkgC,iBAAuB,CAAC5pB,SAAD,CAA3B,EAAwC;AACtC2wB,UAAAA,UAAgB,CAAC5wB,AAAD,CAAhB;AACD;;AACDqwB,QAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACA,eAAO,IAAP;AACD;;AACD,SAAK7Z,QAAL;AAAe;AACb,cAAM0qC,SAAS,GAAI7wB,cAAc,CAAC/R,SAAlC;;AAYA,QAAiB;AACf,cAAI6iC,aAA2B,GAAG,IAAlC;;AACA,cAAI5iC,OAAO,KAAK,IAAhB,EAAsB;AACpB4iC,YAAAA,aAAa,GAAG5iC,OAAO,CAAC+U,aAAR,CAAsB0U,KAAtC;AACD;;AACD,gBAAMA,KAAY,GAAG3X,cAAc,CAACiD,aAAf,CAA6B0U,KAAlD;;AACA,cAAIA,KAAK,KAAKmZ,aAAd,EAA6B;AAC3B;AACA9wB,YAAAA,cAAc,CAAChT,KAAf,IAAwBzB,OAAxB;AACD;;AACD2sB,UAAAA,gBAAgB,CAAClY,AAAD,CAAhB;AACD;AAEDwU,QAAAA,gBAAgB,CAACxU,AAAD,CAAhB;AACA+wB,QAAAA,wBAA8B,CAAC/wB,AAAD,CAA9B;AACAgxB,QAAAA,2BAAwC;;AACxC,YAAIH,SAAS,CAACzG,cAAd,EAA8B;AAC5ByG,UAAAA,SAAS,CAAC/mC,OAAV,GAAoB+mC,SAAS,CAACzG,cAA9B;AACAyG,UAAAA,SAAS,CAACzG,cAAV,GAA2B,IAA3B;AACD;;AACD,YAAIl8B,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACJ,KAAR,KAAkB,IAA1C,EAAgD;AAC9C;AACA;AACA,gBAAM4iC,WAAW,GAAGpsB,iBAAiB,CAACtE,AAAD,CAArC;;AACA,cAAI0wB,WAAJ,EAAiB;AACf;AACA;AACAd,YAAAA,UAAU,CAAC5vB,cAAD,CAAV;AACD,WAJD,MAIO;AACL,gBAAI9R,OAAO,KAAK,IAAhB,EAAsB;AACpB,oBAAMyc,SAAoB,GAAGzc,OAAO,CAAC+U,aAArC;;AACA;AAEE,eAAC0H,SAAS,CAACzH,YAAX;AAEA,eAAClD,cAAc,CAAChT,KAAf,GAAuB5B,iBAAxB,MAA+CR,OAJjD,EAKE;AACA;AACA;AACA;AACA;AACA;AACA;AACAoV,gBAAAA,cAAc,CAAChT,KAAf,IAAwB1B,QAAxB,CAPA;AAUA;AACA;;AACAiZ,gBAAAA,mCAAmC;AACpC;AACF;AACF;AACF;;AACDurB,QAAAA,mBAAmB,CAAC5hC,OAAD,EAAU8R,cAAV,CAAnB;AACAqwB,QAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;;AASA,eAAO,IAAP;AACD;;AACD,SAAK3Z,aAAL;AAAoB;AAClBsuB,QAAAA,cAAc,CAAC3U,cAAD,CAAd;AACA,cAAM/E,qBAAqB,GAAGkZ,oBAAoB,EAAlD;AACA,cAAMxqB,IAAI,GAAGqW,cAAc,CAACrW,IAA5B;;AACA,YAAIuE,OAAO,KAAK,IAAZ,IAAoB8R,cAAc,CAAC/R,SAAf,IAA4B,IAApD,EAA0D;AACxDu8B,UAAAA,qBAAmB,CACjBt8B,OADiB,EAEjB8R,cAFiB,EAGjBrW,IAHiB,EAIjBkT,QAJiB,EAKjB5B,qBALiB,CAAnB;;AAQA,cAAI/M,OAAO,CAACkhB,GAAR,KAAgBpP,cAAc,CAACoP,GAAnC,EAAwC;AACtCsa,YAAAA,SAAO,CAAC1pB,cAAD,CAAP;AACD;AACF,SAZD,MAYO;AACL,cAAI,CAACnD,QAAL,EAAe;AACb,gBAAImD,cAAc,CAAC/R,SAAf,KAA6B,IAAjC,EAAuC;AACrC,oBAAM,IAAIV,KAAJ,CACJ,iEACE,iDAFE,CAAN;AAID,aANY;;;AASb8iC,YAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACA,mBAAO,IAAP;AACD;;AAED,gBAAMgwB,kBAAkB,GAAGvb,cAAc,EAAzC,CAdK;AAgBL;AACA;AACA;;AACA,gBAAMic,WAAW,GAAGpsB,iBAAiB,CAACtE,AAAD,CAArC;;AACA,cAAI0wB,WAAJ,EAAiB;AACf;AACA;AACA,gBACExsB,4BAA4B,CAC1BlE,AAD0B,CAD9B,EAME;AACA;AACA;AACA4vB,cAAAA,UAAU,CAAC5vB,cAAD,CAAV;AACD;AACF,WAdD,MAcO;AACL,kBAAMxC,QAAQ,GAAGnB,cAAc,CAC7B1S,IAD6B,EAE7BkT,QAF6B,EAG7B5B,qBAH6B,EAI7B+0B,kBAJ6B,EAK7BhwB,cAL6B,CAA/B;AAQA6vB,YAAAA,iBAAiB,CAACryB,QAAD,EAAWwC,cAAX,EAA2B,KAA3B,EAAkC,KAAlC,CAAjB;AAEAA,YAAAA,cAAc,CAAC/R,SAAf,GAA2BuP,QAA3B,CAXK;AAcL,AAaD;;AAED,cAAIwC,cAAc,CAACoP,GAAf,KAAuB,IAA3B,EAAiC;AAC/B;AACAsa,YAAAA,SAAO,CAAC1pB,cAAD,CAAP;AACD;AACF;;AACDqwB,QAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACA,eAAO,IAAP;AACD;;AACD,SAAK1Z,QAAL;AAAe;AACb,cAAMuX,OAAO,GAAGhB,QAAhB;;AACA,YAAI3O,OAAO,IAAI8R,cAAc,CAAC/R,SAAf,IAA4B,IAA3C,EAAiD;AAC/C,gBAAM2P,OAAO,GAAG1P,OAAO,CAACigB,aAAxB,CAD+C;AAG/C;;AACAsc,UAAAA,gBAAc,CAACv8B,OAAD,EAAU8R,cAAV,EAA0BpC,OAA1B,EAAmCC,OAAnC,CAAd;AACD,SALD,MAKO;AACL,cAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,gBAAImC,cAAc,CAAC/R,SAAf,KAA6B,IAAjC,EAAuC;AACrC,oBAAM,IAAIV,KAAJ,CACJ,iEACE,iDAFE,CAAN;AAID,aAN8B;;AAQhC;;AACD,gBAAM0N,qBAAqB,GAAGkZ,oBAAoB,EAAlD;AACA,gBAAM6b,kBAAkB,GAAGvb,cAAc,EAAzC;AACA,gBAAMic,WAAW,GAAGpsB,iBAAiB,CAACtE,AAAD,CAArC;;AACA,cAAI0wB,WAAJ,EAAiB;AACf,gBAAIvsB,gCAAgC,CAACnE,AAAD,CAApC,EAAsD;AACpD4vB,cAAAA,UAAU,CAAC5vB,cAAD,CAAV;AACD;AACF,WAJD,MAIO;AACLA,YAAAA,cAAc,CAAC/R,SAAf,GAA2B8O,kBAAkB,CAC3Cc,OAD2C,AAAA,CAA7C;AAMD;AACF;;AACDwyB,QAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACA,eAAO,IAAP;AACD;;AACD,SAAKnZ,iBAAL;AAAwB;AACtB6uB,QAAAA,kBAAkB,CAAC1V,AAAD,CAAlB;AACA,cAAM6K,SAA+B,GAAG7K,cAAc,CAACiD,aAAvD,CAFsB;AAKtB;AACA;AACA;AACA;;AACA,YACE/U,OAAO,KAAK,IAAZ,IACCA,OAAO,CAAC+U,aAAR,KAA0B,IAA1B,IACC/U,OAAO,CAAC+U,aAAR,CAAsB4S,UAAtB,KAAqC,IAHzC,EAIE;AACA,gBAAMob,+BAA+B,GAAGR,kCAAkC,CACxEviC,OADwE,EAExE8R,cAFwE,EAGxE6K,SAHwE,CAA1E;;AAKA,cAAI,CAAComB,+BAAL,EAAsC;AACpC,gBAAIjxB,cAAc,CAAChT,KAAf,GAAuBlB,aAA3B,EAA0C;AACxC;AACA;AACA,qBAAOkU,cAAP;AACD,aAJD,MAIO;AACL;AACA;AACA,qBAAO,IAAP;AACD;AACF,WAhBD;;AAmBD;;AAED,YAAI,CAACA,cAAc,CAAChT,KAAf,GAAuB7B,UAAxB,MAAwCP,OAA5C,EAAqD;AACnD;AACAoV,UAAAA,cAAc,CAACtO,KAAf,GAAuB6H,WAAvB,CAFmD;;;AAWnD,iBAAOyG,cAAP;AACD;;AAED,cAAMkxB,cAAc,GAAGrmB,SAAS,KAAK,IAArC;AACA,cAAMsmB,cAAc,GAClBjjC,OAAO,KAAK,IAAZ,IACCA,OAAO,CAAC+U,aAAT,KAAkD,IAFpD;;AAIA,YAAIyT,CAAewa,cAAnB,EAAmC;AACjC,gBAAME,cAAqB,GAAIpxB,cAAc,CAAClS,KAA9C;AACA,cAAIgjC,aAA2B,GAAG,IAAlC;;AACA,cACEM,cAAc,CAACtkC,SAAf,KAA6B,IAA7B,IACAskC,cAAc,CAACtkC,SAAf,CAAyBmW,aAAzB,KAA2C,IAD3C,IAEAmuB,cAAc,CAACtkC,SAAf,CAAyBmW,aAAzB,CAAuC4lB,SAAvC,KAAqD,IAHvD,EAIE;AACAiI,YAAAA,aAAa,GAAGM,cAAc,CAACtkC,SAAf,CAAyBmW,aAAzB,CAAuC4lB,SAAvC,CAAiDvB,IAAjE;AACD;;AACD,cAAI3P,KAAmB,GAAG,IAA1B;;AACA,cACEyZ,cAAc,CAACnuB,aAAf,KAAiC,IAAjC,IACAmuB,cAAc,CAACnuB,aAAf,CAA6B4lB,SAA7B,KAA2C,IAF7C,EAGE;AACAlR,YAAAA,KAAK,GAAGyZ,cAAc,CAACnuB,aAAf,CAA6B4lB,SAA7B,CAAuCvB,IAA/C;AACD;;AACD,cAAI3P,KAAK,KAAKmZ,aAAd,EAA6B;AAC3B;AACAM,YAAAA,cAAc,CAACpkC,KAAf,IAAwBzB,OAAxB;AACD;AACF,SA1EqB;AA6EtB;;;AACA,YAAI2lC,cAAc,KAAKC,cAAvB,EAAuC;AACrC,AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,cAAID,cAAJ,EAAoB;AAClB,kBAAME,cAAqB,GAAIpxB,cAAc,CAAClS,KAA9C;AACAsjC,YAAAA,cAAc,CAACpkC,KAAf,IAAwBvB,UAAxB,CAFkB;AAKlB;AACA;;AACA,gBAAI,CAACuU,cAAc,CAAChK,IAAf,GAAsBlE,cAAvB,MAA2CD,MAA/C,EAAuD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAMw/B,wBAAwB,GAC5BnjC,OAAO,KAAK,IAAZ,KACC8R,cAAc,CAACmO,aAAf,CAA6BmjB,0BAA7B,KACC,IADD,IAEC,CAACzrC,+BAHH,CADF;;AAKA,kBACEwrC,wBAAwB,IACxBpc,kBAAkB,CAChBD,mBAAmB,CAAC9mB,OADJ,EAEf4mB,8BAFe,CAFpB,EAME;AACA;AACA;AACAyc,gBAAAA,gBAAgB;AACjB,eAVD,MAUO;AACL;AACA;AACAlL,gBAAAA,+BAA+B;AAChC;AACF;AACF;AACF;;AAED,cAAMR,SAA+B,GAAI7lB,cAAc,CAAC0H,WAAxD;;AACA,YAAIme,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA;AACA7lB,UAAAA,cAAc,CAAChT,KAAf,IAAwBjC,MAAxB;AACD;;AAWDslC,QAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;;AAaA,eAAO,IAAP;AACD;;AACD,SAAK5Z,UAAL;AACEouB,MAAAA,gBAAgB,CAACxU,AAAD,CAAhB;AACA8vB,MAAAA,mBAAmB,CAAC5hC,OAAD,EAAU8R,cAAV,CAAnB;;AACA,UAAI9R,OAAO,KAAK,IAAhB,EAAsB;AACpBoQ,QAAAA,kBAAkB,CAAC0B,cAAc,CAAC/R,SAAf,CAAyBkO,aAA1B,CAAlB;AACD;;AACDk0B,MAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACA,aAAO,IAAP;;AACF,SAAKtZ,eAAL;AACE;AACA,YAAMoD,OAA0B,GAAGkW,cAAc,CAACrW,IAAf,CAAoBK,QAAvD;AACA2c,MAAAA,WAAW,CAAC7c,OAAD,AAAA,CAAX;AACAumC,MAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACA,aAAO,IAAP;;AACF,SAAK/Y,wBAAL;AAA+B;AAC7B;AACA;AACA,cAAMgZ,SAAS,GAAGD,cAAc,CAACrW,IAAjC;;AACA,YAAIkgC,iBAAuB,CAAC5pB,SAAD,CAA3B,EAAwC;AACtC2wB,UAAAA,UAAgB,CAAC5wB,AAAD,CAAhB;AACD;;AACDqwB,QAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACA,eAAO,IAAP;AACD;;AACD,SAAK7Y,qBAAL;AAA4B;AAC1BuuB,QAAAA,kBAAkB,CAAC1V,AAAD,CAAlB;AAEA,cAAMsuB,WAA2C,GAC/CtuB,cAAc,CAACiD,aADjB;;AAGA,YAAIqrB,WAAW,KAAK,IAApB,EAA0B;AACxB;AACA;AACA+B,UAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACA,iBAAO,IAAP;AACD;;AAED,YAAIwxB,iBAAiB,GAAG,CAACxxB,cAAc,CAAChT,KAAf,GAAuB7B,UAAxB,MAAwCP,OAAhE;AAEA,cAAM6mC,YAAY,GAAGnD,WAAW,CAACC,SAAjC;;AACA,YAAIkD,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA,cAAI,CAACD,iBAAL,EAAwB;AACtB;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,kBAAME,iBAAiB,GACrBC,wBAAwB,OACvBzjC,OAAO,KAAK,IAAZ,IAAoB,CAACA,OAAO,CAAClB,KAAR,GAAgB7B,UAAjB,MAAiCP,OAD9B,CAD1B;;AAGA,gBAAI,CAAC8mC,iBAAL,EAAwB;AACtB,kBAAI3b,GAAG,GAAG/V,cAAc,CAAClS,KAAzB;;AACA,qBAAOioB,GAAG,KAAK,IAAf,EAAqB;AACnB,sBAAM6b,SAAS,GAAG9b,kBAAkB,CAACC,GAAD,CAApC;;AACA,oBAAI6b,SAAS,KAAK,IAAlB,EAAwB;AACtBJ,kBAAAA,iBAAiB,GAAG,IAApB;AACAxxB,kBAAAA,cAAc,CAAChT,KAAf,IAAwB7B,UAAxB;AACA8kC,kBAAAA,kBAAkB,CAAC3B,WAAD,EAAc,KAAd,CAAlB,CAHsB;AAMtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,wBAAMuD,YAAY,GAAGD,SAAS,CAAClqB,WAA/B;;AACA,sBAAImqB,YAAY,KAAK,IAArB,EAA2B;AACzB7xB,oBAAAA,cAAc,CAAC0H,WAAf,GAA6BmqB,YAA7B;AACA7xB,oBAAAA,cAAc,CAAChT,KAAf,IAAwBjC,MAAxB;AACD,mBArBqB;AAwBtB;AACA;AACA;;;AACAiV,kBAAAA,cAAc,CAACmtB,YAAf,GAA8BviC,OAA9B;AACAipB,kBAAAA,gBAAgB,CAAC7T,cAAD,EAAiBzG,WAAjB,CAAhB,CA5BsB;AA+BtB;;AACAic,kBAAAA,mBAAmB,CACjBxV,cADiB,EAEjBoV,yBAAyB,CACvBJ,mBAAmB,CAAC9mB,OADG,EAEvB6mB,qBAFuB,CAFR,CAAnB,CAhCsB;;AAwCtB,yBAAO/U,cAAc,CAAClS,KAAtB;AACD;;AACDioB,gBAAAA,GAAG,GAAGA,GAAG,CAAChoB,OAAV;AACD;AACF;;AAED,gBAAIugC,WAAW,CAACF,IAAZ,KAAqB,IAArB,IAA6Bp/B,GAAG,KAAK8iC,mBAAmB,EAA5D,EAAgE;AAC9D;AACA;AACA;AACA9xB,cAAAA,cAAc,CAAChT,KAAf,IAAwB7B,UAAxB;AACAqmC,cAAAA,iBAAiB,GAAG,IAApB;AAEAvB,cAAAA,kBAAkB,CAAC3B,WAAD,EAAc,KAAd,CAAlB,CAP8D;AAU9D;AACA;AACA;AACA;AACA;AACA;AACA;;AACAtuB,cAAAA,cAAc,CAACtO,KAAf,GAAuB8C,aAAvB;AACD;AACF,WApFD,MAoFO;AACLy7B,YAAAA,kBAAkB,CAAC3B,WAAD,EAAc,KAAd,CAAlB;AACD,WAxFwB;;AA0F1B,SA1FD,MA0FO;AACL;AACA,cAAI,CAACkD,iBAAL,EAAwB;AACtB,kBAAMI,SAAS,GAAG9b,kBAAkB,CAAC2b,YAAD,CAApC;;AACA,gBAAIG,SAAS,KAAK,IAAlB,EAAwB;AACtB5xB,cAAAA,cAAc,CAAChT,KAAf,IAAwB7B,UAAxB;AACAqmC,cAAAA,iBAAiB,GAAG,IAApB,CAFsB;AAKtB;;AACA,oBAAMK,YAAY,GAAGD,SAAS,CAAClqB,WAA/B;;AACA,kBAAImqB,YAAY,KAAK,IAArB,EAA2B;AACzB7xB,gBAAAA,cAAc,CAAC0H,WAAf,GAA6BmqB,YAA7B;AACA7xB,gBAAAA,cAAc,CAAChT,KAAf,IAAwBjC,MAAxB;AACD;;AAEDklC,cAAAA,kBAAkB,CAAC3B,WAAD,EAAc,IAAd,CAAlB,CAZsB;;AActB,kBACEA,WAAW,CAACF,IAAZ,KAAqB,IAArB,IACAE,WAAW,CAACD,QAAZ,KAAyB,QADzB,IAEA,CAACoD,YAAY,CAAC3kC,SAFd,IAGA,CAAC2X,cAAc,EAJjB;AAAA,gBAKE;AACA;AACA4rB,kBAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACA,yBAAO,IAAP;AACD;AACF,aAxBD,MAwBO;AAEL;AACA;AACAhR,YAAAA,GAAG,KAAK,CAAR,GAAYs/B,WAAW,CAACE,kBAAxB,GACEsD,mBAAmB,EADrB,IAEAv4B,WAAW,KAAK1E,aANX,EAOL;AACA;AACA;AACA;AACAmL,cAAAA,cAAc,CAAChT,KAAf,IAAwB7B,UAAxB;AACAqmC,cAAAA,iBAAiB,GAAG,IAApB;AAEAvB,cAAAA,kBAAkB,CAAC3B,WAAD,EAAc,KAAd,CAAlB,CAPA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAtuB,cAAAA,cAAc,CAACtO,KAAf,GAAuB8C,aAAvB;AACD;AACF;;AACD,cAAI85B,WAAW,CAACH,WAAhB,EAA6B;AAC3B;AACA;AACA;AACA;AACA;AACAsD,YAAAA,YAAY,CAAC1jC,OAAb,GAAuBiS,cAAc,CAAClS,KAAtC;AACAkS,YAAAA,cAAc,CAAClS,KAAf,GAAuB2jC,YAAvB;AACD,WARD,MAQO;AACL,kBAAMM,eAAe,GAAGzD,WAAW,CAACG,IAApC;;AACA,gBAAIsD,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,cAAAA,eAAe,CAAChkC,OAAhB,GAA0B0jC,YAA1B;AACD,aAFD,MAEO;AACLzxB,cAAAA,cAAc,CAAClS,KAAf,GAAuB2jC,YAAvB;AACD;;AACDnD,YAAAA,WAAW,CAACG,IAAZ,GAAmBgD,YAAnB;AACD;AACF;;AAED,YAAInD,WAAW,CAACF,IAAZ,KAAqB,IAAzB,EAA+B;AAC7B;AACA;AACA,gBAAMtmB,IAAI,GAAGwmB,WAAW,CAACF,IAAzB;AACAE,UAAAA,WAAW,CAACC,SAAZ,GAAwBzmB,IAAxB;AACAwmB,UAAAA,WAAW,CAACF,IAAZ,GAAmBtmB,IAAI,CAAC/Z,OAAxB;AACAugC,UAAAA,WAAW,CAACE,kBAAZ,GAAiCx/B,GAAG,EAApC;AACA8Y,UAAAA,IAAI,CAAC/Z,OAAL,GAAe,IAAf,CAP6B;AAU7B;AACA;;AACA,cAAIy9B,eAAe,GAAGxW,mBAAmB,CAAC9mB,OAA1C;;AACA,cAAIsjC,iBAAJ,EAAuB;AACrBhG,YAAAA,eAAe,GAAGpW,yBAAyB,CACzCoW,eADyC,EAEzCzW,qBAFyC,CAA3C;AAID,WALD,MAKO;AACLyW,YAAAA,eAAe,GAAGrW,gCAAgC,CAACqW,eAAD,CAAlD;AACD;;AACDhW,UAAAA,mBAAmB,CAACxV,cAAD,EAAiBwrB,eAAjB,CAAnB,CArB6B;AAuB7B;;AACA,iBAAO1jB,IAAP;AACD;;AACDuoB,QAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACA,eAAO,IAAP;AACD;;AACD,SAAK5Y,cAAL;AAAqB;AACnB;AAoBA;AACD;;AACD,SAAKC,kBAAL;AACA,SAAKC,qBAAL;AAA4B;AAC1B0qC,QAAAA,cAAc,CAAChyB,AAAD,CAAd;AACA,cAAM6K,SAAgC,GAAG7K,cAAc,CAACiD,aAAxD;AACA,cAAMgvB,YAAY,GAAGpnB,SAAS,KAAK,IAAnC;;AAEA,YAAI3c,OAAO,KAAK,IAAhB,EAAsB;AACpB,gBAAMyc,SAAgC,GAAGzc,OAAO,CAAC+U,aAAjD;AACA,gBAAMivB,YAAY,GAAGvnB,SAAS,KAAK,IAAnC;;AACA,cACEunB,YAAY,KAAKD,YAAjB;AAEC,WAAClsC,kBAAD,CAFD,CADF,EAIE;AACAia,YAAAA,cAAc,CAAChT,KAAf,IAAwBvB,UAAxB;AACD;AACF;;AAED,YAAI,CAACwmC,YAAD,IAAiB,CAACjyB,cAAc,CAAChK,IAAf,GAAsBlE,cAAvB,MAA2CD,MAAhE,EAAwE;AACtEw+B,UAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACD,SAFD,MAEO;AACL;AACA;AACA,cAAIhI,gBAAgB,CAACmxB,kBAAD,EAAsBt0B,aAAtB,CAApB,EAAiE;AAC/Dw7B,YAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;;AACA,YAAsB;AACpB;AACA;AACA;AACA,kBACE,CAEAA,cAAc,CAACmtB,YAAf,IAA+BriC,SAAS,GAAGC,MAA3C,CAHF,EAIE;AACAiV,gBAAAA,cAAc,CAAChT,KAAf,IAAwBvB,UAAxB;AACD;AACF;AACF;AACF;;AAED,QAAiB;AACf,cAAIqlC,aAA2B,GAAG,IAAlC;;AACA,cACE5iC,OAAO,KAAK,IAAZ,IACAA,OAAO,CAAC+U,aAAR,KAA0B,IAD1B,IAEA/U,OAAO,CAAC+U,aAAR,CAAsB4lB,SAAtB,KAAoC,IAHtC,EAIE;AACAiI,YAAAA,aAAa,GAAG5iC,OAAO,CAAC+U,aAAR,CAAsB4lB,SAAtB,CAAgCvB,IAAhD;AACD;;AACD,cAAI3P,KAAmB,GAAG,IAA1B;;AACA,cACE3X,cAAc,CAACiD,aAAf,KAAiC,IAAjC,IACAjD,cAAc,CAACiD,aAAf,CAA6B4lB,SAA7B,KAA2C,IAF7C,EAGE;AACAlR,YAAAA,KAAK,GAAG3X,cAAc,CAACiD,aAAf,CAA6B4lB,SAA7B,CAAuCvB,IAA/C;AACD;;AACD,cAAI3P,KAAK,KAAKmZ,aAAd,EAA6B;AAC3B;AACA9wB,YAAAA,cAAc,CAAChT,KAAf,IAAwBzB,OAAxB;AACD;AACF;;AAEDg8B,QAAAA,aAAa,CAACvnB,cAAD,EAAiB9R,OAAjB,CAAb;AAEA,eAAO,IAAP;AACD;;AACD,SAAK3G,cAAL;AAAqB;AACnB,QAAiB;AACf,cAAIupC,aAA2B,GAAG,IAAlC;;AACA,cAAI5iC,OAAO,KAAK,IAAhB,EAAsB;AACpB4iC,YAAAA,aAAa,GAAG5iC,OAAO,CAAC+U,aAAR,CAAsB0U,KAAtC;AACD;;AACD,gBAAMA,KAAY,GAAG3X,cAAc,CAACiD,aAAf,CAA6B0U,KAAlD;;AACA,cAAIA,KAAK,KAAKmZ,aAAd,EAA6B;AAC3B;AACA9wB,YAAAA,cAAc,CAAChT,KAAf,IAAwBzB,OAAxB;AACD;;AACD2sB,UAAAA,gBAAgB,CAAClY,AAAD,CAAhB;AACAqwB,UAAAA,gBAAgB,CAACrwB,cAAD,CAAhB;AACD;;AACD,eAAO,IAAP;AACD;;AACD,SAAKxY,sBAAL;AAA6B;AAC3B;AAIA,eAAO,IAAP;AACD;AA3tBH;;AA8tBA,QAAM,IAAI+F,KAAJ,CACJ,+BAA6ByS,cAAc,CAACrV,GAA5C,mDACE,8BAFE,CAAN;AAID;;AC9gDD,SAASwnC,UAAT,CACEjkC,OADF,EAEE8R,cAFF,EAGEzG,WAHF,EAIE;AACA;AACA;AACA;AACA;AACAqK,EAAAA,cAAc,CAAC5D,cAAD,CAAd;;AACA,UAAQA,cAAc,CAACrV,GAAvB;AACE,SAAK1E,cAAL;AAAqB;AACnB,cAAMga,SAAS,GAAGD,cAAc,CAACrW,IAAjC;;AACA,YAAIkgC,iBAAuB,CAAC5pB,SAAD,CAA3B,EAAwC;AACtC2wB,UAAAA,UAAgB,CAAC5wB,AAAD,CAAhB;AACD;;AACD,cAAMhT,KAAK,GAAGgT,cAAc,CAAChT,KAA7B;;AACA,YAAIA,KAAK,GAAGlB,aAAZ,EAA2B;AACzBkU,UAAAA,cAAc,CAAChT,KAAf,GAAwBA,KAAK,GAAG,CAAClB,aAAV,GAA2BX,UAAlD;;AAOA,iBAAO6U,cAAP;AACD;;AACD,eAAO,IAAP;AACD;;AACD,SAAK7Z,QAAL;AAAe;AACb,cAAMgK,IAAe,GAAG6P,cAAc,CAAC/R,SAAvC;;AACA,QAAiB;AACf,gBAAM0pB,KAAY,GAAG3X,cAAc,CAACiD,aAAf,CAA6B0U,KAAlD;AACAO,UAAAA,gBAAgB,CAAClY,AAAD,CAAhB;AACD;AAEDwU,QAAAA,gBAAgB,CAACxU,AAAD,CAAhB;AACA+wB,QAAAA,wBAA8B,CAAC/wB,AAAD,CAA9B;AACAgxB,QAAAA,2BAAwC;AACxC,cAAMhkC,KAAK,GAAGgT,cAAc,CAAChT,KAA7B;;AACA,YACE,CAACA,KAAK,GAAGlB,aAAT,MAA4BlB,OAA5B,IACA,CAACoC,KAAK,GAAG7B,UAAT,MAAyBP,OAF3B,EAGE;AACA;AACA;AACAoV,UAAAA,cAAc,CAAChT,KAAf,GAAwBA,KAAK,GAAG,CAAClB,aAAV,GAA2BX,UAAlD;AACA,iBAAO6U,cAAP;AACD,SAnBY;;;AAqBb,eAAO,IAAP;AACD;;AACD,SAAK3Z,aAAL;AAAoB;AAClB;AACAsuB,QAAAA,cAAc,CAAC3U,cAAD,CAAd;AACA,eAAO,IAAP;AACD;;AACD,SAAKnZ,iBAAL;AAAwB;AACtB6uB,QAAAA,kBAAkB,CAAC1V,AAAD,CAAlB;AACA,cAAMyrB,aAAmC,GAAGzrB,cAAc,CAACiD,aAA3D;;AACA,YAAIwoB,aAAa,KAAK,IAAlB,IAA0BA,aAAa,CAAC5V,UAAd,KAA6B,IAA3D,EAAiE;AAC/D,cAAI7V,cAAc,CAAClT,SAAf,KAA6B,IAAjC,EAAuC;AACrC,kBAAM,IAAIS,KAAJ,CACJ,0EACE,8BAFE,CAAN;AAID;AAGF;;AAED,cAAMP,KAAK,GAAGgT,cAAc,CAAChT,KAA7B;;AACA,YAAIA,KAAK,GAAGlB,aAAZ,EAA2B;AACzBkU,UAAAA,cAAc,CAAChT,KAAf,GAAwBA,KAAK,GAAG,CAAClB,aAAV,GAA2BX,UAAlD,CADyB;;AASzB,iBAAO6U,cAAP;AACD;;AACD,eAAO,IAAP;AACD;;AACD,SAAK7Y,qBAAL;AAA4B;AAC1BuuB,QAAAA,kBAAkB,CAAC1V,AAAD,CAAlB,CAD0B;AAG1B;;AACA,eAAO,IAAP;AACD;;AACD,SAAK5Z,UAAL;AACEouB,MAAAA,gBAAgB,CAACxU,AAAD,CAAhB;AACA,aAAO,IAAP;;AACF,SAAKtZ,eAAL;AACE,YAAMoD,OAA0B,GAAGkW,cAAc,CAACrW,IAAf,CAAoBK,QAAvD;AACA2c,MAAAA,WAAW,CAAC7c,OAAD,AAAA,CAAX;AACA,aAAO,IAAP;;AACF,SAAKzC,kBAAL;AACA,SAAKC,qBAAL;AACE0qC,MAAAA,cAAc,CAAChyB,AAAD,CAAd;AACAunB,MAAAA,aAAa,CAACvnB,cAAD,EAAiB9R,OAAjB,CAAb;AACA,aAAO,IAAP;;AACF,SAAK3G,cAAL;AACE,MAAiB;AACf,cAAMowB,KAAY,GAAG3X,cAAc,CAACiD,aAAf,CAA6B0U,KAAlD;AACAO,QAAAA,gBAAgB,CAAClY,AAAD,CAAhB;AACD;;AACD,aAAO,IAAP;;AACF;AACE,aAAO,IAAP;AApGJ;AAsGD;;AAED,SAASoyB,qBAAT,CACElkC,OADF,EAEEmkC,eAFF,EAGE94B,WAHF,EAIE;AACA;AACA;AACA;AACA;AACAqK,EAAAA,cAAc,CAACyuB,eAAD,CAAd;;AACA,UAAQA,eAAe,CAAC1nC,GAAxB;AACE,SAAK1E,cAAL;AAAqB;AACnB,cAAM2a,iBAAiB,GAAGyxB,eAAe,CAAC1oC,IAAhB,CAAqBiX,iBAA/C;;AACA,YAAIA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK5P,SAAxD,EAAmE;AACjE4/B,UAAAA,UAAgB,CAACyB,AAAD,CAAhB;AACD;;AACD;AACD;;AACD,SAAKlsC,QAAL;AAAe;AACb,cAAMgK,IAAe,GAAGkiC,eAAe,CAACpkC,SAAxC;;AACA,QAAiB;AACf,gBAAM0pB,KAAY,GAAG0a,eAAe,CAACpvB,aAAhB,CAA8B0U,KAAnD;AACAO,UAAAA,gBAAgB,CAACma,AAAD,CAAhB;AACD;AAED7d,QAAAA,gBAAgB,CAAC6d,AAAD,CAAhB;AACAtB,QAAAA,wBAA8B,CAACsB,AAAD,CAA9B;AACArB,QAAAA,2BAAwC;AACxC;AACD;;AACD,SAAK3qC,aAAL;AAAoB;AAClBsuB,QAAAA,cAAc,CAAC0d,eAAD,CAAd;AACA;AACD;;AACD,SAAKjsC,UAAL;AACEouB,MAAAA,gBAAgB,CAAC6d,AAAD,CAAhB;AACA;;AACF,SAAKxrC,iBAAL;AACE6uB,MAAAA,kBAAkB,CAAC2c,AAAD,CAAlB;AACA;;AACF,SAAKlrC,qBAAL;AACEuuB,MAAAA,kBAAkB,CAAC2c,AAAD,CAAlB;AACA;;AACF,SAAK3rC,eAAL;AACE,YAAMoD,OAA0B,GAAGuoC,eAAe,CAAC1oC,IAAhB,CAAqBK,QAAxD;AACA2c,MAAAA,WAAW,CAAC7c,OAAD,AAAA,CAAX;AACA;;AACF,SAAKzC,kBAAL;AACA,SAAKC,qBAAL;AACE0qC,MAAAA,cAAc,CAACK,AAAD,CAAd;AACA9K,MAAAA,aAAa,CAAC8K,eAAD,EAAkBnkC,OAAlB,CAAb;AACA;;AACF,SAAK3G,cAAL;AACE,MAAiB;AACf,cAAMowB,KAAY,GAAG0a,eAAe,CAACpvB,aAAhB,CAA8B0U,KAAnD;AACAO,QAAAA,gBAAgB,CAACma,AAAD,CAAhB;AACD;;AACD;AA/CJ;AAmDD;;AC3CD,MAAMC,eAAe,GAAG,OAAOC,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0ClN,GAAlE;AAEA,IAAImN,UAAwB,GAAG,IAA/B;;AAoBA,MAAMC,iCAAiC,GAAG,UAASvkC,OAAT,EAAkBsP,QAAlB,EAA4B;AACpEA,EAAAA,QAAQ,CAACrC,KAAT,GAAiBjN,OAAO,CAACigB,aAAzB;AACA3Q,EAAAA,QAAQ,CAAC+P,KAAT,GAAiBrf,OAAO,CAAC+U,aAAzB;;AACA,EAWO;AACLzF,IAAAA,QAAQ,CAACk1B,oBAAT;AACD;AACF,CAjBD;;;AAgCA,SAASC,8BAAT,CACEzkC,OADF,EAEE0kC,sBAFF,EAGEp1B,QAHF,EAIE;AACA,MAAI;AACFi1B,IAAAA,iCAAiC,CAACvkC,OAAD,EAAUsP,QAAV,CAAjC;AACD,GAFD,CAEE,OAAOqF,KAAP,EAAc;AACdgwB,IAAAA,uBAAuB,CAAC3kC,OAAD,EAAU0kC,sBAAV,EAAkC/vB,KAAlC,CAAvB;AACD;AACF;;AAwBD,SAASiwB,eAAT,CAAyB5kC,OAAzB,EAAyC0kC,sBAAzC,EAA+E;AAC7E,QAAMxjB,GAAG,GAAGlhB,OAAO,CAACkhB,GAApB;;AACA,MAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,QAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7B,UAAI2jB,MAAJ;;AACA,UAAI;AACF,YACEttC,mBAAmB,IACnBE,yBADA,IAEAuI,OAAO,CAAC8H,IAAR,GAAejE,WAHjB,EAIE;AACA,cAAI;AACF0xB,YAAAA,sBAAsB;AACtBsP,YAAAA,MAAM,GAAG3jB,GAAG,CAAC,IAAD,CAAZ;AACD,WAHD,SAGU;AACRoU,YAAAA,0BAA0B,CAACt1B,OAAD,CAA1B;AACD;AACF,SAXD,MAWO;AACL6kC,UAAAA,MAAM,GAAG3jB,GAAG,CAAC,IAAD,CAAZ;AACD;AACF,OAfD,CAeE,OAAOvM,KAAP,EAAc;AACdgwB,QAAAA,uBAAuB,CAAC3kC,OAAD,EAAU0kC,sBAAV,EAAkC/vB,KAAlC,CAAvB;AACD;AAUF,KA7BD,MA6BO;AACLuM,MAAAA,GAAG,CAAClhB,OAAJ,GAAc,IAAd;AACD;AACF;AACF;;AAED,SAAS8kC,iBAAT,CACE9kC,OADF,EAEE0kC,sBAFF,EAGEjV,OAHF,EAIE;AACA,MAAI;AACFA,IAAAA,OAAO;AACR,GAFD,CAEE,OAAO9a,KAAP,EAAc;AACdgwB,IAAAA,uBAAuB,CAAC3kC,OAAD,EAAU0kC,sBAAV,EAAkC/vB,KAAlC,CAAvB;AACD;AACF;;AAED,IAAIowB,qBAAmC,GAAG,IAA1C;AACA,IAAIC,iCAA0C,GAAG,KAAjD;AAEA,AAAO,SAASC,2BAAT,CACLhjC,IADK,EAEL29B,UAFK,EAGL;AACAmF,EAAAA,qBAAqB,GAAG/2B,gBAAgB,CAAC/L,IAAI,CAACgM,aAAN,CAAxC;AAEAq2B,EAAAA,UAAU,GAAG1E,UAAb;AACAsF,EAAAA,iCAAiC,GAJjC;;AAOA,QAAMC,UAAU,GAAGH,iCAAnB;AACAA,EAAAA,iCAAiC,GAAG,KAApC;AACAD,EAAAA,qBAAqB,GAAG,IAAxB;AAEA,SAAOI,UAAP;AACD;;AAED,SAASD,iCAAT,GAA6C;AAC3C,SAAOZ,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM9nC,KAAK,GAAG8nC,UAAd,CAD0B;AAI1B;AAYA,UAAM1kC,KAAK,GAAGpD,KAAK,CAACoD,KAApB;;AACA,QACE,CAACpD,KAAK,CAACyiC,YAAN,GAAqB/gC,kBAAtB,MAA8CxB,OAA9C,IACAkD,KAAK,KAAK,IAFZ,EAGE;AACAA,MAAAA,KAAK,CAACb,MAAN,GAAevC,KAAf;AACA8nC,MAAAA,UAAU,GAAG1kC,KAAb;AACD,KAND,MAMO;AACLwlC,MAAAA,oCAAoC;AACrC;AACF;AACF;;AAED,SAASA,oCAAT,GAAgD;AAC9C,SAAOd,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM9nC,KAAK,GAAG8nC,UAAd;AACAe;AACA,QAAI;AACFC,MAAAA,kCAAkC,CAAC9oC,KAAD,CAAlC;AACD,KAFD,CAEE,OAAOmY,KAAP,EAAc;AACdgwB,MAAAA,uBAAuB,CAACnoC,KAAD,EAAQA,KAAK,CAACuC,MAAd,EAAsB4V,KAAtB,CAAvB;AACD;AAGD,UAAM9U,OAAO,GAAGrD,KAAK,CAACqD,OAAtB;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBA,MAAAA,OAAO,CAACd,MAAR,GAAiBvC,KAAK,CAACuC,MAAvB;AACAulC,MAAAA,UAAU,GAAGzkC,OAAb;AACA;AACD;;AAEDykC,IAAAA,UAAU,GAAG9nC,KAAK,CAACuC,MAAnB;AACD;AACF;;AAED,SAASumC,kCAAT,CAA4C1nB,YAA5C,EAAiE;AAC/D,QAAM5d,OAAO,GAAG4d,YAAY,CAAChf,SAA7B;AACA,QAAME,KAAK,GAAG8e,YAAY,CAAC9e,KAA3B;;AAiBA,MAAI,CAACA,KAAK,GAAG1B,QAAT,MAAuBV,OAA3B,EAAoC;AAClC2oC;AAEA,YAAQznB,YAAY,CAACnhB,GAArB;AACE,WAAK3E,iBAAL;AACA,WAAKW,UAAL;AACA,WAAKI,mBAAL;AAA0B;AACxB;AACD;;AACD,WAAKd,cAAL;AAAqB;AACnB,cAAIiI,OAAO,KAAK,IAAhB,EAAsB;AACpB,kBAAMu6B,SAAS,GAAGv6B,OAAO,CAACigB,aAA1B;AACA,kBAAMxD,SAAS,GAAGzc,OAAO,CAAC+U,aAA1B;AACA,kBAAMzF,QAAQ,GAAGsO,YAAY,CAAC7d,SAA9B,CAHoB;AAKpB;AA6BA,kBAAMwlC,QAAQ,GAAGj2B,QAAQ,CAACuQ,uBAAT,CACfjC,YAAY,CAAC2C,WAAb,KAA6B3C,YAAY,CAACniB,IAA1C,GACI8+B,SADJ,GAEI3iB,mBAAmB,CAACgG,YAAY,CAACniB,IAAd,EAAoB8+B,SAApB,CAHR,EAIf9d,SAJe,CAAjB;;AAiBAnN,YAAAA,QAAQ,CAACk2B,mCAAT,GAA+CD,QAA/C;AACD;;AACD;AACD;;AACD,WAAKttC,QAAL;AAAe;AACb,UAAsB;AACpB,kBAAMgK,IAAI,GAAG2b,YAAY,CAAC7d,SAA1B;AACA4N,YAAAA,cAAc,CAAC1L,IAAI,CAACgM,aAAN,CAAd;AACD;;AACD;AACD;;AACD,WAAK9V,aAAL;AACA,WAAKC,QAAL;AACA,WAAKF,UAAL;AACA,WAAKa,wBAAL;AACE;AACA;;AACF;AAAS;AACP,gBAAM,IAAIsG,KAAJ,CACJ,uEACE,wDAFE,CAAN;AAID;AAhFH;AAoFD;AACF;;AAeD,SAASomC,2BAAT,CACE3mC,KADF,EAEE8e,YAFF,EAGE8mB,sBAHF,EAIE;AACA,QAAMlrB,WAAgD,GAAIoE,YAAY,CAACpE,WAAvE;AACA,QAAMwS,UAAU,GAAGxS,WAAW,KAAK,IAAhB,GAAuBA,WAAW,CAACwS,UAAnC,GAAgD,IAAnE;;AACA,MAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB,UAAM2D,WAAW,GAAG3D,UAAU,CAACpS,IAA/B;AACA,QAAIkE,MAAM,GAAG6R,WAAb;;AACA,OAAG;AACD,UAAI,CAAC7R,MAAM,CAACrhB,GAAP,GAAaqC,KAAd,MAAyBA,KAA7B,EAAoC;AAClC;AACA,cAAM2wB,OAAO,GAAG3R,MAAM,CAAC2R,OAAvB;AACA3R,QAAAA,MAAM,CAAC2R,OAAP,GAAiB3sB,SAAjB;;AACA,YAAI2sB,OAAO,KAAK3sB,SAAhB,EAA2B;AACzB;AAaAgiC,UAAAA,iBAAiB,CAAClnB,YAAD,EAAe8mB,sBAAf,EAAuCjV,OAAvC,CAAjB;AAcD;AACF;;AACD3R,MAAAA,MAAM,GAAGA,MAAM,CAAClE,IAAhB;AACD,KApCD,QAoCSkE,MAAM,KAAK6R,WApCpB;AAqCD;AACF;;AAED,SAAS+V,yBAAT,CAAmC5mC,KAAnC,EAAqD8e,YAArD,EAA0E;AACxE,QAAMpE,WAAgD,GAAIoE,YAAY,CAACpE,WAAvE;AACA,QAAMwS,UAAU,GAAGxS,WAAW,KAAK,IAAhB,GAAuBA,WAAW,CAACwS,UAAnC,GAAgD,IAAnE;;AACA,MAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB,UAAM2D,WAAW,GAAG3D,UAAU,CAACpS,IAA/B;AACA,QAAIkE,MAAM,GAAG6R,WAAb;;AACA,OAAG;AACD,UAAI,CAAC7R,MAAM,CAACrhB,GAAP,GAAaqC,KAAd,MAAyBA,KAA7B,EAAoC;AAClC;;AASA,cAAM0wB,MAAM,GAAG1R,MAAM,CAAC0R,MAAtB;;AAMA1R,QAAAA,MAAM,CAAC2R,OAAP,GAAiBD,MAAM,EAAvB;AA2DD;;AACD1R,MAAAA,MAAM,GAAGA,MAAM,CAAClE,IAAhB;AACD,KA9ED,QA8ESkE,MAAM,KAAK6R,WA9EpB;AA+ED;AACF;;AAsDD,SAASgW,yBAAT,CACEC,YADF,EAEE5lC,OAFF,EAGE4d,YAHF,EAIEioB,cAJF,EAKQ;AACN,MAAI,CAACjoB,YAAY,CAAC9e,KAAb,GAAqBT,UAAtB,MAAsC3B,OAA1C,EAAmD;AACjD,YAAQkhB,YAAY,CAACnhB,GAArB;AACE,WAAK3E,iBAAL;AACA,WAAKW,UAAL;AACA,WAAKI,mBAAL;AAA0B;AACxB,UAGE;AACA;AACA;AACA;AACA;AACA,YAcO;AACL6sC,cAAAA,yBAAyB,CAAClV,MAAU,GAAGnC,SAAd,EAA6BzQ,YAA7B,CAAzB;AACD;AACF;;AACD;AACD;;AACD,WAAK7lB,cAAL;AAAqB;AACnB,gBAAMuX,QAAQ,GAAGsO,YAAY,CAAC7d,SAA9B;;AACA,cAAI6d,YAAY,CAAC9e,KAAb,GAAqBjC,MAAzB,EAAiC;AAC/B,YAAgC;AAC9B,kBAAImD,OAAO,KAAK,IAAhB,EAAsB;AACpB;AA8BA,gBAWO;AACLsP,kBAAAA,QAAQ,CAACwQ,iBAAT;AACD;AACF,eA7CD,MA6CO;AACL,sBAAMya,SAAS,GACb3c,YAAY,CAAC2C,WAAb,KAA6B3C,YAAY,CAACniB,IAA1C,GACIuE,OAAO,CAACigB,aADZ,GAEIrI,mBAAmB,CACjBgG,YAAY,CAACniB,IADI,EAEjBuE,OAAO,CAACigB,aAFS,CAHzB;AAOA,sBAAMxD,SAAS,GAAGzc,OAAO,CAAC+U,aAA1B,CARK;AAUL;AA6BA,gBAeO;AACLzF,kBAAAA,QAAQ,CAACqR,kBAAT,CACE4Z,SADF,EAEE9d,SAFF,EAGEnN,QAAQ,CAACk2B,mCAHX;AAKD;AACF;AACF;AACF,WAhHkB;AAmHnB;;;AACA,gBAAMhsB,WAEE,GAAIoE,YAAY,CAACpE,WAFzB;;AAGA,cAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,AA4BA;AACA;;;AACAmE,YAAAA,iBAAiB,CAACC,YAAD,EAAepE,WAAf,EAA4BlK,QAA5B,CAAjB;AACD;;AACD;AACD;;AACD,WAAKrX,QAAL;AAAe;AACb;AACA;AACA,gBAAMuhB,WAEE,GAAIoE,YAAY,CAACpE,WAFzB;;AAGA,cAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,gBAAIlK,QAAQ,GAAG,IAAf;;AACA,gBAAIsO,YAAY,CAAChe,KAAb,KAAuB,IAA3B,EAAiC;AAC/B,sBAAQge,YAAY,CAAChe,KAAb,CAAmBnD,GAA3B;AACE,qBAAKtE,aAAL;AACEmX,kBAAAA,QAAQ,GAAG1C,iBAAiB,CAACgR,YAAY,CAAChe,KAAb,CAAmBG,SAApB,CAA5B;AACA;;AACF,qBAAKhI,cAAL;AACEuX,kBAAAA,QAAQ,GAAGsO,YAAY,CAAChe,KAAb,CAAmBG,SAA9B;AACA;AANJ;AAQD;;AACD4d,YAAAA,iBAAiB,CAACC,YAAD,EAAepE,WAAf,EAA4BlK,QAA5B,CAAjB;AACD;;AACD;AACD;;AACD,WAAKnX,aAAL;AAAoB;AAClB,gBAAMmX,QAAkB,GAAGsO,YAAY,CAAC7d,SAAxC,CADkB;AAIlB;AACA;AACA;;AACA,cAAIC,OAAO,KAAK,IAAZ,IAAoB4d,YAAY,CAAC9e,KAAb,GAAqBjC,MAA7C,EAAqD;AACnD,kBAAMpB,IAAI,GAAGmiB,YAAY,CAACniB,IAA1B;AACA,kBAAMwR,KAAK,GAAG2Q,YAAY,CAACqC,aAA3B;AACA6lB,AACD;;AAED;AACD;;AACD,WAAK1tC,QAAL;AAAe;AACb;AACA;AACD;;AACD,WAAKF,UAAL;AAAiB;AACf;AACA;AACD;;AACD,WAAKQ,QAAL;AAAe;AACb;AAyDA;AACD;;AACD,WAAKC,iBAAL;AAAwB;AACtBotC,AACA;AACD;;AACD,WAAK9sC,qBAAL;AACA,WAAKF,wBAAL;AACA,WAAKG,cAAL;AACA,WAAKC,kBAAL;AACA,WAAKC,qBAAL;AACA,WAAKE,sBAAL;AAA6B;AAC3B;AACD;;AAED;AACE,cAAM,IAAI+F,KAAJ,CACJ,uEACE,wDAFE,CAAN;AAjTJ;AAsTD;;AAED,EAAwE;AACtE,IAMO;AACL,UAAIue,YAAY,CAAC9e,KAAb,GAAqB3B,GAAzB,EAA8B;AAC5B6oC,QAAAA,eAAe,CAACpoB,YAAD,CAAf;AACD;AACF;AACF;AACF;;AA2HD,SAASqoB,uBAAT,CAAiCroB,YAAjC,EAA+CtP,QAA/C,EAAyD;AACvD;AACA,MAAI43B,eAAe,GAAG,IAAtB;;AAEA,EAAsB;AACpB;AACA;AACA,QAAIxnC,IAAW,GAAGkf,YAAlB;;AACA,WAAO,IAAP,EAAa;AACX,UAAIlf,IAAI,CAACjC,GAAL,KAAatE,aAAjB,EAAgC;AAC9B,YAAI+tC,eAAe,KAAK,IAAxB,EAA8B;AAC5BA,UAAAA,eAAe,GAAGxnC,IAAlB;;AACA,cAAI;AACF,kBAAM4Q,QAAQ,GAAG5Q,IAAI,CAACqB,SAAtB;;AACA,gBAAIuO,QAAJ,EAAc;AACZ0B,cAAAA,YAAY,CAACV,QAAD,CAAZ;AACD,aAFD,MAEO;AACLY,cAAAA,cAAc,CAACxR,IAAI,CAACqB,SAAN,EAAiBrB,IAAI,CAACuhB,aAAtB,CAAd;AACD;AACF,WAPD,CAOE,OAAOtL,KAAP,EAAc;AACdgwB,YAAAA,uBAAuB,CAAC/mB,YAAD,EAAeA,YAAY,CAAC7e,MAA5B,EAAoC4V,KAApC,CAAvB;AACD;AACF;AACF,OAdD,MAcO,IAAIjW,IAAI,CAACjC,GAAL,KAAarE,QAAjB,EAA2B;AAChC,YAAI8tC,eAAe,KAAK,IAAxB,EAA8B;AAC5B,cAAI;AACF,kBAAM52B,QAAQ,GAAG5Q,IAAI,CAACqB,SAAtB;;AACA,gBAAIuO,QAAJ,EAAc;AACZ2B,cAAAA,gBAAgB,CAACX,QAAD,CAAhB;AACD,aAFD,MAEO;AACLa,cAAAA,kBAAkB,CAACb,QAAD,EAAW5Q,IAAI,CAACuhB,aAAhB,CAAlB;AACD;AACF,WAPD,CAOE,OAAOtL,KAAP,EAAc;AACdgwB,YAAAA,uBAAuB,CAAC/mB,YAAD,EAAeA,YAAY,CAAC7e,MAA5B,EAAoC4V,KAApC,CAAvB;AACD;AACF;AACF,OAbM,MAaA,IACL,CAACjW,IAAI,CAACjC,GAAL,KAAatD,kBAAb,IACCuF,IAAI,CAACjC,GAAL,KAAarD,qBADf,KAECsF,IAAI,CAACqW,aAAN,KAAyC,IAFzC,IAGArW,IAAI,KAAKkf,YAJJ,EAKL,CALK,MAQA,IAAIlf,IAAI,CAACkB,KAAL,KAAe,IAAnB,EAAyB;AAC9BlB,QAAAA,IAAI,CAACkB,KAAL,CAAWb,MAAX,GAAoBL,IAApB;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAACkB,KAAZ;AACA;AACD;;AAED,UAAIlB,IAAI,KAAKkf,YAAb,EAA2B;AACzB;AACD;;AACD,aAAOlf,IAAI,CAACmB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,YAAInB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgB6e,YAA5C,EAA0D;AACxD;AACD;;AAED,YAAIsoB,eAAe,KAAKxnC,IAAxB,EAA8B;AAC5BwnC,UAAAA,eAAe,GAAG,IAAlB;AACD;;AAEDxnC,QAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AAED,UAAImnC,eAAe,KAAKxnC,IAAxB,EAA8B;AAC5BwnC,QAAAA,eAAe,GAAG,IAAlB;AACD;;AAEDxnC,MAAAA,IAAI,CAACmB,OAAL,CAAad,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,MAAAA,IAAI,GAAGA,IAAI,CAACmB,OAAZ;AACD;AACF;AACF;;AAED,SAASmmC,eAAT,CAAyBpoB,YAAzB,EAA8C;AAC5C,QAAMsD,GAAG,GAAGtD,YAAY,CAACsD,GAAzB;;AACA,MAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChB,UAAM5R,QAAQ,GAAGsO,YAAY,CAAC7d,SAA9B;AACA,QAAIomC,aAAJ;;AACA,YAAQvoB,YAAY,CAACnhB,GAArB;AACE,WAAKtE,aAAL;AACEguC,QAAAA,aAAa,GAAGv5B,iBAAiB,CAAC0C,QAAD,CAAjC;AACA;;AACF;AACE62B,QAAAA,aAAa,GAAG72B,QAAhB;AALJ,KAHgB;;AAchB,QAAI,OAAO4R,GAAP,KAAe,UAAnB,EAA+B;AAC7B,UAAI2jB,MAAJ;;AACA,MAWO;AACLA,QAAAA,MAAM,GAAG3jB,GAAG,CAACilB,aAAD,CAAZ;AACD;AAUF,KAzBD,MAyBO;AACL;AAUAjlB,MAAAA,GAAG,CAAClhB,OAAJ,GAAcmmC,aAAd;AACD;AACF;AACF;;AA0BD,SAASC,mBAAT,CAA6B5pC,KAA7B,EAA2C;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMoC,SAAS,GAAGpC,KAAK,CAACoC,SAAxB;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBA,IAAAA,SAAS,CAACG,MAAV,GAAmB,IAAnB;AACD;;AACDvC,EAAAA,KAAK,CAACuC,MAAN,GAAe,IAAf;AACD;;AAED,SAASsnC,uBAAT,CAAiC7pC,KAAjC,EAA+C;AAC7C,QAAMoC,SAAS,GAAGpC,KAAK,CAACoC,SAAxB;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtBpC,IAAAA,KAAK,CAACoC,SAAN,GAAkB,IAAlB;AACAynC,IAAAA,uBAAuB,CAACznC,SAAD,CAAvB;AACD,GAL4C;AAQ7C;;;AACA,EAeO;AACL;AACA;AACA;AACA;AACA;AACA;AACApC,IAAAA,KAAK,CAACoD,KAAN,GAAc,IAAd;AACApD,IAAAA,KAAK,CAAC4lB,SAAN,GAAkB,IAAlB;AACA5lB,IAAAA,KAAK,CAACqD,OAAN,GAAgB,IAAhB,CATK;AAYL;AACA;AACA;;AACA,QAAIrD,KAAK,CAACC,GAAN,KAActE,aAAlB,EAAiC;AAC/B,YAAMmuC,YAAsB,GAAG9pC,KAAK,CAACuD,SAArC;AAID;;AACDvD,IAAAA,KAAK,CAACuD,SAAN,GAAkB,IAAlB,CArBK;AAwBL;AASA,IAAkC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACAvD,MAAAA,KAAK,CAACuC,MAAN,GAAe,IAAf;AACAvC,MAAAA,KAAK,CAAC0c,YAAN,GAAqB,IAArB;AACA1c,MAAAA,KAAK,CAACyjB,aAAN,GAAsB,IAAtB;AACAzjB,MAAAA,KAAK,CAACuY,aAAN,GAAsB,IAAtB;AACAvY,MAAAA,KAAK,CAACikB,YAAN,GAAqB,IAArB;AACAjkB,MAAAA,KAAK,CAACuD,SAAN,GAAkB,IAAlB,CAbgC;;AAehCvD,MAAAA,KAAK,CAACgd,WAAN,GAAoB,IAApB;AACD;AACF;AACF;;AAiBD,SAAS+sB,kBAAT,CAA4B/pC,KAA5B,EAAiD;AAC/C,MAAI0D,MAAM,GAAG1D,KAAK,CAACuC,MAAnB;;AACA,SAAOmB,MAAM,KAAK,IAAlB,EAAwB;AACtB,QAAIsmC,YAAY,CAACtmC,MAAD,CAAhB,EAA0B;AACxB,aAAOA,MAAP;AACD;;AACDA,IAAAA,MAAM,GAAGA,MAAM,CAACnB,MAAhB;AACD;;AAED,QAAM,IAAIM,KAAJ,CACJ,0EACE,iCAFE,CAAN;AAID;;AAED,SAASmnC,YAAT,CAAsBhqC,KAAtB,EAA6C;AAC3C,SACEA,KAAK,CAACC,GAAN,KAActE,aAAd,IACAqE,KAAK,CAACC,GAAN,KAAcxE,QADd,IAEAuE,KAAK,CAACC,GAAN,KAAcvE,UAHhB;AAKD;;AAED,SAASuuC,cAAT,CAAwBjqC,KAAxB,EAAiD;AAC/C;AACA;AACA;AACA;AACA,MAAIkC,IAAW,GAAGlC,KAAlB;;AACAkqC,EAAAA,QAAQ,EAAE,OAAO,IAAP,EAAa;AACrB;AACA,WAAOhoC,IAAI,CAACmB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,UAAInB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBynC,YAAY,CAAC9nC,IAAI,CAACK,MAAN,CAAxC,EAAuD;AACrD;AACA;AACA,eAAO,IAAP;AACD;;AACDL,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AACDL,IAAAA,IAAI,CAACmB,OAAL,CAAad,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,IAAAA,IAAI,GAAGA,IAAI,CAACmB,OAAZ;;AACA,WACEnB,IAAI,CAACjC,GAAL,KAAatE,aAAb,IACAuG,IAAI,CAACjC,GAAL,KAAarE,QADb,IAEAsG,IAAI,CAACjC,GAAL,KAAazD,kBAHf,EAIE;AACA;AACA;AACA,UAAI0F,IAAI,CAACI,KAAL,GAAalC,SAAjB,EAA4B;AAC1B;AACA,iBAAS8pC,QAAT;AACD,OAND;AAQA;;;AACA,UAAIhoC,IAAI,CAACkB,KAAL,KAAe,IAAf,IAAuBlB,IAAI,CAACjC,GAAL,KAAavE,UAAxC,EAAoD;AAClD,iBAASwuC,QAAT;AACD,OAFD,MAEO;AACLhoC,QAAAA,IAAI,CAACkB,KAAL,CAAWb,MAAX,GAAoBL,IAApB;AACAA,QAAAA,IAAI,GAAGA,IAAI,CAACkB,KAAZ;AACD;AACF,KA/BoB;;;AAiCrB,QAAI,EAAElB,IAAI,CAACI,KAAL,GAAalC,SAAf,CAAJ,EAA+B;AAC7B;AACA,aAAO8B,IAAI,CAACqB,SAAZ;AACD;AACF;AACF;;AAED,SAAS4mC,eAAT,CAAyB/oB,YAAzB,EAAoD;AAClD;;AAKA,QAAMgpB,WAAW,GAAGL,kBAAkB,CAAC3oB,YAAD,CAAtC,CANkD;;AASlD,UAAQgpB,WAAW,CAACnqC,GAApB;AACE,SAAKtE,aAAL;AAAoB;AAClB,cAAM+H,MAAgB,GAAG0mC,WAAW,CAAC7mC,SAArC;;AACA,YAAI6mC,WAAW,CAAC9nC,KAAZ,GAAoB/B,YAAxB,EAAsC;AACpC;AAGA6pC,UAAAA,WAAW,CAAC9nC,KAAZ,IAAqB,CAAC/B,YAAtB;AACD;;AAED,cAAM8pC,MAAM,GAAGJ,cAAc,CAAC7oB,YAAD,CAA7B,CATkB;AAWlB;;AACAkpB,QAAAA,2BAA2B,CAAClpB,YAAD,EAAeipB,MAAf,EAAuB3mC,MAAvB,CAA3B;AACA;AACD;;AACD,SAAKjI,QAAL;AACA,SAAKC,UAAL;AAAiB;AACf,cAAMgI,MAAiB,GAAG0mC,WAAW,CAAC7mC,SAAZ,CAAsBkO,aAAhD;AACA,cAAM44B,MAAM,GAAGJ,cAAc,CAAC7oB,YAAD,CAA7B;AACAmpB,QAAAA,wCAAwC,CAACnpB,YAAD,EAAeipB,MAAf,EAAuB3mC,MAAvB,CAAxC;AACA;AACD;AACD;;AACA;AACE,YAAM,IAAIb,KAAJ,CACJ,qEACE,iCAFE,CAAN;AAzBJ;AA8BD;;AAED,SAAS0nC,wCAAT,CACEroC,IADF,EAEEmoC,MAFF,EAGE3mC,MAHF,EAIQ;AAAA,QACCzD,GADD,GACQiC,IADR,CACCjC,GADD;AAEN,QAAMuqC,MAAM,GAAGvqC,GAAG,KAAKtE,aAAR,IAAyBsE,GAAG,KAAKrE,QAAhD;;AACA,MAAI4uC,MAAJ,EAAY;AACV,UAAMjnC,SAAS,GAAGrB,IAAI,CAACqB,SAAvB;;AACA,QAAI8mC,MAAJ,EAAY;AACV/2B,MAAAA,uBAAuB,CAAC5P,MAAD,EAASH,SAAT,EAAoB8mC,MAApB,CAAvB;AACD,KAFD,MAEO;AACLh3B,MAAAA,sBAAsB,CAAC3P,MAAD,EAASH,SAAT,CAAtB;AACD;AACF,GAPD,MAOO,IAAItD,GAAG,KAAKvE,UAAZ,EAAwB,CAAxB,MAIA;AACL,UAAM0H,KAAK,GAAGlB,IAAI,CAACkB,KAAnB;;AACA,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBmnC,MAAAA,wCAAwC,CAACnnC,KAAD,EAAQinC,MAAR,EAAgB3mC,MAAhB,CAAxC;AACA,UAAIL,OAAO,GAAGD,KAAK,CAACC,OAApB;;AACA,aAAOA,OAAO,KAAK,IAAnB,EAAyB;AACvBknC,QAAAA,wCAAwC,CAAClnC,OAAD,EAAUgnC,MAAV,EAAkB3mC,MAAlB,CAAxC;AACAL,QAAAA,OAAO,GAAGA,OAAO,CAACA,OAAlB;AACD;AACF;AACF;AACF;;AAED,SAASinC,2BAAT,CACEpoC,IADF,EAEEmoC,MAFF,EAGE3mC,MAHF,EAIQ;AAAA,QACCzD,GADD,GACQiC,IADR,CACCjC,GADD;AAEN,QAAMuqC,MAAM,GAAGvqC,GAAG,KAAKtE,aAAR,IAAyBsE,GAAG,KAAKrE,QAAhD;;AACA,MAAI4uC,MAAJ,EAAY;AACV,UAAMjnC,SAAS,GAAGrB,IAAI,CAACqB,SAAvB;;AACA,QAAI8mC,MAAJ,EAAY;AACVt5B,MAAAA,YAAY,CAACrN,MAAD,EAASH,SAAT,EAAoB8mC,MAApB,CAAZ;AACD,KAFD,MAEO;AACL35B,MAAAA,WAAW,CAAChN,MAAD,EAASH,SAAT,CAAX;AACD;AACF,GAPD,MAOO,IAAItD,GAAG,KAAKvE,UAAZ,EAAwB,CAAxB,MAIA;AACL,UAAM0H,KAAK,GAAGlB,IAAI,CAACkB,KAAnB;;AACA,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBknC,MAAAA,2BAA2B,CAAClnC,KAAD,EAAQinC,MAAR,EAAgB3mC,MAAhB,CAA3B;AACA,UAAIL,OAAO,GAAGD,KAAK,CAACC,OAApB;;AACA,aAAOA,OAAO,KAAK,IAAnB,EAAyB;AACvBinC,QAAAA,2BAA2B,CAACjnC,OAAD,EAAUgnC,MAAV,EAAkB3mC,MAAlB,CAA3B;AACAL,QAAAA,OAAO,GAAGA,OAAO,CAACA,OAAlB;AACD;AACF;AACF;AACF;AAGD;AACA;AACA;;;AACA,IAAIonC,UAAuC,GAAG,IAA9C;AACA,IAAIC,qBAA8B,GAAG,KAArC;;AAEA,SAASC,qBAAT,CACEllC,IADF,EAEE8e,WAFF,EAGEqmB,YAHF,EAIE;AACA,EAAsB;AACpB;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,QAAIlnC,MAAM,GAAG6gB,WAAb;;AACAsmB,IAAAA,UAAU,EAAE,OAAOnnC,MAAM,KAAK,IAAlB,EAAwB;AAClC,cAAQA,MAAM,CAACzD,GAAf;AACE,aAAKtE,aAAL;AAAoB;AAClB8uC,YAAAA,UAAU,GAAG/mC,MAAM,CAACH,SAApB;AACAmnC,YAAAA,qBAAqB,GAAG,KAAxB;AACA,kBAAMG,UAAN;AACD;;AACD,aAAKpvC,QAAL;AAAe;AACbgvC,YAAAA,UAAU,GAAG/mC,MAAM,CAACH,SAAP,CAAiBkO,aAA9B;AACAi5B,YAAAA,qBAAqB,GAAG,IAAxB;AACA,kBAAMG,UAAN;AACD;;AACD,aAAKnvC,UAAL;AAAiB;AACf+uC,YAAAA,UAAU,GAAG/mC,MAAM,CAACH,SAAP,CAAiBkO,aAA9B;AACAi5B,YAAAA,qBAAqB,GAAG,IAAxB;AACA,kBAAMG,UAAN;AACD;AAfH;;AAiBAnnC,MAAAA,MAAM,GAAGA,MAAM,CAACnB,MAAhB;AACD;;AACD,QAAIkoC,UAAU,KAAK,IAAnB,EAAyB;AACvB,YAAM,IAAI5nC,KAAJ,CACJ,oEACE,uCAFE,CAAN;AAID;;AACDioC,IAAAA,4BAA4B,CAACrlC,IAAD,EAAO8e,WAAP,EAAoBqmB,YAApB,CAA5B;AACAH,IAAAA,UAAU,GAAG,IAAb;AACAC,IAAAA,qBAAqB,GAAG,KAAxB;AACD,GAjDD;;AAsDAd,EAAAA,mBAAmB,CAACgB,YAAD,CAAnB;AACD;;AAED,SAASG,kCAAT,CACE3B,YADF,EAEElB,sBAFF,EAGExkC,MAHF,EAIE;AACA;AACA,MAAIN,KAAK,GAAGM,MAAM,CAACN,KAAnB;;AACA,SAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrB0nC,IAAAA,4BAA4B,CAAC1B,YAAD,EAAelB,sBAAf,EAAuC9kC,KAAvC,CAA5B;AACAA,IAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;AACF;;AAED,SAASynC,4BAAT,CACE1B,YADF,EAEElB,sBAFF,EAGE0C,YAHF,EAIE;AACAnkC,EAAAA,eAAe,CAACmkC,YAAD,CAAf,CADA;AAIA;AACA;;AACA,UAAQA,YAAY,CAAC3qC,GAArB;AACE,SAAKtE,aAAL;AAAoB;AAClB,QAAgC;AAC9BysC,UAAAA,eAAe,CAACwC,YAAD,EAAe1C,sBAAf,CAAf;AACD,SAHiB;;AAKnB;AACD;;AACA,SAAKtsC,QAAL;AAAe;AACb;AACA;AACA;AACA,QAAsB;AACpB,gBAAMovC,cAAc,GAAGP,UAAvB;AACA,gBAAMQ,yBAAyB,GAAGP,qBAAlC;AACAD,UAAAA,UAAU,GAAG,IAAb;AACAM,UAAAA,kCAAkC,CAChC3B,YADgC,EAEhClB,sBAFgC,EAGhC0C,YAHgC,CAAlC;AAKAH,UAAAA,UAAU,GAAGO,cAAb;AACAN,UAAAA,qBAAqB,GAAGO,yBAAxB;;AAEA,cAAIR,UAAU,KAAK,IAAnB,EAAyB;AACvB;AACA;AACA,gBAAIC,qBAAJ,EAA2B;AACzBn3B,cAAAA,wBAAwB,CACpBk3B,UADoB,EAErBG,YAAY,CAACrnC,SAFQ,CAAxB;AAID,aALD,MAKO;AACL2N,cAAAA,WAAW,CACPu5B,UADO,EAERG,YAAY,CAACrnC,SAFL,CAAX;AAID;AACF;AACF,SA3BD;;AAkCA;AACD;;AACD,SAAK/G,kBAAL;AAAyB;AACvB,AAYA;;;AACA,QAAsB;AACpB,cAAIiuC,UAAU,KAAK,IAAnB,EAAyB;AACvB,gBAAIC,qBAAJ,EAA2B;AACzB36B,cAAAA,kCAAkC,CAC9B06B,UAD8B,EAE/BG,YAAY,CAACrnC,SAFkB,CAAlC;AAID,aALD,MAKO;AACLuM,cAAAA,qBAAqB,CACjB26B,UADiB,EAElBG,YAAY,CAACrnC,SAFK,CAArB;AAID;AACF;AACF;;AACD;AACD;;AACD,SAAK7H,UAAL;AAAiB;AACf,QAAsB;AACpB;AACA,gBAAMsvC,cAAc,GAAGP,UAAvB;AACA,gBAAMQ,yBAAyB,GAAGP,qBAAlC;AACAD,UAAAA,UAAU,GAAGG,YAAY,CAACrnC,SAAb,CAAuBkO,aAApC;AACAi5B,UAAAA,qBAAqB,GAAG,IAAxB;AACAK,UAAAA,kCAAkC,CAChC3B,YADgC,EAEhClB,sBAFgC,EAGhC0C,YAHgC,CAAlC;AAKAH,UAAAA,UAAU,GAAGO,cAAb;AACAN,UAAAA,qBAAqB,GAAGO,yBAAxB;AACD,SAbD;;AAsBA;AACD;;AACD,SAAK3vC,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKG,aAAL;AACA,SAAKC,mBAAL;AAA0B;AACxB,QAAgC;AAC9B,gBAAM2gB,WAAgD,GAAI4tB,YAAY,CAAC5tB,WAAvE;;AACA,cAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,kBAAMwS,UAAU,GAAGxS,WAAW,CAACwS,UAA/B;;AACA,gBAAIA,UAAU,KAAK,IAAnB,EAAyB;AACvB,oBAAM2D,WAAW,GAAG3D,UAAU,CAACpS,IAA/B;AAEA,kBAAIkE,MAAM,GAAG6R,WAAb;;AACA,iBAAG;AAAA,gCACsB7R,MADtB;AAAA,sBACM2R,OADN,WACMA,OADN;AAAA,sBACehzB,GADf,WACeA,GADf;;AAED,oBAAIgzB,OAAO,KAAK3sB,SAAhB,EAA2B;AACzB,sBAAI,CAACrG,GAAG,GAAG4zB,SAAP,MAA0BqX,SAA9B,EAA4C;AAC1C5C,oBAAAA,iBAAiB,CACfsC,YADe,EAEf1C,sBAFe,EAGfjV,OAHe,CAAjB;AAKD,mBAND,MAMO,IAAI,CAAChzB,GAAG,GAAG+zB,MAAP,MAAuBkX,SAA3B,EAAyC;AAC9C;AAIA,oBAYO;AACL5C,sBAAAA,iBAAiB,CACfsC,YADe,EAEf1C,sBAFe,EAGfjV,OAHe,CAAjB;AAKD;AAKF;AACF;;AACD3R,gBAAAA,MAAM,GAAGA,MAAM,CAAClE,IAAhB;AACD,eAxCD,QAwCSkE,MAAM,KAAK6R,WAxCpB;AAyCD;AACF;AACF;;AAED4X,QAAAA,kCAAkC,CAChC3B,YADgC,EAEhClB,sBAFgC,EAGhC0C,YAHgC,CAAlC;AAKA;AACD;;AACD,SAAKrvC,cAAL;AAAqB;AACnB,QAAgC;AAC9B6sC,UAAAA,eAAe,CAACwC,YAAD,EAAe1C,sBAAf,CAAf;AACA,gBAAMp1B,QAAQ,GAAG83B,YAAY,CAACrnC,SAA9B;;AACA,cAAI,OAAOuP,QAAQ,CAACk1B,oBAAhB,KAAyC,UAA7C,EAAyD;AACvDC,YAAAA,8BAA8B,CAC5B2C,YAD4B,EAE5B1C,sBAF4B,EAG5Bp1B,QAH4B,CAA9B;AAKD;AACF;;AACDi4B,QAAAA,kCAAkC,CAChC3B,YADgC,EAEhClB,sBAFgC,EAGhC0C,YAHgC,CAAlC;AAKA;AACD;;AACD,SAAKluC,cAAL;AAAqB;AACnB;AAGAquC,QAAAA,kCAAkC,CAChC3B,YADgC,EAEhClB,sBAFgC,EAGhC0C,YAHgC,CAAlC;AAKA;AACD;;AACD,SAAKjuC,kBAAL;AAAyB;AACvB,QAuBO;AACLouC,UAAAA,kCAAkC,CAChC3B,YADgC,EAEhClB,sBAFgC,EAGhC0C,YAHgC,CAAlC;AAKD;;AACD;AACD;;AACD;AAAS;AACPG,QAAAA,kCAAkC,CAChC3B,YADgC,EAEhClB,sBAFgC,EAGhC0C,YAHgC,CAAlC;AAKA;AACD;AA9OH;AAgPD;;AACD,SAASO,sBAAT,CAAgC/pB,YAAhC,EAAqD;AACnD;AACA,QAAMZ,QAA8B,GAAGY,YAAY,CAAC7I,aAApD;AAcD;;AAiCD,SAAS6yB,4BAAT,CAAsChqB,YAAtC,EAA2D;AACzD;AACA;AACA;AACA,QAAM+Z,SAA+B,GAAI/Z,YAAY,CAACpE,WAAtD;;AACA,MAAIme,SAAS,KAAK,IAAlB,EAAwB;AACtB/Z,IAAAA,YAAY,CAACpE,WAAb,GAA2B,IAA3B;AACA,QAAIquB,UAAU,GAAGjqB,YAAY,CAAC7d,SAA9B;;AACA,QAAI8nC,UAAU,KAAK,IAAnB,EAAyB;AACvBA,MAAAA,UAAU,GAAGjqB,YAAY,CAAC7d,SAAb,GAAyB,IAAIqkC,eAAJ,EAAtC;AACD;;AACDzM,IAAAA,SAAS,CAAC9S,OAAV,CAAkBnhB,QAAQ,IAAI;AAC5B;AACA,YAAM87B,KAAK,GAAGsI,oBAAoB,CAAClb,IAArB,CAA0B,IAA1B,EAAgChP,YAAhC,EAA8Cla,QAA9C,CAAd;;AACA,UAAI,CAACmkC,UAAU,CAACzQ,GAAX,CAAe1zB,QAAf,CAAL,EAA+B;AAC7BmkC,QAAAA,UAAU,CAACxQ,GAAX,CAAe3zB,QAAf;;AAeAA,QAAAA,QAAQ,CAAC8zB,IAAT,CAAcgI,KAAd,EAAqBA,KAArB;AACD;AACF,KArBD;AAsBD;AACF;AAGD,AAgBO,SAASuI,qBAAT,CACL9lC,IADK,EAEL2b,YAFK,EAGLioB,cAHK,EAIL;AACAmC,AAIAC,EAAAA,4BAA4B,CAACrqB,YAAD,EAAe3b,IAAf,AAAA,CAA5B;AACAojC,AAID;;AAED,SAAS6C,kCAAT,CACEjmC,IADF,EAEE2kC,WAFF,EAGEpjC,KAHF,EAIE;AACA;AACA;AACA,QAAM4e,SAAS,GAAGwkB,WAAW,CAACxkB,SAA9B;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB,SAAK,IAAI5X,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4X,SAAS,CAAC1N,MAA9B,EAAsClK,CAAC,EAAvC,EAA2C;AACzC,YAAM2X,aAAa,GAAGC,SAAS,CAAC5X,CAAD,CAA/B;;AACA,UAAI;AACF28B,QAAAA,qBAAqB,CAACllC,IAAD,EAAO2kC,WAAP,EAAoBzkB,aAApB,CAArB;AACD,OAFD,CAEE,OAAOxN,KAAP,EAAc;AACdgwB,QAAAA,uBAAuB,CAACxiB,aAAD,EAAgBykB,WAAhB,EAA6BjyB,KAA7B,CAAvB;AACD;AACF;AACF;;AAGD,MAAIiyB,WAAW,CAAC3H,YAAZ,GAA2B7gC,YAA/B,EAA6C;AAC3C,QAAIwB,KAAK,GAAGgnC,WAAW,CAAChnC,KAAxB;;AACA,WAAOA,KAAK,KAAK,IAAjB,EAAuB;AACrBylC,AACA4C,MAAAA,4BAA4B,CAACroC,KAAD,EAAQqC,IAAR,AAAA,CAA5B;AACArC,MAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;AACD;AACF;AAEF;;AAED,SAASooC,4BAAT,CACErqB,YADF,EAEE3b,IAFF,EAGEuB,KAHF,EAIE;AACA,QAAMxD,OAAO,GAAG4d,YAAY,CAAChf,SAA7B;AACA,QAAME,KAAK,GAAG8e,YAAY,CAAC9e,KAA3B,CAFA;AAKA;AACA;;AACA,UAAQ8e,YAAY,CAACnhB,GAArB;AACE,SAAK3E,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKG,aAAL;AACA,SAAKC,mBAAL;AAA0B;AACxBqvC,QAAAA,kCAAkC,CAACjmC,IAAD,EAAO2b,YAAP,AAAA,CAAlC;AACAuqB,QAAAA,2BAA2B,CAACvqB,YAAD,CAA3B;;AAEA,YAAI9e,KAAK,GAAGjC,MAAZ,EAAoB;AAClB,cAAI;AACF4oC,YAAAA,2BAA2B,CACzBpV,SAAa,GAAGhC,SADS,EAEzBzQ,YAFyB,EAGzBA,YAAY,CAAC7e,MAHY,CAA3B;AAKA2mC,YAAAA,yBAAyB,CACvBrV,SAAa,GAAGhC,SADO,EAEvBzQ,YAFuB,CAAzB;AAID,WAVD,CAUE,OAAOjJ,KAAP,EAAc;AACdgwB,YAAAA,uBAAuB,CAAC/mB,YAAD,EAAeA,YAAY,CAAC7e,MAA5B,EAAoC4V,KAApC,CAAvB;AACD,WAbiB;AAelB;AACA;AACA;AACA;;;AACA,UAgBO;AACL,gBAAI;AACF8wB,cAAAA,2BAA2B,CACzBjV,MAAU,GAAGnC,SADY,EAEzBzQ,YAFyB,EAGzBA,YAAY,CAAC7e,MAHY,CAA3B;AAKD,aAND,CAME,OAAO4V,KAAP,EAAc;AACdgwB,cAAAA,uBAAuB,CAAC/mB,YAAD,EAAeA,YAAY,CAAC7e,MAA5B,EAAoC4V,KAApC,CAAvB;AACD;AACF;AACF;;AACD;AACD;;AACD,SAAK5c,cAAL;AAAqB;AACnBmwC,QAAAA,kCAAkC,CAACjmC,IAAD,EAAO2b,YAAP,AAAA,CAAlC;AACAuqB,QAAAA,2BAA2B,CAACvqB,YAAD,CAA3B;;AAEA,YAAI9e,KAAK,GAAG3B,GAAZ,EAAiB;AACf,cAAI6C,OAAO,KAAK,IAAhB,EAAsB;AACpB4kC,YAAAA,eAAe,CAAC5kC,OAAD,EAAUA,OAAO,CAACjB,MAAlB,CAAf;AACD;AACF;;AACD;AACD;;AACD,SAAK5G,aAAL;AAAoB;AAClB+vC,QAAAA,kCAAkC,CAACjmC,IAAD,EAAO2b,YAAP,AAAA,CAAlC;AACAuqB,QAAAA,2BAA2B,CAACvqB,YAAD,CAA3B;;AAEA,YAAI9e,KAAK,GAAG3B,GAAZ,EAAiB;AACf,cAAI6C,OAAO,KAAK,IAAhB,EAAsB;AACpB4kC,YAAAA,eAAe,CAAC5kC,OAAD,EAAUA,OAAO,CAACjB,MAAlB,CAAf;AACD;AACF;;AACD,QAAsB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,cAAI6e,YAAY,CAAC9e,KAAb,GAAqB/B,YAAzB,EAAuC;AACrC,kBAAMuS,QAAkB,GAAGsO,YAAY,CAAC7d,SAAxC;;AACA,gBAAI;AACF6P,cAAAA,gBAAgB,CAACN,QAAD,CAAhB;AACD,aAFD,CAEE,OAAOqF,KAAP,EAAc;AACdgwB,cAAAA,uBAAuB,CAAC/mB,YAAD,EAAeA,YAAY,CAAC7e,MAA5B,EAAoC4V,KAApC,CAAvB;AACD;AACF;;AAED,cAAI7V,KAAK,GAAGjC,MAAZ,EAAoB;AAClB,kBAAMyS,QAAkB,GAAGsO,YAAY,CAAC7d,SAAxC;;AACA,gBAAIuP,QAAQ,IAAI,IAAhB,EAAsB;AACpB;AACA,oBAAMX,QAAQ,GAAGiP,YAAY,CAACqC,aAA9B,CAFoB;AAIpB;AACA;;AACA,oBAAMvR,QAAQ,GACZ1O,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAACigB,aAA3B,GAA2CtR,QAD7C;AAEA,oBAAMlT,IAAI,GAAGmiB,YAAY,CAACniB,IAA1B,CARoB;;AAUpB,oBAAM8T,aAAmC,GAAIqO,YAAY,CAACpE,WAA1D;AACAoE,cAAAA,YAAY,CAACpE,WAAb,GAA2B,IAA3B;;AACA,kBAAIjK,aAAa,KAAK,IAAtB,EAA4B;AAC1B,oBAAI;AACFF,kBAAAA,YAAY,CACVC,QADU,EAEVC,aAFU,EAGV9T,IAHU,EAIViT,QAJU,EAKVC,QALU,EAMViP,YANU,CAAZ;AAQD,iBATD,CASE,OAAOjJ,KAAP,EAAc;AACdgwB,kBAAAA,uBAAuB,CACrB/mB,YADqB,EAErBA,YAAY,CAAC7e,MAFQ,EAGrB4V,KAHqB,CAAvB;AAKD;AACF;AACF;AACF;AACF;;AACD;AACD;;AACD,SAAKvc,QAAL;AAAe;AACb8vC,QAAAA,kCAAkC,CAACjmC,IAAD,EAAO2b,YAAP,AAAA,CAAlC;AACAuqB,QAAAA,2BAA2B,CAACvqB,YAAD,CAA3B;;AAEA,YAAI9e,KAAK,GAAGjC,MAAZ,EAAoB;AAClB,UAAsB;AACpB,gBAAI+gB,YAAY,CAAC7d,SAAb,KAA2B,IAA/B,EAAqC;AACnC,oBAAM,IAAIV,KAAJ,CACJ,oEACE,iDAFE,CAAN;AAID;;AAED,kBAAMoQ,YAA0B,GAAGmO,YAAY,CAAC7d,SAAhD;AACA,kBAAM4P,OAAe,GAAGiO,YAAY,CAACqC,aAArC,CAToB;AAWpB;AACA;;AACA,kBAAMvQ,OAAe,GACnB1P,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAACigB,aAA3B,GAA2CtQ,OAD7C;;AAGA,gBAAI;AACFH,cAAAA,gBAAgB,CAACC,YAAD,EAAeC,OAAf,EAAwBC,OAAxB,CAAhB;AACD,aAFD,CAEE,OAAOgF,KAAP,EAAc;AACdgwB,cAAAA,uBAAuB,CAAC/mB,YAAD,EAAeA,YAAY,CAAC7e,MAA5B,EAAoC4V,KAApC,CAAvB;AACD;AACF;AACF;;AACD;AACD;;AACD,SAAK1c,QAAL;AAAe;AACbiwC,QAAAA,kCAAkC,CAACjmC,IAAD,EAAO2b,YAAP,AAAA,CAAlC;AACAuqB,QAAAA,2BAA2B,CAACvqB,YAAD,CAA3B;;AA6BA;AACD;;AACD,SAAK1lB,UAAL;AAAiB;AACfgwC,QAAAA,kCAAkC,CAACjmC,IAAD,EAAO2b,YAAP,AAAA,CAAlC;AACAuqB,QAAAA,2BAA2B,CAACvqB,YAAD,CAA3B;;AAcA;AACD;;AACD,SAAKjlB,iBAAL;AAAwB;AACtBuvC,QAAAA,kCAAkC,CAACjmC,IAAD,EAAO2b,YAAP,AAAA,CAAlC;AACAuqB,QAAAA,2BAA2B,CAACvqB,YAAD,CAA3B;AAEA,cAAMslB,cAAqB,GAAItlB,YAAY,CAAChe,KAA5C;;AAEA,YAAIsjC,cAAc,CAACpkC,KAAf,GAAuBvB,UAA3B,EAAuC;AACrC,gBAAM6qC,iBAAoC,GAAGlF,cAAc,CAACnjC,SAA5D;AACA,gBAAMid,QAA+B,GAAGkmB,cAAc,CAACnuB,aAAvD;AACA,gBAAMzG,QAAQ,GAAG0O,QAAQ,KAAK,IAA9B,CAHqC;AAMrC;;AACAorB,UAAAA,iBAAiB,CAAC95B,QAAlB,GAA6BA,QAA7B;;AAEA,cAAIA,QAAJ,EAAc;AACZ,kBAAM+5B,SAAS,GACbnF,cAAc,CAACtkC,SAAf,KAA6B,IAA7B,IACAskC,cAAc,CAACtkC,SAAf,CAAyBmW,aAAzB,KAA2C,IAF7C;;AAGA,gBAAI,CAACszB,SAAL,EAAgB;AACd;AACAC,cAAAA,wBAAwB;AACzB;AACF;AACF;;AAED,YAAIxpC,KAAK,GAAGjC,MAAZ,EAAoB;AAClB,cAAI;AACF8qC,YAAAA,sBAAsB,CAAC/pB,YAAD,CAAtB;AACD,WAFD,CAEE,OAAOjJ,KAAP,EAAc;AACdgwB,YAAAA,uBAAuB,CAAC/mB,YAAD,EAAeA,YAAY,CAAC7e,MAA5B,EAAoC4V,KAApC,CAAvB;AACD;;AACDizB,UAAAA,4BAA4B,CAAChqB,YAAD,CAA5B;AACD;;AACD;AACD;;AACD,SAAKzkB,kBAAL;AAAyB;AACvB,cAAMkvC,SAAS,GAAGroC,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAAC+U,aAAR,KAA0B,IAAhE;;AAEA,QAYO;AACLmzB,UAAAA,kCAAkC,CAACjmC,IAAD,EAAO2b,YAAP,AAAA,CAAlC;AACD;;AAEDuqB,QAAAA,2BAA2B,CAACvqB,YAAD,CAA3B;;AAEA,YAAI9e,KAAK,GAAGvB,UAAZ,EAAwB;AACtB,gBAAM6qC,iBAAoC,GAAGxqB,YAAY,CAAC7d,SAA1D;AACA,gBAAMid,QAA+B,GAAGY,YAAY,CAAC7I,aAArD;AACA,gBAAMzG,QAAQ,GAAG0O,QAAQ,KAAK,IAA9B;AACA,gBAAMurB,iBAAwB,GAAG3qB,YAAjC,CAJsB;AAOtB;;AACAwqB,UAAAA,iBAAiB,CAAC95B,QAAlB,GAA6BA,QAA7B;;AAsBA,UAAsB;AACpB;AACA;AACA23B,YAAAA,uBAAuB,CAACsC,iBAAD,EAAoBj6B,QAApB,CAAvB;AACD;AACF;;AACD;AACD;;AACD,SAAKrV,qBAAL;AAA4B;AAC1BivC,QAAAA,kCAAkC,CAACjmC,IAAD,EAAO2b,YAAP,AAAA,CAAlC;AACAuqB,QAAAA,2BAA2B,CAACvqB,YAAD,CAA3B;;AAEA,YAAI9e,KAAK,GAAGjC,MAAZ,EAAoB;AAClB+qC,UAAAA,4BAA4B,CAAChqB,YAAD,CAA5B;AACD;;AACD;AACD;;AACD,SAAK1kB,cAAL;AAAqB;AACnB;AAiBA;AACD;;AACD;AAAS;AACPgvC,QAAAA,kCAAkC,CAACjmC,IAAD,EAAO2b,YAAP,AAAA,CAAlC;AACAuqB,QAAAA,2BAA2B,CAACvqB,YAAD,CAA3B;AAEA;AACD;AApVH;AAsVD;;AACD,SAASuqB,2BAAT,CAAqCvqB,YAArC,EAA0D;AACxD;AACA;AACA;AACA,QAAM9e,KAAK,GAAG8e,YAAY,CAAC9e,KAA3B;;AACA,MAAIA,KAAK,GAAGlC,SAAZ,EAAuB;AACrB,QAAI;AACF+pC,MAAAA,eAAe,CAAC/oB,YAAD,CAAf;AACD,KAFD,CAEE,OAAOjJ,KAAP,EAAc;AACdgwB,MAAAA,uBAAuB,CAAC/mB,YAAD,EAAeA,YAAY,CAAC7e,MAA5B,EAAoC4V,KAApC,CAAvB;AACD,KALoB;AAOrB;AACA;AACA;;;AACAiJ,IAAAA,YAAY,CAAC9e,KAAb,IAAsB,CAAClC,SAAvB;AACD;;AACD,MAAIkC,KAAK,GAAGxB,SAAZ,EAAuB;AACrBsgB,IAAAA,YAAY,CAAC9e,KAAb,IAAsB,CAACxB,SAAvB;AACD;AACF;;AAED,AAAO,SAASkrC,mBAAT,CACL5qB,YADK,EAEL3b,IAFK,EAGL4jC,cAHK,EAIC;AACNmC,AAEA1D,EAAAA,UAAU,GAAG1mB,YAAb;AAEA6qB,EAAAA,yBAAyB,CAAC7qB,YAAD,EAAe3b,IAAf,EAAqB4jC,cAArB,CAAzB;AAEAmC,AAED;;AAED,SAASS,yBAAT,CACEC,WADF,EAEEzmC,IAFF,EAGE4jC,cAHF,EAIE;AACA;AACA,QAAM8C,YAAY,GAAG,CAACD,WAAW,CAAC5gC,IAAZ,GAAmBlE,cAApB,MAAwCD,MAA7D;;AAEA,SAAO2gC,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM9nC,KAAK,GAAG8nC,UAAd;AACA,UAAM1E,UAAU,GAAGpjC,KAAK,CAACoD,KAAzB;;AAuDA,QAAI,CAACpD,KAAK,CAACyiC,YAAN,GAAqB5gC,UAAtB,MAAsC3B,OAAtC,IAAiDkjC,UAAU,KAAK,IAApE,EAA0E;AACxEA,MAAAA,UAAU,CAAC7gC,MAAX,GAAoBvC,KAApB;AACA8nC,MAAAA,UAAU,GAAG1E,UAAb;AACD,KAHD,MAGO;AACLgJ,MAAAA,iCAAiC,CAACF,WAAD,EAAczmC,IAAd,EAAoB4jC,cAApB,CAAjC;AACD;AACF;AACF;;AAED,SAAS+C,iCAAT,CACEF,WADF,EAEEzmC,IAFF,EAGE4jC,cAHF,EAIE;AACA,SAAOvB,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM9nC,KAAK,GAAG8nC,UAAd;;AACA,QAAI,CAAC9nC,KAAK,CAACsC,KAAN,GAAcT,UAAf,MAA+B3B,OAAnC,EAA4C;AAC1C,YAAMsD,OAAO,GAAGxD,KAAK,CAACoC,SAAtB;AACAymC;AACA,UAAI;AACFM,QAAAA,yBAAyB,CAAC1jC,IAAD,EAAOjC,OAAP,EAAgBxD,KAAhB,EAAuBqpC,cAAvB,CAAzB;AACD,OAFD,CAEE,OAAOlxB,KAAP,EAAc;AACdgwB,QAAAA,uBAAuB,CAACnoC,KAAD,EAAQA,KAAK,CAACuC,MAAd,EAAsB4V,KAAtB,CAAvB;AACD;AAEF;;AAED,QAAInY,KAAK,KAAKksC,WAAd,EAA2B;AACzBpE,MAAAA,UAAU,GAAG,IAAb;AACA;AACD;;AAED,UAAMzkC,OAAO,GAAGrD,KAAK,CAACqD,OAAtB;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBA,MAAAA,OAAO,CAACd,MAAR,GAAiBvC,KAAK,CAACuC,MAAvB;AACAulC,MAAAA,UAAU,GAAGzkC,OAAb;AACA;AACD;;AAEDykC,IAAAA,UAAU,GAAG9nC,KAAK,CAACuC,MAAnB;AACD;AACF;;AA+ID,AAAO,SAAS8pC,yBAAT,CACL5mC,IADK,EAEL2b,YAFK,EAGLioB,cAHK,EAILiD,oBAJK,EAKC;AACNxE,EAAAA,UAAU,GAAG1mB,YAAb;AACAmrB,EAAAA,+BAA+B,CAC7BnrB,YAD6B,EAE7B3b,IAF6B,EAG7B4jC,cAH6B,EAI7BiD,oBAJ6B,CAA/B;AAMD;;AAED,SAASC,+BAAT,CACEL,WADF,EAEEzmC,IAFF,EAGE4jC,cAHF,EAIEiD,oBAJF,EAKE;AACA,SAAOxE,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM9nC,KAAK,GAAG8nC,UAAd;AACA,UAAM1E,UAAU,GAAGpjC,KAAK,CAACoD,KAAzB;;AACA,QAAI,CAACpD,KAAK,CAACyiC,YAAN,GAAqB3gC,WAAtB,MAAuC5B,OAAvC,IAAkDkjC,UAAU,KAAK,IAArE,EAA2E;AACzEA,MAAAA,UAAU,CAAC7gC,MAAX,GAAoBvC,KAApB;AACA8nC,MAAAA,UAAU,GAAG1E,UAAb;AACD,KAHD,MAGO;AACLoJ,MAAAA,kCAAkC,CAChCN,WADgC,EAEhCzmC,IAFgC,EAGhC4jC,cAHgC,EAIhCiD,oBAJgC,CAAlC;AAMD;AACF;AACF;;AAED,SAASE,kCAAT,CACEN,WADF,EAEEzmC,IAFF,EAGE4jC,cAHF,EAIEiD,oBAJF,EAKE;AACA,SAAOxE,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM9nC,KAAK,GAAG8nC,UAAd;;AAEA,QAAI,CAAC9nC,KAAK,CAACsC,KAAN,GAAczB,OAAf,MAA4BX,OAAhC,EAAyC;AACvC2oC;AACA,UAAI;AACF4D,QAAAA,yBAAyB,CACvBhnC,IADuB,EAEvBzF,KAFuB,EAGvBqpC,cAHuB,EAIvBiD,oBAJuB,CAAzB;AAMD,OAPD,CAOE,OAAOn0B,KAAP,EAAc;AACdgwB,QAAAA,uBAAuB,CAACnoC,KAAD,EAAQA,KAAK,CAACuC,MAAd,EAAsB4V,KAAtB,CAAvB;AACD;AAEF;;AAED,QAAInY,KAAK,KAAKksC,WAAd,EAA2B;AACzBpE,MAAAA,UAAU,GAAG,IAAb;AACA;AACD;;AAED,UAAMzkC,OAAO,GAAGrD,KAAK,CAACqD,OAAtB;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBA,MAAAA,OAAO,CAACd,MAAR,GAAiBvC,KAAK,CAACuC,MAAvB;AACAulC,MAAAA,UAAU,GAAGzkC,OAAb;AACA;AACD;;AAEDykC,IAAAA,UAAU,GAAG9nC,KAAK,CAACuC,MAAnB;AACD;AACF;;AAED,SAASkqC,yBAAT,CACErD,YADF,EAEEhoB,YAFF,EAGEioB,cAHF,EAIEiD,oBAJF,EAKQ;AACN,UAAQlrB,YAAY,CAACnhB,GAArB;AACE,SAAK3E,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKI,mBAAL;AAA0B;AACxB,QAWO;AACL6sC,UAAAA,yBAAyB,CAACpX,SAAW,GAAGD,SAAf,EAA8BzQ,YAA9B,CAAzB;AACD;;AACD;AACD;;AACD,SAAK3lB,QAAL;AAAe;AACb,QAAiB;AACf,cAAI2qC,aAA2B,GAAG,IAAlC;;AACA,cAAIhlB,YAAY,CAAChf,SAAb,KAA2B,IAA/B,EAAqC;AACnCgkC,YAAAA,aAAa,GAAGhlB,YAAY,CAAChf,SAAb,CAAuBmW,aAAvB,CAAqC0U,KAArD;AACD;;AACD,gBAAM4R,SAAS,GAAGzd,YAAY,CAAC7I,aAAb,CAA2B0U,KAA7C,CALe;AAOf;AACA;AACA;AACA;AACA;;AACA,cAAI4R,SAAS,KAAKuH,aAAlB,EAAiC;AAC/B/Y,YAAAA,WAAW,CAACwR,SAAD,CAAX;;AACA,gBAAIuH,aAAa,IAAI,IAArB,EAA2B;AACzB9Y,cAAAA,YAAY,CAAC8Y,aAAD,CAAZ;AACD;AACF;AACF;;AA+CD;AACD;;AACD,SAAKxpC,qBAAL;AACA,SAAKD,kBAAL;AAAyB;AACvB,QAAiB;AACf,cAAIypC,aAA2B,GAAG,IAAlC;;AACA,cACEhlB,YAAY,CAAChf,SAAb,KAA2B,IAA3B,IACAgf,YAAY,CAAChf,SAAb,CAAuBmW,aAAvB,KAAyC,IADzC,IAEA6I,YAAY,CAAChf,SAAb,CAAuBmW,aAAvB,CAAqC4lB,SAArC,KAAmD,IAHrD,EAIE;AACAiI,YAAAA,aAAa,GAAGhlB,YAAY,CAAChf,SAAb,CAAuBmW,aAAvB,CAAqC4lB,SAArC,CAA+CvB,IAA/D;AACD;;AACD,cAAIiC,SAAuB,GAAG,IAA9B;;AACA,cACEzd,YAAY,CAAC7I,aAAb,KAA+B,IAA/B,IACA6I,YAAY,CAAC7I,aAAb,CAA2B4lB,SAA3B,KAAyC,IAF3C,EAGE;AACAU,YAAAA,SAAS,GAAGzd,YAAY,CAAC7I,aAAb,CAA2B4lB,SAA3B,CAAqCvB,IAAjD;AACD,WAfc;AAiBf;AACA;AACA;;;AACA,cAAIiC,SAAS,KAAKuH,aAAlB,EAAiC;AAC/B,gBAAIvH,SAAS,IAAI,IAAjB,EAAuB;AACrBxR,cAAAA,WAAW,CAACwR,SAAD,CAAX;AACD;;AACD,gBAAIuH,aAAa,IAAI,IAArB,EAA2B;AACzB9Y,cAAAA,YAAY,CAAC8Y,aAAD,CAAZ;AACD;AACF;AACF;;AAyCD;AACD;;AACD,SAAKvpC,cAAL;AAAqB;AACnB,QAAiB;AACf,cAAIupC,aAA2B,GAAG,IAAlC;;AACA,cAAIhlB,YAAY,CAAChf,SAAb,KAA2B,IAA/B,EAAqC;AACnCgkC,YAAAA,aAAa,GAAGhlB,YAAY,CAAChf,SAAb,CAAuBmW,aAAvB,CAAqC0U,KAArD;AACD;;AACD,gBAAM4R,SAAS,GAAGzd,YAAY,CAAC7I,aAAb,CAA2B0U,KAA7C,CALe;AAOf;AACA;AACA;AACA;;AACA,cAAI4R,SAAS,KAAKuH,aAAlB,EAAiC;AAC/B/Y,YAAAA,WAAW,CAACwR,SAAD,CAAX;;AACA,gBAAIuH,aAAa,IAAI,IAArB,EAA2B;AACzB9Y,cAAAA,YAAY,CAAC8Y,aAAD,CAAZ;AACD;AACF;AACF;;AACD;AACD;AArLH;AAuLD;;AAED,AAAO,SAASsG,2BAAT,CAAqCtJ,UAArC,EAA8D;AACnE0E,EAAAA,UAAU,GAAG1E,UAAb;AACAuJ,EAAAA,iCAAiC;AAClC;;AAED,SAASA,iCAAT,GAA6C;AAC3C,SAAO7E,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM9nC,KAAK,GAAG8nC,UAAd;AACA,UAAM1kC,KAAK,GAAGpD,KAAK,CAACoD,KAApB;;AAEA,QAAI,CAAC0kC,UAAU,CAACxlC,KAAX,GAAmBhC,aAApB,MAAuCJ,OAA3C,EAAoD;AAClD,YAAM0lB,SAAS,GAAG5lB,KAAK,CAAC4lB,SAAxB;;AACA,UAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB,aAAK,IAAI5X,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4X,SAAS,CAAC1N,MAA9B,EAAsClK,CAAC,EAAvC,EAA2C;AACzC,gBAAM4+B,aAAa,GAAGhnB,SAAS,CAAC5X,CAAD,CAA/B;AACA85B,UAAAA,UAAU,GAAG8E,aAAb;AACAC,UAAAA,oDAAoD,CAClDD,aADkD,EAElD5sC,KAFkD,CAApD;AAID;;AAED,QAAkC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAM8sC,aAAa,GAAG9sC,KAAK,CAACoC,SAA5B;;AACA,cAAI0qC,aAAa,KAAK,IAAtB,EAA4B;AAC1B,gBAAIC,aAAa,GAAGD,aAAa,CAAC1pC,KAAlC;;AACA,gBAAI2pC,aAAa,KAAK,IAAtB,EAA4B;AAC1BD,cAAAA,aAAa,CAAC1pC,KAAd,GAAsB,IAAtB;;AACA,iBAAG;AACD,sBAAM4pC,eAAe,GAAGD,aAAa,CAAC1pC,OAAtC;AACA0pC,gBAAAA,aAAa,CAAC1pC,OAAd,GAAwB,IAAxB;AACA0pC,gBAAAA,aAAa,GAAGC,eAAhB;AACD,eAJD,QAISD,aAAa,KAAK,IAJ3B;AAKD;AACF;AACF;;AAEDjF,QAAAA,UAAU,GAAG9nC,KAAb;AACD;AACF;;AAED,QAAI,CAACA,KAAK,CAACyiC,YAAN,GAAqB3gC,WAAtB,MAAuC5B,OAAvC,IAAkDkD,KAAK,KAAK,IAAhE,EAAsE;AACpEA,MAAAA,KAAK,CAACb,MAAN,GAAevC,KAAf;AACA8nC,MAAAA,UAAU,GAAG1kC,KAAb;AACD,KAHD,MAGO;AACL6pC,MAAAA,oCAAoC;AACrC;AACF;AACF;;AAED,SAASA,oCAAT,GAAgD;AAC9C,SAAOnF,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM9nC,KAAK,GAAG8nC,UAAd;;AACA,QAAI,CAAC9nC,KAAK,CAACsC,KAAN,GAAczB,OAAf,MAA4BX,OAAhC,EAAyC;AACvC2oC,AACAqE,MAAAA,2BAA2B,CAACltC,KAAD,CAA3B;AACAmtC,AACD;;AAED,UAAM9pC,OAAO,GAAGrD,KAAK,CAACqD,OAAtB;;AACA,QAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpBA,MAAAA,OAAO,CAACd,MAAR,GAAiBvC,KAAK,CAACuC,MAAvB;AACAulC,MAAAA,UAAU,GAAGzkC,OAAb;AACA;AACD;;AAEDykC,IAAAA,UAAU,GAAG9nC,KAAK,CAACuC,MAAnB;AACD;AACF;;AAED,SAAS2qC,2BAAT,CAAqC9rB,YAArC,EAAgE;AAC9D,UAAQA,YAAY,CAACnhB,GAArB;AACE,SAAK3E,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKI,mBAAL;AAA0B;AACxB,QAYO;AACL4sC,UAAAA,2BAA2B,CACzBnX,SAAW,GAAGD,SADW,EAEzBzQ,YAFyB,EAGzBA,YAAY,CAAC7e,MAHY,CAA3B;AAKD;;AACD;AACD;AAxBH;AA0BD;;AAED,SAASsqC,oDAAT,CACEO,kBADF,EAEElF,sBAFF,EAGE;AACA,SAAOJ,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM9nC,KAAK,GAAG8nC,UAAd,CAD0B;AAI1B,AAEAuF,IAAAA,4CAA4C,CAACrtC,KAAD,EAAQkoC,sBAAR,CAA5C;AACAiF,AAEA,UAAM/pC,KAAK,GAAGpD,KAAK,CAACoD,KAApB,CAT0B;AAW1B;;AACA,QAAIA,KAAK,KAAK,IAAd,EAAoB;AAClBA,MAAAA,KAAK,CAACb,MAAN,GAAevC,KAAf;AACA8nC,MAAAA,UAAU,GAAG1kC,KAAb;AACD,KAHD,MAGO;AACLkqC,MAAAA,uDAAuD,CACrDF,kBADqD,CAAvD;AAGD;AACF;AACF;;AAED,SAASE,uDAAT,CACEF,kBADF,EAEE;AACA,SAAOtF,UAAU,KAAK,IAAtB,EAA4B;AAC1B,UAAM9nC,KAAK,GAAG8nC,UAAd;AACA,UAAMzkC,OAAO,GAAGrD,KAAK,CAACqD,OAAtB;AACA,UAAMkhB,WAAW,GAAGvkB,KAAK,CAACuC,MAA1B;;AAEA,IAAkC;AAChC;AACA;AACA;AACAsnC,MAAAA,uBAAuB,CAAC7pC,KAAD,CAAvB;;AACA,UAAIA,KAAK,KAAKotC,kBAAd,EAAkC;AAChCtF,QAAAA,UAAU,GAAG,IAAb;AACA;AACD;AACF,KATD;;AAmBA,QAAIzkC,OAAO,KAAK,IAAhB,EAAsB;AACpBA,MAAAA,OAAO,CAACd,MAAR,GAAiBgiB,WAAjB;AACAujB,MAAAA,UAAU,GAAGzkC,OAAb;AACA;AACD;;AAEDykC,IAAAA,UAAU,GAAGvjB,WAAb;AACD;AACF;;AAED,SAAS8oB,4CAAT,CACE7pC,OADF,EAEE0kC,sBAFF,EAGQ;AACN,UAAQ1kC,OAAO,CAACvD,GAAhB;AACE,SAAK3E,iBAAL;AACA,SAAKW,UAAL;AACA,SAAKI,mBAAL;AAA0B;AACxB,QAYO;AACL4sC,UAAAA,2BAA2B,CACzBnX,SADyB,EAEzBtuB,OAFyB,EAGzB0kC,sBAHyB,CAA3B;AAKD;;AACD;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKtrC,qBAAL;AACA,SAAKD,kBAAL;AAAyB;AACvB,QAAiB;AACf,cACE6G,OAAO,CAAC+U,aAAR,KAA0B,IAA1B,IACA/U,OAAO,CAAC+U,aAAR,CAAsB4lB,SAAtB,KAAoC,IAFtC,EAGE;AACA,kBAAMlR,KAAY,GAAGzpB,OAAO,CAAC+U,aAAR,CAAsB4lB,SAAtB,CAAgCvB,IAArD,CADA;AAGA;AACA;AACA;;AACA,gBAAI3P,KAAK,IAAI,IAAb,EAAmB;AACjBI,cAAAA,WAAW,CAACJ,KAAD,CAAX;AACD;AACF;AACF;;AACD;AACD;;AACD,SAAKpwB,cAAL;AAAqB;AACnB,QAAiB;AACf,gBAAMowB,KAAK,GAAGzpB,OAAO,CAAC+U,aAAR,CAAsB0U,KAApC;AACAK,UAAAA,YAAY,CAACL,KAAD,CAAZ;AACD;;AACD;AACD;AA7DH;AA+DD;;MCjpGMsgB,uBAAwB3yC,qBAAxB2yC;;AC4OP,MAAMC,IAAI,GAAG/lC,IAAI,CAAC+lC,IAAlB;MAGE15B,2BAIElZ,qBAJFkZ;MACA9R,sBAGEpH,qBAHFoH;MACAiY,4BAEErf,qBAFFqf;MACAszB,yBACE3yC,qBADF2yC;AAKF,AAAO,MAAME,SAAS;AAAG;AAAkB,KAApC;AACP,MAAMC,cAAc;AAAG;AAAoB,KAA3C;AACA,MAAMC,aAAa;AAAG;AAAqB,KAA3C;AACA,MAAMC,aAAa;AAAG;AAAqB,KAA3C;AAGA,MAAMC,cAAc,GAAG,CAAvB;AACA,MAAMC,gBAAgB,GAAG,CAAzB;AACA,MAAMC,WAAW,GAAG,CAApB;AACA,MAAMC,aAAa,GAAG,CAAtB;AACA,MAAMC,sBAAsB,GAAG,CAA/B;AACA,MAAMC,aAAa,GAAG,CAAtB;AACA,MAAMC,kBAAkB,GAAG,CAA3B;;AAGA,IAAIC,gBAAkC,GAAGX,SAAzC;;AAEA,IAAIY,kBAAoC,GAAG,IAA3C;;AAEA,IAAI/4B,cAA4B,GAAG,IAAnC;;AAEA,IAAIg5B,6BAAoC,GAAGvmC,OAA3C;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,AAAO,IAAI02B,kBAAyB,GAAG12B,OAAhC;AACP,MAAMwmC,wBAA4C,GAAG15B,YAAY,CAAC9M,OAAD,CAAjE;;AAGA,IAAIymC,4BAA4C,GAAGX,cAAnD;;AAEA,IAAIY,4BAAmC,GAAG,IAA1C;AAEA;AACA;AACA;;AACA,IAAIC,+BAAsC,GAAG3mC,OAA7C;AAEA;;AACA,IAAI4mC,8BAAqC,GAAG5mC,OAA5C;;AAEA,IAAI6mC,yCAAgD,GAAG7mC,OAAvD;;AAIA,IAAI8mC,6BAAoC,GAAG9mC,OAA3C;;AAEA,IAAI+mC,kCAEI,GAAG,IAFX;AAIA;;AACA,IAAIC,mCAEI,GAAG,IAFX;AAKA;;AACA,IAAIC,4BAAoC,GAAG,CAA3C;AACA,MAAMC,oBAA4B,GAAG,GAArC;AAGA;;AACA,IAAIC,kCAA0C,GAAGC,QAAjD;AAEA;;AACA,MAAMC,iBAAiB,GAAG,GAA1B;AAEA,IAAIC,yBAAmD,GAAG,IAA1D;AACA;AA4CA,SAASC,gBAAT,GAA4B;AAC1BJ,EAAAA,kCAAkC,GAAG5qC,GAAG,KAAK8qC,iBAA7C;AACD;;AAED,AAAO,SAAShI,mBAAT,GAAuC;AAC5C,SAAO8H,kCAAP;AACD;AAED,IAAIK,gBAAgB,GAAG,KAAvB;AACA,IAAIC,kBAAkB,GAAG,IAAzB;AACA,IAAIC,sCAAyD,GAAG,IAAhE;AAGA,AAGA,IAAIC,0BAAmC,GAAG,KAA1C;AACA,IAAIC,6BAA+C,GAAG,IAAtD;AACA,IAAIC,0BAAiC,GAAG7nC,OAAxC;AACA,AACA,IAAI8nC,mCAA0C,GAAG9nC,OAAjD;AACA,IAAI+nC,yBAAmD,GAAG,IAA1D;;AAGA,MAAMC,mBAAmB,GAAG,EAA5B;AACA,IAAIC,iBAAyB,GAAG,CAAhC;AACA,IAAIC,qBAAuC,GAAG,IAA9C;AACA,AAQA;AACA;;AACA,IAAIC,gBAAwB,GAAG9lC,WAA/B;AACA,IAAI+lC,0BAAiC,GAAGpoC,OAAxC;AAEA,AAEO,SAASypB,qBAAT,GAAmD;AACxD,SAAO6c,kBAAP;AACD;AAED,AAAO,SAASxsB,gBAAT,GAA4B;AACjC,MAAI,CAACusB,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE;AACA,WAAOnpC,GAAG,EAAV;AACD,GAJgC;;;AAMjC,MAAI4rC,gBAAgB,KAAK9lC,WAAzB,EAAsC;AACpC;AACA,WAAO8lC,gBAAP;AACD,GATgC;;;AAWjCA,EAAAA,gBAAgB,GAAG5rC,GAAG,EAAtB;AACA,SAAO4rC,gBAAP;AACD;AAED,AAIO,SAASpuB,iBAAT,CAA2B9hB,KAA3B,EAA+C;AACpD;AACA,QAAMsL,IAAI,GAAGtL,KAAK,CAACsL,IAAnB;;AACA,MAAI,CAACA,IAAI,GAAGlE,cAAR,MAA4BD,MAAhC,EAAwC;AACtC,WAAQc,QAAR;AACD,GAFD,MAEO,IACL,CACA,CAACmmC,gBAAgB,GAAGT,aAApB,MAAuCF,SADvC,IAEAa,6BAA6B,KAAKvmC,OAH7B,EAIL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAOqF,iBAAiB,CAACkhC,6BAAD,CAAxB;AACD;;AAED,QAAM8B,YAAY,GAAGj2B,wBAAwB,OAAOD,YAApD;;AACA,MAAIk2B,YAAJ,EAAkB;AAChB,AASA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAID,0BAA0B,KAAKnoC,MAAnC,EAA2C;AACzC;AACAmoC,MAAAA,0BAA0B,GAAGjjC,uBAAuB,EAApD;AACD;;AACD,WAAOijC,0BAAP;AACD,GA5CmD;AA+CpD;AACA;AACA;AACA;AACA;;;AACA,QAAMhiC,UAAgB,GAAIc,wBAAwB,EAAlD;;AACA,MAAId,UAAU,KAAKnG,MAAnB,EAA2B;AACzB,WAAOmG,UAAP;AACD,GAvDmD;AA0DpD;AACA;AACA;AACA;AACA;;;AACA,QAAMkiC,SAAe,GAAI99B,uBAAuB,EAAhD;AACA,SAAO89B,SAAP;AACD;;AAED,SAASC,gBAAT,CAA0BtwC,KAA1B,EAAwC;AACtC;AACA;AACA;AAEA;AACA,QAAMsL,IAAI,GAAGtL,KAAK,CAACsL,IAAnB;;AACA,MAAI,CAACA,IAAI,GAAGlE,cAAR,MAA4BD,MAAhC,EAAwC;AACtC,WAAQc,QAAR;AACD;;AAED,SAAOkF,kBAAkB,EAAzB;AACD;;AAED,AAAO,SAAS4U,qBAAT,CACLtc,IADK,EAELzF,KAFK,EAGL2L,IAHK,EAILI,SAJK,EAKL;AACAwkC,EAAAA,qBAAqB;;;AAerBriC,EAAAA,eAAe,CAACzI,IAAD,EAAOkG,IAAP,EAAaI,SAAb,CAAf;;AAEA,MACE,CAACqiC,gBAAgB,GAAGT,aAApB,MAAuC5lC,OAAvC,IACAtC,IAAI,KAAK4oC,kBAFX,EAGE,CAHF,MAgBO;AACL;AAyCA,QAAI5oC,IAAI,KAAK4oC,kBAAb,EAAiC;AAC/B;AACA;AACA;AACA;AACA;AACA,UACEmC,CACA,CAACpC,gBAAgB,GAAGT,aAApB,MAAuCF,SAFzC,EAGE;AACAmB,QAAAA,yCAAyC,GAAGnhC,UAAU,CACpDmhC,yCADoD,EAEpDjjC,IAFoD,CAAtD;AAID;;AACD,UAAI6iC,4BAA4B,KAAKP,sBAArC,EAA6D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA7/B,QAAAA,mBAAiB,CAAC3I,IAAD,EAAO6oC,6BAAP,CAAjB;AACD;AACF;;AAEDmC,IAAAA,qBAAqB,CAAChrC,IAAD,EAAOsG,SAAP,CAArB;;AACA,QACEJ,IAAI,KAAK1D,QAAT,IACAmmC,gBAAgB,KAAKX,SADrB,IAEA,CAACztC,KAAK,CAACsL,IAAN,GAAalE,cAAd,MAAkCD,MAFlC;AAIA,MAAE2T,KAAO,CAAT,CALF,EAME;AACA;AACA;AACA;AACA;AACA;AACAw0B,MAAAA,gBAAgB;AAChBz3B,MAAAA,kCAAkC;AACnC;AACF;AACF;AAED,AAoBO,SAAS2H,8BAAT,CAAwCxf,KAAxC,EAAsD;AAC3D;AACA;AACA;AAEE;AACA,KAEA,CAACouC,gBAAgB,GAAGT,aAApB,MAAuCF;AALzC;AAOD;AAGD;AACA;AACA;AACA;;AACA,SAASgD,qBAAT,CAA+BhrC,IAA/B,EAAgDwG,WAAhD,EAAqE;AACnE,QAAMykC,oBAAoB,GAAGjrC,IAAI,CAACkrC,YAAlC,CADmE;AAInE;;AACAzkC,EAAAA,yBAAyB,CAACzG,IAAD,EAAOwG,WAAP,CAAzB,CALmE;;AAQnE,QAAMrB,SAAS,GAAGH,YAAY,CAC5BhF,IAD4B,EAE5BA,IAAI,KAAK4oC,kBAAT,GAA8BC,6BAA9B,GAA8DvmC,OAFlC,CAA9B;;AAKA,MAAI6C,SAAS,KAAK7C,OAAlB,EAA2B;AACzB;AACA,QAAI2oC,oBAAoB,KAAK,IAA7B,EAAmC;AACjCvsC,MAAAA,gBAAc,CAACusC,oBAAD,CAAd;AACD;;AACDjrC,IAAAA,IAAI,CAACkrC,YAAL,GAAoB,IAApB;AACAlrC,IAAAA,IAAI,CAACmrC,gBAAL,GAAwB5oC,MAAxB;AACA;AACD,GArBkE;;;AAwBnE,QAAM6oC,mBAAmB,GAAGrmC,sBAAsB,CAACI,SAAD,CAAlD,CAxBmE;;AA2BnE,QAAMkmC,wBAAwB,GAAGrrC,IAAI,CAACmrC,gBAAtC;;AACA,MACEE,wBAAwB,KAAKD,mBAA7B;AAEA;AACA;AACA,IACE/1B,KAAO,CAAP,CADF,CALF,EAUE;AACA;;AAcA;AACD;;AAED,MAAI41B,oBAAoB,IAAI,IAA5B,EAAkC;AAChC;AACAvsC,IAAAA,gBAAc,CAACusC,oBAAD,CAAd;AACD,GA3DkE;;;AA8DnE,MAAIK,eAAJ;;AACA,MAAIF,mBAAmB,KAAK5oC,QAA5B,EAAsC;AACpC;AACA;AACA,QAAIxC,IAAI,CAACxF,GAAL,KAAaiX,UAAjB,EAA6B;AAC3B;AAGAU,MAAAA,0BAA0B,CAACo5B,qBAAqB,CAAC5gB,IAAtB,CAA2B,IAA3B,EAAiC3qB,IAAjC,CAAD,CAA1B;AACD,KALD,MAKO;AACLiS,MAAAA,oBAAoB,CAACs5B,qBAAqB,CAAC5gB,IAAtB,CAA2B,IAA3B,EAAiC3qB,IAAjC,CAAD,CAApB;AACD;;AACD,IAuBO;AACL;AACAxB,MAAAA,kBAAgB,CAAC8B,iBAAD,EAA6B+R,kBAA7B,CAAhB;AACD;;AACDi5B,IAAAA,eAAe,GAAG,IAAlB;AACD,GAvCD,MAuCO;AACL,QAAIE,sBAAJ;;AACA,YAAQ1hC,oBAAoB,CAAC3E,SAAD,CAA5B;AACE,WAAK9E,qBAAL;AACEmrC,QAAAA,sBAAsB,GAAGlrC,iBAAzB;AACA;;AACF,WAAKC,uBAAL;AACEirC,QAAAA,sBAAsB,GAAGhrC,oBAAzB;AACA;;AACF,WAAKC,oBAAL;AACE+qC,QAAAA,sBAAsB,GAAG9qC,cAAzB;AACA;;AACF,WAAKC,iBAAL;AACE6qC,QAAAA,sBAAsB,GAAG5qC,YAAzB;AACA;;AACF;AACE4qC,QAAAA,sBAAsB,GAAG9qC,cAAzB;AACA;AAfJ;;AAiBA4qC,IAAAA,eAAe,GAAG9sC,kBAAgB,CAChCgtC,sBADgC,EAEhCC,2BAA2B,CAAC9gB,IAA5B,CAAiC,IAAjC,EAAuC3qB,IAAvC,CAFgC,CAAlC;AAID;;AAEDA,EAAAA,IAAI,CAACmrC,gBAAL,GAAwBC,mBAAxB;AACAprC,EAAAA,IAAI,CAACkrC,YAAL,GAAoBI,eAApB;AACD;AAGD;;;AACA,SAASG,2BAAT,CAAqCzrC,IAArC,EAA2C0rC,UAA3C,EAAuD;AACrD,AAKA;;;AACAjB,EAAAA,gBAAgB,GAAG9lC,WAAnB;AACA+lC,EAAAA,0BAA0B,GAAGpoC,OAA7B;;AAEA,MAAI,CAACqmC,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE,UAAM,IAAI5qC,KAAJ,CAAU,gCAAV,CAAN;AACD,GAZoD;AAerD;;;AACA,QAAMuuC,oBAAoB,GAAG3rC,IAAI,CAACkrC,YAAlC;AACA,QAAMU,sBAAsB,GAAGC,mBAAmB,EAAlD;;AACA,MAAID,sBAAJ,EAA4B;AAC1B;AACA;AACA,QAAI5rC,IAAI,CAACkrC,YAAL,KAAsBS,oBAA1B,EAAgD;AAC9C;AACA;AACA;AACA,aAAO,IAAP;AACD,KALD;AAQD,GA7BoD;AAgCrD;;;AACA,MAAIpqC,KAAK,GAAGyD,YAAY,CACtBhF,IADsB,EAEtBA,IAAI,KAAK4oC,kBAAT,GAA8BC,6BAA9B,GAA8DvmC,OAFxC,CAAxB;;AAIA,MAAIf,KAAK,KAAKe,OAAd,EAAuB;AACrB;AACA,WAAO,IAAP;AACD,GAxCoD;AA2CrD;AACA;AACA;AACA;AACA;;;AACA,QAAMwpC,eAAe,GACnB,CAACzkC,oBAAoB,CAACrH,IAAD,EAAOuB,KAAP,CAArB,IACA,CAACgG,mBAAmB,CAACvH,IAAD,EAAOuB,KAAP,CADpB,KAECwqC,CAAqC,CAACL,UAFvC,CADF;AAIA,MAAIM,UAAU,GAAGF,eAAe,GAC5BG,oBAAoB,CAACjsC,IAAD,EAAOuB,KAAP,CADQ,GAE5B2qC,cAAc,CAAClsC,IAAD,EAAOuB,KAAP,CAFlB;;AAGA,MAAIyqC,UAAU,KAAK5D,cAAnB,EAAmC;AACjC,QAAI4D,UAAU,KAAK1D,WAAnB,EAAgC;AAC9B;AACA;AACA;AACA;AACA,YAAM6D,eAAe,GAAGtlC,mCAAmC,CAAC7G,IAAD,CAA3D;;AACA,UAAImsC,eAAe,KAAK7pC,OAAxB,EAAiC;AAC/Bf,QAAAA,KAAK,GAAG4qC,eAAR;AACAH,QAAAA,UAAU,GAAGI,0BAA0B,CAACpsC,IAAD,EAAOmsC,eAAP,CAAvC;AACD;AACF;;AACD,QAAIH,UAAU,KAAK3D,gBAAnB,EAAqC;AACnC,YAAMgE,UAAU,GAAGrD,4BAAnB;AACAsD,MAAAA,iBAAiB,CAACtsC,IAAD,EAAOsC,OAAP,CAAjB;AACAqG,MAAAA,mBAAiB,CAAC3I,IAAD,EAAOuB,KAAP,CAAjB;AACAypC,MAAAA,qBAAqB,CAAChrC,IAAD,EAAOnB,GAAG,EAAV,CAArB;AACA,YAAMwtC,UAAN;AACD;;AAED,QAAIL,UAAU,KAAKtD,kBAAnB,EAAuC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA//B,MAAAA,mBAAiB,CAAC3I,IAAD,EAAOuB,KAAP,CAAjB;AACD,KATD,MASO;AACL;AAEA;AACA;AACA;AACA;AACA;AACA,YAAMgrC,mBAAmB,GAAG,CAACllC,oBAAoB,CAACrH,IAAD,EAAOuB,KAAP,CAAjD;AACA,YAAMoa,YAAmB,GAAI3b,IAAI,CAACjC,OAAL,CAAapB,SAA1C;;AACA,UACE4vC,mBAAmB,IACnB,CAACC,oCAAoC,CAAC7wB,YAAD,CAFvC,EAGE;AACA;AACA;AACAqwB,QAAAA,UAAU,GAAGE,cAAc,CAAClsC,IAAD,EAAOuB,KAAP,CAA3B,CAHA;;AAMA,YAAIyqC,UAAU,KAAK1D,WAAnB,EAAgC;AAC9B,gBAAM6D,eAAe,GAAGtlC,mCAAmC,CAAC7G,IAAD,CAA3D;;AACA,cAAImsC,eAAe,KAAK7pC,OAAxB,EAAiC;AAC/Bf,YAAAA,KAAK,GAAG4qC,eAAR;AACAH,YAAAA,UAAU,GAAGI,0BAA0B,CAACpsC,IAAD,EAAOmsC,eAAP,CAAvC,CAF+B;AAI/B;AACD;AACF;;AACD,YAAIH,UAAU,KAAK3D,gBAAnB,EAAqC;AACnC,gBAAMgE,UAAU,GAAGrD,4BAAnB;AACAsD,UAAAA,iBAAiB,CAACtsC,IAAD,EAAOsC,OAAP,CAAjB;AACAqG,UAAAA,mBAAiB,CAAC3I,IAAD,EAAOuB,KAAP,CAAjB;AACAypC,UAAAA,qBAAqB,CAAChrC,IAAD,EAAOnB,GAAG,EAAV,CAArB;AACA,gBAAMwtC,UAAN;AACD;AACF,OAnCI;AAsCL;;;AACArsC,MAAAA,IAAI,CAAC2b,YAAL,GAAoBA,YAApB;AACA3b,MAAAA,IAAI,CAACysC,aAAL,GAAqBlrC,KAArB;AACAmrC,MAAAA,sBAAsB,CAAC1sC,IAAD,EAAOgsC,UAAP,EAAmBzqC,KAAnB,CAAtB;AACD;AACF;;AAEDypC,EAAAA,qBAAqB,CAAChrC,IAAD,EAAOnB,GAAG,EAAV,CAArB;;AACA,MAAImB,IAAI,CAACkrC,YAAL,KAAsBS,oBAA1B,EAAgD;AAC9C;AACA;AACA,WAAOF,2BAA2B,CAAC9gB,IAA5B,CAAiC,IAAjC,EAAuC3qB,IAAvC,CAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAED,SAASosC,0BAAT,CAAoCpsC,IAApC,EAA0CmsC,eAA1C,EAA2D;AACzD;AACA;AAEA;AACA,QAAMQ,sBAAsB,GAAGtD,kCAA/B;;AAEA,MAAIz2B,gBAAgB,CAAC5S,IAAD,CAApB,EAA4B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAM4sC,kBAAkB,GAAGN,iBAAiB,CAACtsC,IAAD,EAAOmsC,eAAP,CAA5C;AACAS,IAAAA,kBAAkB,CAAC/vC,KAAnB,IAA4B5B,iBAA5B;AAID;;AAED,QAAM+wC,UAAU,GAAGE,cAAc,CAAClsC,IAAD,EAAOmsC,eAAP,CAAjC;;AACA,MAAIH,UAAU,KAAK1D,WAAnB,EAAgC;AAC9B;AAEA;AACA;AACA;AACA,UAAMuE,uBAAuB,GAAGvD,mCAAhC;AACAA,IAAAA,mCAAmC,GAAGqD,sBAAtC,CAP8B;AAS9B;;AACA,QAAIE,uBAAuB,KAAK,IAAhC,EAAsC;AACpCx4B,MAAAA,sBAAsB,CAACw4B,uBAAD,CAAtB;AACD;AACF,GAbD;;AAgBA,SAAOb,UAAP;AACD;;AAED,AAAO,SAAS33B,sBAAT,CAAgCy4B,MAAhC,EAAqE;AAC1E,MAAIxD,mCAAmC,KAAK,IAA5C,EAAkD;AAChDA,IAAAA,mCAAmC,GAAGwD,MAAtC;AACD,GAFD,MAEO;AACLxD,IAAAA,mCAAmC,CAAC9gC,IAApC,CAAyCukC,KAAzC,CACEzD,mCADF,EAEEwD,MAFF;AAID;AACF;;AAED,SAASJ,sBAAT,CAAgC1sC,IAAhC,EAAsCgsC,UAAtC,EAAkDzqC,KAAlD,EAAyD;AACvD,UAAQyqC,UAAR;AACE,SAAK5D,cAAL;AACA,SAAKC,gBAAL;AAAuB;AACrB,cAAM,IAAIjrC,KAAJ,CAAU,gDAAV,CAAN;AACD;AACD;AACA;AACA;;AACA,SAAKkrC,WAAL;AAAkB;AAChB;AACA;AACA0E,QAAAA,UAAU,CACRhtC,IADQ,EAERspC,mCAFQ,EAGRM,yBAHQ,CAAV;AAKA;AACD;;AACD,SAAKrB,aAAL;AAAoB;AAClB5/B,QAAAA,mBAAiB,CAAC3I,IAAD,EAAOuB,KAAP,CAAjB,CADkB;AAIlB;;AAEA,YACE0F,mBAAmB,CAAC1F,KAAD,CAAnB;AAEA,SAAC0rC,8BAA8B,EAHjC,EAIE;AACA;AACA;AACA,gBAAMC,cAAc,GAClB3D,4BAA4B,GAAGC,oBAA/B,GAAsD3qC,GAAG,EAD3D,CAHA;;AAMA,cAAIquC,cAAc,GAAG,EAArB,EAAyB;AACvB,kBAAM/nC,SAAS,GAAGH,YAAY,CAAChF,IAAD,EAAOsC,OAAP,CAA9B;;AACA,gBAAI6C,SAAS,KAAK7C,OAAlB,EAA2B;AACzB;AACA;AACD;;AACD,kBAAM8C,cAAc,GAAGpF,IAAI,CAACoF,cAA5B;;AACA,gBAAI,CAAC0C,eAAe,CAAC1C,cAAD,EAAiB7D,KAAjB,CAApB,EAA6C;AAC3C;AACA;AACA;AACA;AACA,oBAAM+E,SAAS,GAAG8V,gBAAgB,EAAlC;AACAxT,cAAAA,cAAc,CAAC5I,IAAD,EAAOoF,cAAP,AAAA,CAAd;AACA;AACD,aAfsB;AAkBvB;AACA;;;AACApF,YAAAA,IAAI,CAACmtC,aAAL,GAAqBpgC,eAAe,CAClCigC,UAAU,CAACriB,IAAX,CACE,IADF,EAEE3qB,IAFF,EAGEspC,mCAHF,EAIEM,yBAJF,CADkC,EAOlCsD,cAPkC,CAApC;AASA;AACD;AACF,SA/CiB;;;AAiDlBF,QAAAA,UAAU,CACRhtC,IADQ,EAERspC,mCAFQ,EAGRM,yBAHQ,CAAV;AAKA;AACD;;AACD,SAAKpB,sBAAL;AAA6B;AAC3B7/B,QAAAA,mBAAiB,CAAC3I,IAAD,EAAOuB,KAAP,CAAjB;;AAEA,YAAI6F,uBAAuB,CAAC7F,KAAD,CAA3B,EAAoC;AAClC;AACA;AACA;AACA;AACD;;AAED,QAAuC;AACrC;AACA;AACA;AACA;AACA;AACA;AAEA,gBAAM8E,mBAAmB,GAAGF,sBAAsB,CAACnG,IAAD,EAAOuB,KAAP,CAAlD;AACA,gBAAM6rC,WAAW,GAAG/mC,mBAApB;AACA,gBAAMgnC,aAAa,GAAGxuC,GAAG,KAAKuuC,WAA9B;AACA,gBAAMF,cAAc,GAAGI,GAAG,CAACD,aAAD,CAAH,GAAqBA,aAA5C,CAXqC;;AAcrC,cAAIH,cAAc,GAAG,EAArB,EAAyB;AACvB;AACA;AACAltC,YAAAA,IAAI,CAACmtC,aAAL,GAAqBpgC,eAAe,CAClCigC,UAAU,CAACriB,IAAX,CACE,IADF,EAEE3qB,IAFF,EAGEspC,mCAHF,EAIEM,yBAJF,CADkC,EAOlCsD,cAPkC,CAApC;AASA;AACD;AACF,SAtC0B;;;AAyC3BF,QAAAA,UAAU,CACRhtC,IADQ,EAERspC,mCAFQ,EAGRM,yBAHQ,CAAV;AAKA;AACD;;AACD,SAAKnB,aAAL;AAAoB;AAClB;AACAuE,QAAAA,UAAU,CACRhtC,IADQ,EAERspC,mCAFQ,EAGRM,yBAHQ,CAAV;AAKA;AACD;;AACD;AAAS;AACP,cAAM,IAAIxsC,KAAJ,CAAU,2BAAV,CAAN;AACD;AArIH;AAuID;;AAED,SAASovC,oCAAT,CAA8C7wB,YAA9C,EAA4E;AAC1E;AACA;AACA;AACA,MAAIlf,IAAW,GAAGkf,YAAlB;;AACA,SAAO,IAAP,EAAa;AACX,QAAIlf,IAAI,CAACI,KAAL,GAAatB,gBAAjB,EAAmC;AACjC,YAAMgc,WAAgD,GAAI9a,IAAI,CAAC8a,WAA/D;;AACA,UAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB,cAAMg2B,MAAM,GAAGh2B,WAAW,CAACyS,MAA3B;;AACA,YAAIujB,MAAM,KAAK,IAAf,EAAqB;AACnB,eAAK,IAAIhlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGglC,MAAM,CAAC96B,MAA3B,EAAmClK,CAAC,EAApC,EAAwC;AACtC,kBAAMqkB,KAAK,GAAG2gB,MAAM,CAAChlC,CAAD,CAApB;AACA,kBAAMkjB,WAAW,GAAGmB,KAAK,CAACnB,WAA1B;AACA,kBAAM+hB,aAAa,GAAG5gB,KAAK,CAAC13B,KAA5B;;AACA,gBAAI;AACF,kBAAI,CAACyc,QAAE,CAAC8Z,WAAW,EAAZ,EAAgB+hB,aAAhB,CAAP,EAAuC;AACrC;AACA,uBAAO,KAAP;AACD;AACF,aALD,CAKE,OAAO96B,KAAP,EAAc;AACd;AACA;AACA,qBAAO,KAAP;AACD;AACF;AACF;AACF;AACF;;AACD,UAAM/U,KAAK,GAAGlB,IAAI,CAACkB,KAAnB;;AACA,QAAIlB,IAAI,CAACugC,YAAL,GAAoBzhC,gBAApB,IAAwCoC,KAAK,KAAK,IAAtD,EAA4D;AAC1DA,MAAAA,KAAK,CAACb,MAAN,GAAeL,IAAf;AACAA,MAAAA,IAAI,GAAGkB,KAAP;AACA;AACD;;AACD,QAAIlB,IAAI,KAAKkf,YAAb,EAA2B;AACzB,aAAO,IAAP;AACD;;AACD,WAAOlf,IAAI,CAACmB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,UAAInB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgB6e,YAA5C,EAA0D;AACxD,eAAO,IAAP;AACD;;AACDlf,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;AACD;;AACDL,IAAAA,IAAI,CAACmB,OAAL,CAAad,MAAb,GAAsBL,IAAI,CAACK,MAA3B;AACAL,IAAAA,IAAI,GAAGA,IAAI,CAACmB,OAAZ;AACD,GA9CyE;AAgD1E;;;AACA,SAAO,IAAP;AACD;;AAED,SAAS+K,mBAAT,CAA2B3I,IAA3B,EAAiCoF,cAAjC,EAAiD;AAC/C;AACA;AACA;AACA;AACAA,EAAAA,cAAc,GAAG6C,WAAW,CAAC7C,cAAD,EAAiBgkC,6BAAjB,CAA5B;AACAhkC,EAAAA,cAAc,GAAG6C,WAAW,CAC1B7C,cAD0B,EAE1B+jC,yCAF0B,CAA5B;AAIAsE,EAAAA,iBAAyC,CAACztC,IAAD,EAAOoF,cAAP,CAAzC;AACD;AAGD;;;AACA,SAASmmC,qBAAT,CAA+BvrC,IAA/B,EAAqC;AACnC;AAIA,MAAI,CAAC2oC,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE,UAAM,IAAI5qC,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAEDyuC,EAAAA,mBAAmB;AAEnB,MAAItqC,KAAK,GAAGyD,YAAY,CAAChF,IAAD,EAAOsC,OAAP,CAAxB;;AACA,MAAI,CAACuF,gBAAgB,CAACtG,KAAD,EAAQiB,QAAR,CAArB,EAAwC;AACtC;AACAwoC,IAAAA,qBAAqB,CAAChrC,IAAD,EAAOnB,GAAG,EAAV,CAArB;AACA,WAAO,IAAP;AACD;;AAED,MAAImtC,UAAU,GAAGE,cAAc,CAAClsC,IAAD,EAAOuB,KAAP,CAA/B;;AACA,MAAIvB,IAAI,CAACxF,GAAL,KAAaiX,UAAb,IAA2Bu6B,UAAU,KAAK1D,WAA9C,EAA2D;AACzD;AACA;AACA;AACA;AACA,UAAM6D,eAAe,GAAGtlC,mCAAmC,CAAC7G,IAAD,CAA3D;;AACA,QAAImsC,eAAe,KAAK7pC,OAAxB,EAAiC;AAC/Bf,MAAAA,KAAK,GAAG4qC,eAAR;AACAH,MAAAA,UAAU,GAAGI,0BAA0B,CAACpsC,IAAD,EAAOmsC,eAAP,CAAvC;AACD;AACF;;AAED,MAAIH,UAAU,KAAK3D,gBAAnB,EAAqC;AACnC,UAAMgE,UAAU,GAAGrD,4BAAnB;AACAsD,IAAAA,iBAAiB,CAACtsC,IAAD,EAAOsC,OAAP,CAAjB;AACAqG,IAAAA,mBAAiB,CAAC3I,IAAD,EAAOuB,KAAP,CAAjB;AACAypC,IAAAA,qBAAqB,CAAChrC,IAAD,EAAOnB,GAAG,EAAV,CAArB;AACA,UAAMwtC,UAAN;AACD;;AAED,MAAIL,UAAU,KAAKtD,kBAAnB,EAAuC;AACrC,UAAM,IAAItrC,KAAJ,CAAU,gDAAV,CAAN;AACD,GAzCkC;AA4CnC;;;AACA,QAAMue,YAAmB,GAAI3b,IAAI,CAACjC,OAAL,CAAapB,SAA1C;AACAqD,EAAAA,IAAI,CAAC2b,YAAL,GAAoBA,YAApB;AACA3b,EAAAA,IAAI,CAACysC,aAAL,GAAqBlrC,KAArB;AACAyrC,EAAAA,UAAU,CACRhtC,IADQ,EAERspC,mCAFQ,EAGRM,yBAHQ,CAAV,CAhDmC;AAuDnC;;AACAoB,EAAAA,qBAAqB,CAAChrC,IAAD,EAAOnB,GAAG,EAAV,CAArB;AAEA,SAAO,IAAP;AACD;AA+BM,SAAS6uC,cAAT,CAA8B3+B,EAA9B,EAA0CzR,CAA1C,EAAmD;AACxD,QAAMqwC,oBAAoB,GAAGhF,gBAA7B;AACAA,EAAAA,gBAAgB,IAAIV,cAApB;;AACA,MAAI;AACF,WAAOl5B,EAAE,CAACzR,CAAD,CAAT;AACD,GAFD,SAEU;AACRqrC,IAAAA,gBAAgB,GAAGgF,oBAAnB,CADQ;AAGR;;AACA,QACEhF,gBAAgB,KAAKX,SAArB;AAEA,MAAE3yB,KAAO,CAAT,CAHF,EAIE;AACAw0B,MAAAA,gBAAgB;AAChBz3B,MAAAA,kCAAkC;AACnC;AACF;AACF;AAED,AAuBA;;AAIA;AACA,AAAO,SAASw7B,SAAT,CAAmB7+B,EAAnB,EAAuB;AAC5B;AACA;AACA,MACEm7B,6BAA6B,KAAK,IAAlC,IACAA,6BAA6B,CAAC1vC,GAA9B,KAAsCiX,UADtC,IAEA,CAACk3B,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAH3D,EAIE;AACA6D,IAAAA,mBAAmB;AACpB;;AAED,QAAM8B,oBAAoB,GAAGhF,gBAA7B;AACAA,EAAAA,gBAAgB,IAAIV,cAApB;AAEA,QAAM9X,cAAc,GAAG3b,yBAAuB,CAACG,UAA/C;AACA,QAAMub,gBAAgB,GAAG1mB,wBAAwB,EAAjD;;AAEA,MAAI;AACFgL,IAAAA,yBAAuB,CAACG,UAAxB,GAAqC,IAArC;AACAlL,IAAAA,wBAAwB,CAACpJ,qBAAD,CAAxB;;AACA,QAAI0O,EAAJ,EAAQ;AACN,aAAOA,EAAE,EAAT;AACD,KAFD,MAEO;AACL,aAAOlO,SAAP;AACD;AACF,GARD,SAQU;AACR4I,IAAAA,wBAAwB,CAACymB,gBAAD,CAAxB;AACA1b,IAAAA,yBAAuB,CAACG,UAAxB,GAAqCwb,cAArC;AAEAwY,IAAAA,gBAAgB,GAAGgF,oBAAnB,CAJQ;AAMR;AACA;;AACA,QAAI,CAAChF,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE31B,MAAAA,kBAAkB;AACnB;AACF;AACF;AAED,AA+BO,SAASumB,eAAT,CAAyBr+B,KAAzB,EAAuCgH,KAAvC,EAAqD;AAC1DssC,EAAAA,IAAW,CAAC/E,wBAAD,EAA2B9P,kBAA3B,AAAA,CAAX;AACAA,EAAAA,kBAAkB,GAAGhxB,UAAU,CAACgxB,kBAAD,EAAqBz3B,KAArB,CAA/B;AACA0nC,EAAAA,+BAA+B,GAAGjhC,UAAU,CAC1CihC,+BAD0C,EAE1C1nC,KAF0C,CAA5C;AAID;AAED,AAAO,SAASsgC,cAAT,CAAwBtnC,KAAxB,EAAsC;AAC3Cy+B,EAAAA,kBAAkB,GAAG8P,wBAAwB,CAAC/qC,OAA9C;AACA+vC,EAAAA,GAAY,CAAChF,wBAAD,AAAA,CAAZ;AACD;;AAED,SAASwD,iBAAT,CAA2BtsC,IAA3B,EAA4CuB,KAA5C,EAAiE;AAC/DvB,EAAAA,IAAI,CAAC2b,YAAL,GAAoB,IAApB;AACA3b,EAAAA,IAAI,CAACysC,aAAL,GAAqBnqC,OAArB;AAEA,QAAM6qC,aAAa,GAAGntC,IAAI,CAACmtC,aAA3B;;AACA,MAAIA,aAAa,KAAKhgC,SAAtB,EAAiC;AAC/B;AACA;AACAnN,IAAAA,IAAI,CAACmtC,aAAL,GAAqBhgC,SAArB,CAH+B;;AAK/BF,IAAAA,aAAa,CAACkgC,aAAD,CAAb;AACD;;AAED,MAAIt9B,cAAc,KAAK,IAAvB,EAA6B;AAC3B,QAAIqyB,eAAe,GAAGryB,cAAc,CAAC/S,MAArC;;AACA,WAAOolC,eAAe,KAAK,IAA3B,EAAiC;AAC/B,YAAMnkC,OAAO,GAAGmkC,eAAe,CAACvlC,SAAhC;AACAslC,MAAAA,qBAAqB,CACnBlkC,OADmB,EAEnBmkC,eAFmB,AAAA,CAArB;AAKAA,MAAAA,eAAe,GAAGA,eAAe,CAACplC,MAAlC;AACD;AACF;;AACD8rC,EAAAA,kBAAkB,GAAG5oC,IAArB;AACA,QAAM4sC,kBAAkB,GAAGjsB,oBAAoB,CAAC3gB,IAAI,CAACjC,OAAN,EAAe,IAAf,CAA/C;AACA8R,EAAAA,cAAc,GAAG+8B,kBAAjB;AACA/D,EAAAA,6BAA6B,GAAG7P,kBAAkB,GAAGiQ,+BAA+B,GAAG1nC,KAAvF;AACAwnC,EAAAA,4BAA4B,GAAGX,cAA/B;AACAY,EAAAA,4BAA4B,GAAG,IAA/B;AACAE,EAAAA,8BAA8B,GAAG5mC,OAAjC;AACA6mC,EAAAA,yCAAyC,GAAG7mC,OAA5C;AACAyrC,AACA3E,EAAAA,6BAA6B,GAAG9mC,OAAhC;AACA+mC,EAAAA,kCAAkC,GAAG,IAArC;AACAC,EAAAA,mCAAmC,GAAG,IAAtC;AAEAjxB,EAAAA,+BAA+B;;AAM/B,SAAOu0B,kBAAP;AACD;;AAED,SAASoB,WAAT,CAAqBhuC,IAArB,EAA2BsB,WAA3B,EAA8C;AAC5C,KAAG;AACD,QAAI2sC,WAAW,GAAGp+B,cAAlB;;AACA,QAAI;AACF;AACAsG,MAAAA,wBAAwB;AACxBoT,MAAAA,oBAAoB;AACpBme,MAAAA,iBAA2B,GAJzB;AAMF;;AACAnrC,MAAAA,mBAAiB,CAACwB,OAAlB,GAA4B,IAA5B;;AAEA,UAAIkwC,WAAW,KAAK,IAAhB,IAAwBA,WAAW,CAACnxC,MAAZ,KAAuB,IAAnD,EAAyD;AACvD;AACA;AACA;AACA;AACAisC,QAAAA,4BAA4B,GAAGV,gBAA/B;AACAW,QAAAA,4BAA4B,GAAG1nC,WAA/B,CANuD;AAQvD;AACA;AACA;AACA;AACA;;AACAuO,QAAAA,cAAc,GAAG,IAAjB;AACA;AACD;;AAED,UAAIva,mBAAmB,IAAI24C,WAAW,CAACpoC,IAAZ,GAAmBjE,WAA9C,EAA2D;AACzD;AACA;AACA;AACAuxB,QAAAA,wCAAwC,CAAC8a,WAAD,EAAc,IAAd,CAAxC;AACD;;AAED,UAAI54C,wBAAJ,EAA8B;AAC5B+L,QAAAA,0BAA0B;;AAE1B,YACEE,WAAW,KAAK,IAAhB,IACA,OAAOA,WAAP,KAAuB,QADvB,IAEA,OAAOA,WAAW,CAACi0B,IAAnB,KAA4B,UAH9B,EAIE;AACA,gBAAM9zB,QAAkB,GAAIH,WAA5B;AACAE,UAAAA,sBAAsB,CACpBysC,WADoB,EAEpBxsC,QAFoB,EAGpBonC,6BAHoB,CAAtB;AAKD,SAXD,MAWO;AACLxnC,UAAAA,oBAAoB,CAClB4sC,WADkB,EAElB3sC,WAFkB,EAGlBunC,6BAHkB,CAApB;AAKD;AACF;;AAED5S,MAAAA,cAAc,CACZj2B,IADY,EAEZiuC,WAAW,CAACnxC,MAFA,EAGZmxC,WAHY,EAIZ3sC,WAJY,EAKZunC,6BALY,CAAd;AAOAqF,MAAAA,kBAAkB,CAACD,WAAD,CAAlB;AACD,KAhED,CAgEE,OAAOE,qBAAP,EAA8B;AAC9B;AACA7sC,MAAAA,WAAW,GAAG6sC,qBAAd;;AACA,UAAIt+B,cAAc,KAAKo+B,WAAnB,IAAkCA,WAAW,KAAK,IAAtD,EAA4D;AAC1D;AACA;AACAA,QAAAA,WAAW,GAAGA,WAAW,CAACnxC,MAA1B;AACA+S,QAAAA,cAAc,GAAGo+B,WAAjB;AACD,OALD,MAKO;AACLA,QAAAA,WAAW,GAAGp+B,cAAd;AACD;;AACD;AACD,KA9EA;;;AAgFD;AACD,GAjFD,QAiFS,IAjFT;AAkFD;;AAED,SAASu+B,cAAT,GAA0B;AACxB,QAAMC,cAAc,GAAGhgC,wBAAsB,CAACtQ,OAA9C;AACAsQ,EAAAA,wBAAsB,CAACtQ,OAAvB,GAAiCmrB,qBAAjC;;AACA,MAAImlB,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA;AACA;AACA,WAAOnlB,qBAAP;AACD,GALD,MAKO;AACL,WAAOmlB,cAAP;AACD;AACF;;AAED,SAASC,aAAT,CAAuBD,cAAvB,EAAuC;AACrChgC,EAAAA,wBAAsB,CAACtQ,OAAvB,GAAiCswC,cAAjC;AACD;;AAED,AAAO,SAAShI,wBAAT,GAAoC;AACzCkD,EAAAA,4BAA4B,GAAG1qC,GAAG,EAAlC;AACD;AAED,AAAO,SAASyc,sBAAT,CAAgCpV,IAAhC,EAA0D;AAC/DgjC,EAAAA,8BAA8B,GAAGlhC,UAAU,CACzC9B,IADyC,EAEzCgjC,8BAFyC,CAA3C;AAID;AAED,AAAO,SAAS9H,gBAAT,GAAkC;AACvC,MAAI2H,4BAA4B,KAAKX,cAArC,EAAqD;AACnDW,IAAAA,4BAA4B,GAAGR,aAA/B;AACD;AACF;AAED,AAAO,SAASrS,+BAAT,GAAiD;AACtD,MACE6S,4BAA4B,KAAKX,cAAjC,IACAW,4BAA4B,KAAKR,aADjC,IAEAQ,4BAA4B,KAAKT,WAHnC,EAIE;AACAS,IAAAA,4BAA4B,GAAGP,sBAA/B;AACD,GAPqD;AAUtD;;;AACA,MACEI,kBAAkB,KAAK,IAAvB,KACC5hC,mBAAmB,CAACkiC,8BAAD,CAAnB,IACCliC,mBAAmB,CAACmiC,yCAAD,CAFrB,CADF,EAIE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxgC,IAAAA,mBAAiB,CAACigC,kBAAD,EAAqBC,6BAArB,CAAjB;AACD;AACF;AAED,AAAO,SAASzS,cAAT,CAAwB1jB,KAAxB,EAAqD;AAC1D,MAAIq2B,4BAA4B,KAAKP,sBAArC,EAA6D;AAC3DO,IAAAA,4BAA4B,GAAGT,WAA/B;AACD;;AACD,MAAIe,kCAAkC,KAAK,IAA3C,EAAiD;AAC/CA,IAAAA,kCAAkC,GAAG,CAAC32B,KAAD,CAArC;AACD,GAFD,MAEO;AACL22B,IAAAA,kCAAkC,CAAC7gC,IAAnC,CAAwCkK,KAAxC;AACD;AACF;AAGD;;AACA,AAAO,SAAS8uB,wBAAT,GAA6C;AAClD;AACA;AACA,SAAOuH,4BAA4B,KAAKX,cAAxC;AACD;;AAED,SAAS8D,cAAT,CAAwBlsC,IAAxB,EAAyCuB,KAAzC,EAAuD;AACrD,QAAMosC,oBAAoB,GAAGhF,gBAA7B;AACAA,EAAAA,gBAAgB,IAAIT,aAApB;AACA,QAAMmG,cAAc,GAAGD,cAAc,EAArC,CAHqD;AAMrD;;AACA,MAAIxF,kBAAkB,KAAK5oC,IAAvB,IAA+B6oC,6BAA6B,KAAKtnC,KAArE,EAA4E;AAC1E;AAgBAqoC,IAAAA,yBAAyB,GAAGtgC,sBAAsB,CAACtJ,AAAD,CAAlD;AACAssC,IAAAA,iBAAiB,CAACtsC,IAAD,EAAOuB,KAAP,CAAjB;AACD;;AAYD,KAAG;AACD,QAAI;AACFgtC,MAAAA,YAAY;AACZ;AACD,KAHD,CAGE,OAAOjtC,WAAP,EAAoB;AACpB0sC,MAAAA,WAAW,CAAChuC,IAAD,EAAOsB,WAAP,CAAX;AACD;AACF,GAPD,QAOS,IAPT;;AAQA6U,EAAAA,wBAAwB;AAExBwyB,EAAAA,gBAAgB,GAAGgF,oBAAnB;AACAW,EAAAA,aAAa,CAACD,cAAD,CAAb;;AAEA,MAAIx+B,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA,UAAM,IAAIzS,KAAJ,CACJ,wEACE,qCAFE,CAAN;AAID;;;AAaDwrC,EAAAA,kBAAkB,GAAG,IAArB;AACAC,EAAAA,6BAA6B,GAAGvmC,OAAhC;AAEA,SAAOymC,4BAAP;AACD;;AAGD;;;AACA,SAASwF,YAAT,GAAwB;AACtB;AACA,SAAO1+B,cAAc,KAAK,IAA1B,EAAgC;AAC9B2+B,IAAAA,iBAAiB,CAAC3+B,cAAD,CAAjB;AACD;AACF;;AAED,SAASo8B,oBAAT,CAA8BjsC,IAA9B,EAA+CuB,KAA/C,EAA6D;AAC3D,QAAMosC,oBAAoB,GAAGhF,gBAA7B;AACAA,EAAAA,gBAAgB,IAAIT,aAApB;AACA,QAAMmG,cAAc,GAAGD,cAAc,EAArC,CAH2D;AAM3D;;AACA,MAAIxF,kBAAkB,KAAK5oC,IAAvB,IAA+B6oC,6BAA6B,KAAKtnC,KAArE,EAA4E;AAC1E;AAgBAqoC,IAAAA,yBAAyB,GAAGtgC,sBAAsB,CAACtJ,AAAD,CAAlD;AACA6pC,IAAAA,gBAAgB;AAChByC,IAAAA,iBAAiB,CAACtsC,IAAD,EAAOuB,KAAP,CAAjB;AACD;;AAYD,KAAG;AACD,QAAI;AACFktC,MAAAA,kBAAkB;AAClB;AACD,KAHD,CAGE,OAAOntC,WAAP,EAAoB;AACpB0sC,MAAAA,WAAW,CAAChuC,IAAD,EAAOsB,WAAP,CAAX;AACD;AACF,GAPD,QAOS,IAPT;;AAQA6U,EAAAA,wBAAwB;AAExBm4B,EAAAA,aAAa,CAACD,cAAD,CAAb;AACA1F,EAAAA,gBAAgB,GAAGgF,oBAAnB;;;AASA,MAAI99B,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AAIA,WAAOu4B,cAAP;AACD,GAND,MAMO;AACL;;AAMAQ,IAAAA,kBAAkB,GAAG,IAArB;AACAC,IAAAA,6BAA6B,GAAGvmC,OAAhC,CARK;;AAWL,WAAOymC,4BAAP;AACD;AACF;AAED;;;AACA,SAAS0F,kBAAT,GAA8B;AAC5B;AACA,SAAO5+B,cAAc,KAAK,IAAnB,IAA2B,CAAClR,WAAW,EAA9C,EAAkD;AAChD6vC,IAAAA,iBAAiB,CAAC3+B,cAAD,CAAjB;AACD;AACF;;AAED,SAAS2+B,iBAAT,CAA2BE,UAA3B,EAAoD;AAClD;AACA;AACA;AACA,QAAM3wC,OAAO,GAAG2wC,UAAU,CAAC/xC,SAA3B;AACAymC,AAEA,MAAIzrB,IAAJ;;AACA,EAIO;AACLA,IAAAA,IAAI,GAAG4nB,WAAS,CAACxhC,OAAD,EAAU2wC,UAAV,EAAsB1V,kBAAtB,CAAhB;AACD;AAGD0V,EAAAA,UAAU,CAAC1wB,aAAX,GAA2B0wB,UAAU,CAAClwB,YAAtC;;AACA,MAAI7G,IAAI,KAAK,IAAb,EAAmB;AACjB;AACAu2B,IAAAA,kBAAkB,CAACQ,UAAD,CAAlB;AACD,GAHD,MAGO;AACL7+B,IAAAA,cAAc,GAAG8H,IAAjB;AACD;;AAEDpb,EAAAA,mBAAiB,CAACwB,OAAlB,GAA4B,IAA5B;AACD;;AAED,SAASmwC,kBAAT,CAA4BQ,UAA5B,EAAqD;AACnD;AACA;AACA,MAAIvO,aAAa,GAAGuO,UAApB;;AACA,KAAG;AACD;AACA;AACA;AACA,UAAM3wC,OAAO,GAAGoiC,aAAa,CAACxjC,SAA9B;AACA,UAAMmiB,WAAW,GAAGqhB,aAAa,CAACrjC,MAAlC,CALC;;AAQD,QAAI,CAACqjC,aAAa,CAACtjC,KAAd,GAAsBnB,UAAvB,MAAuCjB,OAA3C,EAAoD;AAClD2oC,AACA,UAAIzrB,IAAJ;;AACA,MAGE;AACAA,QAAAA,IAAI,GAAG6oB,YAAY,CAACziC,OAAD,EAAUoiC,aAAV,EAAyBnH,kBAAzB,CAAnB;AACD,OALD;;AAaA,UAAIrhB,IAAI,KAAK,IAAb,EAAmB;AACjB;AACA9H,QAAAA,cAAc,GAAG8H,IAAjB;AACA;AACD;AACF,KArBD,MAqBO;AACL;AACA;AACA;AACA,YAAMA,IAAI,GAAGqqB,UAAU,CAACjkC,OAAD,EAAUoiC,aAAV,AAAA,CAAvB,CAJK;;AAQL,UAAIxoB,IAAI,KAAK,IAAb,EAAmB;AACjB;AACA;AACA;AACA;AACAA,QAAAA,IAAI,CAAC9a,KAAL,IAAcpB,cAAd;AACAoU,QAAAA,cAAc,GAAG8H,IAAjB;AACA;AACD;;AAmBD,UAAImH,WAAW,KAAK,IAApB,EAA0B;AACxB;AACAA,QAAAA,WAAW,CAACjiB,KAAZ,IAAqBnB,UAArB;AACAojB,QAAAA,WAAW,CAACke,YAAZ,GAA2BviC,OAA3B;AACAqkB,QAAAA,WAAW,CAACqB,SAAZ,GAAwB,IAAxB;AACD,OALD,MAKO;AACL;AACA4oB,QAAAA,4BAA4B,GAAGL,kBAA/B;AACA74B,QAAAA,cAAc,GAAG,IAAjB;AACA;AACD;AACF;;AAED,UAAM8+B,YAAY,GAAGxO,aAAa,CAACviC,OAAnC;;AACA,QAAI+wC,YAAY,KAAK,IAArB,EAA2B;AACzB;AACA9+B,MAAAA,cAAc,GAAG8+B,YAAjB;AACA;AACD,KAlFA;;;AAoFDxO,IAAAA,aAAa,GAAGrhB,WAAhB,CApFC;;AAsFDjP,IAAAA,cAAc,GAAGswB,aAAjB;AACD,GAvFD,QAuFSA,aAAa,KAAK,IAvF3B,EAJmD;;;AA8FnD,MAAI4I,4BAA4B,KAAKX,cAArC,EAAqD;AACnDW,IAAAA,4BAA4B,GAAGN,aAA/B;AACD;AACF;;AAED,SAASuE,UAAT,CACEhtC,IADF,EAEE4uC,iBAFF,EAGEjW,WAHF,EAIE;AACA;AACA;AACA,QAAMkW,0BAA0B,GAAGrlC,wBAAwB,EAA3D;AACA,QAAM2mB,cAAc,GAAG3b,yBAAuB,CAACG,UAA/C;;AAEA,MAAI;AACFH,IAAAA,yBAAuB,CAACG,UAAxB,GAAqC,IAArC;AACAlL,IAAAA,wBAAwB,CAACpJ,qBAAD,CAAxB;AACAyuC,IAAAA,cAAc,CACZ9uC,IADY,EAEZ4uC,iBAFY,EAGZjW,WAHY,EAIZkW,0BAJY,CAAd;AAMD,GATD,SASU;AACRr6B,IAAAA,yBAAuB,CAACG,UAAxB,GAAqCwb,cAArC;AACA1mB,IAAAA,wBAAwB,CAAColC,0BAAD,CAAxB;AACD;;AAED,SAAO,IAAP;AACD;;AAED,SAASC,cAAT,CACE9uC,IADF,EAEE4uC,iBAFF,EAGEjW,WAHF,EAIEoW,mBAJF,EAKE;AACA,KAAG;AACD;AACA;AACA;AACA;AACA;AACA;AACAlD,IAAAA,mBAAmB;AACpB,GARD,QAQS3B,6BAA6B,KAAK,IAR3C;;AAWA,MAAI,CAACvB,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE,UAAM,IAAI5qC,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,QAAMue,YAAY,GAAG3b,IAAI,CAAC2b,YAA1B;AACA,QAAMpa,KAAK,GAAGvB,IAAI,CAACysC,aAAnB;;AAYA,MAAI9wB,YAAY,KAAK,IAArB,EAA2B;AACzB;AAUA,WAAO,IAAP;AACD,GAZD;;AAsBA3b,EAAAA,IAAI,CAAC2b,YAAL,GAAoB,IAApB;AACA3b,EAAAA,IAAI,CAACysC,aAAL,GAAqBnqC,OAArB;;AAEA,MAAIqZ,YAAY,KAAK3b,IAAI,CAACjC,OAA1B,EAAmC;AACjC,UAAM,IAAIX,KAAJ,CACJ,2EACE,uCAFE,CAAN;AAID,GA3DD;AA8DA;;;AACA4C,EAAAA,IAAI,CAACkrC,YAAL,GAAoB,IAApB;AACAlrC,EAAAA,IAAI,CAACmrC,gBAAL,GAAwB5oC,MAAxB,CAhEA;AAmEA;;AACA,MAAIuG,cAAc,GAAGd,UAAU,CAAC2T,YAAY,CAACpa,KAAd,EAAqBoa,YAAY,CAAC/E,UAAlC,CAA/B;AACA/N,EAAAA,gBAAgB,CAAC7I,IAAD,EAAO8I,cAAP,CAAhB;;AAEA,MAAI9I,IAAI,KAAK4oC,kBAAb,EAAiC;AAC/B;AACAA,IAAAA,kBAAkB,GAAG,IAArB;AACA/4B,IAAAA,cAAc,GAAG,IAAjB;AACAg5B,IAAAA,6BAA6B,GAAGvmC,OAAhC;AACD,GALD,AAvEA;AAmFA;AACA;AACA;AACA;;;AACA,MACE,CAACqZ,YAAY,CAACqhB,YAAb,GAA4B3gC,WAA7B,MAA8C5B,OAA9C,IACA,CAACkhB,YAAY,CAAC9e,KAAb,GAAqBR,WAAtB,MAAuC5B,OAFzC,EAGE;AACA,QAAI,CAACwvC,0BAAL,EAAiC;AAC/BA,MAAAA,0BAA0B,GAAG,IAA7B;AACAG,MAAAA,mCAAmC,GAAGthC,cAAtC,CAF+B;AAI/B;AACA;AACA;AACA;AACA;;AACAuhC,MAAAA,yBAAyB,GAAG1R,WAA5B;AACAn6B,MAAAA,kBAAgB,CAACkC,cAAD,EAA0B,MAAM;AAC9CmrC,QAAAA,mBAAmB,GAD2B;AAG9C;AACA;;AACA,eAAO,IAAP;AACD,OANe,CAAhB;AAOD;AACF,GA7GD;AAgHA;AACA;AACA;AACA;;;AACA,QAAMmD,iBAAiB,GACrB,CAACrzB,YAAY,CAACqhB,YAAb,IACE/gC,kBAAkB,GAAGE,YAArB,GAAoCC,UAApC,GAAiDC,WADnD,CAAD,MAEA5B,OAHF;AAIA,QAAMw0C,aAAa,GACjB,CAACtzB,YAAY,CAAC9e,KAAb,IACEZ,kBAAkB,GAAGE,YAArB,GAAoCC,UAApC,GAAiDC,WADnD,CAAD,MAEA5B,OAHF;;AAKA,MAAIu0C,iBAAiB,IAAIC,aAAzB,EAAwC;AACtC,UAAM9e,cAAc,GAAG3b,yBAAuB,CAACG,UAA/C;AACAH,IAAAA,yBAAuB,CAACG,UAAxB,GAAqC,IAArC;AACA,UAAMub,gBAAgB,GAAG1mB,wBAAwB,EAAjD;AACAC,IAAAA,wBAAwB,CAACpJ,qBAAD,CAAxB;AAEA,UAAMstC,oBAAoB,GAAGhF,gBAA7B;AACAA,IAAAA,gBAAgB,IAAIR,aAApB,CAPsC;;AAUtC5rC,IAAAA,mBAAiB,CAACwB,OAAlB,GAA4B,IAA5B,CAVsC;AAatC;AACA;AAEA;AACA;AACA;;AACA,UAAMglC,iCAAiC,GAAGC,2BAA2B,CACnEhjC,IADmE,EAEnE2b,YAFmE,CAArE;;;AAkBAmqB,IAAAA,qBAAqB,CAAC9lC,IAAD,EAAO2b,YAAP,AAAA,CAArB;;AAOA1P,IAAAA,gBAAgB,CAACjM,IAAI,CAACgM,aAAN,CAAhB,CA5CsC;AA+CtC;AACA;AACA;;AACAhM,IAAAA,IAAI,CAACjC,OAAL,GAAe4d,YAAf,CAlDsC;AAqDtC;AAUA4qB,IAAAA,mBAAmB,CAAC5qB,YAAD,EAAe3b,IAAf,EAAqBuB,KAArB,CAAnB;AAgBA;;;AACA3C,IAAAA,YAAY;AAEZ+pC,IAAAA,gBAAgB,GAAGgF,oBAAnB,CAlFsC;;AAqFtClkC,IAAAA,wBAAwB,CAACymB,gBAAD,CAAxB;AACA1b,IAAAA,yBAAuB,CAACG,UAAxB,GAAqCwb,cAArC;AACD,GAvFD,MAuFO;AACL;AACAnwB,IAAAA,IAAI,CAACjC,OAAL,GAAe4d,YAAf,CAFK;AAIL,AAKD;;AAID,MAAIsuB,0BAAJ,EAAgC;AAC9B;AACA;AACAA,IAAAA,0BAA0B,GAAG,KAA7B;AACAC,IAAAA,6BAA6B,GAAGlqC,IAAhC;AACAmqC,IAAAA,0BAA0B,GAAG5oC,KAA7B;AACD,GAND,MAMO;AACL;AACA;AACA2tC,IAAAA,sBAAsB,CAAClvC,IAAD,EAAO8I,cAAP,CAAtB;AAKD,GA/OD;;;AAkPAA,EAAAA,cAAc,GAAG9I,IAAI,CAACkF,YAAtB,CAlPA;AAqPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAI4D,cAAc,KAAKxG,OAAvB,EAAgC;AAC9B;AACA;AACA0nC,IAAAA,sCAAsC,GAAG,IAAzC;AACD;;AAQDmF,EAAAA,YAAoB,CAACxzB,YAAY,CAAC7d,SAAd,EAAyBixC,mBAAzB,CAApB;AAaA;;;AACA/D,EAAAA,qBAAqB,CAAChrC,IAAD,EAAOnB,GAAG,EAAV,CAArB;;AAEA,MAAI+vC,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B;AACA;AACA,UAAMQ,kBAAkB,GAAGpvC,IAAI,CAACovC,kBAAhC;;AACA,SAAK,IAAI7mC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqmC,iBAAiB,CAACn8B,MAAtC,EAA8ClK,CAAC,EAA/C,EAAmD;AACjD,YAAM20B,gBAAgB,GAAG0R,iBAAiB,CAACrmC,CAAD,CAA1C;AACA,YAAMwrB,cAAc,GAAGmJ,gBAAgB,CAACznB,KAAxC;AACA,YAAM+d,MAAM,GAAG0J,gBAAgB,CAAC1J,MAAhC;AACA4b,MAAAA,kBAAkB,CAAClS,gBAAgB,CAAChoC,KAAlB,EAAyB;AAAC6+B,QAAAA,cAAD;AAAiBP,QAAAA;AAAjB,OAAzB,CAAlB;AACD;AACF;;AAED,MAAIsW,gBAAJ,EAAsB;AACpBA,IAAAA,gBAAgB,GAAG,KAAnB;AACA,UAAMp3B,KAAK,GAAGq3B,kBAAd;AACAA,IAAAA,kBAAkB,GAAG,IAArB;AACA,UAAMr3B,KAAN;AACD,GA3SD;AA8SA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MACE7K,gBAAgB,CAACsiC,0BAAD,EAA6B3nC,QAA7B,CAAhB,IACAxC,IAAI,CAACxF,GAAL,KAAaiX,UAFf,EAGE;AACAo6B,IAAAA,mBAAmB;AACpB,GA1TD;;;AA6TA/iC,EAAAA,cAAc,GAAG9I,IAAI,CAACkF,YAAtB;;AACA,MAAI2C,gBAAgB,CAACiB,cAAD,EAAkBtG,QAAlB,CAApB,EAAwD;AACtD,AAKA;;;AACA,QAAIxC,IAAI,KAAKwqC,qBAAb,EAAoC;AAClCD,MAAAA,iBAAiB;AAClB,KAFD,MAEO;AACLA,MAAAA,iBAAiB,GAAG,CAApB;AACAC,MAAAA,qBAAqB,GAAGxqC,IAAxB;AACD;AACF,GAbD,MAaO;AACLuqC,IAAAA,iBAAiB,GAAG,CAApB;AACD,GA7UD;;;AAgVAl4B,EAAAA,kBAAkB;;AAYlB,SAAO,IAAP;AACD;;AAED,SAAS68B,sBAAT,CAAgClvC,IAAhC,EAAiD8I,cAAjD,EAAwE;AACtE,EAAiB;AACf,UAAMguB,gBAAgB,GAAI92B,IAAI,CAAC82B,gBAAL,IAAyBhuB,cAAnD;;AACA,QAAIguB,gBAAgB,KAAKx0B,OAAzB,EAAkC;AAChC;AACA;AACA,YAAMo0B,WAAW,GAAG12B,IAAI,CAAC02B,WAAzB;;AACA,UAAIA,WAAW,IAAI,IAAnB,EAAyB;AACvB12B,QAAAA,IAAI,CAAC02B,WAAL,GAAmB,IAAnB;AACA7O,QAAAA,YAAY,CAAC6O,WAAD,CAAZ;AACD;AACF;AACF;AACF;;AAED,AAAO,SAASmV,mBAAT,GAAwC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,MAAI3B,6BAA6B,KAAK,IAAtC,EAA4C;AAC1C;AACA;AACA,UAAMlqC,IAAI,GAAGkqC,6BAAb,CAH0C;AAK1C;AACA;;AACA,UAAMphC,cAAc,GAAGshC,mCAAvB;AACAA,IAAAA,mCAAmC,GAAG9nC,OAAtC;AAEA,UAAM+sC,cAAc,GAAGvlC,oBAAoB,CAACqgC,0BAAD,CAA3C;AACA,UAAMmF,QAAQ,GAAG1lC,kBAAkB,CAACnJ,oBAAD,EAAuB4uC,cAAvB,CAAnC;AACA,UAAMlf,cAAc,GAAG3b,yBAAuB,CAACG,UAA/C;AACA,UAAMub,gBAAgB,GAAG1mB,wBAAwB,EAAjD;;AAEA,QAAI;AACFgL,MAAAA,yBAAuB,CAACG,UAAxB,GAAqC,IAArC;AACAlL,MAAAA,wBAAwB,CAAC6lC,QAAD,CAAxB;AACA,aAAOC,uBAAuB,EAA9B;AACD,KAJD,SAIU;AACR9lC,MAAAA,wBAAwB,CAACymB,gBAAD,CAAxB;AACA1b,MAAAA,yBAAuB,CAACG,UAAxB,GAAqCwb,cAArC,CAFQ;AAKR;AACA;;AACA+e,MAAAA,sBAAsB,CAAClvC,IAAD,EAAO8I,cAAP,CAAtB;AACD;AACF;;AACD,SAAO,KAAP;AACD;AAED;AAaA,SAASymC,uBAAT,GAAmC;AACjC,MAAIrF,6BAA6B,KAAK,IAAtC,EAA4C;AAC1C,WAAO,KAAP;AACD,GAHgC;;;AAMjC,QAAMvR,WAAW,GAAG0R,yBAApB;AACAA,EAAAA,yBAAyB,GAAG,IAA5B;AAEA,QAAMrqC,IAAI,GAAGkqC,6BAAb;AACA,QAAM3oC,KAAK,GAAG4oC,0BAAd;AACAD,EAAAA,6BAA6B,GAAG,IAAhC,CAXiC;AAajC;AACA;;AACAC,EAAAA,0BAA0B,GAAG7nC,OAA7B;;AAEA,MAAI,CAACqmC,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDH,SAA7D,EAAwE;AACtE,UAAM,IAAI5qC,KAAJ,CAAU,uDAAV,CAAN;AACD;;AAeD,QAAMuwC,oBAAoB,GAAGhF,gBAA7B;AACAA,EAAAA,gBAAgB,IAAIR,aAApB;AAEAlB,EAAAA,2BAA2B,CAACjnC,IAAI,CAACjC,OAAN,CAA3B;AACA6oC,EAAAA,yBAAyB,CAAC5mC,IAAD,EAAOA,IAAI,CAACjC,OAAZ,EAAqBwD,KAArB,EAA4Bo3B,WAA5B,CAAzB,CAtCiC;;AAgEjCgQ,EAAAA,gBAAgB,GAAGgF,oBAAnB;AAEAt7B,EAAAA,kBAAkB;;;AAgDlBm9B,EAAAA,gBAAwB,CAACxvC,IAAD,CAAxB;;AAOA,SAAO,IAAP;AACD;;AAED,AAAO,SAASq2B,kCAAT,CAA4ChpB,QAA5C,EAAsE;AAC3E,SACE28B,sCAAsC,KAAK,IAA3C,IACAA,sCAAsC,CAAC7U,GAAvC,CAA2C9nB,QAA3C,CAFF;AAID;AAED,AAAO,SAASynB,+BAAT,CAAyCznB,QAAzC,EAA0D;AAC/D,MAAI28B,sCAAsC,KAAK,IAA/C,EAAqD;AACnDA,IAAAA,sCAAsC,GAAG,IAAI9U,GAAJ,CAAQ,CAAC7nB,QAAD,CAAR,CAAzC;AACD,GAFD,MAEO;AACL28B,IAAAA,sCAAsC,CAAC5U,GAAvC,CAA2C/nB,QAA3C;AACD;AACF;;AAED,SAASoiC,2BAAT,CAAqC/8B,KAArC,EAAmD;AACjD,MAAI,CAACo3B,gBAAL,EAAuB;AACrBA,IAAAA,gBAAgB,GAAG,IAAnB;AACAC,IAAAA,kBAAkB,GAAGr3B,KAArB;AACD;AACF;;AACD,AAAO,MAAMgiB,eAAe,GAAG+a,2BAAxB;;AAEP,SAASC,6BAAT,CACEC,SADF,EAEE12B,WAFF,EAGEvG,KAHF,EAIE;AACA,QAAMkhB,SAAS,GAAGL,0BAA0B,CAAC7gB,KAAD,EAAQuG,WAAR,CAA5C;AACA,QAAM7B,MAAM,GAAGqd,qBAAqB,CAACkb,SAAD,EAAY/b,SAAZ,EAAwBpxB,QAAxB,CAApC;AACA,QAAMxC,IAAI,GAAG8Z,aAAa,CAAC61B,SAAD,EAAYv4B,MAAZ,EAAqB5U,QAArB,CAA1B;AACA,QAAM8D,SAAS,GAAG8V,gBAAgB,EAAlC;;AACA,MAAIpc,IAAI,KAAK,IAAb,EAAmB;AACjByI,IAAAA,eAAe,CAACzI,IAAD,EAAOwC,QAAP,EAAiB8D,SAAjB,CAAf;AACA0kC,IAAAA,qBAAqB,CAAChrC,IAAD,EAAOsG,SAAP,CAArB;AACD;AACF;;AAED,AAAO,SAASo8B,uBAAT,CACLzpB,WADK,EAELwpB,sBAFK,EAGL/vB,KAHK,EAIL;AACA;AAIA,MAAIuG,WAAW,CAACze,GAAZ,KAAoBxE,QAAxB,EAAkC;AAChC;AACA;AACA05C,IAAAA,6BAA6B,CAACz2B,WAAD,EAAcA,WAAd,EAA2BvG,KAA3B,CAA7B;AACA;AACD;;AAED,MAAInY,KAAK,GAAG,IAAZ;;AACA,EAEO;AACLA,IAAAA,KAAK,GAAG0e,WAAW,CAACnc,MAApB;AACD;;AAED,SAAOvC,KAAK,KAAK,IAAjB,EAAuB;AACrB,QAAIA,KAAK,CAACC,GAAN,KAAcxE,QAAlB,EAA4B;AAC1B05C,MAAAA,6BAA6B,CAACn1C,KAAD,EAAQ0e,WAAR,EAAqBvG,KAArB,CAA7B;AACA;AACD,KAHD,MAGO,IAAInY,KAAK,CAACC,GAAN,KAAc1E,cAAlB,EAAkC;AACvC,YAAM+Y,IAAI,GAAGtU,KAAK,CAACf,IAAnB;AACA,YAAM6T,QAAQ,GAAG9S,KAAK,CAACuD,SAAvB;;AACA,UACE,OAAO+Q,IAAI,CAAC+lB,wBAAZ,KAAyC,UAAzC,IACC,OAAOvnB,QAAQ,CAACwnB,iBAAhB,KAAsC,UAAtC,IACC,CAACwB,kCAAkC,CAAChpB,QAAD,CAHvC,EAIE;AACA,cAAMumB,SAAS,GAAGL,0BAA0B,CAAC7gB,KAAD,EAAQuG,WAAR,CAA5C;AACA,cAAM7B,MAAM,GAAGud,sBAAsB,CACnCp6B,KADmC,EAEnCq5B,SAFmC,EAGlCpxB,QAHkC,CAArC;AAKA,cAAMxC,IAAI,GAAG8Z,aAAa,CAACvf,KAAD,EAAQ6c,MAAR,EAAiB5U,QAAjB,CAA1B;AACA,cAAM8D,SAAS,GAAG8V,gBAAgB,EAAlC;;AACA,YAAIpc,IAAI,KAAK,IAAb,EAAmB;AACjByI,UAAAA,eAAe,CAACzI,IAAD,EAAOwC,QAAP,EAAiB8D,SAAjB,CAAf;AACA0kC,UAAAA,qBAAqB,CAAChrC,IAAD,EAAOsG,SAAP,CAArB;AACD;;AACD;AACD;AACF;;AACD/L,IAAAA,KAAK,GAAGA,KAAK,CAACuC,MAAd;AACD;AAiBF;AAED,AAAO,SAASw4B,iBAAT,CACLt1B,IADK,EAELyB,QAFK,EAGL4D,WAHK,EAIL;AACA,QAAM2vB,SAAS,GAAGh1B,IAAI,CAACg1B,SAAvB;;AACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;AACtB;AACA;AACAA,IAAAA,SAAS,CAACrS,MAAV,CAAiBlhB,QAAjB;AACD;;AAED,QAAM6E,SAAS,GAAG8V,gBAAgB,EAAlC;AACAxT,EAAAA,cAAc,CAAC5I,IAAD,EAAOqF,WAAP,AAAA,CAAd;AAEAuqC;AAEA,MACEhH,kBAAkB,KAAK5oC,IAAvB,IACA8H,eAAe,CAAC+gC,6BAAD,EAAgCxjC,WAAhC,CAFjB,EAGE;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA,QACE0jC,4BAA4B,KAAKP,sBAAjC,IACCO,4BAA4B,KAAKR,aAAjC,IACCthC,mBAAmB,CAAC4hC,6BAAD,CADpB,IAEChqC,GAAG,KAAK0qC,4BAAR,GAAuCC,oBAJ3C,EAKE;AACA;AACA8C,MAAAA,iBAAiB,CAACtsC,IAAD,EAAOsC,OAAP,CAAjB;AACD,KARD,MAQO;AACL;AACA;AACA8mC,MAAAA,6BAA6B,GAAGphC,UAAU,CACxCohC,6BADwC,EAExC/jC,WAFwC,CAA1C;AAID;AACF;;AAED2lC,EAAAA,qBAAqB,CAAChrC,IAAD,EAAOsG,SAAP,CAArB;AACD;;AAED,SAASupC,qBAAT,CAA+BC,aAA/B,EAAqD9U,SAArD,EAAsE;AACpE;AACA;AACA;AACA;AACA,MAAIA,SAAS,KAAKz4B,MAAlB,EAA0B;AACxB;AACA;AACAy4B,IAAAA,SAAS,GAAG6P,gBAAgB,CAACiF,aAAD,CAA5B;AACD,GATmE;;;AAWpE,QAAMxpC,SAAS,GAAG8V,gBAAgB,EAAlC;AACA,QAAMpc,IAAI,GAAG+Y,8BAA8B,CAAC+2B,aAAD,EAAgB9U,SAAhB,CAA3C;;AACA,MAAIh7B,IAAI,KAAK,IAAb,EAAmB;AACjByI,IAAAA,eAAe,CAACzI,IAAD,EAAOg7B,SAAP,EAAkB10B,SAAlB,CAAf;AACA0kC,IAAAA,qBAAqB,CAAChrC,IAAD,EAAOsG,SAAP,CAArB;AACD;AACF;;AAED,AAAO,SAASk3B,+BAAT,CAAyCsS,aAAzC,EAA+D;AACpE,QAAMxU,aAAmC,GAAGwU,aAAa,CAACh9B,aAA1D;AACA,MAAIkoB,SAAS,GAAGz4B,MAAhB;;AACA,MAAI+4B,aAAa,KAAK,IAAtB,EAA4B;AAC1BN,IAAAA,SAAS,GAAGM,aAAa,CAACN,SAA1B;AACD;;AACD6U,EAAAA,qBAAqB,CAACC,aAAD,EAAgB9U,SAAhB,CAArB;AACD;AAED,AAAO,SAAS6K,oBAAT,CAA8BiK,aAA9B,EAAoDruC,QAApD,EAAwE;AAC7E,MAAIu5B,SAAS,GAAGz4B,MAAhB,CAD6E;;AAE7E,MAAIqjC,UAAJ;;AACA,UAAQkK,aAAa,CAACt1C,GAAtB;AACE,SAAK9D,iBAAL;AACEkvC,MAAAA,UAAU,GAAGkK,aAAa,CAAChyC,SAA3B;AACA,YAAMw9B,aAAmC,GAAGwU,aAAa,CAACh9B,aAA1D;;AACA,UAAIwoB,aAAa,KAAK,IAAtB,EAA4B;AAC1BN,QAAAA,SAAS,GAAGM,aAAa,CAACN,SAA1B;AACD;;AACD;;AACF,SAAKhkC,qBAAL;AACE4uC,MAAAA,UAAU,GAAGkK,aAAa,CAAChyC,SAA3B;AACA;;AACF;AACE,YAAM,IAAIV,KAAJ,CACJ,4CACE,kCAFE,CAAN;AAZJ;;AAkBA,MAAIwoC,UAAU,KAAK,IAAnB,EAAyB;AACvB;AACA;AACAA,IAAAA,UAAU,CAACjjB,MAAX,CAAkBlhB,QAAlB;AACD;;AAEDouC,EAAAA,qBAAqB,CAACC,aAAD,EAAgB9U,SAAhB,CAArB;AACD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASsS,GAAT,CAAayC,WAAb,EAAkC;AAChC,SAAOA,WAAW,GAAG,GAAd,GACH,GADG,GAEHA,WAAW,GAAG,GAAd,GACA,GADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEAhI,IAAI,CAACgI,WAAW,GAAG,IAAf,CAAJ,GAA2B,IAZ/B;AAaD;;AAED,SAASjF,qBAAT,GAAiC;AAC/B,MAAIP,iBAAiB,GAAGD,mBAAxB,EAA6C;AAC3CC,IAAAA,iBAAiB,GAAG,CAApB;AACAC,IAAAA,qBAAqB,GAAG,IAAxB;AAEA,UAAM,IAAIptC,KAAJ,CACJ,qEACE,0DADF,GAEE,mEAFF,GAGE,yBAJE,CAAN;AAMD;AAeF;AAkID,IAAImiC,WAAJ;;AACA,AA0EO;AACLA,EAAAA,WAAS,GAAGyQ,SAAZ;AACD;;AAsED,SAASxxC,kBAAT,CAA0ByxC,aAA1B,EAAyC/9B,QAAzC,EAAmD;AACjD,EAUO;AACL;AACA,WAAOg+B,gBAA0B,CAACD,aAAD,EAAgB/9B,QAAhB,CAAjC;AACD;AACF;;AAED,SAASxT,gBAAT,CAAwBwsC,YAAxB,EAAsC;AACpC;;AAIA,SAAOiF,cAAwB,CAACjF,YAAD,CAA/B;AACD;;AAED,SAAS+B,8BAAT,GAA0C;AACxC;AACA,SAAO53B,KAAO,CAAd;AACD;;AC36FD,SAAS+6B,SAAT,CACE51C,GADF,EAEEgkB,YAFF,EAGEzpB,GAHF,EAIE8Q,IAJF,EAKE;AACA;AACA,OAAKrL,GAAL,GAAWA,GAAX;AACA,OAAKzF,GAAL,GAAWA,GAAX;AACA,OAAKupB,WAAL,GAAmB,IAAnB;AACA,OAAK9kB,IAAL,GAAY,IAAZ;AACA,OAAKsE,SAAL,GAAiB,IAAjB,CANA;;AASA,OAAKhB,MAAL,GAAc,IAAd;AACA,OAAKa,KAAL,GAAa,IAAb;AACA,OAAKC,OAAL,GAAe,IAAf;AACA,OAAKoI,KAAL,GAAa,CAAb;AAEA,OAAKiZ,GAAL,GAAW,IAAX;AAEA,OAAKT,YAAL,GAAoBA,YAApB;AACA,OAAKR,aAAL,GAAqB,IAArB;AACA,OAAKzG,WAAL,GAAmB,IAAnB;AACA,OAAKzE,aAAL,GAAqB,IAArB;AACA,OAAKmE,YAAL,GAAoB,IAApB;AAEA,OAAKpR,IAAL,GAAYA,IAAZ,CAtBA;;AAyBA,OAAKhJ,KAAL,GAAapC,OAAb;AACA,OAAKuiC,YAAL,GAAoBviC,OAApB;AACA,OAAK0lB,SAAL,GAAiB,IAAjB;AAEA,OAAK5e,KAAL,GAAae,OAAb;AACA,OAAKsU,UAAL,GAAkBtU,OAAlB;AAEA,OAAK3F,SAAL,GAAiB,IAAjB;AAwCD;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM0zC,WAAW,GAAG,UAClB71C,GADkB,EAElBgkB,YAFkB,EAGlBzpB,GAHkB,EAIlB8Q,IAJkB,EAKX;AACP;AACA,SAAO,IAAIuqC,SAAJ,CAAc51C,GAAd,EAAmBgkB,YAAnB,EAAiCzpB,GAAjC,EAAsC8Q,IAAtC,CAAP;AACD,CARD;;AAUA,SAASyqC,eAAT,CAAyBxgC,SAAzB,EAA8C;AAC5C,QAAMb,SAAS,GAAGa,SAAS,CAACb,SAA5B;AACA,SAAO,CAAC,EAAEA,SAAS,IAAIA,SAAS,CAACshC,gBAAzB,CAAR;AACD;;AAED,AAAO,SAASxY,yBAAT,CAAmCv+B,IAAnC,EAA8C;AACnD,SACE,OAAOA,IAAP,KAAgB,UAAhB,IACA,CAAC82C,eAAe,CAAC92C,IAAD,CADhB,IAEAA,IAAI,CAACqc,YAAL,KAAsBhV,SAHxB;AAKD;AAED,AAAO,SAAS65B,uBAAT,CAAiC5qB,SAAjC,EAA+D;AACpE,MAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnC,WAAOwgC,eAAe,CAACxgC,SAAD,CAAf,GAA6Bha,cAA7B,GAA8CD,iBAArD;AACD,GAFD,MAEO,IAAIia,SAAS,KAAKjP,SAAd,IAA2BiP,SAAS,KAAK,IAA7C,EAAmD;AACxD,UAAMpW,QAAQ,GAAGoW,SAAS,CAACpW,QAA3B;;AACA,QAAIA,QAAQ,KAAK3B,sBAAjB,EAAyC;AACvC,aAAOvB,UAAP;AACD;;AACD,QAAIkD,QAAQ,KAAKxB,eAAjB,EAAkC;AAChC,aAAOvB,aAAP;AACD;AACF;;AACD,SAAOZ,sBAAP;AACD;;AAGD,AAAO,SAAS4qB,oBAAT,CAA8B5iB,OAA9B,EAA8CygB,YAA9C,EAAwE;AAC7E,MAAI3O,cAAc,GAAG9R,OAAO,CAACpB,SAA7B;;AACA,MAAIkT,cAAc,KAAK,IAAvB,EAA6B;AAC3B;AACA;AACA;AACA;AACA;AACAA,IAAAA,cAAc,GAAGwgC,WAAW,CAC1BtyC,OAAO,CAACvD,GADkB,EAE1BgkB,YAF0B,EAG1BzgB,OAAO,CAAChJ,GAHkB,EAI1BgJ,OAAO,CAAC8H,IAJkB,CAA5B;AAMAgK,IAAAA,cAAc,CAACyO,WAAf,GAA6BvgB,OAAO,CAACugB,WAArC;AACAzO,IAAAA,cAAc,CAACrW,IAAf,GAAsBuE,OAAO,CAACvE,IAA9B;AACAqW,IAAAA,cAAc,CAAC/R,SAAf,GAA2BC,OAAO,CAACD,SAAnC;;AAUA+R,IAAAA,cAAc,CAAClT,SAAf,GAA2BoB,OAA3B;AACAA,IAAAA,OAAO,CAACpB,SAAR,GAAoBkT,cAApB;AACD,GA1BD,MA0BO;AACLA,IAAAA,cAAc,CAAC2O,YAAf,GAA8BA,YAA9B,CADK;;AAGL3O,IAAAA,cAAc,CAACrW,IAAf,GAAsBuE,OAAO,CAACvE,IAA9B,CAHK;AAML;;AACAqW,IAAAA,cAAc,CAAChT,KAAf,GAAuBpC,OAAvB,CAPK;;AAULoV,IAAAA,cAAc,CAACmtB,YAAf,GAA8BviC,OAA9B;AACAoV,IAAAA,cAAc,CAACsQ,SAAf,GAA2B,IAA3B;AAUD,GAjD4E;AAoD7E;;;AACAtQ,EAAAA,cAAc,CAAChT,KAAf,GAAuBkB,OAAO,CAAClB,KAAR,GAAgBP,UAAvC;AACAuT,EAAAA,cAAc,CAAC+G,UAAf,GAA4B7Y,OAAO,CAAC6Y,UAApC;AACA/G,EAAAA,cAAc,CAACtO,KAAf,GAAuBxD,OAAO,CAACwD,KAA/B;AAEAsO,EAAAA,cAAc,CAAClS,KAAf,GAAuBI,OAAO,CAACJ,KAA/B;AACAkS,EAAAA,cAAc,CAACmO,aAAf,GAA+BjgB,OAAO,CAACigB,aAAvC;AACAnO,EAAAA,cAAc,CAACiD,aAAf,GAA+B/U,OAAO,CAAC+U,aAAvC;AACAjD,EAAAA,cAAc,CAAC0H,WAAf,GAA6BxZ,OAAO,CAACwZ,WAArC,CA5D6E;AA+D7E;;AACA,QAAMi5B,mBAAmB,GAAGzyC,OAAO,CAACkZ,YAApC;AACApH,EAAAA,cAAc,CAACoH,YAAf,GACEu5B,mBAAmB,KAAK,IAAxB,GACI,IADJ,GAEI;AACEjvC,IAAAA,KAAK,EAAEivC,mBAAmB,CAACjvC,KAD7B;AAEE4V,IAAAA,YAAY,EAAEq5B,mBAAmB,CAACr5B;AAFpC,GAHN,CAjE6E;;AA0E7EtH,EAAAA,cAAc,CAACjS,OAAf,GAAyBG,OAAO,CAACH,OAAjC;AACAiS,EAAAA,cAAc,CAAC7J,KAAf,GAAuBjI,OAAO,CAACiI,KAA/B;AACA6J,EAAAA,cAAc,CAACoP,GAAf,GAAqBlhB,OAAO,CAACkhB,GAA7B;;AA0BA,SAAOpP,cAAP;AACD;;AAGD,AAAO,SAAS8T,mBAAT,CAA6B9T,cAA7B,EAAoDzG,WAApD,EAAwE;AAC7E;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACAyG,EAAAA,cAAc,CAAChT,KAAf,IAAwBP,UAAU,GAAG3B,SAArC,CAX6E;;AAe7E,QAAMoD,OAAO,GAAG8R,cAAc,CAAClT,SAA/B;;AACA,MAAIoB,OAAO,KAAK,IAAhB,EAAsB;AACpB;AACA8R,IAAAA,cAAc,CAAC+G,UAAf,GAA4BtU,OAA5B;AACAuN,IAAAA,cAAc,CAACtO,KAAf,GAAuB6H,WAAvB;AAEAyG,IAAAA,cAAc,CAAClS,KAAf,GAAuB,IAAvB;AACAkS,IAAAA,cAAc,CAACmtB,YAAf,GAA8BviC,OAA9B;AACAoV,IAAAA,cAAc,CAACmO,aAAf,GAA+B,IAA/B;AACAnO,IAAAA,cAAc,CAACiD,aAAf,GAA+B,IAA/B;AACAjD,IAAAA,cAAc,CAAC0H,WAAf,GAA6B,IAA7B;AAEA1H,IAAAA,cAAc,CAACoH,YAAf,GAA8B,IAA9B;AAEApH,IAAAA,cAAc,CAAC/R,SAAf,GAA2B,IAA3B;AAQD,GArBD,MAqBO;AACL;AACA+R,IAAAA,cAAc,CAAC+G,UAAf,GAA4B7Y,OAAO,CAAC6Y,UAApC;AACA/G,IAAAA,cAAc,CAACtO,KAAf,GAAuBxD,OAAO,CAACwD,KAA/B;AAEAsO,IAAAA,cAAc,CAAClS,KAAf,GAAuBI,OAAO,CAACJ,KAA/B;AACAkS,IAAAA,cAAc,CAACmtB,YAAf,GAA8BviC,OAA9B;AACAoV,IAAAA,cAAc,CAACsQ,SAAf,GAA2B,IAA3B;AACAtQ,IAAAA,cAAc,CAACmO,aAAf,GAA+BjgB,OAAO,CAACigB,aAAvC;AACAnO,IAAAA,cAAc,CAACiD,aAAf,GAA+B/U,OAAO,CAAC+U,aAAvC;AACAjD,IAAAA,cAAc,CAAC0H,WAAf,GAA6BxZ,OAAO,CAACwZ,WAArC,CAVK;;AAYL1H,IAAAA,cAAc,CAACrW,IAAf,GAAsBuE,OAAO,CAACvE,IAA9B,CAZK;AAeL;;AACA,UAAMg3C,mBAAmB,GAAGzyC,OAAO,CAACkZ,YAApC;AACApH,IAAAA,cAAc,CAACoH,YAAf,GACEu5B,mBAAmB,KAAK,IAAxB,GACI,IADJ,GAEI;AACEjvC,MAAAA,KAAK,EAAEivC,mBAAmB,CAACjvC,KAD7B;AAEE4V,MAAAA,YAAY,EAAEq5B,mBAAmB,CAACr5B;AAFpC,KAHN;AAcD;;AAED,SAAOtH,cAAP;AACD;AAED,AAAO,SAAS4gC,mBAAT,CACLj2C,GADK,EAELk2C,YAFK,EAGLC,kCAHK,EAIE;AACP,MAAI9qC,IAAJ;;AACA,MAAIrL,GAAG,KAAKkX,cAAZ,EAA4B;AAC1B7L,IAAAA,IAAI,GAAGlE,cAAP;;AACA,QAAI+uC,YAAY,KAAK,IAArB,EAA2B;AACzB7qC,MAAAA,IAAI,IAAIhE,gBAAR;AAKD,KAND;;AASA;AAEE;AACA;AAEC+D,IAAAA,CAA4B+qC,kCAL/B,EAME;AACA9qC,MAAAA,IAAI,IAAI/D,8BAAR;AACD;AACF,GApBD,MAoBO;AACL+D,IAAAA,IAAI,GAAGnE,MAAP;AACD;;AASD,SAAO2uC,WAAW,CAACr6C,QAAD,EAAW,IAAX,EAAiB,IAAjB,EAAuB6P,IAAvB,CAAlB;AACD;AAED,AAAO,SAASsyB,2BAAT,CACL3+B,IADK;AAELzE,GAFK,EAGLypB,YAHK,EAILW,KAJK,EAKLtZ,IALK,EAMLtE,KANK,EAOE;AACP,MAAIqvC,QAAQ,GAAG76C,sBAAf,CADO;;AAGP,MAAIkiC,YAAY,GAAGz+B,IAAnB;;AACA,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,QAAI82C,eAAe,CAAC92C,IAAD,CAAnB,EAA2B;AACzBo3C,MAAAA,QAAQ,GAAG96C,cAAX;AAID,KALD;AAUD,GAXD,MAWO,IAAI,OAAO0D,IAAP,KAAgB,QAApB,EAA8B;AACnCo3C,IAAAA,QAAQ,GAAG16C,aAAX;AACD,GAFM,MAEA;AACL26C,IAAAA,MAAM,EAAE,QAAQr3C,IAAR;AACN,WAAK9B,mBAAL;AACE,eAAOqqB,uBAAuB,CAACvD,YAAY,CAACrT,QAAd,EAAwBtF,IAAxB,EAA8BtE,KAA9B,EAAqCxM,GAArC,CAA9B;;AACF,WAAK4C,sBAAL;AACEi5C,QAAAA,QAAQ,GAAGv6C,IAAX;AACAwP,QAAAA,IAAI,IAAIhE,gBAAR;;AAKA;;AACF,WAAKjK,mBAAL;AACE,eAAOk5C,uBAAuB,CAACtyB,YAAD,EAAe3Y,IAAf,EAAqBtE,KAArB,EAA4BxM,GAA5B,CAA9B;;AACF,WAAKiD,mBAAL;AACE,eAAO+4C,uBAAuB,CAACvyB,YAAD,EAAe3Y,IAAf,EAAqBtE,KAArB,EAA4BxM,GAA5B,CAA9B;;AACF,WAAKkD,wBAAL;AACE,eAAO+4C,2BAA2B,CAACxyB,YAAD,EAAe3Y,IAAf,EAAqBtE,KAArB,EAA4BxM,GAA5B,CAAlC;;AACF,WAAKuD,oBAAL;AACE,eAAOskC,wBAAwB,CAACpe,YAAD,EAAe3Y,IAAf,EAAqBtE,KAArB,EAA4BxM,GAA5B,CAA/B;;AACF,WAAKwD,wBAAL;AACE;AAGF;;AACA,WAAKH,gBAAL;AACE;AAGF;;AACA,WAAKI,gBAAL;AACE,QAAiB;AACf,iBAAOy4C,oBAAoB,CAACzyB,YAAD,EAAe3Y,IAAf,EAAqBtE,KAArB,EAA4BxM,GAA5B,CAA3B;AACD;;AACH;;AACA,WAAK0D,yBAAL;AACE;AAGF;;AACA,WAAKJ,6BAAL;AACE;AAKF;;AACA;AAAS;AACP,cAAI,OAAOmB,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C;AAC7C,oBAAQA,IAAI,CAACE,QAAb;AACE,mBAAK7B,mBAAL;AACE+4C,gBAAAA,QAAQ,GAAGr6C,eAAX;AACA,sBAAMs6C,MAAN;;AACF,mBAAK/4C,kBAAL;AACE;AACA84C,gBAAAA,QAAQ,GAAGt6C,eAAX;AACA,sBAAMu6C,MAAN;;AACF,mBAAK94C,sBAAL;AACE64C,gBAAAA,QAAQ,GAAGp6C,UAAX;;AAIA,sBAAMq6C,MAAN;;AACF,mBAAK34C,eAAL;AACE04C,gBAAAA,QAAQ,GAAGj6C,aAAX;AACA,sBAAMk6C,MAAN;;AACF,mBAAK14C,eAAL;AACEy4C,gBAAAA,QAAQ,GAAG/5C,aAAX;AACAohC,gBAAAA,YAAY,GAAG,IAAf;AACA,sBAAM4Y,MAAN;AApBJ;AAsBD;;AACD,cAAIt7B,IAAI,GAAG,EAAX;;AAmBA,gBAAM,IAAInY,KAAJ,CACJ,8DACE,6DADF,mBAEc5D,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAsB,OAAOA,IAF3C,UAEmD+b,IAFnD,CADI,CAAN;AAKD;AA/FK;AAiGT;;AAED,QAAMhb,KAAK,GAAG81C,WAAW,CAACO,QAAD,EAAWpyB,YAAX,EAAyBzpB,GAAzB,EAA8B8Q,IAA9B,CAAzB;AACAtL,EAAAA,KAAK,CAAC+jB,WAAN,GAAoB9kB,IAApB;AACAe,EAAAA,KAAK,CAACf,IAAN,GAAay+B,YAAb;AACA19B,EAAAA,KAAK,CAACgH,KAAN,GAAcA,KAAd;;AAMA,SAAOhH,KAAP;AACD;AAED,AAAO,SAASknB,sBAAT,CACL1C,OADK,EAELlZ,IAFK,EAGLtE,KAHK,EAIE;AACP,MAAI4d,KAAK,GAAG,IAAZ;;AAIA,QAAM3lB,IAAI,GAAGulB,OAAO,CAACvlB,IAArB;AACA,QAAMzE,GAAG,GAAGgqB,OAAO,CAAChqB,GAApB;AACA,QAAMypB,YAAY,GAAGO,OAAO,CAAC/T,KAA7B;AACA,QAAMzQ,KAAK,GAAG49B,2BAA2B,CACvC3+B,IADuC,EAEvCzE,GAFuC,EAGvCypB,YAHuC,EAIvCW,KAJuC,EAKvCtZ,IALuC,EAMvCtE,KANuC,CAAzC;;AAYA,SAAOhH,KAAP;AACD;AAED,AAAO,SAASwnB,uBAAT,CACLmvB,QADK,EAELrrC,IAFK,EAGLtE,KAHK,EAILxM,GAJK,EAKE;AACP,QAAMwF,KAAK,GAAG81C,WAAW,CAACj6C,QAAD,EAAW86C,QAAX,EAAqBn8C,GAArB,EAA0B8Q,IAA1B,CAAzB;AACAtL,EAAAA,KAAK,CAACgH,KAAN,GAAcA,KAAd;AACA,SAAOhH,KAAP;AACD;;AAgBD,SAASu2C,uBAAT,CACEtyB,YADF,EAEE3Y,IAFF,EAGEtE,KAHF,EAIExM,GAJF,EAKS;AACP;AASA,QAAMwF,KAAK,GAAG81C,WAAW,CAAC55C,QAAD,EAAW+nB,YAAX,EAAyBzpB,GAAzB,EAA8B8Q,IAAI,GAAGjE,WAArC,CAAzB;AACArH,EAAAA,KAAK,CAAC+jB,WAAN,GAAoB1mB,mBAApB;AACA2C,EAAAA,KAAK,CAACgH,KAAN,GAAcA,KAAd;;AASA,SAAOhH,KAAP;AACD;;AAED,AAAO,SAASw2C,uBAAT,CACLvyB,YADK,EAEL3Y,IAFK,EAGLtE,KAHK,EAILxM,GAJK,EAKL;AACA,QAAMwF,KAAK,GAAG81C,WAAW,CAAC35C,iBAAD,EAAoB8nB,YAApB,EAAkCzpB,GAAlC,EAAuC8Q,IAAvC,CAAzB;AACAtL,EAAAA,KAAK,CAAC+jB,WAAN,GAAoBtmB,mBAApB;AACAuC,EAAAA,KAAK,CAACgH,KAAN,GAAcA,KAAd;AACA,SAAOhH,KAAP;AACD;AAED,AAAO,SAASy2C,2BAAT,CACLxyB,YADK,EAEL3Y,IAFK,EAGLtE,KAHK,EAILxM,GAJK,EAKL;AACA,QAAMwF,KAAK,GAAG81C,WAAW,CAACr5C,qBAAD,EAAwBwnB,YAAxB,EAAsCzpB,GAAtC,EAA2C8Q,IAA3C,CAAzB;AACAtL,EAAAA,KAAK,CAAC+jB,WAAN,GAAoBrmB,wBAApB;AACAsC,EAAAA,KAAK,CAACgH,KAAN,GAAcA,KAAd;AACA,SAAOhH,KAAP;AACD;AAED,AAAO,SAASqiC,wBAAT,CACLpe,YADK,EAEL3Y,IAFK,EAGLtE,KAHK,EAILxM,GAJK,EAKL;AACA,QAAMwF,KAAK,GAAG81C,WAAW,CAACn5C,kBAAD,EAAqBsnB,YAArB,EAAmCzpB,GAAnC,EAAwC8Q,IAAxC,CAAzB;AACAtL,EAAAA,KAAK,CAAC+jB,WAAN,GAAoBhmB,oBAApB;AACAiC,EAAAA,KAAK,CAACgH,KAAN,GAAcA,KAAd;AACA,QAAM4vC,oBAAuC,GAAG;AAC9C9kC,IAAAA,QAAQ,EAAE;AADoC,GAAhD;AAGA9R,EAAAA,KAAK,CAACuD,SAAN,GAAkBqzC,oBAAlB;AACA,SAAO52C,KAAP;AACD;AAED,AAYO,SAAS02C,oBAAT,CACLzyB,YADK,EAEL3Y,IAFK,EAGLtE,KAHK,EAILxM,GAJK,EAKL;AACA,QAAMwF,KAAK,GAAG81C,WAAW,CAACj5C,cAAD,EAAiBonB,YAAjB,EAA+BzpB,GAA/B,EAAoC8Q,IAApC,CAAzB;AACAtL,EAAAA,KAAK,CAAC+jB,WAAN,GAAoB9lB,gBAApB;AACA+B,EAAAA,KAAK,CAACgH,KAAN,GAAcA,KAAd;AACA,SAAOhH,KAAP;AACD;AAED,AAYO,SAAS8mB,mBAAT,CACL+vB,OADK,EAELvrC,IAFK,EAGLtE,KAHK,EAIE;AACP,QAAMhH,KAAK,GAAG81C,WAAW,CAACl6C,QAAD,EAAWi7C,OAAX,EAAoB,IAApB,EAA0BvrC,IAA1B,CAAzB;AACAtL,EAAAA,KAAK,CAACgH,KAAN,GAAcA,KAAd;AACA,SAAOhH,KAAP;AACD;AAED,AAcO,SAASsnB,qBAAT,CACLF,MADK,EAEL9b,IAFK,EAGLtE,KAHK,EAIE;AACP,QAAMid,YAAY,GAAGmD,MAAM,CAACxW,QAAP,KAAoB,IAApB,GAA2BwW,MAAM,CAACxW,QAAlC,GAA6C,EAAlE;AACA,QAAM5Q,KAAK,GAAG81C,WAAW,CAACp6C,UAAD,EAAauoB,YAAb,EAA2BmD,MAAM,CAAC5sB,GAAlC,EAAuC8Q,IAAvC,CAAzB;AACAtL,EAAAA,KAAK,CAACgH,KAAN,GAAcA,KAAd;AACAhH,EAAAA,KAAK,CAACuD,SAAN,GAAkB;AAChBkO,IAAAA,aAAa,EAAE2V,MAAM,CAAC3V,aADN;AAEhBqlC,IAAAA,eAAe,EAAE,IAFD;AAEO;AACvBzvB,IAAAA,cAAc,EAAED,MAAM,CAACC;AAHP,GAAlB;AAKA,SAAOrnB,KAAP;AACD;;AC3uBD,SAAS+2C,aAAT,CACEtlC,aADF,EAEExR,GAFF,EAGE+2C,OAHF,EAIE5gB,gBAJF,EAKEye,kBALF,EAME;AACA,OAAK50C,GAAL,GAAWA,GAAX;AACA,OAAKwR,aAAL,GAAqBA,aAArB;AACA,OAAKqlC,eAAL,GAAuB,IAAvB;AACA,OAAKtzC,OAAL,GAAe,IAAf;AACA,OAAKi3B,SAAL,GAAiB,IAAjB;AACA,OAAKrZ,YAAL,GAAoB,IAApB;AACA,OAAKwxB,aAAL,GAAqBhgC,SAArB;AACA,OAAKxT,OAAL,GAAe,IAAf;AACA,OAAKsgC,cAAL,GAAsB,IAAtB;AACA,OAAKiR,YAAL,GAAoB,IAApB;AACA,OAAKC,gBAAL,GAAwB5oC,MAAxB;AACA,OAAK6D,UAAL,GAAkBgC,aAAa,CAAC9F,OAAD,CAA/B;AACA,OAAKoE,eAAL,GAAuB0B,aAAa,CAACzD,WAAD,CAApC;AAEA,OAAKO,YAAL,GAAoB5C,OAApB;AACA,OAAK8C,cAAL,GAAsB9C,OAAtB;AACA,OAAK+C,WAAL,GAAmB/C,OAAnB;AACA,OAAKsE,YAAL,GAAoBtE,OAApB;AACA,OAAK0G,gBAAL,GAAwB1G,OAAxB;AACA,OAAKmqC,aAAL,GAAqBnqC,OAArB;AAEA,OAAKwD,cAAL,GAAsBxD,OAAtB;AACA,OAAKyD,aAAL,GAAqBqC,aAAa,CAAC9F,OAAD,CAAlC;AAEA,OAAKquB,gBAAL,GAAwBA,gBAAxB;AACA,OAAKye,kBAAL,GAA0BA,kBAA1B;;AAEA,EAAiB;AACf,SAAK1Y,WAAL,GAAmB,IAAnB;AACA,SAAKI,gBAAL,GAAwBx0B,OAAxB;AACD;AAyCF;;AAED,AAAO,SAASkvC,eAAT,CACLxlC,aADK,EAELxR,GAFK,EAGL+2C,OAHK,EAILE,eAJK,EAKLC,kBALK,EAMLhB,YANK,EAOLC,kCAPK;AASL;AACA;AACA;AACAhgB,gBAZK,EAaLye,kBAbK,EAcLuC,mBAdK,EAeM;AACX,QAAM3xC,IAAe,GAAI,IAAIsxC,aAAJ,CACvBtlC,aADuB,EAEvBxR,GAFuB,EAGvB+2C,OAHuB,EAIvB5gB,gBAJuB,EAKvBye,kBALuB,CAAzB;AAgBA;;;AACA,QAAMwC,kBAAkB,GAAGnB,mBAAmB,CAC5Cj2C,GAD4C,EAE5Ck2C,YAF4C,EAG5CC,kCAH4C,CAA9C;AAKA3wC,EAAAA,IAAI,CAACjC,OAAL,GAAe6zC,kBAAf;AACAA,EAAAA,kBAAkB,CAAC9zC,SAAnB,GAA+BkC,IAA/B;;AAEA,EAAiB;AACf,UAAM6xC,YAAY,GAAGtqB,WAAW,EAAhC;AACAK,IAAAA,WAAW,CAACiqB,YAAD,CAAX,CAFe;AAKf;AACA;AACA;AACA;AACA;AACA;;AACA7xC,IAAAA,IAAI,CAAC02B,WAAL,GAAmBmb,YAAnB;AACAjqB,IAAAA,WAAW,CAACiqB,YAAD,CAAX;AACA,UAAMvnB,YAAuB,GAAG;AAC9BvL,MAAAA,OAAO,EAAE0yB,eADqB;AAE9B1+B,MAAAA,YAAY,EAAEw+B,OAFgB;AAG9B/pB,MAAAA,KAAK,EAAEqqB,YAHuB;AAI9BlZ,MAAAA,WAAW,EAAE,IAJiB;AAK9BmZ,MAAAA,yBAAyB,EAAE;AALG,KAAhC;AAOAF,IAAAA,kBAAkB,CAAC9+B,aAAnB,GAAmCwX,YAAnC;AACD,GArBD;;AAgCAhR,EAAAA,qBAAqB,CAACs4B,kBAAD,CAArB;AAEA,SAAO5xC,IAAP;AACD;;ACxMD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAe,QAAf;;AC6HA,SAAS+xC,oBAAT,CACEC,eADF,EAEU;AACR,MAAI,CAACA,eAAL,EAAsB;AACpB,WAAOxiC,kBAAP;AACD;;AAED,QAAMjV,KAAK,GAAG2C,GAAW,CAAC80C,eAAD,CAAzB;AACA,QAAMjhC,aAAa,GAAGS,0BAA0B,CAACjX,KAAD,CAAhD;;AAEA,MAAIA,KAAK,CAACC,GAAN,KAAc1E,cAAlB,EAAkC;AAChC,UAAMga,SAAS,GAAGvV,KAAK,CAACf,IAAxB;;AACA,QAAIkgC,iBAAuB,CAAC5pB,SAAD,CAA3B,EAAwC;AACtC,aAAOgB,mBAAmB,CAACvW,KAAD,EAAQuV,SAAR,EAAmBiB,aAAnB,CAA1B;AACD;AACF;;AAED,SAAOA,aAAP;AACD;;AAwFD,AAAO,SAASkhC,eAAT,CACLjmC,aADK,EAELxR,GAFK,EAGLk3C,kBAHK,EAILhB,YAJK,EAKLC,kCALK,EAMLhgB,gBANK,EAOLye,kBAPK,EAQLuC,mBARK,EASO;AACZ,QAAMJ,OAAO,GAAG,KAAhB;AACA,QAAME,eAAe,GAAG,IAAxB;AACA,SAAOD,eAAe,CACpBxlC,aADoB,EAEpBxR,GAFoB,EAGpB+2C,OAHoB,EAIpBE,eAJoB,EAKpBC,kBALoB,EAMpBhB,YANoB,EAOpBC,kCAPoB,EAQpBhgB,gBARoB,EASpBye,kBAToB,AAAA,CAAtB;AAYD;AAED,AAgDO,SAAS8C,eAAT,CACLnzB,OADK,EAELpT,SAFK,EAGLqmC,eAHK,EAIL9/B,QAJK,EAKC;AACN;AAGA,QAAMnU,OAAO,GAAG4N,SAAS,CAAC5N,OAA1B;AACA,QAAMuI,SAAS,GAAG8V,gBAAgB,EAAlC;AACA,QAAMlW,IAAI,GAAGmW,iBAAiB,CAACte,OAAD,CAA9B;;AAMA,QAAMpE,OAAO,GAAGo4C,oBAAoB,CAACC,eAAD,CAApC;;AACA,MAAIrmC,SAAS,CAAChS,OAAV,KAAsB,IAA1B,EAAgC;AAC9BgS,IAAAA,SAAS,CAAChS,OAAV,GAAoBA,OAApB;AACD,GAFD,MAEO;AACLgS,IAAAA,SAAS,CAACsuB,cAAV,GAA2BtgC,OAA3B;AACD;;AAmBD,QAAMyd,MAAM,GAAGC,YAAY,CAAC/Q,SAAD,EAAYJ,IAAZ,CAA3B,CApCM;AAsCN;;AACAkR,EAAAA,MAAM,CAACnd,OAAP,GAAiB;AAAC8kB,IAAAA;AAAD,GAAjB;AAEA7M,EAAAA,QAAQ,GAAGA,QAAQ,KAAKrR,SAAb,GAAyB,IAAzB,GAAgCqR,QAA3C;;AACA,MAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrB;AASAkF,IAAAA,MAAM,CAAClF,QAAP,GAAkBA,QAAlB;AACD;;AAED,QAAMlS,IAAI,GAAG8Z,aAAa,CAAC/b,OAAD,EAAUqZ,MAAV,EAAkBlR,IAAlB,CAA1B;;AACA,MAAIlG,IAAI,KAAK,IAAb,EAAmB;AACjBsc,IAAAA,qBAAqB,CAACtc,IAAD,EAAOjC,OAAP,EAAgBmI,IAAhB,EAAsBI,SAAtB,CAArB;AACA0T,IAAAA,mBAAmB,CAACha,IAAD,EAAOjC,OAAP,EAAgBmI,IAAhB,CAAnB;AACD;;AAED,SAAOA,IAAP;AACD;AAED,AAUO,SAASisC,qBAAT,CACLxmC,SADK,EAE8C;AACnD,QAAMymC,cAAc,GAAGzmC,SAAS,CAAC5N,OAAjC;;AACA,MAAI,CAACq0C,cAAc,CAACz0C,KAApB,EAA2B;AACzB,WAAO,IAAP;AACD;;AACD,UAAQy0C,cAAc,CAACz0C,KAAf,CAAqBnD,GAA7B;AACE,SAAKtE,aAAL;AACE,aAAOyU,iBAAiB,CAACynC,cAAc,CAACz0C,KAAf,CAAqBG,SAAtB,CAAxB;;AACF;AACE,aAAOs0C,cAAc,CAACz0C,KAAf,CAAqBG,SAA5B;AAJJ;AAMD;AAED,AA6HA,IAAIu0C,iBAAiB,GAAG,IAAxB;AACA,IAAIC,2BAA2B,GAAG,IAAlC;AACA,IAAIC,2BAA2B,GAAG,IAAlC;AACA,IAAIC,aAAa,GAAG,IAApB;AACA,IAAIC,uBAAuB,GAAG,IAA9B;AACA,IAAIC,uBAAuB,GAAG,IAA9B;AACA,IAAIC,cAAc,GAAG,IAArB;AACA,IAAIC,eAAe,GAAG,IAAtB;AACA,IAAIC,kBAAkB,GAAG,IAAzB;;AAoPA,SAASC,uBAAT,CAAiCv4C,KAAjC,EAA+E;AAC7E,QAAMw4C,SAAS,GAAG/0C,oBAAoB,CAACzD,KAAD,CAAtC;;AACA,MAAIw4C,SAAS,KAAK,IAAlB,EAAwB;AACtB,WAAO,IAAP;AACD;;AACD,SAAOA,SAAS,CAACj1C,SAAjB;AACD;;AAED,SAASk1C,4BAAT,CACE3lC,QADF,EAEgB;AACd,SAAO,IAAP;AACD;;AAMD,AAAO,SAAS4lC,kBAAT,CAA4BC,cAA5B,EAAqE;AAAA,QACnEC,uBADmE,GACxCD,cADwC,CACnEC,uBADmE;AAAA,QAEnE9kC,sBAFmE,GAEzClZ,oBAFyC,CAEnEkZ,sBAFmE;AAI1E,SAAOjP,eAAe,CAAC;AACrBg0C,IAAAA,UAAU,EAAEF,cAAc,CAACE,UADN;AAErBC,IAAAA,OAAO,EAAEH,cAAc,CAACG,OAFH;AAGrBC,IAAAA,mBAAmB,EAAEJ,cAAc,CAACI,mBAHf;AAIrBC,IAAAA,cAAc,EAAEL,cAAc,CAACK,cAJV;AAKrBlB,IAAAA,iBALqB;AAMrBC,IAAAA,2BANqB;AAOrBC,IAAAA,2BAPqB;AAQrBC,IAAAA,aARqB;AASrBC,IAAAA,uBATqB;AAUrBC,IAAAA,uBAVqB;AAWrBE,IAAAA,eAXqB;AAYrBC,IAAAA,kBAZqB;AAarBF,IAAAA,cAbqB;AAcrBa,IAAAA,oBAAoB,EAAEnlC,sBAdD;AAerBykC,IAAAA,uBAfqB;AAgBrBK,IAAAA,uBAAuB,EACrBA,uBAAuB,IAAIH,4BAjBR;AAkBrB;AACAS,IAAAA,2BAA2B,EAAEp+B,CAAwC,IAnBhD;AAoBrBq+B,IAAAA,eAAe,EAAEr+B,CAA4B,IApBxB;AAqBrBs+B,IAAAA,YAAY,EAAEt+B,CAAyB,IArBlB;AAsBrBu+B,IAAAA,iBAAiB,EAAEv+B,CAA8B,IAtB5B;AAuBrB;AACAw+B,IAAAA,eAAe,EAAEx+B,CAAuC,IAxBnC;AAyBrB;AACA;AACAy+B,IAAAA,iBAAiB,EAAEC;AA3BE,GAAD,CAAtB;AA6BD;;MCvxBKC,GAAG,GAAG5+C;;AA6BZ,MAAM6+C,kBAAkB,GAAG;AACzBppC,EAAAA,cAAc,EAAE,YAAW;AACzB,WAAO,IAAP;AACD;AAHwB,CAA3B;;AAMA,SAASqpC,MAAT,CAAgBtpC,IAAhB,EAA6E;AAC3E,MAAIA,IAAI,CAACyB,QAAT,EAAmB;AACjB;AACA;AACA;AACA,WAAO,IAAP;AACD;;AACD,UAAQzB,IAAI,CAACpQ,GAAb;AACE,SAAK,MAAL;AACE,aAAOoQ,IAAI,CAACiC,IAAZ;;AACF,SAAK,UAAL;AAAiB;AACf;AACA;AACA;AAHe,4BAIcjC,IAAI,CAACI,KAJnB;AAAA,cAIRG,QAJQ,eAIRA,QAJQ;AAAA,cAIKH,KAJL;AAKf;;;AACA,YAAImpC,gBAAgB,GAAG,IAAvB;;AACA,YAAIvpC,IAAI,CAACO,QAAL,IAAiBP,IAAI,CAACO,QAAL,CAAcsH,MAAnC,EAA2C;AACzC,eAAK,IAAIlK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGqC,IAAI,CAACO,QAAL,CAAcsH,MAAlC,EAA0ClK,CAAC,EAA3C,EAA+C;AAC7C,kBAAM6rC,aAAa,GAAGF,MAAM,CAACtpC,IAAI,CAACO,QAAL,CAAc5C,CAAd,CAAD,CAA5B;;AACA,gBAAI6rC,aAAa,KAAK,IAAtB,EAA4B;AAC1B,kBAAID,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,gBAAAA,gBAAgB,GAAG,CAACC,aAAD,CAAnB;AACD,eAFD,MAEO;AACLD,gBAAAA,gBAAgB,CAAC3rC,IAAjB,CAAsB4rC,aAAtB;AACD;AACF;AACF;AACF;;AACD,cAAMC,IAA2B,GAAG;AAClC76C,UAAAA,IAAI,EAAEoR,IAAI,CAACpR,IADuB;AAElCwR,UAAAA,KAAK,EAAEA,KAF2B;AAGlCG,UAAAA,QAAQ,EAAEgpC;AAHwB,SAApC;AAKAt/C,QAAAA,MAAM,CAACy/C,cAAP,CAAsBD,IAAtB,EAA4B,UAA5B,EAAwC;AACtCn/C,UAAAA,KAAK,EAAEqC,MAAM,CAACC,GAAP,CAAW,iBAAX;AAD+B,SAAxC;AAGA,eAAO68C,IAAP;AACD;;AACD;AACE,YAAM,IAAIj3C,KAAJ,sCAA6CwN,IAAI,CAACpQ,GAAlD,CAAN;AAjCJ;AAmCD;;AAED,SAAS+5C,cAAT,CAAwB93C,IAAxB,EAA8B;AAC5B,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AACD,QAAM0O,QAAQ,GAAGqpC,oBAAoB,CAAC/3C,IAAD,CAArC;;AACA,MAAI0O,QAAQ,CAACsH,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,IAAP;AACD,GAFD,MAEO,IAAItH,QAAQ,CAACsH,MAAT,KAAoB,CAAxB,EAA2B;AAChC,WAAOgiC,MAAM,CAACtpC,QAAQ,CAAC,CAAD,CAAT,CAAb;AACD;;AACD,SAAOupC,OAAO,CAACvpC,QAAQ,CAACwpC,GAAT,CAAaF,MAAb,CAAD,CAAd;AACD;;AAED,SAASD,oBAAT,CAA8BI,eAA9B,EAA+C;AAC7C,QAAMC,KAAK,GAAG,EAAd;AACA,MAAIp4C,IAAI,GAAGm4C,eAAX;;AACA,SAAOn4C,IAAI,IAAI,IAAf,EAAqB;AACnBo4C,IAAAA,KAAK,CAACrsC,IAAN,CAAW/L,IAAX;AACAA,IAAAA,IAAI,GAAGA,IAAI,CAACmB,OAAZ;AACD;;AACD,SAAOi3C,KAAP;AACD;;AAED,SAASH,OAAT,CAAiBI,GAAjB,EAAsB;AACpB,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMt/B,KAAK,GAAG,CAAC;AAAClN,IAAAA,CAAC,EAAE,CAAJ;AAAOssC,IAAAA,KAAK,EAAEC;AAAd,GAAD,CAAd;;AACA,SAAOr/B,KAAK,CAAChD,MAAb,EAAqB;AACnB,UAAMuiC,CAAC,GAAGv/B,KAAK,CAACnG,GAAN,EAAV;;AACA,WAAO0lC,CAAC,CAACzsC,CAAF,GAAMysC,CAAC,CAACH,KAAF,CAAQpiC,MAArB,EAA6B;AAC3B,YAAMwiC,EAAE,GAAGD,CAAC,CAACH,KAAF,CAAQG,CAAC,CAACzsC,CAAV,CAAX;AACAysC,MAAAA,CAAC,CAACzsC,CAAF,IAAO,CAAP;;AACA,UAAIhK,OAAO,CAAC02C,EAAD,CAAX,EAAiB;AACfx/B,QAAAA,KAAK,CAACjN,IAAN,CAAWwsC,CAAX;AACAv/B,QAAAA,KAAK,CAACjN,IAAN,CAAW;AAACD,UAAAA,CAAC,EAAE,CAAJ;AAAOssC,UAAAA,KAAK,EAAEI;AAAd,SAAX;AACA;AACD;;AACDF,MAAAA,MAAM,CAACvsC,IAAP,CAAYysC,EAAZ;AACD;AACF;;AACD,SAAOF,MAAP;AACD;;AAED,SAASN,MAAT,CAAgBh4C,IAAhB,EAA8B;AAC5B,MAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,WAAO,IAAP;AACD;;AACD,UAAQA,IAAI,CAACjC,GAAb;AACE,SAAKxE,QAAL;AACE,aAAOu+C,cAAc,CAAC93C,IAAI,CAACkB,KAAN,CAArB;;AACF,SAAK1H,UAAL;AACE,aAAOs+C,cAAc,CAAC93C,IAAI,CAACkB,KAAN,CAArB;;AACF,SAAK7H,cAAL;AACE,aAAO;AACLo/C,QAAAA,QAAQ,EAAE,WADL;AAEL17C,QAAAA,IAAI,EAAEiD,IAAI,CAACjD,IAFN;AAGLwR,QAAAA,KAAK,aAAMvO,IAAI,CAACuhB,aAAX,CAHA;AAIL3Q,QAAAA,QAAQ,EAAE5Q,IAAI,CAACqB,SAJV;AAKLq3C,QAAAA,QAAQ,EAAEZ,cAAc,CAAC93C,IAAI,CAACkB,KAAN;AALnB,OAAP;;AAOF,SAAK9H,iBAAL;AACA,SAAKe,mBAAL;AACE,aAAO;AACLs+C,QAAAA,QAAQ,EAAE,WADL;AAEL17C,QAAAA,IAAI,EAAEiD,IAAI,CAACjD,IAFN;AAGLwR,QAAAA,KAAK,aAAMvO,IAAI,CAACuhB,aAAX,CAHA;AAIL3Q,QAAAA,QAAQ,EAAE,IAJL;AAKL8nC,QAAAA,QAAQ,EAAEZ,cAAc,CAAC93C,IAAI,CAACkB,KAAN;AALnB,OAAP;;AAOF,SAAKzH,aAAL;AAAoB;AAClB,eAAO;AACLg/C,UAAAA,QAAQ,EAAE,MADL;AAEL17C,UAAAA,IAAI,EAAEiD,IAAI,CAACjD,IAFN;AAGLwR,UAAAA,KAAK,aAAMvO,IAAI,CAACuhB,aAAX,CAHA;AAIL3Q,UAAAA,QAAQ,EAAE,IAJL;AAIW;AAChB8nC,UAAAA,QAAQ,EAAET,OAAO,CAACF,oBAAoB,CAAC/3C,IAAI,CAACkB,KAAN,CAApB,CAAiCg3C,GAAjC,CAAqCF,MAArC,CAAD;AALZ,SAAP;AAOD;;AACD,SAAKt+C,QAAL;AACE,aAAOsG,IAAI,CAACqB,SAAL,CAAe+O,IAAtB;;AACF,SAAKzW,QAAL;AACA,SAAKG,eAAL;AACA,SAAKD,eAAL;AACA,SAAKD,IAAL;AACA,SAAKI,QAAL;AACA,SAAKD,UAAL;AACA,SAAKG,aAAL;AACA,SAAKG,wBAAL;AACA,SAAKG,cAAL;AACE,aAAOs9C,cAAc,CAAC93C,IAAI,CAACkB,KAAN,CAArB;;AACF;AACE,YAAM,IAAIP,KAAJ,8DACuDX,IAAI,CAACjC,GAD5D,CAAN;AA5CJ;AAgDD;;AAED,MAAM46C,iBAAiB,GAAG,IAAIlgB,GAAJ,CAAQ,CAChCr/B,iBADgC,EAEhCC,cAFgC,EAGhCI,aAHgC,EAIhCM,UAJgC,EAKhCG,aALgC,EAMhCC,mBANgC;AAQhCZ,QARgC,CAAR,CAA1B;;AAWA,SAASq/C,WAAT,CAAqBp3C,MAArB,EAAoC;AAClC,QAAMkN,QAAQ,GAAG,EAAjB;AACA,QAAMmqC,YAAY,GAAGr3C,MAArB;AACA,MAAIxB,IAAW,GAAG64C,YAAlB;;AACA,MAAI74C,IAAI,CAACkB,KAAL,KAAe,IAAnB,EAAyB;AACvB,WAAOwN,QAAP;AACD;;AACD1O,EAAAA,IAAI,CAACkB,KAAL,CAAWb,MAAX,GAAoBL,IAApB;AACAA,EAAAA,IAAI,GAAGA,IAAI,CAACkB,KAAZ;;AACA43C,EAAAA,KAAK,EAAE,OAAO,IAAP,EAAa;AAClB,QAAIC,OAAO,GAAG,KAAd;;AACA,QAAIJ,iBAAiB,CAACjgB,GAAlB,CAAsB14B,IAAI,CAACjC,GAA3B,CAAJ,EAAqC;AACnC2Q,MAAAA,QAAQ,CAAC3C,IAAT,CAAcitC,SAAS,CAACh5C,IAAD,CAAvB;AACD,KAFD,MAEO,IAAIA,IAAI,CAACjC,GAAL,KAAarE,QAAjB,EAA2B;AAChC;AAGAgV,MAAAA,QAAQ,CAAC3C,IAAT,CAAc,KAAK/L,IAAI,CAACuhB,aAAxB;AACD,KALM,MAKA;AACLw3B,MAAAA,OAAO,GAAG,IAAV;AACD;;AACD,QAAIA,OAAO,IAAI/4C,IAAI,CAACkB,KAAL,KAAe,IAA9B,EAAoC;AAClClB,MAAAA,IAAI,CAACkB,KAAL,CAAWb,MAAX,GAAoBL,IAApB;AACAA,MAAAA,IAAI,GAAGA,IAAI,CAACkB,KAAZ;AACA;AACD;;AACD,WAAOlB,IAAI,CAACmB,OAAL,KAAiB,IAAxB,EAA8B;AAC5B,UAAInB,IAAI,CAACK,MAAL,KAAgBw4C,YAApB,EAAkC;AAChC,cAAMC,KAAN;AACD;;AACD94C,MAAAA,IAAI,GAAIA,IAAI,CAACK,MAAb;AACD;;AACAL,IAAAA,IAAI,CAACmB,OAAN,CAAoBd,MAApB,GAA6BL,IAAI,CAACK,MAAlC;AACAL,IAAAA,IAAI,GAAIA,IAAI,CAACmB,OAAb;AACD;;AACD,SAAOuN,QAAP;AACD;;IAEKuqC;;;SAGJC,gBAAA,yBAAuB;AACrB;AACA,UAAMp7C,KAAK,GAAG8C,6BAA6B,CAAC,KAAKu4C,MAAN,CAA3C;;AAEA,QAAIr7C,KAAK,KAAK,IAAd,EAAoB;AAClB,YAAM,IAAI6C,KAAJ,CACJ,wEACE,iDAFE,CAAN;AAID;;AAED,WAAO7C,KAAP;AACD;;AAED,6BAAYA,KAAZ,EAA0B;AACxB,QAAI,CAAC66C,iBAAiB,CAACjgB,GAAlB,CAAsB56B,KAAK,CAACC,GAA5B,CAAL,EAAuC;AACrC,YAAM,IAAI4C,KAAJ,CACJ,qEAAmE7C,KAAK,CAACC,GAAzE,WACE,kCAFE,CAAN;AAID;;AAED,SAAKo7C,MAAL,GAAcr7C,KAAd;AACD;;AAwCD;SACAs7C,OAAA,cAAKC,SAAL,EAA8C;AAC5C,WAAOC,SAAS,CACd,KAAKC,OAAL,CAAaF,SAAb,EAAwB;AAACG,MAAAA,IAAI,EAAE;AAAP,KAAxB,CADc,kCAEgBH,SAAS,CAACn2B,QAAV,EAFhB,CAAhB;AAID;;SAEDu2B,aAAA,oBAAW18C,IAAX,EAAyC;AACvC,WAAOu8C,SAAS,CACd,KAAKI,aAAL,CAAmB38C,IAAnB,EAAyB;AAACy8C,MAAAA,IAAI,EAAE;AAAP,KAAzB,CADc,0BAEMx8C,wBAAwB,CAACD,IAAD,CAAxB,IAAkC,SAFxC,SAAhB;AAID;;SAED48C,cAAA,qBAAYprC,KAAZ,EAA8C;AAC5C,WAAO+qC,SAAS,CACd,KAAKM,cAAL,CAAoBrrC,KAApB,EAA2B;AAACirC,MAAAA,IAAI,EAAE;AAAP,KAA3B,CADc,mBAECK,IAAI,CAACC,SAAL,CAAevrC,KAAf,CAFD,CAAhB;AAID;;SAEDgrC,UAAA,iBACEF,SADF,EAG4B;AAAA,QAD1B7lB,OAC0B,uEADF,IACE;AAC1B,WAAO+lB,QAAO,CAAC,IAAD,EAAOF,SAAP,EAAkB7lB,OAAlB,CAAd;AACD;;SAEDkmB,gBAAA,uBACE38C,IADF,EAG4B;AAAA,QAD1By2B,OAC0B,uEADF,IACE;AAC1B,WAAO+lB,QAAO,CAAC,IAAD,EAAOv5C,IAAI,IAAIA,IAAI,CAACjD,IAAL,KAAcA,IAA7B,EAAmCy2B,OAAnC,CAAd;AACD;;SAEDomB,iBAAA,wBACErrC,KADF,EAG4B;AAAA,QAD1BilB,OAC0B,uEADF,IACE;AAC1B,WAAO+lB,QAAO,CACZ,IADY,EAEZv5C,IAAI,IAAIA,IAAI,CAACuO,KAAL,IAAcwrC,UAAU,CAAC/5C,IAAI,CAACuO,KAAN,EAAaA,KAAb,CAFpB,EAGZilB,OAHY,CAAd;AAKD;;;;qBAnFc;AACb,UAAI,KAAK2lB,MAAL,CAAYp7C,GAAZ,KAAoBtE,aAAxB,EAAuC;AACrC,eAAOyU,iBAAiB,CAAC,KAAKirC,MAAL,CAAY93C,SAAb,CAAxB;AACD,OAFD,MAEO;AACL,eAAO,KAAK83C,MAAL,CAAY93C,SAAnB;AACD;AACF;;;qBAEU;AACT,aAAO,KAAK83C,MAAL,CAAYp8C,IAAnB;AACD;;;qBAEmB;AAClB,aAAO,KAAKm8C,aAAL,GAAqB33B,aAA5B;AACD;;;qBAEgC;AAC/B,UAAI/f,MAAM,GAAG,KAAK23C,MAAL,CAAY94C,MAAzB;;AACA,aAAOmB,MAAM,KAAK,IAAlB,EAAwB;AACtB,YAAIm3C,iBAAiB,CAACjgB,GAAlB,CAAsBl3B,MAAM,CAACzD,GAA7B,CAAJ,EAAuC;AACrC,cAAIyD,MAAM,CAACzD,GAAP,KAAexE,QAAnB,EAA6B;AAC3B;AACA;AACA,gBAAIq/C,WAAW,CAACp3C,MAAD,CAAX,CAAoBwU,MAApB,GAA6B,CAAjC,EAAoC;AAClC,qBAAO,IAAP;AACD;AACF;;AACD,iBAAOgjC,SAAS,CAACx3C,MAAD,CAAhB;AACD;;AACDA,QAAAA,MAAM,GAAGA,MAAM,CAACnB,MAAhB;AACD;;AACD,aAAO,IAAP;AACD;;;qBAEiD;AAChD,aAAOu4C,WAAW,CAAC,KAAKM,aAAL,EAAD,CAAlB;AACD;;;;;;AAkDH,SAASK,QAAT,CACEh2C,IADF,EAEE81C,SAFF,EAGE7lB,OAHF,EAI4B;AAC1B,QAAMgmB,IAAI,GAAGhmB,OAAO,GAAGA,OAAO,CAACgmB,IAAX,GAAkB,IAAtC;AACA,QAAMQ,OAAO,GAAG,EAAhB;;AAEA,MAAIX,SAAS,CAAC91C,IAAD,CAAb,EAAqB;AACnBy2C,IAAAA,OAAO,CAACjuC,IAAR,CAAaxI,IAAb;;AACA,QAAI,CAACi2C,IAAL,EAAW;AACT,aAAOQ,OAAP;AACD;AACF;;AAEDz2C,EAAAA,IAAI,CAACmL,QAAL,CAAcyX,OAAd,CAAsBjlB,KAAK,IAAI;AAC7B,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACD;;AACD84C,IAAAA,OAAO,CAACjuC,IAAR,OAAAiuC,OAAO,EAAST,QAAO,CAACr4C,KAAD,EAAQm4C,SAAR,EAAmB7lB,OAAnB,CAAhB,CAAP;AACD,GALD;AAOA,SAAOwmB,OAAP;AACD;;AAED,SAASV,SAAT,CACEW,GADF,EAEElhC,OAFF,EAGqB;AACnB,MAAIkhC,GAAG,CAACjkC,MAAJ,KAAe,CAAnB,EAAsB;AACpB,WAAOikC,GAAG,CAAC,CAAD,CAAV;AACD;;AAED,QAAMC,MAAM,GACVD,GAAG,CAACjkC,MAAJ,KAAe,CAAf,GACI,qBADJ,6BAE4BikC,GAAG,CAACjkC,MAFhC,gBADF;AAKA,QAAM,IAAIrV,KAAJ,CAAUu5C,MAAM,GAAGnhC,OAAnB,CAAN;AACD;;AAED,SAASghC,UAAT,CAAoBxrC,KAApB,EAAmC4rC,MAAnC,EAA4D;AAC1D,OAAK,MAAM7hD,GAAX,IAAkB6hD,MAAlB,EAA0B;AACxB,QAAI5rC,KAAK,CAACjW,GAAD,CAAL,KAAe6hD,MAAM,CAAC7hD,GAAD,CAAzB,EAAgC;AAC9B,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAED,SAASq6C,kBAAT,CAA4B18B,KAA5B,EAAmC;AACjC;AACA;AACAuhB,EAAAA,OAAO,CAACvhB,KAAR,CAAcA,KAAd;AACD;;AAED,SAAS6a,MAAT,CAAgBxO,OAAhB,EAA6CkR,OAA7C,EAA2E;AACzE,MAAIplB,cAAc,GAAGopC,kBAAkB,CAACppC,cAAxC;AACA,MAAIgsC,YAAY,GAAG,KAAnB;AACA,MAAInG,YAAY,GAAG,KAAnB;AACA,MAAIoG,0BAA0B,GAAG,IAAjC;;AACA,MAAI,OAAO7mB,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;AACnD,QAAI,OAAOA,OAAO,CAACplB,cAAf,KAAkC,UAAtC,EAAkD;AAChDA,MAAAA,cAAc,GAAGolB,OAAO,CAACplB,cAAzB;AACD;;AACD,QAAIolB,OAAO,CAAC8mB,qBAAR,KAAkC,IAAtC,EAA4C;AAC1CF,MAAAA,YAAY,GAAG,IAAf;AACD;;AACD,QAAI5mB,OAAO,CAAC+mB,mBAAR,KAAgC,IAApC,EAA0C;AACxCtG,MAAAA,YAAY,GAAG,IAAf;AACD;;AACD,IAA8B;AAC5B,UAAIzgB,OAAO,CAACgnB,mCAAR,KAAgDp2C,SAApD,EAA+D;AAC7Di2C,QAAAA,0BAA0B,GACxB7mB,OAAO,CAACgnB,mCADV;AAED;AACF;AACF;;AACD,MAAItrC,SAAS,GAAG;AACdR,IAAAA,QAAQ,EAAE,EADI;AAEdN,IAAAA,cAFc;AAGdrQ,IAAAA,GAAG,EAAE;AAHS,GAAhB;AAKA,MAAIwF,IAAsB,GAAGiyC,eAAe,CAC1CtmC,SAD0C,EAE1CkrC,YAAY,GAAGnlC,cAAH,GAAoBD,UAFU,EAG1C,IAH0C,EAI1Ci/B,YAJ0C,EAK1CoG,0BAL0C,EAM1C,EAN0C,EAO1C1H,kBAP0C,AAAA,CAA5C;;AAWA,MAAIpvC,IAAI,IAAI,IAAZ,EAAkB;AAChB,UAAM,IAAI5C,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED80C,EAAAA,eAAe,CAACnzB,OAAD,EAAU/e,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,CAAf;AAEA,QAAMk3C,KAAK,GAAG;AACZC,IAAAA,UAAU,EAAE14C,SADA;AAGZuB,IAAAA,IAAI,EAAEa,SAHM;;AAGK;AACjB;AACAqzC,IAAAA,MAAM,GAAgE;AACpE,UAAIl0C,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACjC,OAAL,IAAgB,IAAhC,IAAwC4N,SAAS,IAAI,IAAzD,EAA+D;AAC7D,eAAO,IAAP;AACD;;AACD,UAAIA,SAAS,CAACR,QAAV,CAAmBsH,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,eAAO,IAAP;AACD;;AACD,UAAI9G,SAAS,CAACR,QAAV,CAAmBsH,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,eAAOyhC,MAAM,CAACvoC,SAAS,CAACR,QAAV,CAAmB,CAAnB,CAAD,CAAb;AACD;;AACD,UACEQ,SAAS,CAACR,QAAV,CAAmBsH,MAAnB,KAA8B,CAA9B,IACA9G,SAAS,CAACR,QAAV,CAAmB,CAAnB,EAAsBkB,QAAtB,KAAmC,IADnC,IAEAV,SAAS,CAACR,QAAV,CAAmB,CAAnB,EAAsBkB,QAAtB,KAAmC,KAHrC,EAIE;AACA;AACA;AACA,eAAO6nC,MAAM,CAACvoC,SAAS,CAACR,QAAV,CAAmB,CAAnB,CAAD,CAAb;AACD;;AACD,UAAIgpC,gBAAgB,GAAG,IAAvB;;AACA,UAAIxoC,SAAS,CAACR,QAAV,IAAsBQ,SAAS,CAACR,QAAV,CAAmBsH,MAA7C,EAAqD;AACnD,aAAK,IAAIlK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGoD,SAAS,CAACR,QAAV,CAAmBsH,MAAvC,EAA+ClK,CAAC,EAAhD,EAAoD;AAClD,gBAAM6rC,aAAa,GAAGF,MAAM,CAACvoC,SAAS,CAACR,QAAV,CAAmB5C,CAAnB,CAAD,CAA5B;;AACA,cAAI6rC,aAAa,KAAK,IAAtB,EAA4B;AAC1B,gBAAID,gBAAgB,KAAK,IAAzB,EAA+B;AAC7BA,cAAAA,gBAAgB,GAAG,CAACC,aAAD,CAAnB;AACD,aAFD,MAEO;AACLD,cAAAA,gBAAgB,CAAC3rC,IAAjB,CAAsB4rC,aAAtB;AACD;AACF;AACF;AACF;;AACD,aAAOD,gBAAP;AACD,KAtCW;;AAuCZM,IAAAA,MAAM,GAAG;AACP,UAAIz0C,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACjC,OAAL,IAAgB,IAApC,EAA0C;AACxC,eAAO,IAAP;AACD;;AACD,aAAO02C,MAAM,CAACz0C,IAAI,CAACjC,OAAN,CAAb;AACD,KA5CW;;AA6CZqZ,IAAAA,MAAM,CAACggC,UAAD,EAAiC;AACrC,UAAIp3C,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACjC,OAAL,IAAgB,IAApC,EAA0C;AACxC;AACD;;AACDm0C,MAAAA,eAAe,CAACkF,UAAD,EAAap3C,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAAf;AACD,KAlDW;;AAmDZq3C,IAAAA,OAAO,GAAG;AACR,UAAIr3C,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACjC,OAAL,IAAgB,IAApC,EAA0C;AACxC;AACD;;AACDm0C,MAAAA,eAAe,CAAC,IAAD,EAAOlyC,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAf;AACA2L,MAAAA,SAAS,GAAG,IAAZ;AACA3L,MAAAA,IAAI,GAAG,IAAP;AACD,KA1DW;;AA2DZ9C,IAAAA,WAAW,GAAG;AACZ,UAAI8C,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACjC,OAAL,IAAgB,IAApC,EAA0C;AACxC,eAAO,IAAP;AACD;;AACD,aAAOo0C,qBAAqB,CAACnyC,IAAD,CAA5B;AACD,KAhEW;;AAkEZs3C,IAAAA,kBAAkB,EAAE1J;AAlER,GAAd;AAqEA/4C,EAAAA,MAAM,CAACy/C,cAAP,CACE4C,KADF,EAEE,MAFF,EAGG;AACCK,IAAAA,YAAY,EAAE,IADf;AAECC,IAAAA,UAAU,EAAE,IAFb;AAGC1iD,IAAAA,GAAG,EAAE,YAAW;AACd,UAAIkL,IAAI,KAAK,IAAb,EAAmB;AACjB,cAAM,IAAI5C,KAAJ,CAAU,+CAAV,CAAN;AACD;;AACD,YAAM+N,QAAQ,GAAGkqC,WAAW,CAACr1C,IAAI,CAACjC,OAAN,CAA5B;;AACA,UAAIoN,QAAQ,CAACsH,MAAT,KAAoB,CAAxB,EAA2B;AACzB,cAAM,IAAIrV,KAAJ,CAAU,+CAAV,CAAN;AACD,OAFD,MAEO,IAAI+N,QAAQ,CAACsH,MAAT,KAAoB,CAAxB,EAA2B;AAChC;AACA,eAAOtH,QAAQ,CAAC,CAAD,CAAf;AACD,OAHM,MAGA;AACL;AACA;AACA,eAAOsqC,SAAS,CAACz1C,IAAI,CAACjC,OAAN,CAAhB;AACD;AACF;AAlBF,GAHH;AAyBA,SAAOm5C,KAAP;AACD;;AAED,MAAMO,cAAc,GAAG,IAAI/sC,OAAJ,EAAvB;;AACA,SAAS+qC,SAAT,CAAmBl7C,KAAnB,EAAoD;AAClD,MAAIm9C,OAAO,GAAGD,cAAc,CAAC3iD,GAAf,CAAmByF,KAAnB,CAAd;;AACA,MAAIm9C,OAAO,KAAK72C,SAAZ,IAAyBtG,KAAK,CAACoC,SAAN,KAAoB,IAAjD,EAAuD;AACrD+6C,IAAAA,OAAO,GAAGD,cAAc,CAAC3iD,GAAf,CAAmByF,KAAK,CAACoC,SAAzB,CAAV;AACD;;AACD,MAAI+6C,OAAO,KAAK72C,SAAhB,EAA2B;AACzB62C,IAAAA,OAAO,GAAG,IAAIhC,iBAAJ,CAAsBn7C,KAAtB,CAAV;AACAk9C,IAAAA,cAAc,CAACxiD,GAAf,CAAmBsF,KAAnB,EAA0Bm9C,OAA1B;AACD;;AACD,SAAOA,OAAP;AACD;;;AAGDzE,kBAAkB,CAAC;AACjBE,EAAAA,uBAAuB,EAAG,MAAM;AAC9B,UAAM,IAAI/1C,KAAJ,CAAU,yDAAV,CAAN;AACD,GAHgB;AAIjBg2C,EAAAA,UAAU,EAAE/9B,CAAc,CAJT;AAKjBg+B,EAAAA,OAAO,EAAEU,YALQ;AAMjBT,EAAAA,mBAAmB,EAAE;AANJ,CAAD,CAAlB;;;;;;;"}