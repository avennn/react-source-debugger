{"version":3,"file":"ReactART-dev.js","sources":["../../packages/shared/ReactVersion.js","../../packages/react-reconciler/src/ReactRootTags.js","../../packages/shared/forks/consoleWithStackDev.www.js","../../packages/shared/assign.js","../../packages/shared/ReactInstanceMap.js","../../packages/shared/ReactSharedInternals.js","../../packages/shared/forks/ReactFeatureFlags.www.js","../../packages/react-reconciler/src/ReactWorkTags.js","../../packages/shared/ReactSymbols.www.js","../../packages/shared/getComponentNameFromType.js","../../packages/react-reconciler/src/getComponentNameFromFiber.js","../../packages/react-reconciler/src/ReactFiberFlags.js","../../packages/react-reconciler/src/ReactFiberTreeReflection.js","../../packages/shared/isArray.js","../../packages/react-art/src/ReactARTInternals.js","../../packages/react-reconciler/src/Scheduler.js","../../packages/shared/ConsolePatchingDev.js","../../packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","../../packages/react-reconciler/src/ReactTypeOfMode.js","../../packages/react-reconciler/src/clz32.js","../../packages/react-reconciler/src/ReactFiberLane.old.js","../../packages/react-reconciler/src/ReactEventPriorities.old.js","../../packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js","../../packages/react-reconciler/src/ReactFiberHostConfigWithNoScopes.js","../../packages/react-art/src/ReactARTHostConfig.js","../../packages/shared/ReactComponentStackFrame.js","../../packages/shared/hasOwnProperty.js","../../packages/shared/checkPropTypes.js","../../packages/react-reconciler/src/ReactFiberStack.old.js","../../packages/react-reconciler/src/ReactFiberContext.old.js","../../packages/shared/objectIs.js","../../packages/react-reconciler/src/ReactFiberSyncTaskQueue.old.js","../../packages/react-reconciler/src/DebugTracing.js","../../packages/react-reconciler/src/ReactFiberShellHydration.js","../../packages/react-reconciler/src/ReactFiberTreeContext.old.js","../../packages/react-reconciler/src/ReactFiberHydrationContext.old.js","../../packages/react-reconciler/src/ReactFiberTransition.js","../../packages/shared/shallowEqual.js","../../packages/react-reconciler/src/ReactFiberComponentStack.js","../../packages/react-reconciler/src/ReactCurrentFiber.js","../../packages/react-reconciler/src/ReactStrictModeWarnings.old.js","../../packages/shared/CheckStringCoercion.js","../../packages/react-reconciler/src/ReactFiberLazyComponent.old.js","../../packages/react-reconciler/src/ReactFiberNewContext.old.js","../../packages/react-reconciler/src/ReactFiberConcurrentUpdates.old.js","../../packages/react-reconciler/src/ReactFiberClassUpdateQueue.old.js","../../packages/react-reconciler/src/ReactFiberClassComponent.old.js","../../packages/react-reconciler/src/ReactChildFiber.old.js","../../packages/react-reconciler/src/ReactFiberHostContext.old.js","../../packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","../../packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","../../packages/react-reconciler/src/ReactHookEffectTags.js","../../packages/react-reconciler/src/ReactMutableSource.old.js","../../packages/react-reconciler/src/ReactFiberCacheComponent.old.js","../../packages/react-reconciler/src/ReactFiberHooks.old.js","../../packages/react-reconciler/src/ReactProfilerTimer.old.js","../../packages/react-reconciler/src/ReactCapturedValue.js","../../packages/react-reconciler/src/forks/ReactFiberErrorDialog.www.js","../../packages/react-reconciler/src/ReactFiberErrorLogger.js","../../packages/react-reconciler/src/ReactFiberThrow.old.js","../../packages/react-reconciler/src/ReactFiberTransition.old.js","../../packages/react-reconciler/src/ReactFiberBeginWork.old.js","../../packages/react-reconciler/src/ReactFiberScope.old.js","../../packages/react-reconciler/src/ReactFiberCompleteWork.old.js","../../packages/react-reconciler/src/ReactFiberUnwindWork.old.js","../../packages/shared/forks/invokeGuardedCallbackImpl.www.js","../../packages/shared/ReactErrorUtils.js","../../packages/react-reconciler/src/ReactFiberCommitWork.old.js","../../packages/react-reconciler/src/ReactTestSelectors.js","../../packages/react-reconciler/src/ReactFiberAct.old.js","../../packages/react-reconciler/src/ReactFiberWorkLoop.old.js","../../packages/react-reconciler/src/ReactFiberHotReloading.old.js","../../packages/react-reconciler/src/ReactFiber.old.js","../../packages/react-reconciler/src/ReactFiberRoot.old.js","../../packages/react-reconciler/src/ReactFiberReconciler.old.js","../../packages/react-art/src/ReactART.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\n//\n// TODO: 18.0.0 has not been released to NPM;\n// It exists as a placeholder so that DevTools can support work tag changes between releases.\n// When we next publish a release, update the matching TODO in backend/renderer.js\n// TODO: This module is used both by the release scripts and to expose a version\n// at runtime. We should instead inject the version number as part of the build\n// process, and use the ReactVersions.js module as the single source of truth.\nexport default '18.1.0';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1;\n\nexport const LegacyRoot = 0;\nexport const ConcurrentRoot = 1;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This refers to a WWW module.\nconst warningWWW = require('warning');\n\nlet suppressWarning = false;\nexport function setSuppressWarning(newSuppressWarning) {\n  if (__DEV__) {\n    suppressWarning = newSuppressWarning;\n  }\n}\n\nexport function warn(format, ...args) {\n  if (__DEV__) {\n    if (!suppressWarning) {\n      printWarning('warn', format, args);\n    }\n  }\n}\n\nexport function error(format, ...args) {\n  if (__DEV__) {\n    if (!suppressWarning) {\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  if (__DEV__) {\n    const React = require('react');\n    const ReactSharedInternals =\n      React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    // Defensive in case this is fired before React is initialized.\n    if (ReactSharedInternals != null) {\n      const ReactDebugCurrentFrame =\n        ReactSharedInternals.ReactDebugCurrentFrame;\n      const stack = ReactDebugCurrentFrame.getStackAddendum();\n      if (stack !== '') {\n        format += '%s';\n        args.push(stack);\n      }\n    }\n    // TODO: don't ignore level and pass it down somewhere too.\n    args.unshift(format);\n    args.unshift(false);\n    warningWWW.apply(null, args);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst assign = Object.assign;\n\nexport default assign;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\nimport typeof * as ExportsType from './ReactFeatureFlags.www';\nimport typeof * as DynamicFeatureFlags from './ReactFeatureFlags.www-dynamic';\n\n// Re-export dynamic flags from the www version.\nconst dynamicFeatureFlags: DynamicFeatureFlags = require('ReactFeatureFlags');\n\nexport const {\n  disableInputAttributeSyncing,\n  enableTrustedTypesIntegration,\n  disableSchedulerTimeoutBasedOnReactExpirationTime,\n  warnAboutSpreadingKeyToJSX,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableFilterEmptyStringAttributesDOM,\n  enableLegacyFBSupport,\n  deferRenderPhaseUpdateToNextBatch,\n  enableDebugTracing,\n  skipUnmountedBoundaries,\n  createRootStrictEffectsByDefault,\n  enableUseRefAccessWarning,\n  disableNativeComponentFrames,\n  disableSchedulerTimeoutInWorkLoop,\n  enableLazyContextPropagation,\n  enableSyncDefaultUpdates,\n  enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay,\n  enableClientRenderFallbackOnTextMismatch,\n} = dynamicFeatureFlags;\n\n// On WWW, __EXPERIMENTAL__ is used for a new modern build.\n// It's not used anywhere in production yet.\n\nexport const enableStrictEffects =\n  __DEV__ && dynamicFeatureFlags.enableStrictEffects;\nexport const debugRenderPhaseSideEffectsForStrictMode = __DEV__;\nexport const enableProfilerTimer = __PROFILE__;\nexport const enableProfilerCommitHooks = __PROFILE__;\nexport const enableProfilerNestedUpdatePhase = __PROFILE__;\nexport const enableProfilerNestedUpdateScheduledHook =\n  __PROFILE__ && dynamicFeatureFlags.enableProfilerNestedUpdateScheduledHook;\nexport const enableUpdaterTracking = __PROFILE__;\n\nexport const enableSuspenseLayoutEffectSemantics = true;\nexport const enableSuspenseAvoidThisFallback = true;\nexport const enableSuspenseAvoidThisFallbackFizz = false;\nexport const enableCPUSuspense = true;\n\n// Logs additional User Timing API marks for use with an experimental profiling tool.\nexport const enableSchedulingProfiler =\n  __PROFILE__ && dynamicFeatureFlags.enableSchedulingProfiler;\n\n// Note: we'll want to remove this when we to userland implementation.\n// For now, we'll turn it on for everyone because it's *already* on for everyone in practice.\n// At least this will let us stop shipping <Profiler> implementation to all users.\nexport const enableSchedulerDebugging = true;\nexport const warnAboutDeprecatedLifecycles = true;\nexport const disableLegacyContext = __EXPERIMENTAL__;\nexport const warnAboutStringRefs = false;\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\nexport const enableGetInspectorDataForInstanceInProduction = false;\n\nexport const enableCache = true;\nexport const enableCacheElement = true;\n\nexport const disableJavaScriptURLs = true;\n\n// TODO: www currently relies on this feature. It's disabled in open source.\n// Need to remove it.\nexport const disableCommentsAsDOMContainers = false;\n\nexport const disableModulePatternComponents = true;\n\nexport const enableCreateEventHandleAPI = true;\n\nexport const enableScopeAPI = true;\n\nexport const enableSuspenseCallback = true;\n\nexport const enableLegacyHidden = true;\n\nexport const enableComponentStackLocations = true;\n\nexport const disableTextareaChildren = __EXPERIMENTAL__;\n\n// Enable forked reconciler. Piggy-backing on the \"variant\" global so that we\n// don't have to add another test dimension. The build system will compile this\n// to the correct value.\nexport const enableNewReconciler = __VARIANT__;\n\nexport const allowConcurrentByDefault = true;\n\nexport const deletedTreeCleanUpLevel = 3;\n\nexport const consoleManagedByDevToolsDuringStrictMode = true;\nexport const enableServerContext = true;\n\n// Some www surfaces are still using this. Remove once they have been migrated.\nexport const enableUseMutableSource = true;\n\nexport const enableCustomElementPropertySupport = __EXPERIMENTAL__;\n\nexport const enableTransitionTracing = false;\n\nexport const enableSymbolFallbackForWWW = true;\n// Flow magic to verify the exports of this file match the original version.\n// eslint-disable-next-line no-unused-vars\ntype Check<_X, Y: _X, X: Y = _X> = null;\n// eslint-disable-next-line no-unused-expressions\n(null: Check<ExportsType, FeatureFlagsType>);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24\n  | 25;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const ScopeComponent = 21;\nexport const OffscreenComponent = 22;\nexport const LegacyHiddenComponent = 23;\nexport const CacheComponent = 24;\nexport const TracingMarkerComponent = 25;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\nimport {enableSymbolFallbackForWWW} from './ReactFeatureFlags';\n\nconst usePolyfill =\n  enableSymbolFallbackForWWW && (typeof Symbol !== 'function' || !Symbol.for);\n\n// The Symbol used to tag the ReactElement-like types.\nexport const REACT_ELEMENT_TYPE = usePolyfill\n  ? 0xeac7\n  : Symbol.for('react.element');\nexport const REACT_PORTAL_TYPE = usePolyfill\n  ? 0xeaca\n  : Symbol.for('react.portal');\nexport const REACT_FRAGMENT_TYPE = usePolyfill\n  ? 0xeacb\n  : Symbol.for('react.fragment');\nexport const REACT_STRICT_MODE_TYPE = usePolyfill\n  ? 0xeacc\n  : Symbol.for('react.strict_mode');\nexport const REACT_PROFILER_TYPE = usePolyfill\n  ? 0xead2\n  : Symbol.for('react.profiler');\nexport const REACT_PROVIDER_TYPE = usePolyfill\n  ? 0xeacd\n  : Symbol.for('react.provider');\nexport const REACT_CONTEXT_TYPE = usePolyfill\n  ? 0xeace\n  : Symbol.for('react.context');\nexport const REACT_SERVER_CONTEXT_TYPE = usePolyfill\n  ? 0xeae6\n  : Symbol.for('react.server_context');\nexport const REACT_FORWARD_REF_TYPE = usePolyfill\n  ? 0xead0\n  : Symbol.for('react.forward_ref');\nexport const REACT_SUSPENSE_TYPE = usePolyfill\n  ? 0xead1\n  : Symbol.for('react.suspense');\nexport const REACT_SUSPENSE_LIST_TYPE = usePolyfill\n  ? 0xead8\n  : Symbol.for('react.suspense_list');\nexport const REACT_MEMO_TYPE = usePolyfill ? 0xead3 : Symbol.for('react.memo');\nexport const REACT_LAZY_TYPE = usePolyfill ? 0xead4 : Symbol.for('react.lazy');\nexport const REACT_SCOPE_TYPE = usePolyfill\n  ? 0xead7\n  : Symbol.for('react.scope');\nexport const REACT_DEBUG_TRACING_MODE_TYPE = usePolyfill\n  ? 0xeae1\n  : Symbol.for('react.debug_trace_mode');\nexport const REACT_OFFSCREEN_TYPE = usePolyfill\n  ? 0xeae2\n  : Symbol.for('react.offscreen');\nexport const REACT_LEGACY_HIDDEN_TYPE = usePolyfill\n  ? 0xeae3\n  : Symbol.for('react.legacy_hidden');\nexport const REACT_CACHE_TYPE = usePolyfill\n  ? 0xeae4\n  : Symbol.for('react.cache');\nexport const REACT_TRACING_MARKER_TYPE = usePolyfill\n  ? 0xeae5\n  : Symbol.for('react.tracing_marker');\nexport const REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = usePolyfill\n  ? 0xeae7\n  : Symbol.for('react.default_value');\nconst MAYBE_ITERATOR_SYMBOL = usePolyfill\n  ? typeof Symbol === 'function' && Symbol.iterator\n  : Symbol.iterator;\n\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n  REACT_SERVER_CONTEXT_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {\n  enableServerContext,\n  enableTransitionTracing,\n  enableCache,\n} from './ReactFeatureFlags';\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const displayName = (outerType: any).displayName;\n  if (displayName) {\n    return displayName;\n  }\n  const functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName;\n}\n\n// Keep in sync with react-reconciler/getComponentNameFromFiber\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\n// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\nexport default function getComponentNameFromType(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentNameFromType(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n    case REACT_CACHE_TYPE:\n      if (enableCache) {\n        return 'Cache';\n      }\n    // eslint-disable-next-line no-fallthrough\n    case REACT_TRACING_MARKER_TYPE:\n      if (enableTransitionTracing) {\n        return 'TracingMarker';\n      }\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        const outerName = (type: any).displayName || null;\n        if (outerName !== null) {\n          return outerName;\n        }\n        return getComponentNameFromType(type.type) || 'Memo';\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentNameFromType(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n      case REACT_SERVER_CONTEXT_TYPE:\n        if (enableServerContext) {\n          const context2 = ((type: any): ReactContext<any>);\n          return (context2.displayName || context2._globalName) + '.Provider';\n        }\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nimport {enableLegacyHidden} from 'shared/ReactFeatureFlags';\n\nimport {\n  FunctionComponent,\n  ClassComponent,\n  IndeterminateComponent,\n  HostRoot,\n  HostPortal,\n  HostComponent,\n  HostText,\n  Fragment,\n  Mode,\n  ContextConsumer,\n  ContextProvider,\n  ForwardRef,\n  Profiler,\n  SuspenseComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  DehydratedFragment,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {REACT_STRICT_MODE_TYPE} from 'shared/ReactSymbols';\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\n// Keep in sync with shared/getComponentNameFromType\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nexport default function getComponentNameFromFiber(fiber: Fiber): string | null {\n  const {tag, type} = fiber;\n  switch (tag) {\n    case CacheComponent:\n      return 'Cache';\n    case ContextConsumer:\n      const context: ReactContext<any> = (type: any);\n      return getContextName(context) + '.Consumer';\n    case ContextProvider:\n      const provider: ReactProviderType<any> = (type: any);\n      return getContextName(provider._context) + '.Provider';\n    case DehydratedFragment:\n      return 'DehydratedFragment';\n    case ForwardRef:\n      return getWrappedName(type, type.render, 'ForwardRef');\n    case Fragment:\n      return 'Fragment';\n    case HostComponent:\n      // Host component type is the display name (e.g. \"div\", \"View\")\n      return type;\n    case HostPortal:\n      return 'Portal';\n    case HostRoot:\n      return 'Root';\n    case HostText:\n      return 'Text';\n    case LazyComponent:\n      // Name comes from the type in this case; we don't have a tag.\n      return getComponentNameFromType(type);\n    case Mode:\n      if (type === REACT_STRICT_MODE_TYPE) {\n        // Don't be less specific than shared/getComponentNameFromType\n        return 'StrictMode';\n      }\n      return 'Mode';\n    case OffscreenComponent:\n      return 'Offscreen';\n    case Profiler:\n      return 'Profiler';\n    case ScopeComponent:\n      return 'Scope';\n    case SuspenseComponent:\n      return 'Suspense';\n    case SuspenseListComponent:\n      return 'SuspenseList';\n    case TracingMarkerComponent:\n      return 'TracingMarker';\n    // The display name for this tags come from the user-provided type:\n    case ClassComponent:\n    case FunctionComponent:\n    case IncompleteClassComponent:\n    case IndeterminateComponent:\n    case MemoComponent:\n    case SimpleMemoComponent:\n      if (typeof type === 'function') {\n        return (type: any).displayName || type.name || null;\n      }\n      if (typeof type === 'string') {\n        return type;\n      }\n      break;\n    case LegacyHiddenComponent:\n      if (enableLegacyHidden) {\n        return 'LegacyHidden';\n      }\n  }\n\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableCreateEventHandleAPI} from 'shared/ReactFeatureFlags';\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b00000000000000000000000000;\nexport const PerformedWork = /*                */ 0b00000000000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b00000000000000000000000010;\nexport const Update = /*                       */ 0b00000000000000000000000100;\nexport const Deletion = /*                     */ 0b00000000000000000000001000;\nexport const ChildDeletion = /*                */ 0b00000000000000000000010000;\nexport const ContentReset = /*                 */ 0b00000000000000000000100000;\nexport const Callback = /*                     */ 0b00000000000000000001000000;\nexport const DidCapture = /*                   */ 0b00000000000000000010000000;\nexport const ForceClientRender = /*            */ 0b00000000000000000100000000;\nexport const Ref = /*                          */ 0b00000000000000001000000000;\nexport const Snapshot = /*                     */ 0b00000000000000010000000000;\nexport const Passive = /*                      */ 0b00000000000000100000000000;\nexport const Hydrating = /*                    */ 0b00000000000001000000000000;\nexport const Visibility = /*                   */ 0b00000000000010000000000000;\nexport const StoreConsistency = /*             */ 0b00000000000100000000000000;\n\nexport const LifecycleEffectMask =\n  Passive | Update | Callback | Ref | Snapshot | StoreConsistency;\n\n// Union of all commit flags (flags with the lifetime of a particular commit)\nexport const HostEffectMask = /*               */ 0b00000000000111111111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b00000000001000000000000000;\nexport const ShouldCapture = /*                */ 0b00000000010000000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b00000000100000000000000000;\nexport const DidPropagateContext = /*          */ 0b00000001000000000000000000;\nexport const NeedsPropagation = /*             */ 0b00000010000000000000000000;\nexport const Forked = /*                       */ 0b00000100000000000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const RefStatic = /*                    */ 0b00001000000000000000000000;\nexport const LayoutStatic = /*                 */ 0b00010000000000000000000000;\nexport const PassiveStatic = /*                */ 0b00100000000000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b01000000000000000000000000;\nexport const MountPassiveDev = /*              */ 0b10000000000000000000000000;\n\n// Groups of flags that are used in the commit phase to skip over trees that\n// don't contain effects, by checking subtreeFlags.\n\nexport const BeforeMutationMask =\n  // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n  // flag logic (see #20043)\n  Update |\n  Snapshot |\n  (enableCreateEventHandleAPI\n    ? // createEventHandle needs to visit deleted and hidden trees to\n      // fire beforeblur\n      // TODO: Only need to visit Deletions during BeforeMutation phase if an\n      // element is focused.\n      ChildDeletion | Visibility\n    : 0);\n\nexport const MutationMask =\n  Placement |\n  Update |\n  ChildDeletion |\n  ContentReset |\n  Ref |\n  Hydrating |\n  Visibility;\nexport const LayoutMask = Update | Callback | Ref | Visibility;\n\n// TODO: Split into PassiveMountMask and PassiveUnmountMask\nexport const PassiveMask = Passive | ChildDeletion;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculating them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = LayoutStatic | PassiveStatic | RefStatic;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentNameFromFiber(ownerFiber) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  if (getNearestMountedFiber(fiber) !== fiber) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n\n    if (nearestMounted === null) {\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      throw new Error('Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n\n        if (!didFindChild) {\n          throw new Error(\n            'Child was not found in either parent set. This indicates a bug ' +\n              'in React related to the return pointer. Please file an issue.',\n          );\n        }\n      }\n    }\n\n    if (a.alternate !== b) {\n      throw new Error(\n        \"Return fibers should always be each others' alternates. \" +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  if (a.tag !== HostRoot) {\n    throw new Error('Unable to find node on an unmounted component.');\n  }\n\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    const match = findCurrentHostFiberImpl(child);\n    if (match !== null) {\n      return match;\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  return currentParent !== null\n    ? findCurrentHostFiberWithNoPortalsImpl(currentParent)\n    : null;\n}\n\nfunction findCurrentHostFiberWithNoPortalsImpl(node: Fiber) {\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  if (node.tag === HostComponent || node.tag === HostText) {\n    return node;\n  }\n\n  let child = node.child;\n  while (child !== null) {\n    if (child.tag !== HostPortal) {\n      const match = findCurrentHostFiberWithNoPortalsImpl(child);\n      if (match !== null) {\n        return match;\n      }\n    }\n    child = child.sibling;\n  }\n\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\ndeclare function isArray(a: mixed): boolean %checks(Array.isArray(a));\n\nconst isArrayImpl = Array.isArray;\n\n// eslint-disable-next-line no-redeclare\nfunction isArray(a: mixed): boolean {\n  return isArrayImpl(a);\n}\n\nexport default isArray;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport const TYPES = {\n  CLIPPING_RECTANGLE: 'ClippingRectangle',\n  GROUP: 'Group',\n  SHAPE: 'Shape',\n  TEXT: 'Text',\n};\n\nexport const EVENT_TYPES = {\n  onClick: 'click',\n  onMouseMove: 'mousemove',\n  onMouseOver: 'mouseover',\n  onMouseOut: 'mouseout',\n  onMouseUp: 'mouseup',\n  onMouseDown: 'mousedown',\n};\n\nexport function childrenAsString(children) {\n  if (!children) {\n    return '';\n  } else if (typeof children === 'string') {\n    return children;\n  } else if (children.length) {\n    return children.join('');\n  } else {\n    return '';\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// This module only exists as an ESM wrapper around the external CommonJS\n// Scheduler dependency. Notice that we're intentionally not using named imports\n// because Rollup would use dynamic dispatch for CommonJS interop named imports.\n// When we switch to ESM, we can delete this module.\nimport * as Scheduler from 'scheduler';\n\nexport const scheduleCallback = Scheduler.unstable_scheduleCallback;\nexport const cancelCallback = Scheduler.unstable_cancelCallback;\nexport const shouldYield = Scheduler.unstable_shouldYield;\nexport const requestPaint = Scheduler.unstable_requestPaint;\nexport const now = Scheduler.unstable_now;\nexport const getCurrentPriorityLevel =\n  Scheduler.unstable_getCurrentPriorityLevel;\nexport const ImmediatePriority = Scheduler.unstable_ImmediatePriority;\nexport const UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\nexport const NormalPriority = Scheduler.unstable_NormalPriority;\nexport const LowPriority = Scheduler.unstable_LowPriority;\nexport const IdlePriority = Scheduler.unstable_IdlePriority;\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\n// this doesn't actually exist on the scheduler, but it *does*\n// on scheduler/unstable_mock, which we'll need for internal testing\nexport const unstable_yieldValue = Scheduler.unstable_yieldValue;\nexport const unstable_setDisableYieldValue =\n  Scheduler.unstable_setDisableYieldValue;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\n\nlet disabledDepth = 0;\nlet prevLog;\nlet prevInfo;\nlet prevWarn;\nlet prevError;\nlet prevGroup;\nlet prevGroupCollapsed;\nlet prevGroupEnd;\n\nfunction disabledLog() {}\ndisabledLog.__reactDisabledLog = true;\n\nexport function disableLogs(): void {\n  if (__DEV__) {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd;\n      // https://github.com/facebook/react/issues/19099\n      const props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true,\n      };\n      // $FlowFixMe Flow thinks console is immutable.\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props,\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n    disabledDepth++;\n  }\n}\n\nexport function reenableLogs(): void {\n  if (__DEV__) {\n    disabledDepth--;\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      const props = {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n      };\n      // $FlowFixMe Flow thinks console is immutable.\n      Object.defineProperties(console, {\n        log: {...props, value: prevLog},\n        info: {...props, value: prevInfo},\n        warn: {...props, value: prevWarn},\n        error: {...props, value: prevError},\n        group: {...props, value: prevGroup},\n        groupCollapsed: {...props, value: prevGroupCollapsed},\n        groupEnd: {...props, value: prevGroupEnd},\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n    if (disabledDepth < 0) {\n      console.error(\n        'disabledDepth fell below zero. ' +\n          'This is a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {EventPriority} from './ReactEventPriorities.old';\n// import type {DevToolsProfilingHooks} from 'react-devtools-shared/src/backend/types';\n// TODO: This import doesn't work because the DevTools depend on the DOM version of React\n// and to properly type check against DOM React we can't also type check again non-DOM\n// React which this hook might be in.\ntype DevToolsProfilingHooks = any;\n\nimport {\n  getLabelForLane,\n  TotalLanes,\n} from 'react-reconciler/src/ReactFiberLane.old';\nimport {DidCapture} from './ReactFiberFlags';\nimport {\n  consoleManagedByDevToolsDuringStrictMode,\n  enableProfilerTimer,\n  enableSchedulingProfiler,\n} from 'shared/ReactFeatureFlags';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n} from './ReactEventPriorities.old';\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n  unstable_yieldValue,\n  unstable_setDisableYieldValue,\n} from './Scheduler';\nimport {setSuppressWarning} from 'shared/consoleWithStackDev';\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet injectedProfilingHooks: DevToolsProfilingHooks | null = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    if (enableSchedulingProfiler) {\n      // Conditionally inject these hooks only if Timeline profiler is supported by this build.\n      // This gives DevTools a way to feature detect that isn't tied to version number\n      // (since profiling and timeline are controlled by different feature flags).\n      internals = {\n        ...internals,\n        getLaneLabelMap,\n        injectProfilingHooks,\n      };\n    }\n\n    rendererID = hook.inject(internals);\n\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  if (hook.checkDCE) {\n    // This is the real DevTools.\n    return true;\n  } else {\n    // This is likely a hook installed by Fast Refresh runtime.\n    return false;\n  }\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(root: FiberRoot, eventPriority: EventPriority) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        let schedulerPriority;\n        switch (eventPriority) {\n          case DiscreteEventPriority:\n            schedulerPriority = ImmediateSchedulerPriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriority = UserBlockingSchedulerPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriority = IdleSchedulerPriority;\n            break;\n          default:\n            schedulerPriority = NormalSchedulerPriority;\n            break;\n        }\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          schedulerPriority,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onPostCommitRoot(root: FiberRoot) {\n  if (\n    injectedHook &&\n    typeof injectedHook.onPostCommitFiberRoot === 'function'\n  ) {\n    try {\n      injectedHook.onPostCommitFiberRoot(rendererID, root);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function setIsStrictModeForDevtools(newIsStrictMode: boolean) {\n  if (consoleManagedByDevToolsDuringStrictMode) {\n    if (typeof unstable_yieldValue === 'function') {\n      // We're in a test because Scheduler.unstable_yieldValue only exists\n      // in SchedulerMock. To reduce the noise in strict mode tests,\n      // suppress warnings and disable scheduler yielding during the double render\n      unstable_setDisableYieldValue(newIsStrictMode);\n      setSuppressWarning(newIsStrictMode);\n    }\n\n    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {\n      try {\n        injectedHook.setStrictMode(rendererID, newIsStrictMode);\n      } catch (err) {\n        if (__DEV__) {\n          if (!hasLoggedError) {\n            hasLoggedError = true;\n            console.error(\n              'React instrumentation encountered an error: %s',\n              err,\n            );\n          }\n        }\n      }\n    }\n  } else {\n    if (newIsStrictMode) {\n      disableLogs();\n    } else {\n      reenableLogs();\n    }\n  }\n}\n\n// Profiler API hooks\n\nfunction injectProfilingHooks(profilingHooks: DevToolsProfilingHooks): void {\n  injectedProfilingHooks = profilingHooks;\n}\n\nfunction getLaneLabelMap(): Map<Lane, string> | null {\n  if (enableSchedulingProfiler) {\n    const map: Map<Lane, string> = new Map();\n\n    let lane = 1;\n    for (let index = 0; index < TotalLanes; index++) {\n      const label = ((getLabelForLane(lane): any): string);\n      map.set(lane, label);\n      lane *= 2;\n    }\n\n    return map;\n  } else {\n    return null;\n  }\n}\n\nexport function markCommitStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStarted === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStarted(lanes);\n    }\n  }\n}\n\nexport function markCommitStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markCommitStopped === 'function'\n    ) {\n      injectedProfilingHooks.markCommitStopped();\n    }\n  }\n}\n\nexport function markComponentRenderStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markComponentRenderStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentPassiveEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectMountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectMountStopped();\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStarted(fiber: Fiber): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);\n    }\n  }\n}\n\nexport function markComponentLayoutEffectUnmountStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped ===\n        'function'\n    ) {\n      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();\n    }\n  }\n}\n\nexport function markComponentErrored(\n  fiber: Fiber,\n  thrownValue: mixed,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentErrored === 'function'\n    ) {\n      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);\n    }\n  }\n}\n\nexport function markComponentSuspended(\n  fiber: Fiber,\n  wakeable: Wakeable,\n  lanes: Lanes,\n): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markComponentSuspended === 'function'\n    ) {\n      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markLayoutEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markLayoutEffectsStopped();\n    }\n  }\n}\n\nexport function markPassiveEffectsStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStarted(lanes);\n    }\n  }\n}\n\nexport function markPassiveEffectsStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function'\n    ) {\n      injectedProfilingHooks.markPassiveEffectsStopped();\n    }\n  }\n}\n\nexport function markRenderStarted(lanes: Lanes): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStarted === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStarted(lanes);\n    }\n  }\n}\n\nexport function markRenderYielded(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderYielded === 'function'\n    ) {\n      injectedProfilingHooks.markRenderYielded();\n    }\n  }\n}\n\nexport function markRenderStopped(): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderStopped === 'function'\n    ) {\n      injectedProfilingHooks.markRenderStopped();\n    }\n  }\n}\n\nexport function markRenderScheduled(lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markRenderScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markRenderScheduled(lane);\n    }\n  }\n}\n\nexport function markForceUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markForceUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);\n    }\n  }\n}\n\nexport function markStateUpdateScheduled(fiber: Fiber, lane: Lane): void {\n  if (enableSchedulingProfiler) {\n    if (\n      injectedProfilingHooks !== null &&\n      typeof injectedProfilingHooks.markStateUpdateScheduled === 'function'\n    ) {\n      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = /*                         */ 0b000000;\n// TODO: Remove ConcurrentMode by reading from the root tag instead\nexport const ConcurrentMode = /*                 */ 0b000001;\nexport const ProfileMode = /*                    */ 0b000010;\nexport const DebugTracingMode = /*               */ 0b000100;\nexport const StrictLegacyMode = /*               */ 0b001000;\nexport const StrictEffectsMode = /*              */ 0b010000;\nexport const ConcurrentUpdatesByDefaultMode = /* */ 0b100000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// TODO: This is pretty well supported by browsers. Maybe we can drop it.\n\nexport const clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(x: number): number {\n  const asUint = x >>> 0;\n  if (asUint === 0) {\n    return 32;\n  }\n  return (31 - ((log(asUint) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\n// TODO: Ideally these types would be opaque but that doesn't work well with\n// our reconciler fork infra, since these leak into non-reconciler packages.\n\nexport type Lanes = number;\nexport type Lane = number;\nexport type LaneMap<T> = Array<T>;\n\nimport {\n  enableSchedulingProfiler,\n  enableUpdaterTracking,\n  allowConcurrentByDefault,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {ConcurrentUpdatesByDefaultMode, NoMode} from './ReactTypeOfMode';\nimport {clz32} from './clz32';\n\n// Lane values below should be kept in sync with getLabelForLane(), used by react-devtools-timeline.\n// If those values are changed that package should be rebuilt and redeployed.\n\nexport const TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\n\nexport const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000010;\nexport const InputContinuousLane: Lane = /*             */ 0b0000000000000000000000000000100;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000001000;\nexport const DefaultLane: Lane = /*                     */ 0b0000000000000000000000000010000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000000100000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111111000000;\nconst TransitionLane1: Lane = /*                        */ 0b0000000000000000000000001000000;\nconst TransitionLane2: Lane = /*                        */ 0b0000000000000000000000010000000;\nconst TransitionLane3: Lane = /*                        */ 0b0000000000000000000000100000000;\nconst TransitionLane4: Lane = /*                        */ 0b0000000000000000000001000000000;\nconst TransitionLane5: Lane = /*                        */ 0b0000000000000000000010000000000;\nconst TransitionLane6: Lane = /*                        */ 0b0000000000000000000100000000000;\nconst TransitionLane7: Lane = /*                        */ 0b0000000000000000001000000000000;\nconst TransitionLane8: Lane = /*                        */ 0b0000000000000000010000000000000;\nconst TransitionLane9: Lane = /*                        */ 0b0000000000000000100000000000000;\nconst TransitionLane10: Lane = /*                       */ 0b0000000000000001000000000000000;\nconst TransitionLane11: Lane = /*                       */ 0b0000000000000010000000000000000;\nconst TransitionLane12: Lane = /*                       */ 0b0000000000000100000000000000000;\nconst TransitionLane13: Lane = /*                       */ 0b0000000000001000000000000000000;\nconst TransitionLane14: Lane = /*                       */ 0b0000000000010000000000000000000;\nconst TransitionLane15: Lane = /*                       */ 0b0000000000100000000000000000000;\nconst TransitionLane16: Lane = /*                       */ 0b0000000001000000000000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000111110000000000000000000000;\nconst RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;\nconst RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;\nconst RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;\nconst RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;\nconst RetryLane5: Lane = /*                             */ 0b0000100000000000000000000000000;\n\nexport const SomeRetryLane: Lane = RetryLane1;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0001000000000000000000000000000;\n\nconst NonIdleLanes: Lanes = /*                          */ 0b0001111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0010000000000000000000000000000;\nexport const IdleLane: Lane = /*                        */ 0b0100000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\n// This function is used for the experimental timeline (react-devtools-timeline)\n// It should be kept in sync with the Lanes values above.\nexport function getLabelForLane(lane: Lane): string | void {\n  if (enableSchedulingProfiler) {\n    if (lane & SyncLane) {\n      return 'Sync';\n    }\n    if (lane & InputContinuousHydrationLane) {\n      return 'InputContinuousHydration';\n    }\n    if (lane & InputContinuousLane) {\n      return 'InputContinuous';\n    }\n    if (lane & DefaultHydrationLane) {\n      return 'DefaultHydration';\n    }\n    if (lane & DefaultLane) {\n      return 'Default';\n    }\n    if (lane & TransitionHydrationLane) {\n      return 'TransitionHydration';\n    }\n    if (lane & TransitionLanes) {\n      return 'Transition';\n    }\n    if (lane & RetryLanes) {\n      return 'Retry';\n    }\n    if (lane & SelectiveHydrationLane) {\n      return 'SelectiveHydration';\n    }\n    if (lane & IdleHydrationLane) {\n      return 'IdleHydration';\n    }\n    if (lane & IdleLane) {\n      return 'Idle';\n    }\n    if (lane & OffscreenLane) {\n      return 'Offscreen';\n    }\n  }\n}\n\nexport const NoTimestamp = -1;\n\nlet nextTransitionLane: Lane = TransitionLane1;\nlet nextRetryLane: Lane = RetryLane1;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  switch (getHighestPriorityLane(lanes)) {\n    case SyncLane:\n      return SyncLane;\n    case InputContinuousHydrationLane:\n      return InputContinuousHydrationLane;\n    case InputContinuousLane:\n      return InputContinuousLane;\n    case DefaultHydrationLane:\n      return DefaultHydrationLane;\n    case DefaultLane:\n      return DefaultLane;\n    case TransitionHydrationLane:\n      return TransitionHydrationLane;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return lanes & TransitionLanes;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      return lanes & RetryLanes;\n    case SelectiveHydrationLane:\n      return SelectiveHydrationLane;\n    case IdleHydrationLane:\n      return IdleHydrationLane;\n    case IdleLane:\n      return IdleLane;\n    case OffscreenLane:\n      return OffscreenLane;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n      return lanes;\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Do not work on any idle work until all the non-idle work has finished,\n  // even if the work is suspended.\n  const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n  if (nonIdlePendingLanes !== NoLanes) {\n    const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n    if (nonIdleUnblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n    } else {\n      const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n      if (nonIdlePingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n      }\n    }\n  } else {\n    // The only remaining work is Idle.\n    const unblockedLanes = pendingLanes & ~suspendedLanes;\n    if (unblockedLanes !== NoLanes) {\n      nextLanes = getHighestPriorityLanes(unblockedLanes);\n    } else {\n      if (pingedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(pingedLanes);\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    const nextLane = getHighestPriorityLane(nextLanes);\n    const wipLane = getHighestPriorityLane(wipLanes);\n    if (\n      // Tests whether the next lane is equal or lower priority than the wip\n      // one. This works because the bits decrease in priority as you go left.\n      nextLane >= wipLane ||\n      // Default priority updates should not interrupt transition updates. The\n      // only difference between default updates and transition updates is that\n      // default updates do not support refresh transitions.\n      (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\n    ) {\n      // Keep working on the existing in-progress tree. Do not interrupt.\n      return wipLanes;\n    }\n  }\n\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Do nothing, use the lanes as they were assigned.\n  } else if ((nextLanes & InputContinuousLane) !== NoLanes) {\n    // When updates are sync by default, we entangle continuous priority updates\n    // and default updates, so they render in the same batch. The only reason\n    // they use separate lanes is because continuous updates should interrupt\n    // transitions, but default updates should not.\n    nextLanes |= pendingLanes & DefaultLane;\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  // TODO: Reconsider this. The counter-argument is that the partial work\n  // represents an intermediate state, which we don't want to show to the user.\n  // And by spending extra time finishing it, we're increasing the amount of\n  // time it takes to show the final state, which is what they are actually\n  // waiting for.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  switch (lane) {\n    case SyncLane:\n    case InputContinuousHydrationLane:\n    case InputContinuousLane:\n      // User interactions should expire slightly more quickly.\n      //\n      // NOTE: This is set to the corresponding constant as in Scheduler.js.\n      // When we made it larger, a product metric in www regressed, suggesting\n      // there's a user interaction that's being starved by a series of\n      // synchronous updates. If that theory is correct, the proper solution is\n      // to fix the starvation. However, this scenario supports the idea that\n      // expiration times are an important safeguard when starvation\n      // does happen.\n      return currentTime + 250;\n    case DefaultHydrationLane:\n    case DefaultLane:\n    case TransitionHydrationLane:\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n      return currentTime + 5000;\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      // TODO: Retries should be allowed to expire if they are CPU bound for\n      // too long, but when I made this change it caused a spike in browser\n      // crashes. There must be some other underlying bug; not super urgent but\n      // ideally should figure out why and fix it. Unfortunately we don't have\n      // a repro for the crashes, only detected via production metrics.\n      return NoTimestamp;\n    case SelectiveHydrationLane:\n    case IdleHydrationLane:\n    case IdleLane:\n    case OffscreenLane:\n      // Anything idle priority or lower should never expire.\n      return NoTimestamp;\n    default:\n      if (__DEV__) {\n        console.error(\n          'Should have found matching lanes. This is a bug in React.',\n        );\n      }\n      return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function includesSyncLane(lanes: Lanes) {\n  return (lanes & SyncLane) !== NoLanes;\n}\n\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyNonUrgentLanes(lanes: Lanes) {\n  const UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n  return (lanes & UrgentLanes) === NoLanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\nexport function includesBlockingLane(root: FiberRoot, lanes: Lanes) {\n  if (\n    allowConcurrentByDefault &&\n    (root.current.mode & ConcurrentUpdatesByDefaultMode) !== NoMode\n  ) {\n    // Concurrent updates by default always use time slicing.\n    return false;\n  }\n  const SyncDefaultLanes =\n    InputContinuousHydrationLane |\n    InputContinuousLane |\n    DefaultHydrationLane |\n    DefaultLane;\n  return (lanes & SyncDefaultLanes) !== NoLanes;\n}\n\nexport function includesExpiredLane(root: FiberRoot, lanes: Lanes) {\n  // This is a separate check from includesBlockingLane because a lane can\n  // expire after a render has already started.\n  return (lanes & root.expiredLanes) !== NoLanes;\n}\n\nexport function isTransitionLane(lane: Lane) {\n  return (lane & TransitionLanes) !== NoLanes;\n}\n\nexport function claimNextTransitionLane(): Lane {\n  // Cycle through the lanes, assigning each new transition to the next lane.\n  // In most cases, this means every transition gets its own lane, until we\n  // run out of lanes and cycle back to the beginning.\n  const lane = nextTransitionLane;\n  nextTransitionLane <<= 1;\n  if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n    nextTransitionLane = TransitionLane1;\n  }\n  return lane;\n}\n\nexport function claimNextRetryLane(): Lane {\n  const lane = nextRetryLane;\n  nextRetryLane <<= 1;\n  if ((nextRetryLane & RetryLanes) === NoLanes) {\n    nextRetryLane = RetryLane1;\n  }\n  return lane;\n}\n\nexport function getHighestPriorityLane(lanes: Lanes): Lane {\n  return lanes & -lanes;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\nexport function intersectLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a & b;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n  return laneMap;\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // If there are any suspended transitions, it's possible this new update\n  // could unblock them. Clear the suspended lanes so that we can try rendering\n  // them again.\n  //\n  // TODO: We really only need to unsuspend only lanes that are in the\n  // `subtreeLanes` of the updated fiber, or the update lanes of the return\n  // path. This would exclude suspended updates in an unrelated sibling tree,\n  // since there's no way for this update to unblock it.\n  //\n  // We don't do this if the incoming update is idle, because we never process\n  // idle updates until after all the regular updates have finished; there's no\n  // way it could unblock a transition.\n  if (updateLane !== IdleLane) {\n    root.suspendedLanes = NoLanes;\n    root.pingedLanes = NoLanes;\n  }\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = NoLanes;\n  root.pingedLanes = NoLanes;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  // In addition to entangling each of the given lanes with each other, we also\n  // have to consider _transitive_ entanglements. For each lane that is already\n  // entangled with *any* of the given lanes, that lane is now transitively\n  // entangled with *all* the given lanes.\n  //\n  // Translated: If C is entangled with A, then entangling A with B also\n  // entangles C with B.\n  //\n  // If this is hard to grasp, it might help to intentionally break this\n  // function and look at the tests that fail in ReactTransition-test.js. Try\n  // commenting out one of the conditions below.\n\n  const rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n  const entanglements = root.entanglements;\n  let lanes = rootEntangledLanes;\n  while (lanes) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n    if (\n      // Is this one of the newly entangled lanes?\n      (lane & entangledLanes) |\n      // Is this lane transitively entangled with the newly entangled lanes?\n      (entanglements[index] & entangledLanes)\n    ) {\n      entanglements[index] |= entangledLanes;\n    }\n    lanes &= ~lane;\n  }\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  const renderLane = getHighestPriorityLane(renderLanes);\n\n  let lane;\n  switch (renderLane) {\n    case InputContinuousLane:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultLane:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionLane1:\n    case TransitionLane2:\n    case TransitionLane3:\n    case TransitionLane4:\n    case TransitionLane5:\n    case TransitionLane6:\n    case TransitionLane7:\n    case TransitionLane8:\n    case TransitionLane9:\n    case TransitionLane10:\n    case TransitionLane11:\n    case TransitionLane12:\n    case TransitionLane13:\n    case TransitionLane14:\n    case TransitionLane15:\n    case TransitionLane16:\n    case RetryLane1:\n    case RetryLane2:\n    case RetryLane3:\n    case RetryLane4:\n    case RetryLane5:\n      lane = TransitionHydrationLane;\n      break;\n    case IdleLane:\n      lane = IdleHydrationLane;\n      break;\n    default:\n      // Everything else is already either a hydration lane, or shouldn't\n      // be retried at a hydration lane.\n      lane = NoLane;\n      break;\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nexport function addFiberToLanesMap(\n  root: FiberRoot,\n  fiber: Fiber,\n  lanes: Lanes | Lane,\n) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    updaters.add(fiber);\n\n    lanes &= ~lane;\n  }\n}\n\nexport function movePendingFibersToMemoized(root: FiberRoot, lanes: Lanes) {\n  if (!enableUpdaterTracking) {\n    return;\n  }\n  if (!isDevToolsPresent) {\n    return;\n  }\n  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n  const memoizedUpdaters = root.memoizedUpdaters;\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const updaters = pendingUpdatersLaneMap[index];\n    if (updaters.size > 0) {\n      updaters.forEach(fiber => {\n        const alternate = fiber.alternate;\n        if (alternate === null || !memoizedUpdaters.has(alternate)) {\n          memoizedUpdaters.add(fiber);\n        }\n      });\n      updaters.clear();\n    }\n\n    lanes &= ~lane;\n  }\n}\n\nexport function addTransitionToLanesMap(\n  root: FiberRoot,\n  transition: Transition,\n  lane: Lane,\n) {\n  if (enableTransitionTracing) {\n    const transitionLanesMap = root.transitionLanes;\n    const index = laneToIndex(lane);\n    let transitions = transitionLanesMap[index];\n    if (transitions === null) {\n      transitions = [];\n    }\n    transitions.push(transition);\n\n    transitionLanesMap[index] = transitions;\n  }\n}\n\nexport function getTransitionsForLanes(\n  root: FiberRoot,\n  lanes: Lane | Lanes,\n): Array<Transition> | null {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  const transitionsForLanes = [];\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      transitions.forEach(transition => {\n        transitionsForLanes.push(transition);\n      });\n    }\n\n    lanes &= ~lane;\n  }\n\n  if (transitionsForLanes.length === 0) {\n    return null;\n  }\n\n  return transitionsForLanes;\n}\n\nexport function clearTransitionsForLanes(root: FiberRoot, lanes: Lane | Lanes) {\n  if (!enableTransitionTracing) {\n    return;\n  }\n\n  while (lanes > 0) {\n    const index = laneToIndex(lanes);\n    const lane = 1 << index;\n\n    const transitions = root.transitionLanes[index];\n    if (transitions !== null) {\n      root.transitionLanes[index] = null;\n    }\n\n    lanes &= ~lane;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  SyncLane,\n  InputContinuousLane,\n  DefaultLane,\n  IdleLane,\n  getHighestPriorityLane,\n  includesNonIdleWork,\n} from './ReactFiberLane.old';\n\nexport opaque type EventPriority = Lane;\n\nexport const DiscreteEventPriority: EventPriority = SyncLane;\nexport const ContinuousEventPriority: EventPriority = InputContinuousLane;\nexport const DefaultEventPriority: EventPriority = DefaultLane;\nexport const IdleEventPriority: EventPriority = IdleLane;\n\nlet currentUpdatePriority: EventPriority = NoLane;\n\nexport function getCurrentUpdatePriority(): EventPriority {\n  return currentUpdatePriority;\n}\n\nexport function setCurrentUpdatePriority(newPriority: EventPriority) {\n  currentUpdatePriority = newPriority;\n}\n\nexport function runWithPriority<T>(priority: EventPriority, fn: () => T): T {\n  const previousPriority = currentUpdatePriority;\n  try {\n    currentUpdatePriority = priority;\n    return fn();\n  } finally {\n    currentUpdatePriority = previousPriority;\n  }\n}\n\nexport function higherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a !== 0 && a < b ? a : b;\n}\n\nexport function lowerEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): EventPriority {\n  return a === 0 || a > b ? a : b;\n}\n\nexport function isHigherEventPriority(\n  a: EventPriority,\n  b: EventPriority,\n): boolean {\n  return a !== 0 && a < b;\n}\n\nexport function lanesToEventPriority(lanes: Lanes): EventPriority {\n  const lane = getHighestPriorityLane(lanes);\n  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n    return DiscreteEventPriority;\n  }\n  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n    return ContinuousEventPriority;\n  }\n  if (includesNonIdleWork(lane)) {\n    return DefaultEventPriority;\n  }\n  return IdleEventPriority;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  throw new Error(\n    'The current renderer does not support hydration. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Hydration (when unsupported)\nexport type SuspenseInstance = mixed;\nexport const supportsHydration = false;\nexport const canHydrateInstance = shim;\nexport const canHydrateTextInstance = shim;\nexport const canHydrateSuspenseInstance = shim;\nexport const isSuspenseInstancePending = shim;\nexport const isSuspenseInstanceFallback = shim;\nexport const getSuspenseInstanceFallbackErrorDetails = shim;\nexport const registerSuspenseInstanceRetry = shim;\nexport const getNextHydratableSibling = shim;\nexport const getFirstHydratableChild = shim;\nexport const getFirstHydratableChildWithinContainer = shim;\nexport const getFirstHydratableChildWithinSuspenseInstance = shim;\nexport const hydrateInstance = shim;\nexport const hydrateTextInstance = shim;\nexport const hydrateSuspenseInstance = shim;\nexport const getNextHydratableInstanceAfterSuspenseInstance = shim;\nexport const commitHydratedContainer = shim;\nexport const commitHydratedSuspenseInstance = shim;\nexport const clearSuspenseBoundary = shim;\nexport const clearSuspenseBoundaryFromContainer = shim;\nexport const shouldDeleteUnhydratedTailInstances = shim;\nexport const didNotMatchHydratedContainerTextInstance = shim;\nexport const didNotMatchHydratedTextInstance = shim;\nexport const didNotHydrateInstanceWithinContainer = shim;\nexport const didNotHydrateInstanceWithinSuspenseInstance = shim;\nexport const didNotHydrateInstance = shim;\nexport const didNotFindHydratableInstanceWithinContainer = shim;\nexport const didNotFindHydratableTextInstanceWithinContainer = shim;\nexport const didNotFindHydratableSuspenseInstanceWithinContainer = shim;\nexport const didNotFindHydratableInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableTextInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = shim;\nexport const didNotFindHydratableInstance = shim;\nexport const didNotFindHydratableTextInstance = shim;\nexport const didNotFindHydratableSuspenseInstance = shim;\nexport const errorHydratingContainer = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Renderers that don't support React Scopes\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  throw new Error(\n    'The current renderer does not support React Scopes. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// React Scopes (when unsupported)\nexport const prepareScopeUpdate = shim;\nexport const getInstanceFromScope = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport Transform from 'art/core/transform';\nimport Mode from 'art/modes/current';\n\nimport {TYPES, EVENT_TYPES, childrenAsString} from './ReactARTInternals';\n\nimport {DefaultEventPriority} from 'react-reconciler/src/ReactEventPriorities';\n\nconst pooledTransform = new Transform();\n\nconst NO_CONTEXT = {};\nconst UPDATE_SIGNAL = {};\nif (__DEV__) {\n  Object.freeze(NO_CONTEXT);\n  Object.freeze(UPDATE_SIGNAL);\n}\n\n/** Helper Methods */\n\nfunction addEventListeners(instance, type, listener) {\n  // We need to explicitly unregister before unmount.\n  // For this reason we need to track subscriptions.\n  if (!instance._listeners) {\n    instance._listeners = {};\n    instance._subscriptions = {};\n  }\n\n  instance._listeners[type] = listener;\n\n  if (listener) {\n    if (!instance._subscriptions[type]) {\n      instance._subscriptions[type] = instance.subscribe(\n        type,\n        createEventHandler(instance),\n        instance,\n      );\n    }\n  } else {\n    if (instance._subscriptions[type]) {\n      instance._subscriptions[type]();\n      delete instance._subscriptions[type];\n    }\n  }\n}\n\nfunction createEventHandler(instance) {\n  return function handleEvent(event) {\n    const listener = instance._listeners[event.type];\n\n    if (!listener) {\n      // Noop\n    } else if (typeof listener === 'function') {\n      listener.call(instance, event);\n    } else if (listener.handleEvent) {\n      listener.handleEvent(event);\n    }\n  };\n}\n\nfunction destroyEventListeners(instance) {\n  if (instance._subscriptions) {\n    for (const type in instance._subscriptions) {\n      instance._subscriptions[type]();\n    }\n  }\n\n  instance._subscriptions = null;\n  instance._listeners = null;\n}\n\nfunction getScaleX(props) {\n  if (props.scaleX != null) {\n    return props.scaleX;\n  } else if (props.scale != null) {\n    return props.scale;\n  } else {\n    return 1;\n  }\n}\n\nfunction getScaleY(props) {\n  if (props.scaleY != null) {\n    return props.scaleY;\n  } else if (props.scale != null) {\n    return props.scale;\n  } else {\n    return 1;\n  }\n}\n\nfunction isSameFont(oldFont, newFont) {\n  if (oldFont === newFont) {\n    return true;\n  } else if (typeof newFont === 'string' || typeof oldFont === 'string') {\n    return false;\n  } else {\n    return (\n      newFont.fontSize === oldFont.fontSize &&\n      newFont.fontStyle === oldFont.fontStyle &&\n      newFont.fontVariant === oldFont.fontVariant &&\n      newFont.fontWeight === oldFont.fontWeight &&\n      newFont.fontFamily === oldFont.fontFamily\n    );\n  }\n}\n\n/** Render Methods */\n\nfunction applyClippingRectangleProps(instance, props, prevProps = {}) {\n  applyNodeProps(instance, props, prevProps);\n\n  instance.width = props.width;\n  instance.height = props.height;\n}\n\nfunction applyGroupProps(instance, props, prevProps = {}) {\n  applyNodeProps(instance, props, prevProps);\n\n  instance.width = props.width;\n  instance.height = props.height;\n}\n\nfunction applyNodeProps(instance, props, prevProps = {}) {\n  const scaleX = getScaleX(props);\n  const scaleY = getScaleY(props);\n\n  pooledTransform\n    .transformTo(1, 0, 0, 1, 0, 0)\n    .move(props.x || 0, props.y || 0)\n    .rotate(props.rotation || 0, props.originX, props.originY)\n    .scale(scaleX, scaleY, props.originX, props.originY);\n\n  if (props.transform != null) {\n    pooledTransform.transform(props.transform);\n  }\n\n  if (\n    instance.xx !== pooledTransform.xx ||\n    instance.yx !== pooledTransform.yx ||\n    instance.xy !== pooledTransform.xy ||\n    instance.yy !== pooledTransform.yy ||\n    instance.x !== pooledTransform.x ||\n    instance.y !== pooledTransform.y\n  ) {\n    instance.transformTo(pooledTransform);\n  }\n\n  if (props.cursor !== prevProps.cursor || props.title !== prevProps.title) {\n    instance.indicate(props.cursor, props.title);\n  }\n\n  if (instance.blend && props.opacity !== prevProps.opacity) {\n    instance.blend(props.opacity == null ? 1 : props.opacity);\n  }\n\n  if (props.visible !== prevProps.visible) {\n    if (props.visible == null || props.visible) {\n      instance.show();\n    } else {\n      instance.hide();\n    }\n  }\n\n  for (const type in EVENT_TYPES) {\n    addEventListeners(instance, EVENT_TYPES[type], props[type]);\n  }\n}\n\nfunction applyRenderableNodeProps(instance, props, prevProps = {}) {\n  applyNodeProps(instance, props, prevProps);\n\n  if (prevProps.fill !== props.fill) {\n    if (props.fill && props.fill.applyFill) {\n      props.fill.applyFill(instance);\n    } else {\n      instance.fill(props.fill);\n    }\n  }\n  if (\n    prevProps.stroke !== props.stroke ||\n    prevProps.strokeWidth !== props.strokeWidth ||\n    prevProps.strokeCap !== props.strokeCap ||\n    prevProps.strokeJoin !== props.strokeJoin ||\n    // TODO: Consider deep check of stokeDash; may benefit VML in IE.\n    prevProps.strokeDash !== props.strokeDash\n  ) {\n    instance.stroke(\n      props.stroke,\n      props.strokeWidth,\n      props.strokeCap,\n      props.strokeJoin,\n      props.strokeDash,\n    );\n  }\n}\n\nfunction applyShapeProps(instance, props, prevProps = {}) {\n  applyRenderableNodeProps(instance, props, prevProps);\n\n  const path = props.d || childrenAsString(props.children);\n\n  const prevDelta = instance._prevDelta;\n  const prevPath = instance._prevPath;\n\n  if (\n    path !== prevPath ||\n    path.delta !== prevDelta ||\n    prevProps.height !== props.height ||\n    prevProps.width !== props.width\n  ) {\n    instance.draw(path, props.width, props.height);\n\n    instance._prevDelta = path.delta;\n    instance._prevPath = path;\n  }\n}\n\nfunction applyTextProps(instance, props, prevProps = {}) {\n  applyRenderableNodeProps(instance, props, prevProps);\n\n  const string = props.children;\n\n  if (\n    instance._currentString !== string ||\n    !isSameFont(props.font, prevProps.font) ||\n    props.alignment !== prevProps.alignment ||\n    props.path !== prevProps.path\n  ) {\n    instance.draw(string, props.font, props.alignment, props.path);\n\n    instance._currentString = string;\n  }\n}\n\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoPersistence';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoHydration';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoScopes';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoMicrotasks';\n\nexport function appendInitialChild(parentInstance, child) {\n  if (typeof child === 'string') {\n    // Noop for string children of Text (eg <Text>{'foo'}{'bar'}</Text>)\n    throw new Error('Text children should already be flattened.');\n  }\n\n  child.inject(parentInstance);\n}\n\nexport function createInstance(type, props, internalInstanceHandle) {\n  let instance;\n\n  switch (type) {\n    case TYPES.CLIPPING_RECTANGLE:\n      instance = Mode.ClippingRectangle();\n      instance._applyProps = applyClippingRectangleProps;\n      break;\n    case TYPES.GROUP:\n      instance = Mode.Group();\n      instance._applyProps = applyGroupProps;\n      break;\n    case TYPES.SHAPE:\n      instance = Mode.Shape();\n      instance._applyProps = applyShapeProps;\n      break;\n    case TYPES.TEXT:\n      instance = Mode.Text(\n        props.children,\n        props.font,\n        props.alignment,\n        props.path,\n      );\n      instance._applyProps = applyTextProps;\n      break;\n  }\n\n  if (!instance) {\n    throw new Error(`ReactART does not support the type \"${type}\"`);\n  }\n\n  instance._applyProps(instance, props);\n\n  return instance;\n}\n\nexport function createTextInstance(\n  text,\n  rootContainerInstance,\n  internalInstanceHandle,\n) {\n  return text;\n}\n\nexport function finalizeInitialChildren(domElement, type, props) {\n  return false;\n}\n\nexport function getPublicInstance(instance) {\n  return instance;\n}\n\nexport function prepareForCommit() {\n  // Noop\n  return null;\n}\n\nexport function prepareUpdate(domElement, type, oldProps, newProps) {\n  return UPDATE_SIGNAL;\n}\n\nexport function resetAfterCommit() {\n  // Noop\n}\n\nexport function resetTextContent(domElement) {\n  // Noop\n}\n\nexport function getRootHostContext() {\n  return NO_CONTEXT;\n}\n\nexport function getChildHostContext() {\n  return NO_CONTEXT;\n}\n\nexport const scheduleTimeout = setTimeout;\nexport const cancelTimeout = clearTimeout;\nexport const noTimeout = -1;\n\nexport function shouldSetTextContent(type, props) {\n  return (\n    typeof props.children === 'string' || typeof props.children === 'number'\n  );\n}\n\nexport function getCurrentEventPriority() {\n  return DefaultEventPriority;\n}\n\n// The ART renderer is secondary to the React DOM renderer.\nexport const isPrimaryRenderer = false;\n\n// The ART renderer shouldn't trigger missing act() warnings\nexport const warnsIfNotActing = false;\n\nexport const supportsMutation = true;\n\nexport function appendChild(parentInstance, child) {\n  if (child.parentNode === parentInstance) {\n    child.eject();\n  }\n  child.inject(parentInstance);\n}\n\nexport function appendChildToContainer(parentInstance, child) {\n  if (child.parentNode === parentInstance) {\n    child.eject();\n  }\n  child.inject(parentInstance);\n}\n\nexport function insertBefore(parentInstance, child, beforeChild) {\n  if (child === beforeChild) {\n    throw new Error('ReactART: Can not insert node before itself');\n  }\n\n  child.injectBefore(beforeChild);\n}\n\nexport function insertInContainerBefore(parentInstance, child, beforeChild) {\n  if (child === beforeChild) {\n    throw new Error('ReactART: Can not insert node before itself');\n  }\n\n  child.injectBefore(beforeChild);\n}\n\nexport function removeChild(parentInstance, child) {\n  destroyEventListeners(child);\n  child.eject();\n}\n\nexport function removeChildFromContainer(parentInstance, child) {\n  destroyEventListeners(child);\n  child.eject();\n}\n\nexport function commitTextUpdate(textInstance, oldText, newText) {\n  // Noop\n}\n\nexport function commitMount(instance, type, newProps) {\n  // Noop\n}\n\nexport function commitUpdate(\n  instance,\n  updatePayload,\n  type,\n  oldProps,\n  newProps,\n) {\n  instance._applyProps(instance, newProps, oldProps);\n}\n\nexport function hideInstance(instance) {\n  instance.hide();\n}\n\nexport function hideTextInstance(textInstance) {\n  // Noop\n}\n\nexport function unhideInstance(instance, props) {\n  if (props.visible == null || props.visible) {\n    instance.show();\n  }\n}\n\nexport function unhideTextInstance(textInstance, text): void {\n  // Noop\n}\n\nexport function clearContainer(container) {\n  // TODO Implement this\n}\n\nexport function getInstanceFromNode(node) {\n  throw new Error('Not implemented.');\n}\n\nexport function beforeActiveInstanceBlur(internalInstanceHandle: Object) {\n  // noop\n}\n\nexport function afterActiveInstanceBlur() {\n  // noop\n}\n\nexport function preparePortalMount(portalInstance: any): void {\n  // noop\n}\n\nexport function detachDeletedInstance(node: Instance): void {\n  // noop\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  enableComponentStackLocations,\n  disableNativeComponentFrames,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (disableNativeComponentFrames || !fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                let frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n                if (fn.displayName && frame.includes('<anonymous>')) {\n                  frame = frame.replace('<anonymous>', fn.displayName);\n                }\n\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nexport default hasOwnProperty;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport hasOwnProperty from 'shared/hasOwnProperty';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(workInProgress) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    if (contextStackCursor.current !== emptyContextObject) {\n      throw new Error(\n        'Unexpected context found on stack. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentNameFromFiber(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      if (!(contextKey in childContextTypes)) {\n        throw new Error(\n          `${getComponentNameFromFiber(fiber) ||\n            'Unknown'}.getChildContext(): key \"${contextKey}\" is not defined in childContextTypes.`,\n        );\n      }\n    }\n    if (__DEV__) {\n      const name = getComponentNameFromFiber(fiber) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n\n    if (!instance) {\n      throw new Error(\n        'Expected to have an instance by this point. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n      throw new Error(\n        'Expected subtree parent to be a mounted class component. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n\n    throw new Error(\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {SchedulerCallback} from './Scheduler';\n\nimport {\n  DiscreteEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n} from './ReactEventPriorities.old';\nimport {ImmediatePriority, scheduleCallback} from './Scheduler';\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet includesLegacySyncCallbacks: boolean = false;\nlet isFlushingSyncQueue: boolean = false;\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n}\n\nexport function scheduleLegacySyncCallback(callback: SchedulerCallback) {\n  includesLegacySyncCallbacks = true;\n  scheduleSyncCallback(callback);\n}\n\nexport function flushSyncCallbacksOnlyInLegacyMode() {\n  // Only flushes the queue if there's a legacy sync callback scheduled.\n  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So\n  // it might make more sense for the queue to be a list of roots instead of a\n  // list of generic callbacks. Then we can have two: one for legacy roots, one\n  // for concurrent roots. And this method would only flush the legacy ones.\n  if (includesLegacySyncCallbacks) {\n    flushSyncCallbacks();\n  }\n}\n\nexport function flushSyncCallbacks() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrance.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    const previousUpdatePriority = getCurrentUpdatePriority();\n    try {\n      const isSync = true;\n      const queue = syncQueue;\n      // TODO: Is this necessary anymore? The only user code that runs in this\n      // queue is in the render or commit phases.\n      setCurrentUpdatePriority(DiscreteEventPriority);\n      for (; i < queue.length; i++) {\n        let callback = queue[i];\n        do {\n          callback = callback(isSync);\n        } while (callback !== null);\n      }\n      syncQueue = null;\n      includesLegacySyncCallbacks = false;\n    } catch (error) {\n      // If something throws, leave the remaining callbacks on the queue.\n      if (syncQueue !== null) {\n        syncQueue = syncQueue.slice(i + 1);\n      }\n      // Resume flushing in the next tick\n      scheduleCallback(ImmediatePriority, flushSyncCallbacks);\n      throw error;\n    } finally {\n      setCurrentUpdatePriority(previousUpdatePriority);\n      isFlushingSyncQueue = false;\n    }\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {Wakeable} from 'shared/ReactTypes';\n\nimport {enableDebugTracing} from 'shared/ReactFeatureFlags';\n\nconst nativeConsole: Object = console;\nlet nativeConsoleLog: null | Function = null;\n\nconst pendingGroupArgs: Array<any> = [];\nlet printedGroupIndex: number = -1;\n\nfunction formatLanes(laneOrLanes: Lane | Lanes): string {\n  return '0b' + (laneOrLanes: any).toString(2).padStart(31, '0');\n}\n\nfunction group(...groupArgs): void {\n  pendingGroupArgs.push(groupArgs);\n\n  if (nativeConsoleLog === null) {\n    nativeConsoleLog = nativeConsole.log;\n    nativeConsole.log = log;\n  }\n}\n\nfunction groupEnd(): void {\n  pendingGroupArgs.pop();\n  while (printedGroupIndex >= pendingGroupArgs.length) {\n    nativeConsole.groupEnd();\n    printedGroupIndex--;\n  }\n\n  if (pendingGroupArgs.length === 0) {\n    nativeConsole.log = nativeConsoleLog;\n    nativeConsoleLog = null;\n  }\n}\n\nfunction log(...logArgs): void {\n  if (printedGroupIndex < pendingGroupArgs.length - 1) {\n    for (let i = printedGroupIndex + 1; i < pendingGroupArgs.length; i++) {\n      const groupArgs = pendingGroupArgs[i];\n      nativeConsole.group(...groupArgs);\n    }\n    printedGroupIndex = pendingGroupArgs.length - 1;\n  }\n  if (typeof nativeConsoleLog === 'function') {\n    nativeConsoleLog(...logArgs);\n  } else {\n    nativeConsole.log(...logArgs);\n  }\n}\n\nconst REACT_LOGO_STYLE =\n  'background-color: #20232a; color: #61dafb; padding: 0 2px;';\n\nexport function logCommitStarted(lanes: Lanes): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(\n        `%c⚛️%c commit%c (${formatLanes(lanes)})`,\n        REACT_LOGO_STYLE,\n        '',\n        'font-weight: normal;',\n      );\n    }\n  }\n}\n\nexport function logCommitStopped(): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n// $FlowFixMe: Flow cannot handle polymorphic WeakMaps\nconst wakeableIDs: WeakMap<Wakeable, number> = new PossiblyWeakMap();\nlet wakeableID: number = 0;\nfunction getWakeableID(wakeable: Wakeable): number {\n  if (!wakeableIDs.has(wakeable)) {\n    wakeableIDs.set(wakeable, wakeableID++);\n  }\n  return ((wakeableIDs.get(wakeable): any): number);\n}\n\nexport function logComponentSuspended(\n  componentName: string,\n  wakeable: Wakeable,\n): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      const id = getWakeableID(wakeable);\n      const display = (wakeable: any).displayName || wakeable;\n      log(\n        `%c⚛️%c ${componentName} suspended`,\n        REACT_LOGO_STYLE,\n        'color: #80366d; font-weight: bold;',\n        id,\n        display,\n      );\n      wakeable.then(\n        () => {\n          log(\n            `%c⚛️%c ${componentName} resolved`,\n            REACT_LOGO_STYLE,\n            'color: #80366d; font-weight: bold;',\n            id,\n            display,\n          );\n        },\n        () => {\n          log(\n            `%c⚛️%c ${componentName} rejected`,\n            REACT_LOGO_STYLE,\n            'color: #80366d; font-weight: bold;',\n            id,\n            display,\n          );\n        },\n      );\n    }\n  }\n}\n\nexport function logLayoutEffectsStarted(lanes: Lanes): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(\n        `%c⚛️%c layout effects%c (${formatLanes(lanes)})`,\n        REACT_LOGO_STYLE,\n        '',\n        'font-weight: normal;',\n      );\n    }\n  }\n}\n\nexport function logLayoutEffectsStopped(): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\n\nexport function logPassiveEffectsStarted(lanes: Lanes): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(\n        `%c⚛️%c passive effects%c (${formatLanes(lanes)})`,\n        REACT_LOGO_STYLE,\n        '',\n        'font-weight: normal;',\n      );\n    }\n  }\n}\n\nexport function logPassiveEffectsStopped(): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\n\nexport function logRenderStarted(lanes: Lanes): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      group(\n        `%c⚛️%c render%c (${formatLanes(lanes)})`,\n        REACT_LOGO_STYLE,\n        '',\n        'font-weight: normal;',\n      );\n    }\n  }\n}\n\nexport function logRenderStopped(): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      groupEnd();\n    }\n  }\n}\n\nexport function logForceUpdateScheduled(\n  componentName: string,\n  lane: Lane,\n): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      log(\n        `%c⚛️%c ${componentName} forced update %c(${formatLanes(lane)})`,\n        REACT_LOGO_STYLE,\n        'color: #db2e1f; font-weight: bold;',\n        '',\n      );\n    }\n  }\n}\n\nexport function logStateUpdateScheduled(\n  componentName: string,\n  lane: Lane,\n  payloadOrAction: any,\n): void {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      log(\n        `%c⚛️%c ${componentName} updated state %c(${formatLanes(lane)})`,\n        REACT_LOGO_STYLE,\n        'color: #01a252; font-weight: bold;',\n        '',\n        payloadOrAction,\n      );\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootState} from './ReactFiberRoot.new';\n\n// This is imported by the event replaying implementation in React DOM. It's\n// in a separate file to break a circular dependency between the renderer and\n// the reconciler.\nexport function isRootDehydrated(root: FiberRoot) {\n  const currentState: RootState = root.current.memoizedState;\n  return currentState.isDehydrated;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Ids are base 32 strings whose binary representation corresponds to the\n// position of a node in a tree.\n\n// Every time the tree forks into multiple children, we add additional bits to\n// the left of the sequence that represent the position of the child within the\n// current level of children.\n//\n//      00101       00010001011010101\n//      ╰─┬─╯       ╰───────┬───────╯\n//   Fork 5 of 20       Parent id\n//\n// The leading 0s are important. In the above example, you only need 3 bits to\n// represent slot 5. However, you need 5 bits to represent all the forks at\n// the current level, so we must account for the empty bits at the end.\n//\n// For this same reason, slots are 1-indexed instead of 0-indexed. Otherwise,\n// the zeroth id at a level would be indistinguishable from its parent.\n//\n// If a node has only one child, and does not materialize an id (i.e. does not\n// contain a useId hook), then we don't need to allocate any space in the\n// sequence. It's treated as a transparent indirection. For example, these two\n// trees produce the same ids:\n//\n// <>                          <>\n//   <Indirection>               <A />\n//     <A />                     <B />\n//   </Indirection>            </>\n//   <B />\n// </>\n//\n// However, we cannot skip any node that materializes an id. Otherwise, a parent\n// id that does not fork would be indistinguishable from its child id. For\n// example, this tree does not fork, but the parent and child must have\n// different ids.\n//\n// <Parent>\n//   <Child />\n// </Parent>\n//\n// To handle this scenario, every time we materialize an id, we allocate a\n// new level with a single slot. You can think of this as a fork with only one\n// prong, or an array of children with length 1.\n//\n// It's possible for the size of the sequence to exceed 32 bits, the max\n// size for bitwise operations. When this happens, we make more room by\n// converting the right part of the id to a string and storing it in an overflow\n// variable. We use a base 32 string representation, because 32 is the largest\n// power of 2 that is supported by toString(). We want the base to be large so\n// that the resulting ids are compact, and we want the base to be a power of 2\n// because every log2(base) bits corresponds to a single character, i.e. every\n// log2(32) = 5 bits. That means we can lop bits off the end 5 at a time without\n// affecting the final result.\n\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {clz32} from './clz32';\nimport {Forked, NoFlags} from './ReactFiberFlags';\n\nexport type TreeContext = {\n  id: number,\n  overflow: string,\n};\n\n// TODO: Use the unified fiber stack module instead of this local one?\n// Intentionally not using it yet to derisk the initial implementation, because\n// the way we push/pop these values is a bit unusual. If there's a mistake, I'd\n// rather the ids be wrong than crash the whole reconciler.\nconst forkStack: Array<any> = [];\nlet forkStackIndex: number = 0;\nlet treeForkProvider: Fiber | null = null;\nlet treeForkCount: number = 0;\n\nconst idStack: Array<any> = [];\nlet idStackIndex: number = 0;\nlet treeContextProvider: Fiber | null = null;\nlet treeContextId: number = 1;\nlet treeContextOverflow: string = '';\n\nexport function isForkedChild(workInProgress: Fiber): boolean {\n  warnIfNotHydrating();\n  return (workInProgress.flags & Forked) !== NoFlags;\n}\n\nexport function getForksAtLevel(workInProgress: Fiber): number {\n  warnIfNotHydrating();\n  return treeForkCount;\n}\n\nexport function getTreeId(): string {\n  const overflow = treeContextOverflow;\n  const idWithLeadingBit = treeContextId;\n  const id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);\n  return id.toString(32) + overflow;\n}\n\nexport function pushTreeFork(\n  workInProgress: Fiber,\n  totalChildren: number,\n): void {\n  // This is called right after we reconcile an array (or iterator) of child\n  // fibers, because that's the only place where we know how many children in\n  // the whole set without doing extra work later, or storing addtional\n  // information on the fiber.\n  //\n  // That's why this function is separate from pushTreeId — it's called during\n  // the render phase of the fork parent, not the child, which is where we push\n  // the other context values.\n  //\n  // In the Fizz implementation this is much simpler because the child is\n  // rendered in the same callstack as the parent.\n  //\n  // It might be better to just add a `forks` field to the Fiber type. It would\n  // make this module simpler.\n\n  warnIfNotHydrating();\n\n  forkStack[forkStackIndex++] = treeForkCount;\n  forkStack[forkStackIndex++] = treeForkProvider;\n\n  treeForkProvider = workInProgress;\n  treeForkCount = totalChildren;\n}\n\nexport function pushTreeId(\n  workInProgress: Fiber,\n  totalChildren: number,\n  index: number,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextProvider = workInProgress;\n\n  const baseIdWithLeadingBit = treeContextId;\n  const baseOverflow = treeContextOverflow;\n\n  // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part\n  // of the id; we use it to account for leading 0s.\n  const baseLength = getBitLength(baseIdWithLeadingBit) - 1;\n  const baseId = baseIdWithLeadingBit & ~(1 << baseLength);\n\n  const slot = index + 1;\n  const length = getBitLength(totalChildren) + baseLength;\n\n  // 30 is the max length we can store without overflowing, taking into\n  // consideration the leading 1 we use to mark the end of the sequence.\n  if (length > 30) {\n    // We overflowed the bitwise-safe range. Fall back to slower algorithm.\n    // This branch assumes the length of the base id is greater than 5; it won't\n    // work for smaller ids, because you need 5 bits per character.\n    //\n    // We encode the id in multiple steps: first the base id, then the\n    // remaining digits.\n    //\n    // Each 5 bit sequence corresponds to a single base 32 character. So for\n    // example, if the current id is 23 bits long, we can convert 20 of those\n    // bits into a string of 4 characters, with 3 bits left over.\n    //\n    // First calculate how many bits in the base id represent a complete\n    // sequence of characters.\n    const numberOfOverflowBits = baseLength - (baseLength % 5);\n\n    // Then create a bitmask that selects only those bits.\n    const newOverflowBits = (1 << numberOfOverflowBits) - 1;\n\n    // Select the bits, and convert them to a base 32 string.\n    const newOverflow = (baseId & newOverflowBits).toString(32);\n\n    // Now we can remove those bits from the base id.\n    const restOfBaseId = baseId >> numberOfOverflowBits;\n    const restOfBaseLength = baseLength - numberOfOverflowBits;\n\n    // Finally, encode the rest of the bits using the normal algorithm. Because\n    // we made more room, this time it won't overflow.\n    const restOfLength = getBitLength(totalChildren) + restOfBaseLength;\n    const restOfNewBits = slot << restOfBaseLength;\n    const id = restOfNewBits | restOfBaseId;\n    const overflow = newOverflow + baseOverflow;\n\n    treeContextId = (1 << restOfLength) | id;\n    treeContextOverflow = overflow;\n  } else {\n    // Normal path\n    const newBits = slot << baseLength;\n    const id = newBits | baseId;\n    const overflow = baseOverflow;\n\n    treeContextId = (1 << length) | id;\n    treeContextOverflow = overflow;\n  }\n}\n\nexport function pushMaterializedTreeId(workInProgress: Fiber) {\n  warnIfNotHydrating();\n\n  // This component materialized an id. This will affect any ids that appear\n  // in its children.\n  const returnFiber = workInProgress.return;\n  if (returnFiber !== null) {\n    const numberOfForks = 1;\n    const slotIndex = 0;\n    pushTreeFork(workInProgress, numberOfForks);\n    pushTreeId(workInProgress, numberOfForks, slotIndex);\n  }\n}\n\nfunction getBitLength(number: number): number {\n  return 32 - clz32(number);\n}\n\nfunction getLeadingBit(id: number) {\n  return 1 << (getBitLength(id) - 1);\n}\n\nexport function popTreeContext(workInProgress: Fiber) {\n  // Restore the previous values.\n\n  // This is a bit more complicated than other context-like modules in Fiber\n  // because the same Fiber may appear on the stack multiple times and for\n  // different reasons. We have to keep popping until the work-in-progress is\n  // no longer at the top of the stack.\n\n  while (workInProgress === treeForkProvider) {\n    treeForkProvider = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n    treeForkCount = forkStack[--forkStackIndex];\n    forkStack[forkStackIndex] = null;\n  }\n\n  while (workInProgress === treeContextProvider) {\n    treeContextProvider = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextOverflow = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n    treeContextId = idStack[--idStackIndex];\n    idStack[idStackIndex] = null;\n  }\n}\n\nexport function getSuspendedTreeContext(): TreeContext | null {\n  warnIfNotHydrating();\n  if (treeContextProvider !== null) {\n    return {\n      id: treeContextId,\n      overflow: treeContextOverflow,\n    };\n  } else {\n    return null;\n  }\n}\n\nexport function restoreSuspendedTreeContext(\n  workInProgress: Fiber,\n  suspendedContext: TreeContext,\n) {\n  warnIfNotHydrating();\n\n  idStack[idStackIndex++] = treeContextId;\n  idStack[idStackIndex++] = treeContextOverflow;\n  idStack[idStackIndex++] = treeContextProvider;\n\n  treeContextId = suspendedContext.id;\n  treeContextOverflow = suspendedContext.overflow;\n  treeContextProvider = workInProgress;\n}\n\nfunction warnIfNotHydrating() {\n  if (__DEV__) {\n    if (!getIsHydrating()) {\n      console.error(\n        'Expected to be hydrating. This is a bug in React. Please file ' +\n          'an issue.',\n      );\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport {NoMode, ConcurrentMode} from './ReactTypeOfMode';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {TreeContext} from './ReactFiberTreeContext.old';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {\n  ChildDeletion,\n  Placement,\n  Hydrating,\n  NoFlags,\n  DidCapture,\n} from './ReactFiberFlags';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  getFirstHydratableChildWithinContainer,\n  getFirstHydratableChildWithinSuspenseInstance,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  shouldDeleteUnhydratedTailInstances,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateInstanceWithinContainer,\n  didNotHydrateInstanceWithinSuspenseInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableInstanceWithinContainer,\n  didNotFindHydratableTextInstanceWithinContainer,\n  didNotFindHydratableSuspenseInstanceWithinContainer,\n  didNotFindHydratableInstanceWithinSuspenseInstance,\n  didNotFindHydratableTextInstanceWithinSuspenseInstance,\n  didNotFindHydratableSuspenseInstanceWithinSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {OffscreenLane} from './ReactFiberLane.old';\nimport {\n  getSuspendedTreeContext,\n  restoreSuspendedTreeContext,\n} from './ReactFiberTreeContext.old';\nimport {queueRecoverableErrors} from './ReactFiberWorkLoop.old';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\n// This flag allows for warning supression when we expect there to be mismatches\n// due to earlier mismatches or a suspended fiber.\nlet didSuspendOrErrorDEV: boolean = false;\n\n// Hydration errors that were thrown inside this boundary\nlet hydrationErrors: Array<CapturedValue<mixed>> | null = null;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nexport function markDidThrowWhileHydratingDEV() {\n  if (__DEV__) {\n    didSuspendOrErrorDEV = true;\n  }\n}\n\nexport function didSuspendOrErrorWhileHydratingDEV() {\n  if (__DEV__) {\n    return didSuspendOrErrorDEV;\n  }\n  return false;\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance: Container = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChildWithinContainer(\n    parentInstance,\n  );\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n  treeContext: TreeContext | null,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(\n    suspenseInstance,\n  );\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  hydrationErrors = null;\n  didSuspendOrErrorDEV = false;\n  if (treeContext !== null) {\n    restoreSuspendedTreeContext(fiber, treeContext);\n  }\n  return true;\n}\n\nfunction warnUnhydratedInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        didNotHydrateInstanceWithinContainer(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      }\n      case HostComponent: {\n        const isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n          // TODO: Delete this argument when we remove the legacy root API.\n          isConcurrentMode,\n        );\n        break;\n      }\n      case SuspenseComponent: {\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\n        if (suspenseState.dehydrated !== null)\n          didNotHydrateInstanceWithinSuspenseInstance(\n            suspenseState.dehydrated,\n            instance,\n          );\n        break;\n      }\n    }\n  }\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  warnUnhydratedInstance(returnFiber, instance);\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n\n  const deletions = returnFiber.deletions;\n  if (deletions === null) {\n    returnFiber.deletions = [childToDelete];\n    returnFiber.flags |= ChildDeletion;\n  } else {\n    deletions.push(childToDelete);\n  }\n}\n\nfunction warnNonhydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  if (__DEV__) {\n    if (didSuspendOrErrorDEV) {\n      // Inside a boundary that already suspended. We're currently rendering the\n      // siblings of a suspended node. The mismatch may be due to the missing\n      // data, so it's probably a false positive.\n      return;\n    }\n\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstanceWithinContainer(\n              parentContainer,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstanceWithinContainer(\n              parentContainer,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstanceWithinContainer(\n              parentContainer,\n            );\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent: {\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            const isConcurrentMode =\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n              // TODO: Delete this argument when we remove the legacy root API.\n              isConcurrentMode,\n            );\n            break;\n          }\n          case HostText: {\n            const text = fiber.pendingProps;\n            const isConcurrentMode =\n              (returnFiber.mode & ConcurrentMode) !== NoMode;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n              // TODO: Delete this argument when we remove the legacy root API.\n              isConcurrentMode,\n            );\n            break;\n          }\n          case SuspenseComponent: {\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n          }\n        }\n        break;\n      }\n      case SuspenseComponent: {\n        const suspenseState: SuspenseState = returnFiber.memoizedState;\n        const parentInstance = suspenseState.dehydrated;\n        if (parentInstance !== null)\n          switch (fiber.tag) {\n            case HostComponent:\n              const type = fiber.type;\n              const props = fiber.pendingProps;\n              didNotFindHydratableInstanceWithinSuspenseInstance(\n                parentInstance,\n                type,\n                props,\n              );\n              break;\n            case HostText:\n              const text = fiber.pendingProps;\n              didNotFindHydratableTextInstanceWithinSuspenseInstance(\n                parentInstance,\n                text,\n              );\n              break;\n            case SuspenseComponent:\n              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(\n                parentInstance,\n              );\n              break;\n          }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  warnNonhydratedInstance(returnFiber, fiber);\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        hydrationParentFiber = fiber;\n        nextHydratableInstance = getFirstHydratableChild(instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        hydrationParentFiber = fiber;\n        // Text Instances don't have children so there's nothing to hydrate.\n        nextHydratableInstance = null;\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n        nextInstance,\n      );\n      if (suspenseInstance !== null) {\n        const suspenseState: SuspenseState = {\n          dehydrated: suspenseInstance,\n          treeContext: getSuspendedTreeContext(),\n          retryLane: OffscreenLane,\n        };\n        fiber.memoizedState = suspenseState;\n        // Store the dehydrated fragment as a child fiber.\n        // This simplifies the code for getHostSibling and deleting nodes,\n        // since it doesn't have to consider all Suspense boundaries and\n        // check if they're dehydrated ones or not.\n        const dehydratedFragment = createFiberFromDehydratedFragment(\n          suspenseInstance,\n        );\n        dehydratedFragment.return = fiber;\n        fiber.child = dehydratedFragment;\n        hydrationParentFiber = fiber;\n        // While a Suspense Instance does have children, we won't step into\n        // it during the first pass. Instead, we'll reenter it later.\n        nextHydratableInstance = null;\n        return true;\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction shouldClientRenderOnMismatch(fiber: Fiber) {\n  return (\n    (fiber.mode & ConcurrentMode) !== NoMode &&\n    (fiber.flags & DidCapture) === NoFlags\n  );\n}\n\nfunction throwOnHydrationMismatch(fiber: Fiber) {\n  throw new Error(\n    'Hydration failed because the initial UI does not match what was ' +\n      'rendered on the server.',\n  );\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\n      throwOnHydrationMismatch(fiber);\n    }\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    if (shouldClientRenderOnMismatch(fiber)) {\n      warnNonhydratedInstance((hydrationParentFiber: any), fiber);\n      throwOnHydrationMismatch(fiber);\n    }\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    const prevHydrationParentFiber: Fiber = (hydrationParentFiber: any);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);\n  }\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n    shouldWarnIfMismatchDev,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;\n  const shouldUpdate = hydrateTextInstance(\n    textInstance,\n    textContent,\n    fiber,\n    shouldWarnIfMismatchDev,\n  );\n  if (shouldUpdate) {\n    // We assume that prepareToHydrateHostTextInstance is called in a context where the\n    // hydration parent is the parent host component of this host text.\n    const returnFiber = hydrationParentFiber;\n    if (returnFiber !== null) {\n      switch (returnFiber.tag) {\n        case HostRoot: {\n          const parentContainer = returnFiber.stateNode.containerInfo;\n          const isConcurrentMode =\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotMatchHydratedContainerTextInstance(\n            parentContainer,\n            textInstance,\n            textContent,\n            // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode,\n          );\n          break;\n        }\n        case HostComponent: {\n          const parentType = returnFiber.type;\n          const parentProps = returnFiber.memoizedProps;\n          const parentInstance = returnFiber.stateNode;\n          const isConcurrentMode =\n            (returnFiber.mode & ConcurrentMode) !== NoMode;\n          didNotMatchHydratedTextInstance(\n            parentType,\n            parentProps,\n            parentInstance,\n            textInstance,\n            textContent,\n            // TODO: Delete this argument when we remove the legacy root API.\n            isConcurrentMode,\n          );\n          break;\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    throw new Error(\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n\n  if (!suspenseInstance) {\n    throw new Error(\n      'Expected to have a hydrated suspense instance. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them. We also don't delete anything inside the root container.\n  if (\n    fiber.tag !== HostRoot &&\n    (fiber.tag !== HostComponent ||\n      (shouldDeleteUnhydratedTailInstances(fiber.type) &&\n        !shouldSetTextContent(fiber.type, fiber.memoizedProps)))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    if (nextInstance) {\n      if (shouldClientRenderOnMismatch(fiber)) {\n        warnIfUnhydratedTailNodes(fiber);\n        throwOnHydrationMismatch(fiber);\n      } else {\n        while (nextInstance) {\n          deleteHydratableInstance(fiber, nextInstance);\n          nextInstance = getNextHydratableSibling(nextInstance);\n        }\n      }\n    }\n  }\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction hasUnhydratedTailNodes() {\n  return isHydrating && nextHydratableInstance !== null;\n}\n\nfunction warnIfUnhydratedTailNodes(fiber: Fiber) {\n  let nextInstance = nextHydratableInstance;\n  while (nextInstance) {\n    warnUnhydratedInstance(fiber, nextInstance);\n    nextInstance = getNextHydratableSibling(nextInstance);\n  }\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n  didSuspendOrErrorDEV = false;\n}\n\nexport function upgradeHydrationErrorsToRecoverable(): void {\n  if (hydrationErrors !== null) {\n    // Successfully completed a forced client render. The errors that occurred\n    // during the hydration attempt are now recovered. We will log them in\n    // commit phase, once the entire tree has finished.\n    queueRecoverableErrors(hydrationErrors);\n    hydrationErrors = null;\n  }\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport function queueHydrationError(error: CapturedValue<mixed>): void {\n  if (hydrationErrors === null) {\n    hydrationErrors = [error];\n  } else {\n    hydrationErrors.push(error);\n  }\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  hasUnhydratedTailNodes,\n  warnIfUnhydratedTailNodes,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.new';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = null;\n\nexport function requestCurrentTransition(): Transition | null {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\nimport hasOwnProperty from './hasOwnProperty';\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    const currentKey = keysA[i];\n    if (\n      !hasOwnProperty.call(objB, currentKey) ||\n      !is(objA[currentKey], objB[currentKey])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentNameFromFiber(owner);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber | null) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack =\n      fiber === null ? null : getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function getCurrentFiber(): Fiber | null {\n  if (__DEV__) {\n    return current;\n  }\n  return null;\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\n\ntype FiberArray = Array<Fiber>;\ntype FiberToFiberComponentsMap = Map<Fiber, FiberArray>;\n\nconst ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings(fiber: Fiber, instance: any): void {},\n  flushPendingUnsafeLifecycleWarnings(): void {},\n  recordLegacyContextWarning(fiber: Fiber, instance: any): void {},\n  flushLegacyContextWarning(): void {},\n  discardPendingWarnings(): void {},\n};\n\nif (__DEV__) {\n  const findStrictRoot = (fiber: Fiber): Fiber | null => {\n    let maybeStrictRoot = null;\n\n    let node = fiber;\n    while (node !== null) {\n      if (node.mode & StrictLegacyMode) {\n        maybeStrictRoot = node;\n      }\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  const setToSortedString = set => {\n    const array = [];\n    set.forEach(value => {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  let pendingComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingComponentWillUpdateWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillUpdateWarnings: Array<Fiber> = [];\n\n  // Tracks components we have already warned about.\n  const didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    // Dedupe strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (\n      typeof instance.componentWillMount === 'function' &&\n      // Don't warn about react-lifecycles-compat polyfilled components.\n      instance.componentWillMount.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillMount === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillReceiveProps === 'function' &&\n      instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillUpdate === 'function' &&\n      instance.componentWillUpdate.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictLegacyMode &&\n      typeof instance.UNSAFE_componentWillUpdate === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = () => {\n    // We do an initial pass to gather component names\n    const componentWillMountUniqueNames = new Set();\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(fiber => {\n        componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    const UNSAFE_componentWillMountUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(fiber => {\n        UNSAFE_componentWillMountUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    const componentWillReceivePropsUniqueNames = new Set();\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(fiber => {\n        componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    const UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(fiber => {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    const componentWillUpdateUniqueNames = new Set();\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(fiber => {\n        componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    const UNSAFE_componentWillUpdateUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(fiber => {\n        UNSAFE_componentWillUpdateUniqueNames.add(\n          getComponentNameFromFiber(fiber) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    }\n\n    // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillMountUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillReceivePropsUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, \" +\n          'refactor your code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillUpdateUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillMountUniqueNames);\n\n      console.warn(\n        'componentWillMount has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        componentWillReceivePropsUniqueNames,\n      );\n\n      console.warn(\n        'componentWillReceiveProps has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, refactor your \" +\n          'code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillUpdateUniqueNames);\n\n      console.warn(\n        'componentWillUpdate has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n  };\n\n  let pendingLegacyContextWarning: FiberToFiberComponentsMap = new Map();\n\n  // Tracks components we have already warned about.\n  const didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    const strictRoot = findStrictRoot(fiber);\n    if (strictRoot === null) {\n      console.error(\n        'Expected to find a StrictMode component in a strict mode tree. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n      return;\n    }\n\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    let warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (\n      fiber.type.contextTypes != null ||\n      fiber.type.childContextTypes != null ||\n      (instance !== null && typeof instance.getChildContext === 'function')\n    ) {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = () => {\n    ((pendingLegacyContextWarning: any): FiberToFiberComponentsMap).forEach(\n      (fiberArray: FiberArray, strictRoot) => {\n        if (fiberArray.length === 0) {\n          return;\n        }\n        const firstFiber = fiberArray[0];\n\n        const uniqueNames = new Set();\n        fiberArray.forEach(fiber => {\n          uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');\n          didWarnAboutLegacyContext.add(fiber.type);\n        });\n\n        const sortedNames = setToSortedString(uniqueNames);\n\n        try {\n          setCurrentDebugFiberInDEV(firstFiber);\n          console.error(\n            'Legacy context API has been detected within a strict-mode tree.' +\n              '\\n\\nThe old API will be supported in all 16.x releases, but applications ' +\n              'using it should migrate to the new version.' +\n              '\\n\\nPlease update the following components: %s' +\n              '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context',\n            sortedNames,\n          );\n        } finally {\n          resetCurrentDebugFiberInDEV();\n        }\n      },\n    );\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = () => {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\nexport default ReactStrictModeWarnings;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value: mixed): string {\n  if (__DEV__) {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    const hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    const type =\n      (hasToStringTag && (value: any)[Symbol.toStringTag]) ||\n      (value: any).constructor.name ||\n      'Object';\n    return type;\n  }\n}\n\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction willCoercionThrow(value: mixed): boolean {\n  if (__DEV__) {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value: mixed) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + (value: any);\n}\n\nexport function checkAttributeStringCoercion(\n  value: mixed,\n  attributeName: string,\n) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided `%s` attribute is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        attributeName,\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkKeyStringCoercion(value: mixed) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided key is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkPropStringCoercion(value: mixed, propName: string) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided `%s` prop is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        propName,\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkCSSPropertyStringCoercion(value: mixed, propName: string) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided `%s` CSS property is an unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        propName,\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkHtmlStringCoercion(value: mixed) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'The provided HTML markup uses a value of unsupported type %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nexport function checkFormFieldValueStringCoercion(value: mixed) {\n  if (__DEV__) {\n    if (willCoercionThrow(value)) {\n      console.error(\n        'Form field values (value, checked, defaultValue, or defaultChecked props)' +\n          ' must be strings, not %s.' +\n          ' This value must be coerced to a string before before using it here.',\n        typeName(value),\n      );\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport assign from 'shared/assign';\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\nimport type {\n  Fiber,\n  ContextDependency,\n  Dependencies,\n} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SharedQueue} from './ReactFiberClassUpdateQueue.old';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  NoFlags,\n  DidPropagateContext,\n  NeedsPropagation,\n} from './ReactFiberFlags';\n\nimport is from 'shared/objectIs';\nimport {createUpdate, ForceUpdate} from './ReactFiberClassUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  enableLazyContextPropagation,\n  enableServerContext,\n} from 'shared/ReactFeatureFlags';\nimport {REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED} from 'shared/ReactSymbols';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastFullyObservedContext: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(\n  providerFiber: Fiber,\n  context: ReactContext<T>,\n  nextValue: T,\n): void {\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(\n  context: ReactContext<any>,\n  providerFiber: Fiber,\n): void {\n  const currentValue = valueCursor.current;\n  pop(valueCursor, providerFiber);\n  if (isPrimaryRenderer) {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue = context._defaultValue;\n    } else {\n      context._currentValue = currentValue;\n    }\n  } else {\n    if (\n      enableServerContext &&\n      currentValue === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED\n    ) {\n      context._currentValue2 = context._defaultValue;\n    } else {\n      context._currentValue2 = currentValue;\n    }\n  }\n}\n\nexport function scheduleContextWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n  propagationRoot: Fiber,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated.\n      // Normally, this would mean that the rest of the\n      // ancestor path already has sufficient priority.\n      // However, this is not necessarily true inside offscreen\n      // or fallback trees because childLanes may be inconsistent\n      // with the surroundings. This is why we continue the loop.\n    }\n    if (node === propagationRoot) {\n      break;\n    }\n    node = node.return;\n  }\n  if (__DEV__) {\n    if (node !== propagationRoot) {\n      console.error(\n        'Expected to find the propagation root when scheduling context work. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n\nexport function propagateContextChange<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  if (enableLazyContextPropagation) {\n    // TODO: This path is only used by Cache components. Update\n    // lazilyPropagateParentContextChanges to look for Cache components so they\n    // can take advantage of lazy propagation.\n    const forcePropagateEntireTree = true;\n    propagateContextChanges(\n      workInProgress,\n      [context],\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  } else {\n    propagateContextChange_eager(workInProgress, context, renderLanes);\n  }\n}\n\nfunction propagateContextChange_eager<T>(\n  workInProgress: Fiber,\n  context: ReactContext<T>,\n  renderLanes: Lanes,\n): void {\n  // Only used by eager implementation\n  if (enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (dependency.context === context) {\n          // Match! Schedule an update on this fiber.\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const lane = pickArbitraryLane(renderLanes);\n            const update = createUpdate(NoTimestamp, lane);\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n\n            // Inlined `enqueueUpdate` to remove interleaved update check\n            const updateQueue = fiber.updateQueue;\n            if (updateQueue === null) {\n              // Only occurs if the fiber has been unmounted.\n            } else {\n              const sharedQueue: SharedQueue<any> = (updateQueue: any).shared;\n              const pending = sharedQueue.pending;\n              if (pending === null) {\n                // This is the first update. Create a circular list.\n                update.next = update;\n              } else {\n                update.next = pending.next;\n                pending.next = update;\n              }\n              sharedQueue.pending = update;\n            }\n          }\n\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleContextWorkOnParentPath(\n            fiber.return,\n            renderLanes,\n            workInProgress,\n          );\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nfunction propagateContextChanges<T>(\n  workInProgress: Fiber,\n  contexts: Array<any>,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n): void {\n  // Only used by lazy implementation\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dep = list.firstContext;\n      findChangedDep: while (dep !== null) {\n        // Assigning these to constants to help Flow\n        const dependency = dep;\n        const consumer = fiber;\n        findContext: for (let i = 0; i < contexts.length; i++) {\n          const context: ReactContext<T> = contexts[i];\n          // Check if the context matches.\n          // TODO: Compare selected values to bail out early.\n          if (dependency.context === context) {\n            // Match! Schedule an update on this fiber.\n\n            // In the lazy implementation, don't mark a dirty flag on the\n            // dependency itself. Not all changes are propagated, so we can't\n            // rely on the propagation function alone to determine whether\n            // something has changed; the consumer will check. In the future, we\n            // could add back a dirty flag as an optimization to avoid double\n            // checking, but until we have selectors it's not really worth\n            // the trouble.\n            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);\n            const alternate = consumer.alternate;\n            if (alternate !== null) {\n              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n            }\n            scheduleContextWorkOnParentPath(\n              consumer.return,\n              renderLanes,\n              workInProgress,\n            );\n\n            if (!forcePropagateEntireTree) {\n              // During lazy propagation, when we find a match, we can defer\n              // propagating changes to the children, because we're going to\n              // visit them during render. We should continue propagating the\n              // siblings, though\n              nextFiber = null;\n            }\n\n            // Since we already found a match, we can stop traversing the\n            // dependency list.\n            break findChangedDep;\n          }\n        }\n        dep = dependency.next;\n      }\n    } else if (fiber.tag === DehydratedFragment) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n\n      if (parentSuspense === null) {\n        throw new Error(\n          'We just came from a parent so we must have had a parent. This is a bug in React.',\n        );\n      }\n\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleContextWorkOnParentPath(\n        parentSuspense,\n        renderLanes,\n        workInProgress,\n      );\n      nextFiber = null;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function lazilyPropagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = false;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\n// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate\n// to the entire subtree, because we won't revisit it until after the current\n// render has completed, at which point we'll have lost track of which providers\n// have changed.\nexport function propagateParentContextChangesToDeferredTree(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const forcePropagateEntireTree = true;\n  propagateParentContextChanges(\n    current,\n    workInProgress,\n    renderLanes,\n    forcePropagateEntireTree,\n  );\n}\n\nfunction propagateParentContextChanges(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  forcePropagateEntireTree: boolean,\n) {\n  if (!enableLazyContextPropagation) {\n    return;\n  }\n\n  // Collect all the parent providers that changed. Since this is usually small\n  // number, we use an Array instead of Set.\n  let contexts = null;\n  let parent = workInProgress;\n  let isInsidePropagationBailout = false;\n  while (parent !== null) {\n    if (!isInsidePropagationBailout) {\n      if ((parent.flags & NeedsPropagation) !== NoFlags) {\n        isInsidePropagationBailout = true;\n      } else if ((parent.flags & DidPropagateContext) !== NoFlags) {\n        break;\n      }\n    }\n\n    if (parent.tag === ContextProvider) {\n      const currentParent = parent.alternate;\n\n      if (currentParent === null) {\n        throw new Error('Should have a current fiber. This is a bug in React.');\n      }\n\n      const oldProps = currentParent.memoizedProps;\n      if (oldProps !== null) {\n        const providerType: ReactProviderType<any> = parent.type;\n        const context: ReactContext<any> = providerType._context;\n\n        const newProps = parent.pendingProps;\n        const newValue = newProps.value;\n\n        const oldValue = oldProps.value;\n\n        if (!is(newValue, oldValue)) {\n          if (contexts !== null) {\n            contexts.push(context);\n          } else {\n            contexts = [context];\n          }\n        }\n      }\n    }\n    parent = parent.return;\n  }\n\n  if (contexts !== null) {\n    // If there were any changed providers, search through the children and\n    // propagate their changes.\n    propagateContextChanges(\n      workInProgress,\n      contexts,\n      renderLanes,\n      forcePropagateEntireTree,\n    );\n  }\n\n  // This is an optimization so that we only propagate once per subtree. If a\n  // deeply nested child bails out, and it calls this propagation function, it\n  // uses this flag to know that the remaining ancestor providers have already\n  // been propagated.\n  //\n  // NOTE: This optimization is only necessary because we sometimes enter the\n  // begin phase of nodes that don't have any work scheduled on them —\n  // specifically, the siblings of a node that _does_ have scheduled work. The\n  // siblings will bail out and call this function again, even though we already\n  // propagated content changes to it and its subtree. So we use this flag to\n  // mark that the parent providers already propagated.\n  //\n  // Unfortunately, though, we need to ignore this flag when we're inside a\n  // tree whose context propagation was deferred — that's what the\n  // `NeedsPropagation` flag is for.\n  //\n  // If we could instead bail out before entering the siblings' begin phase,\n  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.\n  // Consider this as part of the next refactor to the fiber tree structure.\n  workInProgress.flags |= DidPropagateContext;\n}\n\nexport function checkIfContextChanged(currentDependencies: Dependencies) {\n  if (!enableLazyContextPropagation) {\n    return false;\n  }\n  // Iterate over the current dependencies to see if something changed. This\n  // only gets called if props and state has already bailed out, so it's a\n  // relatively uncommon path, except at the root of a changed subtree.\n  // Alternatively, we could move these comparisons into `readContext`, but\n  // that's a much hotter path, so I think this is an appropriate trade off.\n  let dependency = currentDependencies.firstContext;\n  while (dependency !== null) {\n    const context = dependency.context;\n    const newValue = isPrimaryRenderer\n      ? context._currentValue\n      : context._currentValue2;\n    const oldValue = dependency.memoizedValue;\n    if (!is(newValue, oldValue)) {\n      return true;\n    }\n    dependency = dependency.next;\n  }\n  return false;\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastFullyObservedContext = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    if (enableLazyContextPropagation) {\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    } else {\n      const firstContext = dependencies.firstContext;\n      if (firstContext !== null) {\n        if (includesSomeLane(dependencies.lanes, renderLanes)) {\n          // Context list has a pending update. Mark that this fiber performed work.\n          markWorkInProgressReceivedUpdate();\n        }\n        // Reset the work-in-progress list\n        dependencies.firstContext = null;\n      }\n    }\n  }\n}\n\nexport function readContext<T>(context: ReactContext<T>): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  const value = isPrimaryRenderer\n    ? context._currentValue\n    : context._currentValue2;\n\n  if (lastFullyObservedContext === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else {\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      memoizedValue: value,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      if (currentlyRenderingFiber === null) {\n        throw new Error(\n          'Context can only be read while React is rendering. ' +\n            'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n            'In function components, you can read it directly in the function body, but not ' +\n            'inside Hooks like useReducer() or useMemo().',\n        );\n      }\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n      };\n      if (enableLazyContextPropagation) {\n        currentlyRenderingFiber.flags |= NeedsPropagation;\n      }\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  UpdateQueue as HookQueue,\n  Update as HookUpdate,\n} from './ReactFiberHooks.old';\nimport type {\n  SharedQueue as ClassQueue,\n  Update as ClassUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport type {Lane} from './ReactFiberLane.old';\n\nimport {warnAboutUpdateOnNotYetMountedFiberInDEV} from './ReactFiberWorkLoop.old';\nimport {mergeLanes} from './ReactFiberLane.old';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\nimport {HostRoot} from './ReactWorkTags';\n\n// An array of all update queues that received updates during the current\n// render. When this render exits, either because it finishes or because it is\n// interrupted, the interleaved updates will be transferred onto the main part\n// of the queue.\nlet concurrentQueues: Array<\n  HookQueue<any, any> | ClassQueue<any>,\n> | null = null;\n\nexport function pushConcurrentUpdateQueue(\n  queue: HookQueue<any, any> | ClassQueue<any>,\n) {\n  if (concurrentQueues === null) {\n    concurrentQueues = [queue];\n  } else {\n    concurrentQueues.push(queue);\n  }\n}\n\nexport function finishQueueingConcurrentUpdates() {\n  // Transfer the interleaved updates onto the main queue. Each queue has a\n  // `pending` field and an `interleaved` field. When they are not null, they\n  // point to the last node in a circular linked list. We need to append the\n  // interleaved list to the end of the pending list by joining them into a\n  // single, circular list.\n  if (concurrentQueues !== null) {\n    for (let i = 0; i < concurrentQueues.length; i++) {\n      const queue = concurrentQueues[i];\n      const lastInterleavedUpdate = queue.interleaved;\n      if (lastInterleavedUpdate !== null) {\n        queue.interleaved = null;\n        const firstInterleavedUpdate = lastInterleavedUpdate.next;\n        const lastPendingUpdate = queue.pending;\n        if (lastPendingUpdate !== null) {\n          const firstPendingUpdate = lastPendingUpdate.next;\n          lastPendingUpdate.next = (firstInterleavedUpdate: any);\n          lastInterleavedUpdate.next = (firstPendingUpdate: any);\n        }\n        queue.pending = (lastInterleavedUpdate: any);\n      }\n    }\n    concurrentQueues = null;\n  }\n}\n\nexport function enqueueConcurrentHookUpdate<S, A>(\n  fiber: Fiber,\n  queue: HookQueue<S, A>,\n  update: HookUpdate<S, A>,\n  lane: Lane,\n) {\n  const interleaved = queue.interleaved;\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n    // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n  queue.interleaved = update;\n\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\n\nexport function enqueueConcurrentHookUpdateAndEagerlyBailout<S, A>(\n  fiber: Fiber,\n  queue: HookQueue<S, A>,\n  update: HookUpdate<S, A>,\n  lane: Lane,\n): void {\n  const interleaved = queue.interleaved;\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n    // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n  queue.interleaved = update;\n}\n\nexport function enqueueConcurrentClassUpdate<State>(\n  fiber: Fiber,\n  queue: ClassQueue<State>,\n  update: ClassUpdate<State>,\n  lane: Lane,\n) {\n  const interleaved = queue.interleaved;\n  if (interleaved === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n    // At the end of the current render, this queue's interleaved updates will\n    // be transferred to the pending queue.\n    pushConcurrentUpdateQueue(queue);\n  } else {\n    update.next = interleaved.next;\n    interleaved.next = update;\n  }\n  queue.interleaved = update;\n\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\n\nexport function enqueueConcurrentRenderForLane(fiber: Fiber, lane: Lane) {\n  return markUpdateLaneFromFiberToRoot(fiber, lane);\n}\n\n// Calling this function outside this module should only be done for backwards\n// compatibility and should always be accompanied by a warning.\nexport const unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;\n\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  if (__DEV__) {\n    if (\n      alternate === null &&\n      (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n  // Walk the parent path to the root and update the child lanes.\n  let node = sourceFiber;\n  let parent = sourceFiber.return;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      if (__DEV__) {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    node = parent;\n    parent = parent.return;\n  }\n  if (node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\n\nimport {\n  NoLane,\n  NoLanes,\n  isSubsetOfLanes,\n  mergeLanes,\n  isTransitionLane,\n  intersectLanes,\n  markRootEntangled,\n} from './ReactFiberLane.old';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {Callback, ShouldCapture, DidCapture} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  markSkippedUpdateLanes,\n  isUnsafeClassRenderPhaseUpdate,\n} from './ReactFiberWorkLoop.old';\nimport {\n  enqueueConcurrentClassUpdate,\n  unsafe_markUpdateLaneFromFiberToRoot,\n} from './ReactFiberConcurrentUpdates.old';\nimport {setIsStrictModeForDevtools} from './ReactFiberDevToolsHook.old';\n\nimport assign from 'shared/assign';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\nexport type SharedQueue<State> = {|\n  pending: Update<State> | null,\n  interleaved: Update<State> | null,\n  lanes: Lanes,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  effects: Array<Update<State>> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n    },\n    effects: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(\n  fiber: Fiber,\n  update: Update<State>,\n  lane: Lane,\n): FiberRoot | null {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return null;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n\n  if (isUnsafeClassRenderPhaseUpdate(fiber)) {\n    // This is an unsafe render phase update. Add directly to the update\n    // queue so we can process it immediately during the current render.\n    const pending = sharedQueue.pending;\n    if (pending === null) {\n      // This is the first update. Create a circular list.\n      update.next = update;\n    } else {\n      update.next = pending.next;\n      pending.next = update;\n    }\n    sharedQueue.pending = update;\n\n    // Update the childLanes even though we're most likely already rendering\n    // this fiber. This is for backwards compatibility in the case where you\n    // update a different component during render phase than the one that is\n    // currently renderings (a pattern that is accompanied by a warning).\n    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n  } else {\n    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n  }\n}\n\nexport function entangleTransitions(root: FiberRoot, fiber: Fiber, lane: Lane) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<mixed> = (updateQueue: any).shared;\n  if (isTransitionLane(lane)) {\n    let queueLanes = sharedQueue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they must\n    // have finished. We can remove them from the shared queue, which represents\n    // a superset of the actually pending lanes. In some cases we may entangle\n    // more than we need to, but that's OK. In fact it's worse if we *don't*\n    // entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    sharedQueue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictLegacyMode\n          ) {\n            setIsStrictModeForDevtools(true);\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      const updateLane = update.lane;\n      const updateEventTime = update.eventTime;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (\n          callback !== null &&\n          // If the update was already committed, we should not queue its\n          // callback again.\n          update.lane !== NoLane\n        ) {\n          workInProgress.flags |= Callback;\n          const effects = queue.effects;\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    // Interleaved updates are stored on a separate queue. We aren't going to\n    // process them during this render, but we do need to track which lanes\n    // are remaining.\n    const lastInterleaved = queue.shared.interleaved;\n    if (lastInterleaved !== null) {\n      let interleaved = lastInterleaved;\n      do {\n        newLanes = mergeLanes(newLanes, interleaved.lane);\n        interleaved = ((interleaved: any).next: Update<State>);\n      } while (interleaved !== lastInterleaved);\n    } else if (firstBaseUpdate === null) {\n      // `queue.lanes` is used for entangling transitions. We can set it back to\n      // zero once the queue is empty.\n      queue.shared.lanes = NoLanes;\n    }\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  if (typeof callback !== 'function') {\n    throw new Error(\n      'Invalid argument passed as callback. Expected a function. Instead ' +\n        `received: ${callback}`,\n    );\n  }\n\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function commitUpdateQueue<State>(\n  finishedWork: Fiber,\n  finishedQueue: UpdateQueue<State>,\n  instance: any,\n): void {\n  // Commit the effects\n  const effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n  if (effects !== null) {\n    for (let i = 0; i < effects.length; i++) {\n      const effect = effects[i];\n      const callback = effect.callback;\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport * as React from 'react';\nimport {\n  LayoutStatic,\n  MountLayoutDev,\n  Update,\n  Snapshot,\n} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport assign from 'shared/assign';\nimport isArray from 'shared/isArray';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  DebugTracingMode,\n  NoMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  entangleTransitions,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactFiberClassUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook.old';\n\nconst fakeInternalInstance = {};\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentNameFromType(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      throw new Error(\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nfunction applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n  let partialState = getDerivedStateFromProps(nextProps, prevState);\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        partialState = getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    const root = enqueueUpdate(fiber, update, lane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitions(root, fiber, lane);\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(fiber) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    let shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          shouldUpdate = instance.shouldComponentUpdate(\n            newProps,\n            newState,\n            nextContext,\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentNameFromType(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentNameFromType(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentNameFromType(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentNameFromType(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentNameFromType(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  let instance = new ctor(props, context);\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        instance = new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n  }\n\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentNameFromType(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentNameFromFiber(workInProgress) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentNameFromFiber(workInProgress) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentNameFromType(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    let fiberFlags: Flags = Update;\n    if (enableSuspenseLayoutEffectSemantics) {\n      fiberFlags |= LayoutStatic;\n    }\n    if (\n      __DEV__ &&\n      enableStrictEffects &&\n      (workInProgress.mode & StrictEffectsMode) !== NoMode\n    ) {\n      fiberFlags |= MountLayoutDev;\n    }\n    workInProgress.flags |= fiberFlags;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      let fiberFlags: Flags = Update;\n      if (enableSuspenseLayoutEffectSemantics) {\n        fiberFlags |= LayoutStatic;\n      }\n      if (\n        __DEV__ &&\n        enableStrictEffects &&\n        (workInProgress.mode & StrictEffectsMode) !== NoMode\n      ) {\n        fiberFlags |= MountLayoutDev;\n      }\n      workInProgress.flags |= fiberFlags;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing() &&\n    !(\n      enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies)\n    )\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    ) ||\n    // TODO: In some cases, we'll end up checking if context has changed twice,\n    // both before and after `shouldComponentUpdate` has been called. Not ideal,\n    // but I'm loath to refactor this function. This only happens for memoized\n    // components so it's not that common.\n    (enableLazyContextPropagation &&\n      current !== null &&\n      current.dependencies !== null &&\n      checkIfContextChanged(current.dependencies));\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {Placement, ChildDeletion, Forked} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\nimport {ClassComponent, HostText, HostPortal, Fragment} from './ReactWorkTags';\nimport isArray from 'shared/isArray';\nimport {warnAboutStringRefs} from 'shared/ReactFeatureFlags';\nimport {checkPropStringCoercion} from 'shared/CheckStringCoercion';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {pushTreeFork} from './ReactFiberTreeContext.old';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n\n    if (typeof child._store !== 'object') {\n      throw new Error(\n        'React Component in warnForMissingKey should have a _store. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n    }\n\n    child._store.validated = true;\n\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName =\n          getComponentNameFromFiber(returnFiber) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n\n        if (ownerFiber.tag !== ClassComponent) {\n          throw new Error(\n            'Function components cannot have string refs. ' +\n              'We recommend using useRef() instead. ' +\n              'Learn more about using refs safely here: ' +\n              'https://reactjs.org/link/strict-mode-string-ref',\n          );\n        }\n\n        inst = ownerFiber.stateNode;\n      }\n\n      if (!inst) {\n        throw new Error(\n          `Missing owner for string ref ${mixedRef}. This error is likely caused by a ` +\n            'bug in React. Please file an issue.',\n        );\n      }\n      // Assigning this to a const so Flow knows it won't change in the closure\n      const resolvedInst = inst;\n\n      if (__DEV__) {\n        checkPropStringCoercion(mixedRef, 'ref');\n      }\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = resolvedInst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = resolvedInst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      if (typeof mixedRef !== 'string') {\n        throw new Error(\n          'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n        );\n      }\n\n      if (!element._owner) {\n        throw new Error(\n          `Element ref was specified as a string (${mixedRef}) but no owner was set. This could happen for one of` +\n            ' the following reasons:\\n' +\n            '1. You may be adding a ref to a function component\\n' +\n            \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n            '3. You have multiple copies of React loaded\\n' +\n            'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        );\n      }\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  const childString = Object.prototype.toString.call(newChild);\n\n  throw new Error(\n    `Objects are not valid as a React child (found: ${\n      childString === '[object Object]'\n        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n        : childString\n    }). ` +\n      'If you meant to render a collection of children, use an array ' +\n      'instead.',\n  );\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(returnFiber) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\nfunction resolveLazy(lazyType) {\n  const payload = lazyType._payload;\n  const init = lazyType._init;\n  return init(payload);\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [childToDelete];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(childToDelete);\n    }\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // During hydration, the useId algorithm needs to know which fibers are\n      // part of a list of children (arrays, iterators).\n      newFiber.flags |= Forked;\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags |= Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags |= Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags |= Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const elementType = element.type;\n    if (elementType === REACT_FRAGMENT_TYPE) {\n      return updateFragment(\n        returnFiber,\n        current,\n        element.props.children,\n        lanes,\n        element.key,\n      );\n    }\n    if (current !== null) {\n      if (\n        current.elementType === elementType ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__\n          ? isCompatibleFamilyForHotReloading(current, element)\n          : false) ||\n        // Lazy types should reconcile their resolved type.\n        // We need to do this after the Hot Reloading check above,\n        // because hot reloading has different semantics than prod because\n        // it doesn't resuspend. So we can't let the call below suspend.\n        (typeof elementType === 'object' &&\n          elementType !== null &&\n          elementType.$$typeof === REACT_LAZY_TYPE &&\n          resolveLazy(elementType) === current.type)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return createChild(returnFiber, init(payload), lanes);\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          return updateFromMap(\n            existingChildren,\n            returnFiber,\n            newIdx,\n            init(payload),\n            lanes,\n          );\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          const payload = child._payload;\n          const init = (child._init: any);\n          warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n          break;\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n\n    if (typeof iteratorFn !== 'function') {\n      throw new Error(\n        'An object is not an iterable. This error is likely caused by a bug in ' +\n          'React. Please file an issue.',\n      );\n    }\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n\n    if (newChildren == null) {\n      throw new Error('An iterable object provided no iterator.');\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      if (getIsHydrating()) {\n        const numberOfForks = newIdx;\n        pushTreeFork(returnFiber, numberOfForks);\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    if (getIsHydrating()) {\n      const numberOfForks = newIdx;\n      pushTreeFork(returnFiber, numberOfForks);\n    }\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        const elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          if (child.tag === Fragment) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props.children);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        } else {\n          if (\n            child.elementType === elementType ||\n            // Keep this check inline so it only runs on the false path:\n            (__DEV__\n              ? isCompatibleFamilyForHotReloading(child, element)\n              : false) ||\n            // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            (typeof elementType === 'object' &&\n              elementType !== null &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              resolveLazy(elementType) === child.type)\n          ) {\n            deleteRemainingChildren(returnFiber, child.sibling);\n            const existing = useFiber(child, element.props);\n            existing.ref = coerceRef(returnFiber, child, element);\n            existing.return = returnFiber;\n            if (__DEV__) {\n              existing._debugSource = element._source;\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          const payload = newChild._payload;\n          const init = newChild._init;\n          // TODO: This function is supposed to be non-recursive.\n          return reconcileChildFibers(\n            returnFiber,\n            currentFirstChild,\n            init(payload),\n            lanes,\n          );\n      }\n\n      if (isArray(newChild)) {\n        return reconcileChildrenArray(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      if (getIteratorFn(newChild)) {\n        return reconcileChildrenIterator(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes,\n        );\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (\n      (typeof newChild === 'string' && newChild !== '') ||\n      typeof newChild === 'number'\n    ) {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  if (current !== null && workInProgress.child !== current.child) {\n    throw new Error('Resuming work not yet implemented.');\n  }\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  if (c === NO_CONTEXT) {\n    throw new Error(\n      'Expected host context to exist. This error is likely caused by a bug ' +\n        'in React. Please file an issue.',\n    );\n  }\n\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\n// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// Subtree Flags:\n\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\n\n// Shallow Flags:\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function addSubtreeSuspenseContext(\n  parentContext: SuspenseContext,\n  subtreeContext: SubtreeSuspenseContext,\n): SuspenseContext {\n  return parentContext | subtreeContext;\n}\n\nexport function pushSuspenseContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {TreeContext} from './ReactFiberTreeContext.old';\n\nimport {enableSuspenseAvoidThisFallback} from 'shared/ReactFeatureFlags';\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n  unstable_name?: string,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  treeContext: null | TreeContext,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n|};\n\nexport function shouldCaptureSuspense(\n  workInProgress: Fiber,\n  hasInvisibleParent: boolean,\n): boolean {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  const nextState: SuspenseState | null = workInProgress.memoizedState;\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n    return false;\n  }\n  const props = workInProgress.memoizedProps;\n  // Regular boundaries always capture.\n  if (\n    !enableSuspenseAvoidThisFallback ||\n    props.unstable_avoidThisFallback !== true\n  ) {\n    return true;\n  }\n  // If it's a boundary we should avoid, then we prefer to bubble up to the\n  // parent boundary if it is currently invisible.\n  if (hasInvisibleParent) {\n    return false;\n  }\n  // If the parent is not able to handle it, we must handle it.\n  return true;\n}\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*   */ 0b0000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b0001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Insertion = /*  */ 0b0010;\nexport const Layout = /*    */ 0b0100;\nexport const Passive = /*   */ 0b1000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\n\nimport {enableCache} from 'shared/ReactFeatureFlags';\nimport {REACT_CONTEXT_TYPE} from 'shared/ReactSymbols';\n\nimport {pushProvider, popProvider} from './ReactFiberNewContext.old';\nimport * as Scheduler from 'scheduler';\n\n// In environments without AbortController (e.g. tests)\n// replace it with a lightweight shim that only has the features we use.\nconst AbortControllerLocal = enableCache\n  ? typeof AbortController !== 'undefined'\n    ? AbortController\n    : (function AbortControllerShim() {\n        const listeners = [];\n        const signal = (this.signal = {\n          aborted: false,\n          addEventListener: (type, listener) => {\n            listeners.push(listener);\n          },\n        });\n\n        this.abort = () => {\n          signal.aborted = true;\n          listeners.forEach(listener => listener());\n        };\n      }: AbortController)\n  : (null: any);\n\nexport type Cache = {|\n  controller: AbortControllerLocal,\n  data: Map<() => mixed, mixed>,\n  refCount: number,\n|};\n\nexport type CacheComponentState = {|\n  +parent: Cache,\n  +cache: Cache,\n|};\n\nexport type SpawnedCachePool = {|\n  +parent: Cache,\n  +pool: Cache,\n|};\n\n// Intentionally not named imports because Rollup would\n// use dynamic dispatch for CommonJS interop named imports.\nconst {\n  unstable_scheduleCallback: scheduleCallback,\n  unstable_NormalPriority: NormalPriority,\n} = Scheduler;\n\nexport const CacheContext: ReactContext<Cache> = enableCache\n  ? {\n      $$typeof: REACT_CONTEXT_TYPE,\n      // We don't use Consumer/Provider for Cache components. So we'll cheat.\n      Consumer: (null: any),\n      Provider: (null: any),\n      // We'll initialize these at the root.\n      _currentValue: (null: any),\n      _currentValue2: (null: any),\n      _threadCount: 0,\n      _defaultValue: (null: any),\n      _globalName: (null: any),\n    }\n  : (null: any);\n\nif (__DEV__ && enableCache) {\n  CacheContext._currentRenderer = null;\n  CacheContext._currentRenderer2 = null;\n}\n\n// Creates a new empty Cache instance with a ref-count of 0. The caller is responsible\n// for retaining the cache once it is in use (retainCache), and releasing the cache\n// once it is no longer needed (releaseCache).\nexport function createCache(): Cache {\n  if (!enableCache) {\n    return (null: any);\n  }\n  const cache: Cache = {\n    controller: new AbortControllerLocal(),\n    data: new Map(),\n    refCount: 0,\n  };\n\n  return cache;\n}\n\nexport function retainCache(cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  if (__DEV__) {\n    if (cache.controller.signal.aborted) {\n      console.warn(\n        'A cache instance was retained after it was already freed. ' +\n          'This likely indicates a bug in React.',\n      );\n    }\n  }\n  cache.refCount++;\n}\n\n// Cleanup a cache instance, potentially freeing it if there are no more references\nexport function releaseCache(cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  cache.refCount--;\n  if (__DEV__) {\n    if (cache.refCount < 0) {\n      console.warn(\n        'A cache instance was released after it was already freed. ' +\n          'This likely indicates a bug in React.',\n      );\n    }\n  }\n  if (cache.refCount === 0) {\n    scheduleCallback(NormalPriority, () => {\n      cache.controller.abort();\n    });\n  }\n}\n\nexport function pushCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  pushProvider(workInProgress, CacheContext, cache);\n}\n\nexport function popCacheProvider(workInProgress: Fiber, cache: Cache) {\n  if (!enableCache) {\n    return;\n  }\n  popProvider(CacheContext, workInProgress);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n  StartTransitionOptions,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher, HookType} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {Flags} from './ReactFiberFlags';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  enableCache,\n  enableUseRefAccessWarning,\n  enableStrictEffects,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n  enableUseMutableSource,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  StrictEffectsMode,\n} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  SyncLane,\n  NoLanes,\n  isSubsetOfLanes,\n  includesBlockingLane,\n  includesOnlyNonUrgentLanes,\n  claimNextTransitionLane,\n  mergeLanes,\n  removeLanes,\n  intersectLanes,\n  isTransitionLane,\n  markRootEntangled,\n  markRootMutableRead,\n  NoTimestamp,\n} from './ReactFiberLane.old';\nimport {\n  ContinuousEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  higherEventPriority,\n} from './ReactEventPriorities.old';\nimport {readContext, checkIfContextChanged} from './ReactFiberNewContext.old';\nimport {HostRoot, CacheComponent} from './ReactWorkTags';\nimport {\n  LayoutStatic as LayoutStaticEffect,\n  MountLayoutDev as MountLayoutDevEffect,\n  MountPassiveDev as MountPassiveDevEffect,\n  Passive as PassiveEffect,\n  PassiveStatic as PassiveStaticEffect,\n  StaticMask as StaticMaskEffect,\n  Update as UpdateEffect,\n  StoreConsistency,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n  Insertion as HookInsertion,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  markSkippedUpdateLanes,\n} from './ReactFiberWorkLoop.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport is from 'shared/objectIs';\nimport isArray from 'shared/isArray';\nimport {\n  markWorkInProgressReceivedUpdate,\n  checkIfWorkInProgressReceivedUpdate,\n} from './ReactFiberBeginWork.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './ReactFiberDevToolsHook.old';\nimport {createCache, CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createUpdate as createLegacyQueueUpdate,\n  enqueueUpdate as enqueueLegacyQueueUpdate,\n  entangleTransitions as entangleLegacyQueueTransitions,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  enqueueConcurrentHookUpdate,\n  enqueueConcurrentHookUpdateAndEagerlyBailout,\n  enqueueConcurrentRenderForLane,\n} from './ReactFiberConcurrentUpdates.old';\nimport {getTreeId} from './ReactFiberTreeContext.old';\nimport {now} from './Scheduler';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport type Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  hasEagerState: boolean,\n  eagerState: S | null,\n  next: Update<S, A>,\n|};\n\nexport type UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  interleaved: Update<S, A> | null,\n  lanes: Lanes,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnUncachedGetSnapshot;\nif (__DEV__) {\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: any,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\ntype StoreInstance<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\ntype StoreConsistencyCheck<T> = {|\n  value: T,\n  getSnapshot: () => T,\n|};\n\nexport type FunctionComponentUpdateQueue = {|\n  lastEffect: Effect | null,\n  stores: Array<StoreConsistencyCheck<any>> | null,\n|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n// Counts the number of useId hooks in this component.\nlet localIdCounter: number = 0;\n// Used for ids that are generated completely client-side (i.e. not during\n// hydration). This counter is global, so client ids are not stable across\n// render attempts.\nlet globalClientIdCounter: number = 0;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentNameFromFiber(currentlyRenderingFiber);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  throw new Error(\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n  // localIdCounter = 0;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      localIdCounter = 0;\n\n      if (numberOfReRenders >= RE_RENDER_LIMIT) {\n        throw new Error(\n          'Too many re-renders. React limits the number of renders to prevent ' +\n            'an infinite loop.',\n        );\n      }\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    // Confirm that a static flag was not added or removed since the last\n    // render. If this fires, it suggests that we incorrectly reset the static\n    // flags in some other part of the codebase. This has happened before, for\n    // example, in the SuspenseList implementation.\n    if (\n      current !== null &&\n      (current.flags & StaticMaskEffect) !==\n        (workInProgress.flags & StaticMaskEffect) &&\n      // Disable this warning in legacy mode, because legacy Suspense is weird\n      // and creates false positives. To make this work in legacy mode, we'd\n      // need to mark fibers that commit in an incomplete state, somehow. For\n      // now I'll disable the warning that most of the bugs that would trigger\n      // it are either exclusive to concurrent mode or exist in both.\n      (current.mode & ConcurrentMode) !== NoMode\n    ) {\n      console.error(\n        'Internal React error: Expected static flag was missing. Please ' +\n          'notify the React team.',\n      );\n    }\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n  // This is reset by checkDidRenderIdHook\n  // localIdCounter = 0;\n\n  if (didRenderTooFewHooks) {\n    throw new Error(\n      'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n        'early return statement.',\n    );\n  }\n\n  if (enableLazyContextPropagation) {\n    if (current !== null) {\n      if (!checkIfWorkInProgressReceivedUpdate()) {\n        // If there were no changes to props or state, we need to check if there\n        // was a context change. We didn't already do this because there's no\n        // 1:1 correspondence between dependencies and hooks. Although, because\n        // there almost always is in the common case (`readContext` is an\n        // internal API), we could compare in there. OTOH, we only hit this case\n        // if everything else bails out, so on the whole it might be better to\n        // keep the comparison out of the common path.\n        const currentDependencies = current.dependencies;\n        if (\n          currentDependencies !== null &&\n          checkIfContextChanged(currentDependencies)\n        ) {\n          markWorkInProgressReceivedUpdate();\n        }\n      }\n    }\n  }\n  return children;\n}\n\nexport function checkDidRenderIdHook() {\n  // This should be called immediately after every renderWithHooks call.\n  // Conceptually, it's part of the return value of renderWithHooks; it's only a\n  // separate function to avoid using an array tuple.\n  const didRenderIdHook = localIdCounter !== 0;\n  localIdCounter = 0;\n  return didRenderIdHook;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  // TODO: Don't need to reset the flags here, because they're reset in the\n  // complete phase (bubbleProperties).\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (workInProgress.mode & StrictEffectsMode) !== NoMode\n  ) {\n    workInProgress.flags &= ~(\n      MountPassiveDevEffect |\n      MountLayoutDevEffect |\n      PassiveEffect |\n      UpdateEffect\n    );\n  } else {\n    workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  }\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrance.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n  localIdCounter = 0;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    if (nextCurrentHook === null) {\n      throw new Error('Rendered more hooks than during the previous render.');\n    }\n\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n    stores: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, A> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchReducerAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          hasEagerState: update.hasEagerState,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            hasEagerState: update.hasEagerState,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.hasEagerState) {\n          // If this update is a state update (not a reducer) and was processed eagerly,\n          // we can use the eagerly computed state\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  // Interleaved updates are stored on a separate queue. We aren't going to\n  // process them during this render, but we do need to track which lanes\n  // are remaining.\n  const lastInterleaved = queue.interleaved;\n  if (lastInterleaved !== null) {\n    let interleaved = lastInterleaved;\n    do {\n      const interleavedLane = interleaved.lane;\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        interleavedLane,\n      );\n      markSkippedUpdateLanes(interleavedLane);\n      interleaved = ((interleaved: any).next: Update<S, A>);\n    } while (interleaved !== lastInterleaved);\n  } else if (baseQueue === null) {\n    // `queue.lanes` is used for entangling transitions. We can set it back to\n    // zero once the queue is empty.\n    queue.lanes = NoLanes;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n\n  if (queue === null) {\n    throw new Error(\n      'Should have a queue. This is likely a bug in React. Please file an issue.',\n    );\n  }\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubscribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    // Intentioally throw an error to force React to retry synchronously. During\n    // the synchronous retry, it will block interleaved mutations, so we should\n    // get a consistent read. Therefore, the following error should never be\n    // visible to the user.\n\n    // We expect this error not to be thrown during the synchronous retry,\n    // because we blocked interleaved mutations.\n    throw new Error(\n      'Cannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n\n  if (root === null) {\n    throw new Error(\n      'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n    );\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubscribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue: UpdateQueue<Snapshot, BasicStateAction<Snapshot>> = {\n      pending: null,\n      interleaved: null,\n      lanes: NoLanes,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchSetState.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubscribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  if (!enableUseMutableSource) {\n    return (undefined: any);\n  }\n\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const hook = mountWorkInProgressHook();\n\n  let nextSnapshot;\n  const isHydrating = getIsHydrating();\n  if (isHydrating) {\n    if (getServerSnapshot === undefined) {\n      throw new Error(\n        'Missing getServerSnapshot, which is required for ' +\n          'server-rendered content. Will revert to client rendering.',\n      );\n    }\n    nextSnapshot = getServerSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        if (nextSnapshot !== getServerSnapshot()) {\n          console.error(\n            'The result of getServerSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n  } else {\n    nextSnapshot = getSnapshot();\n    if (__DEV__) {\n      if (!didWarnUncachedGetSnapshot) {\n        const cachedSnapshot = getSnapshot();\n        if (!is(nextSnapshot, cachedSnapshot)) {\n          console.error(\n            'The result of getSnapshot should be cached to avoid an infinite loop',\n          );\n          didWarnUncachedGetSnapshot = true;\n        }\n      }\n    }\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    //\n    // We won't do this if we're hydrating server-rendered content, because if\n    // the content is stale, it's already visible anyway. Instead we'll patch\n    // it up in a passive effect.\n    const root: FiberRoot | null = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  hook.memoizedState = nextSnapshot;\n  const inst: StoreInstance<T> = {\n    value: nextSnapshot,\n    getSnapshot,\n  };\n  hook.queue = inst;\n\n  // Schedule an effect to subscribe to the store.\n  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\n\n  // Schedule an effect to update the mutable instance fields. We will update\n  // this whenever subscribe, getSnapshot, or value changes. Because there's no\n  // clean-up function, and we track the deps correctly, we can call pushEffect\n  // directly, without storing any additional state. For the same reason, we\n  // don't need to set a static flag, either.\n  // TODO: We can move this to the passive phase once we add a pre-commit\n  // consistency check. See the next comment.\n  fiber.flags |= PassiveEffect;\n  pushEffect(\n    HookHasEffect | HookPassive,\n    updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n    undefined,\n    null,\n  );\n\n  return nextSnapshot;\n}\n\nfunction updateSyncExternalStore<T>(\n  subscribe: (() => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T,\n): T {\n  const fiber = currentlyRenderingFiber;\n  const hook = updateWorkInProgressHook();\n  // Read the current snapshot from the store on every render. This breaks the\n  // normal rules of React, and only works because store updates are\n  // always synchronous.\n  const nextSnapshot = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedSnapshot = getSnapshot();\n      if (!is(nextSnapshot, cachedSnapshot)) {\n        console.error(\n          'The result of getSnapshot should be cached to avoid an infinite loop',\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n  const prevSnapshot = hook.memoizedState;\n  const snapshotChanged = !is(prevSnapshot, nextSnapshot);\n  if (snapshotChanged) {\n    hook.memoizedState = nextSnapshot;\n    markWorkInProgressReceivedUpdate();\n  }\n  const inst = hook.queue;\n\n  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n    subscribe,\n  ]);\n\n  // Whenever getSnapshot or subscribe changes, we need to check in the\n  // commit phase if there was an interleaved mutation. In concurrent mode\n  // this can happen all the time, but even in synchronous mode, an earlier\n  // effect may have mutated the store.\n  if (\n    inst.getSnapshot !== getSnapshot ||\n    snapshotChanged ||\n    // Check if the susbcribe function changed. We can save some memory by\n    // checking whether we scheduled a subscription effect above.\n    (workInProgressHook !== null &&\n      workInProgressHook.memoizedState.tag & HookHasEffect)\n  ) {\n    fiber.flags |= PassiveEffect;\n    pushEffect(\n      HookHasEffect | HookPassive,\n      updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n      undefined,\n      null,\n    );\n\n    // Unless we're rendering a blocking lane, schedule a consistency check.\n    // Right before committing, we will walk the tree and check if any of the\n    // stores were mutated.\n    const root: FiberRoot | null = getWorkInProgressRoot();\n\n    if (root === null) {\n      throw new Error(\n        'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n      );\n    }\n\n    if (!includesBlockingLane(root, renderLanes)) {\n      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n    }\n  }\n\n  return nextSnapshot;\n}\n\nfunction pushStoreConsistencyCheck<T>(\n  fiber: Fiber,\n  getSnapshot: () => T,\n  renderedSnapshot: T,\n) {\n  fiber.flags |= StoreConsistency;\n  const check: StoreConsistencyCheck<T> = {\n    getSnapshot,\n    value: renderedSnapshot,\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.stores = [check];\n  } else {\n    const stores = componentUpdateQueue.stores;\n    if (stores === null) {\n      componentUpdateQueue.stores = [check];\n    } else {\n      stores.push(check);\n    }\n  }\n}\n\nfunction updateStoreInstance<T>(\n  fiber: Fiber,\n  inst: StoreInstance<T>,\n  nextSnapshot: T,\n  getSnapshot: () => T,\n) {\n  // These are updated in the passive phase\n  inst.value = nextSnapshot;\n  inst.getSnapshot = getSnapshot;\n\n  // Something may have been mutated in between render and commit. This could\n  // have been in an event that fired before the passive effects, or it could\n  // have been in a layout effect. In that case, we would have used the old\n  // snapsho and getSnapshot values to bail out. We need to check one more time.\n  if (checkIfSnapshotChanged(inst)) {\n    // Force a re-render.\n    forceStoreRerender(fiber);\n  }\n}\n\nfunction subscribeToStore(fiber, inst, subscribe) {\n  const handleStoreChange = () => {\n    // The store changed. Check if the snapshot changed since the last time we\n    // read from the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceStoreRerender(fiber);\n    }\n  };\n  // Subscribe to the store and return a clean-up function.\n  return subscribe(handleStoreChange);\n}\n\nfunction checkIfSnapshotChanged(inst) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n\nfunction forceStoreRerender(fiber) {\n  const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n  }\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue: UpdateQueue<S, BasicStateAction<S>> = {\n    pending: null,\n    interleaved: null,\n    lanes: NoLanes,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  };\n  hook.queue = queue;\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchSetState.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nlet stackContainsErrorMessage: boolean | null = null;\n\nfunction getCallerStackFrame(): string {\n  // eslint-disable-next-line react-internal/prod-error-codes\n  const stackFrames = new Error('Error message').stack.split('\\n');\n\n  // Some browsers (e.g. Chrome) include the error message in the stack\n  // but others (e.g. Firefox) do not.\n  if (stackContainsErrorMessage === null) {\n    stackContainsErrorMessage = stackFrames[0].includes('Error message');\n  }\n\n  return stackContainsErrorMessage\n    ? stackFrames.slice(3, 4).join('\\n')\n    : stackFrames.slice(2, 3).join('\\n');\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  if (enableUseRefAccessWarning) {\n    if (__DEV__) {\n      // Support lazy initialization pattern shown in docs.\n      // We need to store the caller stack frame so that we don't warn on subsequent renders.\n      let hasBeenInitialized = initialValue != null;\n      let lazyInitGetterStack = null;\n      let didCheckForLazyInit = false;\n\n      // Only warn once per component+hook.\n      let didWarnAboutRead = false;\n      let didWarnAboutWrite = false;\n\n      let current = initialValue;\n      const ref = {\n        get current() {\n          if (!hasBeenInitialized) {\n            didCheckForLazyInit = true;\n            lazyInitGetterStack = getCallerStackFrame();\n          } else if (currentlyRenderingFiber !== null && !didWarnAboutRead) {\n            if (\n              lazyInitGetterStack === null ||\n              lazyInitGetterStack !== getCallerStackFrame()\n            ) {\n              didWarnAboutRead = true;\n              console.warn(\n                '%s: Unsafe read of a mutable value during render.\\n\\n' +\n                  'Reading from a ref during render is only safe if:\\n' +\n                  '1. The ref value has not been updated, or\\n' +\n                  '2. The ref holds a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n          return current;\n        },\n        set current(value) {\n          if (currentlyRenderingFiber !== null && !didWarnAboutWrite) {\n            if (hasBeenInitialized || !didCheckForLazyInit) {\n              didWarnAboutWrite = true;\n              console.warn(\n                '%s: Unsafe write of a mutable value during render.\\n\\n' +\n                  'Writing to a ref during render is only safe if the ref holds ' +\n                  'a lazily-initialized value that is only set once.\\n',\n                getComponentNameFromFiber(currentlyRenderingFiber) || 'Unknown',\n              );\n            }\n          }\n\n          hasBeenInitialized = true;\n          current = value;\n        },\n      };\n      Object.seal(ref);\n      hook.memoizedState = ref;\n      return ref;\n    } else {\n      const ref = {current: initialValue};\n      hook.memoizedState = ref;\n      return ref;\n    }\n  } else {\n    const ref = {current: initialValue};\n    hook.memoizedState = ref;\n    return ref;\n  }\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    return mountEffectImpl(\n      MountPassiveDevEffect | PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  } else {\n    return mountEffectImpl(\n      PassiveEffect | PassiveStaticEffect,\n      HookPassive,\n      create,\n      deps,\n    );\n  }\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(PassiveEffect, HookPassive, create, deps);\n}\n\nfunction mountInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return mountEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction updateInsertionEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookInsertion, create, deps);\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(fiberFlags, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  let fiberFlags: Flags = UpdateEffect;\n  if (enableSuspenseLayoutEffectSemantics) {\n    fiberFlags |= LayoutStaticEffect;\n  }\n  if (\n    __DEV__ &&\n    enableStrictEffects &&\n    (currentlyRenderingFiber.mode & StrictEffectsMode) !== NoMode\n  ) {\n    fiberFlags |= MountLayoutDevEffect;\n  }\n  return mountEffectImpl(\n    fiberFlags,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = value;\n  return value;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const hook = updateWorkInProgressHook();\n  const resolvedCurrentHook: Hook = (currentHook: any);\n  const prevValue: T = resolvedCurrentHook.memoizedState;\n  return updateDeferredValueImpl(hook, prevValue, value);\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const hook = updateWorkInProgressHook();\n  if (currentHook === null) {\n    // This is a rerender during a mount.\n    hook.memoizedState = value;\n    return value;\n  } else {\n    // This is a rerender during an update.\n    const prevValue: T = currentHook.memoizedState;\n    return updateDeferredValueImpl(hook, prevValue, value);\n  }\n}\n\nfunction updateDeferredValueImpl<T>(hook: Hook, prevValue: T, value: T): T {\n  const shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n  if (shouldDeferValue) {\n    // This is an urgent update. If the value has changed, keep using the\n    // previous value and spawn a deferred render to update it later.\n\n    if (!is(value, prevValue)) {\n      // Schedule a deferred render\n      const deferredLane = claimNextTransitionLane();\n      currentlyRenderingFiber.lanes = mergeLanes(\n        currentlyRenderingFiber.lanes,\n        deferredLane,\n      );\n      markSkippedUpdateLanes(deferredLane);\n\n      // Set this to true to indicate that the rendered value is inconsistent\n      // from the latest value. The name \"baseState\" doesn't really match how we\n      // use it because we're reusing a state hook field instead of creating a\n      // new one.\n      hook.baseState = true;\n    }\n\n    // Reuse the previous value\n    return prevValue;\n  } else {\n    // This is not an urgent update, so we can use the latest value regardless\n    // of what it is. No need to defer it.\n\n    // However, if we're currently inside a spawned render, then we need to mark\n    // this as an update to prevent the fiber from bailing out.\n    //\n    // `baseState` is true when the current value is different from the rendered\n    // value. The name doesn't really match how we use it because we're reusing\n    // a state hook field instead of creating a new one.\n    if (hook.baseState) {\n      // Flip this back to false.\n      hook.baseState = false;\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = value;\n    return value;\n  }\n}\n\nfunction startTransition(setPending, callback, options) {\n  const previousPriority = getCurrentUpdatePriority();\n  setCurrentUpdatePriority(\n    higherEventPriority(previousPriority, ContinuousEventPriority),\n  );\n\n  setPending(true);\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  ReactCurrentBatchConfig.transition = {};\n  const currentTransition = ReactCurrentBatchConfig.transition;\n\n  if (enableTransitionTracing) {\n    if (options !== undefined && options.name !== undefined) {\n      ReactCurrentBatchConfig.transition.name = options.name;\n      ReactCurrentBatchConfig.transition.startTime = now();\n    }\n  }\n\n  if (__DEV__) {\n    ReactCurrentBatchConfig.transition._updatedFibers = new Set();\n  }\n\n  try {\n    setPending(false);\n    callback();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    if (__DEV__) {\n      if (prevTransition === null && currentTransition._updatedFibers) {\n        const updatedFibersCount = currentTransition._updatedFibers.size;\n        if (updatedFibersCount > 10) {\n          console.warn(\n            'Detected a large number of updates inside startTransition. ' +\n              'If this is due to a subscription please re-write it to use React provided hooks. ' +\n              'Otherwise concurrent mode guarantees are off the table.',\n          );\n        }\n        currentTransition._updatedFibers.clear();\n      }\n    }\n  }\n}\n\nfunction mountTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method never changes.\n  const start = startTransition.bind(null, setPending);\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = start;\n  return [isPending, start];\n}\n\nfunction updateTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending] = updateState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nfunction rerenderTransition(): [\n  boolean,\n  (callback: () => void, options?: StartTransitionOptions) => void,\n] {\n  const [isPending] = rerenderState(false);\n  const hook = updateWorkInProgressHook();\n  const start = hook.memoizedState;\n  return [isPending, start];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction mountId(): string {\n  const hook = mountWorkInProgressHook();\n\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  // TODO: In Fizz, id generation is specific to each server config. Maybe we\n  // should do this in Fiber, too? Deferring this decision for now because\n  // there's no other place to store the prefix except for an internal field on\n  // the public createRoot object, which the fiber tree does not currently have\n  // a reference to.\n  const identifierPrefix = root.identifierPrefix;\n\n  let id;\n  if (getIsHydrating()) {\n    const treeId = getTreeId();\n\n    // Use a captial R prefix for server-generated ids.\n    id = ':' + identifierPrefix + 'R' + treeId;\n\n    // Unless this is the first id at this level, append a number at the end\n    // that represents the position of this useId hook among all the useId\n    // hooks for this fiber.\n    const localId = localIdCounter++;\n    if (localId > 0) {\n      id += 'H' + localId.toString(32);\n    }\n\n    id += ':';\n  } else {\n    // Use a lowercase r prefix for client-generated ids.\n    const globalClientId = globalClientIdCounter++;\n    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';\n  }\n\n  hook.memoizedState = id;\n  return id;\n}\n\nfunction updateId(): string {\n  const hook = updateWorkInProgressHook();\n  const id: string = hook.memoizedState;\n  return id;\n}\n\nfunction mountRefresh() {\n  const hook = mountWorkInProgressHook();\n  const refresh = (hook.memoizedState = refreshCache.bind(\n    null,\n    currentlyRenderingFiber,\n  ));\n  return refresh;\n}\n\nfunction updateRefresh() {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction refreshCache<T>(fiber: Fiber, seedKey: ?() => T, seedValue: T) {\n  if (!enableCache) {\n    return;\n  }\n  // TODO: Does Cache work in legacy mode? Should decide and write a test.\n  // TODO: Consider warning if the refresh is at discrete priority, or if we\n  // otherwise suspect that it wasn't batched properly.\n  let provider = fiber.return;\n  while (provider !== null) {\n    switch (provider.tag) {\n      case CacheComponent:\n      case HostRoot: {\n        // Schedule an update on the cache boundary to trigger a refresh.\n        const lane = requestUpdateLane(provider);\n        const eventTime = requestEventTime();\n        const refreshUpdate = createLegacyQueueUpdate(eventTime, lane);\n        const root = enqueueLegacyQueueUpdate(provider, refreshUpdate, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, provider, lane, eventTime);\n          entangleLegacyQueueTransitions(root, provider, lane);\n        }\n\n        // TODO: If a refresh never commits, the new cache created here must be\n        // released. A simple case is start refreshing a cache boundary, but then\n        // unmount that boundary before the refresh completes.\n        const seededCache = createCache();\n        if (seedKey !== null && seedKey !== undefined && root !== null) {\n          // Seed the cache with the value passed by the caller. This could be\n          // from a server mutation, or it could be a streaming response.\n          seededCache.data.set(seedKey, seedValue);\n        }\n\n        const payload = {\n          cache: seededCache,\n        };\n        refreshUpdate.payload = payload;\n        return;\n      }\n    }\n    provider = provider.return;\n  }\n  // TODO: Warn if unmounted?\n}\n\nfunction dispatchReducerAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      const eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction dispatchSetState<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    hasEagerState: false,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  if (isRenderPhaseUpdate(fiber)) {\n    enqueueRenderPhaseUpdate(queue, update);\n  } else {\n    const alternate = fiber.alternate;\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.hasEagerState = true;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            // TODO: Do we still need to entangle transitions in this case?\n            enqueueConcurrentHookUpdateAndEagerlyBailout(\n              fiber,\n              queue,\n              update,\n              lane,\n            );\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n\n    const root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n    if (root !== null) {\n      const eventTime = requestEventTime();\n      scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n      entangleTransitionUpdate(root, queue, lane);\n    }\n  }\n\n  markUpdateInDevTools(fiber, lane, action);\n}\n\nfunction isRenderPhaseUpdate(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  return (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  );\n}\n\nfunction enqueueRenderPhaseUpdate<S, A>(\n  queue: UpdateQueue<S, A>,\n  update: Update<S, A>,\n) {\n  // This is a render phase update. Stash it in a lazily-created map of\n  // queue -> linked list of updates. After this render pass, we'll restart\n  // and apply the stashed updates on top of the work-in-progress hook.\n  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  const pending = queue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  queue.pending = update;\n}\n\n// TODO: Move to ReactFiberConcurrentUpdates?\nfunction entangleTransitionUpdate<S, A>(\n  root: FiberRoot,\n  queue: UpdateQueue<S, A>,\n  lane: Lane,\n) {\n  if (isTransitionLane(lane)) {\n    let queueLanes = queue.lanes;\n\n    // If any entangled lanes are no longer pending on the root, then they\n    // must have finished. We can remove them from the shared queue, which\n    // represents a superset of the actually pending lanes. In some cases we\n    // may entangle more than we need to, but that's OK. In fact it's worse if\n    // we *don't* entangle when we should.\n    queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n\n    // Entangle the new transition lane with the other transition lanes.\n    const newQueueLanes = mergeLanes(queueLanes, lane);\n    queue.lanes = newQueueLanes;\n    // Even if queue.lanes already include lane, we don't know for certain if\n    // the lane finished since the last time we entangled it. So we need to\n    // entangle it again, just to be sure.\n    markRootEntangled(root, newQueueLanes);\n  }\n}\n\nfunction markUpdateInDevTools(fiber, lane, action) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentNameFromFiber(fiber) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nfunction getCacheSignal(): AbortSignal {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  return cache.controller.signal;\n}\n\nfunction getCacheForType<T>(resourceType: () => T): T {\n  if (!enableCache) {\n    throw new Error('Not implemented.');\n  }\n  const cache: Cache = readContext(CacheContext);\n  let cacheForType: T | void = (cache.data.get(resourceType): any);\n  if (cacheForType === undefined) {\n    cacheForType = resourceType();\n    cache.data.set(resourceType, cacheForType);\n  }\n  return cacheForType;\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useInsertionEffect: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useSyncExternalStore: throwInvalidHookError,\n  useId: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (ContextOnlyDispatcher: Dispatcher).getCacheSignal = getCacheSignal;\n  (ContextOnlyDispatcher: Dispatcher).getCacheForType = getCacheForType;\n  (ContextOnlyDispatcher: Dispatcher).useCacheRefresh = throwInvalidHookError;\n}\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useInsertionEffect: mountInsertionEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useSyncExternalStore: mountSyncExternalStore,\n  useId: mountId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnMount: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnMount: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnMount: Dispatcher).useCacheRefresh = mountRefresh;\n}\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnUpdate: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnUpdate: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useInsertionEffect: updateInsertionEffect,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useSyncExternalStore: updateSyncExternalStore,\n  useId: updateId,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\nif (enableCache) {\n  (HooksDispatcherOnRerender: Dispatcher).getCacheSignal = getCacheSignal;\n  (HooksDispatcherOnRerender: Dispatcher).getCacheForType = getCacheForType;\n  (HooksDispatcherOnRerender: Dispatcher).useCacheRefresh = updateRefresh;\n}\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      mountHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (HooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      mountHookTypesDev();\n      return mountRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(context: ReactContext<T>): T {\n      warnInvalidContextAccess();\n      return readContext(context);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(context: ReactContext<T>): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useInsertionEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useInsertionEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateInsertionEffect(create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [boolean, (() => void) => void] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useSyncExternalStore<T>(\n      subscribe: (() => void) => () => void,\n      getSnapshot: () => T,\n      getServerSnapshot?: () => T,\n    ): T {\n      currentHookNameInDev = 'useSyncExternalStore';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n    },\n    useId(): string {\n      currentHookNameInDev = 'useId';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateId();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n  if (enableCache) {\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheSignal = getCacheSignal;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).getCacheForType = getCacheForType;\n    (InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher).useCacheRefresh = function useCacheRefresh() {\n      currentHookNameInDev = 'useCacheRefresh';\n      updateHookTypesDev();\n      return updateRefresh();\n    };\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {HostRoot, Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  isCurrentUpdateNested(): boolean,\n  markNestedUpdateScheduled(): void,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  syncNestedUpdateFlag(): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\n/**\n * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n *\n * The overall sequence is:\n *   1. render\n *   2. commit (and call `onRender`, `onCommit`)\n *   3. check for nested updates\n *   4. flush passive effects (and call `onPostCommit`)\n *\n * Nested updates are identified in step 3 above,\n * but step 4 still applies to the work that was just committed.\n * We use two flags to track nested updates then:\n * one tracks whether the upcoming update is a nested update,\n * and the other tracks whether the current update was a nested update.\n * The first value gets synced to the second at the start of the render phase.\n */\nlet currentUpdateIsNested: boolean = false;\nlet nestedUpdateScheduled: boolean = false;\n\nfunction isCurrentUpdateNested(): boolean {\n  return currentUpdateIsNested;\n}\n\nfunction markNestedUpdateScheduled(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    nestedUpdateScheduled = true;\n  }\n}\n\nfunction resetNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = false;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction syncNestedUpdateFlag(): void {\n  if (enableProfilerNestedUpdatePhase) {\n    currentUpdateIsNested = nestedUpdateScheduled;\n    nestedUpdateScheduled = false;\n  }\n}\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          root.effectDuration += elapsedTime;\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          parentStateNode.effectDuration += elapsedTime;\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor\n    // Or the root (for the DevTools Profiler to read)\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      switch (parentFiber.tag) {\n        case HostRoot:\n          const root = parentFiber.stateNode;\n          if (root !== null) {\n            root.passiveEffectDuration += elapsedTime;\n          }\n          return;\n        case Profiler:\n          const parentStateNode = parentFiber.stateNode;\n          if (parentStateNode !== null) {\n            // Detached fibers have their state node cleared out.\n            // In this case, the return pointer is also cleared out,\n            // so we won't be able to report the time spent in this Profiler's subtree.\n            parentStateNode.passiveEffectDuration += elapsedTime;\n          }\n          return;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  isCurrentUpdateNested,\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  resetNestedUpdateFlag,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n  digest: string | null,\n|};\n\nexport function createCapturedValueAtFiber<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n    digest: null,\n  };\n}\n\nexport function createCapturedValue<T>(\n  value: T,\n  digest: ?string,\n  stack: ?string,\n): CapturedValue<T> {\n  return {\n    value,\n    source: null,\n    stack: stack != null ? stack : null,\n    digest: digest != null ? digest : null,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from '../ReactFiber.old';\nimport type {CapturedValue} from '../ReactCapturedValue';\n\nimport {ClassComponent} from '../ReactWorkTags';\n\n// Provided by www\nconst ReactFiberErrorDialogWWW = require('ReactFiberErrorDialog');\n\nif (typeof ReactFiberErrorDialogWWW.showErrorDialog !== 'function') {\n  throw new Error(\n    'Expected ReactFiberErrorDialog.showErrorDialog to be a function.',\n  );\n}\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  const capturedError = {\n    componentStack: errorInfo.stack !== null ? errorInfo.stack : '',\n    error: errorInfo.value,\n    errorBoundary:\n      boundary !== null && boundary.tag === ClassComponent\n        ? boundary.stateNode\n        : null,\n  };\n  return ReactFiberErrorDialogWWW.showErrorDialog(capturedError);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {HostRoot} from 'react-reconciler/src/ReactWorkTags';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentNameFromFiber(source) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      if (boundary.tag === HostRoot) {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      } else {\n        const errorBoundaryName =\n          getComponentNameFromFiber(boundary) || 'Anonymous';\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane.old';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactFiberClassUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\n\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n  IncompleteClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n  ForceClientRender,\n} from './ReactFiberFlags';\nimport {shouldCaptureSuspense} from './ReactFiberSuspenseComponent.old';\nimport {NoMode, ConcurrentMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableLazyContextPropagation,\n  enableUpdaterTracking,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValueAtFiber} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  renderDidSuspendDelayIfPossible,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n  restorePendingUpdaters,\n} from './ReactFiberWorkLoop.old';\nimport {propagateParentContextChangesToDeferredTree} from './ReactFiberNewContext.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n  includesSyncLane,\n} from './ReactFiberLane.old';\nimport {\n  getIsHydrating,\n  markDidThrowWhileHydratingDEV,\n  queueHydrationError,\n} from './ReactFiberHydrationContext.old';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      return getDerivedStateFromError(error);\n    };\n    update.callback = () => {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      logCapturedError(fiber, errorInfo);\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentNameFromFiber(fiber) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a ping listener\n  //\n  // The data might resolve before we have a chance to commit the fallback. Or,\n  // in the case of a refresh, we'll never commit a fallback. So we need to\n  // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n  // try rendering the tree again.\n  //\n  // Only attach a listener if one does not already exist for the lanes\n  // we're currently rendering (which acts like a \"thread ID\" here).\n  //\n  // We only need to do this in concurrent mode. Legacy Suspense always\n  // commits fallbacks synchronously, so there are no pings.\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        // If we have pending work still, restore the original updaters\n        restorePendingUpdaters(root, lanes);\n      }\n    }\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction attachRetryListener(\n  suspenseBoundary: Fiber,\n  root: FiberRoot,\n  wakeable: Wakeable,\n  lanes: Lanes,\n) {\n  // Retry listener\n  //\n  // If the fallback does commit, we need to attach a different type of\n  // listener. This one schedules an update on the Suspense boundary to turn\n  // the fallback state off.\n  //\n  // Stash the wakeable on the boundary fiber so we can access it in the\n  // commit phase.\n  //\n  // When the wakeable resolves, we'll attempt to render the boundary\n  // again (\"retry\").\n  const wakeables: Set<Wakeable> | null = (suspenseBoundary.updateQueue: any);\n  if (wakeables === null) {\n    const updateQueue = (new Set(): any);\n    updateQueue.add(wakeable);\n    suspenseBoundary.updateQueue = updateQueue;\n  } else {\n    wakeables.add(wakeable);\n  }\n}\n\nfunction resetSuspendedComponent(sourceFiber: Fiber, rootRenderLanes: Lanes) {\n  if (enableLazyContextPropagation) {\n    const currentSourceFiber = sourceFiber.alternate;\n    if (currentSourceFiber !== null) {\n      // Since we never visited the children of the suspended component, we\n      // need to propagate the context change now, to ensure that we visit\n      // them during the retry.\n      //\n      // We don't have to do this for errors because we retry errors without\n      // committing in between. So this is specific to Suspense.\n      propagateParentContextChangesToDeferredTree(\n        currentSourceFiber,\n        sourceFiber,\n        rootRenderLanes,\n      );\n    }\n  }\n\n  // Reset the memoizedState to what it was before we attempted to render it.\n  // A legacy mode Suspense quirk, only relevant to hook components.\n  const tag = sourceFiber.tag;\n  if (\n    (sourceFiber.mode & ConcurrentMode) === NoMode &&\n    (tag === FunctionComponent ||\n      tag === ForwardRef ||\n      tag === SimpleMemoComponent)\n  ) {\n    const currentSource = sourceFiber.alternate;\n    if (currentSource) {\n      sourceFiber.updateQueue = currentSource.updateQueue;\n      sourceFiber.memoizedState = currentSource.memoizedState;\n      sourceFiber.lanes = currentSource.lanes;\n    } else {\n      sourceFiber.updateQueue = null;\n      sourceFiber.memoizedState = null;\n    }\n  }\n}\n\nfunction getNearestSuspenseBoundaryToCapture(returnFiber: Fiber) {\n  let node = returnFiber;\n  const hasInvisibleParentBoundary = hasSuspenseContext(\n    suspenseStackCursor.current,\n    (InvisibleParentSuspenseContext: SuspenseContext),\n  );\n  do {\n    if (\n      node.tag === SuspenseComponent &&\n      shouldCaptureSuspense(node, hasInvisibleParentBoundary)\n    ) {\n      return node;\n    }\n    // This boundary already captured during this render. Continue to the next\n    // boundary.\n    node = node.return;\n  } while (node !== null);\n  return null;\n}\n\nfunction markSuspenseBoundaryShouldCapture(\n  suspenseBoundary: Fiber,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  root: FiberRoot,\n  rootRenderLanes: Lanes,\n): Fiber | null {\n  // This marks a Suspense boundary so that when we're unwinding the stack,\n  // it captures the suspended \"exception\" and does a second (fallback) pass.\n  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n    // Legacy Mode Suspense\n    //\n    // If the boundary is in legacy mode, we should *not*\n    // suspend the commit. Pretend as if the suspended component rendered\n    // null and keep rendering. When the Suspense boundary completes,\n    // we'll do a second pass to render the fallback.\n    if (suspenseBoundary === returnFiber) {\n      // Special case where we suspended while reconciling the children of\n      // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n      // when a React.lazy component is a direct child of a\n      // Suspense boundary.\n      //\n      // Suspense boundaries are implemented as multiple fibers, but they\n      // are a single conceptual unit. The legacy mode behavior where we\n      // pretend the suspended fiber committed as `null` won't work,\n      // because in this case the \"suspended\" fiber is the inner\n      // Offscreen wrapper.\n      //\n      // Because the contents of the boundary haven't started rendering\n      // yet (i.e. nothing in the tree has partially rendered) we can\n      // switch to the regular, concurrent mode behavior: mark the\n      // boundary with ShouldCapture and enter the unwind phase.\n      suspenseBoundary.flags |= ShouldCapture;\n    } else {\n      suspenseBoundary.flags |= DidCapture;\n      sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n      // We're going to commit this fiber even though it didn't complete.\n      // But we shouldn't call any lifecycle methods or callbacks. Remove\n      // all lifecycle effect tags.\n      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n      if (sourceFiber.tag === ClassComponent) {\n        const currentSourceFiber = sourceFiber.alternate;\n        if (currentSourceFiber === null) {\n          // This is a new mount. Change the tag so it's not mistaken for a\n          // completed class component. For example, we should not call\n          // componentWillUnmount if it is deleted.\n          sourceFiber.tag = IncompleteClassComponent;\n        } else {\n          // When we try rendering again, we should not reuse the current fiber,\n          // since it's known to be in an inconsistent state. Use a force update to\n          // prevent a bail out.\n          const update = createUpdate(NoTimestamp, SyncLane);\n          update.tag = ForceUpdate;\n          enqueueUpdate(sourceFiber, update, SyncLane);\n        }\n      }\n\n      // The source fiber did not complete. Mark it with Sync priority to\n      // indicate that it still has pending work.\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n    }\n    return suspenseBoundary;\n  }\n  // Confirmed that the boundary is in a concurrent mode tree. Continue\n  // with the normal suspend path.\n  //\n  // After this we'll use a set of heuristics to determine whether this\n  // render pass will run to completion or restart or \"suspend\" the commit.\n  // The actual logic for this is spread out in different places.\n  //\n  // This first principle is that if we're going to suspend when we complete\n  // a root, then we should also restart if we get an update or ping that\n  // might unsuspend it, and vice versa. The only reason to suspend is\n  // because you think you might want to restart before committing. However,\n  // it doesn't make sense to restart only while in the period we're suspended.\n  //\n  // Restarting too aggressively is also not good because it starves out any\n  // intermediate loading state. So we use heuristics to determine when.\n\n  // Suspense Heuristics\n  //\n  // If nothing threw a Promise or all the same fallbacks are already showing,\n  // then don't suspend/restart.\n  //\n  // If this is an initial render of a new tree of Suspense boundaries and\n  // those trigger a fallback, then don't suspend/restart. We want to ensure\n  // that we can show the initial loading state as quickly as possible.\n  //\n  // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n  // a fallback, then we should always suspend/restart. Transitions apply\n  // to this case. If none is defined, JND is used instead.\n  //\n  // If we're already showing a fallback and it gets \"retried\", allowing us to show\n  // another level, but there's still an inner boundary that would show a fallback,\n  // then we suspend/restart for 500ms since the last time we showed a fallback\n  // anywhere in the tree. This effectively throttles progressive loading into a\n  // consistent train of commits. This also gives us an opportunity to restart to\n  // get to the completed state slightly earlier.\n  //\n  // If there's ambiguity due to batching it's resolved in preference of:\n  // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n  //\n  // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n  // ensure that new initial loading states can commit as soon as possible.\n  suspenseBoundary.flags |= ShouldCapture;\n  // TODO: I think we can remove this, since we now use `DidCapture` in\n  // the begin phase to prevent an early bailout.\n  suspenseBoundary.lanes = rootRenderLanes;\n  return suspenseBoundary;\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      // If we have pending work still, restore the original updaters\n      restorePendingUpdaters(root, rootRenderLanes);\n    }\n  }\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    // This is a wakeable. The component suspended.\n    const wakeable: Wakeable = (value: any);\n    resetSuspendedComponent(sourceFiber, rootRenderLanes);\n\n    if (__DEV__) {\n      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n        markDidThrowWhileHydratingDEV();\n      }\n    }\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentNameFromFiber(sourceFiber) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    const suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n    if (suspenseBoundary !== null) {\n      suspenseBoundary.flags &= ~ForceClientRender;\n      markSuspenseBoundaryShouldCapture(\n        suspenseBoundary,\n        returnFiber,\n        sourceFiber,\n        root,\n        rootRenderLanes,\n      );\n      // We only attach ping listeners in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n      if (suspenseBoundary.mode & ConcurrentMode) {\n        attachPingListener(root, wakeable, rootRenderLanes);\n      }\n      attachRetryListener(suspenseBoundary, root, wakeable, rootRenderLanes);\n      return;\n    } else {\n      // No boundary was found. Unless this is a sync update, this is OK.\n      // We can suspend and wait for more data to arrive.\n\n      if (!includesSyncLane(rootRenderLanes)) {\n        // This is not a sync update. Suspend. Since we're not activating a\n        // Suspense boundary, this will unwind all the way to the root without\n        // performing a second pass to render a fallback. (This is arguably how\n        // refresh transitions should work, too, since we're not going to commit\n        // the fallbacks anyway.)\n        //\n        // This case also applies to initial hydration.\n        attachPingListener(root, wakeable, rootRenderLanes);\n        renderDidSuspendDelayIfPossible();\n        return;\n      }\n\n      // This is a sync/discrete update. We treat this case like an error\n      // because discrete renders are expected to produce a complete tree\n      // synchronously to maintain consistency with external state.\n      const uncaughtSuspenseError = new Error(\n        'A component suspended while responding to synchronous input. This ' +\n          'will cause the UI to be replaced with a loading indicator. To ' +\n          'fix, updates that suspend should be wrapped ' +\n          'with startTransition.',\n      );\n\n      // If we're outside a transition, fall through to the regular error path.\n      // The error will be caught by the nearest suspense boundary.\n      value = uncaughtSuspenseError;\n    }\n  } else {\n    // This is a regular error, not a Suspense wakeable.\n    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {\n      markDidThrowWhileHydratingDEV();\n      const suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);\n      // If the error was thrown during hydration, we may be able to recover by\n      // discarding the dehydrated content and switching to a client render.\n      // Instead of surfacing the error, find the nearest Suspense boundary\n      // and render it again without hydration.\n      if (suspenseBoundary !== null) {\n        if ((suspenseBoundary.flags & ShouldCapture) === NoFlags) {\n          // Set a flag to indicate that we should try rendering the normal\n          // children again, not the fallback.\n          suspenseBoundary.flags |= ForceClientRender;\n        }\n        markSuspenseBoundaryShouldCapture(\n          suspenseBoundary,\n          returnFiber,\n          sourceFiber,\n          root,\n          rootRenderLanes,\n        );\n\n        // Even though the user may not be affected by this error, we should\n        // still log it so it can be fixed.\n        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));\n        return;\n      }\n    } else {\n      // Otherwise, fall through to the error path.\n    }\n  }\n\n  value = createCapturedValueAtFiber(value, sourceFiber);\n  renderDidError(value);\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Cache, SpawnedCachePool} from './ReactFiberCacheComponent.old';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\nimport {enableCache, enableTransitionTracing} from 'shared/ReactFeatureFlags';\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {\n  getWorkInProgressRoot,\n  getWorkInProgressTransitions,\n} from './ReactFiberWorkLoop.old';\nimport {\n  createCache,\n  retainCache,\n  CacheContext,\n} from './ReactFiberCacheComponent.old';\n\n// When retrying a Suspense/Offscreen boundary, we restore the cache that was\n// used during the previous render by placing it here, on the stack.\nconst resumedCache: StackCursor<Cache | null> = createCursor(null);\n\n// During the render/synchronous commit phase, we don't actually process the\n// transitions. Therefore, we want to lazily combine transitions. Instead of\n// comparing the arrays of transitions when we combine them and storing them\n// and filtering out the duplicates, we will instead store the unprocessed transitions\n// in an array and actually filter them in the passive phase.\nconst transitionStack: StackCursor<Array<Transition> | null> = createCursor(\n  null,\n);\n\nfunction peekCacheFromPool(): Cache | null {\n  if (!enableCache) {\n    return (null: any);\n  }\n\n  // Check if the cache pool already has a cache we can use.\n\n  // If we're rendering inside a Suspense boundary that is currently hidden,\n  // we should use the same cache that we used during the previous render, if\n  // one exists.\n  const cacheResumedFromPreviousRender = resumedCache.current;\n  if (cacheResumedFromPreviousRender !== null) {\n    return cacheResumedFromPreviousRender;\n  }\n\n  // Otherwise, check the root's cache pool.\n  const root = (getWorkInProgressRoot(): any);\n  const cacheFromRootCachePool = root.pooledCache;\n\n  return cacheFromRootCachePool;\n}\n\nexport function requestCacheFromPool(renderLanes: Lanes): Cache {\n  // Similar to previous function, except if there's not already a cache in the\n  // pool, we allocate a new one.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool !== null) {\n    return cacheFromPool;\n  }\n\n  // Create a fresh cache and add it to the root cache pool. A cache can have\n  // multiple owners:\n  // - A cache pool that lives on the FiberRoot. This is where all fresh caches\n  //   are originally created (TODO: except during refreshes, until we implement\n  //   this correctly). The root takes ownership immediately when the cache is\n  //   created. Conceptually, root.pooledCache is an Option<Arc<Cache>> (owned),\n  //   and the return value of this function is a &Arc<Cache> (borrowed).\n  // - One of several fiber types: host root, cache boundary, suspense\n  //   component. These retain and release in the commit phase.\n\n  const root = (getWorkInProgressRoot(): any);\n  const freshCache = createCache();\n  root.pooledCache = freshCache;\n  retainCache(freshCache);\n  if (freshCache !== null) {\n    root.pooledCacheLanes |= renderLanes;\n  }\n  return freshCache;\n}\n\nexport function pushRootTransition(\n  workInProgress: Fiber,\n  root: FiberRoot,\n  renderLanes: Lanes,\n) {\n  if (enableTransitionTracing) {\n    const rootTransitions = getWorkInProgressTransitions();\n    push(transitionStack, rootTransitions, workInProgress);\n  }\n}\n\nexport function popRootTransition(\n  workInProgress: Fiber,\n  root: FiberRoot,\n  renderLanes: Lanes,\n) {\n  if (enableTransitionTracing) {\n    pop(transitionStack, workInProgress);\n  }\n}\n\nexport function pushTransition(\n  offscreenWorkInProgress: Fiber,\n  prevCachePool: SpawnedCachePool | null,\n  newTransitions: Array<Transition> | null,\n): void {\n  if (enableCache) {\n    if (prevCachePool === null) {\n      push(resumedCache, resumedCache.current, offscreenWorkInProgress);\n    } else {\n      push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);\n    }\n  }\n\n  if (enableTransitionTracing) {\n    if (transitionStack.current === null) {\n      push(transitionStack, newTransitions, offscreenWorkInProgress);\n    } else if (newTransitions === null) {\n      push(transitionStack, transitionStack.current, offscreenWorkInProgress);\n    } else {\n      push(\n        transitionStack,\n        transitionStack.current.concat(newTransitions),\n        offscreenWorkInProgress,\n      );\n    }\n  }\n}\n\nexport function popTransition(workInProgress: Fiber, current: Fiber | null) {\n  if (current !== null) {\n    if (enableCache) {\n      pop(resumedCache, workInProgress);\n    }\n\n    if (enableTransitionTracing) {\n      pop(transitionStack, workInProgress);\n    }\n  }\n}\n\nexport function getSuspendedTransitions(): Array<Transition> | null {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  return transitionStack.current;\n}\n\nexport function getSuspendedCache(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n  // This function is called when a Suspense boundary suspends. It returns the\n  // cache that would have been used to render fresh data during this render,\n  // if there was any, so that we can resume rendering with the same cache when\n  // we receive more data.\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also save the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n\nexport function getOffscreenDeferredCache(): SpawnedCachePool | null {\n  if (!enableCache) {\n    return null;\n  }\n\n  const cacheFromPool = peekCacheFromPool();\n  if (cacheFromPool === null) {\n    return null;\n  }\n\n  return {\n    // We must also store the parent, so that when we resume we can detect\n    // a refresh.\n    parent: isPrimaryRenderer\n      ? CacheContext._currentValue\n      : CacheContext._currentValue2,\n    pool: cacheFromPool,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  ReactProviderType,\n  ReactContext,\n  ReactNodeList,\n} from 'shared/ReactTypes';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n  OffscreenQueue,\n} from './ReactFiberOffscreenComponent';\nimport type {\n  Cache,\n  CacheComponentState,\n  SpawnedCachePool,\n} from './ReactFiberCacheComponent.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {RootState} from './ReactFiberRoot.old';\nimport {\n  enableSuspenseAvoidThisFallback,\n  enableCPUSuspense,\n  enableUseMutableSource,\n} from 'shared/ReactFeatureFlags';\n\nimport checkPropTypes from 'shared/checkPropTypes';\nimport {\n  markComponentRenderStarted,\n  markComponentRenderStopped,\n  setIsStrictModeForDevtools,\n} from './ReactFiberDevToolsHook.old';\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  RefStatic,\n  ChildDeletion,\n  ForceUpdateForLegacySuspense,\n  StaticMask,\n  ShouldCapture,\n  ForceClientRender,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableCache,\n  enableLazyContextPropagation,\n  enableSuspenseLayoutEffectSemantics,\n  enableSchedulingProfiler,\n  enableTransitionTracing,\n  enableLegacyHidden,\n} from 'shared/ReactFeatureFlags';\nimport isArray from 'shared/isArray';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n  enqueueCapturedUpdate,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n  pickArbitraryLane,\n} from './ReactFiberLane.old';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictLegacyMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  getSuspenseInstanceFallbackErrorDetails,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n  isPrimaryRenderer,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {shouldError, shouldSuspend} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseContext,\n  InvisibleParentSuspenseContext,\n  ForceSuspenseFallback,\n  hasSuspenseContext,\n  setDefaultShallowSuspenseContext,\n  addSubtreeSuspenseContext,\n  setShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  lazilyPropagateParentContextChanges,\n  propagateParentContextChangesToDeferredTree,\n  checkIfContextChanged,\n  readContext,\n  prepareToReadContext,\n  scheduleContextWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {\n  renderWithHooks,\n  checkDidRenderIdHook,\n  bailoutHooks,\n} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  getIsHydrating,\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n  queueHydrationError,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n  pushRenderLanes,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\nimport {pushCacheProvider, CacheContext} from './ReactFiberCacheComponent.old';\nimport {\n  createCapturedValue,\n  createCapturedValueAtFiber,\n  type CapturedValue,\n} from './ReactCapturedValue';\nimport {createClassErrorUpdate} from './ReactFiberThrow.old';\nimport is from 'shared/objectIs';\nimport {\n  getForksAtLevel,\n  isForkedChild,\n  pushTreeId,\n  pushMaterializedTreeId,\n} from './ReactFiberTreeContext.old';\nimport {\n  requestCacheFromPool,\n  pushRootTransition,\n  getSuspendedCache,\n  pushTransition,\n  getOffscreenDeferredCache,\n  getSuspendedTransitions,\n} from './ReactFiberTransition.old';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentNameFromType(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n    current,\n    renderLanes,\n  );\n  if (!hasScheduledUpdateOrContext) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentNameFromType(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n\n      // The props are shallowly equal. Reuse the previous props object, like we\n      // would during a normal fiber bailout.\n      //\n      // We don't have strong guarantees that the props object is referentially\n      // equal during updates where we can't bail out anyway — like if the props\n      // are shallowly equal, but there's a local state or context update in the\n      // same batch.\n      //\n      // However, as a principle, we should aim to make the behavior consistent\n      // across different ways of memoizing a component. For example, React.memo\n      // has a different internal Fiber layout if you pass a normal function\n      // component (SimpleMemoComponent) versus if you pass a different type\n      // like forwardRef (MemoComponent). But this is an implementation detail.\n      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n      // affect whether the props object is reused during a bailout.\n      workInProgress.pendingProps = nextProps = prevProps;\n\n      if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumulated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    (enableLegacyHidden && nextProps.mode === 'unstable-defer-without-hiding')\n  ) {\n    // Rendering a hidden tree.\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Consider how Offscreen should work with transitions in the future\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null,\n      };\n      workInProgress.memoizedState = nextState;\n      if (enableCache) {\n        // push the cache pool even though we're going to bail out\n        // because otherwise there'd be a context mismatch\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      let spawnedCachePool: SpawnedCachePool | null = null;\n      // We're hidden, and we're not rendering at Offscreen. We will bail out\n      // and resume this tree later.\n      let nextBaseLanes;\n      if (prevState !== null) {\n        const prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n        if (enableCache) {\n          // Save the cache pool so we can resume later.\n          spawnedCachePool = getOffscreenDeferredCache();\n        }\n      } else {\n        nextBaseLanes = renderLanes;\n      }\n\n      // Schedule this fiber to re-render at offscreen priority. Then bailout.\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n      const nextState: OffscreenState = {\n        baseLanes: nextBaseLanes,\n        cachePool: spawnedCachePool,\n        transitions: null,\n      };\n      workInProgress.memoizedState = nextState;\n      workInProgress.updateQueue = null;\n      if (enableCache) {\n        // push the cache pool even though we're going to bail out\n        // because otherwise there'd be a context mismatch\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      pushRenderLanes(workInProgress, nextBaseLanes);\n\n      if (enableLazyContextPropagation && current !== null) {\n        // Since this tree will resume rendering in a separate render, we need\n        // to propagate parent contexts now so we don't lose track of which\n        // ones changed.\n        propagateParentContextChangesToDeferredTree(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n\n      return null;\n    } else {\n      // This is the second render. The surrounding visible content has already\n      // committed. Now we resume rendering the hidden tree.\n\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n        cachePool: null,\n        transitions: null,\n      };\n      workInProgress.memoizedState = nextState;\n      // Push the lanes that were skipped when we bailed out.\n      const subtreeRenderLanes =\n        prevState !== null ? prevState.baseLanes : renderLanes;\n      if (enableCache && current !== null) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        const prevCachePool = prevState !== null ? prevState.cachePool : null;\n        // TODO: Consider if and how Offscreen pre-rendering should\n        // be attributed to the transition that spawned it\n        pushTransition(workInProgress, prevCachePool, null);\n      }\n\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    // Rendering a visible tree.\n    let subtreeRenderLanes;\n    if (prevState !== null) {\n      // We're going from hidden -> visible.\n\n      subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n\n      let prevCachePool = null;\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        prevCachePool = prevState.cachePool;\n      }\n\n      pushTransition(workInProgress, prevCachePool, null);\n\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      subtreeRenderLanes = renderLanes;\n\n      if (enableCache) {\n        // If the render that spawned this one accessed the cache pool, resume\n        // using the same cache. Unless the parent changed, since that means\n        // there was a refresh.\n        if (current !== null) {\n          pushTransition(workInProgress, null, null);\n        }\n      }\n    }\n    pushRenderLanes(workInProgress, subtreeRenderLanes);\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateCacheComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableCache) {\n    return null;\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const parentCache = readContext(CacheContext);\n\n  if (current === null) {\n    // Initial mount. Request a fresh cache from the pool.\n    const freshCache = requestCacheFromPool(renderLanes);\n    const initialState: CacheComponentState = {\n      parent: parentCache,\n      cache: freshCache,\n    };\n    workInProgress.memoizedState = initialState;\n    initializeUpdateQueue(workInProgress);\n    pushCacheProvider(workInProgress, freshCache);\n  } else {\n    // Check for updates\n    if (includesSomeLane(current.lanes, renderLanes)) {\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, null, null, renderLanes);\n    }\n    const prevState: CacheComponentState = current.memoizedState;\n    const nextState: CacheComponentState = workInProgress.memoizedState;\n\n    // Compare the new parent cache to the previous to see detect there was\n    // a refresh.\n    if (prevState.parent !== parentCache) {\n      // Refresh in parent. Update the parent.\n      const derivedState: CacheComponentState = {\n        parent: parentCache,\n        cache: parentCache,\n      };\n\n      // Copied from getDerivedStateFromProps implementation. Once the update\n      // queue is empty, persist the derived state onto the base state.\n      workInProgress.memoizedState = derivedState;\n      if (workInProgress.lanes === NoLanes) {\n        const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n        workInProgress.memoizedState = updateQueue.baseState = derivedState;\n      }\n\n      pushCacheProvider(workInProgress, parentCache);\n      // No need to propagate a context change because the refreshed parent\n      // already did.\n    } else {\n      // The parent didn't refresh. Now check if this cache did.\n      const nextCache = nextState.cache;\n      pushCacheProvider(workInProgress, nextCache);\n      if (nextCache !== prevState.cache) {\n        // This cache refreshed. Propagate a context change.\n        propagateContextChange(workInProgress, CacheContext, renderLanes);\n      }\n    }\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// This should only be called if the name changes\nfunction updateTracingMarkerComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (!enableTransitionTracing) {\n    return null;\n  }\n\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    if (enableProfilerCommitHooks) {\n      // Reset effect durations for the next eventual effect phase.\n      // These are reset during render to allow the DevTools commit hook a chance to read them,\n      const stateNode = workInProgress.stateNode;\n      stateNode.effectDuration = 0;\n      stateNode.passiveEffectDuration = 0;\n    }\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n    if (enableSuspenseLayoutEffectSemantics) {\n      workInProgress.flags |= RefStatic;\n    }\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  let hasId;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictLegacyMode\n    ) {\n      setIsStrictModeForDevtools(true);\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n        hasId = checkDidRenderIdHook();\n      } finally {\n        setIsStrictModeForDevtools(false);\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  if (getIsHydrating() && hasId) {\n    pushMaterializedTreeId(workInProgress);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    // This is used by DevTools to force a boundary to error.\n    switch (shouldError(workInProgress)) {\n      case false: {\n        const instance = workInProgress.stateNode;\n        const ctor = workInProgress.type;\n        // TODO This way of resetting the error boundary state is a hack.\n        // Is there a better way to do this?\n        const tempInstance = new ctor(\n          workInProgress.memoizedProps,\n          instance.context,\n        );\n        const state = tempInstance.state;\n        instance.updater.enqueueSetState(instance, state, null);\n        break;\n      }\n      case true: {\n        workInProgress.flags |= DidCapture;\n        workInProgress.flags |= ShouldCapture;\n        // eslint-disable-next-line react-internal/prod-error-codes\n        const error = new Error('Simulated error coming from DevTools');\n        const lane = pickArbitraryLane(renderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        // Schedule the error boundary to re-render using updated state\n        const update = createClassErrorUpdate(\n          workInProgress,\n          createCapturedValueAtFiber(error, workInProgress),\n          lane,\n        );\n        enqueueCapturedUpdate(workInProgress, update);\n        break;\n      }\n    }\n\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentNameFromType(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);\n\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentNameFromFiber(workInProgress) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (enableSchedulingProfiler) {\n      markComponentRenderStarted(workInProgress);\n    }\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          instance.render();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n    if (enableSchedulingProfiler) {\n      markComponentRenderStopped();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n\n  if (current === null) {\n    throw new Error('Should have a current fiber. This is a bug in React.');\n  }\n\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState.element;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n\n  const nextState: RootState = workInProgress.memoizedState;\n  const root: FiberRoot = workInProgress.stateNode;\n  pushRootTransition(workInProgress, root, renderLanes);\n\n  if (enableCache) {\n    const nextCache: Cache = nextState.cache;\n    pushCacheProvider(workInProgress, nextCache);\n    if (nextCache !== prevState.cache) {\n      // The root cache refreshed.\n      propagateContextChange(workInProgress, CacheContext, renderLanes);\n    }\n  }\n\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (supportsHydration && prevState.isDehydrated) {\n    // This is a hydration root whose shell has not yet hydrated. We should\n    // attempt to hydrate.\n\n    // Flip isDehydrated to false to indicate that when this render\n    // finishes, the root will no longer be dehydrated.\n    const overrideState: RootState = {\n      element: nextChildren,\n      isDehydrated: false,\n      cache: nextState.cache,\n      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,\n      transitions: nextState.transitions,\n    };\n    const updateQueue: UpdateQueue<RootState> = (workInProgress.updateQueue: any);\n    // `baseState` can always be the last state because the root doesn't\n    // have reducer functions so it doesn't need rebasing.\n    updateQueue.baseState = overrideState;\n    workInProgress.memoizedState = overrideState;\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during a previous attempt to hydrate the shell, so we\n      // forced a client render.\n      const recoverableError = createCapturedValueAtFiber(\n        new Error(\n          'There was an error while hydrating. Because the error happened outside ' +\n            'of a Suspense boundary, the entire root will switch to ' +\n            'client rendering.',\n        ),\n        workInProgress,\n      );\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n        recoverableError,\n      );\n    } else if (nextChildren !== prevChildren) {\n      const recoverableError = createCapturedValueAtFiber(\n        new Error(\n          'This root received an early update, before anything was able ' +\n            'hydrate. Switched the entire root to client rendering.',\n        ),\n        workInProgress,\n      );\n      return mountHostRootWithoutHydrating(\n        current,\n        workInProgress,\n        nextChildren,\n        renderLanes,\n        recoverableError,\n      );\n    } else {\n      // The outermost shell has not hydrated yet. Start hydrating.\n      enterHydrationState(workInProgress);\n      if (enableUseMutableSource) {\n        const mutableSourceEagerHydrationData =\n          root.mutableSourceEagerHydrationData;\n        if (mutableSourceEagerHydrationData != null) {\n          for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n            const mutableSource = ((mutableSourceEagerHydrationData[\n              i\n            ]: any): MutableSource<any>);\n            const version = mutableSourceEagerHydrationData[i + 1];\n            setWorkInProgressVersion(mutableSource, version);\n          }\n        }\n      }\n\n      const child = mountChildFibers(\n        workInProgress,\n        null,\n        nextChildren,\n        renderLanes,\n      );\n      workInProgress.child = child;\n\n      let node = child;\n      while (node) {\n        // Mark each child as hydrating. This is a fast path to know whether this\n        // tree is part of a hydrating tree. This is used to determine if a child\n        // node has fully mounted yet, and for scheduling event replaying.\n        // Conceptually this is similar to Placement in that a new subtree is\n        // inserted into the React tree here. It just happens to not need DOM\n        // mutations because it already exists.\n        node.flags = (node.flags & ~Placement) | Hydrating;\n        node = node.sibling;\n      }\n    }\n  } else {\n    // Root is not dehydrated. Either this is a client-only root, or it\n    // already hydrated.\n    resetHydrationState();\n    if (nextChildren === prevChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nfunction mountHostRootWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: ReactNodeList,\n  renderLanes: Lanes,\n  recoverableError: CapturedValue<mixed>,\n) {\n  // Revert to client rendering.\n  resetHydrationState();\n\n  queueHydrationError(recoverableError);\n\n  workInProgress.flags |= ForceClientRender;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        renderLanes,\n      );\n      return child;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  throw new Error(\n    `Element type is invalid. Received a promise that resolves to: ${Component}. ` +\n      `Lazy element type must resolve to a class or function.${hint}`,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n  let hasId;\n\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictLegacyMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    hasId = checkDidRenderIdHook();\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentNameFromType(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictLegacyMode\n      ) {\n        setIsStrictModeForDevtools(true);\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n          hasId = checkDidRenderIdHook();\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n    }\n\n    if (getIsHydrating() && hasId) {\n      pushMaterializedTreeId(workInProgress);\n    }\n\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentNameFromType(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  treeContext: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n    cachePool: getSuspendedCache(),\n    transitions: null,\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  let cachePool: SpawnedCachePool | null = null;\n  if (enableCache) {\n    const prevCachePool: SpawnedCachePool | null = prevOffscreenState.cachePool;\n    if (prevCachePool !== null) {\n      const parentCache = isPrimaryRenderer\n        ? CacheContext._currentValue\n        : CacheContext._currentValue2;\n      if (prevCachePool.parent !== parentCache) {\n        // Detected a refresh in the parent. This overrides any previously\n        // suspended cache.\n        cachePool = {\n          parent: parentCache,\n          pool: parentCache,\n        };\n      } else {\n        // We can reuse the cache from last time. The only thing that would have\n        // overridden it is a parent refresh, which we checked for above.\n        cachePool = prevCachePool;\n      }\n    } else {\n      // If there's no previous cache pool, grab the current one.\n      cachePool = getSuspendedCache();\n    }\n  }\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n    cachePool,\n    transitions: prevOffscreenState.transitions,\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  suspenseContext: SuspenseContext,\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  return hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(\n      suspenseContext,\n      current,\n      workInProgress,\n      renderLanes,\n    )\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (\n      current === null ||\n      (current.memoizedState: null | SuspenseState) !== null\n    ) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Avoided boundaries are not considered since they cannot handle preferred fallback states.\n      if (\n        !enableSuspenseAvoidThisFallback ||\n        nextProps.unstable_avoidThisFallback !== true\n      ) {\n        suspenseContext = addSubtreeSuspenseContext(\n          suspenseContext,\n          InvisibleParentSuspenseContext,\n        );\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconciliation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n\n    // Special path for hydration\n    // If we're currently hydrating, try to hydrate this boundary.\n    tryToClaimNextHydratableInstance(workInProgress);\n    // This could've been a dehydrated suspense component.\n    const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n    if (suspenseState !== null) {\n      const dehydrated = suspenseState.dehydrated;\n      if (dehydrated !== null) {\n        return mountDehydratedSuspenseComponent(\n          workInProgress,\n          dehydrated,\n          renderLanes,\n        );\n      }\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n\n    if (showFallback) {\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      if (enableTransitionTracing) {\n        const currentTransitions = getSuspendedTransitions();\n        if (currentTransitions !== null) {\n          const primaryChildUpdateQueue: OffscreenQueue = {\n            transitions: currentTransitions,\n          };\n          primaryChildFragment.updateQueue = primaryChildUpdateQueue;\n        }\n      }\n\n      return fallbackFragment;\n    } else if (\n      enableCPUSuspense &&\n      typeof nextProps.unstable_expectedLoadTime === 'number'\n    ) {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // Special path for hydration\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      const dehydrated = prevState.dehydrated;\n      if (dehydrated !== null) {\n        return updateDehydratedSuspenseComponent(\n          current,\n          workInProgress,\n          didSuspend,\n          nextProps,\n          dehydrated,\n          prevState,\n          renderLanes,\n        );\n      }\n    }\n\n    if (showFallback) {\n      const nextFallbackChildren = nextProps.fallback;\n      const nextPrimaryChildren = nextProps.children;\n      const fallbackChildFragment = updateSuspenseFallbackChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      const prevOffscreenState: OffscreenState | null = (current.child: any)\n        .memoizedState;\n      primaryChildFragment.memoizedState =\n        prevOffscreenState === null\n          ? mountSuspenseOffscreenState(renderLanes)\n          : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n      if (enableTransitionTracing) {\n        const currentTransitions = getSuspendedTransitions();\n        if (currentTransitions !== null) {\n          const primaryChildUpdateQueue: OffscreenQueue = {\n            transitions: currentTransitions,\n          };\n          primaryChildFragment.updateQueue = primaryChildUpdateQueue;\n        }\n      }\n      primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n        current,\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    } else {\n      const nextPrimaryChildren = nextProps.children;\n      const primaryChildFragment = updateSuspensePrimaryChildren(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    mode,\n    renderLanes,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if (\n    (mode & ConcurrentMode) === NoMode &&\n    progressedPrimaryFragment !== null\n  ) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = mountWorkInProgressOffscreenFiber(\n      primaryChildProps,\n      mode,\n      NoLanes,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction mountWorkInProgressOffscreenFiber(\n  offscreenProps: OffscreenProps,\n  mode: TypeOfMode,\n  renderLanes: Lanes,\n) {\n  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n  // this wrapper function to constrain it.\n  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n}\n\nfunction updateWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = updateWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    const deletions = workInProgress.deletions;\n    if (deletions === null) {\n      workInProgress.deletions = [currentFallbackChildFragment];\n      workInProgress.flags |= ChildDeletion;\n    } else {\n      deletions.push(currentFallbackChildFragment);\n    }\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & ConcurrentMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    // The fallback fiber was added as a deletion during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it.\n    workInProgress.deletions = null;\n  } else {\n    primaryChildFragment = updateWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n    // Since we're reusing a current tree, we need to reuse the flags, too.\n    // (We don't do this in legacy mode, because in legacy mode we don't re-use\n    // the current tree; see previous branch.)\n    primaryChildFragment.subtreeFlags =\n      currentPrimaryChildFragment.subtreeFlags & StaticMask;\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n  recoverableError: CapturedValue<mixed> | null,\n) {\n  // Falling back to client rendering. Because this has performance\n  // implications, it's considered a recoverable error, even though the user\n  // likely won't observe anything wrong with the UI.\n  //\n  // The error is passed in as an argument to enforce that every caller provide\n  // a custom message, or explicitly opt out (currently the only path that opts\n  // out is legacy mode; every concurrent path provides an error).\n  if (recoverableError !== null) {\n    queueHydrationError(recoverableError);\n  }\n\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const fiberMode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = mountWorkInProgressOffscreenFiber(\n    primaryChildProps,\n    fiberMode,\n    NoLanes,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    fiberMode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOMClient.hydrateRoot(container, <App />)' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  didSuspend: boolean,\n  nextProps: any,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (!didSuspend) {\n    // This is the first render pass. Attempt to hydrate.\n\n    // We should never be hydrating at this point because it is the first pass,\n    // but after we've already committed once.\n    warnIfHydrating();\n\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        // TODO: When we delete legacy mode, we should make this error argument\n        // required — every concurrent mode path that causes hydration to\n        // de-opt to client rendering should have an error message.\n        null,\n      );\n    }\n\n    if (isSuspenseInstanceFallback(suspenseInstance)) {\n      // This boundary is in a permanent fallback state. In this case, we'll never\n      // get an update and we'll never be able to hydrate the final content. Let's just try the\n      // client side render instead.\n      let digest, message, stack;\n      if (__DEV__) {\n        ({digest, message, stack} = getSuspenseInstanceFallbackErrorDetails(\n          suspenseInstance,\n        ));\n      } else {\n        ({digest} = getSuspenseInstanceFallbackErrorDetails(suspenseInstance));\n      }\n\n      let error;\n      if (message) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        error = new Error(message);\n      } else {\n        error = new Error(\n          'The server could not finish this Suspense boundary, likely ' +\n            'due to an error during server rendering. Switched to ' +\n            'client rendering.',\n        );\n      }\n      const capturedValue = createCapturedValue(error, digest, stack);\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    }\n\n    if (\n      enableLazyContextPropagation &&\n      // TODO: Factoring is a little weird, since we check this right below, too.\n      // But don't want to re-arrange the if-else chain until/unless this\n      // feature lands.\n      !didReceiveUpdate\n    ) {\n      // We need to check if any children have context before we decide to bail\n      // out, so propagate the changes now.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n    }\n\n    // We use lanes to indicate that a child might depend on context, so if\n    // any context has changed, we need to treat is as if the input might have changed.\n    const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n    if (didReceiveUpdate || hasContextChanged) {\n      // This boundary has changed since the first render. This means that we are now unable to\n      // hydrate it. We might still be able to hydrate it using a higher priority lane.\n      const root = getWorkInProgressRoot();\n      if (root !== null) {\n        const attemptHydrationAtLane = getBumpedLaneForHydration(\n          root,\n          renderLanes,\n        );\n        if (\n          attemptHydrationAtLane !== NoLane &&\n          attemptHydrationAtLane !== suspenseState.retryLane\n        ) {\n          // Intentionally mutating since this render will get interrupted. This\n          // is one of the very rare times where we mutate the current tree\n          // during the render phase.\n          suspenseState.retryLane = attemptHydrationAtLane;\n          // TODO: Ideally this would inherit the event time of the current render\n          const eventTime = NoTimestamp;\n          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n          scheduleUpdateOnFiber(\n            root,\n            current,\n            attemptHydrationAtLane,\n            eventTime,\n          );\n        } else {\n          // We have already tried to ping at a higher priority than we're rendering with\n          // so if we got here, we must have failed to hydrate at those levels. We must\n          // now give up. Instead, we're going to delete the whole subtree and instead inject\n          // a new real Suspense boundary to take its place, which may render content\n          // or fallback. This might suspend for a while and if it does we might still have\n          // an opportunity to hydrate before this pass commits.\n        }\n      }\n\n      // If we have scheduled higher pri work above, this will probably just abort the render\n      // since we now have higher priority work, but in case it doesn't, we need to prepare to\n      // render something, if we time out. Even if that requires us to delete everything and\n      // skip hydration.\n      // Delay having to do this as long as the suspense timeout allows us.\n      renderDidSuspendDelayIfPossible();\n      const capturedValue = createCapturedValue(\n        new Error(\n          'This Suspense boundary received an update before it finished ' +\n            'hydrating. This caused the boundary to switch to client rendering. ' +\n            'The usual way to fix this is to wrap the original update ' +\n            'in startTransition.',\n        ),\n      );\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    } else if (isSuspenseInstancePending(suspenseInstance)) {\n      // This component is still pending more data from the server, so we can't hydrate its\n      // content. We treat it as if this component suspended itself. It might seem as if\n      // we could just try to render it client-side instead. However, this will perform a\n      // lot of unnecessary work and is unlikely to complete since it often will suspend\n      // on missing data anyway. Additionally, the server might be able to render more\n      // than we can on the client yet. In that case we'd end up with more fallback states\n      // on the client than if we just leave it alone. If the server times out or errors\n      // these should update this boundary to the permanent Fallback state instead.\n      // Mark it as having captured (i.e. suspended).\n      workInProgress.flags |= DidCapture;\n      // Leave the child in place. I.e. the dehydrated fragment.\n      workInProgress.child = current.child;\n      // Register a callback to retry this boundary once the server has sent the result.\n      const retry = retryDehydratedSuspenseBoundary.bind(null, current);\n      registerSuspenseInstanceRetry(suspenseInstance, retry);\n      return null;\n    } else {\n      // This is the first attempt.\n      reenterHydrationStateFromDehydratedSuspenseInstance(\n        workInProgress,\n        suspenseInstance,\n        suspenseState.treeContext,\n      );\n      const primaryChildren = nextProps.children;\n      const primaryChildFragment = mountSuspensePrimaryChildren(\n        workInProgress,\n        primaryChildren,\n        renderLanes,\n      );\n      // Mark the children as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      primaryChildFragment.flags |= Hydrating;\n      return primaryChildFragment;\n    }\n  } else {\n    // This is the second render pass. We already attempted to hydrated, but\n    // something either suspended or errored.\n\n    if (workInProgress.flags & ForceClientRender) {\n      // Something errored during hydration. Try again without hydrating.\n      workInProgress.flags &= ~ForceClientRender;\n      const capturedValue = createCapturedValue(\n        new Error(\n          'There was an error while hydrating this Suspense boundary. ' +\n            'Switched to client rendering.',\n        ),\n      );\n      return retrySuspenseComponentWithoutHydrating(\n        current,\n        workInProgress,\n        renderLanes,\n        capturedValue,\n      );\n    } else if ((workInProgress.memoizedState: null | SuspenseState) !== null) {\n      // Something suspended and we should still be in dehydrated mode.\n      // Leave the existing child in place.\n      workInProgress.child = current.child;\n      // The dehydrated completion pass expects this flag to be there\n      // but the normal suspense pass doesn't.\n      workInProgress.flags |= DidCapture;\n      return null;\n    } else {\n      // Suspended but we should no longer be in dehydrated mode.\n      // Therefore we now have to render the fallback.\n      const nextPrimaryChildren = nextProps.children;\n      const nextFallbackChildren = nextProps.fallback;\n      const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n        current,\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackChildFragment;\n    }\n  }\n}\n\nfunction scheduleSuspenseWorkOnFiber(\n  fiber: Fiber,\n  renderLanes: Lanes,\n  propagationRoot: Fiber,\n) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isAnArray = isArray(childSlot);\n    const isIterable =\n      !isAnArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isAnArray || isIterable) {\n      const type = isAnArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, context, newValue);\n\n  if (enableLazyContextPropagation) {\n    // In the lazy propagation implementation, we don't scan for matching\n    // consumers until something bails out, because until something bails out\n    // we're going to visit those nodes, anyway. The trade-off is that it shifts\n    // responsibility to the consumer to track whether something has changed.\n  } else {\n    if (oldProps !== null) {\n      const oldValue = oldProps.value;\n      if (is(oldValue, newValue)) {\n        // No change. Bailout early if children are the same.\n        if (\n          oldProps.children === newProps.children &&\n          !hasLegacyContextChanged()\n        ) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n      } else {\n        // The context value changed. Search for matching consumers and schedule\n        // them to update.\n        propagateContextChange(workInProgress, context, renderLanes);\n      }\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context);\n  if (enableSchedulingProfiler) {\n    markComponentRenderStarted(workInProgress);\n  }\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n  if (enableSchedulingProfiler) {\n    markComponentRenderStopped();\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nexport function checkIfWorkInProgressReceivedUpdate() {\n  return didReceiveUpdate;\n}\n\nfunction resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n  if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n    if (current !== null) {\n      // A lazy component only mounts if it suspended inside a non-\n      // concurrent tree, in an inconsistent state. We want to treat it like\n      // a new mount, even though an empty version of it already committed.\n      // Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n  }\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n\n    if (enableLazyContextPropagation && current !== null) {\n      // Before bailing out, check if there are any context changes in\n      // the children.\n      lazilyPropagateParentContextChanges(current, workInProgress, renderLanes);\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  // This fiber doesn't have work, but its subtree does. Clone the child\n  // fibers and continue.\n  cloneChildFibers(current, workInProgress);\n  return workInProgress.child;\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      // eslint-disable-next-line react-internal/prod-error-codes\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        // eslint-disable-next-line react-internal/prod-error-codes\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const deletions = returnFiber.deletions;\n    if (deletions === null) {\n      returnFiber.deletions = [current];\n      returnFiber.flags |= ChildDeletion;\n    } else {\n      deletions.push(current);\n    }\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction checkScheduledUpdateOrContext(\n  current: Fiber,\n  renderLanes: Lanes,\n): boolean {\n  // Before performing an early bailout, we must check if there are pending\n  // updates or context.\n  const updateLanes = current.lanes;\n  if (includesSomeLane(updateLanes, renderLanes)) {\n    return true;\n  }\n  // No pending update, but because context is propagated lazily, we need\n  // to check for a context change before we bail out.\n  if (enableLazyContextPropagation) {\n    const dependencies = current.dependencies;\n    if (dependencies !== null && checkIfContextChanged(dependencies)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction attemptEarlyBailoutIfNoScheduledUpdate(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This fiber does not have any pending work. Bailout without entering\n  // the begin phase. There's still some bookkeeping we that needs to be done\n  // in this optimized path, mostly pushing stuff onto the stack.\n  switch (workInProgress.tag) {\n    case HostRoot:\n      pushHostRootContext(workInProgress);\n      const root: FiberRoot = workInProgress.stateNode;\n      pushRootTransition(workInProgress, root, renderLanes);\n\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      resetHydrationState();\n      break;\n    case HostComponent:\n      pushHostContext(workInProgress);\n      break;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        pushLegacyContextProvider(workInProgress);\n      }\n      break;\n    }\n    case HostPortal:\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      break;\n    case ContextProvider: {\n      const newValue = workInProgress.memoizedProps.value;\n      const context: ReactContext<any> = workInProgress.type._context;\n      pushProvider(workInProgress, context, newValue);\n      break;\n    }\n    case Profiler:\n      if (enableProfilerTimer) {\n        // Profiler should only call onRender when one of its descendants actually rendered.\n        const hasChildWork = includesSomeLane(\n          renderLanes,\n          workInProgress.childLanes,\n        );\n        if (hasChildWork) {\n          workInProgress.flags |= Update;\n        }\n\n        if (enableProfilerCommitHooks) {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          const stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      break;\n    case SuspenseComponent: {\n      const state: SuspenseState | null = workInProgress.memoizedState;\n      if (state !== null) {\n        if (state.dehydrated !== null) {\n          pushSuspenseContext(\n            workInProgress,\n            setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n          );\n          // We know that this component will suspend again because if it has\n          // been unsuspended it has committed as a resolved Suspense component.\n          // If it needs to be retried, it should have work scheduled on it.\n          workInProgress.flags |= DidCapture;\n          // We should never render the children of a dehydrated boundary until we\n          // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n          return null;\n        }\n\n        // If this boundary is currently timed out, we need to decide\n        // whether to retry the primary children, or to skip over it and\n        // go straight to the fallback. Check the priority of the primary\n        // child fragment.\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const primaryChildLanes = primaryChildFragment.childLanes;\n        if (includesSomeLane(renderLanes, primaryChildLanes)) {\n          // The primary children have pending work. Use the normal path\n          // to attempt to render the primary children again.\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        } else {\n          // The primary child fragment does not have pending work marked\n          // on it\n          pushSuspenseContext(\n            workInProgress,\n            setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n          );\n          // The primary children do not have pending work with sufficient\n          // priority. Bailout.\n          const child = bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n          if (child !== null) {\n            // The fallback children have pending work. Skip over the\n            // primary children and work on the fallback.\n            return child.sibling;\n          } else {\n            // Note: We can return `null` here because we already checked\n            // whether there were nested context consumers, via the call to\n            // `bailoutOnAlreadyFinishedWork` above.\n            return null;\n          }\n        }\n      } else {\n        pushSuspenseContext(\n          workInProgress,\n          setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n        );\n      }\n      break;\n    }\n    case SuspenseListComponent: {\n      const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n      let hasChildWork = includesSomeLane(\n        renderLanes,\n        workInProgress.childLanes,\n      );\n\n      if (enableLazyContextPropagation && !hasChildWork) {\n        // Context changes may not have been propagated yet. We need to do\n        // that now, before we can decide whether to bail out.\n        // TODO: We use `childLanes` as a heuristic for whether there is\n        // remaining work in a few places, including\n        // `bailoutOnAlreadyFinishedWork` and\n        // `updateDehydratedSuspenseComponent`. We should maybe extract this\n        // into a dedicated function.\n        lazilyPropagateParentContextChanges(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n        hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n      }\n\n      if (didSuspendBefore) {\n        if (hasChildWork) {\n          // If something was in fallback state last time, and we have all the\n          // same children then we're still in progressive loading state.\n          // Something might get unblocked by state updates or retries in the\n          // tree which will affect the tail. So we need to use the normal\n          // path to compute the correct tail.\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes,\n          );\n        }\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        workInProgress.flags |= DidCapture;\n      }\n\n      // If nothing suspended before and we're rendering the same children,\n      // then the tail doesn't matter. Anything new that suspends will work\n      // in the \"together\" mode, so we can continue from the state we had.\n      const renderState = workInProgress.memoizedState;\n      if (renderState !== null) {\n        // Reset to the \"together\" mode in case we've started a different\n        // update in the past but didn't complete it.\n        renderState.rendering = null;\n        renderState.tail = null;\n        renderState.lastEffect = null;\n      }\n      pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n      if (hasChildWork) {\n        break;\n      } else {\n        // If none of the children had any work, that means that none of\n        // them got retried so they'll still be blocked in the same way\n        // as before. We can fast bail out.\n        return null;\n      }\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      // Need to check if the tree still needs to be deferred. This is\n      // almost identical to the logic used in the normal update path,\n      // so we'll just enter that. The only difference is we'll bail out\n      // at the next level instead of this one, because the child props\n      // have not changed. Which is fine.\n      // TODO: Probably should refactor `beginWork` to split the bailout\n      // path from the normal path. I'm tempted to do a labeled break here\n      // but I won't :)\n      workInProgress.lanes = NoLanes;\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache: Cache = current.memoizedState.cache;\n        pushCacheProvider(workInProgress, cache);\n      }\n      break;\n    }\n  }\n  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else {\n      // Neither props nor legacy context changes. Check if there's a pending\n      // update or context change.\n      const hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n        current,\n        renderLanes,\n      );\n      if (\n        !hasScheduledUpdateOrContext &&\n        // If this is the second pass of an error or suspense boundary, there\n        // may not be work scheduled on `current`, so we check for this flag.\n        (workInProgress.flags & DidCapture) === NoFlags\n      ) {\n        // No pending updates or context. Bail out now.\n        didReceiveUpdate = false;\n        return attemptEarlyBailoutIfNoScheduledUpdate(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n\n    if (getIsHydrating() && isForkedChild(workInProgress)) {\n      // Check if this child belongs to a list of muliple children in\n      // its parent.\n      //\n      // In a true multi-threaded implementation, we would render children on\n      // parallel threads. This would represent the beginning of a new render\n      // thread for this subtree.\n      //\n      // We only use this for id generation during hydration, which is why the\n      // logic is located in this special branch.\n      const slotIndex = workInProgress.index;\n      const numberOfForks = getForksAtLevel(workInProgress);\n      pushTreeId(workInProgress, numberOfForks, slotIndex);\n    }\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentNameFromType(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      if (enableLegacyHidden) {\n        return updateLegacyHiddenComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        return updateCacheComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        return updateTracingMarkerComponent(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n      break;\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {\n  ReactScopeInstance,\n  ReactContext,\n  ReactScopeQuery,\n} from 'shared/ReactTypes';\n\nimport {\n  getPublicInstance,\n  getInstanceFromNode,\n  getInstanceFromScope,\n} from './ReactFiberHostConfig';\nimport {isFiberSuspenseAndTimedOut} from './ReactFiberTreeReflection';\n\nimport {HostComponent, ScopeComponent, ContextProvider} from './ReactWorkTags';\nimport {enableScopeAPI} from 'shared/ReactFeatureFlags';\n\nfunction getSuspenseFallbackChild(fiber: Fiber): Fiber | null {\n  return ((((fiber.child: any): Fiber).sibling: any): Fiber).child;\n}\n\nconst emptyObject = {};\n\nfunction collectScopedNodes(\n  node: Fiber,\n  fn: ReactScopeQuery,\n  scopedNodes: Array<any>,\n): void {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {type, memoizedProps, stateNode} = node;\n      const instance = getPublicInstance(stateNode);\n      if (\n        instance !== null &&\n        fn(type, memoizedProps || emptyObject, instance) === true\n      ) {\n        scopedNodes.push(instance);\n      }\n    }\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      collectScopedNodesFromChildren(child, fn, scopedNodes);\n    }\n  }\n}\n\nfunction collectFirstScopedNode(\n  node: Fiber,\n  fn: ReactScopeQuery,\n): null | Object {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {type, memoizedProps, stateNode} = node;\n      const instance = getPublicInstance(stateNode);\n      if (instance !== null && fn(type, memoizedProps, instance) === true) {\n        return instance;\n      }\n    }\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      return collectFirstScopedNodeFromChildren(child, fn);\n    }\n  }\n  return null;\n}\n\nfunction collectScopedNodesFromChildren(\n  startingChild: Fiber,\n  fn: ReactScopeQuery,\n  scopedNodes: Array<any>,\n): void {\n  let child = startingChild;\n  while (child !== null) {\n    collectScopedNodes(child, fn, scopedNodes);\n    child = child.sibling;\n  }\n}\n\nfunction collectFirstScopedNodeFromChildren(\n  startingChild: Fiber,\n  fn: ReactScopeQuery,\n): Object | null {\n  let child = startingChild;\n  while (child !== null) {\n    const scopedNode = collectFirstScopedNode(child, fn);\n    if (scopedNode !== null) {\n      return scopedNode;\n    }\n    child = child.sibling;\n  }\n  return null;\n}\n\nfunction collectNearestContextValues<T>(\n  node: Fiber,\n  context: ReactContext<T>,\n  childContextValues: Array<T>,\n): void {\n  if (node.tag === ContextProvider && node.type._context === context) {\n    const contextValue = node.memoizedProps.value;\n    childContextValues.push(contextValue);\n  } else {\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      collectNearestChildContextValues(child, context, childContextValues);\n    }\n  }\n}\n\nfunction collectNearestChildContextValues<T>(\n  startingChild: Fiber | null,\n  context: ReactContext<T>,\n  childContextValues: Array<T>,\n): void {\n  let child = startingChild;\n  while (child !== null) {\n    collectNearestContextValues(child, context, childContextValues);\n    child = child.sibling;\n  }\n}\n\nfunction DO_NOT_USE_queryAllNodes(fn: ReactScopeQuery): null | Array<Object> {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return null;\n  }\n  const child = currentFiber.child;\n  const scopedNodes = [];\n  if (child !== null) {\n    collectScopedNodesFromChildren(child, fn, scopedNodes);\n  }\n  return scopedNodes.length === 0 ? null : scopedNodes;\n}\n\nfunction DO_NOT_USE_queryFirstNode(fn: ReactScopeQuery): null | Object {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return null;\n  }\n  const child = currentFiber.child;\n  if (child !== null) {\n    return collectFirstScopedNodeFromChildren(child, fn);\n  }\n  return null;\n}\n\nfunction containsNode(node: Object): boolean {\n  let fiber = getInstanceFromNode(node);\n  while (fiber !== null) {\n    if (fiber.tag === ScopeComponent && fiber.stateNode === this) {\n      return true;\n    }\n    fiber = fiber.return;\n  }\n  return false;\n}\n\nfunction getChildContextValues<T>(context: ReactContext<T>): Array<T> {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return [];\n  }\n  const child = currentFiber.child;\n  const childContextValues = [];\n  if (child !== null) {\n    collectNearestChildContextValues(child, context, childContextValues);\n  }\n  return childContextValues;\n}\n\nexport function createScopeInstance(): ReactScopeInstance {\n  return {\n    DO_NOT_USE_queryAllNodes,\n    DO_NOT_USE_queryFirstNode,\n    containsNode,\n    getChildContextValues,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {\n  ReactScopeInstance,\n  ReactContext,\n  Wakeable,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport {\n  enableSuspenseAvoidThisFallback,\n  enableLegacyHidden,\n} from 'shared/ReactFeatureFlags';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './Scheduler';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {NoMode, ConcurrentMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  Ref,\n  RefStatic,\n  Placement,\n  Update,\n  Visibility,\n  NoFlags,\n  DidCapture,\n  Snapshot,\n  ChildDeletion,\n  StaticMask,\n  MutationMask,\n  Passive,\n  Incomplete,\n  ShouldCapture,\n  ForceClientRender,\n} from './ReactFiberFlags';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n  popSuspenseContext,\n  pushSuspenseContext,\n  setShallowSuspenseContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  warnIfUnhydratedTailNodes,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n  hasUnhydratedTailNodes,\n  upgradeHydrationErrorsToRecoverable,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableProfilerTimer,\n  enableCache,\n  enableSuspenseLayoutEffectSemantics,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  popRenderLanes,\n  getRenderTargetTime,\n  subtreeRenderLanes,\n  getWorkInProgressTransitions,\n} from './ReactFiberWorkLoop.old';\nimport {\n  OffscreenLane,\n  SomeRetryLane,\n  NoLanes,\n  includesSomeLane,\n  mergeLanes,\n} from './ReactFiberLane.old';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\nimport {popTreeContext} from './ReactFiberTreeContext.old';\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref;\n  if (enableSuspenseLayoutEffectSemantics) {\n    workInProgress.flags |= RefStatic;\n  }\n}\n\nfunction hadNoMutationsEffects(current: null | Fiber, completedWork: Fiber) {\n  const didBailout = current !== null && current.child === completedWork.child;\n  if (didBailout) {\n    return true;\n  }\n\n  if ((completedWork.flags & ChildDeletion) !== NoFlags) {\n    return false;\n  }\n\n  // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`\n  // then we only have to check the `completedWork.subtreeFlags`.\n  let child = completedWork.child;\n  while (child !== null) {\n    if (\n      (child.flags & MutationMask) !== NoFlags ||\n      (child.subtreeFlags & MutationMask) !== NoFlags\n    ) {\n      return false;\n    }\n    child = child.sibling;\n  }\n  return true;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildren(parent, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (\n        node.tag === OffscreenComponent &&\n        node.memoizedState !== null\n      ) {\n        // The children in this boundary are hidden. Toggle their visibility\n        // before appending.\n        const child = node.child;\n        if (child !== null) {\n          child.return = node;\n        }\n        appendAllChildrenToContainer(containerChildSet, node, true, true);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = hadNoMutationsEffects(current, workInProgress);\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(current: null | Fiber, workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction bubbleProperties(completedWork: Fiber) {\n  const didBailout =\n    completedWork.alternate !== null &&\n    completedWork.alternate.child === completedWork.child;\n\n  let newChildLanes = NoLanes;\n  let subtreeFlags = NoFlags;\n\n  if (!didBailout) {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let actualDuration = completedWork.actualDuration;\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // When a fiber is cloned, its actualDuration is reset to 0. This value will\n        // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n        // When work is done, it should bubble to the parent's actualDuration. If\n        // the fiber has not been cloned though, (meaning no work was done), then\n        // this value will reflect the amount of time spent working on a previous\n        // render. In that case it should not bubble. We determine whether it was\n        // cloned by comparing the child pointer.\n        actualDuration += child.actualDuration;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.actualDuration = actualDuration;\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        subtreeFlags |= child.subtreeFlags;\n        subtreeFlags |= child.flags;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  } else {\n    // Bubble up the earliest expiration time.\n    if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n      // In profiling mode, resetChildExpirationTime is also used to reset\n      // profiler durations.\n      let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        treeBaseDuration += child.treeBaseDuration;\n        child = child.sibling;\n      }\n\n      completedWork.treeBaseDuration = treeBaseDuration;\n    } else {\n      let child = completedWork.child;\n      while (child !== null) {\n        newChildLanes = mergeLanes(\n          newChildLanes,\n          mergeLanes(child.lanes, child.childLanes),\n        );\n\n        // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n        // so we should bubble those up even during a bailout. All the other\n        // flags have a lifetime only of a single render + commit, so we should\n        // ignore them.\n        subtreeFlags |= child.subtreeFlags & StaticMask;\n        subtreeFlags |= child.flags & StaticMask;\n\n        // Update the return pointer so the tree is consistent. This is a code\n        // smell because it assumes the commit phase is never concurrent with\n        // the render phase. Will address during refactor to alternate model.\n        child.return = completedWork;\n\n        child = child.sibling;\n      }\n    }\n\n    completedWork.subtreeFlags |= subtreeFlags;\n  }\n\n  completedWork.childLanes = newChildLanes;\n\n  return didBailout;\n}\n\nfunction completeDehydratedSuspenseBoundary(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextState: SuspenseState | null,\n): boolean {\n  if (\n    hasUnhydratedTailNodes() &&\n    (workInProgress.mode & ConcurrentMode) !== NoMode &&\n    (workInProgress.flags & DidCapture) === NoFlags\n  ) {\n    warnIfUnhydratedTailNodes(workInProgress);\n    resetHydrationState();\n    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;\n\n    return false;\n  }\n\n  const wasHydrated = popHydrationState(workInProgress);\n\n  if (nextState !== null && nextState.dehydrated !== null) {\n    // We might be inside a hydration state the first time we're picking up this\n    // Suspense boundary, and also after we've reentered it for further hydration.\n    if (current === null) {\n      if (!wasHydrated) {\n        throw new Error(\n          'A dehydrated suspense component was completed without a hydrated node. ' +\n            'This is probably a bug in React.',\n        );\n      }\n      prepareToHydrateHostSuspenseInstance(workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return false;\n    } else {\n      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration\n      // state since we're now exiting out of it. popHydrationState doesn't do that for us.\n      resetHydrationState();\n      if ((workInProgress.flags & DidCapture) === NoFlags) {\n        // This boundary did not suspend so it's now hydrated and unsuspended.\n        workInProgress.memoizedState = null;\n      }\n      // If nothing suspended, we need to schedule an effect to mark this boundary\n      // as having hydrated so events know that they're free to be invoked.\n      // It's also a signal to replay events and the suspense callback.\n      // If something suspended, schedule an effect to attach retry listeners.\n      // So we might as well always mark this.\n      workInProgress.flags |= Update;\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          const isTimedOutSuspense = nextState !== null;\n          if (isTimedOutSuspense) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return false;\n    }\n  } else {\n    // Successfully completed this tree. If this was a forced client render,\n    // there may have been recoverable errors during first hydration\n    // attempt. If so, add them to a queue so we can log them in the\n    // commit phase.\n    upgradeHydrationErrorsToRecoverable();\n\n    // Fall through to normal Suspense path\n    return true;\n  }\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      bubbleProperties(workInProgress);\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostRoot: {\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n\n      if (enableTransitionTracing) {\n        const transitions = getWorkInProgressTransitions();\n        // We set the Passive flag here because if there are new transitions,\n        // we will need to schedule callbacks and process the transitions,\n        // which we do in the passive phase\n        if (transitions !== null) {\n          workInProgress.flags |= Passive;\n        }\n      }\n\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (current !== null) {\n          previousCache = current.memoizedState.cache;\n        }\n        const cache: Cache = workInProgress.memoizedState.cache;\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n        popCacheProvider(workInProgress, cache);\n      }\n      popRootTransition(workInProgress, fiberRoot, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else {\n          if (current !== null) {\n            const prevState: RootState = current.memoizedState;\n            if (\n              // Check if this is a client root\n              !prevState.isDehydrated ||\n              // Check if we reverted to client rendering (e.g. due to an error)\n              (workInProgress.flags & ForceClientRender) !== NoFlags\n            ) {\n              // Schedule an effect to clear this container at the start of the\n              // next commit. This handles the case of React rendering into a\n              // container with previous children. It's also safe to do for\n              // updates too, because current.child would only be null if the\n              // previous render was null (so the container would already\n              // be empty).\n              workInProgress.flags |= Snapshot;\n\n              // If this was a forced client render, there may have been\n              // recoverable errors during first hydration attempt. If so, add\n              // them to a queue so we can log them in the commit phase.\n              upgradeHydrationErrorsToRecoverable();\n            }\n          }\n        }\n      }\n      updateHostContainer(current, workInProgress);\n      bubbleProperties(workInProgress);\n      if (enableTransitionTracing) {\n        if ((workInProgress.subtreeFlags & Visibility) !== NoFlags) {\n          // If any of our suspense children toggle visibility, this means that\n          // the pending boundaries array needs to be updated, which we only\n          // do in the passive phase.\n          workInProgress.flags |= Passive;\n        }\n      }\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          // This can happen when we abort work.\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          if (workInProgress.stateNode === null) {\n            throw new Error(\n              'We must have new props for new mounts. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      // Special path for dehydrated boundaries. We may eventually move this\n      // to its own fiber type so that we can add other kinds of hydration\n      // boundaries that aren't associated with a Suspense tree. In anticipation\n      // of such a refactor, all the hydration logic is contained in\n      // this branch.\n      if (\n        current === null ||\n        (current.memoizedState !== null &&\n          current.memoizedState.dehydrated !== null)\n      ) {\n        const fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(\n          current,\n          workInProgress,\n          nextState,\n        );\n        if (!fallthroughToNormalSuspensePath) {\n          if (workInProgress.flags & ShouldCapture) {\n            // Special case. There were remaining unhydrated nodes. We treat\n            // this as a mismatch. Revert to client rendering.\n            return workInProgress;\n          } else {\n            // Did not finish hydrating, either because this is the initial\n            // render or because something suspended.\n            return null;\n          }\n        }\n\n        // Continue with the normal Suspense path.\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        // Don't bubble properties in this case.\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      const prevDidTimeout =\n        current !== null &&\n        (current.memoizedState: null | SuspenseState) !== null;\n\n      if (enableCache && nextDidTimeout) {\n        const offscreenFiber: Fiber = (workInProgress.child: any);\n        let previousCache: Cache | null = null;\n        if (\n          offscreenFiber.alternate !== null &&\n          offscreenFiber.alternate.memoizedState !== null &&\n          offscreenFiber.alternate.memoizedState.cachePool !== null\n        ) {\n          previousCache = offscreenFiber.alternate.memoizedState.cachePool.pool;\n        }\n        let cache: Cache | null = null;\n        if (\n          offscreenFiber.memoizedState !== null &&\n          offscreenFiber.memoizedState.cachePool !== null\n        ) {\n          cache = offscreenFiber.memoizedState.cachePool.pool;\n        }\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          offscreenFiber.flags |= Passive;\n        }\n      }\n\n      // If the suspended state of the boundary changes, we need to schedule\n      // a passive effect, which is when we process the transitions\n      if (nextDidTimeout !== prevDidTimeout) {\n        if (enableTransitionTracing) {\n          const offscreenFiber: Fiber = (workInProgress.child: any);\n          offscreenFiber.flags |= Passive;\n        }\n\n        // If the suspended state of the boundary changes, we need to schedule\n        // an effect to toggle the subtree's visibility. When we switch from\n        // fallback -> primary, the inner Offscreen fiber schedules this effect\n        // as part of its normal complete phase. But when we switch from\n        // primary -> fallback, the inner Offscreen fiber does not have a complete\n        // phase. So we need to schedule its effect here.\n        //\n        // We also use this flag to connect/disconnect the effects, but the same\n        // logic applies: when re-connecting, the Offscreen fiber's complete\n        // phase will handle scheduling the effect. It's only when the fallback\n        // is active that we have to do anything special.\n        if (nextDidTimeout) {\n          const offscreenFiber: Fiber = (workInProgress.child: any);\n          offscreenFiber.flags |= Visibility;\n\n          // TODO: This will still suspend a synchronous tree if anything\n          // in the concurrent tree already suspended during this render.\n          // This is a known bug.\n          if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n            // TODO: Move this back to throwException because this is too late\n            // if this is a large tree which is common for initial loads. We\n            // don't know if we should restart a render or not until we get\n            // this marker, and this is too late.\n            // If this render already had a ping or lower pri updates,\n            // and this is the first time we know we're going to suspend we\n            // should be able to immediately restart from within throwException.\n            const hasInvisibleChildContext =\n              current === null &&\n              (workInProgress.memoizedProps.unstable_avoidThisFallback !==\n                true ||\n                !enableSuspenseAvoidThisFallback);\n            if (\n              hasInvisibleChildContext ||\n              hasSuspenseContext(\n                suspenseStackCursor.current,\n                (InvisibleParentSuspenseContext: SuspenseContext),\n              )\n            ) {\n              // If this was in an invisible tree or a new render, then showing\n              // this boundary is ok.\n              renderDidSuspend();\n            } else {\n              // Otherwise, we're going to have to hide content so we should\n              // suspend for longer if possible.\n              renderDidSuspendDelayIfPossible();\n            }\n          }\n        }\n      }\n\n      const wakeables: Set<Wakeable> | null = (workInProgress.updateQueue: any);\n      if (wakeables !== null) {\n        // Schedule an effect to attach a retry listener to the promise.\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      }\n      bubbleProperties(workInProgress);\n      if (enableProfilerTimer) {\n        if ((workInProgress.mode & ProfileMode) !== NoMode) {\n          if (nextDidTimeout) {\n            // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n            const primaryChildFragment = workInProgress.child;\n            if (primaryChildFragment !== null) {\n              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator\n              workInProgress.treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n            }\n          }\n        }\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(current, workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      bubbleProperties(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        bubbleProperties(workInProgress);\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thenables. Instead, we'll transfer its thenables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThenables = suspended.updateQueue;\n                if (newThenables !== null) {\n                  workInProgress.updateQueue = newThenables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect flags before doing the second pass since that's now invalid.\n                // Reset the child fibers to their original state.\n                workInProgress.subtreeFlags = NoFlags;\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense Context to force suspense and immediately\n                // rerender the children.\n                pushSuspenseContext(\n                  workInProgress,\n                  setShallowSuspenseContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                // Don't bubble properties in this case.\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThenables = suspended.updateQueue;\n            if (newThenables !== null) {\n              workInProgress.updateQueue = newThenables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We're done.\n              bubbleProperties(workInProgress);\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        }\n        pushSuspenseContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        // Don't bubble properties in this case.\n        return next;\n      }\n      bubbleProperties(workInProgress);\n      return null;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        bubbleProperties(workInProgress);\n        return null;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popRenderLanes(workInProgress);\n      const nextState: OffscreenState | null = workInProgress.memoizedState;\n      const nextIsHidden = nextState !== null;\n\n      if (current !== null) {\n        const prevState: OffscreenState | null = current.memoizedState;\n        const prevIsHidden = prevState !== null;\n        if (\n          prevIsHidden !== nextIsHidden &&\n          // LegacyHidden doesn't do any hiding — it only pre-renders.\n          (!enableLegacyHidden || workInProgress.tag !== LegacyHiddenComponent)\n        ) {\n          workInProgress.flags |= Visibility;\n        }\n      }\n\n      if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n        bubbleProperties(workInProgress);\n      } else {\n        // Don't bubble properties for hidden children unless we're rendering\n        // at offscreen priority.\n        if (includesSomeLane(subtreeRenderLanes, (OffscreenLane: Lane))) {\n          bubbleProperties(workInProgress);\n          if (supportsMutation) {\n            // Check if there was an insertion or update in the hidden subtree.\n            // If so, we need to hide those nodes in the commit phase, so\n            // schedule a visibility effect.\n            if (\n              (!enableLegacyHidden ||\n                workInProgress.tag !== LegacyHiddenComponent) &&\n              workInProgress.subtreeFlags & (Placement | Update)\n            ) {\n              workInProgress.flags |= Visibility;\n            }\n          }\n        }\n      }\n\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (\n          current !== null &&\n          current.memoizedState !== null &&\n          current.memoizedState.cachePool !== null\n        ) {\n          previousCache = current.memoizedState.cachePool.pool;\n        }\n        let cache: Cache | null = null;\n        if (\n          workInProgress.memoizedState !== null &&\n          workInProgress.memoizedState.cachePool !== null\n        ) {\n          cache = workInProgress.memoizedState.cachePool.pool;\n        }\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n      }\n\n      popTransition(workInProgress, current);\n\n      return null;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (current !== null) {\n          previousCache = current.memoizedState.cache;\n        }\n        const cache: Cache = workInProgress.memoizedState.cache;\n        if (cache !== previousCache) {\n          // Run passive effects to retain/release the cache.\n          workInProgress.flags |= Passive;\n        }\n        popCacheProvider(workInProgress, cache);\n        bubbleProperties(workInProgress);\n      }\n      return null;\n    }\n    case TracingMarkerComponent: {\n      if (enableTransitionTracing) {\n        // Bubble subtree flags before so we can set the flag property\n        bubbleProperties(workInProgress);\n      }\n      return null;\n    }\n  }\n\n  throw new Error(\n    `Unknown unit of work tag (${workInProgress.tag}). This error is likely caused by a bug in ` +\n      'React. Please file an issue.',\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Cache} from './ReactFiberCacheComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {enableProfilerTimer, enableCache} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {popSuspenseContext} from './ReactFiberSuspenseContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popRenderLanes} from './ReactFiberWorkLoop.old';\nimport {popCacheProvider} from './ReactFiberCacheComponent.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\nimport {popTreeContext} from './ReactFiberTreeContext.old';\nimport {popRootTransition, popTransition} from './ReactFiberTransition.old';\n\nfunction unwindWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(workInProgress);\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      const root: FiberRoot = workInProgress.stateNode;\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      popRootTransition(workInProgress, root, renderLanes);\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      if (\n        (flags & ShouldCapture) !== NoFlags &&\n        (flags & DidCapture) === NoFlags\n      ) {\n        // There was an error during render that wasn't captured by a suspense\n        // boundary. Do a second pass on the root to unmount the children.\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        return workInProgress;\n      }\n      // We unwound to the root without completing it. Exit.\n      return null;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const suspenseState: null | SuspenseState = workInProgress.memoizedState;\n      if (suspenseState !== null && suspenseState.dehydrated !== null) {\n        if (workInProgress.alternate === null) {\n          throw new Error(\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n        }\n\n        resetHydrationState();\n      }\n\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      const context: ReactContext<any> = workInProgress.type._context;\n      popProvider(context, workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      popTransition(workInProgress, current);\n      return null;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = workInProgress.memoizedState.cache;\n        popCacheProvider(workInProgress, cache);\n      }\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(\n  current: Fiber | null,\n  interruptedWork: Fiber,\n  renderLanes: Lanes,\n) {\n  // Note: This intentionally doesn't check if we're hydrating because comparing\n  // to the current tree provider fiber is just as fast and less error-prone.\n  // Ideally we would have a special version of the work loop only\n  // for hydration.\n  popTreeContext(interruptedWork);\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      const root: FiberRoot = interruptedWork.stateNode;\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      popRootTransition(interruptedWork, root, renderLanes);\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case ContextProvider:\n      const context: ReactContext<any> = interruptedWork.type._context;\n      popProvider(context, interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      popTransition(interruptedWork, current);\n      break;\n    case CacheComponent:\n      if (enableCache) {\n        const cache: Cache = interruptedWork.memoizedState.cache;\n        popCacheProvider(interruptedWork, cache);\n      }\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// Provided by www\nconst ReactFbErrorUtils = require('ReactFbErrorUtils');\n\nif (typeof ReactFbErrorUtils.invokeGuardedCallback !== 'function') {\n  throw new Error(\n    'Expected ReactFbErrorUtils.invokeGuardedCallback to be a function.',\n  );\n}\n\nconst invokeGuardedCallbackImpl = function<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n) {\n  // This will call `this.onError(err)` if an error was caught.\n  ReactFbErrorUtils.invokeGuardedCallback.apply(this, arguments);\n};\n\nexport default invokeGuardedCallbackImpl;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invokeGuardedCallbackImpl from './invokeGuardedCallbackImpl';\n\n// Used by Fiber to simulate a try-catch.\nlet hasError: boolean = false;\nlet caughtError: mixed = null;\n\n// Used by event system to capture/rethrow the first error.\nlet hasRethrowError: boolean = false;\nlet rethrowError: mixed = null;\n\nconst reporter = {\n  onError(error: mixed) {\n    hasError = true;\n    caughtError = error;\n  },\n};\n\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallback<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl.apply(reporter, arguments);\n}\n\n/**\n * Same as invokeGuardedCallback, but instead of returning an error, it stores\n * it in a global so it can be rethrown by `rethrowCaughtError` later.\n * TODO: See if caughtError and rethrowError can be unified.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallbackAndCatchFirstError<\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  Context,\n>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => void,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  invokeGuardedCallback.apply(this, arguments);\n  if (hasError) {\n    const error = clearCaughtError();\n    if (!hasRethrowError) {\n      hasRethrowError = true;\n      rethrowError = error;\n    }\n  }\n}\n\n/**\n * During execution of guarded functions we will capture the first error which\n * we will rethrow to be handled by the top level error handler.\n */\nexport function rethrowCaughtError() {\n  if (hasRethrowError) {\n    const error = rethrowError;\n    hasRethrowError = false;\n    rethrowError = null;\n    throw error;\n  }\n}\n\nexport function hasCaughtError() {\n  return hasError;\n}\n\nexport function clearCaughtError() {\n  if (hasError) {\n    const error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    throw new Error(\n      'clearCaughtError was called but no error was captured. This error ' +\n        'is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {\n  OffscreenState,\n  OffscreenInstance,\n} from './ReactFiberOffscreenComponent';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {RootState} from './ReactFiberRoot.old';\nimport type {Transition} from './ReactFiberTracingMarkerComponent.old';\n\nimport {\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableSchedulingProfiler,\n  enableSuspenseCallback,\n  enableScopeAPI,\n  enableStrictEffects,\n  deletedTreeCleanUpLevel,\n  enableSuspenseLayoutEffectSemantics,\n  enableUpdaterTracking,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport {detachDeletedInstance} from './ReactFiberHostConfig';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  ChildDeletion,\n  Snapshot,\n  Update,\n  Ref,\n  Hydrating,\n  Passive,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  Visibility,\n} from './ReactFiberFlags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n  getCurrentFiber as getCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  isCurrentUpdateNested,\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ConcurrentMode, NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {commitUpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n  prepareForCommit,\n  beforeActiveInstanceBlur,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveProfilerEffect,\n  restorePendingUpdaters,\n  addTransitionStartCallbackToPendingTransition,\n  addTransitionCompleteCallbackToPendingTransition,\n  setIsRunningInsertionEffect,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Insertion as HookInsertion,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\nimport {invokeGuardedCallback, clearCaughtError} from 'shared/ReactErrorUtils';\nimport {\n  isDevToolsPresent,\n  markComponentPassiveEffectMountStarted,\n  markComponentPassiveEffectMountStopped,\n  markComponentPassiveEffectUnmountStarted,\n  markComponentPassiveEffectUnmountStopped,\n  markComponentLayoutEffectMountStarted,\n  markComponentLayoutEffectMountStopped,\n  markComponentLayoutEffectUnmountStarted,\n  markComponentLayoutEffectUnmountStopped,\n  onCommitUnmount,\n} from './ReactFiberDevToolsHook.old';\nimport {releaseCache, retainCache} from './ReactFiberCacheComponent.old';\nimport {clearTransitionsForLanes} from './ReactFiberLane.old';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\n// Used during the commit phase to track the state of the Offscreen component stack.\n// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n// Only used when enableSuspenseLayoutEffectSemantics is enabled.\nlet offscreenSubtreeIsHidden: boolean = false;\nlet offscreenSubtreeWasHidden: boolean = false;\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nlet nextEffect: Fiber | null = null;\n\n// Used for Profiling builds to track updaters.\nlet inProgressLanes: Lanes | null = null;\nlet inProgressRoot: FiberRoot | null = null;\n\nexport function reportUncaughtErrorInDEV(error: mixed) {\n  // Wrapping each small part of the commit phase into a guarded\n  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n  // But we rely on it to surface errors to DEV tools like overlays\n  // (https://github.com/facebook/react/issues/21712).\n  // As a compromise, rethrow only caught errors in a guard.\n  if (__DEV__) {\n    invokeGuardedCallback(null, () => {\n      throw error;\n    });\n    clearCaughtError();\n  }\n}\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallCommitHookLayoutEffectListMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  try {\n    commitHookEffectListMount(HookLayout, current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    callComponentWillUnmountWithTimer(current, instance);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyCallComponentDidMount(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  instance: any,\n) {\n  try {\n    instance.componentDidMount();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\n// Capture errors so they don't interrupt mounting.\nfunction safelyAttachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  try {\n    commitAttachRef(current);\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nfunction safelyDetachRef(current: Fiber, nearestMountedAncestor: Fiber | null) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      let retVal;\n      try {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          current.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            retVal = ref(null);\n          } finally {\n            recordLayoutEffectDuration(current);\n          }\n        } else {\n          retVal = ref(null);\n        }\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n      if (__DEV__) {\n        if (typeof retVal === 'function') {\n          console.error(\n            'Unexpected return value from a callback ref in %s. ' +\n              'A callback ref should not return a function.',\n            getComponentNameFromFiber(current),\n          );\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  destroy: () => void,\n) {\n  try {\n    destroy();\n  } catch (error) {\n    captureCommitPhaseError(current, nearestMountedAncestor, error);\n  }\n}\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function commitBeforeMutationEffects(\n  root: FiberRoot,\n  firstChild: Fiber,\n) {\n  focusedInstanceHandle = prepareForCommit(root.containerInfo);\n\n  nextEffect = firstChild;\n  commitBeforeMutationEffects_begin();\n\n  // We no longer need to track the active instance fiber\n  const shouldFire = shouldFireAfterActiveInstanceBlur;\n  shouldFireAfterActiveInstanceBlur = false;\n  focusedInstanceHandle = null;\n\n  return shouldFire;\n}\n\nfunction commitBeforeMutationEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // This phase is only used for beforeActiveInstanceBlur.\n    // Let's skip the whole loop if it's off.\n    if (enableCreateEventHandleAPI) {\n      // TODO: Should wrap this in flags check, too, as optimization\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const deletion = deletions[i];\n          commitBeforeMutationEffectsDeletion(deletion);\n        }\n      }\n    }\n\n    const child = fiber.child;\n    if (\n      (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags &&\n      child !== null\n    ) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitBeforeMutationEffects_complete();\n    }\n  }\n}\n\nfunction commitBeforeMutationEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      commitBeforeMutationEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitBeforeMutationEffectsOnFiber(finishedWork: Fiber) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  if (enableCreateEventHandleAPI) {\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      // Check to see if the focused element was inside of a hidden (Suspense) subtree.\n      // TODO: Move this out of the hot path using a dedicated effect tag.\n      if (\n        finishedWork.tag === SuspenseComponent &&\n        isSuspenseBoundaryBeingHidden(current, finishedWork) &&\n        doesFiberContain(finishedWork, focusedInstanceHandle)\n      ) {\n        shouldFireAfterActiveInstanceBlur = true;\n        beforeActiveInstanceBlur(finishedWork);\n      }\n    }\n  }\n\n  if ((flags & Snapshot) !== NoFlags) {\n    setCurrentDebugFiberInDEV(finishedWork);\n\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        break;\n      }\n      case ClassComponent: {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentNameFromFiber(finishedWork),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n        break;\n      }\n      case HostRoot: {\n        if (supportsMutation) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n        break;\n      }\n      case HostComponent:\n      case HostText:\n      case HostPortal:\n      case IncompleteClassComponent:\n        // Nothing to do for these component types\n        break;\n      default: {\n        throw new Error(\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction commitBeforeMutationEffectsDeletion(deletion: Fiber) {\n  if (enableCreateEventHandleAPI) {\n    // TODO (effects) It would be nice to avoid calling doesFiberContain()\n    // Maybe we can repurpose one of the subtreeFlags positions for this instead?\n    // Use it to store which part of the tree the focused instance is in?\n    // This assumes we can safely determine that instance during the \"render\" phase.\n    if (doesFiberContain(deletion, ((focusedInstanceHandle: any): Fiber))) {\n      shouldFireAfterActiveInstanceBlur = true;\n      beforeActiveInstanceBlur(deletion);\n    }\n  }\n}\n\nfunction commitHookEffectListUnmount(\n  flags: HookFlags,\n  finishedWork: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectUnmountStarted(finishedWork);\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectUnmountStarted(finishedWork);\n            }\n          }\n\n          if (__DEV__) {\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(true);\n            }\n          }\n          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n          if (__DEV__) {\n            if ((flags & HookInsertion) !== NoHookEffect) {\n              setIsRunningInsertionEffect(false);\n            }\n          }\n\n          if (enableSchedulingProfiler) {\n            if ((flags & HookPassive) !== NoHookEffect) {\n              markComponentPassiveEffectUnmountStopped();\n            } else if ((flags & HookLayout) !== NoHookEffect) {\n              markComponentLayoutEffectUnmountStopped();\n            }\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(flags: HookFlags, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & flags) === flags) {\n        if (enableSchedulingProfiler) {\n          if ((flags & HookPassive) !== NoHookEffect) {\n            markComponentPassiveEffectMountStarted(finishedWork);\n          } else if ((flags & HookLayout) !== NoHookEffect) {\n            markComponentLayoutEffectMountStarted(finishedWork);\n          }\n        }\n\n        // Mount\n        const create = effect.create;\n        if (__DEV__) {\n          if ((flags & HookInsertion) !== NoHookEffect) {\n            setIsRunningInsertionEffect(true);\n          }\n        }\n        effect.destroy = create();\n        if (__DEV__) {\n          if ((flags & HookInsertion) !== NoHookEffect) {\n            setIsRunningInsertionEffect(false);\n          }\n        }\n\n        if (enableSchedulingProfiler) {\n          if ((flags & HookPassive) !== NoHookEffect) {\n            markComponentPassiveEffectMountStopped();\n          } else if ((flags & HookLayout) !== NoHookEffect) {\n            markComponentLayoutEffectMountStopped();\n          }\n        }\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let hookName;\n            if ((effect.tag & HookLayout) !== NoFlags) {\n              hookName = 'useLayoutEffect';\n            } else if ((effect.tag & HookInsertion) !== NoFlags) {\n              hookName = 'useInsertionEffect';\n            } else {\n              hookName = 'useEffect';\n            }\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote ' +\n                hookName +\n                '(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                hookName +\n                '(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              '%s must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              hookName,\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          let phase = finishedWork.alternate === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onPostCommit === 'function') {\n            onPostCommit(id, phase, passiveEffectDuration, commitTime);\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          outer: while (parentFiber !== null) {\n            switch (parentFiber.tag) {\n              case HostRoot:\n                const root = parentFiber.stateNode;\n                root.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n              case Profiler:\n                const parentStateNode = parentFiber.stateNode;\n                parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                break outer;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitLayoutEffectOnFiber(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  if ((finishedWork.flags & LayoutMask) !== NoFlags) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        if (\n          !enableSuspenseLayoutEffectSemantics ||\n          !offscreenSubtreeWasHidden\n        ) {\n          // At this point layout effects have already been destroyed (during mutation phase).\n          // This is done to prevent sibling component effects from interfering with each other,\n          // e.g. a destroy function in one component should never override a ref set\n          // by a create function in another component during the same commit.\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListMount(\n                HookLayout | HookHasEffect,\n                finishedWork,\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n          }\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = finishedWork.stateNode;\n        if (finishedWork.flags & Update) {\n          if (!offscreenSubtreeWasHidden) {\n            if (current === null) {\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidMount. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidMount();\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidMount();\n              }\n            } else {\n              const prevProps =\n                finishedWork.elementType === finishedWork.type\n                  ? current.memoizedProps\n                  : resolveDefaultProps(\n                      finishedWork.type,\n                      current.memoizedProps,\n                    );\n              const prevState = current.memoizedState;\n              // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n              if (__DEV__) {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    console.error(\n                      'Expected %s props to match memoized props before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.props`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                  if (instance.state !== finishedWork.memoizedState) {\n                    console.error(\n                      'Expected %s state to match memoized state before ' +\n                        'componentDidUpdate. ' +\n                        'This might either be because of a bug in React, or because ' +\n                        'a component reassigns its own `this.state`. ' +\n                        'Please file an issue.',\n                      getComponentNameFromFiber(finishedWork) || 'instance',\n                    );\n                  }\n                }\n              }\n              if (\n                enableProfilerTimer &&\n                enableProfilerCommitHooks &&\n                finishedWork.mode & ProfileMode\n              ) {\n                try {\n                  startLayoutEffectTimer();\n                  instance.componentDidUpdate(\n                    prevProps,\n                    prevState,\n                    instance.__reactInternalSnapshotBeforeUpdate,\n                  );\n                } finally {\n                  recordLayoutEffectDuration(finishedWork);\n                }\n              } else {\n                instance.componentDidUpdate(\n                  prevProps,\n                  prevState,\n                  instance.__reactInternalSnapshotBeforeUpdate,\n                );\n              }\n            }\n          }\n        }\n\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'processing the update queue. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentNameFromFiber(finishedWork) || 'instance',\n                );\n              }\n            }\n          }\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostRoot: {\n        // TODO: I think this is now always non-null by the time it reaches the\n        // commit phase. Consider removing the type check.\n        const updateQueue: UpdateQueue<\n          *,\n        > | null = (finishedWork.updateQueue: any);\n        if (updateQueue !== null) {\n          let instance = null;\n          if (finishedWork.child !== null) {\n            switch (finishedWork.child.tag) {\n              case HostComponent:\n                instance = getPublicInstance(finishedWork.child.stateNode);\n                break;\n              case ClassComponent:\n                instance = finishedWork.child.stateNode;\n                break;\n            }\n          }\n          commitUpdateQueue(finishedWork, updateQueue, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        const instance: Instance = finishedWork.stateNode;\n\n        // Renderers may schedule work to be done after host components are mounted\n        // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n        // These effects should only be committed when components are first mounted,\n        // aka when there is no current/alternate.\n        if (current === null && finishedWork.flags & Update) {\n          const type = finishedWork.type;\n          const props = finishedWork.memoizedProps;\n          commitMount(instance, type, props, finishedWork);\n        }\n\n        break;\n      }\n      case HostText: {\n        // We have no life-cycles associated with text.\n        break;\n      }\n      case HostPortal: {\n        // We have no life-cycles associated with portals.\n        break;\n      }\n      case Profiler: {\n        if (enableProfilerTimer) {\n          const {onCommit, onRender} = finishedWork.memoizedProps;\n          const {effectDuration} = finishedWork.stateNode;\n\n          const commitTime = getCommitTime();\n\n          let phase = current === null ? 'mount' : 'update';\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = 'nested-update';\n            }\n          }\n\n          if (typeof onRender === 'function') {\n            onRender(\n              finishedWork.memoizedProps.id,\n              phase,\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n            );\n          }\n\n          if (enableProfilerCommitHooks) {\n            if (typeof onCommit === 'function') {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                phase,\n                effectDuration,\n                commitTime,\n              );\n            }\n\n            // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n            // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n            // because the effect is also where times bubble to parent Profilers.\n            enqueuePendingPassiveProfilerEffect(finishedWork);\n\n            // Propagate layout effect durations to the next nearest Profiler ancestor.\n            // Do not reset these values until the next render so DevTools has a chance to read them first.\n            let parentFiber = finishedWork.return;\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  const root = parentFiber.stateNode;\n                  root.effectDuration += effectDuration;\n                  break outer;\n                case Profiler:\n                  const parentStateNode = parentFiber.stateNode;\n                  parentStateNode.effectDuration += effectDuration;\n                  break outer;\n              }\n              parentFiber = parentFiber.return;\n            }\n          }\n        }\n        break;\n      }\n      case SuspenseComponent: {\n        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n        break;\n      }\n      case SuspenseListComponent:\n      case IncompleteClassComponent:\n      case ScopeComponent:\n      case OffscreenComponent:\n      case LegacyHiddenComponent:\n      case TracingMarkerComponent: {\n        break;\n      }\n\n      default:\n        throw new Error(\n          'This unit of work tag should not have side-effects. This error is ' +\n            'likely caused by a bug in React. Please file an issue.',\n        );\n    }\n  }\n\n  if (!enableSuspenseLayoutEffectSemantics || !offscreenSubtreeWasHidden) {\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (finishedWork.flags & Ref && finishedWork.tag !== ScopeComponent) {\n        commitAttachRef(finishedWork);\n      }\n    } else {\n      if (finishedWork.flags & Ref) {\n        commitAttachRef(finishedWork);\n      }\n    }\n  }\n}\n\nfunction reappearLayoutEffectsOnFiber(node: Fiber) {\n  // Turn on layout effects in a tree that previously disappeared.\n  // TODO (Offscreen) Check: flags & LayoutStatic\n  switch (node.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        node.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          safelyCallCommitHookLayoutEffectListMount(node, node.return);\n        } finally {\n          recordLayoutEffectDuration(node);\n        }\n      } else {\n        safelyCallCommitHookLayoutEffectListMount(node, node.return);\n      }\n      break;\n    }\n    case ClassComponent: {\n      const instance = node.stateNode;\n      if (typeof instance.componentDidMount === 'function') {\n        safelyCallComponentDidMount(node, node.return, instance);\n      }\n      safelyAttachRef(node, node.return);\n      break;\n    }\n    case HostComponent: {\n      safelyAttachRef(node, node.return);\n      break;\n    }\n  }\n}\n\nfunction commitTransitionProgress(\n  finishedRoot: FiberRoot,\n  offscreenFiber: Fiber,\n) {\n  if (enableTransitionTracing) {\n    // This function adds suspense boundaries to the root\n    // or tracing marker's pendingSuspenseBoundaries map.\n    // When a suspense boundary goes from a resolved to a fallback\n    // state we add the boundary to the map, and when it goes from\n    // a fallback to a resolved state, we remove the boundary from\n    // the map.\n\n    // We use stateNode on the Offscreen component as a stable object\n    // that doesnt change from render to render. This way we can\n    // distinguish between different Offscreen instances (vs. the same\n    // Offscreen instance with different fibers)\n    const offscreenInstance: OffscreenInstance = offscreenFiber.stateNode;\n\n    let prevState: SuspenseState | null = null;\n    const previousFiber = offscreenFiber.alternate;\n    if (previousFiber !== null && previousFiber.memoizedState !== null) {\n      prevState = previousFiber.memoizedState;\n    }\n    const nextState: SuspenseState | null = offscreenFiber.memoizedState;\n\n    const wasHidden = prevState !== null;\n    const isHidden = nextState !== null;\n\n    const rootState: RootState = finishedRoot.current.memoizedState;\n    // TODO(luna) move pendingSuspenseBoundaries and transitions from\n    // HostRoot fiber to FiberRoot\n    const rootPendingBoundaries = rootState.pendingSuspenseBoundaries;\n    const rootTransitions = rootState.transitions;\n\n    // If there is a name on the suspense boundary, store that in\n    // the pending boundaries.\n    let name = null;\n    const parent = offscreenFiber.return;\n    if (\n      parent !== null &&\n      parent.tag === SuspenseComponent &&\n      parent.memoizedProps.unstable_name\n    ) {\n      name = parent.memoizedProps.unstable_name;\n    }\n\n    if (rootPendingBoundaries !== null) {\n      if (previousFiber === null) {\n        // Initial mount\n        if (isHidden) {\n          rootPendingBoundaries.set(offscreenInstance, {\n            name,\n          });\n        }\n      } else {\n        if (wasHidden && !isHidden) {\n          // The suspense boundary went from hidden to visible. Remove\n          // the boundary from the pending suspense boundaries set\n          // if it's there\n          if (rootPendingBoundaries.has(offscreenInstance)) {\n            rootPendingBoundaries.delete(offscreenInstance);\n\n            if (rootPendingBoundaries.size === 0 && rootTransitions !== null) {\n              rootTransitions.forEach(transition => {\n                addTransitionCompleteCallbackToPendingTransition({\n                  transitionName: transition.name,\n                  startTime: transition.startTime,\n                });\n              });\n            }\n          }\n        } else if (!wasHidden && isHidden) {\n          // The suspense boundaries was just hidden. Add the boundary\n          // to the pending boundary set if it's there\n          rootPendingBoundaries.set(offscreenInstance, {\n            name,\n          });\n        }\n      }\n    }\n  }\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  // Only hide or unhide the top-most host nodes.\n  let hostSubtreeRoot = null;\n\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        if (hostSubtreeRoot === null) {\n          hostSubtreeRoot = node;\n          try {\n            const instance = node.stateNode;\n            if (isHidden) {\n              hideInstance(instance);\n            } else {\n              unhideInstance(node.stateNode, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (node.tag === HostText) {\n        if (hostSubtreeRoot === null) {\n          try {\n            const instance = node.stateNode;\n            if (isHidden) {\n              hideTextInstance(instance);\n            } else {\n              unhideTextInstance(instance, node.memoizedProps);\n            }\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden.\n        // Don't search any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n\n        if (hostSubtreeRoot === node) {\n          hostSubtreeRoot = null;\n        }\n\n        node = node.return;\n      }\n\n      if (hostSubtreeRoot === node) {\n        hostSubtreeRoot = null;\n      }\n\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      let retVal;\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          retVal = ref(instanceToUse);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        retVal = ref(instanceToUse);\n      }\n      if (__DEV__) {\n        if (typeof retVal === 'function') {\n          console.error(\n            'Unexpected return value from a callback ref in %s. ' +\n              'A callback ref should not return a function.',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentNameFromFiber(finishedWork),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          currentRef(null);\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        currentRef(null);\n      }\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointer to disconnect it from the tree.\n  // This enables us to detect and warn against state updates on an unmounted component.\n  // It also prevents events from bubbling from within disconnected components.\n  //\n  // Ideally, we should also clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child.\n  // This child itself will be GC:ed when the parent updates the next time.\n  //\n  // Note that we can't clear child or sibling pointers yet.\n  // They're needed for passive effects and for findDOMNode.\n  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n  //\n  // Don't reset the alternate yet, either. We need that so we can detach the\n  // alternate's fields in the passive phase. Clearing the return pointer is\n  // sufficient for findDOMNode semantics.\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.return = null;\n  }\n  fiber.return = null;\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber) {\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    fiber.alternate = null;\n    detachFiberAfterEffects(alternate);\n  }\n\n  // Note: Defensively using negation instead of < in case\n  // `deletedTreeCleanUpLevel` is undefined.\n  if (!(deletedTreeCleanUpLevel >= 2)) {\n    // This is the default branch (level 0).\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.dependencies = null;\n    fiber.memoizedProps = null;\n    fiber.memoizedState = null;\n    fiber.pendingProps = null;\n    fiber.sibling = null;\n    fiber.stateNode = null;\n    fiber.updateQueue = null;\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n  } else {\n    // Clear cyclical Fiber fields. This level alone is designed to roughly\n    // approximate the planned Fiber refactor. In that world, `setState` will be\n    // bound to a special \"instance\" object instead of a Fiber. The Instance\n    // object will not have any of these fields. It will only be connected to\n    // the fiber tree via a single link at the root. So if this level alone is\n    // sufficient to fix memory issues, that bodes well for our plans.\n    fiber.child = null;\n    fiber.deletions = null;\n    fiber.sibling = null;\n\n    // The `stateNode` is cyclical because on host nodes it points to the host\n    // tree, which has its own pointers to children, parents, and siblings.\n    // The other host nodes also point back to fibers, so we should detach that\n    // one, too.\n    if (fiber.tag === HostComponent) {\n      const hostInstance: Instance = fiber.stateNode;\n      if (hostInstance !== null) {\n        detachDeletedInstance(hostInstance);\n      }\n    }\n    fiber.stateNode = null;\n\n    // I'm intentionally not clearing the `return` field in this level. We\n    // already disconnect the `return` pointer at the root of the deleted\n    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not\n    // cyclical — it's only cyclical when combined with `child`, `sibling`, and\n    // `alternate`. But we'll clear it in the next level anyway, just in case.\n\n    if (__DEV__) {\n      fiber._debugOwner = null;\n    }\n\n    if (deletedTreeCleanUpLevel >= 3) {\n      // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else\n      //\n      // The purpose of this branch is to be super aggressive so we can measure\n      // if there's any difference in memory impact. If there is, that could\n      // indicate a React leak we don't know about.\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null;\n      // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n      fiber.updateQueue = null;\n    }\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n\n  throw new Error(\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  switch (parentFiber.tag) {\n    case HostComponent: {\n      const parent: Instance = parentFiber.stateNode;\n      if (parentFiber.flags & ContentReset) {\n        // Reset the text content of the parent before doing any insertions\n        resetTextContent(parent);\n        // Clear ContentReset from the effect tag\n        parentFiber.flags &= ~ContentReset;\n      }\n\n      const before = getHostSibling(finishedWork);\n      // We only have the top Fiber that was inserted but we need to recurse down its\n      // children to find all the terminal nodes.\n      insertOrAppendPlacementNode(finishedWork, before, parent);\n      break;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const parent: Container = parentFiber.stateNode.containerInfo;\n      const before = getHostSibling(finishedWork);\n      insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n      break;\n    }\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      throw new Error(\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost) {\n    const stateNode = node.stateNode;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\n// These are tracked on the stack as we recursively traverse a\n// deleted subtree.\n// TODO: Update these during the whole mutation phase, not just during\n// a deletion.\nlet hostParent: Instance | Container | null = null;\nlet hostParentIsContainer: boolean = false;\n\nfunction commitDeletionEffects(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  deletedFiber: Fiber,\n) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was deleted but we need to recurse down its\n    // children to find all the terminal nodes.\n\n    // Recursively delete all host nodes from the parent, detach refs, clean\n    // up mounted layout effects, and call componentWillUnmount.\n\n    // We only need to remove the topmost host child in each branch. But then we\n    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n    // could split this into two separate traversals functions, where the second\n    // one doesn't include any removeChild logic. This is maybe the same\n    // function as \"disappearLayoutEffects\" (or whatever that turns into after\n    // the layout phase is refactored to use recursion).\n\n    // Before starting, find the nearest host parent on the stack so we know\n    // which instance/container to remove the children from.\n    // TODO: Instead of searching up the fiber return path on every deletion, we\n    // can track the nearest host component on the JS stack as we traverse the\n    // tree during the commit phase. This would make insertions faster, too.\n    let parent = returnFiber;\n    findParent: while (parent !== null) {\n      switch (parent.tag) {\n        case HostComponent: {\n          hostParent = parent.stateNode;\n          hostParentIsContainer = false;\n          break findParent;\n        }\n        case HostRoot: {\n          hostParent = parent.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          break findParent;\n        }\n        case HostPortal: {\n          hostParent = parent.stateNode.containerInfo;\n          hostParentIsContainer = true;\n          break findParent;\n        }\n      }\n      parent = parent.return;\n    }\n    if (hostParent === null) {\n      throw new Error(\n        'Expected to find a host parent. This error is likely caused by ' +\n          'a bug in React. Please file an issue.',\n      );\n    }\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n    hostParent = null;\n    hostParentIsContainer = false;\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n  }\n\n  detachFiberMutation(deletedFiber);\n}\n\nfunction recursivelyTraverseDeletionEffects(\n  finishedRoot,\n  nearestMountedAncestor,\n  parent,\n) {\n  // TODO: Use a static flag to skip trees that don't have unmount effects\n  let child = parent.child;\n  while (child !== null) {\n    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n    child = child.sibling;\n  }\n}\n\nfunction commitDeletionEffectsOnFiber(\n  finishedRoot: FiberRoot,\n  nearestMountedAncestor: Fiber,\n  deletedFiber: Fiber,\n) {\n  onCommitUnmount(deletedFiber);\n\n  // The cases in this outer switch modify the stack before they traverse\n  // into their subtree. There are simpler cases in the inner switch\n  // that don't modify the stack.\n  switch (deletedFiber.tag) {\n    case HostComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      }\n      // Intentional fallthrough to next branch\n    }\n    // eslint-disable-next-line-no-fallthrough\n    case HostText: {\n      // We only need to remove the nearest host child. Set the host parent\n      // to `null` on the stack to indicate that nested children don't\n      // need to be removed.\n      if (supportsMutation) {\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = null;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n\n        if (hostParent !== null) {\n          // Now that all the child effects have unmounted, we can remove the\n          // node from the tree.\n          if (hostParentIsContainer) {\n            removeChildFromContainer(\n              ((hostParent: any): Container),\n              (deletedFiber.stateNode: Instance | TextInstance),\n            );\n          } else {\n            removeChild(\n              ((hostParent: any): Instance),\n              (deletedFiber.stateNode: Instance | TextInstance),\n            );\n          }\n        }\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((deletedFiber.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Dehydrated fragments don't have any children\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (supportsMutation) {\n        if (hostParent !== null) {\n          if (hostParentIsContainer) {\n            clearSuspenseBoundaryFromContainer(\n              ((hostParent: any): Container),\n              (deletedFiber.stateNode: SuspenseInstance),\n            );\n          } else {\n            clearSuspenseBoundary(\n              ((hostParent: any): Instance),\n              (deletedFiber.stateNode: SuspenseInstance),\n            );\n          }\n        }\n      }\n      return;\n    }\n    case HostPortal: {\n      if (supportsMutation) {\n        // When we go into a portal, it becomes the parent to remove from.\n        const prevHostParent = hostParent;\n        const prevHostParentIsContainer = hostParentIsContainer;\n        hostParent = deletedFiber.stateNode.containerInfo;\n        hostParentIsContainer = true;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        hostParent = prevHostParent;\n        hostParentIsContainer = prevHostParentIsContainer;\n      } else {\n        emptyPortalContainer(deletedFiber);\n\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      return;\n    }\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        const updateQueue: FunctionComponentUpdateQueue | null = (deletedFiber.updateQueue: any);\n        if (updateQueue !== null) {\n          const lastEffect = updateQueue.lastEffect;\n          if (lastEffect !== null) {\n            const firstEffect = lastEffect.next;\n\n            let effect = firstEffect;\n            do {\n              const {destroy, tag} = effect;\n              if (destroy !== undefined) {\n                if ((tag & HookInsertion) !== NoHookEffect) {\n                  safelyCallDestroy(\n                    deletedFiber,\n                    nearestMountedAncestor,\n                    destroy,\n                  );\n                } else if ((tag & HookLayout) !== NoHookEffect) {\n                  if (enableSchedulingProfiler) {\n                    markComponentLayoutEffectUnmountStarted(deletedFiber);\n                  }\n\n                  if (\n                    enableProfilerTimer &&\n                    enableProfilerCommitHooks &&\n                    deletedFiber.mode & ProfileMode\n                  ) {\n                    startLayoutEffectTimer();\n                    safelyCallDestroy(\n                      deletedFiber,\n                      nearestMountedAncestor,\n                      destroy,\n                    );\n                    recordLayoutEffectDuration(deletedFiber);\n                  } else {\n                    safelyCallDestroy(\n                      deletedFiber,\n                      nearestMountedAncestor,\n                      destroy,\n                    );\n                  }\n\n                  if (enableSchedulingProfiler) {\n                    markComponentLayoutEffectUnmountStopped();\n                  }\n                }\n              }\n              effect = effect.next;\n            } while (effect !== firstEffect);\n          }\n        }\n      }\n\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case ClassComponent: {\n      if (!offscreenSubtreeWasHidden) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n        const instance = deletedFiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(\n            deletedFiber,\n            nearestMountedAncestor,\n            instance,\n          );\n        }\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(deletedFiber, nearestMountedAncestor);\n      }\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n    case OffscreenComponent: {\n      if (\n        // TODO: Remove this dead flag\n        enableSuspenseLayoutEffectSemantics &&\n        deletedFiber.mode & ConcurrentMode\n      ) {\n        // If this offscreen component is hidden, we already unmounted it. Before\n        // deleting the children, track that it's already unmounted so that we\n        // don't attempt to unmount the effects again.\n        // TODO: If the tree is hidden, in most cases we should be able to skip\n        // over the nested children entirely. An exception is we haven't yet found\n        // the topmost host node to delete, which we already track on the stack.\n        // But the other case is portals, which need to be detached no matter how\n        // deeply they are nested. We should use a subtree flag to track whether a\n        // subtree includes a nested portal.\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeWasHidden =\n          prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n      } else {\n        recursivelyTraverseDeletionEffects(\n          finishedRoot,\n          nearestMountedAncestor,\n          deletedFiber,\n        );\n      }\n      break;\n    }\n    default: {\n      recursivelyTraverseDeletionEffects(\n        finishedRoot,\n        nearestMountedAncestor,\n        deletedFiber,\n      );\n      return;\n    }\n  }\n}\nfunction commitSuspenseCallback(finishedWork: Fiber) {\n  // TODO: Move this to passive phase\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n          if (enableSuspenseCallback) {\n            const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n            if (hydrationCallbacks !== null) {\n              const onHydrated = hydrationCallbacks.onHydrated;\n              if (onHydrated) {\n                onHydrated(suspenseInstance);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork: Fiber) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    let retryCache = finishedWork.stateNode;\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n    wakeables.forEach(wakeable => {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      const retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n      if (!retryCache.has(wakeable)) {\n        retryCache.add(wakeable);\n\n        if (enableUpdaterTracking) {\n          if (isDevToolsPresent) {\n            if (inProgressLanes !== null && inProgressRoot !== null) {\n              // If we have pending work still, associate the original updaters with it.\n              restorePendingUpdaters(inProgressRoot, inProgressLanes);\n            } else {\n              throw Error(\n                'Expected finished root and lanes to be set. This is a bug in React.',\n              );\n            }\n          }\n        }\n\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nexport function commitMutationEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n) {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n\n  setCurrentDebugFiberInDEV(finishedWork);\n  commitMutationEffectsOnFiber(finishedWork, root, committedLanes);\n  setCurrentDebugFiberInDEV(finishedWork);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction recursivelyTraverseMutationEffects(\n  root: FiberRoot,\n  parentFiber: Fiber,\n  lanes: Lanes,\n) {\n  // Deletions effects can be scheduled on any fiber type. They need to happen\n  // before the children effects hae fired.\n  const deletions = parentFiber.deletions;\n  if (deletions !== null) {\n    for (let i = 0; i < deletions.length; i++) {\n      const childToDelete = deletions[i];\n      try {\n        commitDeletionEffects(root, parentFiber, childToDelete);\n      } catch (error) {\n        captureCommitPhaseError(childToDelete, parentFiber, error);\n      }\n    }\n  }\n\n  const prevDebugFiber = getCurrentDebugFiberInDEV();\n  if (parentFiber.subtreeFlags & MutationMask) {\n    let child = parentFiber.child;\n    while (child !== null) {\n      setCurrentDebugFiberInDEV(child);\n      commitMutationEffectsOnFiber(child, root, lanes);\n      child = child.sibling;\n    }\n  }\n  setCurrentDebugFiberInDEV(prevDebugFiber);\n}\n\nfunction commitMutationEffectsOnFiber(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  lanes: Lanes,\n) {\n  const current = finishedWork.alternate;\n  const flags = finishedWork.flags;\n\n  // The effect flag should be checked *after* we refine the type of fiber,\n  // because the fiber tag is more specific. An exception is any flag related\n  // to reconcilation, because those can be set on all fiber types.\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        try {\n          commitHookEffectListUnmount(\n            HookInsertion | HookHasEffect,\n            finishedWork,\n            finishedWork.return,\n          );\n          commitHookEffectListMount(\n            HookInsertion | HookHasEffect,\n            finishedWork,\n          );\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n              finishedWork.return,\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Ref) {\n        if (current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n      return;\n    }\n    case HostComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Ref) {\n        if (current !== null) {\n          safelyDetachRef(current, current.return);\n        }\n      }\n      if (supportsMutation) {\n        // TODO: ContentReset gets cleared by the children during the commit\n        // phase. This is a refactor hazard because it means we must read\n        // flags the flags after `commitReconciliationEffects` has already run;\n        // the order matters. We should refactor so that ContentReset does not\n        // rely on mutating the flag during commit. Like by setting a flag\n        // during the render phase instead.\n        if (finishedWork.flags & ContentReset) {\n          const instance: Instance = finishedWork.stateNode;\n          try {\n            resetTextContent(instance);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n\n        if (flags & Update) {\n          const instance: Instance = finishedWork.stateNode;\n          if (instance != null) {\n            // Commit the work prepared earlier.\n            const newProps = finishedWork.memoizedProps;\n            // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n            const oldProps =\n              current !== null ? current.memoizedProps : newProps;\n            const type = finishedWork.type;\n            // TODO: Type the updateQueue to be specific to host components.\n            const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n            finishedWork.updateQueue = null;\n            if (updatePayload !== null) {\n              try {\n                commitUpdate(\n                  instance,\n                  updatePayload,\n                  type,\n                  oldProps,\n                  newProps,\n                  finishedWork,\n                );\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error,\n                );\n              }\n            }\n          }\n        }\n      }\n      return;\n    }\n    case HostText: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsMutation) {\n          if (finishedWork.stateNode === null) {\n            throw new Error(\n              'This should have a text node initialized. This error is likely ' +\n                'caused by a bug in React. Please file an issue.',\n            );\n          }\n\n          const textInstance: TextInstance = finishedWork.stateNode;\n          const newText: string = finishedWork.memoizedProps;\n          // For hydration we reuse the update path but we treat the oldProps\n          // as the newProps. The updatePayload will contain the real change in\n          // this case.\n          const oldText: string =\n            current !== null ? current.memoizedProps : newText;\n\n          try {\n            commitTextUpdate(textInstance, oldText, newText);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case HostRoot: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsMutation && supportsHydration) {\n          if (current !== null) {\n            const prevRootState: RootState = current.memoizedState;\n            if (prevRootState.isDehydrated) {\n              try {\n                commitHydratedContainer(root.containerInfo);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error,\n                );\n              }\n            }\n          }\n        }\n        if (supportsPersistence) {\n          const containerInfo = root.containerInfo;\n          const pendingChildren = root.pendingChildren;\n          try {\n            replaceContainerChildren(containerInfo, pendingChildren);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case HostPortal: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        if (supportsPersistence) {\n          const portal = finishedWork.stateNode;\n          const containerInfo = portal.containerInfo;\n          const pendingChildren = portal.pendingChildren;\n          try {\n            replaceContainerChildren(containerInfo, pendingChildren);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n      return;\n    }\n    case SuspenseComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      const offscreenFiber: Fiber = (finishedWork.child: any);\n\n      if (offscreenFiber.flags & Visibility) {\n        const offscreenInstance: OffscreenInstance = offscreenFiber.stateNode;\n        const newState: OffscreenState | null = offscreenFiber.memoizedState;\n        const isHidden = newState !== null;\n\n        // Track the current state on the Offscreen instance so we can\n        // read it during an event\n        offscreenInstance.isHidden = isHidden;\n\n        if (isHidden) {\n          const wasHidden =\n            offscreenFiber.alternate !== null &&\n            offscreenFiber.alternate.memoizedState !== null;\n          if (!wasHidden) {\n            // TODO: Move to passive phase\n            markCommitTimeOfFallback();\n          }\n        }\n      }\n\n      if (flags & Update) {\n        try {\n          commitSuspenseCallback(finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        attachSuspenseRetryListeners(finishedWork);\n      }\n      return;\n    }\n    case OffscreenComponent: {\n      const wasHidden = current !== null && current.memoizedState !== null;\n\n      if (\n        // TODO: Remove this dead flag\n        enableSuspenseLayoutEffectSemantics &&\n        finishedWork.mode & ConcurrentMode\n      ) {\n        // Before committing the children, track on the stack whether this\n        // offscreen subtree was already hidden, so that we don't unmount the\n        // effects again.\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n      } else {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      }\n\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Visibility) {\n        const offscreenInstance: OffscreenInstance = finishedWork.stateNode;\n        const newState: OffscreenState | null = finishedWork.memoizedState;\n        const isHidden = newState !== null;\n        const offscreenBoundary: Fiber = finishedWork;\n\n        // Track the current state on the Offscreen instance so we can\n        // read it during an event\n        offscreenInstance.isHidden = isHidden;\n\n        if (enableSuspenseLayoutEffectSemantics) {\n          if (isHidden) {\n            if (!wasHidden) {\n              if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {\n                nextEffect = offscreenBoundary;\n                let offscreenChild = offscreenBoundary.child;\n                while (offscreenChild !== null) {\n                  nextEffect = offscreenChild;\n                  disappearLayoutEffects_begin(offscreenChild);\n                  offscreenChild = offscreenChild.sibling;\n                }\n              }\n            }\n          } else {\n            if (wasHidden) {\n              // TODO: Move re-appear call here for symmetry?\n            }\n          }\n        }\n\n        if (supportsMutation) {\n          // TODO: This needs to run whenever there's an insertion or update\n          // inside a hidden Offscreen tree.\n          hideOrUnhideAllChildren(offscreenBoundary, isHidden);\n        }\n      }\n      return;\n    }\n    case SuspenseListComponent: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      if (flags & Update) {\n        attachSuspenseRetryListeners(finishedWork);\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n        commitReconciliationEffects(finishedWork);\n\n        // TODO: This is a temporary solution that allowed us to transition away\n        // from React Flare on www.\n        if (flags & Ref) {\n          if (current !== null) {\n            safelyDetachRef(finishedWork, finishedWork.return);\n          }\n          safelyAttachRef(finishedWork, finishedWork.return);\n        }\n        if (flags & Update) {\n          const scopeInstance = finishedWork.stateNode;\n          prepareScopeUpdate(scopeInstance, finishedWork);\n        }\n      }\n      return;\n    }\n    default: {\n      recursivelyTraverseMutationEffects(root, finishedWork, lanes);\n      commitReconciliationEffects(finishedWork);\n\n      return;\n    }\n  }\n}\nfunction commitReconciliationEffects(finishedWork: Fiber) {\n  // Placement effects (insertions, reorders) can be scheduled on any fiber\n  // type. They needs to happen after the children effects have fired, but\n  // before the effects on this fiber have fired.\n  const flags = finishedWork.flags;\n  if (flags & Placement) {\n    try {\n      commitPlacement(finishedWork);\n    } catch (error) {\n      captureCommitPhaseError(finishedWork, finishedWork.return, error);\n    }\n    // Clear the \"placement\" from effect tag so that we know that this is\n    // inserted, before any life-cycles like componentDidMount gets called.\n    // TODO: findDOMNode doesn't rely on this any more but isMounted does\n    // and isMounted is deprecated anyway so we should be able to kill this.\n    finishedWork.flags &= ~Placement;\n  }\n  if (flags & Hydrating) {\n    finishedWork.flags &= ~Hydrating;\n  }\n}\n\nexport function commitLayoutEffects(\n  finishedWork: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n): void {\n  inProgressLanes = committedLanes;\n  inProgressRoot = root;\n  nextEffect = finishedWork;\n\n  commitLayoutEffects_begin(finishedWork, root, committedLanes);\n\n  inProgressLanes = null;\n  inProgressRoot = null;\n}\n\nfunction commitLayoutEffects_begin(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  // Suspense layout effects semantics don't change for legacy roots.\n  const isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;\n\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (\n      enableSuspenseLayoutEffectSemantics &&\n      fiber.tag === OffscreenComponent &&\n      isModernRoot\n    ) {\n      // Keep track of the current Offscreen stack's state.\n      const isHidden = fiber.memoizedState !== null;\n      const newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n      if (newOffscreenSubtreeIsHidden) {\n        // The Offscreen tree is hidden. Skip over its layout effects.\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n        continue;\n      } else {\n        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask\n        const current = fiber.alternate;\n        const wasHidden = current !== null && current.memoizedState !== null;\n        const newOffscreenSubtreeWasHidden =\n          wasHidden || offscreenSubtreeWasHidden;\n        const prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n        const prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n\n        // Traverse the Offscreen subtree with the current Offscreen as the root.\n        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n          // This is the root of a reappearing boundary. Turn its layout effects\n          // back on.\n          nextEffect = fiber;\n          reappearLayoutEffects_begin(fiber);\n        }\n\n        let child = firstChild;\n        while (child !== null) {\n          nextEffect = child;\n          commitLayoutEffects_begin(\n            child, // New root; bubble back up to here and stop.\n            root,\n            committedLanes,\n          );\n          child = child.sibling;\n        }\n\n        // Restore Offscreen state and resume in our-progress traversal.\n        nextEffect = fiber;\n        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n\n        continue;\n      }\n    }\n\n    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);\n    }\n  }\n}\n\nfunction commitLayoutMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & LayoutMask) !== NoFlags) {\n      const current = fiber.alternate;\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction disappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n          } finally {\n            recordLayoutEffectDuration(fiber);\n          }\n        } else {\n          commitHookEffectListUnmount(HookLayout, fiber, fiber.return);\n        }\n        break;\n      }\n      case ClassComponent: {\n        // TODO (Offscreen) Check: flags & RefStatic\n        safelyDetachRef(fiber, fiber.return);\n\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n      case HostComponent: {\n        safelyDetachRef(fiber, fiber.return);\n        break;\n      }\n      case OffscreenComponent: {\n        // Check if this is a\n        const isHidden = fiber.memoizedState !== null;\n        if (isHidden) {\n          // Nested Offscreen tree is already hidden. Don't disappear\n          // its effects.\n          disappearLayoutEffects_complete(subtreeRoot);\n          continue;\n        }\n        break;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      disappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction disappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction reappearLayoutEffects_begin(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n\n    if (fiber.tag === OffscreenComponent) {\n      const isHidden = fiber.memoizedState !== null;\n      if (isHidden) {\n        // Nested Offscreen tree is still hidden. Don't re-appear its effects.\n        reappearLayoutEffects_complete(subtreeRoot);\n        continue;\n      }\n    }\n\n    // TODO (Offscreen) Check: subtreeFlags & LayoutStatic\n    if (firstChild !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      reappearLayoutEffects_complete(subtreeRoot);\n    }\n  }\n}\n\nfunction reappearLayoutEffects_complete(subtreeRoot: Fiber) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // TODO (Offscreen) Check: flags & LayoutStatic\n    setCurrentDebugFiberInDEV(fiber);\n    try {\n      reappearLayoutEffectsOnFiber(fiber);\n    } catch (error) {\n      captureCommitPhaseError(fiber, fiber.return, error);\n    }\n    resetCurrentDebugFiberInDEV();\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      // This node may have been reused from a previous render, so we can't\n      // assume its return pointer is correct.\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nexport function commitPassiveMountEffects(\n  root: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n): void {\n  nextEffect = finishedWork;\n  commitPassiveMountEffects_begin(\n    finishedWork,\n    root,\n    committedLanes,\n    committedTransitions,\n  );\n}\n\nfunction commitPassiveMountEffects_begin(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const firstChild = fiber.child;\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {\n      firstChild.return = fiber;\n      nextEffect = firstChild;\n    } else {\n      commitPassiveMountEffects_complete(\n        subtreeRoot,\n        root,\n        committedLanes,\n        committedTransitions,\n      );\n    }\n  }\n}\n\nfunction commitPassiveMountEffects_complete(\n  subtreeRoot: Fiber,\n  root: FiberRoot,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      try {\n        commitPassiveMountOnFiber(\n          root,\n          fiber,\n          committedLanes,\n          committedTransitions,\n        );\n      } catch (error) {\n        captureCommitPhaseError(fiber, fiber.return, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    }\n\n    if (fiber === subtreeRoot) {\n      nextEffect = null;\n      return;\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveMountOnFiber(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n  committedTransitions: Array<Transition> | null,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n        } finally {\n          recordPassiveEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListMount(HookPassive | HookHasEffect, finishedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (finishedWork.alternate !== null) {\n          previousCache = finishedWork.alternate.memoizedState.cache;\n        }\n        const nextCache = finishedWork.memoizedState.cache;\n        // Retain/release the root cache.\n        // Note that on initial mount, previousCache and nextCache will be the same\n        // and this retain won't occur. To counter this, we instead retain the HostRoot's\n        // initial cache when creating the root itself (see createFiberRoot() in\n        // ReactFiberRoot.js). Subsequent updates that change the cache are reflected\n        // here, such that previous/next caches are retained correctly.\n        if (nextCache !== previousCache) {\n          retainCache(nextCache);\n          if (previousCache != null) {\n            releaseCache(previousCache);\n          }\n        }\n      }\n\n      if (enableTransitionTracing) {\n        // Get the transitions that were initiatized during the render\n        // and add a start transition callback for each of them\n        const state = finishedWork.memoizedState;\n        // TODO Since it's a mutable field, this should live on the FiberRoot\n        if (state.transitions === null) {\n          state.transitions = new Set([]);\n        }\n        const pendingTransitions = state.transitions;\n        const pendingSuspenseBoundaries = state.pendingSuspenseBoundaries;\n\n        // Initial render\n        if (committedTransitions !== null) {\n          committedTransitions.forEach(transition => {\n            addTransitionStartCallbackToPendingTransition({\n              transitionName: transition.name,\n              startTime: transition.startTime,\n            });\n            pendingTransitions.add(transition);\n          });\n\n          if (\n            pendingSuspenseBoundaries === null ||\n            pendingSuspenseBoundaries.size === 0\n          ) {\n            pendingTransitions.forEach(transition => {\n              addTransitionCompleteCallbackToPendingTransition({\n                transitionName: transition.name,\n                startTime: transition.startTime,\n              });\n            });\n          }\n\n          clearTransitionsForLanes(finishedRoot, committedLanes);\n        }\n\n        // If there are no more pending suspense boundaries we\n        // clear the transitions because they are all complete.\n        if (\n          pendingSuspenseBoundaries === null ||\n          pendingSuspenseBoundaries.size === 0\n        ) {\n          state.transitions = null;\n        }\n      }\n      break;\n    }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (\n          finishedWork.alternate !== null &&\n          finishedWork.alternate.memoizedState !== null &&\n          finishedWork.alternate.memoizedState.cachePool !== null\n        ) {\n          previousCache = finishedWork.alternate.memoizedState.cachePool.pool;\n        }\n        let nextCache: Cache | null = null;\n        if (\n          finishedWork.memoizedState !== null &&\n          finishedWork.memoizedState.cachePool !== null\n        ) {\n          nextCache = finishedWork.memoizedState.cachePool.pool;\n        }\n        // Retain/release the cache used for pending (suspended) nodes.\n        // Note that this is only reached in the non-suspended/visible case:\n        // when the content is suspended/hidden, the retain/release occurs\n        // via the parent Suspense component (see case above).\n        if (nextCache !== previousCache) {\n          if (nextCache != null) {\n            retainCache(nextCache);\n          }\n          if (previousCache != null) {\n            releaseCache(previousCache);\n          }\n        }\n      }\n\n      if (enableTransitionTracing) {\n        const isFallback = finishedWork.memoizedState;\n        const queue = (finishedWork.updateQueue: any);\n        const rootMemoizedState = finishedRoot.current.memoizedState;\n\n        if (queue !== null) {\n          // We have one instance of the pendingSuspenseBoundaries map.\n          // We only need one because we update it during the commit phase.\n          // We instantiate a new Map if we haven't already\n          if (rootMemoizedState.pendingSuspenseBoundaries === null) {\n            rootMemoizedState.pendingSuspenseBoundaries = new Map();\n          }\n\n          if (isFallback) {\n            const transitions = queue.transitions;\n            let prevTransitions = finishedWork.memoizedState.transitions;\n            // Add all the transitions saved in the update queue during\n            // the render phase (ie the transitions associated with this boundary)\n            // into the transitions set.\n            if (transitions !== null) {\n              if (prevTransitions === null) {\n                // We only have one instance of the transitions set\n                // because we update it only during the commit phase. We\n                // will create the set on a as needed basis in the commit phase\n                finishedWork.memoizedState.transitions = prevTransitions = new Set();\n              }\n\n              transitions.forEach(transition => {\n                prevTransitions.add(transition);\n              });\n            }\n          }\n        }\n\n        commitTransitionProgress(finishedRoot, finishedWork);\n\n        finishedWork.updateQueue = null;\n      }\n\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        let previousCache: Cache | null = null;\n        if (finishedWork.alternate !== null) {\n          previousCache = finishedWork.alternate.memoizedState.cache;\n        }\n        const nextCache = finishedWork.memoizedState.cache;\n        // Retain/release the cache. In theory the cache component\n        // could be \"borrowing\" a cache instance owned by some parent,\n        // in which case we could avoid retaining/releasing. But it\n        // is non-trivial to determine when that is the case, so we\n        // always retain/release.\n        if (nextCache !== previousCache) {\n          retainCache(nextCache);\n          if (previousCache != null) {\n            releaseCache(previousCache);\n          }\n        }\n      }\n      break;\n    }\n  }\n}\n\nexport function commitPassiveUnmountEffects(firstChild: Fiber): void {\n  nextEffect = firstChild;\n  commitPassiveUnmountEffects_begin();\n}\n\nfunction commitPassiveUnmountEffects_begin() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const child = fiber.child;\n\n    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {\n      const deletions = fiber.deletions;\n      if (deletions !== null) {\n        for (let i = 0; i < deletions.length; i++) {\n          const fiberToDelete = deletions[i];\n          nextEffect = fiberToDelete;\n          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n            fiberToDelete,\n            fiber,\n          );\n        }\n\n        if (deletedTreeCleanUpLevel >= 1) {\n          // A fiber was deleted from this parent fiber, but it's still part of\n          // the previous (alternate) parent fiber's list of children. Because\n          // children are a linked list, an earlier sibling that's still alive\n          // will be connected to the deleted fiber via its `alternate`:\n          //\n          //   live fiber\n          //   --alternate--> previous live fiber\n          //   --sibling--> deleted fiber\n          //\n          // We can't disconnect `alternate` on nodes that haven't been deleted\n          // yet, but we can disconnect the `sibling` and `child` pointers.\n          const previousFiber = fiber.alternate;\n          if (previousFiber !== null) {\n            let detachedChild = previousFiber.child;\n            if (detachedChild !== null) {\n              previousFiber.child = null;\n              do {\n                const detachedSibling = detachedChild.sibling;\n                detachedChild.sibling = null;\n                detachedChild = detachedSibling;\n              } while (detachedChild !== null);\n            }\n          }\n        }\n\n        nextEffect = fiber;\n      }\n    }\n\n    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffects_complete();\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffects_complete() {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    if ((fiber.flags & Passive) !== NoFlags) {\n      setCurrentDebugFiberInDEV(fiber);\n      commitPassiveUnmountOnFiber(fiber);\n      resetCurrentDebugFiberInDEV();\n    }\n\n    const sibling = fiber.sibling;\n    if (sibling !== null) {\n      sibling.return = fiber.return;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = fiber.return;\n  }\n}\n\nfunction commitPassiveUnmountOnFiber(finishedWork: Fiber): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive | HookHasEffect,\n          finishedWork,\n          finishedWork.return,\n        );\n      }\n      break;\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n  deletedSubtreeRoot: Fiber,\n  nearestMountedAncestor: Fiber | null,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n\n    // Deletion effects fire in parent -> child order\n    // TODO: Check if fiber has a PassiveStatic flag\n    setCurrentDebugFiberInDEV(fiber);\n    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n    resetCurrentDebugFiberInDEV();\n\n    const child = fiber.child;\n    // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we\n    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)\n    if (child !== null) {\n      child.return = fiber;\n      nextEffect = child;\n    } else {\n      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n        deletedSubtreeRoot,\n      );\n    }\n  }\n}\n\nfunction commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n  deletedSubtreeRoot: Fiber,\n) {\n  while (nextEffect !== null) {\n    const fiber = nextEffect;\n    const sibling = fiber.sibling;\n    const returnFiber = fiber.return;\n\n    if (deletedTreeCleanUpLevel >= 2) {\n      // Recursively traverse the entire deleted tree and clean up fiber fields.\n      // This is more aggressive than ideal, and the long term goal is to only\n      // have to detach the deleted tree at the root.\n      detachFiberAfterEffects(fiber);\n      if (fiber === deletedSubtreeRoot) {\n        nextEffect = null;\n        return;\n      }\n    } else {\n      // This is the default branch (level 0). We do not recursively clear all\n      // the fiber fields. Only the root of the deleted subtree.\n      if (fiber === deletedSubtreeRoot) {\n        detachFiberAfterEffects(fiber);\n        nextEffect = null;\n        return;\n      }\n    }\n\n    if (sibling !== null) {\n      sibling.return = returnFiber;\n      nextEffect = sibling;\n      return;\n    }\n\n    nextEffect = returnFiber;\n  }\n}\n\nfunction commitPassiveUnmountInsideDeletedTreeOnFiber(\n  current: Fiber,\n  nearestMountedAncestor: Fiber | null,\n): void {\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent: {\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        current.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n        recordPassiveEffectDuration(current);\n      } else {\n        commitHookEffectListUnmount(\n          HookPassive,\n          current,\n          nearestMountedAncestor,\n        );\n      }\n      break;\n    }\n    // TODO: run passive unmount effects when unmounting a root.\n    // Because passive unmount effects are not currently run,\n    // the cache instance owned by the root will never be freed.\n    // When effects are run, the cache should be freed here:\n    // case HostRoot: {\n    //   if (enableCache) {\n    //     const cache = current.memoizedState.cache;\n    //     releaseCache(cache);\n    //   }\n    //   break;\n    // }\n    case LegacyHiddenComponent:\n    case OffscreenComponent: {\n      if (enableCache) {\n        if (\n          current.memoizedState !== null &&\n          current.memoizedState.cachePool !== null\n        ) {\n          const cache: Cache = current.memoizedState.cachePool.pool;\n          // Retain/release the cache used for pending (suspended) nodes.\n          // Note that this is only reached in the non-suspended/visible case:\n          // when the content is suspended/hidden, the retain/release occurs\n          // via the parent Suspense component (see case above).\n          if (cache != null) {\n            retainCache(cache);\n          }\n        }\n      }\n      break;\n    }\n    case CacheComponent: {\n      if (enableCache) {\n        const cache = current.memoizedState.cache;\n        releaseCache(cache);\n      }\n      break;\n    }\n  }\n}\n\n// TODO: Reuse reappearLayoutEffects traversal here?\nfunction invokeLayoutEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookLayout | HookHasEffect, fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        try {\n          instance.componentDidMount();\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectMountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListMount(HookPassive | HookHasEffect, fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokeLayoutEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookLayout | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        break;\n      }\n      case ClassComponent: {\n        const instance = fiber.stateNode;\n        if (typeof instance.componentWillUnmount === 'function') {\n          safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n        }\n        break;\n      }\n    }\n  }\n}\n\nfunction invokePassiveEffectUnmountInDEV(fiber: Fiber): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n    switch (fiber.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case SimpleMemoComponent: {\n        try {\n          commitHookEffectListUnmount(\n            HookPassive | HookHasEffect,\n            fiber,\n            fiber.return,\n          );\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n      }\n    }\n  }\n}\n\nexport {\n  commitPlacement,\n  commitAttachRef,\n  commitDetachRef,\n  invokeLayoutEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokePassiveEffectUnmountInDEV,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\n\nimport {HostComponent, HostText} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentNameFromType from 'shared/getComponentNameFromType';\nimport {\n  findFiberRoot,\n  getBoundingRect,\n  getInstanceFromNode,\n  getTextContent,\n  isHiddenSubtree,\n  matchAccessibilityRole,\n  setFocusIfFocusable,\n  setupIntersectionObserver,\n  supportsTestSelectors,\n} from './ReactFiberHostConfig';\n\nlet COMPONENT_TYPE = 0b000;\nlet HAS_PSEUDO_CLASS_TYPE = 0b001;\nlet ROLE_TYPE = 0b010;\nlet TEST_NAME_TYPE = 0b011;\nlet TEXT_TYPE = 0b100;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\ntype Type = Symbol | number;\n\ntype ComponentSelector = {|\n  $$typeof: Type,\n  value: React$AbstractComponent<empty, mixed>,\n|};\n\ntype HasPseudoClassSelector = {|\n  $$typeof: Type,\n  value: Array<Selector>,\n|};\n\ntype RoleSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TextSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TestNameSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype Selector =\n  | ComponentSelector\n  | HasPseudoClassSelector\n  | RoleSelector\n  | TextSelector\n  | TestNameSelector;\n\nexport function createComponentSelector(\n  component: React$AbstractComponent<empty, mixed>,\n): ComponentSelector {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component,\n  };\n}\n\nexport function createHasPseudoClassSelector(\n  selectors: Array<Selector>,\n): HasPseudoClassSelector {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors,\n  };\n}\n\nexport function createRoleSelector(role: string): RoleSelector {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role,\n  };\n}\n\nexport function createTextSelector(text: string): TextSelector {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text,\n  };\n}\n\nexport function createTestNameSelector(id: string): TestNameSelector {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id,\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot: Instance): Fiber {\n  const maybeFiber = getInstanceFromNode((hostRoot: any));\n  if (maybeFiber != null) {\n    if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {\n      throw new Error(\n        'Invalid host root specified. Should be either a React container or a node with a testname attribute.',\n      );\n    }\n\n    return ((maybeFiber: any): Fiber);\n  } else {\n    const fiberRoot = findFiberRoot(hostRoot);\n\n    if (fiberRoot === null) {\n      throw new Error(\n        'Could not find React container within specified host subtree.',\n      );\n    }\n\n    // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n    return ((fiberRoot: any).stateNode.current: Fiber);\n  }\n}\n\nfunction matchSelector(fiber: Fiber, selector: Selector): boolean {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n      break;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(\n        fiber,\n        ((selector: any): HasPseudoClassSelector).value,\n      );\n    case ROLE_TYPE:\n      if (fiber.tag === HostComponent) {\n        const node = fiber.stateNode;\n        if (\n          matchAccessibilityRole(node, ((selector: any): RoleSelector).value)\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEXT_TYPE:\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n        const textContent = getTextContent(fiber);\n        if (\n          textContent !== null &&\n          textContent.indexOf(((selector: any): TextSelector).value) >= 0\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEST_NAME_TYPE:\n      if (fiber.tag === HostComponent) {\n        const dataTestID = fiber.memoizedProps['data-testname'];\n        if (\n          typeof dataTestID === 'string' &&\n          dataTestID.toLowerCase() ===\n            ((selector: any): TestNameSelector).value.toLowerCase()\n        ) {\n          return true;\n        }\n      }\n      break;\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector: Selector): string | null {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      const displayName = getComponentNameFromType(selector.value) || 'Unknown';\n      return `<${displayName}>`;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return `:has(${selectorToString(selector) || ''})`;\n    case ROLE_TYPE:\n      return `[role=\"${((selector: any): RoleSelector).value}\"]`;\n    case TEXT_TYPE:\n      return `\"${((selector: any): TextSelector).value}\"`;\n    case TEST_NAME_TYPE:\n      return `[data-testname=\"${((selector: any): TestNameSelector).value}\"]`;\n    default:\n      throw new Error('Invalid selector type specified.');\n  }\n}\n\nfunction findPaths(root: Fiber, selectors: Array<Selector>): Array<Fiber> {\n  const matchingFibers: Array<Fiber> = [];\n\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n}\n\n// Same as findPaths but with eager bailout on first match\nfunction hasMatchingPaths(root: Fiber, selectors: Array<Selector>): boolean {\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function findAllNodes(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<Instance> {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const instanceRoots: Array<Instance> = [];\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const node = ((stack[index++]: any): Fiber);\n    if (node.tag === HostComponent) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n      instanceRoots.push(node.stateNode);\n    } else {\n      let child = node.child;\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\n\nexport function getFindAllNodesFailureDescription(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): string | null {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n\n  let maxSelectorIndex: number = 0;\n  const matchedNames = [];\n\n  // The logic of this loop should be kept in sync with findPaths()\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    const selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    const unmatchedNames = [];\n    for (let i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return (\n      'findAllNodes was able to match part of the selector:\\n' +\n      `  ${matchedNames.join(' > ')}\\n\\n` +\n      'No matching component was found for:\\n' +\n      `  ${unmatchedNames.join(' > ')}`\n    );\n  }\n\n  return null;\n}\n\nexport type BoundingRect = {|\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n|};\n\nexport function findBoundingRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<BoundingRect> {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const boundingRects: Array<BoundingRect> = [];\n  for (let i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (let i = boundingRects.length - 1; i > 0; i--) {\n    const targetRect = boundingRects[i];\n    const targetLeft = targetRect.x;\n    const targetRight = targetLeft + targetRect.width;\n    const targetTop = targetRect.y;\n    const targetBottom = targetTop + targetRect.height;\n\n    for (let j = i - 1; j >= 0; j--) {\n      if (i !== j) {\n        const otherRect = boundingRects[j];\n        const otherLeft = otherRect.x;\n        const otherRight = otherLeft + otherRect.width;\n        const otherTop = otherRect.y;\n        const otherBottom = otherTop + otherRect.height;\n\n        // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (\n          targetLeft >= otherLeft &&\n          targetTop >= otherTop &&\n          targetRight <= otherRight &&\n          targetBottom <= otherBottom\n        ) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetLeft === otherLeft &&\n          targetRect.width === otherRect.width &&\n          !(otherBottom < targetTop) &&\n          !(otherTop > targetBottom)\n        ) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetTop === otherTop &&\n          targetRect.height === otherRect.height &&\n          !(otherRight < targetLeft) &&\n          !(otherLeft > targetRight)\n        ) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\n\nexport function focusWithin(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): boolean {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n    if (fiber.tag === HostComponent) {\n      const node = fiber.stateNode;\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n    let child = fiber.child;\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\n\nconst commitHooks: Array<Function> = [];\n\nexport function onCommitRoot(): void {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(commitHook => commitHook());\n  }\n}\n\nexport type IntersectionObserverOptions = Object;\n\nexport type ObserveVisibleRectsCallback = (\n  intersections: Array<{ratio: number, rect: BoundingRect}>,\n) => void;\n\nexport function observeVisibleRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n  callback: (intersections: Array<{ratio: number, rect: BoundingRect}>) => void,\n  options?: IntersectionObserverOptions,\n): {|disconnect: () => void|} {\n  if (!supportsTestSelectors) {\n    throw new Error('Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const {disconnect, observe, unobserve} = setupIntersectionObserver(\n    instanceRoots,\n    callback,\n    options,\n  );\n\n  // When React mutates the host environment, we may need to change what we're listening to.\n  const commitHook = () => {\n    const nextInstanceRoots = findAllNodes(hostRoot, selectors);\n\n    instanceRoots.forEach(target => {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n\n    nextInstanceRoots.forEach(target => {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n\n  return {\n    disconnect: () => {\n      // Stop listening for React mutations:\n      const index = commitHooks.indexOf(commitHook);\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      }\n\n      // Disconnect the host observer:\n      disconnect();\n    },\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactFiber.old';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nimport {warnsIfNotActing} from './ReactFiberHostConfig';\n\nconst {ReactCurrentActQueue} = ReactSharedInternals;\n\nexport function isLegacyActEnvironment(fiber: Fiber) {\n  if (__DEV__) {\n    // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n    // act environment whenever `jest` is defined, but you can still turn off\n    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n    // to false.\n\n    const isReactActEnvironmentGlobal =\n      // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\n        ? IS_REACT_ACT_ENVIRONMENT\n        : undefined;\n\n    // $FlowExpectedError - Flow doesn't know about jest\n    const jestIsDefined = typeof jest !== 'undefined';\n    return (\n      warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false\n    );\n  }\n  return false;\n}\n\nexport function isConcurrentActEnvironment() {\n  if (__DEV__) {\n    const isReactActEnvironmentGlobal =\n      // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n      typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined'\n        ? IS_REACT_ACT_ENVIRONMENT\n        : undefined;\n\n    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {\n      // TODO: Include link to relevant documentation page.\n      console.error(\n        'The current testing environment is not configured to support ' +\n          'act(...)',\n      );\n    }\n    return isReactActEnvironmentGlobal;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Flags} from './ReactFiberFlags';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {EventPriority} from './ReactEventPriorities.old';\nimport type {\n  PendingTransitionCallbacks,\n  TransitionObject,\n  Transition,\n} from './ReactFiberTracingMarkerComponent.old';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableCreateEventHandleAPI,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableProfilerNestedUpdatePhase,\n  enableProfilerNestedUpdateScheduledHook,\n  deferRenderPhaseUpdateToNextBatch,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  disableSchedulerTimeoutInWorkLoop,\n  enableStrictEffects,\n  skipUnmountedBoundaries,\n  enableUpdaterTracking,\n  enableCache,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport is from 'shared/objectIs';\n\nimport {\n  // Aliased because `act` will override and push to an internal queue\n  scheduleCallback as Scheduler_scheduleCallback,\n  cancelCallback as Scheduler_cancelCallback,\n  shouldYield,\n  requestPaint,\n  now,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n} from './Scheduler';\nimport {\n  flushSyncCallbacks,\n  flushSyncCallbacksOnlyInLegacyMode,\n  scheduleSyncCallback,\n  scheduleLegacySyncCallback,\n} from './ReactFiberSyncTaskQueue.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\n\nimport {\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  afterActiveInstanceBlur,\n  getCurrentEventPriority,\n  supportsMicrotasks,\n  errorHydratingContainer,\n  scheduleMicrotask,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {didSuspendOrErrorWhileHydratingDEV} from './ReactFiberHydrationContext.old';\nimport {NoMode, ProfileMode, ConcurrentMode} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Profiler,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  Incomplete,\n  StoreConsistency,\n  HostEffectMask,\n  ForceClientRender,\n  BeforeMutationMask,\n  MutationMask,\n  LayoutMask,\n  PassiveMask,\n  MountPassiveDev,\n  MountLayoutDev,\n} from './ReactFiberFlags';\nimport {\n  NoLanes,\n  NoLane,\n  SyncLane,\n  NoTimestamp,\n  claimNextTransitionLane,\n  claimNextRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  includesBlockingLane,\n  includesExpiredLane,\n  getNextLanes,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootEntangled,\n  markRootFinished,\n  getHighestPriorityLane,\n  addFiberToLanesMap,\n  movePendingFibersToMemoized,\n  addTransitionToLanesMap,\n  getTransitionsForLanes,\n} from './ReactFiberLane.old';\nimport {\n  DiscreteEventPriority,\n  ContinuousEventPriority,\n  DefaultEventPriority,\n  IdleEventPriority,\n  getCurrentUpdatePriority,\n  setCurrentUpdatePriority,\n  lowerEventPriority,\n  lanesToEventPriority,\n} from './ReactEventPriorities.old';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationEffects,\n  commitLayoutEffects,\n  commitMutationEffects,\n  commitPassiveEffectDurations,\n  commitPassiveMountEffects,\n  commitPassiveUnmountEffects,\n  invokeLayoutEffectMountInDEV,\n  invokePassiveEffectMountInDEV,\n  invokeLayoutEffectUnmountInDEV,\n  invokePassiveEffectUnmountInDEV,\n  reportUncaughtErrorInDEV,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactFiberClassUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {\n  createCapturedValueAtFiber,\n  type CapturedValue,\n} from './ReactCapturedValue';\nimport {\n  push as pushToStack,\n  pop as popFromStack,\n  createCursor,\n} from './ReactFiberStack.old';\nimport {\n  enqueueConcurrentRenderForLane,\n  finishQueueingConcurrentUpdates,\n} from './ReactFiberConcurrentUpdates.old';\n\nimport {\n  markNestedUpdateScheduled,\n  recordCommitTime,\n  resetNestedUpdateFlag,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  syncNestedUpdateFlag,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  isDevToolsPresent,\n  markCommitStarted,\n  markCommitStopped,\n  markComponentRenderStopped,\n  markComponentSuspended,\n  markComponentErrored,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n  onCommitRoot as onCommitRootDevTools,\n  onPostCommitRoot as onPostCommitRootDevTools,\n} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\nimport {releaseCache} from './ReactFiberCacheComponent.old';\nimport {\n  isLegacyActEnvironment,\n  isConcurrentActEnvironment,\n} from './ReactFiberAct.old';\nimport {processTransitionCallbacks} from './ReactFiberTracingMarkerComponent.old';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  ReactCurrentBatchConfig,\n  ReactCurrentActQueue,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b000;\nconst BatchedContext = /*               */ 0b001;\nconst RenderContext = /*                */ 0b010;\nconst CommitContext = /*                */ 0b100;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5 | 6;\nconst RootInProgress = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\nconst RootDidNotComplete = 6;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\nexport let subtreeRenderLanes: Lanes = NoLanes;\nconst subtreeRenderLanesCursor: StackCursor<Lanes> = createCursor(NoLanes);\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootInProgress;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\nlet workInProgressRootIncludedLanes: Lanes = NoLanes;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootInterleavedUpdatedLanes: Lanes = NoLanes;\n// Lanes that were updated during the render phase (*not* an interleaved event).\nlet workInProgressRootRenderPhaseUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n// Errors that are thrown during the render phase.\nlet workInProgressRootConcurrentErrors: Array<\n  CapturedValue<mixed>,\n> | null = null;\n// These are errors that we recovered from without surfacing them to the UI.\n// We will log them once the tree commits.\nlet workInProgressRootRecoverableErrors: Array<\n  CapturedValue<mixed>,\n> | null = null;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nlet workInProgressTransitions: Array<Transition> | null = null;\nexport function getWorkInProgressTransitions() {\n  return workInProgressTransitions;\n}\n\nlet currentPendingTransitionCallbacks: PendingTransitionCallbacks | null = null;\n\nexport function addTransitionStartCallbackToPendingTransition(\n  transition: TransitionObject,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: [],\n        transitionComplete: null,\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionStart === null) {\n      currentPendingTransitionCallbacks.transitionStart = [];\n    }\n\n    currentPendingTransitionCallbacks.transitionStart.push(transition);\n  }\n}\n\nexport function addTransitionCompleteCallbackToPendingTransition(\n  transition: TransitionObject,\n) {\n  if (enableTransitionTracing) {\n    if (currentPendingTransitionCallbacks === null) {\n      currentPendingTransitionCallbacks = {\n        transitionStart: null,\n        transitionComplete: [],\n      };\n    }\n\n    if (currentPendingTransitionCallbacks.transitionComplete === null) {\n      currentPendingTransitionCallbacks.transitionComplete = [];\n    }\n\n    currentPendingTransitionCallbacks.transitionComplete.push(transition);\n  }\n}\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\n// Only used when enableProfilerNestedUpdateScheduledHook is true;\n// to track which root is currently committing layout effects.\nlet rootCommittingMutationOrLayoutEffects: FiberRoot | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\nlet pendingPassiveEffectsRemainingLanes: Lanes = NoLanes;\nlet pendingPassiveTransitions: Array<Transition> | null = null;\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\nlet isFlushingPassiveEffects = false;\nlet didScheduleUpdateDuringPassiveEffects = false;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\nlet rootWithPassiveNestedUpdates: FiberRoot | null = null;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventTransitionLane: Lanes = NoLanes;\n\nlet isRunningInsertionEffect = false;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (lanes) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (__DEV__ && ReactCurrentBatchConfig.transition !== null) {\n      const transition = ReactCurrentBatchConfig.transition;\n      if (!transition._updatedFibers) {\n        transition._updatedFibers = new Set();\n      }\n\n      transition._updatedFibers.add(fiber);\n    }\n    // The algorithm for assigning an update to a lane should be stable for all\n    // updates at the same priority within the same event. To do this, the\n    // inputs to the algorithm must be the same.\n    //\n    // The trick we use is to cache the first of each of these inputs within an\n    // event. Then reset the cached values once we can be sure the event is\n    // over. Our heuristic for that is whenever we enter a concurrent work loop.\n    if (currentEventTransitionLane === NoLane) {\n      // All transitions within the same event are assigned the same lane.\n      currentEventTransitionLane = claimNextTransitionLane();\n    }\n    return currentEventTransitionLane;\n  }\n\n  // Updates originating inside certain React methods, like flushSync, have\n  // their priority set by tracking it with a context variable.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const updateLane: Lane = (getCurrentUpdatePriority(): any);\n  if (updateLane !== NoLane) {\n    return updateLane;\n  }\n\n  // This update originated outside React. Ask the host environment for an\n  // appropriate priority, based on the type of event.\n  //\n  // The opaque type returned by the host config is internally a lane, so we can\n  // use that directly.\n  // TODO: Move this type conversion to the event priority module.\n  const eventLane: Lane = (getCurrentEventPriority(): any);\n  return eventLane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & ConcurrentMode) === NoMode) {\n    return (SyncLane: Lane);\n  }\n\n  return claimNextRetryLane();\n}\n\nexport function scheduleUpdateOnFiber(\n  root: FiberRoot,\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n) {\n  checkForNestedUpdates();\n\n  if (__DEV__) {\n    if (isRunningInsertionEffect) {\n      console.error('useInsertionEffect must not schedule updates.');\n    }\n  }\n\n  if (__DEV__) {\n    if (isFlushingPassiveEffects) {\n      didScheduleUpdateDuringPassiveEffects = true;\n    }\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (\n    (executionContext & RenderContext) !== NoLanes &&\n    root === workInProgressRoot\n  ) {\n    // This update was dispatched during the render phase. This is a mistake\n    // if the update originates from user space (with the exception of local\n    // hook updates, which are handled differently and don't reach this\n    // function), but there are some internal React features that use this as\n    // an implementation detail, like selective hydration.\n    warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n    // Track lanes that were updated during the render phase\n    workInProgressRootRenderPhaseUpdatedLanes = mergeLanes(\n      workInProgressRootRenderPhaseUpdatedLanes,\n      lane,\n    );\n  } else {\n    // This is a normal update, scheduled from outside the render phase. For\n    // example, during an input event.\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        addFiberToLanesMap(root, fiber, lane);\n      }\n    }\n\n    warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      if (\n        (executionContext & CommitContext) !== NoContext &&\n        root === rootCommittingMutationOrLayoutEffects\n      ) {\n        if (fiber.mode & ProfileMode) {\n          let current = fiber;\n          while (current !== null) {\n            if (current.tag === Profiler) {\n              const {id, onNestedUpdateScheduled} = current.memoizedProps;\n              if (typeof onNestedUpdateScheduled === 'function') {\n                onNestedUpdateScheduled(id);\n              }\n            }\n            current = current.return;\n          }\n        }\n      }\n    }\n\n    if (enableTransitionTracing) {\n      const transition = ReactCurrentBatchConfig.transition;\n      if (transition !== null) {\n        if (transition.startTime === -1) {\n          transition.startTime = now();\n        }\n\n        addTransitionToLanesMap(root, transition, lane);\n      }\n    }\n\n    if (root === workInProgressRoot) {\n      // Received an update to a tree that's in the middle of rendering. Mark\n      // that there was an interleaved update work on this root. Unless the\n      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n      // phase update. In that case, we don't treat render phase updates as if\n      // they were interleaved, for backwards compat reasons.\n      if (\n        deferRenderPhaseUpdateToNextBatch ||\n        (executionContext & RenderContext) === NoContext\n      ) {\n        workInProgressRootInterleavedUpdatedLanes = mergeLanes(\n          workInProgressRootInterleavedUpdatedLanes,\n          lane,\n        );\n      }\n      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n        // The root already suspended with a delay, which means this render\n        // definitely won't finish. Since we have a new update, let's mark it as\n        // suspended now, right before marking the incoming update. This has the\n        // effect of interrupting the current render and switching to the update.\n        // TODO: Make sure this doesn't override pings that happen while we've\n        // already started rendering.\n        markRootSuspended(root, workInProgressRootRenderLanes);\n      }\n    }\n\n    ensureRootIsScheduled(root, eventTime);\n    if (\n      lane === SyncLane &&\n      executionContext === NoContext &&\n      (fiber.mode & ConcurrentMode) === NoMode &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      // Flush the synchronous work now, unless we're already working or inside\n      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n      // scheduleCallbackForFiber to preserve the ability to schedule a callback\n      // without immediately flushing it. We only do this for user-initiated\n      // updates, to preserve historical behavior of legacy mode.\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function scheduleInitialHydrationOnRoot(\n  root: FiberRoot,\n  lane: Lane,\n  eventTime: number,\n) {\n  // This is a special fork of scheduleUpdateOnFiber that is only used to\n  // schedule the initial hydration of a root that has just been created. Most\n  // of the stuff in scheduleUpdateOnFiber can be skipped.\n  //\n  // The main reason for this separate path, though, is to distinguish the\n  // initial children from subsequent updates. In fully client-rendered roots\n  // (createRoot instead of hydrateRoot), all top-level renders are modeled as\n  // updates, but hydration roots are special because the initial render must\n  // match what was rendered on the server.\n  const current = root.current;\n  current.lanes = lane;\n  markRootUpdated(root, lane, eventTime);\n  ensureRootIsScheduled(root, eventTime);\n}\n\nexport function isUnsafeClassRenderPhaseUpdate(fiber: Fiber) {\n  // Check if this is a render phase update. Only called by class components,\n  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n  return (\n    // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We\n    // decided not to enable it.\n    (!deferRenderPhaseUpdateToNextBatch ||\n      (fiber.mode & ConcurrentMode) === NoMode) &&\n    (executionContext & RenderContext) !== NoContext\n  );\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n    }\n    root.callbackNode = null;\n    root.callbackPriority = NoLane;\n    return;\n  }\n\n  // We use the highest priority lane to represent the priority of the callback.\n  const newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n  // Check if there's an existing task. We may be able to reuse it.\n  const existingCallbackPriority = root.callbackPriority;\n  if (\n    existingCallbackPriority === newCallbackPriority &&\n    // Special case related to `act`. If the currently scheduled task is a\n    // Scheduler task, rather than an `act` task, cancel it and re-scheduled\n    // on the `act` queue.\n    !(\n      __DEV__ &&\n      ReactCurrentActQueue.current !== null &&\n      existingCallbackNode !== fakeActCallbackNode\n    )\n  ) {\n    if (__DEV__) {\n      // If we're going to re-use an existing task, it needs to exist.\n      // Assume that discrete update microtasks are non-cancellable and null.\n      // TODO: Temporary until we confirm this warning is not fired.\n      if (\n        existingCallbackNode == null &&\n        existingCallbackPriority !== SyncLane\n      ) {\n        console.error(\n          'Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.',\n        );\n      }\n    }\n    // The priority hasn't changed. We can reuse the existing task. Exit.\n    return;\n  }\n\n  if (existingCallbackNode != null) {\n    // Cancel the existing callback. We'll schedule a new one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLane) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    if (root.tag === LegacyRoot) {\n      if (__DEV__ && ReactCurrentActQueue.isBatchingLegacy !== null) {\n        ReactCurrentActQueue.didScheduleLegacyUpdate = true;\n      }\n      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));\n    } else {\n      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));\n    }\n    if (supportsMicrotasks) {\n      // Flush the queue in a microtask.\n      if (__DEV__ && ReactCurrentActQueue.current !== null) {\n        // Inside `act`, use our internal `act` queue so that these get flushed\n        // at the end of the current scope even when using the sync version\n        // of `act`.\n        ReactCurrentActQueue.current.push(flushSyncCallbacks);\n      } else {\n        scheduleMicrotask(() => {\n          // In Safari, appending an iframe forces microtasks to run.\n          // https://github.com/facebook/react/issues/22459\n          // We don't support running callbacks in the middle of render\n          // or commit so we need to check against that.\n          if (\n            (executionContext & (RenderContext | CommitContext)) ===\n            NoContext\n          ) {\n            // Note that this would still prematurely flush the callbacks\n            // if this happens outside render or commit phase (e.g. in an event).\n            flushSyncCallbacks();\n          }\n        });\n      }\n    } else {\n      // Flush the queue in an Immediate task.\n      scheduleCallback(ImmediateSchedulerPriority, flushSyncCallbacks);\n    }\n    newCallbackNode = null;\n  } else {\n    let schedulerPriorityLevel;\n    switch (lanesToEventPriority(nextLanes)) {\n      case DiscreteEventPriority:\n        schedulerPriorityLevel = ImmediateSchedulerPriority;\n        break;\n      case ContinuousEventPriority:\n        schedulerPriorityLevel = UserBlockingSchedulerPriority;\n        break;\n      case DefaultEventPriority:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n      case IdleEventPriority:\n        schedulerPriorityLevel = IdleSchedulerPriority;\n        break;\n      default:\n        schedulerPriorityLevel = NormalSchedulerPriority;\n        break;\n    }\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root, didTimeout) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    resetNestedUpdateFlag();\n  }\n\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventTransitionLane = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next lanes to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  // We disable time-slicing in some cases: if the work has been CPU-bound\n  // for too long (\"expired\" work, to prevent starvation), or we're in\n  // sync-updates-by-default mode.\n  // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n  // bug we're still investigating. Once the bug in Scheduler is fixed,\n  // we can remove this, since we track expiration ourselves.\n  const shouldTimeSlice =\n    !includesBlockingLane(root, lanes) &&\n    !includesExpiredLane(root, lanes) &&\n    (disableSchedulerTimeoutInWorkLoop || !didTimeout);\n  let exitStatus = shouldTimeSlice\n    ? renderRootConcurrent(root, lanes)\n    : renderRootSync(root, lanes);\n  if (exitStatus !== RootInProgress) {\n    if (exitStatus === RootErrored) {\n      // If something threw an error, try rendering one more time. We'll\n      // render synchronously to block concurrent data mutations, and we'll\n      // includes all pending updates are included. If it still fails after\n      // the second attempt, we'll give up and commit the resulting tree.\n      const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n      if (errorRetryLanes !== NoLanes) {\n        lanes = errorRetryLanes;\n        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n      }\n    }\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    if (exitStatus === RootDidNotComplete) {\n      // The render unwound without completing the tree. This happens in special\n      // cases where need to exit the current render without producing a\n      // consistent tree or committing.\n      //\n      // This should only happen during a concurrent render, not a discrete or\n      // synchronous update. We should have already checked for this when we\n      // unwound the stack.\n      markRootSuspended(root, lanes);\n    } else {\n      // The render completed.\n\n      // Check if this render may have yielded to a concurrent event, and if so,\n      // confirm that any newly rendered stores are consistent.\n      // TODO: It's possible that even a concurrent render may never have yielded\n      // to the main thread, if it was fast enough, or if it expired. We could\n      // skip the consistency check in that case, too.\n      const renderWasConcurrent = !includesBlockingLane(root, lanes);\n      const finishedWork: Fiber = (root.current.alternate: any);\n      if (\n        renderWasConcurrent &&\n        !isRenderConsistentWithExternalStores(finishedWork)\n      ) {\n        // A store was mutated in an interleaved event. Render again,\n        // synchronously, to block further mutations.\n        exitStatus = renderRootSync(root, lanes);\n\n        // We need to check again if something threw\n        if (exitStatus === RootErrored) {\n          const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n          if (errorRetryLanes !== NoLanes) {\n            lanes = errorRetryLanes;\n            exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n            // We assume the tree is now consistent because we didn't yield to any\n            // concurrent events.\n          }\n        }\n        if (exitStatus === RootFatalErrored) {\n          const fatalError = workInProgressRootFatalError;\n          prepareFreshStack(root, NoLanes);\n          markRootSuspended(root, lanes);\n          ensureRootIsScheduled(root, now());\n          throw fatalError;\n        }\n      }\n\n      // We now have a consistent tree. The next step is either to commit it,\n      // or, if something suspended, wait to commit it after a timeout.\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      finishConcurrentRender(root, exitStatus, lanes);\n    }\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction recoverFromConcurrentError(root, errorRetryLanes) {\n  // If an error occurred during hydration, discard server response and fall\n  // back to client side render.\n\n  // Before rendering again, save the errors from the previous attempt.\n  const errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n\n  if (isRootDehydrated(root)) {\n    // The shell failed to hydrate. Set a flag to force a client rendering\n    // during the next attempt. To do this, we call prepareFreshStack now\n    // to create the root work-in-progress fiber. This is a bit weird in terms\n    // of factoring, because it relies on renderRootSync not calling\n    // prepareFreshStack again in the call below, which happens because the\n    // root and lanes haven't changed.\n    //\n    // TODO: I think what we should do is set ForceClientRender inside\n    // throwException, like we do for nested Suspense boundaries. The reason\n    // it's here instead is so we can switch to the synchronous work loop, too.\n    // Something to consider for a future refactor.\n    const rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n    rootWorkInProgress.flags |= ForceClientRender;\n    if (__DEV__) {\n      errorHydratingContainer(root.containerInfo);\n    }\n  }\n\n  const exitStatus = renderRootSync(root, errorRetryLanes);\n  if (exitStatus !== RootErrored) {\n    // Successfully finished rendering on retry\n\n    // The errors from the failed first attempt have been recovered. Add\n    // them to the collection of recoverable errors. We'll log them in the\n    // commit phase.\n    const errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n    workInProgressRootRecoverableErrors = errorsFromFirstAttempt;\n    // The errors from the second attempt should be queued after the errors\n    // from the first attempt, to preserve the causal sequence.\n    if (errorsFromSecondAttempt !== null) {\n      queueRecoverableErrors(errorsFromSecondAttempt);\n    }\n  } else {\n    // The UI failed to recover.\n  }\n  return exitStatus;\n}\n\nexport function queueRecoverableErrors(errors: Array<CapturedValue<mixed>>) {\n  if (workInProgressRootRecoverableErrors === null) {\n    workInProgressRootRecoverableErrors = errors;\n  } else {\n    workInProgressRootRecoverableErrors.push.apply(\n      workInProgressRootRecoverableErrors,\n      errors,\n    );\n  }\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootInProgress:\n    case RootFatalErrored: {\n      throw new Error('Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(\n              null,\n              root,\n              workInProgressRootRecoverableErrors,\n              workInProgressTransitions,\n            ),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(\n              null,\n              root,\n              workInProgressRootRecoverableErrors,\n              workInProgressTransitions,\n            ),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unknown root exit status.');\n    }\n  }\n}\n\nfunction isRenderConsistentWithExternalStores(finishedWork: Fiber): boolean {\n  // Search the rendered tree for external store reads, and check whether the\n  // stores were mutated in a concurrent event. Intentionally using an iterative\n  // loop instead of recursion so we can exit early.\n  let node: Fiber = finishedWork;\n  while (true) {\n    if (node.flags & StoreConsistency) {\n      const updateQueue: FunctionComponentUpdateQueue | null = (node.updateQueue: any);\n      if (updateQueue !== null) {\n        const checks = updateQueue.stores;\n        if (checks !== null) {\n          for (let i = 0; i < checks.length; i++) {\n            const check = checks[i];\n            const getSnapshot = check.getSnapshot;\n            const renderedValue = check.value;\n            try {\n              if (!is(getSnapshot(), renderedValue)) {\n                // Found an inconsistent store.\n                return false;\n              }\n            } catch (error) {\n              // If `getSnapshot` throws, return `false`. This will schedule\n              // a re-render, and the error will be rethrown during render.\n              return false;\n            }\n          }\n        }\n      }\n    }\n    const child = node.child;\n    if (node.subtreeFlags & StoreConsistency && child !== null) {\n      child.return = node;\n      node = child;\n      continue;\n    }\n    if (node === finishedWork) {\n      return true;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === finishedWork) {\n        return true;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow doesn't know this is unreachable, but eslint does\n  // eslint-disable-next-line no-unreachable\n  return true;\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(\n    suspendedLanes,\n    workInProgressRootInterleavedUpdatedLanes,\n  );\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n    syncNestedUpdateFlag();\n  }\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  flushPassiveEffects();\n\n  let lanes = getNextLanes(root, NoLanes);\n  if (!includesSomeLane(lanes, SyncLane)) {\n    // There's no remaining sync work left.\n    ensureRootIsScheduled(root, now());\n    return null;\n  }\n\n  let exitStatus = renderRootSync(root, lanes);\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    const errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);\n    if (errorRetryLanes !== NoLanes) {\n      lanes = errorRetryLanes;\n      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  if (exitStatus === RootDidNotComplete) {\n    throw new Error('Root did not complete. This is a bug in React.');\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(\n    root,\n    workInProgressRootRecoverableErrors,\n    workInProgressTransitions,\n  );\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  if (lanes !== NoLanes) {\n    markRootEntangled(root, mergeLanes(lanes, SyncLane));\n    ensureRootIsScheduled(root, now());\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DefaultEventPriority);\n    return fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  }\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    // If there were legacy sync updates, flush them at the end of the outer\n    // most batchedUpdates-like method.\n    if (\n      executionContext === NoContext &&\n      // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n      !(__DEV__ && ReactCurrentActQueue.isBatchingLegacy)\n    ) {\n      resetRenderTimer();\n      flushSyncCallbacksOnlyInLegacyMode();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C, D) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const previousPriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    return fn(a, b, c, d);\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n    if (executionContext === NoContext) {\n      resetRenderTimer();\n    }\n  }\n}\n\n// Overload the definition to the two valid signatures.\n// Warning, this opts-out of checking the function body.\ndeclare function flushSync<R>(fn: () => R): R;\n// eslint-disable-next-line no-redeclare\ndeclare function flushSync(): void;\n// eslint-disable-next-line no-redeclare\nexport function flushSync(fn) {\n  // In legacy mode, we flush pending passive effects at the beginning of the\n  // next event, not at the end of the previous one.\n  if (\n    rootWithPendingPassiveEffects !== null &&\n    rootWithPendingPassiveEffects.tag === LegacyRoot &&\n    (executionContext & (RenderContext | CommitContext)) === NoContext\n  ) {\n    flushPassiveEffects();\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    if (fn) {\n      return fn();\n    } else {\n      return undefined;\n    }\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    // Flush the immediate callbacks that were scheduled during this batch.\n    // Note that this will happen even if batchedUpdates is higher up\n    // the stack.\n    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function isAlreadyRendering() {\n  // Used by the renderer to print a warning if certain APIs are called from\n  // the wrong context.\n  return (\n    __DEV__ &&\n    (executionContext & (RenderContext | CommitContext)) !== NoContext\n  );\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  const prevTransition = ReactCurrentBatchConfig.transition;\n  const previousPriority = getCurrentUpdatePriority();\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    fn();\n  } finally {\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbacks();\n    }\n  }\n}\n\nexport function pushRenderLanes(fiber: Fiber, lanes: Lanes) {\n  pushToStack(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(\n    workInProgressRootIncludedLanes,\n    lanes,\n  );\n}\n\nexport function popRenderLanes(fiber: Fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  popFromStack(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes): Fiber {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      const current = interruptedWork.alternate;\n      unwindInterruptedWork(\n        current,\n        interruptedWork,\n        workInProgressRootRenderLanes,\n      );\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  const rootWorkInProgress = createWorkInProgress(root.current, null);\n  workInProgress = rootWorkInProgress;\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootInProgress;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootInterleavedUpdatedLanes = NoLanes;\n  workInProgressRootRenderPhaseUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n  workInProgressRootConcurrentErrors = null;\n  workInProgressRootRecoverableErrors = null;\n\n  finishQueueingConcurrentUpdates();\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n\n  return rootWorkInProgress;\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      if (enableSchedulingProfiler) {\n        markComponentRenderStopped();\n\n        if (\n          thrownValue !== null &&\n          typeof thrownValue === 'object' &&\n          typeof thrownValue.then === 'function'\n        ) {\n          const wakeable: Wakeable = (thrownValue: any);\n          markComponentSuspended(\n            erroredWork,\n            wakeable,\n            workInProgressRootRenderLanes,\n          );\n        } else {\n          markComponentErrored(\n            erroredWork,\n            thrownValue,\n            workInProgressRootRenderLanes,\n          );\n        }\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootInProgress ||\n    workInProgressRootExitStatus === RootSuspended ||\n    workInProgressRootExitStatus === RootErrored\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError(error: CapturedValue<mixed>) {\n  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n  if (workInProgressRootConcurrentErrors === null) {\n    workInProgressRootConcurrentErrors = [error];\n  } else {\n    workInProgressRootConcurrentErrors.push(error);\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootInProgress;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    throw new Error(\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    if (enableUpdaterTracking) {\n      if (isDevToolsPresent) {\n        const memoizedUpdaters = root.memoizedUpdaters;\n        if (memoizedUpdaters.size > 0) {\n          restorePendingUpdaters(root, workInProgressRootRenderLanes);\n          memoizedUpdaters.clear();\n        }\n\n        // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n        // If we bailout on this work, we'll move them back (like above).\n        // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n        // That way we can keep the current update and future updates separate.\n        movePendingFibersToMemoized(root, lanes);\n      }\n    }\n\n    workInProgressTransitions = getTransitionsForLanes(root, lanes);\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootInProgress;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(current, completedWork, subtreeRenderLanes);\n\n      // Because this fiber did not complete, don't reset its lanes.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its subtree flags.\n        returnFiber.flags |= Incomplete;\n        returnFiber.subtreeFlags = NoFlags;\n        returnFiber.deletions = null;\n      } else {\n        // We've unwound all the way to the root.\n        workInProgressRootExitStatus = RootDidNotComplete;\n        workInProgress = null;\n        return;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootInProgress) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction commitRoot(\n  root: FiberRoot,\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\n  transitions: Array<Transition> | null,\n) {\n  // TODO: This no longer makes any sense. We already wrap the mutation and\n  // layout phases. Should be able to remove.\n  const previousUpdateLanePriority = getCurrentUpdatePriority();\n  const prevTransition = ReactCurrentBatchConfig.transition;\n\n  try {\n    ReactCurrentBatchConfig.transition = null;\n    setCurrentUpdatePriority(DiscreteEventPriority);\n    commitRootImpl(\n      root,\n      recoverableErrors,\n      transitions,\n      previousUpdateLanePriority,\n    );\n  } finally {\n    ReactCurrentBatchConfig.transition = prevTransition;\n    setCurrentUpdatePriority(previousUpdateLanePriority);\n  }\n\n  return null;\n}\n\nfunction commitRootImpl(\n  root: FiberRoot,\n  recoverableErrors: null | Array<CapturedValue<mixed>>,\n  transitions: Array<Transition> | null,\n  renderPriorityLevel: EventPriority,\n) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Should not already be working.');\n  }\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  } else {\n    if (__DEV__) {\n      if (lanes === NoLanes) {\n        console.error(\n          'root.finishedLanes should not be empty during a commit. This is a ' +\n            'bug in React.',\n        );\n      }\n    }\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  if (finishedWork === root.current) {\n    throw new Error(\n      'Cannot commit the same tree as before. This error is likely caused by ' +\n        'a bug in React. Please file an issue.',\n    );\n  }\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n  root.callbackPriority = NoLane;\n\n  // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // If there are pending passive effects, schedule a callback to process them.\n  // Do this as early as possible, so it is queued before anything else that\n  // might get scheduled in the commit phase. (See #16714.)\n  // TODO: Delete all other places that schedule the passive effect callback\n  // They're redundant.\n  if (\n    (finishedWork.subtreeFlags & PassiveMask) !== NoFlags ||\n    (finishedWork.flags & PassiveMask) !== NoFlags\n  ) {\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      pendingPassiveEffectsRemainingLanes = remainingLanes;\n      // workInProgressTransitions might be overwritten, so we want\n      // to store it in pendingPassiveTransitions until they get processed\n      // We need to pass this through as an argument to commitRoot\n      // because workInProgressTransitions might have changed between\n      // the previous render and commit if we throttle the commit\n      // with setTimeout\n      pendingPassiveTransitions = transitions;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        // This render triggered passive effects: release the root cache pool\n        // *after* passive effects fire to avoid freeing a cache pool that may\n        // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n        return null;\n      });\n    }\n  }\n\n  // Check if there are any effects in the whole tree.\n  // TODO: This is left over from the effect list implementation, where we had\n  // to check for the existence of `firstEffect` to satisfy Flow. I think the\n  // only other reason this optimization exists is because it affects profiling.\n  // Reconsider whether this is necessary.\n  const subtreeHasEffects =\n    (finishedWork.subtreeFlags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n  const rootHasEffect =\n    (finishedWork.flags &\n      (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n    NoFlags;\n\n  if (subtreeHasEffects || rootHasEffect) {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = null;\n    const previousPriority = getCurrentUpdatePriority();\n    setCurrentUpdatePriority(DiscreteEventPriority);\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    const shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(\n      root,\n      finishedWork,\n    );\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      // Track the root here, rather than in commitLayoutEffects(), because of ref setters.\n      // Updates scheduled during ref detachment should also be flagged.\n      rootCommittingMutationOrLayoutEffects = root;\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    commitMutationEffects(root, finishedWork, lanes);\n\n    if (enableCreateEventHandleAPI) {\n      if (shouldFireAfterActiveInstanceBlur) {\n        afterActiveInstanceBlur();\n      }\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStarted(lanes);\n      }\n    }\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStarted(lanes);\n    }\n    commitLayoutEffects(finishedWork, root, lanes);\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logLayoutEffectsStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markLayoutEffectsStopped();\n    }\n\n    if (enableProfilerTimer && enableProfilerNestedUpdateScheduledHook) {\n      rootCommittingMutationOrLayoutEffects = null;\n    }\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    executionContext = prevExecutionContext;\n\n    // Reset the priority to the previous non-sync value.\n    setCurrentUpdatePriority(previousPriority);\n    ReactCurrentBatchConfig.transition = prevTransition;\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n  } else {\n    // There were no passive effects, so we can immediately release the cache\n    // pool for this render.\n    releaseRootPooledCache(root, remainingLanes);\n    if (__DEV__) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n    }\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n  // is to detect whether something might have called setState inside\n  // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n  // inside `componentDidCatch` is itself flawed — that's why we recommend\n  // `getDerivedStateFromError` instead. However, it could be improved by\n  // checking if remainingLanes includes Sync work, instead of whether there's\n  // any work remaining at all (which would also include stuff like Suspense\n  // retries or transitions). It's been like this for a while, though, so fixing\n  // it probably isn't that urgent.\n  if (remainingLanes === NoLanes) {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    if (!rootDidHavePassiveEffects) {\n      commitDoubleInvokeEffectsInDEV(root.current, false);\n    }\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      root.memoizedUpdaters.clear();\n    }\n  }\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (recoverableErrors !== null) {\n    // There were errors during this render, but recovered from them without\n    // needing to surface it to the UI. We log them here.\n    const onRecoverableError = root.onRecoverableError;\n    for (let i = 0; i < recoverableErrors.length; i++) {\n      const recoverableError = recoverableErrors[i];\n      const componentStack = recoverableError.stack;\n      const digest = recoverableError.digest;\n      onRecoverableError(recoverableError.value, {componentStack, digest});\n    }\n  }\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  // If the passive effects are the result of a discrete render, flush them\n  // synchronously at the end of the current task so that the result is\n  // immediately observable. Otherwise, we assume that they are not\n  // order-dependent and do not need to be observed by external systems, so we\n  // can wait until after paint.\n  // TODO: We can optimize this by not scheduling the callback earlier. Since we\n  // currently schedule the callback in multiple places, will wait until those\n  // are consolidated.\n  if (\n    includesSomeLane(pendingPassiveEffectsLanes, SyncLane) &&\n    root.tag !== LegacyRoot\n  ) {\n    flushPassiveEffects();\n  }\n\n  // Read this again, since a passive effect might have updated it\n  remainingLanes = root.pendingLanes;\n  if (includesSomeLane(remainingLanes, (SyncLane: Lane))) {\n    if (enableProfilerTimer && enableProfilerNestedUpdatePhase) {\n      markNestedUpdateScheduled();\n    }\n\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbacks();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction releaseRootPooledCache(root: FiberRoot, remainingLanes: Lanes) {\n  if (enableCache) {\n    const pooledCacheLanes = (root.pooledCacheLanes &= remainingLanes);\n    if (pooledCacheLanes === NoLanes) {\n      // None of the remaining work relies on the cache pool. Clear it so\n      // subsequent requests get a new cache\n      const pooledCache = root.pooledCache;\n      if (pooledCache != null) {\n        root.pooledCache = null;\n        releaseCache(pooledCache);\n      }\n    }\n  }\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n  // probably just combine the two functions. I believe they were only separate\n  // in the first place because we used to wrap it with\n  // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n  // priority within React itself, so we can mutate the variable directly.\n  if (rootWithPendingPassiveEffects !== null) {\n    // Cache the root since rootWithPendingPassiveEffects is cleared in\n    // flushPassiveEffectsImpl\n    const root = rootWithPendingPassiveEffects;\n    // Cache and clear the remaining lanes flag; it must be reset since this\n    // method can be called from various places, not always from commitRoot\n    // where the remaining lanes are known\n    const remainingLanes = pendingPassiveEffectsRemainingLanes;\n    pendingPassiveEffectsRemainingLanes = NoLanes;\n\n    const renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n    const priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    const previousPriority = getCurrentUpdatePriority();\n\n    try {\n      ReactCurrentBatchConfig.transition = null;\n      setCurrentUpdatePriority(priority);\n      return flushPassiveEffectsImpl();\n    } finally {\n      setCurrentUpdatePriority(previousPriority);\n      ReactCurrentBatchConfig.transition = prevTransition;\n\n      // Once passive effects have run for the tree - giving components a\n      // chance to retain cache instances they use - release the pooled\n      // cache at the root (if there is one)\n      releaseRootPooledCache(root, remainingLanes);\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  // Cache and clear the transitions flag\n  const transitions = pendingPassiveTransitions;\n  pendingPassiveTransitions = null;\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n  // Figure out why and fix it. It's not causing any known issues (probably\n  // because it's only used for profiling), but it's a refactor hazard.\n  pendingPassiveEffectsLanes = NoLanes;\n\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    throw new Error('Cannot flush passive effects while already rendering.');\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = true;\n    didScheduleUpdateDuringPassiveEffects = false;\n\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n\n  commitPassiveUnmountEffects(root.current);\n  commitPassiveMountEffects(root, root.current, lanes, transitions);\n\n  // TODO: Move to commitPassiveMountEffects\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  if (__DEV__ && enableStrictEffects) {\n    commitDoubleInvokeEffectsInDEV(root.current, true);\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbacks();\n\n  if (enableTransitionTracing) {\n    const prevPendingTransitionCallbacks = currentPendingTransitionCallbacks;\n    const prevRootTransitionCallbacks = root.transitionCallbacks;\n    if (\n      prevPendingTransitionCallbacks !== null &&\n      prevRootTransitionCallbacks !== null\n    ) {\n      // TODO(luna) Refactor this code into the Host Config\n      // TODO(luna) The end time here is not necessarily accurate\n      // because passive effects could be called before paint\n      // (synchronously) or after paint (normally). We need\n      // to come up with a way to get the correct end time for both cases.\n      // One solution is in the host config, if the passive effects\n      // have not yet been run, make a call to flush the passive effects\n      // right after paint.\n      const endTime = now();\n      currentPendingTransitionCallbacks = null;\n\n      scheduleCallback(IdleSchedulerPriority, () =>\n        processTransitionCallbacks(\n          prevPendingTransitionCallbacks,\n          endTime,\n          prevRootTransitionCallbacks,\n        ),\n      );\n    }\n  }\n\n  if (__DEV__) {\n    // If additional passive effects were scheduled, increment a counter. If this\n    // exceeds the limit, we'll fire a warning.\n    if (didScheduleUpdateDuringPassiveEffects) {\n      if (root === rootWithPassiveNestedUpdates) {\n        nestedPassiveUpdateCount++;\n      } else {\n        nestedPassiveUpdateCount = 0;\n        rootWithPassiveNestedUpdates = root;\n      }\n    } else {\n      nestedPassiveUpdateCount = 0;\n    }\n    isFlushingPassiveEffects = false;\n    didScheduleUpdateDuringPassiveEffects = false;\n  }\n\n  // TODO: Move to commitPassiveMountEffects\n  onPostCommitRootDevTools(root);\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const stateNode = root.current.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  const root = enqueueUpdate(rootFiber, update, (SyncLane: Lane));\n  const eventTime = requestEventTime();\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function captureCommitPhaseError(\n  sourceFiber: Fiber,\n  nearestMountedAncestor: Fiber | null,\n  error: mixed,\n) {\n  if (__DEV__) {\n    reportUncaughtErrorInDEV(error);\n    setIsRunningInsertionEffect(false);\n  }\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = null;\n  if (skipUnmountedBoundaries) {\n    fiber = nearestMountedAncestor;\n  } else {\n    fiber = sourceFiber.return;\n  }\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        const root = enqueueUpdate(fiber, update, (SyncLane: Lane));\n        const eventTime = requestEventTime();\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n\n  if (__DEV__) {\n    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning\n    // will fire for errors that are thrown by destroy functions inside deleted\n    // trees. What it should instead do is propagate the error to the parent of\n    // the deleted tree. In the meantime, do not add this warning to the\n    // allowlist; this is only for our internal use.\n    console.error(\n      'Internal React error: Attempted to capture a commit phase error ' +\n        'inside a detached tree. This indicates a bug in React. Likely ' +\n        'causes include deleting the same fiber more than once, committing an ' +\n        'already-finished tree, or an inconsistent return pointer.\\n\\n' +\n        'Error message:\\n\\n%s',\n      error,\n    );\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new lanes.\n  if (retryLane === NoLane) {\n    // TODO: Assign this to `suspenseState.retryLane`? to avoid\n    // unnecessary entanglement?\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  switch (boundaryFiber.tag) {\n    case SuspenseComponent:\n      retryCache = boundaryFiber.stateNode;\n      const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n      break;\n    case SuspenseListComponent:\n      retryCache = boundaryFiber.stateNode;\n      break;\n    default:\n      throw new Error(\n        'Pinged unknown suspense boundary type. ' +\n          'This is probably a bug in React.',\n      );\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n\n    throw new Error(\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      rootWithPassiveNestedUpdates = null;\n\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nfunction commitDoubleInvokeEffectsInDEV(\n  fiber: Fiber,\n  hasPassiveEffects: boolean,\n) {\n  if (__DEV__ && enableStrictEffects) {\n    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n    // Maybe not a big deal since this is DEV only behavior.\n\n    setCurrentDebugFiberInDEV(fiber);\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(\n        fiber,\n        MountPassiveDev,\n        invokePassiveEffectUnmountInDEV,\n      );\n    }\n\n    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n    if (hasPassiveEffects) {\n      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n    }\n    resetCurrentDebugFiberInDEV();\n  }\n}\n\nfunction invokeEffectsInDev(\n  firstChild: Fiber,\n  fiberFlags: Flags,\n  invokeEffectFn: (fiber: Fiber) => void,\n): void {\n  if (__DEV__ && enableStrictEffects) {\n    // We don't need to re-check StrictEffectsMode here.\n    // This function is only called if that check has already passed.\n\n    let current = firstChild;\n    let subtreeRoot = null;\n    while (current !== null) {\n      const primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n      if (\n        current !== subtreeRoot &&\n        current.child !== null &&\n        primarySubtreeFlag !== NoFlags\n      ) {\n        current = current.child;\n      } else {\n        if ((current.flags & fiberFlags) !== NoFlags) {\n          invokeEffectFn(current);\n        }\n\n        if (current.sibling !== null) {\n          current = current.sibling;\n        } else {\n          current = subtreeRoot = current.return;\n        }\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nexport function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber: Fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & ConcurrentMode)) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        didSuspendOrErrorWhileHydratingDEV() ||\n        (originalError !== null &&\n          typeof originalError === 'object' &&\n          typeof originalError.then === 'function')\n      ) {\n        // Don't replay promises.\n        // Don't replay errors if we are hydrating and have already suspended or handled an error\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(current, unitOfWork, workInProgressRootRenderLanes);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        if (\n          typeof replayError === 'object' &&\n          replayError !== null &&\n          replayError._suppressLogging &&\n          typeof originalError === 'object' &&\n          originalError !== null &&\n          !originalError._suppressLogging\n        ) {\n          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n          originalError._suppressLogging = true;\n        }\n      }\n      // We always throw the original error in case the second render pass is not idempotent.\n      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n      throw originalError;\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentNameFromFiber(fiber) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\nexport function restorePendingUpdaters(root: FiberRoot, lanes: Lanes): void {\n  if (enableUpdaterTracking) {\n    if (isDevToolsPresent) {\n      const memoizedUpdaters = root.memoizedUpdaters;\n      memoizedUpdaters.forEach(schedulingFiber => {\n        addFiberToLanesMap(root, schedulingFiber, lanes);\n      });\n\n      // This function intentionally does not clear memoized updaters.\n      // Those may still be relevant to the current commit\n      // and a future one (e.g. Suspense).\n    }\n  }\n}\n\nconst fakeActCallbackNode = {};\nfunction scheduleCallback(priorityLevel, callback) {\n  if (__DEV__) {\n    // If we're currently inside an `act` scope, bypass Scheduler and push to\n    // the `act` queue instead.\n    const actQueue = ReactCurrentActQueue.current;\n    if (actQueue !== null) {\n      actQueue.push(callback);\n      return fakeActCallbackNode;\n    } else {\n      return Scheduler_scheduleCallback(priorityLevel, callback);\n    }\n  } else {\n    // In production, always call Scheduler. This function will be stripped out.\n    return Scheduler_scheduleCallback(priorityLevel, callback);\n  }\n}\n\nfunction cancelCallback(callbackNode) {\n  if (__DEV__ && callbackNode === fakeActCallbackNode) {\n    return;\n  }\n  // In production, always call Scheduler. This function will be stripped out.\n  return Scheduler_cancelCallback(callbackNode);\n}\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && ReactCurrentActQueue.current !== null;\n}\n\nfunction warnIfUpdatesNotWrappedWithActDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (fiber.mode & ConcurrentMode) {\n      if (!isConcurrentActEnvironment()) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n    } else {\n      // Legacy mode has additional cases where we suppress a warning.\n      if (!isLegacyActEnvironment(fiber)) {\n        // Not in an act environment. No need to warn.\n        return;\n      }\n      if (executionContext !== NoContext) {\n        // Legacy mode doesn't warn if the update is batched, i.e.\n        // batchedUpdates or flushSync.\n        return;\n      }\n      if (\n        fiber.tag !== FunctionComponent &&\n        fiber.tag !== ForwardRef &&\n        fiber.tag !== SimpleMemoComponent\n      ) {\n        // For backwards compatibility with pre-hooks code, legacy mode only\n        // warns for updates that originate from a hook.\n        return;\n      }\n    }\n\n    if (ReactCurrentActQueue.current === null) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentNameFromFiber(fiber),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nfunction warnIfSuspenseResolutionNotWrappedWithActDEV(root: FiberRoot): void {\n  if (__DEV__) {\n    if (\n      root.tag !== LegacyRoot &&\n      isConcurrentActEnvironment() &&\n      ReactCurrentActQueue.current === null\n    ) {\n      console.error(\n        'A suspended resource finished loading inside a test, but the event ' +\n          'was not wrapped in act(...).\\n\\n' +\n          'When testing, code that resolves suspended data should be wrapped ' +\n          'into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* finish loading suspended data */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n      );\n    }\n  }\n}\n\nexport function setIsRunningInsertionEffect(isRunning: boolean): void {\n  if (__DEV__) {\n    isRunningInsertionEffect = isRunning;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-disable react-internal/prod-error-codes */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport {\n  flushSync,\n  scheduleUpdateOnFiber,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {updateContainer} from './ReactFiberReconciler.old';\nimport {emptyContextObject} from './ReactFiberContext.old';\nimport {SyncLane, NoTimestamp} from './ReactFiberLane.old';\nimport {\n  ClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  HostComponent,\n  HostPortal,\n  HostRoot,\n  MemoComponent,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type Family = {|\n  current: any,\n|};\n\nexport type RefreshUpdate = {|\n  staleFamilies: Set<Family>,\n  updatedFamilies: Set<Family>,\n|};\n\n// Resolves type to a family.\ntype RefreshHandler = any => Family | void;\n\n// Used by React Refresh runtime through DevTools Global Hook.\nexport type SetRefreshHandler = (handler: RefreshHandler | null) => void;\nexport type ScheduleRefresh = (root: FiberRoot, update: RefreshUpdate) => void;\nexport type ScheduleRoot = (root: FiberRoot, element: ReactNodeList) => void;\nexport type FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n) => Set<Instance>;\n\nlet resolveFamily: RefreshHandler | null = null;\n// $FlowFixMe Flow gets confused by a WeakSet feature check below.\nlet failedBoundaries: WeakSet<Fiber> | null = null;\n\nexport const setRefreshHandler = (handler: RefreshHandler | null): void => {\n  if (__DEV__) {\n    resolveFamily = handler;\n  }\n};\n\nexport function resolveFunctionForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function resolveClassForHotReloading(type: any): any {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\n\nexport function resolveForwardRefForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (\n        type !== null &&\n        type !== undefined &&\n        typeof type.render === 'function'\n      ) {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        const currentRender = resolveFunctionForHotReloading(type.render);\n        if (type.render !== currentRender) {\n          const syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender,\n          };\n          if (type.displayName !== undefined) {\n            (syntheticType: any).displayName = type.displayName;\n          }\n          return syntheticType;\n        }\n      }\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function isCompatibleFamilyForHotReloading(\n  fiber: Fiber,\n  element: ReactElement,\n): boolean {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    const prevType = fiber.elementType;\n    const nextType = element.type;\n\n    // If we got here, we know types aren't === equal.\n    let needsCompareFamilies = false;\n\n    const $$typeofNextType =\n      typeof nextType === 'object' && nextType !== null\n        ? nextType.$$typeof\n        : null;\n\n    switch (fiber.tag) {\n      case ClassComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case FunctionComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          // We don't know the inner type yet.\n          // We're going to assume that the lazy inner type is stable,\n          // and so it is sufficient to avoid reconciling it away.\n          // We're not going to unwrap or actually use the new lazy type.\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case ForwardRef: {\n        if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if ($$typeofNextType === REACT_MEMO_TYPE) {\n          // TODO: if it was but can no longer be simple,\n          // we shouldn't set this.\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      default:\n        return false;\n    }\n\n    // Check if both types have a family and it's the same one.\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      const prevFamily = resolveFamily(prevType);\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return false;\n  }\n}\n\nexport function markFailedErrorBoundaryForHotReloading(fiber: Fiber) {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n    failedBoundaries.add(fiber);\n  }\n}\n\nexport const scheduleRefresh: ScheduleRefresh = (\n  root: FiberRoot,\n  update: RefreshUpdate,\n): void => {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    const {staleFamilies, updatedFamilies} = update;\n    flushPassiveEffects();\n    flushSync(() => {\n      scheduleFibersWithFamiliesRecursively(\n        root.current,\n        updatedFamilies,\n        staleFamilies,\n      );\n    });\n  }\n};\n\nexport const scheduleRoot: ScheduleRoot = (\n  root: FiberRoot,\n  element: ReactNodeList,\n): void => {\n  if (__DEV__) {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n    flushPassiveEffects();\n    flushSync(() => {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(\n  fiber: Fiber,\n  updatedFamilies: Set<Family>,\n  staleFamilies: Set<Family>,\n) {\n  if (__DEV__) {\n    const {alternate, child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    let needsRender = false;\n    let needsRemount = false;\n    if (candidateType !== null) {\n      const family = resolveFamily(candidateType);\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n    if (failedBoundaries !== null) {\n      if (\n        failedBoundaries.has(fiber) ||\n        (alternate !== null && failedBoundaries.has(alternate))\n      ) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n    if (needsRemount || needsRender) {\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(\n        child,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(\n        sibling,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n  }\n}\n\nexport const findHostInstancesForRefresh: FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n): Set<Instance> => {\n  if (__DEV__) {\n    const hostInstances = new Set();\n    const types = new Set(families.map(family => family.current));\n    findHostInstancesForMatchingFibersRecursively(\n      root.current,\n      types,\n      hostInstances,\n    );\n    return hostInstances;\n  } else {\n    throw new Error(\n      'Did not expect findHostInstancesForRefresh to be called in production.',\n    );\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(\n  fiber: Fiber,\n  types: Set<any>,\n  hostInstances: Set<Instance>,\n) {\n  if (__DEV__) {\n    const {child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    let didMatch = false;\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(\n          child,\n          types,\n          hostInstances,\n        );\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(\n        sibling,\n        types,\n        hostInstances,\n      );\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): void {\n  if (__DEV__) {\n    const foundHostInstances = findChildHostInstancesForFiberShallowly(\n      fiber,\n      hostInstances,\n    );\n    if (foundHostInstances) {\n      return;\n    }\n    // If we didn't find any host children, fallback to closest host parent.\n    let node = fiber;\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): boolean {\n  if (__DEV__) {\n    let node: Fiber = fiber;\n    let foundHostInstances = false;\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode);\n        // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactFragment, ReactPortal, ReactScope} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane.old';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {\n  OffscreenProps,\n  OffscreenInstance,\n} from './ReactFiberOffscreenComponent';\n\nimport {\n  createRootStrictEffectsByDefault,\n  enableCache,\n  enableStrictEffects,\n  enableProfilerTimer,\n  enableScopeAPI,\n  enableLegacyHidden,\n  enableSyncDefaultUpdates,\n  allowConcurrentByDefault,\n  enableTransitionTracing,\n  enableDebugTracing,\n} from 'shared/ReactFeatureFlags';\nimport {NoFlags, Placement, StaticMask} from './ReactFiberFlags';\nimport {ConcurrentRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  ScopeComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  CacheComponent,\n  TracingMarkerComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane.old';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictLegacyMode,\n  StrictEffectsMode,\n  ConcurrentUpdatesByDefaultMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n  REACT_CACHE_TYPE,\n  REACT_TRACING_MARKER_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.subtreeFlags = NoFlags;\n  this.deletions = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effects are no longer valid.\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  // Reset all effects except static ones.\n  // Static effects are not specific to a render.\n  workInProgress.flags = current.flags & StaticMask;\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect flags but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= StaticMask | Placement;\n\n  // The effects are no longer valid.\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.subtreeFlags = NoFlags;\n    workInProgress.deletions = null;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(\n  tag: RootTag,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode;\n    if (isStrictMode === true) {\n      mode |= StrictLegacyMode;\n\n      if (enableStrictEffects) {\n        mode |= StrictEffectsMode;\n      }\n    } else if (enableStrictEffects && createRootStrictEffectsByDefault) {\n      mode |= StrictLegacyMode | StrictEffectsMode;\n    }\n    if (\n      // We only use this flag for our repo tests to check both behaviors.\n      // TODO: Flip this flag and rename it something like \"forceConcurrentByDefaultForTesting\"\n      !enableSyncDefaultUpdates ||\n      // Only for internal experiments.\n      (allowConcurrentByDefault && concurrentUpdatesByDefaultOverride)\n    ) {\n      mode |= ConcurrentUpdatesByDefaultMode;\n    }\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictLegacyMode;\n        if (enableStrictEffects && (mode & ConcurrentMode) !== NoMode) {\n          // Strict effects should never run on legacy roots\n          mode |= StrictEffectsMode;\n        }\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        if (enableLegacyHidden) {\n          return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_CACHE_TYPE:\n        if (enableCache) {\n          return createFiberFromCache(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_TRACING_MARKER_TYPE:\n        if (enableTransitionTracing) {\n          return createFiberFromTracingMarker(pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        if (enableDebugTracing) {\n          fiberTag = Mode;\n          mode |= DebugTracingMode;\n          break;\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentNameFromFiber(owner) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n\n        throw new Error(\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            `but got: ${type == null ? type : typeof type}.${info}`,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error(\n        'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n        typeof pendingProps.id,\n      );\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  const primaryChildInstance: OffscreenInstance = {\n    isHidden: false,\n  };\n  fiber.stateNode = primaryChildInstance;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromCache(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(CacheComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_CACHE_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromTracingMarker(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(TracingMarkerComponent, pendingProps, key, mode);\n  fiber.elementType = REACT_TRACING_MARKER_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  fiber.elementType = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.subtreeFlags = source.subtreeFlags;\n  target.deletions = source.deletions;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {\n  FiberRoot,\n  SuspenseHydrationCallbacks,\n  TransitionTracingCallbacks,\n} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {Cache} from './ReactFiberCacheComponent.old';\nimport type {\n  PendingSuspenseBoundaries,\n  Transition,\n} from './ReactFiberTracingMarkerComponent.old';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLane,\n  NoLanes,\n  NoTimestamp,\n  TotalLanes,\n  createLaneMap,\n} from './ReactFiberLane.old';\nimport {\n  enableSuspenseCallback,\n  enableCache,\n  enableProfilerCommitHooks,\n  enableProfilerTimer,\n  enableUpdaterTracking,\n  enableTransitionTracing,\n} from 'shared/ReactFeatureFlags';\nimport {initializeUpdateQueue} from './ReactFiberClassUpdateQueue.old';\nimport {LegacyRoot, ConcurrentRoot} from './ReactRootTags';\nimport {createCache, retainCache} from './ReactFiberCacheComponent.old';\n\nexport type RootState = {\n  element: any,\n  isDehydrated: boolean,\n  cache: Cache,\n  pendingSuspenseBoundaries: PendingSuspenseBoundaries | null,\n  transitions: Set<Transition> | null,\n};\n\nfunction FiberRootNode(\n  containerInfo,\n  tag,\n  hydrate,\n  identifierPrefix,\n  onRecoverableError,\n) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.callbackNode = null;\n  this.callbackPriority = NoLane;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  this.identifierPrefix = identifierPrefix;\n  this.onRecoverableError = onRecoverableError;\n\n  if (enableCache) {\n    this.pooledCache = null;\n    this.pooledCacheLanes = NoLanes;\n  }\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (enableTransitionTracing) {\n    this.transitionCallbacks = null;\n    const transitionLanesMap = (this.transitionLanes = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      transitionLanesMap.push(null);\n    }\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    this.effectDuration = 0;\n    this.passiveEffectDuration = 0;\n  }\n\n  if (enableUpdaterTracking) {\n    this.memoizedUpdaters = new Set();\n    const pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n    for (let i = 0; i < TotalLanes; i++) {\n      pendingUpdatersLaneMap.push(new Set());\n    }\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case ConcurrentRoot:\n        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = hydrate ? 'hydrate()' : 'render()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  initialChildren: ReactNodeList,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  // TODO: We have several of these arguments that are conceptually part of the\n  // host config, but because they are passed in at runtime, we have to thread\n  // them through the root constructor. Perhaps we should put them all into a\n  // single type, like a DynamicHostConfig that is defined by the renderer.\n  identifierPrefix: string,\n  onRecoverableError: null | ((error: mixed) => void),\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(\n    containerInfo,\n    tag,\n    hydrate,\n    identifierPrefix,\n    onRecoverableError,\n  ): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  if (enableTransitionTracing) {\n    root.transitionCallbacks = transitionCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(\n    tag,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n  );\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  if (enableCache) {\n    const initialCache = createCache();\n    retainCache(initialCache);\n\n    // The pooledCache is a fresh cache instance that is used temporarily\n    // for newly mounted boundaries during a render. In general, the\n    // pooledCache is always cleared from the root at the end of a render:\n    // it is either released when render commits, or moved to an Offscreen\n    // component if rendering suspends. Because the lifetime of the pooled\n    // cache is distinct from the main memoizedState.cache, it must be\n    // retained separately.\n    root.pooledCache = initialCache;\n    retainCache(initialCache);\n    const initialState: RootState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: initialCache,\n      transitions: null,\n      pendingSuspenseBoundaries: null,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  } else {\n    const initialState: RootState = {\n      element: initialChildren,\n      isDehydrated: hydrate,\n      cache: (null: any), // not enabled yet\n      transitions: null,\n      pendingSuspenseBoundaries: null,\n    };\n    uninitializedFiber.memoizedState = initialState;\n  }\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Fiber,\n  SuspenseHydrationCallbacks,\n  TransitionTracingCallbacks,\n} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane} from './ReactFiberLane.old';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';\nimport isArray from 'shared/isArray';\nimport {enableSchedulingProfiler} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {isRootDehydrated} from './ReactFiberShellHydration';\nimport {\n  injectInternals,\n  markRenderScheduled,\n  onScheduleRoot,\n} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  scheduleInitialHydrationOnRoot,\n  flushRoot,\n  batchedUpdates,\n  flushSync,\n  isAlreadyRendering,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {enqueueConcurrentRenderForLane} from './ReactFiberConcurrentUpdates.old';\nimport {\n  createUpdate,\n  enqueueUpdate,\n  entangleTransitions,\n} from './ReactFiberClassUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictLegacyMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n} from './ReactFiberLane.old';\nimport {\n  getCurrentUpdatePriority,\n  runWithPriority,\n} from './ReactEventPriorities.old';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport ReactVersion from 'shared/ReactVersion';\nexport {registerMutableSourceForHydration} from './ReactMutableSource.old';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPseudoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      throw new Error('Unable to find node on an unmounted component.');\n    } else {\n      const keys = Object.keys(component).join(',');\n      throw new Error(\n        `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        throw new Error('Unable to find node on an unmounted component.');\n      } else {\n        const keys = Object.keys(component).join(',');\n        throw new Error(\n          `Argument appears to not be a ReactComponent. Keys: ${keys}`,\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictLegacyMode) {\n      const componentName = getComponentNameFromFiber(fiber) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictLegacyMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  identifierPrefix: string,\n  onRecoverableError: (error: mixed) => void,\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): OpaqueRoot {\n  const hydrate = false;\n  const initialChildren = null;\n  return createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onRecoverableError,\n    transitionCallbacks,\n  );\n}\n\nexport function createHydrationContainer(\n  initialChildren: ReactNodeList,\n  // TODO: Remove `callback` when we delete legacy mode.\n  callback: ?Function,\n  containerInfo: Container,\n  tag: RootTag,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n  isStrictMode: boolean,\n  concurrentUpdatesByDefaultOverride: null | boolean,\n  identifierPrefix: string,\n  onRecoverableError: (error: mixed) => void,\n  transitionCallbacks: null | TransitionTracingCallbacks,\n): OpaqueRoot {\n  const hydrate = true;\n  const root = createFiberRoot(\n    containerInfo,\n    tag,\n    hydrate,\n    initialChildren,\n    hydrationCallbacks,\n    isStrictMode,\n    concurrentUpdatesByDefaultOverride,\n    identifierPrefix,\n    onRecoverableError,\n    transitionCallbacks,\n  );\n\n  // TODO: Move this to FiberRoot constructor\n  root.context = getContextForSubtree(null);\n\n  // Schedule the initial render. In a hydration root, this is different from\n  // a regular update because the initial render must match was was rendered\n  // on the server.\n  // NOTE: This update intentionally doesn't have a payload. We're only using\n  // the update to schedule work on the root fiber (and, for legacy roots, to\n  // enqueue the callback if one is provided).\n  const current = root.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n  const update = createUpdate(eventTime, lane);\n  update.callback =\n    callback !== undefined && callback !== null ? callback : null;\n  enqueueUpdate(current, update, lane);\n  scheduleInitialHydrationOnRoot(root, lane, eventTime);\n\n  return root;\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentNameFromFiber(ReactCurrentFiberCurrent) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  const root = enqueueUpdate(current, update, lane);\n  if (root !== null) {\n    scheduleUpdateOnFiber(root, current, lane, eventTime);\n    entangleTransitions(root, current, lane);\n  }\n\n  return lane;\n}\n\nexport {\n  batchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushControlled,\n  flushSync,\n  isAlreadyRendering,\n  flushPassiveEffects,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot: {\n      const root: FiberRoot = fiber.stateNode;\n      if (isRootDehydrated(root)) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    }\n    case SuspenseComponent: {\n      flushSync(() => {\n        const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          const eventTime = requestEventTime();\n          scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);\n        }\n      });\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = SyncLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n    }\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thenables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptDiscreteHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const lane = SyncLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const lane = SelectiveHydrationLane;\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const lane = requestUpdateLane(fiber);\n  const root = enqueueConcurrentRenderForLane(fiber, lane);\n  if (root !== null) {\n    const eventTime = requestEventTime();\n    scheduleUpdateOnFiber(root, fiber, lane, eventTime);\n  }\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport {getCurrentUpdatePriority, runWithPriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldErrorImpl = fiber => null;\n\nexport function shouldError(fiber: Fiber): ?boolean {\n  return shouldErrorImpl(fiber);\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setErrorHandler = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n      }\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    const root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n    if (root !== null) {\n      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  setErrorHandler = (newShouldErrorImpl: Fiber => ?boolean) => {\n    shouldErrorImpl = newShouldErrorImpl;\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setErrorHandler,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n    // Enables DevTools to detect reconciler version rather than renderer version\n    // which may not match for third party renderers.\n    reconcilerVersion: ReactVersion,\n  });\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as React from 'react';\nimport ReactVersion from 'shared/ReactVersion';\nimport {LegacyRoot} from 'react-reconciler/src/ReactRootTags';\nimport {\n  createContainer,\n  updateContainer,\n  injectIntoDevTools,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport Transform from 'art/core/transform';\nimport Mode from 'art/modes/current';\nimport FastNoSideEffects from 'art/modes/fast-noSideEffects';\n\nimport {TYPES, childrenAsString} from './ReactARTInternals';\n\nMode.setCurrent(\n  // Change to 'art/modes/dom' for easier debugging via SVG\n  FastNoSideEffects,\n);\n\n/** Declarative fill-type objects; API design not finalized */\n\nconst slice = Array.prototype.slice;\n\nclass LinearGradient {\n  constructor(stops, x1, y1, x2, y2) {\n    this._args = slice.call(arguments);\n  }\n\n  applyFill(node) {\n    node.fillLinear.apply(node, this._args);\n  }\n}\n\nclass RadialGradient {\n  constructor(stops, fx, fy, rx, ry, cx, cy) {\n    this._args = slice.call(arguments);\n  }\n\n  applyFill(node) {\n    node.fillRadial.apply(node, this._args);\n  }\n}\n\nclass Pattern {\n  constructor(url, width, height, left, top) {\n    this._args = slice.call(arguments);\n  }\n\n  applyFill(node) {\n    node.fillImage.apply(node, this._args);\n  }\n}\n\n/** React Components */\n\nclass Surface extends React.Component {\n  componentDidMount() {\n    const {height, width} = this.props;\n\n    this._surface = Mode.Surface(+width, +height, this._tagRef);\n\n    this._mountNode = createContainer(\n      this._surface,\n      LegacyRoot,\n      null,\n      false,\n      false,\n      '',\n    );\n    updateContainer(this.props.children, this._mountNode, this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const props = this.props;\n\n    if (props.height !== prevProps.height || props.width !== prevProps.width) {\n      this._surface.resize(+props.width, +props.height);\n    }\n\n    updateContainer(this.props.children, this._mountNode, this);\n\n    if (this._surface.render) {\n      this._surface.render();\n    }\n  }\n\n  componentWillUnmount() {\n    updateContainer(null, this._mountNode, this);\n  }\n\n  render() {\n    // This is going to be a placeholder because we don't know what it will\n    // actually resolve to because ART may render canvas, vml or svg tags here.\n    // We only allow a subset of properties since others might conflict with\n    // ART's properties.\n    const props = this.props;\n\n    // TODO: ART's Canvas Mode overrides surface title and cursor\n    const Tag = Mode.Surface.tagName;\n\n    return (\n      <Tag\n        ref={ref => (this._tagRef = ref)}\n        accessKey={props.accessKey}\n        className={props.className}\n        draggable={props.draggable}\n        role={props.role}\n        style={props.style}\n        tabIndex={props.tabIndex}\n        title={props.title}\n      />\n    );\n  }\n}\n\nclass Text extends React.Component {\n  constructor(props) {\n    super(props);\n    // We allow reading these props. Ideally we could expose the Text node as\n    // ref directly.\n    ['height', 'width', 'x', 'y'].forEach(key => {\n      Object.defineProperty(this, key, {\n        get: function() {\n          return this._text ? this._text[key] : undefined;\n        },\n      });\n    });\n  }\n  render() {\n    // This means you can't have children that render into strings...\n    const T = TYPES.TEXT;\n    return (\n      <T {...this.props} ref={t => (this._text = t)}>\n        {childrenAsString(this.props.children)}\n      </T>\n    );\n  }\n}\n\ninjectIntoDevTools({\n  findFiberByHostInstance: () => null,\n  bundleType: __DEV__ ? 1 : 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-art',\n});\n\n/** API */\n\nexport const ClippingRectangle = TYPES.CLIPPING_RECTANGLE;\nexport const Group = TYPES.GROUP;\nexport const Shape = TYPES.SHAPE;\nexport const Path = Mode.Path;\nexport {LinearGradient, Pattern, RadialGradient, Surface, Text, Transform};\n"],"names":["LegacyRoot","ConcurrentRoot","warningWWW","require","suppressWarning","setSuppressWarning","newSuppressWarning","warn","format","args","printWarning","error","level","React","ReactSharedInternals","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactDebugCurrentFrame","stack","getStackAddendum","push","unshift","apply","assign","Object","get","key","_reactInternals","set","value","dynamicFeatureFlags","disableInputAttributeSyncing","enableTrustedTypesIntegration","disableSchedulerTimeoutBasedOnReactExpirationTime","warnAboutSpreadingKeyToJSX","replayFailedUnitOfWorkWithInvokeGuardedCallback","enableFilterEmptyStringAttributesDOM","enableLegacyFBSupport","deferRenderPhaseUpdateToNextBatch","enableDebugTracing","skipUnmountedBoundaries","createRootStrictEffectsByDefault","enableUseRefAccessWarning","disableNativeComponentFrames","disableSchedulerTimeoutInWorkLoop","enableLazyContextPropagation","enableSyncDefaultUpdates","enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay","enableClientRenderFallbackOnTextMismatch","enableStrictEffects","__DEV__","enableProfilerTimer","__PROFILE__","enableProfilerCommitHooks","enableProfilerNestedUpdateScheduledHook","enableSuspenseAvoidThisFallback","enableSchedulingProfiler","warnAboutStringRefs","enableNewReconciler","__VARIANT__","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","usePolyfill","enableSymbolFallbackForWWW","Symbol","for","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_SERVER_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","displayName","functionName","name","getContextName","type","getComponentNameFromType","tag","$$typeof","context","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","context2","_globalName","getComponentNameFromFiber","fiber","NoFlags","PerformedWork","Placement","Update","ChildDeletion","ContentReset","Callback","DidCapture","ForceClientRender","Ref","Snapshot","Passive","Hydrating","Visibility","StoreConsistency","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","DidPropagateContext","NeedsPropagation","Forked","RefStatic","LayoutStatic","PassiveStatic","MountLayoutDev","MountPassiveDev","BeforeMutationMask","enableCreateEventHandleAPI","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","alternate","nextNode","flags","return","isMounted","component","owner","current","ownerFiber","instance","stateNode","_warnedAboutRefsInRender","getInstance","assertIsMounted","Error","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","isFiberSuspenseAndTimedOut","memoizedState","dehydrated","doesFiberContain","parentFiber","childFiber","parentFiberAlternate","isArrayImpl","Array","isArray","TYPES","CLIPPING_RECTANGLE","GROUP","SHAPE","TEXT","EVENT_TYPES","onClick","onMouseMove","onMouseOver","onMouseOut","onMouseUp","onMouseDown","childrenAsString","children","length","join","scheduleCallback","Scheduler","cancelCallback","shouldYield","requestPaint","now","ImmediatePriority","UserBlockingPriority","NormalPriority","IdlePriority","unstable_yieldValue","unstable_setDisableYieldValue","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledLog","__reactDisabledLog","disableLogs","console","log","info","group","groupCollapsed","groupEnd","props","configurable","enumerable","writable","defineProperties","reenableLogs","rendererID","injectedHook","injectedProfilingHooks","hasLoggedError","isDevToolsPresent","__REACT_DEVTOOLS_GLOBAL_HOOK__","injectInternals","internals","hook","isDisabled","supportsFiber","getLaneLabelMap","injectProfilingHooks","inject","err","checkDCE","onScheduleRoot","root","onScheduleFiberRoot","onCommitRoot","eventPriority","onCommitFiberRoot","didError","schedulerPriority","DiscreteEventPriority","ImmediateSchedulerPriority","ContinuousEventPriority","UserBlockingSchedulerPriority","DefaultEventPriority","NormalSchedulerPriority","IdleEventPriority","IdleSchedulerPriority","undefined","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","setIsStrictModeForDevtools","newIsStrictMode","setStrictMode","profilingHooks","map","Map","lane","index","TotalLanes","label","getLabelForLane","markCommitStarted","lanes","markCommitStopped","markComponentRenderStarted","markComponentRenderStopped","markComponentPassiveEffectMountStarted","markComponentPassiveEffectMountStopped","markComponentPassiveEffectUnmountStarted","markComponentPassiveEffectUnmountStopped","markComponentLayoutEffectMountStarted","markComponentLayoutEffectMountStopped","markComponentLayoutEffectUnmountStarted","markComponentLayoutEffectUnmountStopped","markComponentErrored","thrownValue","markComponentSuspended","wakeable","markLayoutEffectsStarted","markLayoutEffectsStopped","markPassiveEffectsStarted","markPassiveEffectsStopped","markRenderStarted","markRenderYielded","markRenderStopped","markRenderScheduled","markForceUpdateScheduled","markStateUpdateScheduled","NoMode","ConcurrentMode","ProfileMode","DebugTracingMode","StrictLegacyMode","StrictEffectsMode","ConcurrentUpdatesByDefaultMode","clz32","Math","clz32Fallback","LN2","asUint","NoLanes","NoLane","SyncLane","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","TransitionLane16","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","RetryLane5","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","getHighestPriorityLane","getNextLanes","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","allowConcurrentByDefault","mode","entangledLanes","entanglements","pickArbitraryLaneIndex","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyNonUrgentLanes","UrgentLanes","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","createLaneMap","initial","laneMap","i","markRootUpdated","updateLane","markRootSuspended","markRootPinged","markRootMutableRead","mutableReadLanes","markRootFinished","remainingLanes","noLongerPendingLanes","markRootEntangled","rootEntangledLanes","getBumpedLaneForHydration","renderLanes","renderLane","addFiberToLanesMap","pendingUpdatersLaneMap","updaters","add","movePendingFibersToMemoized","memoizedUpdaters","size","forEach","has","clear","getTransitionsForLanes","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","shim","isSuspenseInstancePending","isSuspenseInstanceFallback","getSuspenseInstanceFallbackErrorDetails","registerSuspenseInstanceRetry","hydrateTextInstance","clearSuspenseBoundary","clearSuspenseBoundaryFromContainer","errorHydratingContainer","prepareScopeUpdate","getInstanceFromScope","pooledTransform","Transform","NO_CONTEXT","UPDATE_SIGNAL","freeze","addEventListeners","listener","_listeners","_subscriptions","subscribe","createEventHandler","handleEvent","event","call","destroyEventListeners","getScaleX","scaleX","scale","getScaleY","scaleY","isSameFont","oldFont","newFont","fontSize","fontStyle","fontVariant","fontWeight","fontFamily","applyClippingRectangleProps","prevProps","applyNodeProps","width","height","applyGroupProps","transformTo","move","y","rotate","rotation","originX","originY","transform","xx","yx","xy","yy","cursor","title","indicate","blend","opacity","visible","show","hide","applyRenderableNodeProps","fill","applyFill","stroke","strokeWidth","strokeCap","strokeJoin","strokeDash","applyShapeProps","path","d","prevDelta","_prevDelta","prevPath","_prevPath","delta","draw","applyTextProps","string","_currentString","font","alignment","appendInitialChild","parentInstance","createInstance","internalInstanceHandle","ClippingRectangle","_applyProps","Group","Shape","Text","createTextInstance","text","rootContainerInstance","getPublicInstance","prepareForCommit","prepareUpdate","domElement","oldProps","newProps","resetAfterCommit","resetTextContent","getRootHostContext","getChildHostContext","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","shouldSetTextContent","getCurrentEventPriority","warnsIfNotActing","appendChild","parentNode","eject","appendChildToContainer","insertBefore","beforeChild","injectBefore","insertInContainerBefore","removeChild","removeChildFromContainer","commitTextUpdate","textInstance","oldText","newText","commitUpdate","updatePayload","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","clearContainer","container","getInstanceFromNode","preparePortalMount","portalInstance","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","source","ownerFn","trim","reentry","componentFrameCache","PossiblyWeakMap","WeakMap","describeNativeComponentFrame","fn","construct","frame","control","previousPrepareStackTrace","prepareStackTrace","previousDispatcher","Fake","defineProperty","prototype","Reflect","sample","sampleLines","split","controlLines","s","c","replace","includes","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","shouldConstruct","Component","isReactComponent","describeUnknownElementTypeFrameInDEV","hasOwnProperty","loggedTypeFailures","setCurrentlyValidatingElement","element","_owner","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","Function","bind","typeSpecName","ex","message","valueStack","fiberStack","createCursor","defaultValue","pop","emptyContextObject","hasContextChanged","isContextProvider","pushTopLevelContextObject","didChange","processChildContext","parentContext","findCurrentUnmaskedContext","is","objectIs","syncQueue","includesLegacySyncCallbacks","isFlushingSyncQueue","scheduleSyncCallback","callback","scheduleLegacySyncCallback","flushSyncCallbacksOnlyInLegacyMode","flushSyncCallbacks","previousUpdatePriority","isSync","queue","slice","nativeConsole","nativeConsoleLog","pendingGroupArgs","printedGroupIndex","formatLanes","laneOrLanes","toString","padStart","groupArgs","REACT_LOGO_STYLE","logCommitStarted","logCommitStopped","wakeableIDs","wakeableID","getWakeableID","logComponentSuspended","id","display","then","logLayoutEffectsStarted","logLayoutEffectsStopped","logPassiveEffectsStarted","logPassiveEffectsStopped","logRenderStarted","logRenderStopped","logForceUpdateScheduled","logStateUpdateScheduled","payloadOrAction","isRootDehydrated","currentState","isDehydrated","forkStack","forkStackIndex","treeForkProvider","treeForkCount","idStack","idStackIndex","treeContextProvider","treeContextId","treeContextOverflow","popTreeContext","workInProgress","isHydrating","didSuspendOrErrorDEV","hydrationErrors","didSuspendOrErrorWhileHydratingDEV","reenterHydrationStateFromDehydratedSuspenseInstance","suspenseInstance","treeContext","prepareToHydrateHostInstance","hostContext","prepareToHydrateHostTextInstance","shouldUpdate","prepareToHydrateHostSuspenseInstance","popHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","getIsHydrating","queueHydrationError","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","shallowEqual","objA","objB","keysA","keys","keysB","currentKey","describeFiber","_debugOwner","_debugSource","getStackByFiberInDevAndProd","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","getCurrentFiber","setIsRendering","rendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","setToSortedString","array","sort","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","sortedNames","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","contextTypes","childContextTypes","getChildContext","fiberArray","firstFiber","uniqueNames","setCurrentDebugFiberInDEV","resetCurrentDebugFiberInDEV","typeName","hasToStringTag","toStringTag","constructor","willCoercionThrow","testStringCoercion","e","checkPropStringCoercion","propName","resolveDefaultProps","baseProps","defaultProps","valueCursor","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","_currentValue2","_currentRenderer2","popProvider","currentValue","enableServerContext","_defaultValue","scheduleContextWorkOnParentPath","propagationRoot","childLanes","propagateContextChange","forcePropagateEntireTree","propagateContextChanges","propagateContextChange_eager","nextFiber","list","dependencies","dependency","firstContext","update","createUpdate","ForceUpdate","updateQueue","sharedQueue","shared","pending","next","parentSuspense","contexts","dep","findChangedDep","consumer","findContext","lazilyPropagateParentContextChanges","propagateParentContextChanges","propagateParentContextChangesToDeferredTree","isInsidePropagationBailout","memoizedProps","providerType","pendingProps","newValue","oldValue","checkIfContextChanged","currentDependencies","isPrimaryRenderer","memoizedValue","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","contextItem","concurrentQueues","pushConcurrentUpdateQueue","finishQueueingConcurrentUpdates","lastInterleavedUpdate","interleaved","firstInterleavedUpdate","lastPendingUpdate","firstPendingUpdate","enqueueConcurrentHookUpdate","markUpdateLaneFromFiberToRoot","enqueueConcurrentHookUpdateAndEagerlyBailout","enqueueConcurrentClassUpdate","enqueueConcurrentRenderForLane","unsafe_markUpdateLaneFromFiberToRoot","sourceFiber","warnAboutUpdateOnNotYetMountedFiberInDEV","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","effects","cloneUpdateQueue","currentQueue","clone","enqueueUpdate","isUnsafeClassRenderPhaseUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","debugRenderPhaseSideEffectsForStrictMode","partialState","processUpdateQueue","pendingQueue","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","lastInterleaved","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","fakeInternalInstance","emptyRefsObject","refs","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","warnOnUndefinedDerivedState","warnOnInvalidCallback","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutInvalidateContextType","didWarnAboutContextTypeAndContextTypes","didWarnOnInvalidCallback","callerName","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","inst","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","state","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","adoptClassInstance","updater","setInstance","_reactInternalInstance","constructClassInstance","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","fiberFlags","resumeMountClassInstance","oldContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","warnForMissingKey","returnFiber","_store","validated","coerceRef","mixedRef","ref","_self","resolvedInst","stringRef","_stringRef","throwOnInvalidObjectType","newChild","childString","warnOnFunctionType","resolveLazy","lazyType","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","deletions","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","existing","updateElement","updateFragment","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","containerInfo","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","warnOnInvalidKey","knownKeys","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","reconcileChildrenIterator","newChildrenIterable","iteratorFn","entries","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","contextStackCursor","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","unstable_avoidThisFallback","findFirstSuspended","row","revealOrder","didSuspend","HasEffect","Insertion","Layout","workInProgressSources","markSourceAsDirty","mutableSource","resetWorkInProgressVersions","_workInProgressVersionSecondary","getWorkInProgressVersion","setWorkInProgressVersion","version","warnAboutMultipleRenderersDEV","_currentSecondaryRenderer","AbortControllerLocal","enableCache","AbortController","AbortControllerShim","listeners","signal","aborted","addEventListener","abort","CacheContext","Consumer","Provider","_currentValue","_threadCount","_currentRenderer","createCache","cache","controller","data","refCount","retainCache","releaseCache","pushCacheProvider","popCacheProvider","didWarnAboutMismatchedHooksForComponent","didWarnUncachedGetSnapshot","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","localIdCounter","globalClientIdCounter","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","numberOfReRenders","HooksDispatcherOnRerenderInDEV","ContextOnlyDispatcher","didRenderTooFewHooks","StaticMaskEffect","checkIfWorkInProgressReceivedUpdate","checkDidRenderIdHook","didRenderIdHook","bailoutHooks","MountPassiveDevEffect","MountLayoutDevEffect","PassiveEffect","UpdateEffect","resetHooksAfterThrow","isUpdatingOpaqueValueInRenderPhase","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","hasEagerState","eagerState","interleavedLane","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","readFromUnsubscribedMutableSource","getSnapshot","getVersion","_getVersion","isSafeToReadFromSource","currentRenderVersion","snapshot","useMutableSource","getWorkInProgressRoot","dispatcher","useState","currentSnapshot","setSnapshot","stateHook","prevGetSnapshot","prevSource","prevSubscribe","useEffect","maybeNewVersion","maybeNewSnapshot","handleChange","latestGetSnapshot","latestSetSnapshot","unsubscribe","newQueue","dispatchSetState","mountMutableSource","updateMutableSource","mountSyncExternalStore","getServerSnapshot","nextSnapshot","cachedSnapshot","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","HookHasEffect","HookPassive","updateStoreInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","prevValue","mountState","updateState","rerenderState","create","destroy","firstEffect","stackContainsErrorMessage","getCallerStackFrame","stackFrames","mountRef","initialValue","hasBeenInitialized","lazyInitGetterStack","didCheckForLazyInit","didWarnAboutRead","didWarnAboutWrite","seal","updateRef","mountEffectImpl","hookFlags","updateEffectImpl","prevEffect","PassiveStaticEffect","mountInsertionEffect","HookInsertion","updateInsertionEffect","mountLayoutEffect","LayoutStaticEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","concat","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","updateDeferredValue","resolvedCurrentHook","updateDeferredValueImpl","rerenderDeferredValue","shouldDeferValue","deferredLane","startTransition","setPending","options","previousPriority","prevTransition","currentTransition","_updatedFibers","updatedFibersCount","mountTransition","isPending","start","updateTransition","rerenderTransition","getIsUpdatingOpaqueValueInRenderPhaseInDEV","mountId","identifierPrefix","globalClientId","updateId","mountRefresh","refresh","refreshCache","updateRefresh","seedKey","seedValue","refreshUpdate","createLegacyQueueUpdate","enqueueLegacyQueueUpdate","entangleLegacyQueueTransitions","seededCache","arguments","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","entangleTransitionUpdate","markUpdateInDevTools","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","getCacheSignal","getCacheForType","resourceType","cacheForType","useCallback","useContext","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useDebugValue","useDeferredValue","useTransition","useSyncExternalStore","useId","unstable_isNewReconciler","useCacheRefresh","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","markNestedUpdateScheduled","resetNestedUpdateFlag","syncNestedUpdateFlag","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","effectDuration","parentStateNode","recordPassiveEffectDuration","passiveEffectDuration","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","createCapturedValueAtFiber","digest","createCapturedValue","ReactFiberErrorDialogWWW","showErrorDialog","boundary","errorInfo","capturedError","componentStack","errorBoundary","logCapturedError","logError","_suppressLogging","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","markFailedErrorBoundaryForHotReloading","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","pingCache","threadIDs","ping","pingSuspendedRoot","restorePendingUpdaters","attachRetryListener","suspenseBoundary","wakeables","resetSuspendedComponent","rootRenderLanes","currentSourceFiber","currentSource","getNearestSuspenseBoundaryToCapture","hasInvisibleParentBoundary","markSuspenseBoundaryShouldCapture","throwException","renderDidSuspendDelayIfPossible","uncaughtSuspenseError","renderDidError","isAlreadyFailedLegacyErrorBoundary","resumedCache","peekCacheFromPool","cacheResumedFromPreviousRender","cacheFromRootCachePool","pooledCache","requestCacheFromPool","cacheFromPool","freshCache","pooledCacheLanes","pushTransition","offscreenWorkInProgress","prevCachePool","newTransitions","pool","popTransition","getSuspendedCache","getOffscreenDeferredCache","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","didWarnAboutDefaultPropsOnFunctionComponent","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","innerPropTypes","hasId","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","enableLegacyHidden","baseLanes","cachePool","transitions","pushRenderLanes","spawnedCachePool","nextBaseLanes","prevBaseLanes","subtreeRenderLanes","updateLegacyHiddenComponent","updateCacheComponent","parentCache","derivedState","nextCache","updateMode","updateProfiler","markRef","updateClassComponent","shouldError","tempInstance","hasContext","isLegacyContextProvider","pushLegacyContextProvider","resetSuspendedCurrentOnMountInLegacyMode","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","pushRootTransition","updateHostComponent","isDirectTextChild","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","mountIncompleteClassComponent","mountIndeterminateComponent","disableLegacyContext","ownerName","warningKey","debugSource","fileName","lineNumber","SUSPENDED_MARKER","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseContext","suspenseState","getRemainingWorkInPrimaryTree","updateSuspenseComponent","shouldSuspend","showFallback","mountDehydratedSuspenseComponent","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","enableCPUSuspense","unstable_expectedLoadTime","mountSuspensePrimaryChildren","updateDehydratedSuspenseComponent","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","treeBaseDuration","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","subtreeFlags","retrySuspenseComponentWithoutHydrating","recoverableError","mountSuspenseFallbackAfterRetryWithoutHydrating","fiberMode","capturedValue","attemptHydrationAtLane","retry","retryDehydratedSuspenseBoundary","scheduleSuspenseWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","toLowerCase","validateTailOptions","tailMode","validateSuspenseListNestedChild","childSlot","isAnArray","isIterable","validateSuspenseListChildren","childrenIterator","initSuspenseListRenderState","isBackwards","tail","renderState","renderingStartTime","last","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","providerPropTypes","hasLegacyContextChanged","hasWarnedAboutUsingContextAsConsumer","updateContextConsumer","updateScopeComponent","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","hasChildWork","primaryChildLanes","beginWork","_debugNeedsRemount","unresolvedProps","getSuspenseFallbackChild","emptyObject","collectScopedNodes","scopedNodes","collectScopedNodesFromChildren","collectFirstScopedNode","collectFirstScopedNodeFromChildren","startingChild","scopedNode","collectNearestContextValues","childContextValues","contextValue","collectNearestChildContextValues","DO_NOT_USE_queryAllNodes","currentFiber","DO_NOT_USE_queryFirstNode","containsNode","getChildContextValues","createScopeInstance","markUpdate","appendAllChildren","updateHostContainer","needsVisibilityToggle","isHidden","currentHostContext","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","bubbleProperties","completedWork","didBailout","newChildLanes","completeDehydratedSuspenseBoundary","wasHydrated","isTimedOutSuspense","completeWork","fiberRoot","previousCache","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","fallthroughToNormalSuspensePath","nextDidTimeout","prevDidTimeout","offscreenFiber","hasInvisibleChildContext","renderDidSuspend","enableSuspenseCallback","suspenseCallback","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThenables","getRenderTargetTime","previousSibling","scopeInstance","popRenderLanes","nextIsHidden","prevIsHidden","unwindWork","unwindInterruptedWork","interruptedWork","ReactFbErrorUtils","invokeGuardedCallback","invokeGuardedCallbackImpl","func","f","hasError","caughtError","reporter","onError","hasCaughtError","clearCaughtError","didWarnAboutUndefinedSnapshotBeforeUpdate","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","PossiblyWeakSet","WeakSet","nextEffect","inProgressLanes","inProgressRoot","reportUncaughtErrorInDEV","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallCommitHookLayoutEffectListMount","nearestMountedAncestor","commitHookEffectListMount","captureCommitPhaseError","safelyCallComponentWillUnmount","safelyCallComponentDidMount","safelyAttachRef","commitAttachRef","safelyDetachRef","retVal","safelyCallDestroy","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","deletion","commitBeforeMutationEffectsDeletion","commitBeforeMutationEffects_complete","commitBeforeMutationEffectsOnFiber","isSuspenseBoundaryBeingHidden","beforeActiveInstanceBlur","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","NoHookEffect","setIsRunningInsertionEffect","commitPassiveEffectDurations","finishedRoot","onPostCommit","phase","outer","commitLayoutEffectOnFiber","committedLanes","commitMount","onCommit","onRender","enqueuePendingPassiveProfilerEffect","commitSuspenseHydrationCallbacks","reappearLayoutEffectsOnFiber","hideOrUnhideAllChildren","hostSubtreeRoot","instanceToUse","enableScopeAPI","detachFiberMutation","detachFiberAfterEffects","hostInstance","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","before","insertOrAppendPlacementNode","insertOrAppendPlacementNodeIntoContainer","isHost","hostParent","hostParentIsContainer","commitDeletionEffects","deletedFiber","findParent","commitDeletionEffectsOnFiber","recursivelyTraverseDeletionEffects","prevHostParent","prevHostParentIsContainer","hydrationCallbacks","onDeleted","enableSuspenseLayoutEffectSemantics","prevOffscreenSubtreeWasHidden","commitSuspenseCallback","attachSuspenseRetryListeners","retryCache","resolveRetryWakeable","commitMutationEffects","commitMutationEffectsOnFiber","recursivelyTraverseMutationEffects","prevDebugFiber","getCurrentDebugFiberInDEV","commitReconciliationEffects","offscreenInstance","wasHidden","markCommitTimeOfFallback","offscreenBoundary","offscreenChild","disappearLayoutEffects_begin","commitLayoutEffects","commitLayoutEffects_begin","subtreeRoot","isModernRoot","newOffscreenSubtreeIsHidden","commitLayoutMountEffects_complete","newOffscreenSubtreeWasHidden","prevOffscreenSubtreeIsHidden","reappearLayoutEffects_begin","disappearLayoutEffects_complete","reappearLayoutEffects_complete","commitPassiveMountEffects","committedTransitions","commitPassiveMountEffects_begin","commitPassiveMountEffects_complete","commitPassiveMountOnFiber","commitPassiveUnmountEffects","commitPassiveUnmountEffects_begin","fiberToDelete","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","previousFiber","detachedChild","detachedSibling","commitPassiveUnmountEffects_complete","commitPassiveUnmountOnFiber","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","invokeLayoutEffectMountInDEV","invokePassiveEffectMountInDEV","invokeLayoutEffectUnmountInDEV","invokePassiveEffectUnmountInDEV","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","symbolFor","ReactCurrentActQueue","isLegacyActEnvironment","isReactActEnvironmentGlobal","IS_REACT_ACT_ENVIRONMENT","isConcurrentActEnvironment","ceil","NoContext","BatchedContext","RenderContext","CommitContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","workInProgressTransitions","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootCommittingMutationOrLayoutEffects","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveProfilerEffects","pendingPassiveEffectsRemainingLanes","pendingPassiveTransitions","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","isFlushingPassiveEffects","didScheduleUpdateDuringPassiveEffects","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","rootWithPassiveNestedUpdates","currentEventTime","currentEventTransitionLane","isRunningInsertionEffect","isTransition","eventLane","requestRetryLane","checkForNestedUpdates","warnAboutRenderPhaseUpdatesInDEV","warnIfUpdatesNotWrappedWithActDEV","onNestedUpdateScheduled","ensureRootIsScheduled","isBatchingLegacy","existingCallbackNode","callbackNode","callbackPriority","newCallbackPriority","existingCallbackPriority","fakeActCallbackNode","newCallbackNode","didScheduleLegacyUpdate","performSyncWorkOnRoot","schedulerPriorityLevel","performConcurrentWorkOnRoot","didTimeout","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","exitStatus","renderRootConcurrent","renderRootSync","errorRetryLanes","recoverFromConcurrentError","fatalError","prepareFreshStack","renderWasConcurrent","isRenderConsistentWithExternalStores","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","rootWorkInProgress","errorsFromSecondAttempt","errors","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","checks","renderedValue","markRootSuspended_dontCallThisOneDirectly","flushSync","prevExecutionContext","pushToStack","popFromStack","workInProgressRootRenderPhaseUpdatedLanes","handleError","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","popDispatcher","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","siblingFiber","recoverableErrors","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","flushRenderPhaseStrictModeWarningsInDEV","subtreeHasEffects","rootHasEffect","rootDidHavePassiveEffects","releaseRootPooledCache","commitDoubleInvokeEffectsInDEV","onCommitRootDevTools","onRecoverableError","renderPriority","priority","flushPassiveEffectsImpl","profilerEffects","onPostCommitRootDevTools","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","timeElapsed","hasPassiveEffects","invokeEffectsInDev","invokeEffectFn","primarySubtreeFlag","didWarnStateUpdateForNotYetMountedComponent","ReactCurrentFiberCurrent","dummyFiber","originalWorkInProgressCopy","assignFiberPropertiesInDEV","originalBeginWork","originalError","replayError","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","ReactCurrentDebugFiberIsRenderingInDEV","renderingComponentName","dedupeKey","setStateComponentName","schedulingFiber","priorityLevel","actQueue","Scheduler_scheduleCallback","Scheduler_cancelCallback","isRunning","resolveFamily","failedBoundaries","setRefreshHandler","handler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","findHostInstancesForRefresh","families","hostInstances","types","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","FiberNode","Number","NaN","createFiber","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromLegacyHidden","createFiberFromScope","createFiberFromCache","elements","scope","primaryChildInstance","content","pendingChildren","target","FiberRootNode","hydrate","_debugRootType","createFiberRoot","initialChildren","transitionCallbacks","uninitializedFiber","initialCache","pendingSuspenseBoundaries","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","createContainer","ReactCurrentFiberIsRendering","shouldErrorImpl","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","copyWithDeleteImpl","obj","updated","splice","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldErrorImpl","newShouldSuspendImpl","findHostInstanceByFiber","hostFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","reconcilerVersion","ReactVersion","setCurrent","FastNoSideEffects","LinearGradient","stops","x1","y1","x2","y2","_args","fillLinear","RadialGradient","fx","fy","rx","ry","cx","cy","fillRadial","Pattern","url","left","top","fillImage","Surface","_surface","_tagRef","_mountNode","resize","Tag","tagName","React.createElement","accessKey","className","draggable","role","style","tabIndex","_text","T","t","Path"],"mappings":"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"}