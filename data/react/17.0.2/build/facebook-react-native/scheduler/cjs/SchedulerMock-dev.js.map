{"version":3,"file":"SchedulerMock-dev.js","sources":["../../../../packages/scheduler/src/SchedulerFeatureFlags.js","../../../../packages/scheduler/src/forks/SchedulerHostConfig.mock.js","../../../../packages/scheduler/src/SchedulerMinHeap.js","../../../../packages/scheduler/src/SchedulerPriorities.js","../../../../packages/scheduler/src/SchedulerProfiling.js","../../../../packages/scheduler/src/Scheduler.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nexport const enableSchedulerDebugging = false;\nexport const enableIsInputPending = false;\nexport const enableProfiling = __VARIANT__;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nlet currentTime: number = 0;\nlet scheduledCallback: ((boolean, number) => void) | null = null;\nlet scheduledTimeout: (number => void) | null = null;\nlet timeoutTime: number = -1;\nlet yieldedValues: Array<mixed> | null = null;\nlet expectedNumberOfYields: number = -1;\nlet didStop: boolean = false;\nlet isFlushing: boolean = false;\nlet needsPaint: boolean = false;\nlet shouldYieldForPaint: boolean = false;\n\nexport function requestHostCallback(callback: boolean => void) {\n  scheduledCallback = callback;\n}\n\nexport function cancelHostCallback(): void {\n  scheduledCallback = null;\n}\n\nexport function requestHostTimeout(callback: number => void, ms: number) {\n  scheduledTimeout = callback;\n  timeoutTime = currentTime + ms;\n}\n\nexport function cancelHostTimeout(): void {\n  scheduledTimeout = null;\n  timeoutTime = -1;\n}\n\nexport function shouldYieldToHost(): boolean {\n  if (\n    (expectedNumberOfYields !== -1 &&\n      yieldedValues !== null &&\n      yieldedValues.length >= expectedNumberOfYields) ||\n    (shouldYieldForPaint && needsPaint)\n  ) {\n    // We yielded at least as many values as expected. Stop flushing.\n    didStop = true;\n    return true;\n  }\n  return false;\n}\n\nexport function getCurrentTime(): number {\n  return currentTime;\n}\n\nexport function forceFrameRate() {\n  // No-op\n}\n\nexport function reset() {\n  if (isFlushing) {\n    throw new Error('Cannot reset while already flushing work.');\n  }\n  currentTime = 0;\n  scheduledCallback = null;\n  scheduledTimeout = null;\n  timeoutTime = -1;\n  yieldedValues = null;\n  expectedNumberOfYields = -1;\n  didStop = false;\n  isFlushing = false;\n  needsPaint = false;\n}\n\n// Should only be used via an assertion helper that inspects the yielded values.\nexport function unstable_flushNumberOfYields(count: number): void {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    expectedNumberOfYields = count;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentTime);\n      } while (hasMoreWork && !didStop);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      expectedNumberOfYields = -1;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n}\n\nexport function unstable_flushUntilNextPaint(): void {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    shouldYieldForPaint = true;\n    needsPaint = false;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentTime);\n      } while (hasMoreWork && !didStop);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      shouldYieldForPaint = false;\n      didStop = false;\n      isFlushing = false;\n    }\n  }\n}\n\nexport function unstable_flushExpired() {\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    isFlushing = true;\n    try {\n      const hasMoreWork = scheduledCallback(false, currentTime);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n    } finally {\n      isFlushing = false;\n    }\n  }\n}\n\nexport function unstable_flushAllWithoutAsserting(): boolean {\n  // Returns false if no work was flushed.\n  if (isFlushing) {\n    throw new Error('Already flushing work.');\n  }\n  if (scheduledCallback !== null) {\n    const cb = scheduledCallback;\n    isFlushing = true;\n    try {\n      let hasMoreWork = true;\n      do {\n        hasMoreWork = cb(true, currentTime);\n      } while (hasMoreWork);\n      if (!hasMoreWork) {\n        scheduledCallback = null;\n      }\n      return true;\n    } finally {\n      isFlushing = false;\n    }\n  } else {\n    return false;\n  }\n}\n\nexport function unstable_clearYields(): Array<mixed> {\n  if (yieldedValues === null) {\n    return [];\n  }\n  const values = yieldedValues;\n  yieldedValues = null;\n  return values;\n}\n\nexport function unstable_flushAll(): void {\n  if (yieldedValues !== null) {\n    throw new Error(\n      'Log is not empty. Assert on the log of yielded values before ' +\n        'flushing additional work.',\n    );\n  }\n  unstable_flushAllWithoutAsserting();\n  if (yieldedValues !== null) {\n    throw new Error(\n      'While flushing work, something yielded a value. Use an ' +\n        'assertion helper to assert on the log of yielded values, e.g. ' +\n        'expect(Scheduler).toFlushAndYield([...])',\n    );\n  }\n}\n\nexport function unstable_yieldValue(value: mixed): void {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog') {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any values yielding in the second pass.\n    return;\n  }\n  if (yieldedValues === null) {\n    yieldedValues = [value];\n  } else {\n    yieldedValues.push(value);\n  }\n}\n\nexport function unstable_advanceTime(ms: number) {\n  // eslint-disable-next-line react-internal/no-production-logging\n  if (console.log.name === 'disabledLog') {\n    // If console.log has been patched, we assume we're in render\n    // replaying and we ignore any time advancing in the second pass.\n    return;\n  }\n  currentTime += ms;\n  if (scheduledTimeout !== null && timeoutTime <= currentTime) {\n    scheduledTimeout(currentTime);\n    timeoutTime = -1;\n    scheduledTimeout = null;\n  }\n}\n\nexport function requestPaint() {\n  needsPaint = true;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\ntype Heap = Array<Node>;\ntype Node = {|\n  id: number,\n  sortIndex: number,\n|};\n\nexport function push(heap: Heap, node: Node): void {\n  const index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\n\nexport function peek(heap: Heap): Node | null {\n  const first = heap[0];\n  return first === undefined ? null : first;\n}\n\nexport function pop(heap: Heap): Node | null {\n  const first = heap[0];\n  if (first !== undefined) {\n    const last = heap.pop();\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  let index = i;\n  while (true) {\n    const parentIndex = (index - 1) >>> 1;\n    const parent = heap[parentIndex];\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  let index = i;\n  const length = heap.length;\n  while (index < length) {\n    const leftIndex = (index + 1) * 2 - 1;\n    const left = heap[leftIndex];\n    const rightIndex = leftIndex + 1;\n    const right = heap[rightIndex];\n\n    // If the left or right node is smaller, swap with the smaller of those.\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  const diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type PriorityLevel = 0 | 1 | 2 | 3 | 4 | 5;\n\n// TODO: Use symbols?\nexport const NoPriority = 0;\nexport const ImmediatePriority = 1;\nexport const UserBlockingPriority = 2;\nexport const NormalPriority = 3;\nexport const LowPriority = 4;\nexport const IdlePriority = 5;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {PriorityLevel} from './SchedulerPriorities';\nimport {enableProfiling} from './SchedulerFeatureFlags';\n\nlet runIdCounter: number = 0;\nlet mainThreadIdCounter: number = 0;\n\n// Bytes per element is 4\nconst INITIAL_EVENT_LOG_SIZE = 131072;\nconst MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\nlet eventLogSize = 0;\nlet eventLogBuffer = null;\nlet eventLog = null;\nlet eventLogIndex = 0;\n\nconst TaskStartEvent = 1;\nconst TaskCompleteEvent = 2;\nconst TaskErrorEvent = 3;\nconst TaskCancelEvent = 4;\nconst TaskRunEvent = 5;\nconst TaskYieldEvent = 6;\nconst SchedulerSuspendEvent = 7;\nconst SchedulerResumeEvent = 8;\n\nfunction logEvent(entries) {\n  if (eventLog !== null) {\n    const offset = eventLogIndex;\n    eventLogIndex += entries.length;\n    if (eventLogIndex + 1 > eventLogSize) {\n      eventLogSize *= 2;\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n        // Using console['error'] to evade Babel and ESLint\n        console['error'](\n          \"Scheduler Profiling: Event log exceeded maximum size. Don't \" +\n            'forget to call `stopLoggingProfilingEvents()`.',\n        );\n        stopLoggingProfilingEvents();\n        return;\n      }\n      const newEventLog = new Int32Array(eventLogSize * 4);\n      newEventLog.set(eventLog);\n      eventLogBuffer = newEventLog.buffer;\n      eventLog = newEventLog;\n    }\n    eventLog.set(entries, offset);\n  }\n}\n\nexport function startLoggingProfilingEvents(): void {\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n  eventLog = new Int32Array(eventLogBuffer);\n  eventLogIndex = 0;\n}\n\nexport function stopLoggingProfilingEvents(): ArrayBuffer | null {\n  const buffer = eventLogBuffer;\n  eventLogSize = 0;\n  eventLogBuffer = null;\n  eventLog = null;\n  eventLogIndex = 0;\n  return buffer;\n}\n\nexport function markTaskStart(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      // performance.now returns a float, representing milliseconds. When the\n      // event is logged, it's coerced to an int. Convert to microseconds to\n      // maintain extra degrees of precision.\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n    }\n  }\n}\n\nexport function markTaskCompleted(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskCanceled(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskErrored(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\n    }\n  }\n}\n\nexport function markTaskRun(\n  task: {\n    id: number,\n    priorityLevel: PriorityLevel,\n    ...\n  },\n  ms: number,\n) {\n  if (enableProfiling) {\n    runIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markTaskYield(task: {id: number, ...}, ms: number) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerSuspended(ms: number) {\n  if (enableProfiling) {\n    mainThreadIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n\nexport function markSchedulerUnsuspended(ms: number) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/* eslint-disable no-var */\n\nimport {\n  enableSchedulerDebugging,\n  enableProfiling,\n} from './SchedulerFeatureFlags';\nimport {\n  requestHostCallback,\n  requestHostTimeout,\n  cancelHostTimeout,\n  shouldYieldToHost,\n  getCurrentTime,\n  forceFrameRate,\n  requestPaint,\n} from './SchedulerHostConfig';\nimport {push, pop, peek} from './SchedulerMinHeap';\n\n// TODO: Use symbols?\nimport {\n  ImmediatePriority,\n  UserBlockingPriority,\n  NormalPriority,\n  LowPriority,\n  IdlePriority,\n} from './SchedulerPriorities';\nimport {\n  markTaskRun,\n  markTaskYield,\n  markTaskCompleted,\n  markTaskCanceled,\n  markTaskErrored,\n  markSchedulerSuspended,\n  markSchedulerUnsuspended,\n  markTaskStart,\n  stopLoggingProfilingEvents,\n  startLoggingProfilingEvents,\n} from './SchedulerProfiling';\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nvar maxSigned31BitInt = 1073741823;\n\n// Times out immediately\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1;\n// Eventually times out\nvar USER_BLOCKING_PRIORITY_TIMEOUT = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000;\n// Never times out\nvar IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;\n\n// Tasks are stored on a min heap\nvar taskQueue = [];\nvar timerQueue = [];\n\n// Incrementing id counter. Used to maintain insertion order.\nvar taskIdCounter = 1;\n\n// Pausing the scheduler is useful for debugging.\nvar isSchedulerPaused = false;\n\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority;\n\n// This is set while performing work, to prevent re-entrancy.\nvar isPerformingWork = false;\n\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  let timer = peek(timerQueue);\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      const firstTimer = peek(timerQueue);\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  }\n\n  // We'll need a host callback the next time work is scheduled.\n  isHostCallbackScheduled = false;\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  const previousPriorityLevel = currentPriorityLevel;\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          const currentTime = getCurrentTime();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n        throw error;\n      }\n    } else {\n      // No catch in prod code path.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n    if (enableProfiling) {\n      const currentTime = getCurrentTime();\n      markSchedulerSuspended(currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  let currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n  while (\n    currentTask !== null &&\n    !(enableSchedulerDebugging && isSchedulerPaused)\n  ) {\n    if (\n      currentTask.expirationTime > currentTime &&\n      (!hasTimeRemaining || shouldYieldToHost())\n    ) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n    const callback = currentTask.callback;\n    if (typeof callback === 'function') {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      const didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      if (enableProfiling) {\n        markTaskRun(currentTask, currentTime);\n      }\n      const continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = getCurrentTime();\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n        if (enableProfiling) {\n          markTaskYield(currentTask, currentTime);\n        }\n      } else {\n        if (enableProfiling) {\n          markTaskCompleted(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n    currentTask = peek(taskQueue);\n  }\n  // Return whether there's additional work\n  if (currentTask !== null) {\n    return true;\n  } else {\n    const firstTimer = peek(timerQueue);\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function() {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = getCurrentTime();\n\n  var startTime;\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n  } else {\n    startTime = currentTime;\n  }\n\n  var timeout;\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n      break;\n    case UserBlockingPriority:\n      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n      break;\n    case IdlePriority:\n      timeout = IDLE_PRIORITY_TIMEOUT;\n      break;\n    case LowPriority:\n      timeout = LOW_PRIORITY_TIMEOUT;\n      break;\n    case NormalPriority:\n    default:\n      timeout = NORMAL_PRIORITY_TIMEOUT;\n      break;\n  }\n\n  var expirationTime = startTime + timeout;\n\n  var newTask = {\n    id: taskIdCounter++,\n    callback,\n    priorityLevel,\n    startTime,\n    expirationTime,\n    sortIndex: -1,\n  };\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      }\n      // Schedule a timeout.\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    }\n    // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      const currentTime = getCurrentTime();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  }\n\n  // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nconst unstable_requestPaint = requestPaint;\n\nexport {\n  ImmediatePriority as unstable_ImmediatePriority,\n  UserBlockingPriority as unstable_UserBlockingPriority,\n  NormalPriority as unstable_NormalPriority,\n  IdlePriority as unstable_IdlePriority,\n  LowPriority as unstable_LowPriority,\n  unstable_runWithPriority,\n  unstable_next,\n  unstable_scheduleCallback,\n  unstable_cancelCallback,\n  unstable_wrapCallback,\n  unstable_getCurrentPriorityLevel,\n  shouldYieldToHost as unstable_shouldYield,\n  unstable_requestPaint,\n  unstable_continueExecution,\n  unstable_pauseExecution,\n  unstable_getFirstCallbackNode,\n  getCurrentTime as unstable_now,\n  forceFrameRate as unstable_forceFrameRate,\n};\n\nexport const unstable_Profiling = enableProfiling\n  ? {\n      startLoggingProfilingEvents,\n      stopLoggingProfilingEvents,\n    }\n  : null;\n"],"names":["enableSchedulerDebugging","enableProfiling","__VARIANT__","currentTime","scheduledCallback","scheduledTimeout","timeoutTime","yieldedValues","expectedNumberOfYields","didStop","isFlushing","needsPaint","shouldYieldForPaint","requestHostCallback","callback","requestHostTimeout","ms","cancelHostTimeout","shouldYieldToHost","length","getCurrentTime","forceFrameRate","unstable_flushNumberOfYields","count","Error","cb","hasMoreWork","unstable_flushUntilNextPaint","unstable_flushExpired","unstable_flushAllWithoutAsserting","unstable_clearYields","values","unstable_flushAll","unstable_yieldValue","value","console","log","name","push","unstable_advanceTime","requestPaint","heap","node","index","siftUp","peek","first","undefined","pop","last","siftDown","i","parentIndex","parent","compare","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","markTaskErrored","task","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY_TIMEOUT","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY_TIMEOUT","taskQueue","timerQueue","taskIdCounter","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","advanceTimers","timer","startTime","expirationTime","handleTimeout","flushWork","firstTimer","hasTimeRemaining","initialTime","previousPriorityLevel","workLoop","error","isQueued","priorityLevel","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","unstable_scheduleCallback","options","delay","timeout","newTask","unstable_pauseExecution","isSchedulerPaused","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","unstable_requestPaint","unstable_Profiling"],"mappings":";;AAQO,IAAMA,wBAAwB,GAAG,KAAjC;AAEA,IAAMC,eAAe,GAAGC,KAAxB;;ACDP,IAAIC,WAAmB,GAAG,CAA1B;AACA,IAAIC,iBAAqD,GAAG,IAA5D;AACA,IAAIC,gBAAyC,GAAG,IAAhD;AACA,IAAIC,WAAmB,GAAG,CAAC,CAA3B;AACA,IAAIC,aAAkC,GAAG,IAAzC;AACA,IAAIC,sBAA8B,GAAG,CAAC,CAAtC;AACA,IAAIC,OAAgB,GAAG,KAAvB;AACA,IAAIC,UAAmB,GAAG,KAA1B;AACA,IAAIC,UAAmB,GAAG,KAA1B;AACA,IAAIC,mBAA4B,GAAG,KAAnC;AAEA,AAAO,SAASC,mBAAT,CAA6BC,QAA7B,EAAwD;AAC7DV,EAAAA,iBAAiB,GAAGU,QAApB;AACD;AAED,AAIO,SAASC,kBAAT,CAA4BD,QAA5B,EAAsDE,EAAtD,EAAkE;AACvEX,EAAAA,gBAAgB,GAAGS,QAAnB;AACAR,EAAAA,WAAW,GAAGH,WAAW,GAAGa,EAA5B;AACD;AAED,AAAO,SAASC,iBAAT,GAAmC;AACxCZ,EAAAA,gBAAgB,GAAG,IAAnB;AACAC,EAAAA,WAAW,GAAG,CAAC,CAAf;AACD;AAED,AAAO,SAASY,iBAAT,GAAsC;AAC3C,MACGV,sBAAsB,KAAK,CAAC,CAA5B,IACCD,aAAa,KAAK,IADnB,IAECA,aAAa,CAACY,MAAd,IAAwBX,sBAF1B,IAGCI,mBAAmB,IAAID,UAJ1B,EAKE;AACA;AACAF,IAAAA,OAAO,GAAG,IAAV;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;AAED,AAAO,SAASW,cAAT,GAAkC;AACvC,SAAOjB,WAAP;AACD;AAED,AAAO,SAASkB,cAAT,GAA0B;AAEhC;AAED;AAgBA,AAAO,SAASC,4BAAT,CAAsCC,KAAtC,EAA2D;AAChE,MAAIb,UAAJ,EAAgB;AACd,UAAM,IAAIc,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIpB,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,QAAMqB,EAAE,GAAGrB,iBAAX;AACAI,IAAAA,sBAAsB,GAAGe,KAAzB;AACAb,IAAAA,UAAU,GAAG,IAAb;;AACA,QAAI;AACF,UAAIgB,WAAW,GAAG,IAAlB;;AACA,SAAG;AACDA,QAAAA,WAAW,GAAGD,EAAE,CAAC,IAAD,EAAOtB,WAAP,CAAhB;AACD,OAFD,QAESuB,WAAW,IAAI,CAACjB,OAFzB;;AAGA,UAAI,CAACiB,WAAL,EAAkB;AAChBtB,QAAAA,iBAAiB,GAAG,IAApB;AACD;AACF,KARD,SAQU;AACRI,MAAAA,sBAAsB,GAAG,CAAC,CAA1B;AACAC,MAAAA,OAAO,GAAG,KAAV;AACAC,MAAAA,UAAU,GAAG,KAAb;AACD;AACF;AACF;AAED,AAAO,SAASiB,4BAAT,GAA8C;AACnD,MAAIjB,UAAJ,EAAgB;AACd,UAAM,IAAIc,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIpB,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,QAAMqB,EAAE,GAAGrB,iBAAX;AACAQ,IAAAA,mBAAmB,GAAG,IAAtB;AACAD,IAAAA,UAAU,GAAG,KAAb;AACAD,IAAAA,UAAU,GAAG,IAAb;;AACA,QAAI;AACF,UAAIgB,WAAW,GAAG,IAAlB;;AACA,SAAG;AACDA,QAAAA,WAAW,GAAGD,EAAE,CAAC,IAAD,EAAOtB,WAAP,CAAhB;AACD,OAFD,QAESuB,WAAW,IAAI,CAACjB,OAFzB;;AAGA,UAAI,CAACiB,WAAL,EAAkB;AAChBtB,QAAAA,iBAAiB,GAAG,IAApB;AACD;AACF,KARD,SAQU;AACRQ,MAAAA,mBAAmB,GAAG,KAAtB;AACAH,MAAAA,OAAO,GAAG,KAAV;AACAC,MAAAA,UAAU,GAAG,KAAb;AACD;AACF;AACF;AAED,AAAO,SAASkB,qBAAT,GAAiC;AACtC,MAAIlB,UAAJ,EAAgB;AACd,UAAM,IAAIc,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIpB,iBAAiB,KAAK,IAA1B,EAAgC;AAC9BM,IAAAA,UAAU,GAAG,IAAb;;AACA,QAAI;AACF,UAAMgB,WAAW,GAAGtB,iBAAiB,CAAC,KAAD,EAAQD,WAAR,CAArC;;AACA,UAAI,CAACuB,WAAL,EAAkB;AAChBtB,QAAAA,iBAAiB,GAAG,IAApB;AACD;AACF,KALD,SAKU;AACRM,MAAAA,UAAU,GAAG,KAAb;AACD;AACF;AACF;AAED,AAAO,SAASmB,iCAAT,GAAsD;AAC3D;AACA,MAAInB,UAAJ,EAAgB;AACd,UAAM,IAAIc,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAIpB,iBAAiB,KAAK,IAA1B,EAAgC;AAC9B,QAAMqB,EAAE,GAAGrB,iBAAX;AACAM,IAAAA,UAAU,GAAG,IAAb;;AACA,QAAI;AACF,UAAIgB,WAAW,GAAG,IAAlB;;AACA,SAAG;AACDA,QAAAA,WAAW,GAAGD,EAAE,CAAC,IAAD,EAAOtB,WAAP,CAAhB;AACD,OAFD,QAESuB,WAFT;;AAGA,UAAI,CAACA,WAAL,EAAkB;AAChBtB,QAAAA,iBAAiB,GAAG,IAApB;AACD;;AACD,aAAO,IAAP;AACD,KATD,SASU;AACRM,MAAAA,UAAU,GAAG,KAAb;AACD;AACF,GAfD,MAeO;AACL,WAAO,KAAP;AACD;AACF;AAED,AAAO,SAASoB,oBAAT,GAA8C;AACnD,MAAIvB,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,EAAP;AACD;;AACD,MAAMwB,MAAM,GAAGxB,aAAf;AACAA,EAAAA,aAAa,GAAG,IAAhB;AACA,SAAOwB,MAAP;AACD;AAED,AAAO,SAASC,iBAAT,GAAmC;AACxC,MAAIzB,aAAa,KAAK,IAAtB,EAA4B;AAC1B,UAAM,IAAIiB,KAAJ,CACJ,kEACE,2BAFE,CAAN;AAID;;AACDK,EAAAA,iCAAiC;;AACjC,MAAItB,aAAa,KAAK,IAAtB,EAA4B;AAC1B,UAAM,IAAIiB,KAAJ,CACJ,4DACE,gEADF,GAEE,0CAHE,CAAN;AAKD;AACF;AAED,AAAO,SAASS,mBAAT,CAA6BC,KAA7B,EAAiD;AACtD;AACA,MAAIC,OAAO,CAACC,GAAR,CAAYC,IAAZ,KAAqB,aAAzB,EAAwC;AACtC;AACA;AACA;AACD;;AACD,MAAI9B,aAAa,KAAK,IAAtB,EAA4B;AAC1BA,IAAAA,aAAa,GAAG,CAAC2B,KAAD,CAAhB;AACD,GAFD,MAEO;AACL3B,IAAAA,aAAa,CAAC+B,IAAd,CAAmBJ,KAAnB;AACD;AACF;AAED,AAAO,SAASK,oBAAT,CAA8BvB,EAA9B,EAA0C;AAC/C;AACA,MAAImB,OAAO,CAACC,GAAR,CAAYC,IAAZ,KAAqB,aAAzB,EAAwC;AACtC;AACA;AACA;AACD;;AACDlC,EAAAA,WAAW,IAAIa,EAAf;;AACA,MAAIX,gBAAgB,KAAK,IAArB,IAA6BC,WAAW,IAAIH,WAAhD,EAA6D;AAC3DE,IAAAA,gBAAgB,CAACF,WAAD,CAAhB;AACAG,IAAAA,WAAW,GAAG,CAAC,CAAf;AACAD,IAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;AAED,AAAO,SAASmC,YAAT,GAAwB;AAC7B7B,EAAAA,UAAU,GAAG,IAAb;AACD;;ACjNM,SAAS2B,IAAT,CAAcG,IAAd,EAA0BC,IAA1B,EAA4C;AACjD,MAAMC,KAAK,GAAGF,IAAI,CAACtB,MAAnB;AACAsB,EAAAA,IAAI,CAACH,IAAL,CAAUI,IAAV;AACAE,EAAAA,MAAM,CAACH,IAAD,EAAOC,IAAP,EAAaC,KAAb,CAAN;AACD;AAED,AAAO,SAASE,IAAT,CAAcJ,IAAd,EAAuC;AAC5C,MAAMK,KAAK,GAAGL,IAAI,CAAC,CAAD,CAAlB;AACA,SAAOK,KAAK,KAAKC,SAAV,GAAsB,IAAtB,GAA6BD,KAApC;AACD;AAED,AAAO,SAASE,GAAT,CAAaP,IAAb,EAAsC;AAC3C,MAAMK,KAAK,GAAGL,IAAI,CAAC,CAAD,CAAlB;;AACA,MAAIK,KAAK,KAAKC,SAAd,EAAyB;AACvB,QAAME,IAAI,GAAGR,IAAI,CAACO,GAAL,EAAb;;AACA,QAAIC,IAAI,KAAKH,KAAb,EAAoB;AAClBL,MAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUQ,IAAV;AACAC,MAAAA,QAAQ,CAACT,IAAD,EAAOQ,IAAP,EAAa,CAAb,CAAR;AACD;;AACD,WAAOH,KAAP;AACD,GAPD,MAOO;AACL,WAAO,IAAP;AACD;AACF;;AAED,SAASF,MAAT,CAAgBH,IAAhB,EAAsBC,IAAtB,EAA4BS,CAA5B,EAA+B;AAC7B,MAAIR,KAAK,GAAGQ,CAAZ;;AACA,SAAO,IAAP,EAAa;AACX,QAAMC,WAAW,GAAIT,KAAK,GAAG,CAAT,KAAgB,CAApC;AACA,QAAMU,MAAM,GAAGZ,IAAI,CAACW,WAAD,CAAnB;;AACA,QAAIC,MAAM,KAAKN,SAAX,IAAwBO,OAAO,CAACD,MAAD,EAASX,IAAT,CAAP,GAAwB,CAApD,EAAuD;AACrD;AACAD,MAAAA,IAAI,CAACW,WAAD,CAAJ,GAAoBV,IAApB;AACAD,MAAAA,IAAI,CAACE,KAAD,CAAJ,GAAcU,MAAd;AACAV,MAAAA,KAAK,GAAGS,WAAR;AACD,KALD,MAKO;AACL;AACA;AACD;AACF;AACF;;AAED,SAASF,QAAT,CAAkBT,IAAlB,EAAwBC,IAAxB,EAA8BS,CAA9B,EAAiC;AAC/B,MAAIR,KAAK,GAAGQ,CAAZ;AACA,MAAMhC,MAAM,GAAGsB,IAAI,CAACtB,MAApB;;AACA,SAAOwB,KAAK,GAAGxB,MAAf,EAAuB;AACrB,QAAMoC,SAAS,GAAG,CAACZ,KAAK,GAAG,CAAT,IAAc,CAAd,GAAkB,CAApC;AACA,QAAMa,IAAI,GAAGf,IAAI,CAACc,SAAD,CAAjB;AACA,QAAME,UAAU,GAAGF,SAAS,GAAG,CAA/B;AACA,QAAMG,KAAK,GAAGjB,IAAI,CAACgB,UAAD,CAAlB,CAJqB;;AAOrB,QAAID,IAAI,KAAKT,SAAT,IAAsBO,OAAO,CAACE,IAAD,EAAOd,IAAP,CAAP,GAAsB,CAAhD,EAAmD;AACjD,UAAIgB,KAAK,KAAKX,SAAV,IAAuBO,OAAO,CAACI,KAAD,EAAQF,IAAR,CAAP,GAAuB,CAAlD,EAAqD;AACnDf,QAAAA,IAAI,CAACE,KAAD,CAAJ,GAAce,KAAd;AACAjB,QAAAA,IAAI,CAACgB,UAAD,CAAJ,GAAmBf,IAAnB;AACAC,QAAAA,KAAK,GAAGc,UAAR;AACD,OAJD,MAIO;AACLhB,QAAAA,IAAI,CAACE,KAAD,CAAJ,GAAca,IAAd;AACAf,QAAAA,IAAI,CAACc,SAAD,CAAJ,GAAkBb,IAAlB;AACAC,QAAAA,KAAK,GAAGY,SAAR;AACD;AACF,KAVD,MAUO,IAAIG,KAAK,KAAKX,SAAV,IAAuBO,OAAO,CAACI,KAAD,EAAQhB,IAAR,CAAP,GAAuB,CAAlD,EAAqD;AAC1DD,MAAAA,IAAI,CAACE,KAAD,CAAJ,GAAce,KAAd;AACAjB,MAAAA,IAAI,CAACgB,UAAD,CAAJ,GAAmBf,IAAnB;AACAC,MAAAA,KAAK,GAAGc,UAAR;AACD,KAJM,MAIA;AACL;AACA;AACD;AACF;AACF;;AAED,SAASH,OAAT,CAAiBK,CAAjB,EAAoBC,CAApB,EAAuB;AACrB;AACA,MAAMC,IAAI,GAAGF,CAAC,CAACG,SAAF,GAAcF,CAAC,CAACE,SAA7B;AACA,SAAOD,IAAI,KAAK,CAAT,GAAaA,IAAb,GAAoBF,CAAC,CAACI,EAAF,GAAOH,CAAC,CAACG,EAApC;AACD;;ACjFD;AACA,IACaC,iBAAiB,GAAG,CAA1B;AACP,IAAaC,oBAAoB,GAAG,CAA7B;AACP,IAAaC,cAAc,GAAG,CAAvB;AACP,IAAaC,WAAW,GAAG,CAApB;AACP,IAAaC,YAAY,GAAG,CAArB;;ACwGA,SAASC,eAAT,CACLC,IADK,EAMLtD,EANK,EAOL;AACA,AAKD;;AC9HD;AAEA,AAqCA;AACA;;AACA,IAAIuD,iBAAiB,GAAG,UAAxB;;AAGA,IAAIC,0BAA0B,GAAG,CAAC,CAAlC;;AAEA,IAAIC,8BAA8B,GAAG,GAArC;AACA,IAAIC,uBAAuB,GAAG,IAA9B;AACA,IAAIC,oBAAoB,GAAG,KAA3B;;AAEA,IAAIC,qBAAqB,GAAGL,iBAA5B;;AAGA,IAAIM,SAAS,GAAG,EAAhB;AACA,IAAIC,UAAU,GAAG,EAAjB;;AAGA,IAAIC,aAAa,GAAG,CAApB;AAKA,IAAIC,WAAW,GAAG,IAAlB;AACA,IAAIC,oBAAoB,GAAGf,cAA3B;;AAGA,IAAIgB,gBAAgB,GAAG,KAAvB;AAEA,IAAIC,uBAAuB,GAAG,KAA9B;AACA,IAAIC,sBAAsB,GAAG,KAA7B;;AAEA,SAASC,aAAT,CAAuBlF,WAAvB,EAAoC;AAClC;AACA,MAAImF,KAAK,GAAGzC,IAAI,CAACiC,UAAD,CAAhB;;AACA,SAAOQ,KAAK,KAAK,IAAjB,EAAuB;AACrB,QAAIA,KAAK,CAACxE,QAAN,KAAmB,IAAvB,EAA6B;AAC3B;AACAkC,MAAAA,GAAG,CAAC8B,UAAD,CAAH;AACD,KAHD,MAGO,IAAIQ,KAAK,CAACC,SAAN,IAAmBpF,WAAvB,EAAoC;AACzC;AACA6C,MAAAA,GAAG,CAAC8B,UAAD,CAAH;AACAQ,MAAAA,KAAK,CAACxB,SAAN,GAAkBwB,KAAK,CAACE,cAAxB;AACAlD,MAAAA,IAAI,CAACuC,SAAD,EAAYS,KAAZ,CAAJ;AAKD,KATM,MASA;AACL;AACA;AACD;;AACDA,IAAAA,KAAK,GAAGzC,IAAI,CAACiC,UAAD,CAAZ;AACD;AACF;;AAED,SAASW,aAAT,CAAuBtF,WAAvB,EAAoC;AAClCiF,EAAAA,sBAAsB,GAAG,KAAzB;AACAC,EAAAA,aAAa,CAAClF,WAAD,CAAb;;AAEA,MAAI,CAACgF,uBAAL,EAA8B;AAC5B,QAAItC,IAAI,CAACgC,SAAD,CAAJ,KAAoB,IAAxB,EAA8B;AAC5BM,MAAAA,uBAAuB,GAAG,IAA1B;AACAtE,MAAAA,mBAAmB,CAAC6E,SAAD,CAAnB;AACD,KAHD,MAGO;AACL,UAAMC,UAAU,GAAG9C,IAAI,CAACiC,UAAD,CAAvB;;AACA,UAAIa,UAAU,KAAK,IAAnB,EAAyB;AACvB5E,QAAAA,kBAAkB,CAAC0E,aAAD,EAAgBE,UAAU,CAACJ,SAAX,GAAuBpF,WAAvC,CAAlB;AACD;AACF;AACF;AACF;;AAED,SAASuF,SAAT,CAAmBE,gBAAnB,EAAqCC,WAArC,EAAkD;AAChD;;AAKAV,EAAAA,uBAAuB,GAAG,KAA1B;;AACA,MAAIC,sBAAJ,EAA4B;AAC1B;AACAA,IAAAA,sBAAsB,GAAG,KAAzB;AACAnE,IAAAA,iBAAiB;AAClB;;AAEDiE,EAAAA,gBAAgB,GAAG,IAAnB;AACA,MAAMY,qBAAqB,GAAGb,oBAA9B;;AACA,MAAI;AACF,QAAIhF,eAAJ,EAAqB;AACnB,UAAI;AACF,eAAO8F,QAAQ,CAACH,gBAAD,EAAmBC,WAAnB,CAAf;AACD,OAFD,CAEE,OAAOG,KAAP,EAAc;AACd,YAAIhB,WAAW,KAAK,IAApB,EAA0B;AACxB,cAAM7E,WAAW,GAAGiB,cAAc,EAAlC;AACAiD,UAAAA,eAAe,CAACW,WAAD,EAAc7E,WAAd,CAAf;AACA6E,UAAAA,WAAW,CAACiB,QAAZ,GAAuB,KAAvB;AACD;;AACD,cAAMD,KAAN;AACD;AACF,KAXD,MAWO;AACL;AACA,aAAOD,QAAQ,CAACH,gBAAD,EAAmBC,WAAnB,CAAf;AACD;AACF,GAhBD,SAgBU;AACRb,IAAAA,WAAW,GAAG,IAAd;AACAC,IAAAA,oBAAoB,GAAGa,qBAAvB;AACAZ,IAAAA,gBAAgB,GAAG,KAAnB;AAKD;AACF;;AAED,SAASa,QAAT,CAAkBH,gBAAlB,EAAoCC,WAApC,EAAiD;AAC/C,MAAI1F,WAAW,GAAG0F,WAAlB;AACAR,EAAAA,aAAa,CAAClF,WAAD,CAAb;AACA6E,EAAAA,WAAW,GAAGnC,IAAI,CAACgC,SAAD,CAAlB;;AACA,SACEG,WAAW,KAAK,IAAhB,IACA,EAAEhF,wBAAwB,CAA1B,CAFF,EAGE;AACA,QACEgF,WAAW,CAACQ,cAAZ,GAA6BrF,WAA7B,KACC,CAACyF,gBAAD,IAAqB1E,iBAAiB,EADvC,CADF,EAGE;AACA;AACA;AACD;;AACD,QAAMJ,QAAQ,GAAGkE,WAAW,CAAClE,QAA7B;;AACA,QAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClCkE,MAAAA,WAAW,CAAClE,QAAZ,GAAuB,IAAvB;AACAmE,MAAAA,oBAAoB,GAAGD,WAAW,CAACkB,aAAnC;AACA,UAAMC,sBAAsB,GAAGnB,WAAW,CAACQ,cAAZ,IAA8BrF,WAA7D;;AAIA,UAAMiG,oBAAoB,GAAGtF,QAAQ,CAACqF,sBAAD,CAArC;AACAhG,MAAAA,WAAW,GAAGiB,cAAc,EAA5B;;AACA,UAAI,OAAOgF,oBAAP,KAAgC,UAApC,EAAgD;AAC9CpB,QAAAA,WAAW,CAAClE,QAAZ,GAAuBsF,oBAAvB;AAID,OALD,MAKO;AACL;AAIA,YAAIpB,WAAW,KAAKnC,IAAI,CAACgC,SAAD,CAAxB,EAAqC;AACnC7B,UAAAA,GAAG,CAAC6B,SAAD,CAAH;AACD;AACF;;AACDQ,MAAAA,aAAa,CAAClF,WAAD,CAAb;AACD,KAxBD,MAwBO;AACL6C,MAAAA,GAAG,CAAC6B,SAAD,CAAH;AACD;;AACDG,IAAAA,WAAW,GAAGnC,IAAI,CAACgC,SAAD,CAAlB;AACD,GA5C8C;;;AA8C/C,MAAIG,WAAW,KAAK,IAApB,EAA0B;AACxB,WAAO,IAAP;AACD,GAFD,MAEO;AACL,QAAMW,UAAU,GAAG9C,IAAI,CAACiC,UAAD,CAAvB;;AACA,QAAIa,UAAU,KAAK,IAAnB,EAAyB;AACvB5E,MAAAA,kBAAkB,CAAC0E,aAAD,EAAgBE,UAAU,CAACJ,SAAX,GAAuBpF,WAAvC,CAAlB;AACD;;AACD,WAAO,KAAP;AACD;AACF;;AAED,SAASkG,wBAAT,CAAkCH,aAAlC,EAAiDI,YAAjD,EAA+D;AAC7D,UAAQJ,aAAR;AACE,SAAKlC,iBAAL;AACA,SAAKC,oBAAL;AACA,SAAKC,cAAL;AACA,SAAKC,WAAL;AACA,SAAKC,YAAL;AACE;;AACF;AACE8B,MAAAA,aAAa,GAAGhC,cAAhB;AARJ;;AAWA,MAAI4B,qBAAqB,GAAGb,oBAA5B;AACAA,EAAAA,oBAAoB,GAAGiB,aAAvB;;AAEA,MAAI;AACF,WAAOI,YAAY,EAAnB;AACD,GAFD,SAEU;AACRrB,IAAAA,oBAAoB,GAAGa,qBAAvB;AACD;AACF;;AAED,SAASS,aAAT,CAAuBD,YAAvB,EAAqC;AACnC,MAAIJ,aAAJ;;AACA,UAAQjB,oBAAR;AACE,SAAKjB,iBAAL;AACA,SAAKC,oBAAL;AACA,SAAKC,cAAL;AACE;AACAgC,MAAAA,aAAa,GAAGhC,cAAhB;AACA;;AACF;AACE;AACAgC,MAAAA,aAAa,GAAGjB,oBAAhB;AACA;AAVJ;;AAaA,MAAIa,qBAAqB,GAAGb,oBAA5B;AACAA,EAAAA,oBAAoB,GAAGiB,aAAvB;;AAEA,MAAI;AACF,WAAOI,YAAY,EAAnB;AACD,GAFD,SAEU;AACRrB,IAAAA,oBAAoB,GAAGa,qBAAvB;AACD;AACF;;AAED,SAASU,qBAAT,CAA+B1F,QAA/B,EAAyC;AACvC,MAAI2F,mBAAmB,GAAGxB,oBAA1B;AACA,SAAO,YAAW;AAChB;AACA,QAAIa,qBAAqB,GAAGb,oBAA5B;AACAA,IAAAA,oBAAoB,GAAGwB,mBAAvB;;AAEA,QAAI;AACF,aAAO3F,QAAQ,CAAC4F,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAAP;AACD,KAFD,SAEU;AACR1B,MAAAA,oBAAoB,GAAGa,qBAAvB;AACD;AACF,GAVD;AAWD;;AAED,SAASc,yBAAT,CAAmCV,aAAnC,EAAkDpF,QAAlD,EAA4D+F,OAA5D,EAAqE;AACnE,MAAI1G,WAAW,GAAGiB,cAAc,EAAhC;AAEA,MAAImE,SAAJ;;AACA,MAAI,OAAOsB,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;AACnD,QAAIC,KAAK,GAAGD,OAAO,CAACC,KAApB;;AACA,QAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,GAAG,CAAzC,EAA4C;AAC1CvB,MAAAA,SAAS,GAAGpF,WAAW,GAAG2G,KAA1B;AACD,KAFD,MAEO;AACLvB,MAAAA,SAAS,GAAGpF,WAAZ;AACD;AACF,GAPD,MAOO;AACLoF,IAAAA,SAAS,GAAGpF,WAAZ;AACD;;AAED,MAAI4G,OAAJ;;AACA,UAAQb,aAAR;AACE,SAAKlC,iBAAL;AACE+C,MAAAA,OAAO,GAAGvC,0BAAV;AACA;;AACF,SAAKP,oBAAL;AACE8C,MAAAA,OAAO,GAAGtC,8BAAV;AACA;;AACF,SAAKL,YAAL;AACE2C,MAAAA,OAAO,GAAGnC,qBAAV;AACA;;AACF,SAAKT,WAAL;AACE4C,MAAAA,OAAO,GAAGpC,oBAAV;AACA;;AACF,SAAKT,cAAL;AACA;AACE6C,MAAAA,OAAO,GAAGrC,uBAAV;AACA;AAhBJ;;AAmBA,MAAIc,cAAc,GAAGD,SAAS,GAAGwB,OAAjC;AAEA,MAAIC,OAAO,GAAG;AACZjD,IAAAA,EAAE,EAAEgB,aAAa,EADL;AAEZjE,IAAAA,QAAQ,EAARA,QAFY;AAGZoF,IAAAA,aAAa,EAAbA,aAHY;AAIZX,IAAAA,SAAS,EAATA,SAJY;AAKZC,IAAAA,cAAc,EAAdA,cALY;AAMZ1B,IAAAA,SAAS,EAAE,CAAC;AANA,GAAd;;AAYA,MAAIyB,SAAS,GAAGpF,WAAhB,EAA6B;AAC3B;AACA6G,IAAAA,OAAO,CAAClD,SAAR,GAAoByB,SAApB;AACAjD,IAAAA,IAAI,CAACwC,UAAD,EAAakC,OAAb,CAAJ;;AACA,QAAInE,IAAI,CAACgC,SAAD,CAAJ,KAAoB,IAApB,IAA4BmC,OAAO,KAAKnE,IAAI,CAACiC,UAAD,CAAhD,EAA8D;AAC5D;AACA,UAAIM,sBAAJ,EAA4B;AAC1B;AACAnE,QAAAA,iBAAiB;AAClB,OAHD,MAGO;AACLmE,QAAAA,sBAAsB,GAAG,IAAzB;AACD,OAP2D;;;AAS5DrE,MAAAA,kBAAkB,CAAC0E,aAAD,EAAgBF,SAAS,GAAGpF,WAA5B,CAAlB;AACD;AACF,GAfD,MAeO;AACL6G,IAAAA,OAAO,CAAClD,SAAR,GAAoB0B,cAApB;AACAlD,IAAAA,IAAI,CAACuC,SAAD,EAAYmC,OAAZ,CAAJ;AAMA;;;AACA,QAAI,CAAC7B,uBAAD,IAA4B,CAACD,gBAAjC,EAAmD;AACjDC,MAAAA,uBAAuB,GAAG,IAA1B;AACAtE,MAAAA,mBAAmB,CAAC6E,SAAD,CAAnB;AACD;AACF;;AAED,SAAOsB,OAAP;AACD;;AAED,SAASC,uBAAT,GAAmC;AACjCC,AACD;;AAED,SAASC,0BAAT,GAAsC;AACpCD;AACA,MAAI,CAAC/B,uBAAD,IAA4B,CAACD,gBAAjC,EAAmD;AACjDC,IAAAA,uBAAuB,GAAG,IAA1B;AACAtE,IAAAA,mBAAmB,CAAC6E,SAAD,CAAnB;AACD;AACF;;AAED,SAAS0B,6BAAT,GAAyC;AACvC,SAAOvE,IAAI,CAACgC,SAAD,CAAX;AACD;;AAED,SAASwC,uBAAT,CAAiC/C,IAAjC,EAAuC;AACrC,AASA;AACA;;;AACAA,EAAAA,IAAI,CAACxD,QAAL,GAAgB,IAAhB;AACD;;AAED,SAASwG,gCAAT,GAA4C;AAC1C,SAAOrC,oBAAP;AACD;;AAED,IAAMsC,qBAAqB,GAAG/E,YAA9B;AAEA,IAqBagF,kBAAkB,GAAGvH,CAK9B,IALG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}