{"version":3,"file":"react-test-renderer.development.js","sources":["../../../../packages/shared/ReactSharedInternals.js","../../../../packages/shared/consoleWithStackDev.js","../../../../packages/shared/forks/object-assign.umd.js","../../../../packages/react-reconciler/src/ReactWorkTags.js","../../../../packages/shared/ReactInstanceMap.js","../../../../packages/shared/ReactSymbols.js","../../../../packages/shared/getComponentName.js","../../../../packages/react-reconciler/src/ReactFiberFlags.js","../../../../packages/shared/forks/ReactFeatureFlags.test-renderer.js","../../../../packages/react-reconciler/src/ReactFiberTreeReflection.js","../../../../packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js","../../../../packages/react-test-renderer/src/ReactTestHostConfig.js","../../../../packages/shared/ConsolePatchingDev.js","../../../../packages/shared/ReactComponentStackFrame.js","../../../../packages/shared/checkPropTypes.js","../../../../packages/react-reconciler/src/ReactFiberStack.old.js","../../../../packages/react-reconciler/src/ReactFiberContext.old.js","../../../../packages/react-reconciler/src/ReactRootTags.js","../../../../packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","../../../../packages/shared/forks/SchedulerTracing.umd.js","../../../../packages/react-reconciler/src/SchedulerWithReactIntegration.new.js","../../../../packages/react-reconciler/src/ReactFiberLane.js","../../../../packages/react-reconciler/src/SchedulerWithReactIntegration.old.js","../../../../packages/shared/ReactVersion.js","../../../../packages/react-reconciler/src/ReactTypeOfMode.js","../../../../packages/react-reconciler/src/ReactFiberTransition.js","../../../../packages/shared/objectIs.js","../../../../packages/shared/shallowEqual.js","../../../../packages/react-reconciler/src/ReactFiberComponentStack.js","../../../../packages/react-reconciler/src/ReactCurrentFiber.js","../../../../packages/react-reconciler/src/ReactStrictModeWarnings.old.js","../../../../packages/react-reconciler/src/ReactFiberLazyComponent.old.js","../../../../packages/react-reconciler/src/MaxInts.js","../../../../packages/react-reconciler/src/ReactFiberNewContext.old.js","../../../../packages/react-reconciler/src/ReactUpdateQueue.old.js","../../../../packages/react-reconciler/src/ReactFiberClassComponent.old.js","../../../../packages/react-reconciler/src/ReactChildFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberHostContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","../../../../packages/react-reconciler/src/ReactHookEffectTags.js","../../../../packages/react-reconciler/src/ReactFiberHydrationContext.old.js","../../../../packages/react-reconciler/src/ReactMutableSource.old.js","../../../../packages/react-reconciler/src/ReactFiberHooks.old.js","../../../../packages/react-reconciler/src/ReactProfilerTimer.old.js","../../../../packages/react-reconciler/src/ReactFiberBeginWork.old.js","../../../../packages/react-reconciler/src/ReactFiberCompleteWork.old.js","../../../../packages/react-reconciler/src/ReactFiberUnwindWork.old.js","../../../../packages/react-reconciler/src/ReactCapturedValue.js","../../../../packages/react-reconciler/src/ReactFiberErrorDialog.js","../../../../packages/react-reconciler/src/ReactFiberErrorLogger.js","../../../../packages/react-reconciler/src/ReactFiberThrow.old.js","../../../../packages/shared/invokeGuardedCallbackImpl.js","../../../../packages/shared/ReactErrorUtils.js","../../../../packages/react-reconciler/src/ReactFiberCommitWork.old.js","../../../../packages/react-reconciler/src/ReactTestSelectors.js","../../../../packages/shared/enqueueTask.js","../../../../packages/react-reconciler/src/ReactFiberWorkLoop.old.js","../../../../packages/react-reconciler/src/ReactFiberHotReloading.old.js","../../../../packages/react-reconciler/src/ReactFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberRoot.old.js","../../../../packages/react-reconciler/src/ReactFiberReconciler.old.js","../../../../packages/react-test-renderer/src/ReactTestRenderer.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\n// In DEV, calls to console.warn and console.error get replaced\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nexport function warn(format, ...args) {\n  if (__DEV__) {\n    printWarning('warn', format, args);\n  }\n}\n\nexport function error(format, ...args) {\n  if (__DEV__) {\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  if (__DEV__) {\n    const ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    const stack = ReactDebugCurrentFrame.getStackAddendum();\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    const argsWithFormat = args.map(item => '' + item);\n    // Careful: RN currently depends on this prefix\n    argsWithFormat.unshift('Warning: ' + format);\n    // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactInternals.assign;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const FundamentalComponent = 20;\nexport const ScopeComponent = 21;\nexport const Block = 22;\nexport const OffscreenComponent = 23;\nexport const LegacyHiddenComponent = 24;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nexport let REACT_ELEMENT_TYPE = 0xeac7;\nexport let REACT_PORTAL_TYPE = 0xeaca;\nexport let REACT_FRAGMENT_TYPE = 0xeacb;\nexport let REACT_STRICT_MODE_TYPE = 0xeacc;\nexport let REACT_PROFILER_TYPE = 0xead2;\nexport let REACT_PROVIDER_TYPE = 0xeacd;\nexport let REACT_CONTEXT_TYPE = 0xeace;\nexport let REACT_FORWARD_REF_TYPE = 0xead0;\nexport let REACT_SUSPENSE_TYPE = 0xead1;\nexport let REACT_SUSPENSE_LIST_TYPE = 0xead8;\nexport let REACT_MEMO_TYPE = 0xead3;\nexport let REACT_LAZY_TYPE = 0xead4;\nexport let REACT_BLOCK_TYPE = 0xead9;\nexport let REACT_SERVER_BLOCK_TYPE = 0xeada;\nexport let REACT_FUNDAMENTAL_TYPE = 0xead5;\nexport let REACT_SCOPE_TYPE = 0xead7;\nexport let REACT_OPAQUE_ID_TYPE = 0xeae0;\nexport let REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nexport let REACT_OFFSCREEN_TYPE = 0xeae2;\nexport let REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nconst MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_BLOCK_TYPE,\n} from 'shared/ReactSymbols';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentName(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentName(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n    }\n  }\n  return null;\n}\n\nexport default getComponentName;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b000000000000000000;\nexport const PerformedWork = /*                */ 0b000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b000000000000000010;\nexport const Update = /*                       */ 0b000000000000000100;\nexport const PlacementAndUpdate = /*           */ 0b000000000000000110;\nexport const Deletion = /*                     */ 0b000000000000001000;\nexport const ContentReset = /*                 */ 0b000000000000010000;\nexport const Callback = /*                     */ 0b000000000000100000;\nexport const DidCapture = /*                   */ 0b000000000001000000;\nexport const Ref = /*                          */ 0b000000000010000000;\nexport const Snapshot = /*                     */ 0b000000000100000000;\nexport const Passive = /*                      */ 0b000000001000000000;\n// TODO (effects) Remove this bit once the new reconciler is synced to the old.\nexport const PassiveUnmountPendingDev = /*     */ 0b000010000000000000;\nexport const Hydrating = /*                    */ 0b000000010000000000;\nexport const HydratingAndUpdate = /*           */ 0b000000010000000100;\n\n// Passive & Update & Callback & Ref & Snapshot\nexport const LifecycleEffectMask = /*          */ 0b000000001110100100;\n\n// Union of all host effects\nexport const HostEffectMask = /*               */ 0b000000011111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b000000100000000000;\nexport const ShouldCapture = /*                */ 0b000001000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b000100000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const PassiveStatic = /*                */ 0b001000000000000000;\n\n// Union of side effect groupings as pertains to subtreeFlags\nexport const BeforeMutationMask = /*           */ 0b000000001100001010;\nexport const MutationMask = /*                 */ 0b000000010010011110;\nexport const LayoutMask = /*                   */ 0b000000000010100100;\nexport const PassiveMask = /*                  */ 0b000000001000001000;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculting them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = /*                   */ 0b001000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b010000000000000000;\nexport const MountPassiveDev = /*              */ 0b100000000000000000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\nimport typeof * as ExportsType from './ReactFeatureFlags.test-renderer';\n\nexport const debugRenderPhaseSideEffectsForStrictMode = false;\nexport const enableDebugTracing = false;\nexport const enableSchedulingProfiler = false;\nexport const warnAboutDeprecatedLifecycles = true;\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = false;\nexport const enableProfilerTimer = __PROFILE__;\nexport const enableProfilerCommitHooks = false;\nexport const enableSchedulerTracing = __PROFILE__;\nexport const enableSuspenseServerRenderer = false;\nexport const enableSelectiveHydration = false;\nexport const enableBlocksAPI = false;\nexport const enableLazyElements = false;\nexport const disableJavaScriptURLs = false;\nexport const disableInputAttributeSyncing = false;\nexport const enableSchedulerDebugging = false;\nexport const enableFundamentalAPI = false;\nexport const enableScopeAPI = false;\nexport const enableCreateEventHandleAPI = false;\nexport const warnAboutUnmockedScheduler = false;\nexport const enableSuspenseCallback = false;\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\nexport const warnAboutStringRefs = false;\nexport const disableLegacyContext = false;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\nexport const enableTrustedTypesIntegration = false;\nexport const disableTextareaChildren = false;\nexport const disableModulePatternComponents = false;\nexport const warnUnstableRenderSubtreeIntoContainer = false;\nexport const warnAboutSpreadingKeyToJSX = false;\nexport const enableComponentStackLocations = true;\nexport const enableLegacyFBSupport = false;\nexport const enableFilterEmptyStringAttributesDOM = false;\nexport const skipUnmountedBoundaries = false;\n\nexport const enableNewReconciler = false;\nexport const deferRenderPhaseUpdateToNextBatch = true;\nexport const decoupleUpdatePriorityFromScheduler = false;\nexport const enableDiscreteEventFlushingChange = false;\nexport const enableEagerRootListeners = true;\n\nexport const enableDoubleInvokingEffects = false;\n\n// Flow magic to verify the exports of this file match the original version.\n// eslint-disable-next-line no-unused-vars\ntype Check<_X, Y: _X, X: Y = _X> = null;\n// eslint-disable-next-line no-unused-expressions\n(null: Check<ExportsType, FeatureFlagsType>);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport invariant from 'shared/invariant';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentName from 'shared/getComponentName';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  FundamentalComponent,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\nimport {enableFundamentalAPI} from 'shared/ReactFeatureFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentName(ownerFiber.type) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  invariant(\n    getNearestMountedFiber(fiber) === fiber,\n    'Unable to find node on an unmounted component.',\n  );\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n    invariant(\n      nearestMounted !== null,\n      'Unable to find node on an unmounted component.',\n    );\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      invariant(false, 'Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n        invariant(\n          didFindChild,\n          'Child was not found in either parent set. This indicates a bug ' +\n            'in React related to the return pointer. Please file an issue.',\n        );\n      }\n    }\n\n    invariant(\n      a.alternate === b,\n      \"Return fibers should always be each others' alternates. \" +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  invariant(\n    a.tag === HostRoot,\n    'Unable to find node on an unmounted component.',\n  );\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  let node: Fiber = currentParent;\n  while (true) {\n    if (node.tag === HostComponent || node.tag === HostText) {\n      return node;\n    } else if (node.child) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  let node: Fiber = currentParent;\n  while (true) {\n    if (\n      node.tag === HostComponent ||\n      node.tag === HostText ||\n      (enableFundamentalAPI && node.tag === FundamentalComponent)\n    ) {\n      return node;\n    } else if (node.child && node.tag !== HostPortal) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  invariant(\n    false,\n    'The current renderer does not support hydration. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Hydration (when unsupported)\nexport type SuspenseInstance = mixed;\nexport const supportsHydration = false;\nexport const canHydrateInstance = shim;\nexport const canHydrateTextInstance = shim;\nexport const canHydrateSuspenseInstance = shim;\nexport const isSuspenseInstancePending = shim;\nexport const isSuspenseInstanceFallback = shim;\nexport const registerSuspenseInstanceRetry = shim;\nexport const getNextHydratableSibling = shim;\nexport const getFirstHydratableChild = shim;\nexport const hydrateInstance = shim;\nexport const hydrateTextInstance = shim;\nexport const hydrateSuspenseInstance = shim;\nexport const getNextHydratableInstanceAfterSuspenseInstance = shim;\nexport const commitHydratedContainer = shim;\nexport const commitHydratedSuspenseInstance = shim;\nexport const clearSuspenseBoundary = shim;\nexport const clearSuspenseBoundaryFromContainer = shim;\nexport const didNotMatchHydratedContainerTextInstance = shim;\nexport const didNotMatchHydratedTextInstance = shim;\nexport const didNotHydrateContainerInstance = shim;\nexport const didNotHydrateInstance = shim;\nexport const didNotFindHydratableContainerInstance = shim;\nexport const didNotFindHydratableContainerTextInstance = shim;\nexport const didNotFindHydratableContainerSuspenseInstance = shim;\nexport const didNotFindHydratableInstance = shim;\nexport const didNotFindHydratableTextInstance = shim;\nexport const didNotFindHydratableSuspenseInstance = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactFundamentalComponentInstance} from 'shared/ReactTypes';\n\nimport {REACT_OPAQUE_ID_TYPE} from 'shared/ReactSymbols';\n\nexport type Type = string;\nexport type Props = Object;\nexport type Container = {|\n  children: Array<Instance | TextInstance>,\n  createNodeMock: Function,\n  tag: 'CONTAINER',\n|};\nexport type Instance = {|\n  type: string,\n  props: Object,\n  isHidden: boolean,\n  children: Array<Instance | TextInstance>,\n  internalInstanceHandle: Object,\n  rootContainerInstance: Container,\n  tag: 'INSTANCE',\n|};\nexport type TextInstance = {|\n  text: string,\n  isHidden: boolean,\n  tag: 'TEXT',\n|};\nexport type HydratableInstance = Instance | TextInstance;\nexport type PublicInstance = Instance | TextInstance;\nexport type HostContext = Object;\nexport type UpdatePayload = Object;\nexport type ChildSet = void; // Unused\nexport type TimeoutHandle = TimeoutID;\nexport type NoTimeout = -1;\nexport type EventResponder = any;\nexport opaque type OpaqueIDType =\n  | string\n  | {\n      toString: () => string | void,\n      valueOf: () => string | void,\n    };\n\nexport type RendererInspectionConfig = $ReadOnly<{||}>;\n\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoPersistence';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoHydration';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors';\n\nconst NO_CONTEXT = {};\nconst UPDATE_SIGNAL = {};\nconst nodeToInstanceMap = new WeakMap();\n\nif (__DEV__) {\n  Object.freeze(NO_CONTEXT);\n  Object.freeze(UPDATE_SIGNAL);\n}\n\nexport function getPublicInstance(inst: Instance | TextInstance): * {\n  switch (inst.tag) {\n    case 'INSTANCE':\n      const createNodeMock = inst.rootContainerInstance.createNodeMock;\n      const mockNode = createNodeMock({\n        type: inst.type,\n        props: inst.props,\n      });\n      if (typeof mockNode === 'object' && mockNode !== null) {\n        nodeToInstanceMap.set(mockNode, inst);\n      }\n      return mockNode;\n    default:\n      return inst;\n  }\n}\n\nexport function appendChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  if (__DEV__) {\n    if (!Array.isArray(parentInstance.children)) {\n      console.error(\n        'An invalid container has been provided. ' +\n          'This may indicate that another renderer is being used in addition to the test renderer. ' +\n          '(For example, ReactDOM.createPortal inside of a ReactTestRenderer tree.) ' +\n          'This is not supported.',\n      );\n    }\n  }\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function insertBefore(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n  beforeChild: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  const beforeIndex = parentInstance.children.indexOf(beforeChild);\n  parentInstance.children.splice(beforeIndex, 0, child);\n}\n\nexport function removeChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  parentInstance.children.splice(index, 1);\n}\n\nexport function clearContainer(container: Container): void {\n  container.children.splice(0);\n}\n\nexport function getRootHostContext(\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function getChildHostContext(\n  parentHostContext: HostContext,\n  type: string,\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function prepareForCommit(containerInfo: Container): null | Object {\n  // noop\n  return null;\n}\n\nexport function resetAfterCommit(containerInfo: Container): void {\n  // noop\n}\n\nexport function createInstance(\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): Instance {\n  return {\n    type,\n    props,\n    isHidden: false,\n    children: [],\n    internalInstanceHandle,\n    rootContainerInstance,\n    tag: 'INSTANCE',\n  };\n}\n\nexport function appendInitialChild(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function finalizeInitialChildren(\n  testElement: Instance,\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): boolean {\n  return false;\n}\n\nexport function prepareUpdate(\n  testElement: Instance,\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): null | {...} {\n  return UPDATE_SIGNAL;\n}\n\nexport function shouldSetTextContent(type: string, props: Props): boolean {\n  return false;\n}\n\nexport function createTextInstance(\n  text: string,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): TextInstance {\n  return {\n    text,\n    isHidden: false,\n    tag: 'TEXT',\n  };\n}\n\nexport const isPrimaryRenderer = false;\nexport const warnsIfNotActing = true;\n\nexport const scheduleTimeout = setTimeout;\nexport const cancelTimeout = clearTimeout;\nexport const noTimeout = -1;\n\n// -------------------\n//     Mutation\n// -------------------\n\nexport const supportsMutation = true;\n\nexport function commitUpdate(\n  instance: Instance,\n  updatePayload: {...},\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  instance.type = type;\n  instance.props = newProps;\n}\n\nexport function commitMount(\n  instance: Instance,\n  type: string,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  // noop\n}\n\nexport function commitTextUpdate(\n  textInstance: TextInstance,\n  oldText: string,\n  newText: string,\n): void {\n  textInstance.text = newText;\n}\n\nexport function resetTextContent(testElement: Instance): void {\n  // noop\n}\n\nexport const appendChildToContainer = appendChild;\nexport const insertInContainerBefore = insertBefore;\nexport const removeChildFromContainer = removeChild;\n\nexport function hideInstance(instance: Instance): void {\n  instance.isHidden = true;\n}\n\nexport function hideTextInstance(textInstance: TextInstance): void {\n  textInstance.isHidden = true;\n}\n\nexport function unhideInstance(instance: Instance, props: Props): void {\n  instance.isHidden = false;\n}\n\nexport function unhideTextInstance(\n  textInstance: TextInstance,\n  text: string,\n): void {\n  textInstance.isHidden = false;\n}\n\nexport function getFundamentalComponentInstance(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): Instance {\n  const {impl, props, state} = fundamentalInstance;\n  return impl.getInstance(null, props, state);\n}\n\nexport function mountFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): void {\n  const {impl, instance, props, state} = fundamentalInstance;\n  const onMount = impl.onMount;\n  if (onMount !== undefined) {\n    onMount(null, instance, props, state);\n  }\n}\n\nexport function shouldUpdateFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): boolean {\n  const {impl, prevProps, props, state} = fundamentalInstance;\n  const shouldUpdate = impl.shouldUpdate;\n  if (shouldUpdate !== undefined) {\n    return shouldUpdate(null, prevProps, props, state);\n  }\n  return true;\n}\n\nexport function updateFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): void {\n  const {impl, instance, prevProps, props, state} = fundamentalInstance;\n  const onUpdate = impl.onUpdate;\n  if (onUpdate !== undefined) {\n    onUpdate(null, instance, prevProps, props, state);\n  }\n}\n\nexport function unmountFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): void {\n  const {impl, instance, props, state} = fundamentalInstance;\n  const onUnmount = impl.onUnmount;\n  if (onUnmount !== undefined) {\n    onUnmount(null, instance, props, state);\n  }\n}\n\nexport function getInstanceFromNode(mockNode: Object) {\n  const instance = nodeToInstanceMap.get(mockNode);\n  if (instance !== undefined) {\n    return instance.internalInstanceHandle;\n  }\n  return null;\n}\n\nlet clientId: number = 0;\nexport function makeClientId(): OpaqueIDType {\n  return 'c_' + (clientId++).toString(36);\n}\n\nexport function makeClientIdInDEV(warnOnAccessInDEV: () => void): OpaqueIDType {\n  const id = 'c_' + (clientId++).toString(36);\n  return {\n    toString() {\n      warnOnAccessInDEV();\n      return id;\n    },\n    valueOf() {\n      warnOnAccessInDEV();\n      return id;\n    },\n  };\n}\n\nexport function isOpaqueHydratingObject(value: mixed): boolean {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    value.$$typeof === REACT_OPAQUE_ID_TYPE\n  );\n}\n\nexport function makeOpaqueHydratingObject(\n  attemptToReadValue: () => void,\n): OpaqueIDType {\n  return {\n    $$typeof: REACT_OPAQUE_ID_TYPE,\n    toString: attemptToReadValue,\n    valueOf: attemptToReadValue,\n  };\n}\n\nexport function beforeActiveInstanceBlur() {\n  // noop\n}\n\nexport function afterActiveInstanceBlur() {\n  // noop\n}\n\nexport function preparePortalMount(portalInstance: Instance): void {\n  // noop\n}\n\nexport function prepareScopeUpdate(scopeInstance: Object, inst: Object): void {\n  nodeToInstanceMap.set(scopeInstance, inst);\n}\n\nexport function getInstanceFromScope(scopeInstance: Object): null | Object {\n  return nodeToInstanceMap.get(scopeInstance) || null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\n\nlet disabledDepth = 0;\nlet prevLog;\nlet prevInfo;\nlet prevWarn;\nlet prevError;\nlet prevGroup;\nlet prevGroupCollapsed;\nlet prevGroupEnd;\n\nfunction disabledLog() {}\ndisabledLog.__reactDisabledLog = true;\n\nexport function disableLogs(): void {\n  if (__DEV__) {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd;\n      // https://github.com/facebook/react/issues/19099\n      const props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true,\n      };\n      // $FlowFixMe Flow thinks console is immutable.\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props,\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n    disabledDepth++;\n  }\n}\n\nexport function reenableLogs(): void {\n  if (__DEV__) {\n    disabledDepth--;\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      const props = {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n      };\n      // $FlowFixMe Flow thinks console is immutable.\n      Object.defineProperties(console, {\n        log: {...props, value: prevLog},\n        info: {...props, value: prevInfo},\n        warn: {...props, value: prevWarn},\n        error: {...props, value: prevError},\n        group: {...props, value: prevGroup},\n        groupCollapsed: {...props, value: prevGroupCollapsed},\n        groupEnd: {...props, value: prevGroupEnd},\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n    if (disabledDepth < 0) {\n      console.error(\n        'disabledDepth fell below zero. ' +\n          'This is a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {enableComponentStackLocations} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_BLOCK_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                const frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(Object.prototype.hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentName(type) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    invariant(\n      contextStackCursor.current === emptyContextObject,\n      'Unexpected context found on stack. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentName(type) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      invariant(\n        contextKey in childContextTypes,\n        '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n        getComponentName(type) || 'Unknown',\n        contextKey,\n      );\n    }\n    if (__DEV__) {\n      const name = getComponentName(type) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    invariant(\n      instance,\n      'Expected to have an instance by this point. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    invariant(\n      isFiberMounted(fiber) && fiber.tag === ClassComponent,\n      'Expected subtree parent to be a mounted class component. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n    invariant(\n      false,\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1 | 2;\n\nexport const LegacyRoot = 0;\nexport const BlockingRoot = 1;\nexport const ConcurrentRoot = 2;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableProfilerTimer} from 'shared/ReactFeatureFlags';\n\nimport type {Fiber, FiberRoot, ReactPriorityLevel} from './ReactInternalTypes';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport {DidCapture} from './ReactFiberFlags';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    rendererID = hook.inject(internals);\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  // DevTools exists\n  return true;\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(\n  root: FiberRoot,\n  priorityLevel: ReactPriorityLevel,\n) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          priorityLevel,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nconst {\n  __interactionsRef,\n  __subscriberRef,\n  unstable_clear,\n  unstable_getCurrent,\n  unstable_getThreadID,\n  unstable_subscribe,\n  unstable_trace,\n  unstable_unsubscribe,\n  unstable_wrap,\n} = ReactInternals.SchedulerTracing;\n\nexport {\n  __interactionsRef,\n  __subscriberRef,\n  unstable_clear,\n  unstable_getCurrent,\n  unstable_getThreadID,\n  unstable_subscribe,\n  unstable_trace,\n  unstable_unsubscribe,\n  unstable_wrap,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\nimport {__interactionsRef} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport {\n  SyncLanePriority,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\n\nconst {\n  unstable_runWithPriority: Scheduler_runWithPriority,\n  unstable_scheduleCallback: Scheduler_scheduleCallback,\n  unstable_cancelCallback: Scheduler_cancelCallback,\n  unstable_shouldYield: Scheduler_shouldYield,\n  unstable_requestPaint: Scheduler_requestPaint,\n  unstable_now: Scheduler_now,\n  unstable_getCurrentPriorityLevel: Scheduler_getCurrentPriorityLevel,\n  unstable_ImmediatePriority: Scheduler_ImmediatePriority,\n  unstable_UserBlockingPriority: Scheduler_UserBlockingPriority,\n  unstable_NormalPriority: Scheduler_NormalPriority,\n  unstable_LowPriority: Scheduler_LowPriority,\n  unstable_IdlePriority: Scheduler_IdlePriority,\n} = Scheduler;\n\nif (enableSchedulerTracing) {\n  // Provide explicit error message when production+profiling bundle of e.g.\n  // react-dom is used with production (non-profiling) bundle of\n  // scheduler/tracing\n  invariant(\n    __interactionsRef != null && __interactionsRef.current != null,\n    'It is not supported to run the profiling version of a renderer (for ' +\n      'example, `react-dom/profiling`) without also replacing the ' +\n      '`scheduler/tracing` module with `scheduler/tracing-profiling`. Your ' +\n      'bundler might have a setting for aliasing both modules. Learn more at ' +\n      'https://reactjs.org/link/profiling',\n  );\n}\n\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\ntype SchedulerCallbackOptions = {timeout?: number, ...};\n\nconst fakeCallbackNode = {};\n\n// Except for NoPriority, these correspond to Scheduler priorities. We use\n// ascending numbers so we can compare them like numbers. They start at 90 to\n// avoid clashing with Scheduler's priorities.\nexport const ImmediatePriority: ReactPriorityLevel = 99;\nexport const UserBlockingPriority: ReactPriorityLevel = 98;\nexport const NormalPriority: ReactPriorityLevel = 97;\nexport const LowPriority: ReactPriorityLevel = 96;\nexport const IdlePriority: ReactPriorityLevel = 95;\n// NoPriority is the absence of priority. Also React-only.\nexport const NoPriority: ReactPriorityLevel = 90;\n\nexport const shouldYield = Scheduler_shouldYield;\nexport const requestPaint =\n  // Fall back gracefully if we're running an older version of Scheduler.\n  Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : () => {};\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet immediateQueueCallbackNode: mixed | null = null;\nlet isFlushingSyncQueue: boolean = false;\nconst initialTimeMs: number = Scheduler_now();\n\n// If the initial timestamp is reasonably small, use Scheduler's `now` directly.\n// This will be the case for modern browsers that support `performance.now`. In\n// older browsers, Scheduler falls back to `Date.now`, which returns a Unix\n// timestamp. In that case, subtract the module initialization time to simulate\n// the behavior of performance.now and keep our times small enough to fit\n// within 32 bits.\n// TODO: Consider lifting this into Scheduler.\nexport const now =\n  initialTimeMs < 10000 ? Scheduler_now : () => Scheduler_now() - initialTimeMs;\n\nexport function getCurrentPriorityLevel(): ReactPriorityLevel {\n  switch (Scheduler_getCurrentPriorityLevel()) {\n    case Scheduler_ImmediatePriority:\n      return ImmediatePriority;\n    case Scheduler_UserBlockingPriority:\n      return UserBlockingPriority;\n    case Scheduler_NormalPriority:\n      return NormalPriority;\n    case Scheduler_LowPriority:\n      return LowPriority;\n    case Scheduler_IdlePriority:\n      return IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nfunction reactPriorityToSchedulerPriority(reactPriorityLevel) {\n  switch (reactPriorityLevel) {\n    case ImmediatePriority:\n      return Scheduler_ImmediatePriority;\n    case UserBlockingPriority:\n      return Scheduler_UserBlockingPriority;\n    case NormalPriority:\n      return Scheduler_NormalPriority;\n    case LowPriority:\n      return Scheduler_LowPriority;\n    case IdlePriority:\n      return Scheduler_IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nexport function runWithPriority<T>(\n  reactPriorityLevel: ReactPriorityLevel,\n  fn: () => T,\n): T {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_runWithPriority(priorityLevel, fn);\n}\n\nexport function scheduleCallback(\n  reactPriorityLevel: ReactPriorityLevel,\n  callback: SchedulerCallback,\n  options: SchedulerCallbackOptions | void | null,\n) {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_scheduleCallback(priorityLevel, callback, options);\n}\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n    // Flush the queue in the next tick, at the earliest.\n    immediateQueueCallbackNode = Scheduler_scheduleCallback(\n      Scheduler_ImmediatePriority,\n      flushSyncCallbackQueueImpl,\n    );\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n  return fakeCallbackNode;\n}\n\nexport function cancelCallback(callbackNode: mixed) {\n  if (callbackNode !== fakeCallbackNode) {\n    Scheduler_cancelCallback(callbackNode);\n  }\n}\n\nexport function flushSyncCallbackQueue(): boolean {\n  if (immediateQueueCallbackNode !== null) {\n    const node = immediateQueueCallbackNode;\n    immediateQueueCallbackNode = null;\n    Scheduler_cancelCallback(node);\n  }\n  return flushSyncCallbackQueueImpl();\n}\n\nfunction flushSyncCallbackQueueImpl() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrancy.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        setCurrentUpdateLanePriority(SyncLanePriority);\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n        isFlushingSyncQueue = false;\n      }\n    } else {\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        isFlushingSyncQueue = false;\n      }\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, ReactPriorityLevel} from './ReactInternalTypes';\n\nexport opaque type LanePriority =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17;\nexport opaque type Lanes = number;\nexport opaque type Lane = number;\nexport opaque type LaneMap<T> = Array<T>;\n\nimport invariant from 'shared/invariant';\n\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  LowPriority as LowSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n  NoPriority as NoSchedulerPriority,\n} from './SchedulerWithReactIntegration.new';\n\nexport const SyncLanePriority: LanePriority = 15;\nexport const SyncBatchedLanePriority: LanePriority = 14;\n\nconst InputDiscreteHydrationLanePriority: LanePriority = 13;\nexport const InputDiscreteLanePriority: LanePriority = 12;\n\nconst InputContinuousHydrationLanePriority: LanePriority = 11;\nexport const InputContinuousLanePriority: LanePriority = 10;\n\nconst DefaultHydrationLanePriority: LanePriority = 9;\nexport const DefaultLanePriority: LanePriority = 8;\n\nconst TransitionHydrationPriority: LanePriority = 7;\nexport const TransitionPriority: LanePriority = 6;\n\nconst RetryLanePriority: LanePriority = 5;\n\nconst SelectiveHydrationLanePriority: LanePriority = 4;\n\nconst IdleHydrationLanePriority: LanePriority = 3;\nconst IdleLanePriority: LanePriority = 2;\n\nconst OffscreenLanePriority: LanePriority = 1;\n\nexport const NoLanePriority: LanePriority = 0;\n\nconst TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\nexport const SyncBatchedLane: Lane = /*                 */ 0b0000000000000000000000000000010;\n\nexport const InputDiscreteHydrationLane: Lane = /*      */ 0b0000000000000000000000000000100;\nconst InputDiscreteLanes: Lanes = /*                    */ 0b0000000000000000000000000011000;\n\nconst InputContinuousHydrationLane: Lane = /*           */ 0b0000000000000000000000000100000;\nconst InputContinuousLanes: Lanes = /*                  */ 0b0000000000000000000000011000000;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000100000000;\nexport const DefaultLanes: Lanes = /*                   */ 0b0000000000000000000111000000000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000001000000000000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111110000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000011110000000000000000000000;\n\nexport const SomeRetryLane: Lanes = /*                  */ 0b0000010000000000000000000000000;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0000100000000000000000000000000;\n\nconst NonIdleLanes = /*                                 */ 0b0000111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0001000000000000000000000000000;\nconst IdleLanes: Lanes = /*                             */ 0b0110000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\nexport const NoTimestamp = -1;\n\nlet currentUpdateLanePriority: LanePriority = NoLanePriority;\n\nexport function getCurrentUpdateLanePriority(): LanePriority {\n  return currentUpdateLanePriority;\n}\n\nexport function setCurrentUpdateLanePriority(newLanePriority: LanePriority) {\n  currentUpdateLanePriority = newLanePriority;\n}\n\n// \"Registers\" used to \"return\" multiple values\n// Used by getHighestPriorityLanes and getNextLanes:\nlet return_highestLanePriority: LanePriority = DefaultLanePriority;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  if ((SyncLane & lanes) !== NoLanes) {\n    return_highestLanePriority = SyncLanePriority;\n    return SyncLane;\n  }\n  if ((SyncBatchedLane & lanes) !== NoLanes) {\n    return_highestLanePriority = SyncBatchedLanePriority;\n    return SyncBatchedLane;\n  }\n  if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {\n    return_highestLanePriority = InputDiscreteHydrationLanePriority;\n    return InputDiscreteHydrationLane;\n  }\n  const inputDiscreteLanes = InputDiscreteLanes & lanes;\n  if (inputDiscreteLanes !== NoLanes) {\n    return_highestLanePriority = InputDiscreteLanePriority;\n    return inputDiscreteLanes;\n  }\n  if ((lanes & InputContinuousHydrationLane) !== NoLanes) {\n    return_highestLanePriority = InputContinuousHydrationLanePriority;\n    return InputContinuousHydrationLane;\n  }\n  const inputContinuousLanes = InputContinuousLanes & lanes;\n  if (inputContinuousLanes !== NoLanes) {\n    return_highestLanePriority = InputContinuousLanePriority;\n    return inputContinuousLanes;\n  }\n  if ((lanes & DefaultHydrationLane) !== NoLanes) {\n    return_highestLanePriority = DefaultHydrationLanePriority;\n    return DefaultHydrationLane;\n  }\n  const defaultLanes = DefaultLanes & lanes;\n  if (defaultLanes !== NoLanes) {\n    return_highestLanePriority = DefaultLanePriority;\n    return defaultLanes;\n  }\n  if ((lanes & TransitionHydrationLane) !== NoLanes) {\n    return_highestLanePriority = TransitionHydrationPriority;\n    return TransitionHydrationLane;\n  }\n  const transitionLanes = TransitionLanes & lanes;\n  if (transitionLanes !== NoLanes) {\n    return_highestLanePriority = TransitionPriority;\n    return transitionLanes;\n  }\n  const retryLanes = RetryLanes & lanes;\n  if (retryLanes !== NoLanes) {\n    return_highestLanePriority = RetryLanePriority;\n    return retryLanes;\n  }\n  if (lanes & SelectiveHydrationLane) {\n    return_highestLanePriority = SelectiveHydrationLanePriority;\n    return SelectiveHydrationLane;\n  }\n  if ((lanes & IdleHydrationLane) !== NoLanes) {\n    return_highestLanePriority = IdleHydrationLanePriority;\n    return IdleHydrationLane;\n  }\n  const idleLanes = IdleLanes & lanes;\n  if (idleLanes !== NoLanes) {\n    return_highestLanePriority = IdleLanePriority;\n    return idleLanes;\n  }\n  if ((OffscreenLane & lanes) !== NoLanes) {\n    return_highestLanePriority = OffscreenLanePriority;\n    return OffscreenLane;\n  }\n  if (__DEV__) {\n    console.error('Should have found matching lanes. This is a bug in React.');\n  }\n  // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n  return_highestLanePriority = DefaultLanePriority;\n  return lanes;\n}\n\nexport function schedulerPriorityToLanePriority(\n  schedulerPriorityLevel: ReactPriorityLevel,\n): LanePriority {\n  switch (schedulerPriorityLevel) {\n    case ImmediateSchedulerPriority:\n      return SyncLanePriority;\n    case UserBlockingSchedulerPriority:\n      return InputContinuousLanePriority;\n    case NormalSchedulerPriority:\n    case LowSchedulerPriority:\n      // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.\n      return DefaultLanePriority;\n    case IdleSchedulerPriority:\n      return IdleLanePriority;\n    default:\n      return NoLanePriority;\n  }\n}\n\nexport function lanePriorityToSchedulerPriority(\n  lanePriority: LanePriority,\n): ReactPriorityLevel {\n  switch (lanePriority) {\n    case SyncLanePriority:\n    case SyncBatchedLanePriority:\n      return ImmediateSchedulerPriority;\n    case InputDiscreteHydrationLanePriority:\n    case InputDiscreteLanePriority:\n    case InputContinuousHydrationLanePriority:\n    case InputContinuousLanePriority:\n      return UserBlockingSchedulerPriority;\n    case DefaultHydrationLanePriority:\n    case DefaultLanePriority:\n    case TransitionHydrationPriority:\n    case TransitionPriority:\n    case SelectiveHydrationLanePriority:\n    case RetryLanePriority:\n      return NormalSchedulerPriority;\n    case IdleHydrationLanePriority:\n    case IdleLanePriority:\n    case OffscreenLanePriority:\n      return IdleSchedulerPriority;\n    case NoLanePriority:\n      return NoSchedulerPriority;\n    default:\n      invariant(\n        false,\n        'Invalid update priority: %s. This is a bug in React.',\n        lanePriority,\n      );\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return_highestLanePriority = NoLanePriority;\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n  let nextLanePriority = NoLanePriority;\n\n  const expiredLanes = root.expiredLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Check if any work has expired.\n  if (expiredLanes !== NoLanes) {\n    nextLanes = expiredLanes;\n    nextLanePriority = return_highestLanePriority = SyncLanePriority;\n  } else {\n    // Do not work on any idle work until all the non-idle work has finished,\n    // even if the work is suspended.\n    const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n    if (nonIdlePendingLanes !== NoLanes) {\n      const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n      if (nonIdleUnblockedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        nextLanePriority = return_highestLanePriority;\n      } else {\n        const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n        if (nonIdlePingedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          nextLanePriority = return_highestLanePriority;\n        }\n      }\n    } else {\n      // The only remaining work is Idle.\n      const unblockedLanes = pendingLanes & ~suspendedLanes;\n      if (unblockedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(unblockedLanes);\n        nextLanePriority = return_highestLanePriority;\n      } else {\n        if (pingedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(pingedLanes);\n          nextLanePriority = return_highestLanePriority;\n        }\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If there are higher priority lanes, we'll include them even if they\n  // are suspended.\n  nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    getHighestPriorityLanes(wipLanes);\n    const wipLanePriority = return_highestLanePriority;\n    if (nextLanePriority <= wipLanePriority) {\n      return wipLanes;\n    } else {\n      return_highestLanePriority = nextLanePriority;\n    }\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  // TODO: Expiration heuristic is constant per lane, so could use a map.\n  getHighestPriorityLanes(lane);\n  const priority = return_highestLanePriority;\n  if (priority >= InputContinuousLanePriority) {\n    // User interactions should expire slightly more quickly.\n    //\n    // NOTE: This is set to the corresponding constant as in Scheduler.js. When\n    // we made it larger, a product metric in www regressed, suggesting there's\n    // a user interaction that's being starved by a series of synchronous\n    // updates. If that theory is correct, the proper solution is to fix the\n    // starvation. However, this scenario supports the idea that expiration\n    // times are an important safeguard when starvation does happen.\n    //\n    // Also note that, in the case of user input specifically, this will soon no\n    // longer be an issue because we plan to make user input synchronous by\n    // default (until you enter `startTransition`, of course.)\n    //\n    // If weren't planning to make these updates synchronous soon anyway, I\n    // would probably make this number a configurable parameter.\n    return currentTime + 250;\n  } else if (priority >= TransitionPriority) {\n    return currentTime + 5000;\n  } else {\n    // Anything idle priority or lower should never expire.\n    return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function returnNextLanesPriority() {\n  return return_highestLanePriority;\n}\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be a pure function, so that it always returns the same lane for given inputs.\nexport function findUpdateLane(\n  lanePriority: LanePriority,\n  wipLanes: Lanes,\n): Lane {\n  switch (lanePriority) {\n    case NoLanePriority:\n      break;\n    case SyncLanePriority:\n      return SyncLane;\n    case SyncBatchedLanePriority:\n      return SyncBatchedLane;\n    case InputDiscreteLanePriority: {\n      const lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // Shift to the next priority level\n        return findUpdateLane(InputContinuousLanePriority, wipLanes);\n      }\n      return lane;\n    }\n    case InputContinuousLanePriority: {\n      const lane = pickArbitraryLane(InputContinuousLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // Shift to the next priority level\n        return findUpdateLane(DefaultLanePriority, wipLanes);\n      }\n      return lane;\n    }\n    case DefaultLanePriority: {\n      let lane = pickArbitraryLane(DefaultLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // If all the default lanes are already being worked on, look for a\n        // lane in the transition range.\n        lane = pickArbitraryLane(TransitionLanes & ~wipLanes);\n        if (lane === NoLane) {\n          // All the transition lanes are taken, too. This should be very\n          // rare, but as a last resort, pick a default lane. This will have\n          // the effect of interrupting the current work-in-progress render.\n          lane = pickArbitraryLane(DefaultLanes);\n        }\n      }\n      return lane;\n    }\n    case TransitionPriority: // Should be handled by findTransitionLane instead\n    case RetryLanePriority: // Should be handled by findRetryLane instead\n      break;\n    case IdleLanePriority:\n      let lane = pickArbitraryLane(IdleLanes & ~wipLanes);\n      if (lane === NoLane) {\n        lane = pickArbitraryLane(IdleLanes);\n      }\n      return lane;\n    default:\n      // The remaining priorities are not valid for updates\n      break;\n  }\n  invariant(\n    false,\n    'Invalid update priority: %s. This is a bug in React.',\n    lanePriority,\n  );\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be pure function, so that it always returns the same lane for given inputs.\nexport function findTransitionLane(wipLanes: Lanes, pendingLanes: Lanes): Lane {\n  // First look for lanes that are completely unclaimed, i.e. have no\n  // pending work.\n  let lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);\n  if (lane === NoLane) {\n    // If all lanes have pending work, look for a lane that isn't currently\n    // being worked on.\n    lane = pickArbitraryLane(TransitionLanes & ~wipLanes);\n    if (lane === NoLane) {\n      // If everything is being worked on, pick any lane. This has the\n      // effect of interrupting the current work-in-progress.\n      lane = pickArbitraryLane(TransitionLanes);\n    }\n  }\n  return lane;\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be pure function, so that it always returns the same lane for given inputs.\nexport function findRetryLane(wipLanes: Lanes): Lane {\n  // This is a fork of `findUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  let lane = pickArbitraryLane(RetryLanes & ~wipLanes);\n  if (lane === NoLane) {\n    lane = pickArbitraryLane(RetryLanes);\n  }\n  return lane;\n}\n\nfunction getHighestPriorityLane(lanes: Lanes) {\n  return lanes & -lanes;\n}\n\nfunction getLowestPriorityLane(lanes: Lanes): Lane {\n  // This finds the most significant non-zero bit.\n  const index = 31 - clz32(lanes);\n  return index < 0 ? NoLanes : 1 << index;\n}\n\nfunction getEqualOrHigherPriorityLanes(lanes: Lanes | Lane): Lanes {\n  return (getLowestPriorityLane(lanes) << 1) - 1;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function higherLanePriority(\n  a: LanePriority,\n  b: LanePriority,\n): LanePriority {\n  return a !== NoLanePriority && a > b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n  return laneMap;\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // TODO: Theoretically, any update to any lane can unblock any other lane. But\n  // it's not practical to try every single possible combination. We need a\n  // heuristic to decide which lanes to attempt to render, and in which batches.\n  // For now, we use the same heuristic as in the old ExpirationTimes model:\n  // retry any lane at equal or lower priority, but don't try updates at higher\n  // priority without also including the lower priority updates. This works well\n  // when considering updates across different priority levels, but isn't\n  // sufficient for updates within the same priority, since we want to treat\n  // those updates as parallel.\n\n  // Unsuspend any update at equal or lower priority.\n  const higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111\n\n  root.suspendedLanes &= higherPriorityLanes;\n  root.pingedLanes &= higherPriorityLanes;\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootExpired(root: FiberRoot, expiredLanes: Lanes) {\n  root.expiredLanes |= expiredLanes & root.pendingLanes;\n}\n\nexport function markDiscreteUpdatesExpired(root: FiberRoot) {\n  root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;\n}\n\nexport function hasDiscreteLanes(lanes: Lanes) {\n  return (lanes & InputDiscreteLanes) !== NoLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = 0;\n  root.pingedLanes = 0;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  root.entangledLanes |= entangledLanes;\n\n  const entanglements = root.entanglements;\n  let lanes = entangledLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] |= entangledLanes;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  getHighestPriorityLanes(renderLanes);\n  const highestLanePriority = return_highestLanePriority;\n\n  let lane;\n  switch (highestLanePriority) {\n    case SyncLanePriority:\n    case SyncBatchedLanePriority:\n      lane = NoLane;\n      break;\n    case InputDiscreteHydrationLanePriority:\n    case InputDiscreteLanePriority:\n      lane = InputDiscreteHydrationLane;\n      break;\n    case InputContinuousHydrationLanePriority:\n    case InputContinuousLanePriority:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultHydrationLanePriority:\n    case DefaultLanePriority:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionHydrationPriority:\n    case TransitionPriority:\n      lane = TransitionHydrationLane;\n      break;\n    case RetryLanePriority:\n      // Shouldn't be reachable under normal circumstances, so there's no\n      // dedicated lane for retry priority. Use the one for long transitions.\n      lane = TransitionHydrationLane;\n      break;\n    case SelectiveHydrationLanePriority:\n      lane = SelectiveHydrationLane;\n      break;\n    case IdleHydrationLanePriority:\n    case IdleLanePriority:\n      lane = IdleHydrationLane;\n      break;\n    case OffscreenLanePriority:\n    case NoLanePriority:\n      lane = NoLane;\n      break;\n    default:\n      invariant(false, 'Invalid lane: %s. This is a bug in React.', lane);\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nconst clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros. Only used on lanes, so assume input is an integer.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(lanes: Lanes | Lane) {\n  if (lanes === 0) {\n    return 32;\n  }\n  return (31 - ((log(lanes) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\nimport {__interactionsRef} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport {\n  SyncLanePriority,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\n\nconst {\n  unstable_runWithPriority: Scheduler_runWithPriority,\n  unstable_scheduleCallback: Scheduler_scheduleCallback,\n  unstable_cancelCallback: Scheduler_cancelCallback,\n  unstable_shouldYield: Scheduler_shouldYield,\n  unstable_requestPaint: Scheduler_requestPaint,\n  unstable_now: Scheduler_now,\n  unstable_getCurrentPriorityLevel: Scheduler_getCurrentPriorityLevel,\n  unstable_ImmediatePriority: Scheduler_ImmediatePriority,\n  unstable_UserBlockingPriority: Scheduler_UserBlockingPriority,\n  unstable_NormalPriority: Scheduler_NormalPriority,\n  unstable_LowPriority: Scheduler_LowPriority,\n  unstable_IdlePriority: Scheduler_IdlePriority,\n} = Scheduler;\n\nif (enableSchedulerTracing) {\n  // Provide explicit error message when production+profiling bundle of e.g.\n  // react-dom is used with production (non-profiling) bundle of\n  // scheduler/tracing\n  invariant(\n    __interactionsRef != null && __interactionsRef.current != null,\n    'It is not supported to run the profiling version of a renderer (for ' +\n      'example, `react-dom/profiling`) without also replacing the ' +\n      '`scheduler/tracing` module with `scheduler/tracing-profiling`. Your ' +\n      'bundler might have a setting for aliasing both modules. Learn more at ' +\n      'https://reactjs.org/link/profiling',\n  );\n}\n\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\ntype SchedulerCallbackOptions = {timeout?: number, ...};\n\nconst fakeCallbackNode = {};\n\n// Except for NoPriority, these correspond to Scheduler priorities. We use\n// ascending numbers so we can compare them like numbers. They start at 90 to\n// avoid clashing with Scheduler's priorities.\nexport const ImmediatePriority: ReactPriorityLevel = 99;\nexport const UserBlockingPriority: ReactPriorityLevel = 98;\nexport const NormalPriority: ReactPriorityLevel = 97;\nexport const LowPriority: ReactPriorityLevel = 96;\nexport const IdlePriority: ReactPriorityLevel = 95;\n// NoPriority is the absence of priority. Also React-only.\nexport const NoPriority: ReactPriorityLevel = 90;\n\nexport const shouldYield = Scheduler_shouldYield;\nexport const requestPaint =\n  // Fall back gracefully if we're running an older version of Scheduler.\n  Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : () => {};\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet immediateQueueCallbackNode: mixed | null = null;\nlet isFlushingSyncQueue: boolean = false;\nconst initialTimeMs: number = Scheduler_now();\n\n// If the initial timestamp is reasonably small, use Scheduler's `now` directly.\n// This will be the case for modern browsers that support `performance.now`. In\n// older browsers, Scheduler falls back to `Date.now`, which returns a Unix\n// timestamp. In that case, subtract the module initialization time to simulate\n// the behavior of performance.now and keep our times small enough to fit\n// within 32 bits.\n// TODO: Consider lifting this into Scheduler.\nexport const now =\n  initialTimeMs < 10000 ? Scheduler_now : () => Scheduler_now() - initialTimeMs;\n\nexport function getCurrentPriorityLevel(): ReactPriorityLevel {\n  switch (Scheduler_getCurrentPriorityLevel()) {\n    case Scheduler_ImmediatePriority:\n      return ImmediatePriority;\n    case Scheduler_UserBlockingPriority:\n      return UserBlockingPriority;\n    case Scheduler_NormalPriority:\n      return NormalPriority;\n    case Scheduler_LowPriority:\n      return LowPriority;\n    case Scheduler_IdlePriority:\n      return IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nfunction reactPriorityToSchedulerPriority(reactPriorityLevel) {\n  switch (reactPriorityLevel) {\n    case ImmediatePriority:\n      return Scheduler_ImmediatePriority;\n    case UserBlockingPriority:\n      return Scheduler_UserBlockingPriority;\n    case NormalPriority:\n      return Scheduler_NormalPriority;\n    case LowPriority:\n      return Scheduler_LowPriority;\n    case IdlePriority:\n      return Scheduler_IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nexport function runWithPriority<T>(\n  reactPriorityLevel: ReactPriorityLevel,\n  fn: () => T,\n): T {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_runWithPriority(priorityLevel, fn);\n}\n\nexport function scheduleCallback(\n  reactPriorityLevel: ReactPriorityLevel,\n  callback: SchedulerCallback,\n  options: SchedulerCallbackOptions | void | null,\n) {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_scheduleCallback(priorityLevel, callback, options);\n}\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n    // Flush the queue in the next tick, at the earliest.\n    immediateQueueCallbackNode = Scheduler_scheduleCallback(\n      Scheduler_ImmediatePriority,\n      flushSyncCallbackQueueImpl,\n    );\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n  return fakeCallbackNode;\n}\n\nexport function cancelCallback(callbackNode: mixed) {\n  if (callbackNode !== fakeCallbackNode) {\n    Scheduler_cancelCallback(callbackNode);\n  }\n}\n\nexport function flushSyncCallbackQueue() {\n  if (immediateQueueCallbackNode !== null) {\n    const node = immediateQueueCallbackNode;\n    immediateQueueCallbackNode = null;\n    Scheduler_cancelCallback(node);\n  }\n  flushSyncCallbackQueueImpl();\n}\n\nfunction flushSyncCallbackQueueImpl() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrancy.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        setCurrentUpdateLanePriority(SyncLanePriority);\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n        isFlushingSyncQueue = false;\n      }\n    } else {\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        isFlushingSyncQueue = false;\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\nexport default '17.0.0';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = 0b00000;\nexport const StrictMode = 0b00001;\n// TODO: Remove BlockingMode and ConcurrentMode by reading from the root\n// tag instead\nexport const BlockingMode = 0b00010;\nexport const ConcurrentMode = 0b00100;\nexport const ProfileMode = 0b01000;\nexport const DebugTracingMode = 0b10000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = 0;\n\nexport function requestCurrentTransition(): number {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !hasOwnProperty.call(objB, keysA[i]) ||\n      !is(objA[keysA[i]], objB[keysA[i]])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  Block,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case Block:\n      return describeFunctionComponentFrame(fiber.type._render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentName from 'shared/getComponentName';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentName(owner.type);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport getComponentName from 'shared/getComponentName';\nimport {StrictMode} from './ReactTypeOfMode';\n\ntype FiberArray = Array<Fiber>;\ntype FiberToFiberComponentsMap = Map<Fiber, FiberArray>;\n\nconst ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings(fiber: Fiber, instance: any): void {},\n  flushPendingUnsafeLifecycleWarnings(): void {},\n  recordLegacyContextWarning(fiber: Fiber, instance: any): void {},\n  flushLegacyContextWarning(): void {},\n  discardPendingWarnings(): void {},\n};\n\nif (__DEV__) {\n  const findStrictRoot = (fiber: Fiber): Fiber | null => {\n    let maybeStrictRoot = null;\n\n    let node = fiber;\n    while (node !== null) {\n      if (node.mode & StrictMode) {\n        maybeStrictRoot = node;\n      }\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  const setToSortedString = set => {\n    const array = [];\n    set.forEach(value => {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  let pendingComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingComponentWillUpdateWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillUpdateWarnings: Array<Fiber> = [];\n\n  // Tracks components we have already warned about.\n  const didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (\n      typeof instance.componentWillMount === 'function' &&\n      // Don't warn about react-lifecycles-compat polyfilled components.\n      instance.componentWillMount.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictMode &&\n      typeof instance.UNSAFE_componentWillMount === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillReceiveProps === 'function' &&\n      instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictMode &&\n      typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillUpdate === 'function' &&\n      instance.componentWillUpdate.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictMode &&\n      typeof instance.UNSAFE_componentWillUpdate === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = () => {\n    // We do an initial pass to gather component names\n    const componentWillMountUniqueNames = new Set();\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(fiber => {\n        componentWillMountUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    const UNSAFE_componentWillMountUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(fiber => {\n        UNSAFE_componentWillMountUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    const componentWillReceivePropsUniqueNames = new Set();\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(fiber => {\n        componentWillReceivePropsUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    const UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(fiber => {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    const componentWillUpdateUniqueNames = new Set();\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(fiber => {\n        componentWillUpdateUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    const UNSAFE_componentWillUpdateUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(fiber => {\n        UNSAFE_componentWillUpdateUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    }\n\n    // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillMountUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillReceivePropsUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, \" +\n          'refactor your code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillUpdateUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillMountUniqueNames);\n\n      console.warn(\n        'componentWillMount has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        componentWillReceivePropsUniqueNames,\n      );\n\n      console.warn(\n        'componentWillReceiveProps has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, refactor your \" +\n          'code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillUpdateUniqueNames);\n\n      console.warn(\n        'componentWillUpdate has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n  };\n\n  let pendingLegacyContextWarning: FiberToFiberComponentsMap = new Map();\n\n  // Tracks components we have already warned about.\n  const didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    const strictRoot = findStrictRoot(fiber);\n    if (strictRoot === null) {\n      console.error(\n        'Expected to find a StrictMode component in a strict mode tree. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n      return;\n    }\n\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    let warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (\n      fiber.type.contextTypes != null ||\n      fiber.type.childContextTypes != null ||\n      (instance !== null && typeof instance.getChildContext === 'function')\n    ) {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = () => {\n    ((pendingLegacyContextWarning: any): FiberToFiberComponentsMap).forEach(\n      (fiberArray: FiberArray, strictRoot) => {\n        if (fiberArray.length === 0) {\n          return;\n        }\n        const firstFiber = fiberArray[0];\n\n        const uniqueNames = new Set();\n        fiberArray.forEach(fiber => {\n          uniqueNames.add(getComponentName(fiber.type) || 'Component');\n          didWarnAboutLegacyContext.add(fiber.type);\n        });\n\n        const sortedNames = setToSortedString(uniqueNames);\n\n        try {\n          setCurrentDebugFiberInDEV(firstFiber);\n          console.error(\n            'Legacy context API has been detected within a strict-mode tree.' +\n              '\\n\\nThe old API will be supported in all 16.x releases, but applications ' +\n              'using it should migrate to the new version.' +\n              '\\n\\nPlease update the following components: %s' +\n              '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context',\n            sortedNames,\n          );\n        } finally {\n          resetCurrentDebugFiberInDEV();\n        }\n      },\n    );\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = () => {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\nexport default ReactStrictModeWarnings;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = Object.assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nexport const MAX_SIGNED_31_BIT_INT = 1073741823;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, ContextDependency} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {MAX_SIGNED_31_BIT_INT} from './MaxInts';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane';\n\nimport invariant from 'shared/invariant';\nimport is from 'shared/objectIs';\nimport {createUpdate, enqueueUpdate, ForceUpdate} from './ReactUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastContextWithAllBitsObserved: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(providerFiber: Fiber, nextValue: T): void {\n  const context: ReactContext<T> = providerFiber.type._context;\n\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(providerFiber: Fiber): void {\n  const currentValue = valueCursor.current;\n\n  pop(valueCursor, providerFiber);\n\n  const context: ReactContext<any> = providerFiber.type._context;\n  if (isPrimaryRenderer) {\n    context._currentValue = currentValue;\n  } else {\n    context._currentValue2 = currentValue;\n  }\n}\n\nexport function calculateChangedBits<T>(\n  context: ReactContext<T>,\n  newValue: T,\n  oldValue: T,\n) {\n  if (is(oldValue, newValue)) {\n    // No change\n    return 0;\n  } else {\n    const changedBits =\n      typeof context._calculateChangedBits === 'function'\n        ? context._calculateChangedBits(oldValue, newValue)\n        : MAX_SIGNED_31_BIT_INT;\n\n    if (__DEV__) {\n      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {\n        console.error(\n          'calculateChangedBits: Expected the return value to be a ' +\n            '31-bit integer. Instead received: %s',\n          changedBits,\n        );\n      }\n    }\n    return changedBits | 0;\n  }\n}\n\nexport function scheduleWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated, which means the rest of the\n      // ancestor path already has sufficient priority.\n      break;\n    }\n    node = node.return;\n  }\n}\n\nexport function propagateContextChange(\n  workInProgress: Fiber,\n  context: ReactContext<mixed>,\n  changedBits: number,\n  renderLanes: Lanes,\n): void {\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (\n          dependency.context === context &&\n          (dependency.observedBits & changedBits) !== 0\n        ) {\n          // Match! Schedule an update on this fiber.\n\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const update = createUpdate(\n              NoTimestamp,\n              pickArbitraryLane(renderLanes),\n            );\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            enqueueUpdate(fiber, update);\n          }\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleWorkOnParentPath(fiber.return, renderLanes);\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (\n      enableSuspenseServerRenderer &&\n      fiber.tag === DehydratedFragment\n    ) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n      invariant(\n        parentSuspense !== null,\n        'We just came from a parent so we must have had a parent. This is a bug in React.',\n      );\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleWorkOnParentPath(parentSuspense, renderLanes);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    const firstContext = dependencies.firstContext;\n    if (firstContext !== null) {\n      if (includesSomeLane(dependencies.lanes, renderLanes)) {\n        // Context list has a pending update. Mark that this fiber performed work.\n        markWorkInProgressReceivedUpdate();\n      }\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    }\n  }\n}\n\nexport function readContext<T>(\n  context: ReactContext<T>,\n  observedBits: void | number | boolean,\n): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  if (lastContextWithAllBitsObserved === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else if (observedBits === false || observedBits === 0) {\n    // Do not observe any updates.\n  } else {\n    let resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.\n    if (\n      typeof observedBits !== 'number' ||\n      observedBits === MAX_SIGNED_31_BIT_INT\n    ) {\n      // Observe all updates.\n      lastContextWithAllBitsObserved = ((context: any): ReactContext<mixed>);\n      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;\n    } else {\n      resolvedObservedBits = observedBits;\n    }\n\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      observedBits: resolvedObservedBits,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      invariant(\n        currentlyRenderingFiber !== null,\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n        responders: null,\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return isPrimaryRenderer ? context._currentValue : context._currentValue2;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\n\nimport {NoLane, NoLanes, isSubsetOfLanes, mergeLanes} from './ReactFiberLane';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {Callback, ShouldCapture, DidCapture} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictMode} from './ReactTypeOfMode';\nimport {markSkippedUpdateLanes} from './ReactFiberWorkLoop.old';\n\nimport invariant from 'shared/invariant';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\ntype SharedQueue<State> = {|\n  pending: Update<State> | null,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  effects: Array<Update<State>> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n    },\n    effects: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(fiber: Fiber, update: Update<State>) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n  const pending = sharedQueue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  sharedQueue.pending = update;\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictMode\n          ) {\n            disableLogs();\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              reenableLogs();\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictMode\n          ) {\n            disableLogs();\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              reenableLogs();\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return Object.assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      const updateLane = update.lane;\n      const updateEventTime = update.eventTime;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (callback !== null) {\n          workInProgress.flags |= Callback;\n          const effects = queue.effects;\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  invariant(\n    typeof callback === 'function',\n    'Invalid argument passed as callback. Expected a function. Instead ' +\n      'received: %s',\n    callback,\n  );\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function commitUpdateQueue<State>(\n  finishedWork: Fiber,\n  finishedQueue: UpdateQueue<State>,\n  instance: any,\n): void {\n  // Commit the effects\n  const effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n  if (effects !== null) {\n    for (let i = 0; i < effects.length; i++) {\n      const effect = effects[i];\n      const callback = effect.callback;\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\n\nimport * as React from 'react';\nimport {Update, Snapshot} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {DebugTracingMode, StrictMode} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n} from './SchedulingProfiler';\n\nconst fakeInternalInstance = {};\nconst isArray = Array.isArray;\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentName(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      invariant(\n        false,\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nexport function applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        reenableLogs();\n      }\n    }\n  }\n\n  const partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  if (__DEV__) {\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : Object.assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          instance.shouldComponentUpdate(newProps, newState, nextContext);\n        } finally {\n          reenableLogs();\n        }\n      }\n    }\n    const shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n\n    if (__DEV__) {\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentName(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentName(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentName(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentName(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentName(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        reenableLogs();\n      }\n    }\n  }\n\n  const instance = new ctor(props, context);\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentName(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentName(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentName(workInProgress.type) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentName(workInProgress.type) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentName(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    workInProgress.flags |= Update;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {BlockComponent} from 'react/src/ReactBlock';\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\n\nimport getComponentName from 'shared/getComponentName';\nimport {Placement, Deletion} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_BLOCK_TYPE,\n} from 'shared/ReactSymbols';\nimport {\n  FunctionComponent,\n  ClassComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  SimpleMemoComponent,\n  Block,\n} from './ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport {\n  warnAboutStringRefs,\n  enableBlocksAPI,\n  enableLazyElements,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictMode} from './ReactTypeOfMode';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n    invariant(\n      typeof child._store === 'object',\n      'React Component in warnForMissingKey should have a _store. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n    child._store.validated = true;\n\n    const componentName = getComponentName(returnFiber.type) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nconst isArray = Array.isArray;\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName = getComponentName(returnFiber.type) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n        invariant(\n          ownerFiber.tag === ClassComponent,\n          'Function components cannot have string refs. ' +\n            'We recommend using useRef() instead. ' +\n            'Learn more about using refs safely here: ' +\n            'https://reactjs.org/link/strict-mode-string-ref',\n        );\n        inst = ownerFiber.stateNode;\n      }\n      invariant(\n        inst,\n        'Missing owner for string ref %s. This error is likely caused by a ' +\n          'bug in React. Please file an issue.',\n        mixedRef,\n      );\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = inst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = inst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      invariant(\n        typeof mixedRef === 'string',\n        'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n      );\n      invariant(\n        element._owner,\n        'Element ref was specified as a string (%s) but no owner was set. This could happen for one of' +\n          ' the following reasons:\\n' +\n          '1. You may be adding a ref to a function component\\n' +\n          \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n          '3. You have multiple copies of React loaded\\n' +\n          'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        mixedRef,\n      );\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  if (returnFiber.type !== 'textarea') {\n    invariant(\n      false,\n      'Objects are not valid as a React child (found: %s). ' +\n        'If you meant to render a collection of children, use an array ' +\n        'instead.',\n      Object.prototype.toString.call(newChild) === '[object Object]'\n        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n        : newChild,\n    );\n  }\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentName(returnFiber.type) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\n// We avoid inlining this to avoid potential deopts from using try/catch.\n/** @noinline */\nfunction resolveLazyType<T, P>(\n  lazyComponent: LazyComponent<T, P>,\n): LazyComponent<T, P> | T {\n  try {\n    // If we can, let's peek at the resulting type.\n    const payload = lazyComponent._payload;\n    const init = lazyComponent._init;\n    return init(payload);\n  } catch (x) {\n    // Leave it in place and let it throw again in the begin phase.\n    return lazyComponent;\n  }\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    // Deletions are added in reversed order so we add it to the front.\n    // At this point, the return fiber's effect list is empty except for\n    // deletions, so we can just append the deletion to the list. The remaining\n    // effects aren't added until the complete phase. Once we implement\n    // resuming, this may not be true.\n    const last = returnFiber.lastEffect;\n    if (last !== null) {\n      last.nextEffect = childToDelete;\n      returnFiber.lastEffect = childToDelete;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n    }\n    childToDelete.nextEffect = null;\n    childToDelete.flags = Deletion;\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags = Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags = Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags = Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    if (current !== null) {\n      if (\n        current.elementType === element.type ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__ ? isCompatibleFamilyForHotReloading(current, element) : false)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      } else if (enableBlocksAPI && current.tag === Block) {\n        // The new Block might not be initialized yet. We need to initialize\n        // it in case initializing it turns out it would match.\n        let type = element.type;\n        if (type.$$typeof === REACT_LAZY_TYPE) {\n          type = resolveLazyType(type);\n        }\n        if (\n          type.$$typeof === REACT_BLOCK_TYPE &&\n          ((type: any): BlockComponent<any, any>)._render ===\n            (current.type: BlockComponent<any, any>)._render\n        ) {\n          // Same as above but also update the .type field.\n          const existing = useFiber(current, element.props);\n          existing.return = returnFiber;\n          existing.type = type;\n          if (__DEV__) {\n            existing._debugSource = element._source;\n            existing._debugOwner = element._owner;\n          }\n          return existing;\n        }\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return createChild(returnFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            if (newChild.type === REACT_FRAGMENT_TYPE) {\n              return updateFragment(\n                returnFiber,\n                oldFiber,\n                newChild.props.children,\n                lanes,\n                key,\n              );\n            }\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          if (newChild.type === REACT_FRAGMENT_TYPE) {\n            return updateFragment(\n              returnFiber,\n              matchedFiber,\n              newChild.props.children,\n              lanes,\n              newChild.key,\n            );\n          }\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = child._payload;\n            const init = (child._init: any);\n            warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n            break;\n          }\n        // We intentionally fallthrough here if enableLazyElements is not on.\n        // eslint-disable-next-lined no-fallthrough\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n    invariant(\n      typeof iteratorFn === 'function',\n      'An object is not an iterable. This error is likely caused by a bug in ' +\n        'React. Please file an issue.',\n    );\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n    invariant(newChildren != null, 'An iterable object provided no iterator.');\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        switch (child.tag) {\n          case Fragment: {\n            if (element.type === REACT_FRAGMENT_TYPE) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              const existing = useFiber(child, element.props.children);\n              existing.return = returnFiber;\n              if (__DEV__) {\n                existing._debugSource = element._source;\n                existing._debugOwner = element._owner;\n              }\n              return existing;\n            }\n            break;\n          }\n          case Block:\n            if (enableBlocksAPI) {\n              let type = element.type;\n              if (type.$$typeof === REACT_LAZY_TYPE) {\n                type = resolveLazyType(type);\n              }\n              if (type.$$typeof === REACT_BLOCK_TYPE) {\n                // The new Block might not be initialized yet. We need to initialize\n                // it in case initializing it turns out it would match.\n                if (\n                  ((type: any): BlockComponent<any, any>)._render ===\n                  (child.type: BlockComponent<any, any>)._render\n                ) {\n                  deleteRemainingChildren(returnFiber, child.sibling);\n                  const existing = useFiber(child, element.props);\n                  existing.type = type;\n                  existing.return = returnFiber;\n                  if (__DEV__) {\n                    existing._debugSource = element._source;\n                    existing._debugOwner = element._owner;\n                  }\n                  return existing;\n                }\n              }\n            }\n          // We intentionally fallthrough here if enableBlocksAPI is not on.\n          // eslint-disable-next-lined no-fallthrough\n          default: {\n            if (\n              child.elementType === element.type ||\n              // Keep this check inline so it only runs on the false path:\n              (__DEV__\n                ? isCompatibleFamilyForHotReloading(child, element)\n                : false)\n            ) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              const existing = useFiber(child, element.props);\n              existing.ref = coerceRef(returnFiber, child, element);\n              existing.return = returnFiber;\n              if (__DEV__) {\n                existing._debugSource = element._source;\n                existing._debugOwner = element._owner;\n              }\n              return existing;\n            }\n            break;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    const isObject = typeof newChild === 'object' && newChild !== null;\n\n    if (isObject) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            // TODO: This function is supposed to be non-recursive.\n            return reconcileChildFibers(\n              returnFiber,\n              currentFirstChild,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n    }\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (isArray(newChild)) {\n      return reconcileChildrenArray(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes,\n      );\n    }\n\n    if (getIteratorFn(newChild)) {\n      return reconcileChildrenIterator(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes,\n      );\n    }\n\n    if (isObject) {\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {\n      // If the new child is undefined, and the return fiber is a composite\n      // component, throw an error. If Fiber return types are disabled,\n      // we already threw above.\n      switch (returnFiber.tag) {\n        case ClassComponent: {\n          if (__DEV__) {\n            const instance = returnFiber.stateNode;\n            if (instance.render._isMockFunction) {\n              // We allow auto-mocks to proceed as if they're returning null.\n              break;\n            }\n          }\n        }\n        // Intentionally fall through to the next case, which handles both\n        // functions and classes\n        // eslint-disable-next-lined no-fallthrough\n        case Block:\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          invariant(\n            false,\n            '%s(...): Nothing was returned from render. This usually means a ' +\n              'return statement is missing. Or, to render nothing, ' +\n              'return null.',\n            getComponentName(returnFiber.type) || 'Component',\n          );\n        }\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  invariant(\n    current === null || workInProgress.child === current.child,\n    'Resuming work not yet implemented.',\n  );\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  invariant(\n    c !== NO_CONTEXT,\n    'Expected host context to exist. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\n// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// Subtree Flags:\n\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\n\n// Shallow Flags:\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function addSubtreeSuspenseContext(\n  parentContext: SuspenseContext,\n  subtreeContext: SubtreeSuspenseContext,\n): SuspenseContext {\n  return parentContext | subtreeContext;\n}\n\nexport function pushSuspenseContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane';\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n  // Last Effect before we rendered the \"rendering\" item.\n  // Used to remove new effects added by the rendered item.\n  lastEffect: null | Fiber,\n|};\n\nexport function shouldCaptureSuspense(\n  workInProgress: Fiber,\n  hasInvisibleParent: boolean,\n): boolean {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  const nextState: SuspenseState | null = workInProgress.memoizedState;\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n    return false;\n  }\n  const props = workInProgress.memoizedProps;\n  // In order to capture, the Suspense component must have a fallback prop.\n  if (props.fallback === undefined) {\n    return false;\n  }\n  // Regular boundaries always capture.\n  if (props.unstable_avoidThisFallback !== true) {\n    return true;\n  }\n  // If it's a boundary we should avoid, then we prefer to bubble up to the\n  // parent boundary if it is currently invisible.\n  if (hasInvisibleParent) {\n    return false;\n  }\n  // If the parent is not able to handle it, we must handle it.\n  return true;\n}\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*  */ 0b000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Layout = /*    */ 0b010;\nexport const Passive = /*   */ 0b100;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {Deletion, Placement, Hydrating} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateContainerInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableContainerInstance,\n  didNotFindHydratableContainerTextInstance,\n  didNotFindHydratableContainerSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\nimport {OffscreenLane} from './ReactFiberLane';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChild(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);\n  popToNextHostParent(fiber);\n  isHydrating = true;\n  return true;\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        didNotHydrateContainerInstance(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      case HostComponent:\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n        );\n        break;\n    }\n  }\n\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n  childToDelete.flags = Deletion;\n\n  // This might seem like it belongs on progressedFirstDeletion. However,\n  // these children are not part of the reconciliation list of children.\n  // Even if we abort and rereconcile the children, that will try to hydrate\n  // again and the nodes are still in the host tree so these will be\n  // recreated.\n  if (returnFiber.lastEffect !== null) {\n    returnFiber.lastEffect.nextEffect = childToDelete;\n    returnFiber.lastEffect = childToDelete;\n  } else {\n    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableContainerInstance(parentContainer, type, props);\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableContainerTextInstance(parentContainer, text);\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableContainerSuspenseInstance(parentContainer);\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n        }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      if (enableSuspenseServerRenderer) {\n        const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n          nextInstance,\n        );\n        if (suspenseInstance !== null) {\n          const suspenseState: SuspenseState = {\n            dehydrated: suspenseInstance,\n            retryLane: OffscreenLane,\n          };\n          fiber.memoizedState = suspenseState;\n          // Store the dehydrated fragment as a child fiber.\n          // This simplifies the code for getHostSibling and deleting nodes,\n          // since it doesn't have to consider all Suspense boundaries and\n          // check if they're dehydrated ones or not.\n          const dehydratedFragment = createFiberFromDehydratedFragment(\n            suspenseInstance,\n          );\n          dehydratedFragment.return = fiber;\n          fiber.child = dehydratedFragment;\n          return true;\n        }\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(\n      (hydrationParentFiber: any),\n      firstAttemptedInstance,\n    );\n  }\n  hydrationParentFiber = fiber;\n  nextHydratableInstance = getFirstHydratableChild((nextInstance: any));\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n  if (__DEV__) {\n    if (shouldUpdate) {\n      // We assume that prepareToHydrateHostTextInstance is called in a context where the\n      // hydration parent is the parent host component of this host text.\n      const returnFiber = hydrationParentFiber;\n      if (returnFiber !== null) {\n        switch (returnFiber.tag) {\n          case HostRoot: {\n            const parentContainer = returnFiber.stateNode.containerInfo;\n            didNotMatchHydratedContainerTextInstance(\n              parentContainer,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n          case HostComponent: {\n            const parentType = returnFiber.type;\n            const parentProps = returnFiber.memoizedProps;\n            const parentInstance = returnFiber.stateNode;\n            didNotMatchHydratedTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  const type = fiber.type;\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them.\n  // TODO: Better heuristic.\n  if (\n    fiber.tag !== HostComponent ||\n    (type !== 'head' &&\n      type !== 'body' &&\n      !shouldSetTextContent(type, fiber.memoizedProps))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    while (nextInstance) {\n      deleteHydratableInstance(fiber, nextInstance);\n      nextInstance = getNextHydratableSibling(nextInstance);\n    }\n  }\n\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {OpaqueIDType} from './ReactFiberHostConfig';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\n\nimport {NoMode, BlockingMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  NoLanes,\n  InputContinuousLanePriority,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  markRootEntangled,\n  markRootMutableRead,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n  higherLanePriority,\n  DefaultLanePriority,\n} from './ReactFiberLane';\nimport {readContext} from './ReactFiberNewContext.old';\nimport {\n  Update as UpdateEffect,\n  Passive as PassiveEffect,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  warnIfNotCurrentlyActingEffectsInDEV,\n  warnIfNotCurrentlyActingUpdatesInDev,\n  warnIfNotScopedWithMatchingAct,\n  markSkippedUpdateLanes,\n} from './ReactFiberWorkLoop.old';\n\nimport invariant from 'shared/invariant';\nimport getComponentName from 'shared/getComponentName';\nimport is from 'shared/objectIs';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  UserBlockingPriority,\n  NormalPriority,\n  runWithPriority,\n  getCurrentPriorityLevel,\n} from './SchedulerWithReactIntegration.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  makeClientId,\n  makeClientIdInDEV,\n  makeOpaqueHydratingObject,\n} from './ReactFiberHostConfig';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {getIsRendering} from './ReactCurrentFiber';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './SchedulingProfiler';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\ntype Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  eagerReducer: ((S, A) => S) | null,\n  eagerState: S | null,\n  next: Update<S, A>,\n  priority?: ReactPriorityLevel,\n|};\n\ntype UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nexport type HookType =\n  | 'useState'\n  | 'useReducer'\n  | 'useContext'\n  | 'useRef'\n  | 'useEffect'\n  | 'useLayoutEffect'\n  | 'useCallback'\n  | 'useMemo'\n  | 'useImperativeHandle'\n  | 'useDebugValue'\n  | 'useDeferredValue'\n  | 'useTransition'\n  | 'useMutableSource'\n  | 'useOpaqueIdentifier';\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnAboutUseOpaqueIdentifier;\nif (__DEV__) {\n  didWarnAboutUseOpaqueIdentifier = {};\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: UpdateQueue<any, any> | null,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\nexport type FunctionComponentUpdateQueue = {|lastEffect: Effect | null|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentName(currentlyRenderingFiber.type);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  invariant(\n    false,\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      invariant(\n        numberOfReRenders < RE_RENDER_LIMIT,\n        'Too many re-renders. React limits the number of renders to prevent ' +\n          'an infinite loop.',\n      );\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrancy.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n\n  invariant(\n    !didRenderTooFewHooks,\n    'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n      'early return statement.',\n  );\n\n  return children;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrancy.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    invariant(\n      nextCurrentHook !== null,\n      'Rendered more hooks than during the previous render.',\n    );\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue = (hook.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  });\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          eagerReducer: update.eagerReducer,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            eagerReducer: update.eagerReducer,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.eagerReducer === reducer) {\n          // If this update was processed eagerly, and its reducer matches the\n          // current reducer, we can use the eagerly computed state.\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubcribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    invariant(\n      false,\n      'Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  invariant(\n    root !== null,\n    'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n  );\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubcribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue = {\n      pending: null,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchAction.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue = (hook.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  });\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  const ref = {current: initialValue};\n  if (__DEV__) {\n    Object.seal(ref);\n  }\n  hook.memoizedState = ref;\n  return ref;\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  return mountEffectImpl(\n    UpdateEffect | PassiveEffect,\n    HookPassive,\n    create,\n    deps,\n  );\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  return updateEffectImpl(\n    UpdateEffect | PassiveEffect,\n    HookPassive,\n    create,\n    deps,\n  );\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return mountEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return mountEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = mountState(value);\n  mountEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = updateState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = rerenderState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction startTransition(setPending, callback) {\n  const priorityLevel = getCurrentPriorityLevel();\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    setCurrentUpdateLanePriority(\n      higherLanePriority(previousLanePriority, InputContinuousLanePriority),\n    );\n\n    runWithPriority(\n      priorityLevel < UserBlockingPriority\n        ? UserBlockingPriority\n        : priorityLevel,\n      () => {\n        setPending(true);\n      },\n    );\n\n    // TODO: Can remove this. Was only necessary because we used to give\n    // different behavior to transitions without a config object. Now they are\n    // all treated the same.\n    setCurrentUpdateLanePriority(DefaultLanePriority);\n\n    runWithPriority(\n      priorityLevel > NormalPriority ? NormalPriority : priorityLevel,\n      () => {\n        const prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = 1;\n        try {\n          setPending(false);\n          callback();\n        } finally {\n          if (decoupleUpdatePriorityFromScheduler) {\n            setCurrentUpdateLanePriority(previousLanePriority);\n          }\n          ReactCurrentBatchConfig.transition = prevTransition;\n        }\n      },\n    );\n  } else {\n    runWithPriority(\n      priorityLevel < UserBlockingPriority\n        ? UserBlockingPriority\n        : priorityLevel,\n      () => {\n        setPending(true);\n      },\n    );\n\n    runWithPriority(\n      priorityLevel > NormalPriority ? NormalPriority : priorityLevel,\n      () => {\n        const prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = 1;\n        try {\n          setPending(false);\n          callback();\n        } finally {\n          ReactCurrentBatchConfig.transition = prevTransition;\n        }\n      },\n    );\n  }\n}\n\nfunction mountTransition(): [(() => void) => void, boolean] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method can be stored on a ref, since `setPending`\n  // never changes.\n  const start = startTransition.bind(null, setPending);\n  mountRef(start);\n  return [start, isPending];\n}\n\nfunction updateTransition(): [(() => void) => void, boolean] {\n  const [isPending] = updateState(false);\n  const startRef = updateRef();\n  const start: (() => void) => void = (startRef.current: any);\n  return [start, isPending];\n}\n\nfunction rerenderTransition(): [(() => void) => void, boolean] {\n  const [isPending] = rerenderState(false);\n  const startRef = updateRef();\n  const start: (() => void) => void = (startRef.current: any);\n  return [start, isPending];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction warnOnOpaqueIdentifierAccessInDEV(fiber) {\n  if (__DEV__) {\n    // TODO: Should warn in effects and callbacks, too\n    const name = getComponentName(fiber.type) || 'Unknown';\n    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {\n      console.error(\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the ' +\n          'value directly.',\n      );\n      didWarnAboutUseOpaqueIdentifier[name] = true;\n    }\n  }\n}\n\nfunction mountOpaqueIdentifier(): OpaqueIDType | void {\n  const makeId = __DEV__\n    ? makeClientIdInDEV.bind(\n        null,\n        warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber),\n      )\n    : makeClientId;\n\n  if (getIsHydrating()) {\n    let didUpgrade = false;\n    const fiber = currentlyRenderingFiber;\n    const readValue = () => {\n      if (!didUpgrade) {\n        // Only upgrade once. This works even inside the render phase because\n        // the update is added to a shared queue, which outlasts the\n        // in-progress render.\n        didUpgrade = true;\n        if (__DEV__) {\n          isUpdatingOpaqueValueInRenderPhase = true;\n          setId(makeId());\n          isUpdatingOpaqueValueInRenderPhase = false;\n          warnOnOpaqueIdentifierAccessInDEV(fiber);\n        } else {\n          setId(makeId());\n        }\n      }\n      invariant(\n        false,\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the value directly.',\n      );\n    };\n    const id = makeOpaqueHydratingObject(readValue);\n\n    const setId = mountState(id)[1];\n\n    if ((currentlyRenderingFiber.mode & BlockingMode) === NoMode) {\n      currentlyRenderingFiber.flags |= UpdateEffect | PassiveEffect;\n      pushEffect(\n        HookHasEffect | HookPassive,\n        () => {\n          setId(makeId());\n        },\n        undefined,\n        null,\n      );\n    }\n    return id;\n  } else {\n    const id = makeId();\n    mountState(id);\n    return id;\n  }\n}\n\nfunction updateOpaqueIdentifier(): OpaqueIDType | void {\n  const id = updateState(undefined)[0];\n  return id;\n}\n\nfunction rerenderOpaqueIdentifier(): OpaqueIDType | void {\n  const id = rerenderState(undefined)[0];\n  return id;\n}\n\nfunction dispatchAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    eagerReducer: null,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  // Append the update to the end of the list.\n  const pending = queue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  queue.pending = update;\n\n  const alternate = fiber.alternate;\n  if (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  ) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  } else {\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.eagerReducer = lastRenderedReducer;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n    if (__DEV__) {\n      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n      if ('undefined' !== typeof jest) {\n        warnIfNotScopedWithMatchingAct(fiber);\n        warnIfNotCurrentlyActingUpdatesInDev(fiber);\n      }\n    }\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentName(fiber.type) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useOpaqueIdentifier: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useOpaqueIdentifier: mountOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useOpaqueIdentifier: updateOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useOpaqueIdentifier: rerenderOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n} from 'shared/ReactFeatureFlags';\nimport {Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor.\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      if (parentFiber.tag === Profiler) {\n        const parentStateNode = parentFiber.stateNode;\n        parentStateNode.effectDuration += elapsedTime;\n        break;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor.\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      if (parentFiber.tag === Profiler) {\n        const parentStateNode = parentFiber.stateNode;\n        if (parentStateNode !== null) {\n          // Detached fibers have their state node cleared out.\n          // In this case, the return pointer is also cleared out,\n          // so we won't be able to report the time spent in this Profiler's subtree.\n          parentStateNode.passiveEffectDuration += elapsedTime;\n        }\n        break;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactProviderType, ReactContext} from 'shared/ReactTypes';\nimport type {BlockComponent} from 'react/src/ReactBlock';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n} from './ReactFiberOffscreenComponent';\n\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  Deletion,\n  ForceUpdateForLegacySuspense,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerTimer,\n  enableSchedulerTracing,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableBlocksAPI,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentName from 'shared/getComponentName';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n} from './ReactUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n} from './ReactFiberLane';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictMode,\n  BlockingMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {shouldSuspend} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseContext,\n  InvisibleParentSuspenseContext,\n  ForceSuspenseFallback,\n  hasSuspenseContext,\n  setDefaultShallowSuspenseContext,\n  addSubtreeSuspenseContext,\n  setShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  readContext,\n  prepareToReadContext,\n  calculateChangedBits,\n  scheduleWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {renderWithHooks, bailoutHooks} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  applyDerivedStateFromProps,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  markSpawnedWork,\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n  pushRenderLanes,\n  getExecutionContext,\n  RetryAfterError,\n  NoContext,\n} from './ReactFiberWorkLoop.old';\nimport {unstable_wrap as Schedule_tracing_wrap} from 'scheduler/tracing';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  updateLanes: Lanes,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentName(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  if (!includesSomeLane(updateLanes, renderLanes)) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  updateLanes: Lanes,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentName(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n      if (!includesSomeLane(renderLanes, updateLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumlated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    nextProps.mode === 'unstable-defer-without-hiding'\n  ) {\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Figure out what we should do in Blocking mode.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      let nextBaseLanes;\n      if (prevState !== null) {\n        const prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n      } else {\n        nextBaseLanes = renderLanes;\n      }\n\n      // Schedule this fiber to re-render at offscreen priority. Then bailout.\n      if (enableSchedulerTracing) {\n        markSpawnedWork((OffscreenLane: Lane));\n      }\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n      const nextState: OffscreenState = {\n        baseLanes: nextBaseLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      pushRenderLanes(workInProgress, nextBaseLanes);\n      return null;\n    } else {\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      // Push the lanes that were skipped when we bailed out.\n      const subtreeRenderLanes =\n        prevState !== null ? prevState.baseLanes : renderLanes;\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    let subtreeRenderLanes;\n    if (prevState !== null) {\n      subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      subtreeRenderLanes = renderLanes;\n    }\n    pushRenderLanes(workInProgress, subtreeRenderLanes);\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    // Reset effect durations for the next eventual effect phase.\n    // These are reset during render to allow the DevTools commit hook a chance to read them,\n    const stateNode = workInProgress.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateBlock<Props, Data>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  block: BlockComponent<Props, Data>,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  const render = block._render;\n  const data = block._data;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      data,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          data,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      data,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    if (current !== null) {\n      // A class component without an instance only mounts if it suspended\n      // inside a non-concurrent tree, in an inconsistent state. We want to\n      // treat it like a new mount, even though an empty version of it already\n      // committed. Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentName(workInProgress.type) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          instance.render();\n        } finally {\n          reenableLogs();\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n  const updateQueue = workInProgress.updateQueue;\n  invariant(\n    current !== null && updateQueue !== null,\n    'If the root does not have an updateQueue, we should have already ' +\n      'bailed out. This error is likely caused by a bug in React. Please ' +\n      'file an issue.',\n  );\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState !== null ? prevState.element : null;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  const nextState = workInProgress.memoizedState;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (nextChildren === prevChildren) {\n    resetHydrationState();\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n  const root: FiberRoot = workInProgress.stateNode;\n  if (root.hydrate && enterHydrationState(workInProgress)) {\n    // If we don't have any current children this might be the first pass.\n    // We always try to hydrate. If this isn't a hydration pass there won't\n    // be any children to hydrate which is effectively the same thing as\n    // not hydrating.\n\n    if (supportsHydration) {\n      const mutableSourceEagerHydrationData =\n        root.mutableSourceEagerHydrationData;\n      if (mutableSourceEagerHydrationData != null) {\n        for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n          const mutableSource = ((mutableSourceEagerHydrationData[\n            i\n          ]: any): MutableSource<any>);\n          const version = mutableSourceEagerHydrationData[i + 1];\n          setWorkInProgressVersion(mutableSource, version);\n        }\n      }\n    }\n\n    const child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n    workInProgress.child = child;\n\n    let node = child;\n    while (node) {\n      // Mark each child as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      node.flags = (node.flags & ~Placement) | Hydrating;\n      node = node.sibling;\n    }\n  } else {\n    // Otherwise reset hydration state in case we aborted and resumed another\n    // root.\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    resetHydrationState();\n  }\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  updateLanes,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // A lazy component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentName(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        updateLanes,\n        renderLanes,\n      );\n      return child;\n    }\n    case Block: {\n      if (enableBlocksAPI) {\n        // TODO: Resolve for Hot Reloading.\n        child = updateBlock(\n          null,\n          workInProgress,\n          Component,\n          props,\n          renderLanes,\n        );\n        return child;\n      }\n      break;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  invariant(\n    false,\n    'Element type is invalid. Received a promise that resolves to: %s. ' +\n      'Lazy element type must resolve to a class or function.%s',\n    Component,\n    hint,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An incomplete component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An indeterminate component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentName(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    const getDerivedStateFromProps = Component.getDerivedStateFromProps;\n    if (typeof getDerivedStateFromProps === 'function') {\n      applyDerivedStateFromProps(\n        workInProgress,\n        Component,\n        getDerivedStateFromProps,\n        props,\n      );\n    }\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentName(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n        } finally {\n          reenableLogs();\n        }\n      }\n    }\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || workInProgress._debugID || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  suspenseContext: SuspenseContext,\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallack\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  return hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(\n      suspenseContext,\n      current,\n      workInProgress,\n      renderLanes,\n    )\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (\n      current === null ||\n      (current.memoizedState: null | SuspenseState) !== null\n    ) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Boundaries without fallbacks or should be avoided are not considered since\n      // they cannot handle preferred fallback states.\n      if (\n        nextProps.fallback !== undefined &&\n        nextProps.unstable_avoidThisFallback !== true\n      ) {\n        suspenseContext = addSubtreeSuspenseContext(\n          suspenseContext,\n          InvisibleParentSuspenseContext,\n        );\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconcilation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n    // If we're currently hydrating, try to hydrate this boundary.\n    // But only if this has a fallback.\n    if (nextProps.fallback !== undefined) {\n      tryToClaimNextHydratableInstance(workInProgress);\n      // This could've been a dehydrated suspense component.\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null) {\n          const dehydrated = suspenseState.dehydrated;\n          if (dehydrated !== null) {\n            return mountDehydratedSuspenseComponent(\n              workInProgress,\n              dehydrated,\n              renderLanes,\n            );\n          }\n        }\n      }\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n    if (showFallback) {\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackFragment;\n    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      if (enableSchedulerTracing) {\n        markSpawnedWork(SomeRetryLane);\n      }\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // If the current fiber has a SuspenseState, that means it's already showing\n    // a fallback.\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      // The current tree is already showing a fallback\n\n      // Special path for hydration\n      if (enableSuspenseServerRenderer) {\n        const dehydrated = prevState.dehydrated;\n        if (dehydrated !== null) {\n          if (!didSuspend) {\n            return updateDehydratedSuspenseComponent(\n              current,\n              workInProgress,\n              dehydrated,\n              prevState,\n              renderLanes,\n            );\n          } else if (\n            (workInProgress.memoizedState: null | SuspenseState) !== null\n          ) {\n            // Something suspended and we should still be in dehydrated mode.\n            // Leave the existing child in place.\n            workInProgress.child = current.child;\n            // The dehydrated completion pass expects this flag to be there\n            // but the normal suspense pass doesn't.\n            workInProgress.flags |= DidCapture;\n            return null;\n          } else {\n            // Suspended but we should no longer be in dehydrated mode.\n            // Therefore we now have to render the fallback.\n            const nextPrimaryChildren = nextProps.children;\n            const nextFallbackChildren = nextProps.fallback;\n            const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n              current,\n              workInProgress,\n              nextPrimaryChildren,\n              nextFallbackChildren,\n              renderLanes,\n            );\n            const primaryChildFragment: Fiber = (workInProgress.child: any);\n            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n              renderLanes,\n            );\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return fallbackChildFragment;\n          }\n        }\n      }\n\n      if (showFallback) {\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    } else {\n      // The current tree is not already showing a fallback.\n      if (showFallback) {\n        // Timed out.\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        // Skip the primary children, and continue working on the\n        // fallback children.\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        // Still haven't timed out. Continue rendering the children, like we\n        // normally do.\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = createFiberFromOffscreen(\n    primaryChildProps,\n    mode,\n    renderLanes,\n    null,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = createFiberFromOffscreen(\n      primaryChildProps,\n      mode,\n      NoLanes,\n      null,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction createWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = createWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    currentFallbackChildFragment.nextEffect = null;\n    currentFallbackChildFragment.flags = Deletion;\n    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & BlockingMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    // The fallback fiber was added as a deletion effect during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it. So we need to remove it from the list. Deletions are stored\n    // on the same list as effects. We want to keep the effects from the primary\n    // tree. So we copy the primary child fragment's effect list, which does not\n    // include the fallback deletion effect.\n    const progressedLastEffect = primaryChildFragment.lastEffect;\n    if (progressedLastEffect !== null) {\n      workInProgress.firstEffect = primaryChildFragment.firstEffect;\n      workInProgress.lastEffect = progressedLastEffect;\n      progressedLastEffect.nextEffect = null;\n    } else {\n      // TODO: Reset this somewhere else? Lol legacy mode is so weird.\n      workInProgress.firstEffect = workInProgress.lastEffect = null;\n    }\n  } else {\n    primaryChildFragment = createWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildFragment = createFiberFromOffscreen(\n    primaryChildren,\n    mode,\n    NoLanes,\n    null,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    mode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & BlockingMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOM.createBlockingRoot(container, { hydrate: true })' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    if (enableSchedulerTracing) {\n      markSpawnedWork(DefaultHydrationLane);\n    }\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n    if (enableSchedulerTracing) {\n      markSpawnedWork(OffscreenLane);\n    }\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  // We should never be hydrating at this point because it is the first pass,\n  // but after we've already committed once.\n  warnIfHydrating();\n\n  if ((getExecutionContext() & RetryAfterError) !== NoContext) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This boundary is in a permanent fallback state. In this case, we'll never\n    // get an update and we'll never be able to hydrate the final content. Let's just try the\n    // client side render instead.\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n  // We use lanes to indicate that a child might depend on context, so if\n  // any context has changed, we need to treat is as if the input might have changed.\n  const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n  if (didReceiveUpdate || hasContextChanged) {\n    // This boundary has changed since the first render. This means that we are now unable to\n    // hydrate it. We might still be able to hydrate it using a higher priority lane.\n    const root = getWorkInProgressRoot();\n    if (root !== null) {\n      const attemptHydrationAtLane = getBumpedLaneForHydration(\n        root,\n        renderLanes,\n      );\n      if (\n        attemptHydrationAtLane !== NoLane &&\n        attemptHydrationAtLane !== suspenseState.retryLane\n      ) {\n        // Intentionally mutating since this render will get interrupted. This\n        // is one of the very rare times where we mutate the current tree\n        // during the render phase.\n        suspenseState.retryLane = attemptHydrationAtLane;\n        // TODO: Ideally this would inherit the event time of the current render\n        const eventTime = NoTimestamp;\n        scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);\n      } else {\n        // We have already tried to ping at a higher priority than we're rendering with\n        // so if we got here, we must have failed to hydrate at those levels. We must\n        // now give up. Instead, we're going to delete the whole subtree and instead inject\n        // a new real Suspense boundary to take its place, which may render content\n        // or fallback. This might suspend for a while and if it does we might still have\n        // an opportunity to hydrate before this pass commits.\n      }\n    }\n\n    // If we have scheduled higher pri work above, this will probably just abort the render\n    // since we now have higher priority work, but in case it doesn't, we need to prepare to\n    // render something, if we time out. Even if that requires us to delete everything and\n    // skip hydration.\n    // Delay having to do this as long as the suspense timeout allows us.\n    renderDidSuspendDelayIfPossible();\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  } else if (isSuspenseInstancePending(suspenseInstance)) {\n    // This component is still pending more data from the server, so we can't hydrate its\n    // content. We treat it as if this component suspended itself. It might seem as if\n    // we could just try to render it client-side instead. However, this will perform a\n    // lot of unnecessary work and is unlikely to complete since it often will suspend\n    // on missing data anyway. Additionally, the server might be able to render more\n    // than we can on the client yet. In that case we'd end up with more fallback states\n    // on the client than if we just leave it alone. If the server times out or errors\n    // these should update this boundary to the permanent Fallback state instead.\n    // Mark it as having captured (i.e. suspended).\n    workInProgress.flags |= DidCapture;\n    // Leave the child in place. I.e. the dehydrated fragment.\n    workInProgress.child = current.child;\n    // Register a callback to retry this boundary once the server has sent the result.\n    let retry = retryDehydratedSuspenseBoundary.bind(null, current);\n    if (enableSchedulerTracing) {\n      retry = Schedule_tracing_wrap(retry);\n    }\n    registerSuspenseInstanceRetry(suspenseInstance, retry);\n    return null;\n  } else {\n    // This is the first attempt.\n    reenterHydrationStateFromDehydratedSuspenseInstance(\n      workInProgress,\n      suspenseInstance,\n    );\n    const nextProps = workInProgress.pendingProps;\n    const primaryChildren = nextProps.children;\n    const primaryChildFragment = mountSuspensePrimaryChildren(\n      workInProgress,\n      primaryChildren,\n      renderLanes,\n    );\n    // Mark the children as hydrating. This is a fast path to know whether this\n    // tree is part of a hydrating tree. This is used to determine if a child\n    // node has fully mounted yet, and for scheduling event replaying.\n    // Conceptually this is similar to Placement in that a new subtree is\n    // inserted into the React tree here. It just happens to not need DOM\n    // mutations because it already exists.\n    primaryChildFragment.flags |= Hydrating;\n    return primaryChildFragment;\n  }\n}\n\nfunction scheduleWorkOnFiber(fiber: Fiber, renderLanes: Lanes) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleWorkOnParentPath(fiber.return, renderLanes);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleWorkOnFiber(node, renderLanes);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleWorkOnFiber(node, renderLanes);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isArray = Array.isArray(childSlot);\n    const isIterable =\n      !isArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isArray || isIterable) {\n      const type = isArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (Array.isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n  lastEffectBeforeRendering: null | Fiber,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n      lastEffect: lastEffectBeforeRendering,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n    renderState.lastEffect = lastEffectBeforeRendering;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, newValue);\n\n  if (oldProps !== null) {\n    const oldValue = oldProps.value;\n    const changedBits = calculateChangedBits(context, newValue, oldValue);\n    if (changedBits === 0) {\n      // No change. Bailout early if children are the same.\n      if (\n        oldProps.children === newProps.children &&\n        !hasLegacyContextChanged()\n      ) {\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n    } else {\n      // The context value changed. Search for matching consumers and schedule\n      // them to update.\n      propagateContextChange(workInProgress, context, changedBits, renderLanes);\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context, newProps.unstable_observedBits);\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFundamentalComponent(current, workInProgress, renderLanes) {\n  const fundamentalImpl = workInProgress.type.impl;\n  if (fundamentalImpl.reconcileChildren === false) {\n    return null;\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n    return null;\n  } else {\n    // This fiber doesn't have work, but its subtree does. Clone the child\n    // fibers and continue.\n    cloneChildFibers(current, workInProgress);\n    return workInProgress.child;\n  }\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const last = returnFiber.lastEffect;\n    if (last !== null) {\n      last.nextEffect = current;\n      returnFiber.lastEffect = current;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = current;\n    }\n    current.nextEffect = null;\n    current.flags = Deletion;\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const updateLanes = workInProgress.lanes;\n\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else if (!includesSomeLane(renderLanes, updateLanes)) {\n      didReceiveUpdate = false;\n      // This fiber does not have any pending work. Bailout without entering\n      // the begin phase. There's still some bookkeeping we that needs to be done\n      // in this optimized path, mostly pushing stuff onto the stack.\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          resetHydrationState();\n          break;\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n        case ClassComponent: {\n          const Component = workInProgress.type;\n          if (isLegacyContextProvider(Component)) {\n            pushLegacyContextProvider(workInProgress);\n          }\n          break;\n        }\n        case HostPortal:\n          pushHostContainer(\n            workInProgress,\n            workInProgress.stateNode.containerInfo,\n          );\n          break;\n        case ContextProvider: {\n          const newValue = workInProgress.memoizedProps.value;\n          pushProvider(workInProgress, newValue);\n          break;\n        }\n        case Profiler:\n          if (enableProfilerTimer) {\n            // Profiler should only call onRender when one of its descendants actually rendered.\n            const hasChildWork = includesSomeLane(\n              renderLanes,\n              workInProgress.childLanes,\n            );\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            }\n\n            // Reset effect durations for the next eventual effect phase.\n            // These are reset during render to allow the DevTools commit hook a chance to read them,\n            const stateNode = workInProgress.stateNode;\n            stateNode.effectDuration = 0;\n            stateNode.passiveEffectDuration = 0;\n          }\n          break;\n        case SuspenseComponent: {\n          const state: SuspenseState | null = workInProgress.memoizedState;\n          if (state !== null) {\n            if (enableSuspenseServerRenderer) {\n              if (state.dehydrated !== null) {\n                pushSuspenseContext(\n                  workInProgress,\n                  setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n                );\n                // We know that this component will suspend again because if it has\n                // been unsuspended it has committed as a resolved Suspense component.\n                // If it needs to be retried, it should have work scheduled on it.\n                workInProgress.flags |= DidCapture;\n                // We should never render the children of a dehydrated boundary until we\n                // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n                return null;\n              }\n            }\n\n            // If this boundary is currently timed out, we need to decide\n            // whether to retry the primary children, or to skip over it and\n            // go straight to the fallback. Check the priority of the primary\n            // child fragment.\n            const primaryChildFragment: Fiber = (workInProgress.child: any);\n            const primaryChildLanes = primaryChildFragment.childLanes;\n            if (includesSomeLane(renderLanes, primaryChildLanes)) {\n              // The primary children have pending work. Use the normal path\n              // to attempt to render the primary children again.\n              return updateSuspenseComponent(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n            } else {\n              // The primary child fragment does not have pending work marked\n              // on it\n              pushSuspenseContext(\n                workInProgress,\n                setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n              );\n              // The primary children do not have pending work with sufficient\n              // priority. Bailout.\n              const child = bailoutOnAlreadyFinishedWork(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n              if (child !== null) {\n                // The fallback children have pending work. Skip over the\n                // primary children and work on the fallback.\n                return child.sibling;\n              } else {\n                return null;\n              }\n            }\n          } else {\n            pushSuspenseContext(\n              workInProgress,\n              setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n            );\n          }\n          break;\n        }\n        case SuspenseListComponent: {\n          const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n          const hasChildWork = includesSomeLane(\n            renderLanes,\n            workInProgress.childLanes,\n          );\n\n          if (didSuspendBefore) {\n            if (hasChildWork) {\n              // If something was in fallback state last time, and we have all the\n              // same children then we're still in progressive loading state.\n              // Something might get unblocked by state updates or retries in the\n              // tree which will affect the tail. So we need to use the normal\n              // path to compute the correct tail.\n              return updateSuspenseListComponent(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n            }\n            // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n            workInProgress.flags |= DidCapture;\n          }\n\n          // If nothing suspended before and we're rendering the same children,\n          // then the tail doesn't matter. Anything new that suspends will work\n          // in the \"together\" mode, so we can continue from the state we had.\n          const renderState = workInProgress.memoizedState;\n          if (renderState !== null) {\n            // Reset to the \"together\" mode in case we've started a different\n            // update in the past but didn't complete it.\n            renderState.rendering = null;\n            renderState.tail = null;\n            renderState.lastEffect = null;\n          }\n          pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n          if (hasChildWork) {\n            break;\n          } else {\n            // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n            return null;\n          }\n        }\n        case OffscreenComponent:\n        case LegacyHiddenComponent: {\n          // Need to check if the tree still needs to be deferred. This is\n          // almost identical to the logic used in the normal update path,\n          // so we'll just enter that. The only difference is we'll bail out\n          // at the next level instead of this one, because the child props\n          // have not changed. Which is fine.\n          // TODO: Probably should refactor `beginWork` to split the bailout\n          // path from the normal path. I'm tempted to do a labeled break here\n          // but I won't :)\n          workInProgress.lanes = NoLanes;\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\n        }\n      }\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    } else {\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentName(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        return updateFundamentalComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case Block: {\n      if (enableBlocksAPI) {\n        const block = workInProgress.type;\n        const props = workInProgress.pendingProps;\n        return updateBlock(current, workInProgress, block, props, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      return updateLegacyHiddenComponent(current, workInProgress, renderLanes);\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {\n  ReactFundamentalComponentInstance,\n  ReactScopeInstance,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './SchedulerWithReactIntegration.old';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {NoMode, BlockingMode, ProfileMode} from './ReactTypeOfMode';\nimport {Ref, Update, NoFlags, DidCapture, Snapshot} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  getFundamentalComponentInstance,\n  mountFundamentalComponent,\n  cloneFundamentalInstance,\n  shouldUpdateFundamentalComponent,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n  popSuspenseContext,\n  pushSuspenseContext,\n  setShallowSuspenseContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSchedulerTracing,\n  enableSuspenseCallback,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  enableScopeAPI,\n  enableBlocksAPI,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {\n  markSpawnedWork,\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  popRenderLanes,\n  getRenderTargetTime,\n} from './ReactFiberWorkLoop.old';\nimport {createFundamentalStateInstance} from './ReactFiberFundamental.old';\nimport {OffscreenLane, SomeRetryLane} from './ReactFiberLane';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        appendInitialChild(parent, node.stateNode.instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        let instance = node.stateNode.instance;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.tag === SuspenseComponent) {\n        if ((node.flags & Update) !== NoFlags) {\n          // Need to toggle the visibility of the primary children.\n          const newIsHidden = node.memoizedState !== null;\n          if (newIsHidden) {\n            const primaryChildParent = node.child;\n            if (primaryChildParent !== null) {\n              if (primaryChildParent.child !== null) {\n                primaryChildParent.child.return = primaryChildParent;\n                appendAllChildren(\n                  parent,\n                  primaryChildParent,\n                  true,\n                  newIsHidden,\n                );\n              }\n              const fallbackChildParent = primaryChildParent.sibling;\n              if (fallbackChildParent !== null) {\n                fallbackChildParent.return = node;\n                node = fallbackChildParent;\n                continue;\n              }\n            }\n          }\n        }\n        if (node.child !== null) {\n          // Continue traversing like normal\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        let instance = node.stateNode.instance;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.tag === SuspenseComponent) {\n        if ((node.flags & Update) !== NoFlags) {\n          // Need to toggle the visibility of the primary children.\n          const newIsHidden = node.memoizedState !== null;\n          if (newIsHidden) {\n            const primaryChildParent = node.child;\n            if (primaryChildParent !== null) {\n              if (primaryChildParent.child !== null) {\n                primaryChildParent.child.return = primaryChildParent;\n                appendAllChildrenToContainer(\n                  containerChildSet,\n                  primaryChildParent,\n                  true,\n                  newIsHidden,\n                );\n              }\n              const fallbackChildParent = primaryChildParent.sibling;\n              if (fallbackChildParent !== null) {\n                fallbackChildParent.return = node;\n                node = fallbackChildParent;\n                continue;\n              }\n            }\n          }\n        }\n        if (node.child !== null) {\n          // Continue traversing like normal\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = workInProgress.firstEffect === null;\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = workInProgress.firstEffect === null;\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      return null;\n    }\n    case HostRoot: {\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else if (!fiberRoot.hydrate) {\n          // Schedule an effect to clear this container at the start of the next commit.\n          // This handles the case of React rendering into a container with previous children.\n          // It's also safe to do for updates too, because current.child would only be null\n          // if the previous render was null (so the the container would already be empty).\n          workInProgress.flags |= Snapshot;\n        }\n      }\n      updateHostContainer(workInProgress);\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      if (enableSuspenseServerRenderer) {\n        if (nextState !== null && nextState.dehydrated !== null) {\n          if (current === null) {\n            const wasHydrated = popHydrationState(workInProgress);\n            invariant(\n              wasHydrated,\n              'A dehydrated suspense component was completed without a hydrated node. ' +\n                'This is probably a bug in React.',\n            );\n            prepareToHydrateHostSuspenseInstance(workInProgress);\n            if (enableSchedulerTracing) {\n              markSpawnedWork(OffscreenLane);\n            }\n            return null;\n          } else {\n            // We should never have been in a hydration state if we didn't have a current.\n            // However, in some of those paths, we might have reentered a hydration state\n            // and then we might be inside a hydration state. In that case, we'll need to exit out of it.\n            resetHydrationState();\n            if ((workInProgress.flags & DidCapture) === NoFlags) {\n              // This boundary did not suspend so it's now hydrated and unsuspended.\n              workInProgress.memoizedState = null;\n            }\n            // If nothing suspended, we need to schedule an effect to mark this boundary\n            // as having hydrated so events know that they're free to be invoked.\n            // It's also a signal to replay events and the suspense callback.\n            // If something suspended, schedule an effect to attach retry listeners.\n            // So we might as well always mark this.\n            workInProgress.flags |= Update;\n            return null;\n          }\n        }\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      let prevDidTimeout = false;\n      if (current === null) {\n        if (workInProgress.memoizedProps.fallback !== undefined) {\n          popHydrationState(workInProgress);\n        }\n      } else {\n        const prevState: null | SuspenseState = current.memoizedState;\n        prevDidTimeout = prevState !== null;\n      }\n\n      if (nextDidTimeout && !prevDidTimeout) {\n        // If this subtreee is running in blocking mode we can suspend,\n        // otherwise we won't suspend.\n        // TODO: This will still suspend a synchronous tree if anything\n        // in the concurrent tree already suspended during this render.\n        // This is a known bug.\n        if ((workInProgress.mode & BlockingMode) !== NoMode) {\n          // TODO: Move this back to throwException because this is too late\n          // if this is a large tree which is common for initial loads. We\n          // don't know if we should restart a render or not until we get\n          // this marker, and this is too late.\n          // If this render already had a ping or lower pri updates,\n          // and this is the first time we know we're going to suspend we\n          // should be able to immediately restart from within throwException.\n          const hasInvisibleChildContext =\n            current === null &&\n            workInProgress.memoizedProps.unstable_avoidThisFallback !== true;\n          if (\n            hasInvisibleChildContext ||\n            hasSuspenseContext(\n              suspenseStackCursor.current,\n              (InvisibleParentSuspenseContext: SuspenseContext),\n            )\n          ) {\n            // If this was in an invisible tree or a new render, then showing\n            // this boundary is ok.\n            renderDidSuspend();\n          } else {\n            // Otherwise, we're going to have to hide content so we should\n            // suspend for longer if possible.\n            renderDidSuspendDelayIfPossible();\n          }\n        }\n      }\n\n      if (supportsPersistence) {\n        // TODO: Only schedule updates if not prevDidTimeout.\n        if (nextDidTimeout) {\n          // If this boundary just timed out, schedule an effect to attach a\n          // retry listener to the promise. This flag is also used to hide the\n          // primary children.\n          workInProgress.flags |= Update;\n        }\n      }\n      if (supportsMutation) {\n        // TODO: Only schedule updates if these values are non equal, i.e. it changed.\n        if (nextDidTimeout || prevDidTimeout) {\n          // If this boundary just timed out, schedule an effect to attach a\n          // retry listener to the promise. This flag is also used to hide the\n          // primary children. In mutation mode, we also need the flag to\n          // *unhide* children that were previously hidden, so check if this\n          // is currently timed out, too.\n          workInProgress.flags |= Update;\n        }\n      }\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        workInProgress.flags |= Update;\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      popProvider(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thennables. Instead, we'll transfer its thennables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThennables = suspended.updateQueue;\n                if (newThennables !== null) {\n                  workInProgress.updateQueue = newThennables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect list before doing the second pass since that's now invalid.\n                if (renderState.lastEffect === null) {\n                  workInProgress.firstEffect = null;\n                }\n                workInProgress.lastEffect = renderState.lastEffect;\n                // Reset the child fibers to their original state.\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense Context to force suspense and immediately\n                // rerender the children.\n                pushSuspenseContext(\n                  workInProgress,\n                  setShallowSuspenseContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n            if (enableSchedulerTracing) {\n              markSpawnedWork(SomeRetryLane);\n            }\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThennables = suspended.updateQueue;\n            if (newThennables !== null) {\n              workInProgress.updateQueue = newThennables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We need to delete the row we just rendered.\n              // Reset the effect list to what it was before we rendered this\n              // child. The nested children have already appended themselves.\n              const lastEffect = (workInProgress.lastEffect =\n                renderState.lastEffect);\n              // Remove any effects that were appended after this point.\n              if (lastEffect !== null) {\n                lastEffect.nextEffect = null;\n              }\n              // We're done.\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n            if (enableSchedulerTracing) {\n              markSpawnedWork(SomeRetryLane);\n            }\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.lastEffect = workInProgress.lastEffect;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        }\n        pushSuspenseContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        return next;\n      }\n      return null;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalImpl = workInProgress.type.impl;\n        let fundamentalInstance: ReactFundamentalComponentInstance<\n          any,\n          any,\n        > | null = workInProgress.stateNode;\n\n        if (fundamentalInstance === null) {\n          const getInitialState = fundamentalImpl.getInitialState;\n          let fundamentalState;\n          if (getInitialState !== undefined) {\n            fundamentalState = getInitialState(newProps);\n          }\n          fundamentalInstance = workInProgress.stateNode = createFundamentalStateInstance(\n            workInProgress,\n            newProps,\n            fundamentalImpl,\n            fundamentalState || {},\n          );\n          const instance = ((getFundamentalComponentInstance(\n            fundamentalInstance,\n          ): any): Instance);\n          fundamentalInstance.instance = instance;\n          if (fundamentalImpl.reconcileChildren === false) {\n            return null;\n          }\n          appendAllChildren(instance, workInProgress, false, false);\n          mountFundamentalComponent(fundamentalInstance);\n        } else {\n          // We fire update in commit phase\n          const prevProps = fundamentalInstance.props;\n          fundamentalInstance.prevProps = prevProps;\n          fundamentalInstance.props = newProps;\n          fundamentalInstance.currentFiber = workInProgress;\n          if (supportsPersistence) {\n            const instance = cloneFundamentalInstance(fundamentalInstance);\n            fundamentalInstance.instance = instance;\n            appendAllChildren(instance, workInProgress, false, false);\n          }\n          const shouldUpdate = shouldUpdateFundamentalComponent(\n            fundamentalInstance,\n          );\n          if (shouldUpdate) {\n            markUpdate(workInProgress);\n          }\n        }\n        return null;\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        return null;\n      }\n      break;\n    }\n    case Block:\n      if (enableBlocksAPI) {\n        return null;\n      }\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popRenderLanes(workInProgress);\n      if (current !== null) {\n        const nextState: OffscreenState | null = workInProgress.memoizedState;\n        const prevState: OffscreenState | null = current.memoizedState;\n\n        const prevIsHidden = prevState !== null;\n        const nextIsHidden = nextState !== null;\n        if (\n          prevIsHidden !== nextIsHidden &&\n          newProps.mode !== 'unstable-defer-without-hiding'\n        ) {\n          workInProgress.flags |= Update;\n        }\n      }\n      return null;\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  enableSuspenseServerRenderer,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {popSuspenseContext} from './ReactFiberSuspenseContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popRenderLanes} from './ReactFiberWorkLoop.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\n\nimport invariant from 'shared/invariant';\n\nfunction unwindWork(workInProgress: Fiber, renderLanes: Lanes) {\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      invariant(\n        (flags & DidCapture) === NoFlags,\n        'The root failed to unmount after an error. This is likely a bug in ' +\n          'React. Please file an issue.',\n      );\n      workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n      return workInProgress;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          invariant(\n            workInProgress.alternate !== null,\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n          resetHydrationState();\n        }\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      popProvider(workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(interruptedWork: Fiber) {\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case ContextProvider:\n      popProvider(interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n|};\n\nexport function createCapturedValue<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  return true;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentName(source.type) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      const errorBoundaryName = getComponentName(boundary.type);\n      if (errorBoundaryName) {\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      } else {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\n\nimport getComponentName from 'shared/getComponentName';\nimport {\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n  IncompleteClassComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n} from './ReactFiberFlags';\nimport {shouldCaptureSuspense} from './ReactFiberSuspenseComponent.old';\nimport {NoMode, BlockingMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n} from './ReactFiberWorkLoop.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {markComponentSuspended} from './SchedulingProfiler';\n\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      logCapturedError(fiber, errorInfo);\n      return getDerivedStateFromError(error);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n\n        // Only log here if componentDidCatch is the only error boundary method defined\n        logCapturedError(fiber, errorInfo);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentName(fiber.type) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  } else if (__DEV__) {\n    update.callback = () => {\n      markFailedErrorBoundaryForHotReloading(fiber);\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a listener to the promise to \"ping\" the root and retry. But only if\n  // one does not already exist for the lanes we're currently rendering (which\n  // acts like a \"thread ID\" here).\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n  // Its effect list is no longer valid.\n  sourceFiber.firstEffect = sourceFiber.lastEffect = null;\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    // This is a wakeable.\n    const wakeable: Wakeable = (value: any);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentName(sourceFiber.type) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markComponentSuspended(sourceFiber, wakeable);\n    }\n\n    if ((sourceFiber.mode & BlockingMode) === NoMode) {\n      // Reset the memoizedState to what it was before we attempted\n      // to render it.\n      const currentSource = sourceFiber.alternate;\n      if (currentSource) {\n        sourceFiber.updateQueue = currentSource.updateQueue;\n        sourceFiber.memoizedState = currentSource.memoizedState;\n        sourceFiber.lanes = currentSource.lanes;\n      } else {\n        sourceFiber.updateQueue = null;\n        sourceFiber.memoizedState = null;\n      }\n    }\n\n    const hasInvisibleParentBoundary = hasSuspenseContext(\n      suspenseStackCursor.current,\n      (InvisibleParentSuspenseContext: SuspenseContext),\n    );\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    let workInProgress = returnFiber;\n    do {\n      if (\n        workInProgress.tag === SuspenseComponent &&\n        shouldCaptureSuspense(workInProgress, hasInvisibleParentBoundary)\n      ) {\n        // Found the nearest boundary.\n\n        // Stash the promise on the boundary fiber. If the boundary times out, we'll\n        // attach another listener to flip the boundary back to its normal state.\n        const wakeables: Set<Wakeable> = (workInProgress.updateQueue: any);\n        if (wakeables === null) {\n          const updateQueue = (new Set(): any);\n          updateQueue.add(wakeable);\n          workInProgress.updateQueue = updateQueue;\n        } else {\n          wakeables.add(wakeable);\n        }\n\n        // If the boundary is outside of blocking mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. In the commit phase, we'll schedule a\n        // subsequent synchronous update to re-render the Suspense.\n        //\n        // Note: It doesn't matter whether the component that suspended was\n        // inside a blocking mode tree. If the Suspense is outside of it, we\n        // should *not* suspend the commit.\n        if ((workInProgress.mode & BlockingMode) === NoMode) {\n          workInProgress.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n          // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (sourceFiber.tag === ClassComponent) {\n            const currentSourceFiber = sourceFiber.alternate;\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              const update = createUpdate(NoTimestamp, SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update);\n            }\n          }\n\n          // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n\n          // Exit without suspending.\n          return;\n        }\n\n        // Confirmed that the boundary is in a concurrent mode tree. Continue\n        // with the normal suspend path.\n        //\n        // After this we'll use a set of heuristics to determine whether this\n        // render pass will run to completion or restart or \"suspend\" the commit.\n        // The actual logic for this is spread out in different places.\n        //\n        // This first principle is that if we're going to suspend when we complete\n        // a root, then we should also restart if we get an update or ping that\n        // might unsuspend it, and vice versa. The only reason to suspend is\n        // because you think you might want to restart before committing. However,\n        // it doesn't make sense to restart only while in the period we're suspended.\n        //\n        // Restarting too aggressively is also not good because it starves out any\n        // intermediate loading state. So we use heuristics to determine when.\n\n        // Suspense Heuristics\n        //\n        // If nothing threw a Promise or all the same fallbacks are already showing,\n        // then don't suspend/restart.\n        //\n        // If this is an initial render of a new tree of Suspense boundaries and\n        // those trigger a fallback, then don't suspend/restart. We want to ensure\n        // that we can show the initial loading state as quickly as possible.\n        //\n        // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n        // a fallback, then we should always suspend/restart. Transitions apply\n        // to this case. If none is defined, JND is used instead.\n        //\n        // If we're already showing a fallback and it gets \"retried\", allowing us to show\n        // another level, but there's still an inner boundary that would show a fallback,\n        // then we suspend/restart for 500ms since the last time we showed a fallback\n        // anywhere in the tree. This effectively throttles progressive loading into a\n        // consistent train of commits. This also gives us an opportunity to restart to\n        // get to the completed state slightly earlier.\n        //\n        // If there's ambiguity due to batching it's resolved in preference of:\n        // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n        //\n        // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n        // ensure that new initial loading states can commit as soon as possible.\n\n        attachPingListener(root, wakeable, rootRenderLanes);\n\n        workInProgress.flags |= ShouldCapture;\n        workInProgress.lanes = rootRenderLanes;\n\n        return;\n      }\n      // This boundary already captured during this render. Continue to the next\n      // boundary.\n      workInProgress = workInProgress.return;\n    } while (workInProgress !== null);\n    // No boundary was found. Fallthrough to error mode.\n    // TODO: Use invariant so the message is stripped in prod?\n    value = new Error(\n      (getComponentName(sourceFiber.type) || 'A React component') +\n        ' suspended while rendering, but no fallback UI was specified.\\n' +\n        '\\n' +\n        'Add a <Suspense fallback=...> component higher in the tree to ' +\n        'provide a loading indicator or placeholder to display.',\n    );\n  }\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  renderDidError();\n\n  value = createCapturedValue(value, sourceFiber);\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\n\nfunction invokeGuardedCallbackProd<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n) {\n  const funcArgs = Array.prototype.slice.call(arguments, 3);\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this.onError(error);\n  }\n}\n\nlet invokeGuardedCallbackImpl = invokeGuardedCallbackProd;\n\nif (__DEV__) {\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // unintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.dispatchEvent === 'function' &&\n    typeof document !== 'undefined' &&\n    typeof document.createEvent === 'function'\n  ) {\n    const fakeNode = document.createElement('react');\n\n    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev<\n      A,\n      B,\n      C,\n      D,\n      E,\n      F,\n      Context,\n    >(\n      name: string | null,\n      func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n      context: Context,\n      a: A,\n      b: B,\n      c: C,\n      d: D,\n      e: E,\n      f: F,\n    ) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebookincubator/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      invariant(\n        typeof document !== 'undefined',\n        'The `document` global was defined when React was initialized, but is not ' +\n          'defined anymore. This can happen in a test environment if a component ' +\n          'schedules an update from an asynchronous callback, but the test has already ' +\n          'finished running. To solve this, you can either unmount the component at ' +\n          'the end of your test (and ensure that any asynchronous operations get ' +\n          'canceled in `componentWillUnmount`), or you can change the test itself ' +\n          'to be asynchronous.',\n      );\n      const evt = document.createEvent('Event');\n\n      let didCall = false;\n      // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n      let didError = true;\n\n      // Keeps track of the value of window.event so that we can reset it\n      // during the callback to let user code access window.event in the\n      // browsers that support it.\n      const windowEvent = window.event;\n\n      // Keeps track of the descriptor of window.event to restore it after event\n      // dispatching: https://github.com/facebook/react/issues/13688\n      const windowEventDescriptor = Object.getOwnPropertyDescriptor(\n        window,\n        'event',\n      );\n\n      function restoreAfterDispatch() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false);\n\n        // We check for window.hasOwnProperty('event') to prevent the\n        // window.event assignment in both IE <= 10 as they throw an error\n        // \"Member not found\" in strict mode, and in Firefox which does not\n        // support window.event.\n        if (\n          typeof window.event !== 'undefined' &&\n          window.hasOwnProperty('event')\n        ) {\n          window.event = windowEvent;\n        }\n      }\n\n      // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n      const funcArgs = Array.prototype.slice.call(arguments, 3);\n      function callCallback() {\n        didCall = true;\n        restoreAfterDispatch();\n        func.apply(context, funcArgs);\n        didError = false;\n      }\n\n      // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n      let error;\n      // Use this to track whether the error event is ever called.\n      let didSetError = false;\n      let isCrossOriginError = false;\n\n      function handleWindowError(event) {\n        error = event.error;\n        didSetError = true;\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n        if (event.defaultPrevented) {\n          // Some other error handler has prevented default.\n          // Browsers silence the error report if this happens.\n          // We'll remember this to later decide whether to log it or not.\n          if (error != null && typeof error === 'object') {\n            try {\n              error._suppressLogging = true;\n            } catch (inner) {\n              // Ignore.\n            }\n          }\n        }\n      }\n\n      // Create a fake event type.\n      const evtType = `react-${name ? name : 'invokeguardedcallback'}`;\n\n      // Attach our event handlers\n      window.addEventListener('error', handleWindowError);\n      fakeNode.addEventListener(evtType, callCallback, false);\n\n      // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (windowEventDescriptor) {\n        Object.defineProperty(window, 'event', windowEventDescriptor);\n      }\n\n      if (didCall && didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          error = new Error(\n            'An error was thrown inside one of your components, but React ' +\n              \"doesn't know what it was. This is likely due to browser \" +\n              'flakiness. React does its best to preserve the \"Pause on ' +\n              'exceptions\" behavior of the DevTools, which requires some ' +\n              \"DEV-mode only tricks. It's possible that these don't work in \" +\n              'your browser. Try triggering the error in production mode, ' +\n              'or switching to a modern browser. If you suspect that this is ' +\n              'actually an issue with React, please file an issue.',\n          );\n        } else if (isCrossOriginError) {\n          error = new Error(\n            \"A cross-origin error was thrown. React doesn't have access to \" +\n              'the actual error object in development. ' +\n              'See https://reactjs.org/link/crossorigin-error for more information.',\n          );\n        }\n        this.onError(error);\n      }\n\n      // Remove our event listeners\n      window.removeEventListener('error', handleWindowError);\n\n      if (!didCall) {\n        // Something went really wrong, and our event was not dispatched.\n        // https://github.com/facebook/react/issues/16734\n        // https://github.com/facebook/react/issues/16585\n        // Fall back to the production implementation.\n        restoreAfterDispatch();\n        return invokeGuardedCallbackProd.apply(this, arguments);\n      }\n    };\n  }\n}\n\nexport default invokeGuardedCallbackImpl;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\nimport invokeGuardedCallbackImpl from './invokeGuardedCallbackImpl';\n\n// Used by Fiber to simulate a try-catch.\nlet hasError: boolean = false;\nlet caughtError: mixed = null;\n\n// Used by event system to capture/rethrow the first error.\nlet hasRethrowError: boolean = false;\nlet rethrowError: mixed = null;\n\nconst reporter = {\n  onError(error: mixed) {\n    hasError = true;\n    caughtError = error;\n  },\n};\n\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallback<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl.apply(reporter, arguments);\n}\n\n/**\n * Same as invokeGuardedCallback, but instead of returning an error, it stores\n * it in a global so it can be rethrown by `rethrowCaughtError` later.\n * TODO: See if caughtError and rethrowError can be unified.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallbackAndCatchFirstError<\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  Context,\n>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => void,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  invokeGuardedCallback.apply(this, arguments);\n  if (hasError) {\n    const error = clearCaughtError();\n    if (!hasRethrowError) {\n      hasRethrowError = true;\n      rethrowError = error;\n    }\n  }\n}\n\n/**\n * During execution of guarded functions we will capture the first error which\n * we will rethrow to be handled by the top level error handler.\n */\nexport function rethrowCaughtError() {\n  if (hasRethrowError) {\n    const error = rethrowError;\n    hasRethrowError = false;\n    rethrowError = null;\n    throw error;\n  }\n}\n\nexport function hasCaughtError() {\n  return hasError;\n}\n\nexport function clearCaughtError() {\n  if (hasError) {\n    const error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    invariant(\n      false,\n      'clearCaughtError was called but no error was captured. This error ' +\n        'is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\n\nimport {unstable_wrap as Schedule_tracing_wrap} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  enableSuspenseCallback,\n  enableScopeAPI,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  Snapshot,\n  Update,\n} from './ReactFiberFlags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\n\nimport {onCommitUnmount} from './ReactFiberDevToolsHook.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ProfileMode} from './ReactTypeOfMode';\nimport {commitUpdateQueue} from './ReactUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  unmountFundamentalComponent,\n  updateFundamentalComponent,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveHookEffectMount,\n  enqueuePendingPassiveHookEffectUnmount,\n  enqueuePendingPassiveProfilerEffect,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(current: Fiber, instance: any) {\n  if (__DEV__) {\n    invokeGuardedCallback(\n      null,\n      callComponentWillUnmountWithTimer,\n      null,\n      current,\n      instance,\n    );\n    if (hasCaughtError()) {\n      const unmountError = clearCaughtError();\n      captureCommitPhaseError(current, unmountError);\n    }\n  } else {\n    try {\n      callComponentWillUnmountWithTimer(current, instance);\n    } catch (unmountError) {\n      captureCommitPhaseError(current, unmountError);\n    }\n  }\n}\n\nfunction safelyDetachRef(current: Fiber) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      if (__DEV__) {\n        invokeGuardedCallback(null, ref, null, null);\n        if (hasCaughtError()) {\n          const refError = clearCaughtError();\n          captureCommitPhaseError(current, refError);\n        }\n      } else {\n        try {\n          ref(null);\n        } catch (refError) {\n          captureCommitPhaseError(current, refError);\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(current: Fiber, destroy: () => void) {\n  if (__DEV__) {\n    invokeGuardedCallback(null, destroy, null);\n    if (hasCaughtError()) {\n      const error = clearCaughtError();\n      captureCommitPhaseError(current, error);\n    }\n  } else {\n    try {\n      destroy();\n    } catch (error) {\n      captureCommitPhaseError(current, error);\n    }\n  }\n}\n\nfunction commitBeforeMutationLifeCycles(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n    case Block: {\n      return;\n    }\n    case ClassComponent: {\n      if (finishedWork.flags & Snapshot) {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentName(finishedWork.type),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n      }\n      return;\n    }\n    case HostRoot: {\n      if (supportsMutation) {\n        if (finishedWork.flags & Snapshot) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n      }\n      return;\n    }\n    case HostComponent:\n    case HostText:\n    case HostPortal:\n    case IncompleteClassComponent:\n      // Nothing to do for these component types\n      return;\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction commitHookEffectListUnmount(tag: number, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          destroy();\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(tag: number, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Mount\n        const create = effect.create;\n        effect.destroy = create();\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                'useEffect(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              'An effect function must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction schedulePassiveEffects(finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      const {next, tag} = effect;\n      if (\n        (tag & HookPassive) !== NoHookEffect &&\n        (tag & HookHasEffect) !== NoHookEffect\n      ) {\n        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);\n        enqueuePendingPassiveHookEffectMount(finishedWork, effect);\n      }\n      effect = next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          if (typeof onPostCommit === 'function') {\n            if (enableSchedulerTracing) {\n              onPostCommit(\n                id,\n                finishedWork.alternate === null ? 'mount' : 'update',\n                passiveEffectDuration,\n                commitTime,\n                finishedRoot.memoizedInteractions,\n              );\n            } else {\n              onPostCommit(\n                id,\n                finishedWork.alternate === null ? 'mount' : 'update',\n                passiveEffectDuration,\n                commitTime,\n              );\n            }\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          while (parentFiber !== null) {\n            if (parentFiber.tag === Profiler) {\n              const parentStateNode = parentFiber.stateNode;\n              parentStateNode.passiveEffectDuration += passiveEffectDuration;\n              break;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitLifeCycles(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n    case Block: {\n      // At this point layout effects have already been destroyed (during mutation phase).\n      // This is done to prevent sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n      }\n\n      schedulePassiveEffects(finishedWork);\n      return;\n    }\n    case ClassComponent: {\n      const instance = finishedWork.stateNode;\n      if (finishedWork.flags & Update) {\n        if (current === null) {\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'componentDidMount. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'componentDidMount. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              instance.componentDidMount();\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            instance.componentDidMount();\n          }\n        } else {\n          const prevProps =\n            finishedWork.elementType === finishedWork.type\n              ? current.memoizedProps\n              : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n          const prevState = current.memoizedState;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'componentDidUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'componentDidUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              instance.componentDidUpdate(\n                prevProps,\n                prevState,\n                instance.__reactInternalSnapshotBeforeUpdate,\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            instance.componentDidUpdate(\n              prevProps,\n              prevState,\n              instance.__reactInternalSnapshotBeforeUpdate,\n            );\n          }\n        }\n      }\n\n      // TODO: I think this is now always non-null by the time it reaches the\n      // commit phase. Consider removing the type check.\n      const updateQueue: UpdateQueue<\n        *,\n      > | null = (finishedWork.updateQueue: any);\n      if (updateQueue !== null) {\n        if (__DEV__) {\n          if (\n            finishedWork.type === finishedWork.elementType &&\n            !didWarnAboutReassigningProps\n          ) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              console.error(\n                'Expected %s props to match memoized props before ' +\n                  'processing the update queue. ' +\n                  'This might either be because of a bug in React, or because ' +\n                  'a component reassigns its own `this.props`. ' +\n                  'Please file an issue.',\n                getComponentName(finishedWork.type) || 'instance',\n              );\n            }\n            if (instance.state !== finishedWork.memoizedState) {\n              console.error(\n                'Expected %s state to match memoized state before ' +\n                  'processing the update queue. ' +\n                  'This might either be because of a bug in React, or because ' +\n                  'a component reassigns its own `this.state`. ' +\n                  'Please file an issue.',\n                getComponentName(finishedWork.type) || 'instance',\n              );\n            }\n          }\n        }\n        // We could update instance props and state here,\n        // but instead we rely on them being set during last render.\n        // TODO: revisit this when we implement resuming.\n        commitUpdateQueue(finishedWork, updateQueue, instance);\n      }\n      return;\n    }\n    case HostRoot: {\n      // TODO: I think this is now always non-null by the time it reaches the\n      // commit phase. Consider removing the type check.\n      const updateQueue: UpdateQueue<\n        *,\n      > | null = (finishedWork.updateQueue: any);\n      if (updateQueue !== null) {\n        let instance = null;\n        if (finishedWork.child !== null) {\n          switch (finishedWork.child.tag) {\n            case HostComponent:\n              instance = getPublicInstance(finishedWork.child.stateNode);\n              break;\n            case ClassComponent:\n              instance = finishedWork.child.stateNode;\n              break;\n          }\n        }\n        commitUpdateQueue(finishedWork, updateQueue, instance);\n      }\n      return;\n    }\n    case HostComponent: {\n      const instance: Instance = finishedWork.stateNode;\n\n      // Renderers may schedule work to be done after host components are mounted\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n      // These effects should only be committed when components are first mounted,\n      // aka when there is no current/alternate.\n      if (current === null && finishedWork.flags & Update) {\n        const type = finishedWork.type;\n        const props = finishedWork.memoizedProps;\n        commitMount(instance, type, props, finishedWork);\n      }\n\n      return;\n    }\n    case HostText: {\n      // We have no life-cycles associated with text.\n      return;\n    }\n    case HostPortal: {\n      // We have no life-cycles associated with portals.\n      return;\n    }\n    case Profiler: {\n      if (enableProfilerTimer) {\n        const {onCommit, onRender} = finishedWork.memoizedProps;\n        const {effectDuration} = finishedWork.stateNode;\n\n        const commitTime = getCommitTime();\n\n        if (typeof onRender === 'function') {\n          if (enableSchedulerTracing) {\n            onRender(\n              finishedWork.memoizedProps.id,\n              current === null ? 'mount' : 'update',\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n              finishedRoot.memoizedInteractions,\n            );\n          } else {\n            onRender(\n              finishedWork.memoizedProps.id,\n              current === null ? 'mount' : 'update',\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n            );\n          }\n        }\n\n        if (enableProfilerCommitHooks) {\n          if (typeof onCommit === 'function') {\n            if (enableSchedulerTracing) {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                current === null ? 'mount' : 'update',\n                effectDuration,\n                commitTime,\n                finishedRoot.memoizedInteractions,\n              );\n            } else {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                current === null ? 'mount' : 'update',\n                effectDuration,\n                commitTime,\n              );\n            }\n          }\n\n          // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n          // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n          // because the effect is also where times bubble to parent Profilers.\n          enqueuePendingPassiveProfilerEffect(finishedWork);\n\n          // Propagate layout effect durations to the next nearest Profiler ancestor.\n          // Do not reset these values until the next render so DevTools has a chance to read them first.\n          let parentFiber = finishedWork.return;\n          while (parentFiber !== null) {\n            if (parentFiber.tag === Profiler) {\n              const parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += effectDuration;\n              break;\n            }\n            parentFiber = parentFiber.return;\n          }\n        }\n      }\n      return;\n    }\n    case SuspenseComponent: {\n      commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n      return;\n    }\n    case SuspenseListComponent:\n    case IncompleteClassComponent:\n    case FundamentalComponent:\n    case ScopeComponent:\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      return;\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        const instance = node.stateNode;\n        if (isHidden) {\n          hideInstance(instance);\n        } else {\n          unhideInstance(node.stateNode, node.memoizedProps);\n        }\n      } else if (node.tag === HostText) {\n        const instance = node.stateNode;\n        if (isHidden) {\n          hideTextInstance(instance);\n        } else {\n          unhideTextInstance(instance, node.memoizedProps);\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden. Don't search\n        // any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      ref(instanceToUse);\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentName(finishedWork.type),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      currentRef(null);\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\n// User-originating errors (lifecycles and refs) should not interrupt\n// deletion, so don't let them throw. Host-originating errors should\n// interrupt deletion, so it's okay\nfunction commitUnmount(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  onCommitUnmount(current);\n\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n    case Block: {\n      const updateQueue: FunctionComponentUpdateQueue | null = (current.updateQueue: any);\n      if (updateQueue !== null) {\n        const lastEffect = updateQueue.lastEffect;\n        if (lastEffect !== null) {\n          const firstEffect = lastEffect.next;\n\n          let effect = firstEffect;\n          do {\n            const {destroy, tag} = effect;\n            if (destroy !== undefined) {\n              if ((tag & HookPassive) !== NoHookEffect) {\n                enqueuePendingPassiveHookEffectUnmount(current, effect);\n              } else {\n                if (\n                  enableProfilerTimer &&\n                  enableProfilerCommitHooks &&\n                  current.mode & ProfileMode\n                ) {\n                  startLayoutEffectTimer();\n                  safelyCallDestroy(current, destroy);\n                  recordLayoutEffectDuration(current);\n                } else {\n                  safelyCallDestroy(current, destroy);\n                }\n              }\n            }\n            effect = effect.next;\n          } while (effect !== firstEffect);\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      safelyDetachRef(current);\n      const instance = current.stateNode;\n      if (typeof instance.componentWillUnmount === 'function') {\n        safelyCallComponentWillUnmount(current, instance);\n      }\n      return;\n    }\n    case HostComponent: {\n      safelyDetachRef(current);\n      return;\n    }\n    case HostPortal: {\n      // TODO: this is recursive.\n      // We are also not using this parent because\n      // the portal will get pushed immediately.\n      if (supportsMutation) {\n        unmountHostComponents(finishedRoot, current, renderPriorityLevel);\n      } else if (supportsPersistence) {\n        emptyPortalContainer(current);\n      }\n      return;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalInstance = current.stateNode;\n        if (fundamentalInstance !== null) {\n          unmountFundamentalComponent(fundamentalInstance);\n          current.stateNode = null;\n        }\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((current.stateNode: SuspenseInstance));\n          }\n        }\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(current);\n      }\n      return;\n    }\n  }\n}\n\nfunction commitNestedUnmounts(\n  finishedRoot: FiberRoot,\n  root: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  // While we're inside a removed host node we don't want to call\n  // removeChild on the inner nodes because they're removed by the top\n  // call anyway. We also want to call componentWillUnmount on all\n  // composites before this host node is removed from the tree. Therefore\n  // we do an inner loop while we're still inside the host node.\n  let node: Fiber = root;\n  while (true) {\n    commitUnmount(finishedRoot, node, renderPriorityLevel);\n    // Visit children because they may contain more composite or host nodes.\n    // Skip portals because commitUnmount() currently visits them recursively.\n    if (\n      node.child !== null &&\n      // If we use mutation we drill down into portals using commitUnmount above.\n      // If we don't use mutation we drill down into portals here instead.\n      (!supportsMutation || node.tag !== HostPortal)\n    ) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === root) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === root) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointers to disconnect it from the tree. Ideally, we\n  // should clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child. This child\n  // itself will be GC:ed when the parent updates the next time.\n  // Note: we cannot null out sibling here, otherwise it can cause issues\n  // with findDOMNode and how it requires the sibling field to carry out\n  // traversal in a later effect. See PR #16820. We now clear the sibling\n  // field after effects, see: detachFiberAfterEffects.\n  //\n  // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.\n  // It may be required if the current component is an error boundary,\n  // and one of its descendants throws while unmounting a passive effect.\n  fiber.alternate = null;\n  fiber.child = null;\n  fiber.dependencies = null;\n  fiber.firstEffect = null;\n  fiber.lastEffect = null;\n  fiber.memoizedProps = null;\n  fiber.memoizedState = null;\n  fiber.pendingProps = null;\n  fiber.return = null;\n  fiber.updateQueue = null;\n  if (__DEV__) {\n    fiber._debugOwner = null;\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction commitContainer(finishedWork: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case ClassComponent:\n    case HostComponent:\n    case HostText:\n    case FundamentalComponent: {\n      return;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const portalOrRoot: {\n        containerInfo: Container,\n        pendingChildren: ChildSet,\n        ...\n      } = finishedWork.stateNode;\n      const {containerInfo, pendingChildren} = portalOrRoot;\n      replaceContainerChildren(containerInfo, pendingChildren);\n      return;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n  invariant(\n    false,\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  let parent;\n  let isContainer;\n  const parentStateNode = parentFiber.stateNode;\n  switch (parentFiber.tag) {\n    case HostComponent:\n      parent = parentStateNode;\n      isContainer = false;\n      break;\n    case HostRoot:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    case HostPortal:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    case FundamentalComponent:\n      if (enableFundamentalAPI) {\n        parent = parentStateNode.instance;\n        isContainer = false;\n      }\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      invariant(\n        false,\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n  if (parentFiber.flags & ContentReset) {\n    // Reset the text content of the parent before doing any insertions\n    resetTextContent(parent);\n    // Clear ContentReset from the effect tag\n    parentFiber.flags &= ~ContentReset;\n  }\n\n  const before = getHostSibling(finishedWork);\n  // We only have the top Fiber that was inserted but we need to recurse down its\n  // children to find all the terminal nodes.\n  if (isContainer) {\n    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n  } else {\n    insertOrAppendPlacementNode(finishedWork, before, parent);\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost || (enableFundamentalAPI && tag === FundamentalComponent)) {\n    const stateNode = isHost ? node.stateNode : node.stateNode.instance;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost || (enableFundamentalAPI && tag === FundamentalComponent)) {\n    const stateNode = isHost ? node.stateNode : node.stateNode.instance;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction unmountHostComponents(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  // We only have the top Fiber that was deleted but we need to recurse down its\n  // children to find all the terminal nodes.\n  let node: Fiber = current;\n\n  // Each iteration, currentParent is populated with node's host parent if not\n  // currentParentIsValid.\n  let currentParentIsValid = false;\n\n  // Note: these two variables *must* always be updated together.\n  let currentParent;\n  let currentParentIsContainer;\n\n  while (true) {\n    if (!currentParentIsValid) {\n      let parent = node.return;\n      findParent: while (true) {\n        invariant(\n          parent !== null,\n          'Expected to find a host parent. This error is likely caused by ' +\n            'a bug in React. Please file an issue.',\n        );\n        const parentStateNode = parent.stateNode;\n        switch (parent.tag) {\n          case HostComponent:\n            currentParent = parentStateNode;\n            currentParentIsContainer = false;\n            break findParent;\n          case HostRoot:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n          case HostPortal:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n          case FundamentalComponent:\n            if (enableFundamentalAPI) {\n              currentParent = parentStateNode.instance;\n              currentParentIsContainer = false;\n            }\n        }\n        parent = parent.return;\n      }\n      currentParentIsValid = true;\n    }\n\n    if (node.tag === HostComponent || node.tag === HostText) {\n      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);\n      // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n      if (currentParentIsContainer) {\n        removeChildFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: Instance | TextInstance),\n        );\n      } else {\n        removeChild(\n          ((currentParent: any): Instance),\n          (node.stateNode: Instance | TextInstance),\n        );\n      }\n      // Don't visit children because we already visited them.\n    } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n      const fundamentalNode = node.stateNode.instance;\n      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);\n      // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n      if (currentParentIsContainer) {\n        removeChildFromContainer(\n          ((currentParent: any): Container),\n          (fundamentalNode: Instance),\n        );\n      } else {\n        removeChild(\n          ((currentParent: any): Instance),\n          (fundamentalNode: Instance),\n        );\n      }\n    } else if (\n      enableSuspenseServerRenderer &&\n      node.tag === DehydratedFragment\n    ) {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((node.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (currentParentIsContainer) {\n        clearSuspenseBoundaryFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: SuspenseInstance),\n        );\n      } else {\n        clearSuspenseBoundary(\n          ((currentParent: any): Instance),\n          (node.stateNode: SuspenseInstance),\n        );\n      }\n    } else if (node.tag === HostPortal) {\n      if (node.child !== null) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        currentParentIsContainer = true;\n        // Visit children because portals might contain host components.\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    } else {\n      commitUnmount(finishedRoot, node, renderPriorityLevel);\n      // Visit children because we may find more host components below.\n      if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    }\n    if (node === current) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === current) {\n        return;\n      }\n      node = node.return;\n      if (node.tag === HostPortal) {\n        // When we go out of the portal, we need to restore the parent.\n        // Since we don't keep a stack of them, we will search for it.\n        currentParentIsValid = false;\n      }\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction commitDeletion(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  if (supportsMutation) {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(finishedRoot, current, renderPriorityLevel);\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitNestedUnmounts(finishedRoot, current, renderPriorityLevel);\n  }\n  const alternate = current.alternate;\n  detachFiberMutation(current);\n  if (alternate !== null) {\n    detachFiberMutation(alternate);\n  }\n}\n\nfunction commitWork(current: Fiber | null, finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent:\n      case Block: {\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n            );\n          } finally {\n            recordLayoutEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n        }\n        return;\n      }\n      case Profiler: {\n        return;\n      }\n      case SuspenseComponent: {\n        commitSuspenseComponent(finishedWork);\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case SuspenseListComponent: {\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case HostRoot: {\n        if (supportsHydration) {\n          const root: FiberRoot = finishedWork.stateNode;\n          if (root.hydrate) {\n            // We've just hydrated. No need to hydrate again.\n            root.hydrate = false;\n            commitHydratedContainer(root.containerInfo);\n          }\n        }\n        break;\n      }\n      case OffscreenComponent:\n      case LegacyHiddenComponent: {\n        return;\n      }\n    }\n\n    commitContainer(finishedWork);\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n    case Block: {\n      // Layout effects are destroyed during the mutation phase so that all\n      // destroy functions for all fibers are called before any create functions.\n      // This prevents sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n      }\n      return;\n    }\n    case ClassComponent: {\n      return;\n    }\n    case HostComponent: {\n      const instance: Instance = finishedWork.stateNode;\n      if (instance != null) {\n        // Commit the work prepared earlier.\n        const newProps = finishedWork.memoizedProps;\n        // For hydration we reuse the update path but we treat the oldProps\n        // as the newProps. The updatePayload will contain the real change in\n        // this case.\n        const oldProps = current !== null ? current.memoizedProps : newProps;\n        const type = finishedWork.type;\n        // TODO: Type the updateQueue to be specific to host components.\n        const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n        finishedWork.updateQueue = null;\n        if (updatePayload !== null) {\n          commitUpdate(\n            instance,\n            updatePayload,\n            type,\n            oldProps,\n            newProps,\n            finishedWork,\n          );\n        }\n      }\n      return;\n    }\n    case HostText: {\n      invariant(\n        finishedWork.stateNode !== null,\n        'This should have a text node initialized. This error is likely ' +\n          'caused by a bug in React. Please file an issue.',\n      );\n      const textInstance: TextInstance = finishedWork.stateNode;\n      const newText: string = finishedWork.memoizedProps;\n      // For hydration we reuse the update path but we treat the oldProps\n      // as the newProps. The updatePayload will contain the real change in\n      // this case.\n      const oldText: string =\n        current !== null ? current.memoizedProps : newText;\n      commitTextUpdate(textInstance, oldText, newText);\n      return;\n    }\n    case HostRoot: {\n      if (supportsHydration) {\n        const root: FiberRoot = finishedWork.stateNode;\n        if (root.hydrate) {\n          // We've just hydrated. No need to hydrate again.\n          root.hydrate = false;\n          commitHydratedContainer(root.containerInfo);\n        }\n      }\n      return;\n    }\n    case Profiler: {\n      return;\n    }\n    case SuspenseComponent: {\n      commitSuspenseComponent(finishedWork);\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case SuspenseListComponent: {\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case IncompleteClassComponent: {\n      return;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalInstance = finishedWork.stateNode;\n        updateFundamentalComponent(fundamentalInstance);\n        return;\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        const scopeInstance = finishedWork.stateNode;\n        prepareScopeUpdate(scopeInstance, finishedWork);\n        return;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      const newState: OffscreenState | null = finishedWork.memoizedState;\n      const isHidden = newState !== null;\n      hideOrUnhideAllChildren(finishedWork, isHidden);\n      return;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction commitSuspenseComponent(finishedWork: Fiber) {\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n\n  if (newState !== null) {\n    markCommitTimeOfFallback();\n\n    if (supportsMutation) {\n      // Hide the Offscreen component that contains the primary children. TODO:\n      // Ideally, this effect would have been scheduled on the Offscreen fiber\n      // itself. That's how unhiding works: the Offscreen component schedules an\n      // effect on itself. However, in this case, the component didn't complete,\n      // so the fiber was never added to the effect list in the normal path. We\n      // could have appended it to the effect list in the Suspense component's\n      // second pass, but doing it this way is less complicated. This would be\n      // simpler if we got rid of the effect list and traversed the tree, like\n      // we're planning to do.\n      const primaryChildParent: Fiber = (finishedWork.child: any);\n      hideOrUnhideAllChildren(primaryChildParent, true);\n    }\n  }\n\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n          if (enableSuspenseCallback) {\n            const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n            if (hydrationCallbacks !== null) {\n              const onHydrated = hydrationCallbacks.onHydrated;\n              if (onHydrated) {\n                onHydrated(suspenseInstance);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork: Fiber) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    let retryCache = finishedWork.stateNode;\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n    wakeables.forEach(wakeable => {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      let retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n      if (!retryCache.has(wakeable)) {\n        if (enableSchedulerTracing) {\n          if (wakeable.__reactDoNotTraceInteractions !== true) {\n            retry = Schedule_tracing_wrap(retry);\n          }\n        }\n        retryCache.add(wakeable);\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nfunction commitResetTextContent(current: Fiber) {\n  if (!supportsMutation) {\n    return;\n  }\n  resetTextContent(current.stateNode);\n}\n\nexport {\n  commitBeforeMutationLifeCycles,\n  commitResetTextContent,\n  commitPlacement,\n  commitDeletion,\n  commitWork,\n  commitLifeCycles,\n  commitAttachRef,\n  commitDetachRef,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\nimport {HostComponent, HostText} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport {\n  findFiberRoot,\n  getBoundingRect,\n  getInstanceFromNode,\n  getTextContent,\n  isHiddenSubtree,\n  matchAccessibilityRole,\n  setFocusIfFocusable,\n  setupIntersectionObserver,\n  supportsTestSelectors,\n} from './ReactFiberHostConfig';\n\nlet COMPONENT_TYPE = 0b000;\nlet HAS_PSEUDO_CLASS_TYPE = 0b001;\nlet ROLE_TYPE = 0b010;\nlet TEST_NAME_TYPE = 0b011;\nlet TEXT_TYPE = 0b100;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\ntype Type = Symbol | number;\n\ntype ComponentSelector = {|\n  $$typeof: Type,\n  value: React$AbstractComponent<empty, mixed>,\n|};\n\ntype HasPsuedoClassSelector = {|\n  $$typeof: Type,\n  value: Array<Selector>,\n|};\n\ntype RoleSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TextSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TestNameSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype Selector =\n  | ComponentSelector\n  | HasPsuedoClassSelector\n  | RoleSelector\n  | TextSelector\n  | TestNameSelector;\n\nexport function createComponentSelector(\n  component: React$AbstractComponent<empty, mixed>,\n): ComponentSelector {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component,\n  };\n}\n\nexport function createHasPsuedoClassSelector(\n  selectors: Array<Selector>,\n): HasPsuedoClassSelector {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors,\n  };\n}\n\nexport function createRoleSelector(role: string): RoleSelector {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role,\n  };\n}\n\nexport function createTextSelector(text: string): TextSelector {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text,\n  };\n}\n\nexport function createTestNameSelector(id: string): TestNameSelector {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id,\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot: Instance): Fiber {\n  const maybeFiber = getInstanceFromNode((hostRoot: any));\n  if (maybeFiber != null) {\n    invariant(\n      typeof maybeFiber.memoizedProps['data-testname'] === 'string',\n      'Invalid host root specified. Should be either a React container or a node with a testname attribute.',\n    );\n    return ((maybeFiber: any): Fiber);\n  } else {\n    const fiberRoot = findFiberRoot(hostRoot);\n    invariant(\n      fiberRoot !== null,\n      'Could not find React container within specified host subtree.',\n    );\n    // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n    return ((fiberRoot: any).stateNode.current: Fiber);\n  }\n}\n\nfunction matchSelector(fiber: Fiber, selector: Selector): boolean {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n      break;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(\n        fiber,\n        ((selector: any): HasPsuedoClassSelector).value,\n      );\n    case ROLE_TYPE:\n      if (fiber.tag === HostComponent) {\n        const node = fiber.stateNode;\n        if (\n          matchAccessibilityRole(node, ((selector: any): RoleSelector).value)\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEXT_TYPE:\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n        const textContent = getTextContent(fiber);\n        if (\n          textContent !== null &&\n          textContent.indexOf(((selector: any): TextSelector).value) >= 0\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEST_NAME_TYPE:\n      if (fiber.tag === HostComponent) {\n        const dataTestID = fiber.memoizedProps['data-testname'];\n        if (\n          typeof dataTestID === 'string' &&\n          dataTestID.toLowerCase() ===\n            ((selector: any): TestNameSelector).value.toLowerCase()\n        ) {\n          return true;\n        }\n      }\n      break;\n    default:\n      invariant(null, 'Invalid selector type %s specified.', selector);\n      break;\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector: Selector): string | null {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      const displayName = getComponentName(selector.value) || 'Unknown';\n      return `<${displayName}>`;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return `:has(${selectorToString(selector) || ''})`;\n    case ROLE_TYPE:\n      return `[role=\"${((selector: any): RoleSelector).value}\"]`;\n    case TEXT_TYPE:\n      return `\"${((selector: any): TextSelector).value}\"`;\n    case TEST_NAME_TYPE:\n      return `[data-testname=\"${((selector: any): TestNameSelector).value}\"]`;\n    default:\n      invariant(null, 'Invalid selector type %s specified.', selector);\n      break;\n  }\n\n  return null;\n}\n\nfunction findPaths(root: Fiber, selectors: Array<Selector>): Array<Fiber> {\n  const matchingFibers: Array<Fiber> = [];\n\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n}\n\n// Same as findPaths but with eager bailout on first match\nfunction hasMatchingPaths(root: Fiber, selectors: Array<Selector>): boolean {\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function findAllNodes(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<Instance> {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const instanceRoots: Array<Instance> = [];\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const node = ((stack[index++]: any): Fiber);\n    if (node.tag === HostComponent) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n      instanceRoots.push(node.stateNode);\n    } else {\n      let child = node.child;\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\n\nexport function getFindAllNodesFailureDescription(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): string | null {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n\n  let maxSelectorIndex: number = 0;\n  const matchedNames = [];\n\n  // The logic of this loop should be kept in sync with findPaths()\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    const selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    const unmatchedNames = [];\n    for (let i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return (\n      'findAllNodes was able to match part of the selector:\\n' +\n      `  ${matchedNames.join(' > ')}\\n\\n` +\n      'No matching component was found for:\\n' +\n      `  ${unmatchedNames.join(' > ')}`\n    );\n  }\n\n  return null;\n}\n\nexport type BoundingRect = {|\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n|};\n\nexport function findBoundingRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<BoundingRect> {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const boundingRects: Array<BoundingRect> = [];\n  for (let i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (let i = boundingRects.length - 1; i > 0; i--) {\n    const targetRect = boundingRects[i];\n    const targetLeft = targetRect.x;\n    const targetRight = targetLeft + targetRect.width;\n    const targetTop = targetRect.y;\n    const targetBottom = targetTop + targetRect.height;\n\n    for (let j = i - 1; j >= 0; j--) {\n      if (i !== j) {\n        const otherRect = boundingRects[j];\n        const otherLeft = otherRect.x;\n        const otherRight = otherLeft + otherRect.width;\n        const otherTop = otherRect.y;\n        const otherBottom = otherTop + otherRect.height;\n\n        // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (\n          targetLeft >= otherLeft &&\n          targetTop >= otherTop &&\n          targetRight <= otherRight &&\n          targetBottom <= otherBottom\n        ) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetLeft === otherLeft &&\n          targetRect.width === otherRect.width &&\n          !(otherBottom < targetTop) &&\n          !(otherTop > targetBottom)\n        ) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetTop === otherTop &&\n          targetRect.height === otherRect.height &&\n          !(otherRight < targetLeft) &&\n          !(otherLeft > targetRight)\n        ) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\n\nexport function focusWithin(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): boolean {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n    if (fiber.tag === HostComponent) {\n      const node = fiber.stateNode;\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n    let child = fiber.child;\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\n\nconst commitHooks: Array<Function> = [];\n\nexport function onCommitRoot(): void {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(commitHook => commitHook());\n  }\n}\n\nexport type IntersectionObserverOptions = Object;\n\nexport type ObserveVisibleRectsCallback = (\n  intersections: Array<{ratio: number, rect: BoundingRect}>,\n) => void;\n\nexport function observeVisibleRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n  callback: (intersections: Array<{ratio: number, rect: BoundingRect}>) => void,\n  options?: IntersectionObserverOptions,\n): {|disconnect: () => void|} {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const {disconnect, observe, unobserve} = setupIntersectionObserver(\n    instanceRoots,\n    callback,\n    options,\n  );\n\n  // When React mutates the host environment, we may need to change what we're listening to.\n  const commitHook = () => {\n    const nextInstanceRoots = findAllNodes(hostRoot, selectors);\n\n    instanceRoots.forEach(target => {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n\n    nextInstanceRoots.forEach(target => {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n\n  return {\n    disconnect: () => {\n      // Stop listening for React mutations:\n      const index = commitHooks.indexOf(commitHook);\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      }\n\n      // Disconnect the host observer:\n      disconnect();\n    },\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nlet didWarnAboutMessageChannel = false;\nlet enqueueTaskImpl = null;\n\nexport default function enqueueTask(task: () => void) {\n  if (enqueueTaskImpl === null) {\n    try {\n      // read require off the module object to get around the bundlers.\n      // we don't want them to detect a require and bundle a Node polyfill.\n      const requireString = ('require' + Math.random()).slice(0, 7);\n      const nodeRequire = module && module[requireString];\n      // assuming we're in node, let's try to get node's\n      // version of setImmediate, bypassing fake timers if any.\n      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n    } catch (_err) {\n      // we're in a browser\n      // we can't use regular timers because they may still be faked\n      // so we try MessageChannel+postMessage instead\n      enqueueTaskImpl = function(callback: () => void) {\n        if (__DEV__) {\n          if (didWarnAboutMessageChannel === false) {\n            didWarnAboutMessageChannel = true;\n            if (typeof MessageChannel === 'undefined') {\n              console.error(\n                'This browser does not have a MessageChannel implementation, ' +\n                  'so enqueuing tasks via await act(async () => ...) will fail. ' +\n                  'Please file an issue at https://github.com/facebook/react/issues ' +\n                  'if you encounter this warning.',\n              );\n            }\n          }\n        }\n        const channel = new MessageChannel();\n        channel.port1.onmessage = callback;\n        channel.port2.postMessage(undefined);\n      };\n    }\n  }\n  return enqueueTaskImpl(task);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Thenable, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {Interaction} from 'scheduler/src/Tracing';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Effect as HookEffect} from './ReactFiberHooks.old';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  enableSuspenseServerRenderer,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableSchedulerTracing,\n  warnAboutUnmockedScheduler,\n  deferRenderPhaseUpdateToNextBatch,\n  decoupleUpdatePriorityFromScheduler,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableScopeAPI,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport invariant from 'shared/invariant';\n\nimport {\n  scheduleCallback,\n  cancelCallback,\n  getCurrentPriorityLevel,\n  runWithPriority,\n  shouldYield,\n  requestPaint,\n  now,\n  NoPriority as NoSchedulerPriority,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  flushSyncCallbackQueue,\n  scheduleSyncCallback,\n} from './SchedulerWithReactIntegration.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\nimport {\n  markCommitStarted,\n  markCommitStopped,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n} from './SchedulingProfiler';\n\n// The scheduler is imported here *only* to detect whether it's been mocked\nimport * as Scheduler from 'scheduler';\n\nimport {__interactionsRef, __subscriberRef} from 'scheduler/tracing';\n\nimport {\n  prepareForCommit,\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  warnsIfNotActing,\n  beforeActiveInstanceBlur,\n  afterActiveInstanceBlur,\n  clearContainer,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {\n  NoMode,\n  StrictMode,\n  ProfileMode,\n  BlockingMode,\n  ConcurrentMode,\n} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  ScopeComponent,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Update,\n  PlacementAndUpdate,\n  Deletion,\n  Ref,\n  ContentReset,\n  Snapshot,\n  Callback,\n  Passive,\n  PassiveUnmountPendingDev,\n  Incomplete,\n  HostEffectMask,\n  Hydrating,\n  HydratingAndUpdate,\n} from './ReactFiberFlags';\nimport {\n  NoLanePriority,\n  SyncLanePriority,\n  SyncBatchedLanePriority,\n  InputDiscreteLanePriority,\n  DefaultLanePriority,\n  NoLanes,\n  NoLane,\n  SyncLane,\n  SyncBatchedLane,\n  OffscreenLane,\n  NoTimestamp,\n  findUpdateLane,\n  findTransitionLane,\n  findRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  hasDiscreteLanes,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  getNextLanes,\n  returnNextLanesPriority,\n  setCurrentUpdateLanePriority,\n  getCurrentUpdateLanePriority,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootExpired,\n  markDiscreteUpdatesExpired,\n  markRootFinished,\n  schedulerPriorityToLanePriority,\n  lanePriorityToSchedulerPriority,\n} from './ReactFiberLane';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationLifeCycles as commitBeforeMutationEffectOnFiber,\n  commitLifeCycles as commitLayoutEffectOnFiber,\n  commitPlacement,\n  commitWork,\n  commitDeletion,\n  commitDetachRef,\n  commitAttachRef,\n  commitPassiveEffectDurations,\n  commitResetTextContent,\n  isSuspenseBoundaryBeingHidden,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  push as pushToStack,\n  pop as popFromStack,\n  createCursor,\n} from './ReactFiberStack.old';\n\nimport {\n  recordCommitTime,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentName from 'shared/getComponentName';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {onCommitRoot as onCommitRootDevTools} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\n\n// Used by `act`\nimport enqueueTask from 'shared/enqueueTask';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  IsSomeRendererActing,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b0000000;\nconst BatchedContext = /*               */ 0b0000001;\nconst EventContext = /*                 */ 0b0000010;\nconst DiscreteEventContext = /*         */ 0b0000100;\nconst LegacyUnbatchedContext = /*       */ 0b0001000;\nconst RenderContext = /*                */ 0b0010000;\nconst CommitContext = /*                */ 0b0100000;\nexport const RetryAfterError = /*       */ 0b1000000;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5;\nconst RootIncomplete = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\nlet subtreeRenderLanes: Lanes = NoLanes;\nconst subtreeRenderLanesCursor: StackCursor<Lanes> = createCursor(NoLanes);\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootIncomplete;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\nlet workInProgressRootIncludedLanes: Lanes = NoLanes;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n\nlet mostRecentlyUpdatedRoot: FiberRoot | null = null;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet nextEffect: Fiber | null = null;\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsRenderPriority: ReactPriorityLevel = NoSchedulerPriority;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveHookEffectsMount: Array<HookEffect | Fiber> = [];\nlet pendingPassiveHookEffectsUnmount: Array<HookEffect | Fiber> = [];\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\n\nlet rootsWithPendingDiscreteUpdates: Set<FiberRoot> | null = null;\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\n\n// Marks the need to reschedule pending interactions at these lanes\n// during the commit phase. This enables them to be traced across components\n// that spawn new work during render. E.g. hidden boundaries, suspended SSR\n// hydration or SuspenseList.\n// TODO: Can use a bitmask instead of an array\nlet spawnedWorkDuringRender: null | Array<Lane | Lanes> = null;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventWipLanes: Lanes = NoLanes;\nlet currentEventPendingLanes: Lanes = NoLanes;\n\n// Dev only flag that tracks if passive effects are currently being flushed.\n// We warn about state updates for unmounted components differently in this case.\nlet isFlushingPassiveEffects = false;\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & BlockingMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if ((mode & ConcurrentMode) === NoMode) {\n    return getCurrentPriorityLevel() === ImmediateSchedulerPriority\n      ? (SyncLane: Lane)\n      : (SyncBatchedLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (expiration time) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  // The algorithm for assigning an update to a lane should be stable for all\n  // updates at the same priority within the same event. To do this, the inputs\n  // to the algorithm must be the same. For example, we use the `renderLanes`\n  // to avoid choosing a lane that is already in the middle of rendering.\n  //\n  // However, the \"included\" lanes could be mutated in between updates in the\n  // same event, like if you perform an update inside `flushSync`. Or any other\n  // code path that might call `prepareFreshStack`.\n  //\n  // The trick we use is to cache the first of each of these inputs within an\n  // event. Then reset the cached values once we can be sure the event is over.\n  // Our heuristic for that is whenever we enter a concurrent work loop.\n  //\n  // We'll do the same for `currentEventPendingLanes` below.\n  if (currentEventWipLanes === NoLanes) {\n    currentEventWipLanes = workInProgressRootIncludedLanes;\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (currentEventPendingLanes !== NoLanes) {\n      currentEventPendingLanes =\n        mostRecentlyUpdatedRoot !== null\n          ? mostRecentlyUpdatedRoot.pendingLanes\n          : NoLanes;\n    }\n    return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);\n  }\n\n  // TODO: Remove this dependency on the Scheduler priority.\n  // To do that, we're replacing it with an update lane priority.\n  const schedulerPriority = getCurrentPriorityLevel();\n\n  // The old behavior was using the priority level of the Scheduler.\n  // This couples React to the Scheduler internals, so we're replacing it\n  // with the currentUpdateLanePriority above. As an example of how this\n  // could be problematic, if we're not inside `Scheduler.runWithPriority`,\n  // then we'll get the priority of the current running Scheduler task,\n  // which is probably not what we want.\n  let lane;\n  if (\n    // TODO: Temporary. We're removing the concept of discrete updates.\n    (executionContext & DiscreteEventContext) !== NoContext &&\n    schedulerPriority === UserBlockingSchedulerPriority\n  ) {\n    lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);\n  } else {\n    const schedulerLanePriority = schedulerPriorityToLanePriority(\n      schedulerPriority,\n    );\n\n    if (decoupleUpdatePriorityFromScheduler) {\n      // In the new strategy, we will track the current update lane priority\n      // inside React and use that priority to select a lane for this update.\n      // For now, we're just logging when they're different so we can assess.\n      const currentUpdateLanePriority = getCurrentUpdateLanePriority();\n\n      if (\n        schedulerLanePriority !== currentUpdateLanePriority &&\n        currentUpdateLanePriority !== NoLanePriority\n      ) {\n        if (__DEV__) {\n          console.error(\n            'Expected current scheduler lane priority %s to match current update lane priority %s',\n            schedulerLanePriority,\n            currentUpdateLanePriority,\n          );\n        }\n      }\n    }\n\n    lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);\n  }\n\n  return lane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & BlockingMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if ((mode & ConcurrentMode) === NoMode) {\n    return getCurrentPriorityLevel() === ImmediateSchedulerPriority\n      ? (SyncLane: Lane)\n      : (SyncBatchedLane: Lane);\n  }\n\n  // See `requestUpdateLane` for explanation of `currentEventWipLanes`\n  if (currentEventWipLanes === NoLanes) {\n    currentEventWipLanes = workInProgressRootIncludedLanes;\n  }\n  return findRetryLane(currentEventWipLanes);\n}\n\nexport function scheduleUpdateOnFiber(\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n) {\n  checkForNestedUpdates();\n  warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n  const root = markUpdateLaneFromFiberToRoot(fiber, lane);\n  if (root === null) {\n    warnAboutUpdateOnUnmountedFiberInDEV(fiber);\n    return null;\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (root === workInProgressRoot) {\n    // Received an update to a tree that's in the middle of rendering. Mark\n    // that there was an interleaved update work on this root. Unless the\n    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n    // phase update. In that case, we don't treat render phase updates as if\n    // they were interleaved, for backwards compat reasons.\n    if (\n      deferRenderPhaseUpdateToNextBatch ||\n      (executionContext & RenderContext) === NoContext\n    ) {\n      workInProgressRootUpdatedLanes = mergeLanes(\n        workInProgressRootUpdatedLanes,\n        lane,\n      );\n    }\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n      // The root already suspended with a delay, which means this render\n      // definitely won't finish. Since we have a new update, let's mark it as\n      // suspended now, right before marking the incoming update. This has the\n      // effect of interrupting the current render and switching to the update.\n      // TODO: Make sure this doesn't override pings that happen while we've\n      // already started rendering.\n      markRootSuspended(root, workInProgressRootRenderLanes);\n    }\n  }\n\n  // TODO: requestUpdateLanePriority also reads the priority. Pass the\n  // priority as an argument to that function and this one.\n  const priorityLevel = getCurrentPriorityLevel();\n\n  if (lane === SyncLane) {\n    if (\n      // Check if we're inside unbatchedUpdates\n      (executionContext & LegacyUnbatchedContext) !== NoContext &&\n      // Check if we're not already rendering\n      (executionContext & (RenderContext | CommitContext)) === NoContext\n    ) {\n      // Register pending interactions on the root to avoid losing traced interaction data.\n      schedulePendingInteractions(root, lane);\n\n      // This is a legacy edge case. The initial mount of a ReactDOM.render-ed\n      // root inside of batchedUpdates should be synchronous, but layout updates\n      // should be deferred until the end of the batch.\n      performSyncWorkOnRoot(root);\n    } else {\n      ensureRootIsScheduled(root, eventTime);\n      schedulePendingInteractions(root, lane);\n      if (executionContext === NoContext) {\n        // Flush the synchronous work now, unless we're already working or inside\n        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n        // scheduleCallbackForFiber to preserve the ability to schedule a callback\n        // without immediately flushing it. We only do this for user-initiated\n        // updates, to preserve historical behavior of legacy mode.\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    // Schedule a discrete update but only if it's not Sync.\n    if (\n      (executionContext & DiscreteEventContext) !== NoContext &&\n      // Only updates at user-blocking priority or greater are considered\n      // discrete, even inside a discrete event.\n      (priorityLevel === UserBlockingSchedulerPriority ||\n        priorityLevel === ImmediateSchedulerPriority)\n    ) {\n      // This is the result of a discrete event. Track the lowest priority\n      // discrete update per root so we can flush them early, if needed.\n      if (rootsWithPendingDiscreteUpdates === null) {\n        rootsWithPendingDiscreteUpdates = new Set([root]);\n      } else {\n        rootsWithPendingDiscreteUpdates.add(root);\n      }\n    }\n    // Schedule other updates after in case the callback is sync.\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, lane);\n  }\n\n  // We use this when assigning a lane for a transition inside\n  // `requestUpdateLane`. We assume it's the same as the root being updated,\n  // since in the common case of a single root app it probably is. If it's not\n  // the same root, then it's not a huge deal, we just might batch more stuff\n  // together more than necessary.\n  mostRecentlyUpdatedRoot = root;\n}\n\n// This is split into a separate function so we can mark a fiber with pending\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  if (__DEV__) {\n    if (\n      alternate === null &&\n      (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n  // Walk the parent path to the root and update the child expiration time.\n  let node = sourceFiber;\n  let parent = sourceFiber.return;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      if (__DEV__) {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    node = parent;\n    parent = parent.return;\n  }\n  if (node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  // This returns the priority level computed during the `getNextLanes` call.\n  const newCallbackPriority = returnNextLanesPriority();\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n      root.callbackNode = null;\n      root.callbackPriority = NoLanePriority;\n    }\n    return;\n  }\n\n  // Check if there's an existing task. We may be able to reuse it.\n  if (existingCallbackNode !== null) {\n    const existingCallbackPriority = root.callbackPriority;\n    if (existingCallbackPriority === newCallbackPriority) {\n      // The priority hasn't changed. We can reuse the existing task. Exit.\n      return;\n    }\n    // The priority changed. Cancel the existing callback. We'll schedule a new\n    // one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLanePriority) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    newCallbackNode = scheduleSyncCallback(\n      performSyncWorkOnRoot.bind(null, root),\n    );\n  } else if (newCallbackPriority === SyncBatchedLanePriority) {\n    newCallbackNode = scheduleCallback(\n      ImmediateSchedulerPriority,\n      performSyncWorkOnRoot.bind(null, root),\n    );\n  } else {\n    const schedulerPriorityLevel = lanePriorityToSchedulerPriority(\n      newCallbackPriority,\n    );\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root) {\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventWipLanes = NoLanes;\n  currentEventPendingLanes = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next expiration time to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  let exitStatus = renderRootConcurrent(root, lanes);\n\n  if (\n    includesSomeLane(\n      workInProgressRootIncludedLanes,\n      workInProgressRootUpdatedLanes,\n    )\n  ) {\n    // The render included lanes that were updated during the render phase.\n    // For example, when unhiding a hidden tree, we include all the lanes\n    // that were previously skipped when the tree was hidden. That set of\n    // lanes is a superset of the lanes we started rendering with.\n    //\n    // So we'll throw out the current work and restart.\n    prepareFreshStack(root, NoLanes);\n  } else if (exitStatus !== RootIncomplete) {\n    if (exitStatus === RootErrored) {\n      executionContext |= RetryAfterError;\n\n      // If an error occurred during hydration,\n      // discard server response and fall back to client side render.\n      if (root.hydrate) {\n        root.hydrate = false;\n        clearContainer(root.containerInfo);\n      }\n\n      // If something threw an error, try rendering one more time. We'll render\n      // synchronously to block concurrent data mutations, and we'll includes\n      // all pending updates are included. If it still fails after the second\n      // attempt, we'll give up and commit the resulting tree.\n      lanes = getLanesToRetrySynchronouslyOnError(root);\n      if (lanes !== NoLanes) {\n        exitStatus = renderRootSync(root, lanes);\n      }\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    // We now have a consistent tree. The next step is either to commit it,\n    // or, if something suspended, wait to commit it after a timeout.\n    const finishedWork: Fiber = (root.current.alternate: any);\n    root.finishedWork = finishedWork;\n    root.finishedLanes = lanes;\n    finishConcurrentRender(root, exitStatus, lanes);\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootIncomplete:\n    case RootFatalErrored: {\n      invariant(false, 'Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(root);\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(root);\n      break;\n    }\n    default: {\n      invariant(false, 'Unknown root exit status.');\n    }\n  }\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  flushPassiveEffects();\n\n  let lanes;\n  let exitStatus;\n  if (\n    root === workInProgressRoot &&\n    includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)\n  ) {\n    // There's a partial tree, and at least one of its lanes has expired. Finish\n    // rendering it before rendering the rest of the expired work.\n    lanes = workInProgressRootRenderLanes;\n    exitStatus = renderRootSync(root, lanes);\n    if (\n      includesSomeLane(\n        workInProgressRootIncludedLanes,\n        workInProgressRootUpdatedLanes,\n      )\n    ) {\n      // The render included lanes that were updated during the render phase.\n      // For example, when unhiding a hidden tree, we include all the lanes\n      // that were previously skipped when the tree was hidden. That set of\n      // lanes is a superset of the lanes we started rendering with.\n      //\n      // Note that this only happens when part of the tree is rendered\n      // concurrently. If the whole tree is rendered synchronously, then there\n      // are no interleaved events.\n      lanes = getNextLanes(root, lanes);\n      exitStatus = renderRootSync(root, lanes);\n    }\n  } else {\n    lanes = getNextLanes(root, NoLanes);\n    exitStatus = renderRootSync(root, lanes);\n  }\n\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    executionContext |= RetryAfterError;\n\n    // If an error occurred during hydration,\n    // discard server response and fall back to client side render.\n    if (root.hydrate) {\n      root.hydrate = false;\n      clearContainer(root.containerInfo);\n    }\n\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    lanes = getLanesToRetrySynchronouslyOnError(root);\n    if (lanes !== NoLanes) {\n      exitStatus = renderRootSync(root, lanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root);\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  markRootExpired(root, lanes);\n  ensureRootIsScheduled(root, now());\n  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n    resetRenderTimer();\n    flushSyncCallbackQueue();\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function flushDiscreteUpdates() {\n  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.\n  // However, `act` uses `batchedUpdates`, so there's no way to distinguish\n  // those two cases. Need to fix this before exposing flushDiscreteUpdates\n  // as a public API.\n  if (\n    (executionContext & (BatchedContext | RenderContext | CommitContext)) !==\n    NoContext\n  ) {\n    if (__DEV__) {\n      if ((executionContext & RenderContext) !== NoContext) {\n        console.error(\n          'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' +\n            'already rendering.',\n        );\n      }\n    }\n    // We're already rendering, so we can't synchronously flush pending work.\n    // This is probably a nested event dispatch triggered by a lifecycle/effect,\n    // like `el.focus()`. Exit.\n    return;\n  }\n  flushPendingDiscreteUpdates();\n  // If the discrete updates scheduled passive effects, flush them now so that\n  // they fire before the next serial event.\n  flushPassiveEffects();\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(DefaultLanePriority);\n      return runWithPriority(NormalSchedulerPriority, fn);\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n    }\n  } else {\n    return runWithPriority(NormalSchedulerPriority, fn);\n  }\n}\n\nfunction flushPendingDiscreteUpdates() {\n  if (rootsWithPendingDiscreteUpdates !== null) {\n    // For each root with pending discrete updates, schedule a callback to\n    // immediately flush them.\n    const roots = rootsWithPendingDiscreteUpdates;\n    rootsWithPendingDiscreteUpdates = null;\n    roots.forEach(root => {\n      markDiscreteUpdatesExpired(root);\n      ensureRootIsScheduled(root, now());\n    });\n  }\n  // Now flush the immediate queue.\n  flushSyncCallbackQueue();\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function batchedEventUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= EventContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= DiscreteEventContext;\n\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(InputDiscreteLanePriority);\n      return runWithPriority(\n        UserBlockingSchedulerPriority,\n        fn.bind(null, a, b, c, d),\n      );\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    try {\n      return runWithPriority(\n        UserBlockingSchedulerPriority,\n        fn.bind(null, a, b, c, d),\n      );\n    } finally {\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  }\n}\n\nexport function unbatchedUpdates<A, R>(fn: (a: A) => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext &= ~BatchedContext;\n  executionContext |= LegacyUnbatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function flushSync<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {\n    if (__DEV__) {\n      console.error(\n        'flushSync was called from inside a lifecycle method. React cannot ' +\n          'flush when React is already rendering. Consider moving this call to ' +\n          'a scheduler task or micro task.',\n      );\n    }\n    return fn(a);\n  }\n  executionContext |= BatchedContext;\n\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(SyncLanePriority);\n      if (fn) {\n        return runWithPriority(ImmediateSchedulerPriority, fn.bind(null, a));\n      } else {\n        return (undefined: $FlowFixMe);\n      }\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n      executionContext = prevExecutionContext;\n      // Flush the immediate callbacks that were scheduled during this batch.\n      // Note that this will happen even if batchedUpdates is higher up\n      // the stack.\n      flushSyncCallbackQueue();\n    }\n  } else {\n    try {\n      if (fn) {\n        return runWithPriority(ImmediateSchedulerPriority, fn.bind(null, a));\n      } else {\n        return (undefined: $FlowFixMe);\n      }\n    } finally {\n      executionContext = prevExecutionContext;\n      // Flush the immediate callbacks that were scheduled during this batch.\n      // Note that this will happen even if batchedUpdates is higher up\n      // the stack.\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(SyncLanePriority);\n      runWithPriority(ImmediateSchedulerPriority, fn);\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    try {\n      runWithPriority(ImmediateSchedulerPriority, fn);\n    } finally {\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  }\n}\n\nexport function pushRenderLanes(fiber: Fiber, lanes: Lanes) {\n  pushToStack(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(\n    workInProgressRootIncludedLanes,\n    lanes,\n  );\n}\n\nexport function popRenderLanes(fiber: Fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  popFromStack(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      unwindInterruptedWork(interruptedWork);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  workInProgress = createWorkInProgress(root.current, null);\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootIncomplete;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n\n  if (enableSchedulerTracing) {\n    spawnedWorkDuringRender = null;\n  }\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nfunction pushInteractions(root) {\n  if (enableSchedulerTracing) {\n    const prevInteractions: Set<Interaction> | null = __interactionsRef.current;\n    __interactionsRef.current = root.memoizedInteractions;\n    return prevInteractions;\n  }\n  return null;\n}\n\nfunction popInteractions(prevInteractions) {\n  if (enableSchedulerTracing) {\n    __interactionsRef.current = prevInteractions;\n  }\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootIncomplete ||\n    workInProgressRootExitStatus === RootSuspended\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError() {\n  if (workInProgressRootExitStatus !== RootCompleted) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootIncomplete;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    prepareFreshStack(root, lanes);\n    startWorkOnPendingInteractions(root, lanes);\n  }\n\n  const prevInteractions = pushInteractions(root);\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n  }\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    invariant(\n      false,\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n    startWorkOnPendingInteractions(root, lanes);\n  }\n\n  const prevInteractions = pushInteractions(root);\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n  }\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootIncomplete;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n\n      resetChildLanes(completedWork);\n\n      if (\n        returnFiber !== null &&\n        // Do not append effects to parents if a sibling failed to complete\n        (returnFiber.flags & Incomplete) === NoFlags\n      ) {\n        // Append all the effects of the subtree and this fiber onto the effect\n        // list of the parent. The completion order of the children affects the\n        // side-effect order.\n        if (returnFiber.firstEffect === null) {\n          returnFiber.firstEffect = completedWork.firstEffect;\n        }\n        if (completedWork.lastEffect !== null) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = completedWork.firstEffect;\n          }\n          returnFiber.lastEffect = completedWork.lastEffect;\n        }\n\n        // If this fiber had side-effects, we append it AFTER the children's\n        // side-effects. We can perform certain side-effects earlier if needed,\n        // by doing multiple passes over the effect list. We don't want to\n        // schedule our own side-effect on our own list because if end up\n        // reusing children we'll schedule this effect onto itself since we're\n        // at the end.\n        const flags = completedWork.flags;\n\n        // Skip both NoWork and PerformedWork tags when creating the effect\n        // list. PerformedWork effect is read by React DevTools but shouldn't be\n        // committed.\n        if (flags > PerformedWork) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = completedWork;\n          } else {\n            returnFiber.firstEffect = completedWork;\n          }\n          returnFiber.lastEffect = completedWork;\n        }\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(completedWork, subtreeRenderLanes);\n\n      // Because this fiber did not complete, don't reset its expiration time.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its effect list.\n        returnFiber.firstEffect = returnFiber.lastEffect = null;\n        returnFiber.flags |= Incomplete;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction resetChildLanes(completedWork: Fiber) {\n  if (\n    // TODO: Move this check out of the hot path by moving `resetChildLanes`\n    // to switch statement in `completeWork`.\n    (completedWork.tag === LegacyHiddenComponent ||\n      completedWork.tag === OffscreenComponent) &&\n    completedWork.memoizedState !== null &&\n    !includesSomeLane(subtreeRenderLanes, (OffscreenLane: Lane)) &&\n    (completedWork.mode & ConcurrentMode) !== NoLanes\n  ) {\n    // The children of this component are hidden. Don't bubble their\n    // expiration times.\n    return;\n  }\n\n  let newChildLanes = NoLanes;\n\n  // Bubble up the earliest expiration time.\n  if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n    // In profiling mode, resetChildExpirationTime is also used to reset\n    // profiler durations.\n    let actualDuration = completedWork.actualDuration;\n    let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n    // When a fiber is cloned, its actualDuration is reset to 0. This value will\n    // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n    // When work is done, it should bubble to the parent's actualDuration. If\n    // the fiber has not been cloned though, (meaning no work was done), then\n    // this value will reflect the amount of time spent working on a previous\n    // render. In that case it should not bubble. We determine whether it was\n    // cloned by comparing the child pointer.\n    const shouldBubbleActualDurations =\n      completedWork.alternate === null ||\n      completedWork.child !== completedWork.alternate.child;\n\n    let child = completedWork.child;\n    while (child !== null) {\n      newChildLanes = mergeLanes(\n        newChildLanes,\n        mergeLanes(child.lanes, child.childLanes),\n      );\n      if (shouldBubbleActualDurations) {\n        actualDuration += child.actualDuration;\n      }\n      treeBaseDuration += child.treeBaseDuration;\n      child = child.sibling;\n    }\n\n    const isTimedOutSuspense =\n      completedWork.tag === SuspenseComponent &&\n      completedWork.memoizedState !== null;\n    if (isTimedOutSuspense) {\n      // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n      const primaryChildFragment = completedWork.child;\n      if (primaryChildFragment !== null) {\n        treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n      }\n    }\n\n    completedWork.actualDuration = actualDuration;\n    completedWork.treeBaseDuration = treeBaseDuration;\n  } else {\n    let child = completedWork.child;\n    while (child !== null) {\n      newChildLanes = mergeLanes(\n        newChildLanes,\n        mergeLanes(child.lanes, child.childLanes),\n      );\n      child = child.sibling;\n    }\n  }\n\n  completedWork.childLanes = newChildLanes;\n}\n\nfunction commitRoot(root) {\n  const renderPriorityLevel = getCurrentPriorityLevel();\n  runWithPriority(\n    ImmediateSchedulerPriority,\n    commitRootImpl.bind(null, root, renderPriorityLevel),\n  );\n  return null;\n}\n\nfunction commitRootImpl(root, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  invariant(\n    finishedWork !== root.current,\n    'Cannot commit the same tree as before. This error is likely caused by ' +\n      'a bug in React. Please file an issue.',\n  );\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n\n  // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  // Clear already finished discrete updates in case that a later call of\n  // `flushDiscreteUpdates` starts a useless render pass which may cancels\n  // a scheduled timeout.\n  if (rootsWithPendingDiscreteUpdates !== null) {\n    if (\n      !hasDiscreteLanes(remainingLanes) &&\n      rootsWithPendingDiscreteUpdates.has(root)\n    ) {\n      rootsWithPendingDiscreteUpdates.delete(root);\n    }\n  }\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // Get the list of effects.\n  let firstEffect;\n  if (finishedWork.flags > PerformedWork) {\n    // A fiber's effect list consists only of its children, not itself. So if\n    // the root has an effect, we need to add it to the end of the list. The\n    // resulting list is the set that would belong to the root's parent, if it\n    // had one; that is, all the effects in the tree including the root.\n    if (finishedWork.lastEffect !== null) {\n      finishedWork.lastEffect.nextEffect = finishedWork;\n      firstEffect = finishedWork.firstEffect;\n    } else {\n      firstEffect = finishedWork;\n    }\n  } else {\n    // There is no effect on the root.\n    firstEffect = finishedWork.firstEffect;\n  }\n\n  if (firstEffect !== null) {\n    let previousLanePriority;\n    if (decoupleUpdatePriorityFromScheduler) {\n      previousLanePriority = getCurrentUpdateLanePriority();\n      setCurrentUpdateLanePriority(SyncLanePriority);\n    }\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n    const prevInteractions = pushInteractions(root);\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    focusedInstanceHandle = prepareForCommit(root.containerInfo);\n    shouldFireAfterActiveInstanceBlur = false;\n\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(null, commitBeforeMutationEffects, null);\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitBeforeMutationEffects();\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    // We no longer need to track the active instance fiber\n    focusedInstanceHandle = null;\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(\n          null,\n          commitMutationEffects,\n          null,\n          root,\n          renderPriorityLevel,\n        );\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitMutationEffects(root, renderPriorityLevel);\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    if (shouldFireAfterActiveInstanceBlur) {\n      afterActiveInstanceBlur();\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitLayoutEffects(root, lanes);\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    nextEffect = null;\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    if (enableSchedulerTracing) {\n      popInteractions(((prevInteractions: any): Set<Interaction>));\n    }\n    executionContext = prevExecutionContext;\n\n    if (decoupleUpdatePriorityFromScheduler && previousLanePriority != null) {\n      // Reset the priority to the previous non-sync value.\n      setCurrentUpdateLanePriority(previousLanePriority);\n    }\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n    pendingPassiveEffectsRenderPriority = renderPriorityLevel;\n  } else {\n    // We are done with the effect chain at this point so let's clear the\n    // nextEffect pointers to assist with GC. If we have passive effects, we'll\n    // clear this in flushPassiveEffects.\n    nextEffect = firstEffect;\n    while (nextEffect !== null) {\n      const nextNextEffect = nextEffect.nextEffect;\n      nextEffect.nextEffect = null;\n      if (nextEffect.flags & Deletion) {\n        detachFiberAfterEffects(nextEffect);\n      }\n      nextEffect = nextNextEffect;\n    }\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  if (remainingLanes !== NoLanes) {\n    if (enableSchedulerTracing) {\n      if (spawnedWorkDuringRender !== null) {\n        const expirationTimes = spawnedWorkDuringRender;\n        spawnedWorkDuringRender = null;\n        for (let i = 0; i < expirationTimes.length; i++) {\n          scheduleInteractions(\n            root,\n            expirationTimes[i],\n            root.memoizedInteractions,\n          );\n        }\n      }\n      schedulePendingInteractions(root, remainingLanes);\n    }\n  } else {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (enableSchedulerTracing) {\n    if (!rootDidHavePassiveEffects) {\n      // If there are no passive effects, then we can complete the pending interactions.\n      // Otherwise, we'll wait until after the passive effects are flushed.\n      // Wait to do this until after remaining work has been scheduled,\n      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.\n      finishPendingInteractions(root, lanes);\n    }\n  }\n\n  if (remainingLanes === SyncLane) {\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    // This is a legacy edge case. We just committed the initial mount of\n    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired\n    // synchronously, but layout updates should be deferred until the end\n    // of the batch.\n    return null;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbackQueue();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction commitBeforeMutationEffects() {\n  while (nextEffect !== null) {\n    const current = nextEffect.alternate;\n\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      if ((nextEffect.flags & Deletion) !== NoFlags) {\n        if (doesFiberContain(nextEffect, focusedInstanceHandle)) {\n          shouldFireAfterActiveInstanceBlur = true;\n          beforeActiveInstanceBlur();\n        }\n      } else {\n        // TODO: Move this out of the hot path using a dedicated effect tag.\n        if (\n          nextEffect.tag === SuspenseComponent &&\n          isSuspenseBoundaryBeingHidden(current, nextEffect) &&\n          doesFiberContain(nextEffect, focusedInstanceHandle)\n        ) {\n          shouldFireAfterActiveInstanceBlur = true;\n          beforeActiveInstanceBlur();\n        }\n      }\n    }\n\n    const flags = nextEffect.flags;\n    if ((flags & Snapshot) !== NoFlags) {\n      setCurrentDebugFiberInDEV(nextEffect);\n\n      commitBeforeMutationEffectOnFiber(current, nextEffect);\n\n      resetCurrentDebugFiberInDEV();\n    }\n    if ((flags & Passive) !== NoFlags) {\n      // If there are passive effects, schedule a callback to flush at\n      // the earliest opportunity.\n      if (!rootDoesHavePassiveEffects) {\n        rootDoesHavePassiveEffects = true;\n        scheduleCallback(NormalSchedulerPriority, () => {\n          flushPassiveEffects();\n          return null;\n        });\n      }\n    }\n    nextEffect = nextEffect.nextEffect;\n  }\n}\n\nfunction commitMutationEffects(\n  root: FiberRoot,\n  renderPriorityLevel: ReactPriorityLevel,\n) {\n  // TODO: Should probably move the bulk of this function to commitWork.\n  while (nextEffect !== null) {\n    setCurrentDebugFiberInDEV(nextEffect);\n\n    const flags = nextEffect.flags;\n\n    if (flags & ContentReset) {\n      commitResetTextContent(nextEffect);\n    }\n\n    if (flags & Ref) {\n      const current = nextEffect.alternate;\n      if (current !== null) {\n        commitDetachRef(current);\n      }\n      if (enableScopeAPI) {\n        // TODO: This is a temporary solution that allowed us to transition away\n        // from React Flare on www.\n        if (nextEffect.tag === ScopeComponent) {\n          commitAttachRef(nextEffect);\n        }\n      }\n    }\n\n    // The following switch statement is only concerned about placement,\n    // updates, and deletions. To avoid needing to add a case for every possible\n    // bitmap value, we remove the secondary effects from the effect tag and\n    // switch on that value.\n    const primaryFlags = flags & (Placement | Update | Deletion | Hydrating);\n    switch (primaryFlags) {\n      case Placement: {\n        commitPlacement(nextEffect);\n        // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        // TODO: findDOMNode doesn't rely on this any more but isMounted does\n        // and isMounted is deprecated anyway so we should be able to kill this.\n        nextEffect.flags &= ~Placement;\n        break;\n      }\n      case PlacementAndUpdate: {\n        // Placement\n        commitPlacement(nextEffect);\n        // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        nextEffect.flags &= ~Placement;\n\n        // Update\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Hydrating: {\n        nextEffect.flags &= ~Hydrating;\n        break;\n      }\n      case HydratingAndUpdate: {\n        nextEffect.flags &= ~Hydrating;\n\n        // Update\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Update: {\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Deletion: {\n        commitDeletion(root, nextEffect, renderPriorityLevel);\n        break;\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n    nextEffect = nextEffect.nextEffect;\n  }\n}\n\nfunction commitLayoutEffects(root: FiberRoot, committedLanes: Lanes) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logLayoutEffectsStarted(committedLanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markLayoutEffectsStarted(committedLanes);\n  }\n\n  // TODO: Should probably move the bulk of this function to commitWork.\n  while (nextEffect !== null) {\n    setCurrentDebugFiberInDEV(nextEffect);\n\n    const flags = nextEffect.flags;\n\n    if (flags & (Update | Callback)) {\n      const current = nextEffect.alternate;\n      commitLayoutEffectOnFiber(root, current, nextEffect, committedLanes);\n    }\n\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (flags & Ref && nextEffect.tag !== ScopeComponent) {\n        commitAttachRef(nextEffect);\n      }\n    } else {\n      if (flags & Ref) {\n        commitAttachRef(nextEffect);\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n    nextEffect = nextEffect.nextEffect;\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logLayoutEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markLayoutEffectsStopped();\n  }\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  if (pendingPassiveEffectsRenderPriority !== NoSchedulerPriority) {\n    const priorityLevel =\n      pendingPassiveEffectsRenderPriority > NormalSchedulerPriority\n        ? NormalSchedulerPriority\n        : pendingPassiveEffectsRenderPriority;\n    pendingPassiveEffectsRenderPriority = NoSchedulerPriority;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        setCurrentUpdateLanePriority(\n          schedulerPriorityToLanePriority(priorityLevel),\n        );\n        return runWithPriority(priorityLevel, flushPassiveEffectsImpl);\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n      }\n    } else {\n      return runWithPriority(priorityLevel, flushPassiveEffectsImpl);\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nexport function enqueuePendingPassiveHookEffectMount(\n  fiber: Fiber,\n  effect: HookEffect,\n): void {\n  pendingPassiveHookEffectsMount.push(effect, fiber);\n  if (!rootDoesHavePassiveEffects) {\n    rootDoesHavePassiveEffects = true;\n    scheduleCallback(NormalSchedulerPriority, () => {\n      flushPassiveEffects();\n      return null;\n    });\n  }\n}\n\nexport function enqueuePendingPassiveHookEffectUnmount(\n  fiber: Fiber,\n  effect: HookEffect,\n): void {\n  pendingPassiveHookEffectsUnmount.push(effect, fiber);\n  if (__DEV__) {\n    fiber.flags |= PassiveUnmountPendingDev;\n    const alternate = fiber.alternate;\n    if (alternate !== null) {\n      alternate.flags |= PassiveUnmountPendingDev;\n    }\n  }\n  if (!rootDoesHavePassiveEffects) {\n    rootDoesHavePassiveEffects = true;\n    scheduleCallback(NormalSchedulerPriority, () => {\n      flushPassiveEffects();\n      return null;\n    });\n  }\n}\n\nfunction invokePassiveEffectCreate(effect: HookEffect): void {\n  const create = effect.create;\n  effect.destroy = create();\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  pendingPassiveEffectsLanes = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Cannot flush passive effects while already rendering.',\n  );\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = true;\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  const prevInteractions = pushInteractions(root);\n\n  // It's important that ALL pending passive effect destroy functions are called\n  // before ANY passive effect create functions are called.\n  // Otherwise effects in sibling components might interfere with each other.\n  // e.g. a destroy function in one component may unintentionally override a ref\n  // value set by a create function in another component.\n  // Layout effects have the same constraint.\n\n  // First pass: Destroy stale passive effects.\n  const unmountEffects = pendingPassiveHookEffectsUnmount;\n  pendingPassiveHookEffectsUnmount = [];\n  for (let i = 0; i < unmountEffects.length; i += 2) {\n    const effect = ((unmountEffects[i]: any): HookEffect);\n    const fiber = ((unmountEffects[i + 1]: any): Fiber);\n    const destroy = effect.destroy;\n    effect.destroy = undefined;\n\n    if (__DEV__) {\n      fiber.flags &= ~PassiveUnmountPendingDev;\n      const alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.flags &= ~PassiveUnmountPendingDev;\n      }\n    }\n\n    if (typeof destroy === 'function') {\n      if (__DEV__) {\n        setCurrentDebugFiberInDEV(fiber);\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          startPassiveEffectTimer();\n          invokeGuardedCallback(null, destroy, null);\n          recordPassiveEffectDuration(fiber);\n        } else {\n          invokeGuardedCallback(null, destroy, null);\n        }\n        if (hasCaughtError()) {\n          invariant(fiber !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(fiber, error);\n        }\n        resetCurrentDebugFiberInDEV();\n      } else {\n        try {\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            fiber.mode & ProfileMode\n          ) {\n            try {\n              startPassiveEffectTimer();\n              destroy();\n            } finally {\n              recordPassiveEffectDuration(fiber);\n            }\n          } else {\n            destroy();\n          }\n        } catch (error) {\n          invariant(fiber !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(fiber, error);\n        }\n      }\n    }\n  }\n  // Second pass: Create new passive effects.\n  const mountEffects = pendingPassiveHookEffectsMount;\n  pendingPassiveHookEffectsMount = [];\n  for (let i = 0; i < mountEffects.length; i += 2) {\n    const effect = ((mountEffects[i]: any): HookEffect);\n    const fiber = ((mountEffects[i + 1]: any): Fiber);\n    if (__DEV__) {\n      setCurrentDebugFiberInDEV(fiber);\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        fiber.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        invokeGuardedCallback(null, invokePassiveEffectCreate, null, effect);\n        recordPassiveEffectDuration(fiber);\n      } else {\n        invokeGuardedCallback(null, invokePassiveEffectCreate, null, effect);\n      }\n      if (hasCaughtError()) {\n        invariant(fiber !== null, 'Should be working on an effect.');\n        const error = clearCaughtError();\n        captureCommitPhaseError(fiber, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    } else {\n      try {\n        const create = effect.create;\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          try {\n            startPassiveEffectTimer();\n            effect.destroy = create();\n          } finally {\n            recordPassiveEffectDuration(fiber);\n          }\n        } else {\n          effect.destroy = create();\n        }\n      } catch (error) {\n        invariant(fiber !== null, 'Should be working on an effect.');\n        captureCommitPhaseError(fiber, error);\n      }\n    }\n  }\n\n  // Note: This currently assumes there are no passive effects on the root fiber\n  // because the root is not part of its own effect list.\n  // This could change in the future.\n  let effect = root.current.firstEffect;\n  while (effect !== null) {\n    const nextNextEffect = effect.nextEffect;\n    // Remove nextEffect pointer to assist GC\n    effect.nextEffect = null;\n    if (effect.flags & Deletion) {\n      detachFiberAfterEffects(effect);\n    }\n    effect = nextNextEffect;\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n    finishPendingInteractions(root, lanes);\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = false;\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbackQueue();\n\n  // If additional passive effects were scheduled, increment a counter. If this\n  // exceeds the limit, we'll fire a warning.\n  nestedPassiveUpdateCount =\n    rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValue(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  enqueueUpdate(rootFiber, update);\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(rootFiber, (SyncLane: Lane));\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, SyncLane);\n  }\n}\n\nexport function captureCommitPhaseError(sourceFiber: Fiber, error: mixed) {\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = sourceFiber.return;\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValue(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        enqueueUpdate(fiber, update);\n        const eventTime = requestEventTime();\n        const root = markUpdateLaneFromFiberToRoot(fiber, (SyncLane: Lane));\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n          schedulePendingInteractions(root, SyncLane);\n        } else {\n          // This component has already been unmounted.\n          // We can't schedule any follow up work for the root because the fiber is already unmounted,\n          // but we can still call the log-only boundary so the error isn't swallowed.\n          //\n          // TODO This is only a temporary bandaid for the old reconciler fork.\n          // We can delete this special case once the new fork is merged.\n          if (\n            typeof instance.componentDidCatch === 'function' &&\n            !isAlreadyFailedLegacyErrorBoundary(instance)\n          ) {\n            try {\n              instance.componentDidCatch(error, errorInfo);\n            } catch (errorToIgnore) {\n              // TODO Ignore this error? Rethrow it?\n              // This is kind of an edge case.\n            }\n          }\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n  schedulePendingInteractions(root, pingedLanes);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new expiration time.\n  if (retryLane === NoLane) {\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, retryLane);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  if (enableSuspenseServerRenderer) {\n    switch (boundaryFiber.tag) {\n      case SuspenseComponent:\n        retryCache = boundaryFiber.stateNode;\n        const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n        if (suspenseState !== null) {\n          retryLane = suspenseState.retryLane;\n        }\n        break;\n      case SuspenseListComponent:\n        retryCache = boundaryFiber.stateNode;\n        break;\n      default:\n        invariant(\n          false,\n          'Pinged unknown suspense boundary type. ' +\n            'This is probably a bug in React.',\n        );\n    }\n  } else {\n    retryCache = boundaryFiber.stateNode;\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    invariant(\n      false,\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent &&\n      tag !== Block\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentName(fiber.type) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForUnmountedComponent: Set<string> | null = null;\nfunction warnAboutUpdateOnUnmountedFiberInDEV(fiber) {\n  if (__DEV__) {\n    const tag = fiber.tag;\n    if (\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent &&\n      tag !== Block\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // If there are pending passive effects unmounts for this Fiber,\n    // we can assume that they would have prevented this update.\n    if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentName(fiber.type) || 'ReactComponent';\n    if (didWarnStateUpdateForUnmountedComponent !== null) {\n      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForUnmountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);\n    }\n\n    if (isFlushingPassiveEffects) {\n      // Do not warn if we are currently flushing passive effects!\n      //\n      // React can't directly detect a memory leak, but there are some clues that warn about one.\n      // One of these clues is when an unmounted React component tries to update its state.\n      // For example, if a component forgets to remove an event listener when unmounting,\n      // that listener may be called later and try to update state,\n      // at which point React would warn about the potential leak.\n      //\n      // Warning signals are the most useful when they're strong.\n      // (So we should avoid false positive warnings.)\n      // Updating state from within an effect cleanup function is sometimes a necessary pattern, e.g.:\n      // 1. Updating an ancestor that a component had registered itself with on mount.\n      // 2. Resetting state when a component is hidden after going offscreen.\n    } else {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          \"Can't perform a React state update on an unmounted component. This \" +\n            'is a no-op, but it indicates a memory leak in your application. To ' +\n            'fix, cancel all subscriptions and asynchronous tasks in %s.',\n          tag === ClassComponent\n            ? 'the componentWillUnmount method'\n            : 'a useEffect cleanup function',\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        originalError !== null &&\n        typeof originalError === 'object' &&\n        typeof originalError.then === 'function'\n      ) {\n        // Don't replay promises. Treat everything else like an error.\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(unitOfWork);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.\n        // Rethrow this error instead of the original one.\n        throw replayError;\n      } else {\n        // This branch is reachable if the render phase is impure.\n        throw originalError;\n      }\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      (executionContext & RenderContext) !== NoContext &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentName(workInProgress.type)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentName(fiber.type) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\n// a 'shared' variable that changes when act() opens/closes in tests.\nexport const IsThisRendererActing = {current: (false: boolean)};\n\nexport function warnIfNotScopedWithMatchingAct(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      IsSomeRendererActing.current === true &&\n      IsThisRendererActing.current !== true\n    ) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          \"It looks like you're using the wrong act() around your test interactions.\\n\" +\n            'Be sure to use the matching version of act() corresponding to your renderer:\\n\\n' +\n            '// for react-dom:\\n' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'import {act} fr' +\n            \"om 'react-dom/test-utils';\\n\" +\n            '// ...\\n' +\n            'act(() => ...);\\n\\n' +\n            '// for react-test-renderer:\\n' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'import TestRenderer fr' +\n            \"om react-test-renderer';\\n\" +\n            'const {act} = TestRenderer;\\n' +\n            '// ...\\n' +\n            'act(() => ...);',\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nexport function warnIfNotCurrentlyActingEffectsInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      (fiber.mode & StrictMode) !== NoMode &&\n      IsSomeRendererActing.current === false &&\n      IsThisRendererActing.current === false\n    ) {\n      console.error(\n        'An update to %s ran an effect, but was not wrapped in act(...).\\n\\n' +\n          'When testing, code that causes React state updates should be ' +\n          'wrapped into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* fire events that update state */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n        getComponentName(fiber.type),\n      );\n    }\n  }\n}\n\nfunction warnIfNotCurrentlyActingUpdatesInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      executionContext === NoContext &&\n      IsSomeRendererActing.current === false &&\n      IsThisRendererActing.current === false\n    ) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentName(fiber.type),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nexport const warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;\n\n// In tests, we want to enforce a mocked scheduler.\nlet didWarnAboutUnmockedScheduler = false;\n// TODO Before we release concurrent mode, revisit this and decide whether a mocked\n// scheduler is the actual recommendation. The alternative could be a testing build,\n// a new lib, or whatever; we dunno just yet. This message is for early adopters\n// to get their tests right.\n\nexport function warnIfUnmockedScheduler(fiber: Fiber) {\n  if (__DEV__) {\n    if (\n      didWarnAboutUnmockedScheduler === false &&\n      Scheduler.unstable_flushAllWithoutAsserting === undefined\n    ) {\n      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {\n        didWarnAboutUnmockedScheduler = true;\n        console.error(\n          'In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked ' +\n            'to guarantee consistent behaviour across tests and browsers. ' +\n            'For example, with jest: \\n' +\n            // Break up requires to avoid accidentally parsing them as dependencies.\n            \"jest.mock('scheduler', () => require\" +\n            \"('scheduler/unstable_mock'));\\n\\n\" +\n            'For more info, visit https://reactjs.org/link/mock-scheduler',\n        );\n      } else if (warnAboutUnmockedScheduler === true) {\n        didWarnAboutUnmockedScheduler = true;\n        console.error(\n          'Starting from React v18, the \"scheduler\" module will need to be mocked ' +\n            'to guarantee consistent behaviour across tests and browsers. ' +\n            'For example, with jest: \\n' +\n            // Break up requires to avoid accidentally parsing them as dependencies.\n            \"jest.mock('scheduler', () => require\" +\n            \"('scheduler/unstable_mock'));\\n\\n\" +\n            'For more info, visit https://reactjs.org/link/mock-scheduler',\n        );\n      }\n    }\n  }\n}\n\nfunction computeThreadID(root: FiberRoot, lane: Lane | Lanes) {\n  // Interaction threads are unique per root and expiration time.\n  // NOTE: Intentionally unsound cast. All that matters is that it's a number\n  // and it represents a batch of work. Could make a helper function instead,\n  // but meh this is fine for now.\n  return (lane: any) * 1000 + root.interactionThreadID;\n}\n\nexport function markSpawnedWork(lane: Lane | Lanes) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n  if (spawnedWorkDuringRender === null) {\n    spawnedWorkDuringRender = [lane];\n  } else {\n    spawnedWorkDuringRender.push(lane);\n  }\n}\n\nfunction scheduleInteractions(\n  root: FiberRoot,\n  lane: Lane | Lanes,\n  interactions: Set<Interaction>,\n) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  if (interactions.size > 0) {\n    const pendingInteractionMap = root.pendingInteractionMap;\n    const pendingInteractions = pendingInteractionMap.get(lane);\n    if (pendingInteractions != null) {\n      interactions.forEach(interaction => {\n        if (!pendingInteractions.has(interaction)) {\n          // Update the pending async work count for previously unscheduled interaction.\n          interaction.__count++;\n        }\n\n        pendingInteractions.add(interaction);\n      });\n    } else {\n      pendingInteractionMap.set(lane, new Set(interactions));\n\n      // Update the pending async work count for the current interactions.\n      interactions.forEach(interaction => {\n        interaction.__count++;\n      });\n    }\n\n    const subscriber = __subscriberRef.current;\n    if (subscriber !== null) {\n      const threadID = computeThreadID(root, lane);\n      subscriber.onWorkScheduled(interactions, threadID);\n    }\n  }\n}\n\nfunction schedulePendingInteractions(root: FiberRoot, lane: Lane | Lanes) {\n  // This is called when work is scheduled on a root.\n  // It associates the current interactions with the newly-scheduled expiration.\n  // They will be restored when that expiration is later committed.\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  scheduleInteractions(root, lane, __interactionsRef.current);\n}\n\nfunction startWorkOnPendingInteractions(root: FiberRoot, lanes: Lanes) {\n  // This is called when new work is started on a root.\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  // Determine which interactions this batch of work currently includes, So that\n  // we can accurately attribute time spent working on it, And so that cascading\n  // work triggered during the render phase will be associated with it.\n  const interactions: Set<Interaction> = new Set();\n  root.pendingInteractionMap.forEach((scheduledInteractions, scheduledLane) => {\n    if (includesSomeLane(lanes, scheduledLane)) {\n      scheduledInteractions.forEach(interaction =>\n        interactions.add(interaction),\n      );\n    }\n  });\n\n  // Store the current set of interactions on the FiberRoot for a few reasons:\n  // We can re-use it in hot functions like performConcurrentWorkOnRoot()\n  // without having to recalculate it. We will also use it in commitWork() to\n  // pass to any Profiler onRender() hooks. This also provides DevTools with a\n  // way to access it when the onCommitRoot() hook is called.\n  root.memoizedInteractions = interactions;\n\n  if (interactions.size > 0) {\n    const subscriber = __subscriberRef.current;\n    if (subscriber !== null) {\n      const threadID = computeThreadID(root, lanes);\n      try {\n        subscriber.onWorkStarted(interactions, threadID);\n      } catch (error) {\n        // If the subscriber throws, rethrow it in a separate task\n        scheduleCallback(ImmediateSchedulerPriority, () => {\n          throw error;\n        });\n      }\n    }\n  }\n}\n\nfunction finishPendingInteractions(root, committedLanes) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  const remainingLanesAfterCommit = root.pendingLanes;\n\n  let subscriber;\n\n  try {\n    subscriber = __subscriberRef.current;\n    if (subscriber !== null && root.memoizedInteractions.size > 0) {\n      // FIXME: More than one lane can finish in a single commit.\n      const threadID = computeThreadID(root, committedLanes);\n      subscriber.onWorkStopped(root.memoizedInteractions, threadID);\n    }\n  } catch (error) {\n    // If the subscriber throws, rethrow it in a separate task\n    scheduleCallback(ImmediateSchedulerPriority, () => {\n      throw error;\n    });\n  } finally {\n    // Clear completed interactions from the pending Map.\n    // Unless the render was suspended or cascading work was scheduled,\n    // In which case– leave pending interactions until the subsequent render.\n    const pendingInteractionMap = root.pendingInteractionMap;\n    pendingInteractionMap.forEach((scheduledInteractions, lane) => {\n      // Only decrement the pending interaction count if we're done.\n      // If there's still work at the current priority,\n      // That indicates that we are waiting for suspense data.\n      if (!includesSomeLane(remainingLanesAfterCommit, lane)) {\n        pendingInteractionMap.delete(lane);\n\n        scheduledInteractions.forEach(interaction => {\n          interaction.__count--;\n\n          if (subscriber !== null && interaction.__count === 0) {\n            try {\n              subscriber.onInteractionScheduledWorkCompleted(interaction);\n            } catch (error) {\n              // If the subscriber throws, rethrow it in a separate task\n              scheduleCallback(ImmediateSchedulerPriority, () => {\n                throw error;\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n}\n\n// `act` testing API\n//\n// TODO: This is mostly a copy-paste from the legacy `act`, which does not have\n// access to the same internals that we do here. Some trade offs in the\n// implementation no longer make sense.\n\nlet isFlushingAct = false;\nlet isInsideThisAct = false;\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && actingUpdatesScopeDepth > 0;\n}\n\nconst flushMockScheduler = Scheduler.unstable_flushAllWithoutAsserting;\nconst isSchedulerMocked = typeof flushMockScheduler === 'function';\n\n// Returns whether additional work was scheduled. Caller should keep flushing\n// until there's no work left.\nfunction flushActWork(): boolean {\n  if (flushMockScheduler !== undefined) {\n    const prevIsFlushing = isFlushingAct;\n    isFlushingAct = true;\n    try {\n      return flushMockScheduler();\n    } finally {\n      isFlushingAct = prevIsFlushing;\n    }\n  } else {\n    // No mock scheduler available. However, the only type of pending work is\n    // passive effects, which we control. So we can flush that.\n    const prevIsFlushing = isFlushingAct;\n    isFlushingAct = true;\n    try {\n      let didFlushWork = false;\n      while (flushPassiveEffects()) {\n        didFlushWork = true;\n      }\n      return didFlushWork;\n    } finally {\n      isFlushingAct = prevIsFlushing;\n    }\n  }\n}\n\nfunction flushWorkAndMicroTasks(onDone: (err: ?Error) => void) {\n  try {\n    flushActWork();\n    enqueueTask(() => {\n      if (flushActWork()) {\n        flushWorkAndMicroTasks(onDone);\n      } else {\n        onDone();\n      }\n    });\n  } catch (err) {\n    onDone(err);\n  }\n}\n\n// we track the 'depth' of the act() calls with this counter,\n// so we can tell if any async act() calls try to run in parallel.\n\nlet actingUpdatesScopeDepth = 0;\nlet didWarnAboutUsingActInProd = false;\n\nexport function act(callback: () => Thenable<mixed>): Thenable<void> {\n  if (!__DEV__) {\n    if (didWarnAboutUsingActInProd === false) {\n      didWarnAboutUsingActInProd = true;\n      // eslint-disable-next-line react-internal/no-production-logging\n      console.error(\n        'act(...) is not supported in production builds of React, and might not behave as expected.',\n      );\n    }\n  }\n\n  const previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;\n  actingUpdatesScopeDepth++;\n\n  const previousIsSomeRendererActing = IsSomeRendererActing.current;\n  const previousIsThisRendererActing = IsThisRendererActing.current;\n  const previousIsInsideThisAct = isInsideThisAct;\n  IsSomeRendererActing.current = true;\n  IsThisRendererActing.current = true;\n  isInsideThisAct = true;\n\n  function onDone() {\n    actingUpdatesScopeDepth--;\n    IsSomeRendererActing.current = previousIsSomeRendererActing;\n    IsThisRendererActing.current = previousIsThisRendererActing;\n    isInsideThisAct = previousIsInsideThisAct;\n    if (__DEV__) {\n      if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {\n        // if it's _less than_ previousActingUpdatesScopeDepth, then we can assume the 'other' one has warned\n        console.error(\n          'You seem to have overlapping act() calls, this is not supported. ' +\n            'Be sure to await previous act() calls before making a new one. ',\n        );\n      }\n    }\n  }\n\n  let result;\n  try {\n    result = batchedUpdates(callback);\n  } catch (error) {\n    // on sync errors, we still want to 'cleanup' and decrement actingUpdatesScopeDepth\n    onDone();\n    throw error;\n  }\n\n  if (\n    result !== null &&\n    typeof result === 'object' &&\n    typeof result.then === 'function'\n  ) {\n    // setup a boolean that gets set to true only\n    // once this act() call is await-ed\n    let called = false;\n    if (__DEV__) {\n      if (typeof Promise !== 'undefined') {\n        //eslint-disable-next-line no-undef\n        Promise.resolve()\n          .then(() => {})\n          .then(() => {\n            if (called === false) {\n              console.error(\n                'You called act(async () => ...) without await. ' +\n                  'This could lead to unexpected testing behaviour, interleaving multiple act ' +\n                  'calls and mixing their scopes. You should - await act(async () => ...);',\n              );\n            }\n          });\n      }\n    }\n\n    // in the async case, the returned thenable runs the callback, flushes\n    // effects and  microtasks in a loop until flushPassiveEffects() === false,\n    // and cleans up\n    return {\n      then(resolve, reject) {\n        called = true;\n        result.then(\n          () => {\n            if (\n              actingUpdatesScopeDepth > 1 ||\n              (isSchedulerMocked === true &&\n                previousIsSomeRendererActing === true)\n            ) {\n              onDone();\n              resolve();\n              return;\n            }\n            // we're about to exit the act() scope,\n            // now's the time to flush tasks/effects\n            flushWorkAndMicroTasks((err: ?Error) => {\n              onDone();\n              if (err) {\n                reject(err);\n              } else {\n                resolve();\n              }\n            });\n          },\n          err => {\n            onDone();\n            reject(err);\n          },\n        );\n      },\n    };\n  } else {\n    if (__DEV__) {\n      if (result !== undefined) {\n        console.error(\n          'The callback passed to act(...) function ' +\n            'must return undefined, or a Promise. You returned %s',\n          result,\n        );\n      }\n    }\n\n    // flush effects until none remain, and cleanup\n    try {\n      if (\n        actingUpdatesScopeDepth === 1 &&\n        (isSchedulerMocked === false || previousIsSomeRendererActing === false)\n      ) {\n        // we're about to exit the act() scope,\n        // now's the time to flush effects\n        flushActWork();\n      }\n      onDone();\n    } catch (err) {\n      onDone();\n      throw err;\n    }\n\n    // in the sync case, the returned thenable only warns *if* await-ed\n    return {\n      then(resolve) {\n        if (__DEV__) {\n          console.error(\n            'Do not await the result of calling act(...) with sync logic, it is not a Promise.',\n          );\n        }\n        resolve();\n      },\n    };\n  }\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber): void {\n  fiber.sibling = null;\n  fiber.stateNode = null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport {\n  flushSync,\n  scheduleUpdateOnFiber,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {updateContainer} from './ReactFiberReconciler.old';\nimport {emptyContextObject} from './ReactFiberContext.old';\nimport {SyncLane, NoTimestamp} from './ReactFiberLane';\nimport {\n  ClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  HostComponent,\n  HostPortal,\n  HostRoot,\n  MemoComponent,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type Family = {|\n  current: any,\n|};\n\nexport type RefreshUpdate = {|\n  staleFamilies: Set<Family>,\n  updatedFamilies: Set<Family>,\n|};\n\n// Resolves type to a family.\ntype RefreshHandler = any => Family | void;\n\n// Used by React Refresh runtime through DevTools Global Hook.\nexport type SetRefreshHandler = (handler: RefreshHandler | null) => void;\nexport type ScheduleRefresh = (root: FiberRoot, update: RefreshUpdate) => void;\nexport type ScheduleRoot = (root: FiberRoot, element: ReactNodeList) => void;\nexport type FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n) => Set<Instance>;\n\nlet resolveFamily: RefreshHandler | null = null;\n// $FlowFixMe Flow gets confused by a WeakSet feature check below.\nlet failedBoundaries: WeakSet<Fiber> | null = null;\n\nexport const setRefreshHandler = (handler: RefreshHandler | null): void => {\n  if (__DEV__) {\n    resolveFamily = handler;\n  }\n};\n\nexport function resolveFunctionForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function resolveClassForHotReloading(type: any): any {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\n\nexport function resolveForwardRefForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (\n        type !== null &&\n        type !== undefined &&\n        typeof type.render === 'function'\n      ) {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        const currentRender = resolveFunctionForHotReloading(type.render);\n        if (type.render !== currentRender) {\n          const syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender,\n          };\n          if (type.displayName !== undefined) {\n            (syntheticType: any).displayName = type.displayName;\n          }\n          return syntheticType;\n        }\n      }\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function isCompatibleFamilyForHotReloading(\n  fiber: Fiber,\n  element: ReactElement,\n): boolean {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    const prevType = fiber.elementType;\n    const nextType = element.type;\n\n    // If we got here, we know types aren't === equal.\n    let needsCompareFamilies = false;\n\n    const $$typeofNextType =\n      typeof nextType === 'object' && nextType !== null\n        ? nextType.$$typeof\n        : null;\n\n    switch (fiber.tag) {\n      case ClassComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case FunctionComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          // We don't know the inner type yet.\n          // We're going to assume that the lazy inner type is stable,\n          // and so it is sufficient to avoid reconciling it away.\n          // We're not going to unwrap or actually use the new lazy type.\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case ForwardRef: {\n        if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if ($$typeofNextType === REACT_MEMO_TYPE) {\n          // TODO: if it was but can no longer be simple,\n          // we shouldn't set this.\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      default:\n        return false;\n    }\n\n    // Check if both types have a family and it's the same one.\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      const prevFamily = resolveFamily(prevType);\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return false;\n  }\n}\n\nexport function markFailedErrorBoundaryForHotReloading(fiber: Fiber) {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n    failedBoundaries.add(fiber);\n  }\n}\n\nexport const scheduleRefresh: ScheduleRefresh = (\n  root: FiberRoot,\n  update: RefreshUpdate,\n): void => {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    const {staleFamilies, updatedFamilies} = update;\n    flushPassiveEffects();\n    flushSync(() => {\n      scheduleFibersWithFamiliesRecursively(\n        root.current,\n        updatedFamilies,\n        staleFamilies,\n      );\n    });\n  }\n};\n\nexport const scheduleRoot: ScheduleRoot = (\n  root: FiberRoot,\n  element: ReactNodeList,\n): void => {\n  if (__DEV__) {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n    flushPassiveEffects();\n    flushSync(() => {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(\n  fiber: Fiber,\n  updatedFamilies: Set<Family>,\n  staleFamilies: Set<Family>,\n) {\n  if (__DEV__) {\n    const {alternate, child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    let needsRender = false;\n    let needsRemount = false;\n    if (candidateType !== null) {\n      const family = resolveFamily(candidateType);\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n    if (failedBoundaries !== null) {\n      if (\n        failedBoundaries.has(fiber) ||\n        (alternate !== null && failedBoundaries.has(alternate))\n      ) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n    if (needsRemount || needsRender) {\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(\n        child,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(\n        sibling,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n  }\n}\n\nexport const findHostInstancesForRefresh: FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n): Set<Instance> => {\n  if (__DEV__) {\n    const hostInstances = new Set();\n    const types = new Set(families.map(family => family.current));\n    findHostInstancesForMatchingFibersRecursively(\n      root.current,\n      types,\n      hostInstances,\n    );\n    return hostInstances;\n  } else {\n    throw new Error(\n      'Did not expect findHostInstancesForRefresh to be called in production.',\n    );\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(\n  fiber: Fiber,\n  types: Set<any>,\n  hostInstances: Set<Instance>,\n) {\n  if (__DEV__) {\n    const {child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    let didMatch = false;\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(\n          child,\n          types,\n          hostInstances,\n        );\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(\n        sibling,\n        types,\n        hostInstances,\n      );\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): void {\n  if (__DEV__) {\n    const foundHostInstances = findChildHostInstancesForFiberShallowly(\n      fiber,\n      hostInstances,\n    );\n    if (foundHostInstances) {\n      return;\n    }\n    // If we didn't find any host children, fallback to closest host parent.\n    let node = fiber;\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): boolean {\n  if (__DEV__) {\n    let node: Fiber = fiber;\n    let foundHostInstances = false;\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode);\n        // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {\n  ReactFragment,\n  ReactPortal,\n  ReactFundamentalComponent,\n  ReactScope,\n} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {OffscreenProps} from './ReactFiberOffscreenComponent';\n\nimport invariant from 'shared/invariant';\nimport {\n  enableProfilerTimer,\n  enableFundamentalAPI,\n  enableScopeAPI,\n  enableBlocksAPI,\n} from 'shared/ReactFeatureFlags';\nimport {NoFlags, Placement} from './ReactFiberFlags';\nimport {ConcurrentRoot, BlockingRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictMode,\n  BlockingMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_FUNDAMENTAL_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_BLOCK_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nlet debugCounter = 1;\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.nextEffect = null;\n\n  this.firstEffect = null;\n  this.lastEffect = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugID = debugCounter++;\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n    if (enableBlocksAPI) {\n      if ($$typeof === REACT_BLOCK_TYPE) {\n        return Block;\n      }\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n      workInProgress._debugID = current._debugID;\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effect list is no longer valid.\n    workInProgress.nextEffect = null;\n    workInProgress.firstEffect = null;\n    workInProgress.lastEffect = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect tag but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= Placement;\n\n  // The effect list is no longer valid.\n  workInProgress.nextEffect = null;\n  workInProgress.firstEffect = null;\n  workInProgress.lastEffect = null;\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(tag: RootTag): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode | BlockingMode | StrictMode;\n  } else if (tag === BlockingRoot) {\n    mode = BlockingMode | StrictMode;\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= DebugTracingMode;\n        break;\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictMode;\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n            case REACT_BLOCK_TYPE:\n              fiberTag = Block;\n              break getTag;\n            case REACT_FUNDAMENTAL_TYPE:\n              if (enableFundamentalAPI) {\n                return createFiberFromFundamental(\n                  type,\n                  pendingProps,\n                  mode,\n                  lanes,\n                  key,\n                );\n              }\n              break;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentName(owner.type) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n        invariant(\n          false,\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            'but got: %s.%s',\n          type == null ? type : typeof type,\n          info,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromFundamental(\n  fundamentalComponent: ReactFundamentalComponent<any, any>,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(FundamentalComponent, pendingProps, key, mode);\n  fiber.elementType = fundamentalComponent;\n  fiber.type = fundamentalComponent;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error('Profiler must specify an \"id\" as a prop');\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  // TODO: The Profiler fiber shouldn't have a type. It has a tag.\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.type = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n\n  // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  fiber.type = REACT_SUSPENSE_TYPE;\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  if (__DEV__) {\n    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.\n    // This needs to be fixed in getComponentName so that it relies on the tag\n    // instead.\n    fiber.type = REACT_SUSPENSE_LIST_TYPE;\n  }\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  if (__DEV__) {\n    fiber.type = REACT_OFFSCREEN_TYPE;\n  }\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  if (__DEV__) {\n    fiber.type = REACT_LEGACY_HIDDEN_TYPE;\n  }\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  // TODO: These should not need a type.\n  fiber.elementType = 'DELETED';\n  fiber.type = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.nextEffect = source.nextEffect;\n  target.firstEffect = source.firstEffect;\n  target.lastEffect = source.lastEffect;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n  target._debugID = source._debugID;\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLanes,\n  NoLanePriority,\n  NoTimestamp,\n  createLaneMap,\n} from './ReactFiberLane';\nimport {\n  enableSchedulerTracing,\n  enableSuspenseCallback,\n} from 'shared/ReactFeatureFlags';\nimport {unstable_getThreadID} from 'scheduler/tracing';\nimport {initializeUpdateQueue} from './ReactUpdateQueue.old';\nimport {LegacyRoot, BlockingRoot, ConcurrentRoot} from './ReactRootTags';\n\nfunction FiberRootNode(containerInfo, tag, hydrate) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.hydrate = hydrate;\n  this.callbackNode = null;\n  this.callbackPriority = NoLanePriority;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSchedulerTracing) {\n    this.interactionThreadID = unstable_getThreadID();\n    this.memoizedInteractions = new Set();\n    this.pendingInteractionMap = new Map();\n  }\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case BlockingRoot:\n        this._debugRootType = 'createBlockingRoot()';\n        break;\n      case ConcurrentRoot:\n        this._debugRootType = 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = 'createLegacyRoot()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(containerInfo, tag, hydrate): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(tag);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport {FundamentalComponent} from './ReactWorkTags';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane, LanePriority} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport {enableSchedulingProfiler} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {injectInternals, onScheduleRoot} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  flushRoot,\n  batchedEventUpdates,\n  batchedUpdates,\n  unbatchedUpdates,\n  flushSync,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushDiscreteUpdates,\n  flushPassiveEffects,\n  warnIfNotScopedWithMatchingAct,\n  warnIfUnmockedScheduler,\n  IsThisRendererActing,\n  act,\n} from './ReactFiberWorkLoop.old';\nimport {createUpdate, enqueueUpdate} from './ReactUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  InputDiscreteHydrationLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport {markRenderScheduled} from './SchedulingProfiler';\n\nexport {registerMutableSourceForHydration} from './ReactMutableSource.new';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPsuedoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      invariant(false, 'Unable to find node on an unmounted component.');\n    } else {\n      invariant(\n        false,\n        'Argument appears to not be a ReactComponent. Keys: %s',\n        Object.keys(component),\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        invariant(false, 'Unable to find node on an unmounted component.');\n      } else {\n        invariant(\n          false,\n          'Argument appears to not be a ReactComponent. Keys: %s',\n          Object.keys(component),\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictMode) {\n      const componentName = getComponentName(fiber.type) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n): OpaqueRoot {\n  return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks);\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfUnmockedScheduler(current);\n      warnIfNotScopedWithMatchingAct(current);\n    }\n  }\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentName(ReactCurrentFiberCurrent.type) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current, update);\n  scheduleUpdateOnFiber(current, lane, eventTime);\n\n  return lane;\n}\n\nexport {\n  batchedEventUpdates,\n  batchedUpdates,\n  unbatchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushDiscreteUpdates,\n  flushControlled,\n  flushSync,\n  flushPassiveEffects,\n  IsThisRendererActing,\n  act,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot:\n      const root: FiberRoot = fiber.stateNode;\n      if (root.hydrate) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    case SuspenseComponent:\n      const eventTime = requestEventTime();\n      flushSync(() => scheduleUpdateOnFiber(fiber, SyncLane, eventTime));\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = InputDiscreteHydrationLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thennables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptUserBlockingHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = InputDiscreteHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = SelectiveHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function runWithPriority<T>(priority: LanePriority, fn: () => T) {\n  const previousPriority = getCurrentUpdateLanePriority();\n  try {\n    setCurrentUpdateLanePriority(priority);\n    return fn();\n  } finally {\n    setCurrentUpdateLanePriority(previousPriority);\n  }\n}\n\nexport {getCurrentUpdateLanePriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  if (hostFiber.tag === FundamentalComponent) {\n    return hostFiber.stateNode.instance;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (Array.isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (Array.isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n  });\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Thenable} from 'shared/ReactTypes';\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {FiberRoot} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance, TextInstance} from './ReactTestHostConfig';\n\nimport * as Scheduler from 'scheduler/unstable_mock';\nimport {\n  getPublicRootInstance,\n  createContainer,\n  updateContainer,\n  flushSync,\n  injectIntoDevTools,\n  batchedUpdates,\n  act,\n  IsThisRendererActing,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport {findCurrentFiberUsingSlowPath} from 'react-reconciler/src/ReactFiberTreeReflection';\nimport {\n  Fragment,\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  HostPortal,\n  HostText,\n  HostRoot,\n  ContextConsumer,\n  ContextProvider,\n  Mode,\n  ForwardRef,\n  Profiler,\n  MemoComponent,\n  SimpleMemoComponent,\n  Block,\n  IncompleteClassComponent,\n  ScopeComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport getComponentName from 'shared/getComponentName';\nimport ReactVersion from 'shared/ReactVersion';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport enqueueTask from 'shared/enqueueTask';\n\nimport {getPublicInstance} from './ReactTestHostConfig';\nimport {ConcurrentRoot, LegacyRoot} from 'react-reconciler/src/ReactRootTags';\n\nconst {IsSomeRendererActing} = ReactSharedInternals;\n\ntype TestRendererOptions = {\n  createNodeMock: (element: React$Element<any>) => any,\n  unstable_isConcurrent: boolean,\n  ...\n};\n\ntype ReactTestRendererJSON = {|\n  type: string,\n  props: {[propName: string]: any, ...},\n  children: null | Array<ReactTestRendererNode>,\n  $$typeof?: Symbol, // Optional because we add it with defineProperty().\n|};\ntype ReactTestRendererNode = ReactTestRendererJSON | string;\n\ntype FindOptions = $Shape<{\n  // performs a \"greedy\" search: if a matching node is found, will continue\n  // to search within the matching node's children. (default: true)\n  deep: boolean,\n  ...\n}>;\n\nexport type Predicate = (node: ReactTestInstance) => ?boolean;\n\nconst defaultTestOptions = {\n  createNodeMock: function() {\n    return null;\n  },\n};\n\nfunction toJSON(inst: Instance | TextInstance): ReactTestRendererNode | null {\n  if (inst.isHidden) {\n    // Omit timed out children from output entirely. This seems like the least\n    // surprising behavior. We could perhaps add a separate API that includes\n    // them, if it turns out people need it.\n    return null;\n  }\n  switch (inst.tag) {\n    case 'TEXT':\n      return inst.text;\n    case 'INSTANCE': {\n      /* eslint-disable no-unused-vars */\n      // We don't include the `children` prop in JSON.\n      // Instead, we will include the actual rendered children.\n      const {children, ...props} = inst.props;\n      /* eslint-enable */\n      let renderedChildren = null;\n      if (inst.children && inst.children.length) {\n        for (let i = 0; i < inst.children.length; i++) {\n          const renderedChild = toJSON(inst.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      const json: ReactTestRendererJSON = {\n        type: inst.type,\n        props: props,\n        children: renderedChildren,\n      };\n      Object.defineProperty(json, '$$typeof', {\n        value: Symbol.for('react.test.json'),\n      });\n      return json;\n    }\n    default:\n      throw new Error(`Unexpected node type in toJSON: ${inst.tag}`);\n  }\n}\n\nfunction childrenToTree(node) {\n  if (!node) {\n    return null;\n  }\n  const children = nodeAndSiblingsArray(node);\n  if (children.length === 0) {\n    return null;\n  } else if (children.length === 1) {\n    return toTree(children[0]);\n  }\n  return flatten(children.map(toTree));\n}\n\nfunction nodeAndSiblingsArray(nodeWithSibling) {\n  const array = [];\n  let node = nodeWithSibling;\n  while (node != null) {\n    array.push(node);\n    node = node.sibling;\n  }\n  return array;\n}\n\nfunction flatten(arr) {\n  const result = [];\n  const stack = [{i: 0, array: arr}];\n  while (stack.length) {\n    const n = stack.pop();\n    while (n.i < n.array.length) {\n      const el = n.array[n.i];\n      n.i += 1;\n      if (Array.isArray(el)) {\n        stack.push(n);\n        stack.push({i: 0, array: el});\n        break;\n      }\n      result.push(el);\n    }\n  }\n  return result;\n}\n\nfunction toTree(node: ?Fiber) {\n  if (node == null) {\n    return null;\n  }\n  switch (node.tag) {\n    case HostRoot:\n      return childrenToTree(node.child);\n    case HostPortal:\n      return childrenToTree(node.child);\n    case ClassComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: node.stateNode,\n        rendered: childrenToTree(node.child),\n      };\n    case FunctionComponent:\n    case SimpleMemoComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null,\n        rendered: childrenToTree(node.child),\n      };\n    case Block:\n      return {\n        nodeType: 'block',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null,\n        rendered: childrenToTree(node.child),\n      };\n    case HostComponent: {\n      return {\n        nodeType: 'host',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null, // TODO: use createNodeMock here somehow?\n        rendered: flatten(nodeAndSiblingsArray(node.child).map(toTree)),\n      };\n    }\n    case HostText:\n      return node.stateNode.text;\n    case Fragment:\n    case ContextProvider:\n    case ContextConsumer:\n    case Mode:\n    case Profiler:\n    case ForwardRef:\n    case MemoComponent:\n    case IncompleteClassComponent:\n    case ScopeComponent:\n      return childrenToTree(node.child);\n    default:\n      invariant(\n        false,\n        'toTree() does not yet know how to handle nodes with tag=%s',\n        node.tag,\n      );\n  }\n}\n\nconst validWrapperTypes = new Set([\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Block,\n  // Normally skipped, but used when there's more than one root child.\n  HostRoot,\n]);\n\nfunction getChildren(parent: Fiber) {\n  const children = [];\n  const startingNode = parent;\n  let node: Fiber = startingNode;\n  if (node.child === null) {\n    return children;\n  }\n  node.child.return = node;\n  node = node.child;\n  outer: while (true) {\n    let descend = false;\n    if (validWrapperTypes.has(node.tag)) {\n      children.push(wrapFiber(node));\n    } else if (node.tag === HostText) {\n      children.push('' + node.memoizedProps);\n    } else {\n      descend = true;\n    }\n    if (descend && node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    while (node.sibling === null) {\n      if (node.return === startingNode) {\n        break outer;\n      }\n      node = (node.return: any);\n    }\n    (node.sibling: any).return = node.return;\n    node = (node.sibling: any);\n  }\n  return children;\n}\n\nclass ReactTestInstance {\n  _fiber: Fiber;\n\n  _currentFiber(): Fiber {\n    // Throws if this component has been unmounted.\n    const fiber = findCurrentFiberUsingSlowPath(this._fiber);\n    invariant(\n      fiber !== null,\n      \"Can't read from currently-mounting component. This error is likely \" +\n        'caused by a bug in React. Please file an issue.',\n    );\n    return fiber;\n  }\n\n  constructor(fiber: Fiber) {\n    invariant(\n      validWrapperTypes.has(fiber.tag),\n      'Unexpected object passed to ReactTestInstance constructor (tag: %s). ' +\n        'This is probably a bug in React.',\n      fiber.tag,\n    );\n    this._fiber = fiber;\n  }\n\n  get instance() {\n    if (this._fiber.tag === HostComponent) {\n      return getPublicInstance(this._fiber.stateNode);\n    } else {\n      return this._fiber.stateNode;\n    }\n  }\n\n  get type() {\n    return this._fiber.type;\n  }\n\n  get props(): Object {\n    return this._currentFiber().memoizedProps;\n  }\n\n  get parent(): ?ReactTestInstance {\n    let parent = this._fiber.return;\n    while (parent !== null) {\n      if (validWrapperTypes.has(parent.tag)) {\n        if (parent.tag === HostRoot) {\n          // Special case: we only \"materialize\" instances for roots\n          // if they have more than a single child. So we'll check that now.\n          if (getChildren(parent).length < 2) {\n            return null;\n          }\n        }\n        return wrapFiber(parent);\n      }\n      parent = parent.return;\n    }\n    return null;\n  }\n\n  get children(): Array<ReactTestInstance | string> {\n    return getChildren(this._currentFiber());\n  }\n\n  // Custom search functions\n  find(predicate: Predicate): ReactTestInstance {\n    return expectOne(\n      this.findAll(predicate, {deep: false}),\n      `matching custom predicate: ${predicate.toString()}`,\n    );\n  }\n\n  findByType(type: any): ReactTestInstance {\n    return expectOne(\n      this.findAllByType(type, {deep: false}),\n      `with node type: \"${getComponentName(type) || 'Unknown'}\"`,\n    );\n  }\n\n  findByProps(props: Object): ReactTestInstance {\n    return expectOne(\n      this.findAllByProps(props, {deep: false}),\n      `with props: ${JSON.stringify(props)}`,\n    );\n  }\n\n  findAll(\n    predicate: Predicate,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, predicate, options);\n  }\n\n  findAllByType(\n    type: any,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, node => node.type === type, options);\n  }\n\n  findAllByProps(\n    props: Object,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(\n      this,\n      node => node.props && propsMatch(node.props, props),\n      options,\n    );\n  }\n}\n\nfunction findAll(\n  root: ReactTestInstance,\n  predicate: Predicate,\n  options: ?FindOptions,\n): Array<ReactTestInstance> {\n  const deep = options ? options.deep : true;\n  const results = [];\n\n  if (predicate(root)) {\n    results.push(root);\n    if (!deep) {\n      return results;\n    }\n  }\n\n  root.children.forEach(child => {\n    if (typeof child === 'string') {\n      return;\n    }\n    results.push(...findAll(child, predicate, options));\n  });\n\n  return results;\n}\n\nfunction expectOne(\n  all: Array<ReactTestInstance>,\n  message: string,\n): ReactTestInstance {\n  if (all.length === 1) {\n    return all[0];\n  }\n\n  const prefix =\n    all.length === 0\n      ? 'No instances found '\n      : `Expected 1 but found ${all.length} instances `;\n\n  throw new Error(prefix + message);\n}\n\nfunction propsMatch(props: Object, filter: Object): boolean {\n  for (const key in filter) {\n    if (props[key] !== filter[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction create(element: React$Element<any>, options: TestRendererOptions) {\n  let createNodeMock = defaultTestOptions.createNodeMock;\n  let isConcurrent = false;\n  if (typeof options === 'object' && options !== null) {\n    if (typeof options.createNodeMock === 'function') {\n      createNodeMock = options.createNodeMock;\n    }\n    if (options.unstable_isConcurrent === true) {\n      isConcurrent = true;\n    }\n  }\n  let container = {\n    children: [],\n    createNodeMock,\n    tag: 'CONTAINER',\n  };\n  let root: FiberRoot | null = createContainer(\n    container,\n    isConcurrent ? ConcurrentRoot : LegacyRoot,\n    false,\n    null,\n  );\n  invariant(root != null, 'something went wrong');\n  updateContainer(element, root, null, null);\n\n  const entry = {\n    _Scheduler: Scheduler,\n\n    root: undefined, // makes flow happy\n    // we define a 'getter' for 'root' below using 'Object.defineProperty'\n    toJSON(): Array<ReactTestRendererNode> | ReactTestRendererNode | null {\n      if (root == null || root.current == null || container == null) {\n        return null;\n      }\n      if (container.children.length === 0) {\n        return null;\n      }\n      if (container.children.length === 1) {\n        return toJSON(container.children[0]);\n      }\n      if (\n        container.children.length === 2 &&\n        container.children[0].isHidden === true &&\n        container.children[1].isHidden === false\n      ) {\n        // Omit timed out children from output entirely, including the fact that we\n        // temporarily wrap fallback and timed out children in an array.\n        return toJSON(container.children[1]);\n      }\n      let renderedChildren = null;\n      if (container.children && container.children.length) {\n        for (let i = 0; i < container.children.length; i++) {\n          const renderedChild = toJSON(container.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      return renderedChildren;\n    },\n    toTree() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return toTree(root.current);\n    },\n    update(newElement: React$Element<any>) {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(newElement, root, null, null);\n    },\n    unmount() {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(null, root, null, null);\n      container = null;\n      root = null;\n    },\n    getInstance() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return getPublicRootInstance(root);\n    },\n\n    unstable_flushSync<T>(fn: () => T): T {\n      return flushSync(fn);\n    },\n  };\n\n  Object.defineProperty(\n    entry,\n    'root',\n    ({\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (root === null) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        }\n        const children = getChildren(root.current);\n        if (children.length === 0) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        } else if (children.length === 1) {\n          // Normally, we skip the root and just give you the child.\n          return children[0];\n        } else {\n          // However, we give you the root if there's more than one root child.\n          // We could make this the behavior for all cases but it would be a breaking change.\n          return wrapFiber(root.current);\n        }\n      },\n    }: Object),\n  );\n\n  return entry;\n}\n\nconst fiberToWrapper = new WeakMap();\nfunction wrapFiber(fiber: Fiber): ReactTestInstance {\n  let wrapper = fiberToWrapper.get(fiber);\n  if (wrapper === undefined && fiber.alternate !== null) {\n    wrapper = fiberToWrapper.get(fiber.alternate);\n  }\n  if (wrapper === undefined) {\n    wrapper = new ReactTestInstance(fiber);\n    fiberToWrapper.set(fiber, wrapper);\n  }\n  return wrapper;\n}\n\n// Enable ReactTestRenderer to be used to test DevTools integration.\ninjectIntoDevTools({\n  findFiberByHostInstance: (() => {\n    throw new Error('TestRenderer does not support findFiberByHostInstance()');\n  }: any),\n  bundleType: __DEV__ ? 1 : 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-test-renderer',\n});\n\nlet actingUpdatesScopeDepth = 0;\n\n// This version of `act` is only used by our tests. Unlike the public version\n// of `act`, it's designed to work identically in both production and\n// development. It may have slightly different behavior from the public\n// version, too, since our constraints in our test suite are not the same as\n// those of developers using React — we're testing React itself, as opposed to\n// building an app with React.\n// TODO: Migrate our tests to use ReactNoop. Although we would need to figure\n// out a solution for Relay, which has some Concurrent Mode tests.\nfunction unstable_concurrentAct(scope: () => Thenable<mixed> | void) {\n  if (Scheduler.unstable_flushAllWithoutAsserting === undefined) {\n    throw Error(\n      'This version of `act` requires a special mock build of Scheduler.',\n    );\n  }\n  if (setTimeout._isMockFunction !== true) {\n    throw Error(\n      \"This version of `act` requires Jest's timer mocks \" +\n        '(i.e. jest.useFakeTimers).',\n    );\n  }\n\n  const previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;\n  const previousIsSomeRendererActing = IsSomeRendererActing.current;\n  const previousIsThisRendererActing = IsThisRendererActing.current;\n  IsSomeRendererActing.current = true;\n  IsThisRendererActing.current = true;\n  actingUpdatesScopeDepth++;\n\n  const unwind = () => {\n    actingUpdatesScopeDepth--;\n    IsSomeRendererActing.current = previousIsSomeRendererActing;\n    IsThisRendererActing.current = previousIsThisRendererActing;\n    if (__DEV__) {\n      if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {\n        // if it's _less than_ previousActingUpdatesScopeDepth, then we can\n        // assume the 'other' one has warned\n        console.error(\n          'You seem to have overlapping act() calls, this is not supported. ' +\n            'Be sure to await previous act() calls before making a new one. ',\n        );\n      }\n    }\n  };\n\n  // TODO: This would be way simpler if 1) we required a promise to be\n  // returned and 2) we could use async/await. Since it's only our used in\n  // our test suite, we should be able to.\n  try {\n    const thenable = batchedUpdates(scope);\n    if (\n      typeof thenable === 'object' &&\n      thenable !== null &&\n      typeof thenable.then === 'function'\n    ) {\n      return {\n        then(resolve: () => void, reject: (error: mixed) => void) {\n          thenable.then(\n            () => {\n              flushActWork(\n                () => {\n                  unwind();\n                  resolve();\n                },\n                error => {\n                  unwind();\n                  reject(error);\n                },\n              );\n            },\n            error => {\n              unwind();\n              reject(error);\n            },\n          );\n        },\n      };\n    } else {\n      try {\n        // TODO: Let's not support non-async scopes at all in our tests. Need to\n        // migrate existing tests.\n        let didFlushWork;\n        do {\n          didFlushWork = Scheduler.unstable_flushAllWithoutAsserting();\n        } while (didFlushWork);\n      } finally {\n        unwind();\n      }\n    }\n  } catch (error) {\n    unwind();\n    throw error;\n  }\n}\n\nfunction flushActWork(resolve, reject) {\n  // Flush suspended fallbacks\n  // $FlowFixMe: Flow doesn't know about global Jest object\n  jest.runOnlyPendingTimers();\n  enqueueTask(() => {\n    try {\n      const didFlushWork = Scheduler.unstable_flushAllWithoutAsserting();\n      if (didFlushWork) {\n        flushActWork(resolve, reject);\n      } else {\n        resolve();\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nexport {\n  Scheduler as _Scheduler,\n  create,\n  /* eslint-disable-next-line camelcase */\n  batchedUpdates as unstable_batchedUpdates,\n  act,\n  unstable_concurrentAct,\n};\n"],"names":["ReactSharedInternals","React","warn","format","args","printWarning","error","level","ReactDebugCurrentFrame","stack","getStackAddendum","concat","argsWithFormat","map","item","unshift","Function","prototype","apply","call","console","ReactInternals","assign","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","FundamentalComponent","ScopeComponent","Block","OffscreenComponent","LegacyHiddenComponent","get","key","_reactInternals","set","value","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_BLOCK_TYPE","REACT_SERVER_BLOCK_TYPE","REACT_FUNDAMENTAL_TYPE","REACT_SCOPE_TYPE","REACT_OPAQUE_ID_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","Symbol","for","symbolFor","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","functionName","displayName","name","getContextName","type","getComponentName","tag","$$typeof","context","provider","_context","render","_render","lazyComponent","payload","_payload","init","_init","x","NoFlags","PerformedWork","Placement","Update","PlacementAndUpdate","Deletion","ContentReset","Callback","DidCapture","Ref","Snapshot","Passive","PassiveUnmountPendingDev","Hydrating","HydratingAndUpdate","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","enableProfilerTimer","__PROFILE__","enableFundamentalAPI","warnAboutStringRefs","enableNewReconciler","ReactCurrentOwner","getNearestMountedFiber","fiber","node","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","owner","current","ownerFiber","instance","stateNode","_warnedAboutRefsInRender","getInstance","assertIsMounted","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","findCurrentHostFiber","parent","currentParent","doesFiberContain","parentFiber","childFiber","parentFiberAlternate","shim","isSuspenseInstancePending","isSuspenseInstanceFallback","hydrateTextInstance","NO_CONTEXT","UPDATE_SIGNAL","nodeToInstanceMap","WeakMap","Object","freeze","getPublicInstance","inst","createNodeMock","rootContainerInstance","mockNode","props","appendChild","parentInstance","Array","isArray","children","index","indexOf","splice","push","insertBefore","beforeChild","beforeIndex","removeChild","clearContainer","container","getRootHostContext","getChildHostContext","parentHostContext","prepareForCommit","containerInfo","resetAfterCommit","createInstance","hostContext","internalInstanceHandle","isHidden","appendInitialChild","prepareUpdate","testElement","oldProps","newProps","shouldSetTextContent","createTextInstance","text","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","commitUpdate","updatePayload","commitTextUpdate","textInstance","oldText","newText","resetTextContent","appendChildToContainer","insertInContainerBefore","removeChildFromContainer","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","clientId","makeClientIdInDEV","warnOnAccessInDEV","id","toString","valueOf","preparePortalMount","portalInstance","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledLog","__reactDisabledLog","disableLogs","log","info","group","groupCollapsed","groupEnd","configurable","enumerable","writable","defineProperties","reenableLogs","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","source","ownerFn","undefined","Error","match","trim","reentry","componentFrameCache","PossiblyWeakMap","Map","describeNativeComponentFrame","fn","construct","frame","control","previousPrepareStackTrace","prepareStackTrace","previousDispatcher","Fake","defineProperty","Reflect","sample","sampleLines","split","controlLines","s","length","c","replace","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","shouldConstruct","Component","isReactComponent","describeUnknownElementTypeFrameInDEV","loggedTypeFailures","setCurrentlyValidatingElement","element","_owner","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","has","bind","hasOwnProperty","typeSpecName","err","ex","message","valueStack","fiberStack","createCursor","defaultValue","pop","cursor","warnedAboutMissingGetChildContext","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","BlockingRoot","ConcurrentRoot","rendererID","injectedHook","hasLoggedError","isDevToolsPresent","__REACT_DEVTOOLS_GLOBAL_HOOK__","injectInternals","internals","hook","isDisabled","supportsFiber","inject","onScheduleRoot","root","onScheduleFiberRoot","__DEV__","onCommitRoot","priorityLevel","onCommitFiberRoot","didError","onCommitUnmount","onCommitFiberUnmount","SchedulerTracing","__interactionsRef","__subscriberRef","unstable_clear","unstable_getCurrent","unstable_getThreadID","unstable_subscribe","unstable_trace","unstable_unsubscribe","unstable_wrap","Scheduler_now","Scheduler","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","NoPriority","initialTimeMs","SyncLanePriority","SyncBatchedLanePriority","InputDiscreteHydrationLanePriority","InputDiscreteLanePriority","InputContinuousHydrationLanePriority","InputContinuousLanePriority","DefaultHydrationLanePriority","DefaultLanePriority","TransitionHydrationPriority","TransitionPriority","RetryLanePriority","SelectiveHydrationLanePriority","IdleHydrationLanePriority","IdleLanePriority","OffscreenLanePriority","NoLanePriority","TotalLanes","NoLanes","NoLane","SyncLane","SyncBatchedLane","InputDiscreteHydrationLane","InputDiscreteLanes","InputContinuousHydrationLane","InputContinuousLanes","DefaultHydrationLane","DefaultLanes","TransitionHydrationLane","TransitionLanes","RetryLanes","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLanes","OffscreenLane","NoTimestamp","return_highestLanePriority","getHighestPriorityLanes","lanes","inputDiscreteLanes","inputContinuousLanes","defaultLanes","transitionLanes","retryLanes","idleLanes","schedulerPriorityToLanePriority","schedulerPriorityLevel","ImmediateSchedulerPriority","UserBlockingSchedulerPriority","NormalSchedulerPriority","LowSchedulerPriority","IdleSchedulerPriority","lanePriorityToSchedulerPriority","lanePriority","NoSchedulerPriority","getNextLanes","wipLanes","pendingLanes","nextLanes","nextLanePriority","expiredLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","getEqualOrHigherPriorityLanes","wipLanePriority","entangledLanes","entanglements","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","priority","markStarvedLanesAsExpired","expirationTimes","expirationTime","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","returnNextLanesPriority","includesNonIdleWork","includesOnlyRetries","includesOnlyTransitions","findUpdateLane","pickArbitraryLane","findTransitionLane","findRetryLane","getHighestPriorityLane","getLowestPriorityLane","clz32","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","laneToLanes","createLaneMap","initial","laneMap","i","markRootUpdated","updateLane","higherPriorityLanes","markRootSuspended","markRootPinged","hasDiscreteLanes","markRootMutableRead","mutableReadLanes","markRootFinished","remainingLanes","noLongerPendingLanes","markRootEntangled","Math","clz32Fallback","LN2","Scheduler_runWithPriority","Scheduler_scheduleCallback","Scheduler_cancelCallback","Scheduler_shouldYield","Scheduler_requestPaint","Scheduler_getCurrentPriorityLevel","Scheduler_ImmediatePriority","Scheduler_UserBlockingPriority","Scheduler_NormalPriority","Scheduler_LowPriority","Scheduler_IdlePriority","fakeCallbackNode","shouldYield","requestPaint","syncQueue","immediateQueueCallbackNode","isFlushingSyncQueue","now","getCurrentPriorityLevel","reactPriorityToSchedulerPriority","reactPriorityLevel","runWithPriority","scheduleCallback","callback","options","scheduleSyncCallback","flushSyncCallbackQueueImpl","cancelCallback","callbackNode","flushSyncCallbackQueue","isSync","queue","slice","NoMode","StrictMode","BlockingMode","ConcurrentMode","ProfileMode","DebugTracingMode","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","is","y","objectIs","shallowEqual","objA","objB","keysA","keys","keysB","describeFiber","_debugOwner","_debugSource","getStackByFiberInDevAndProd","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","setIsRendering","rendering","getIsRendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","mode","setToSortedString","array","forEach","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","add","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","size","sortedNames","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","fiberArray","firstFiber","uniqueNames","setCurrentDebugFiberInDEV","resetCurrentDebugFiberInDEV","resolveDefaultProps","baseProps","defaultProps","propName","MAX_SIGNED_31_BIT_INT","valueCursor","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastContextWithAllBitsObserved","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","_currentValue2","_currentRenderer2","popProvider","currentValue","calculateChangedBits","newValue","oldValue","changedBits","_calculateChangedBits","scheduleWorkOnParentPath","renderLanes","childLanes","propagateContextChange","nextFiber","list","dependencies","dependency","firstContext","observedBits","update","createUpdate","ForceUpdate","enqueueUpdate","next","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","resolvedObservedBits","contextItem","responders","isPrimaryRenderer","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","memoizedState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","updateQueue","cloneUpdateQueue","currentQueue","clone","sharedQueue","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","lastPendingUpdate","firstPendingUpdate","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","fakeInternalInstance","emptyRefsObject","refs","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","warnOnUndefinedDerivedState","warnOnInvalidCallback","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutContextTypeAndContextTypes","didWarnAboutInvalidateContextType","didWarnOnInvalidCallback","callerName","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","shouldUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","state","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","adoptClassInstance","updater","setInstance","_reactInternalInstance","constructClassInstance","isLegacyContextConsumer","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","warnForMissingKey","returnFiber","_store","validated","coerceRef","mixedRef","ref","_self","stringRef","_stringRef","throwOnInvalidObjectType","newChild","warnOnFunctionType","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","last","lastEffect","nextEffect","firstEffect","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","existing","updateElement","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","updateFragment","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","warnOnInvalidKey","knownKeys","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","reconcileChildrenIterator","newChildrenIterable","iteratorFn","toStringTag","entries","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","isObject","_isMockFunction","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","dehydrated","fallback","unstable_avoidThisFallback","findFirstSuspended","row","revealOrder","didSuspend","HasEffect","Layout","isHydrating","enterHydrationState","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","popHydrationState","getIsHydrating","workInProgressSources","markSourceAsDirty","mutableSource","resetWorkInProgressVersions","_workInProgressVersionSecondary","getWorkInProgressVersion","setWorkInProgressVersion","version","warnAboutMultipleRenderersDEV","_currentSecondaryRenderer","didWarnAboutMismatchedHooksForComponent","didWarnAboutUseOpaqueIdentifier","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","numberOfReRenders","HooksDispatcherOnRerenderInDEV","ContextOnlyDispatcher","didRenderTooFewHooks","bailoutHooks","PassiveEffect","UpdateEffect","resetHooksAfterThrow","isUpdatingOpaqueValueInRenderPhase","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchAction","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","eagerReducer","eagerState","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","readFromUnsubcribedMutableSource","getSnapshot","getVersion","_getVersion","isSafeToReadFromSource","currentRenderVersion","snapshot","useMutableSource","subscribe","getWorkInProgressRoot","dispatcher","useState","currentSnapshot","setSnapshot","stateHook","prevGetSnapshot","prevSource","prevSubscribe","useEffect","maybeNewVersion","maybeNewSnapshot","handleChange","latestGetSnapshot","latestSetSnapshot","unsubscribe","newQueue","mountMutableSource","updateMutableSource","mountState","updateState","rerenderState","pushEffect","create","destroy","componentUpdateQueue","mountRef","initialValue","seal","updateRef","mountEffectImpl","fiberFlags","hookFlags","HookHasEffect","updateEffectImpl","prevEffect","mountEffect","jest","warnIfNotCurrentlyActingEffectsInDEV","HookPassive","updateEffect","mountLayoutEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","prevValue","setValue","prevTransition","updateDeferredValue","rerenderDeferredValue","startTransition","setPending","mountTransition","isPending","start","updateTransition","startRef","rerenderTransition","getIsUpdatingOpaqueValueInRenderPhaseInDEV","warnOnOpaqueIdentifierAccessInDEV","mountOpaqueIdentifier","makeId","updateOpaqueIdentifier","rerenderOpaqueIdentifier","arguments","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","currentState","warnIfNotScopedWithMatchingAct","warnIfNotCurrentlyActingUpdatesInDev","useCallback","useContext","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useDebugValue","useDeferredValue","useTransition","useOpaqueIdentifier","unstable_isNewReconciler","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","commitTime","profilerStartTime","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","transferActualDuration","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","didWarnAboutDefaultPropsOnFunctionComponent","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","innerPropTypes","bailoutOnAlreadyFinishedWork","updateMemoComponent","updateLanes","isSimpleFunctionComponent","compare","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","prevProps","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","baseLanes","pushRenderLanes","nextBaseLanes","prevBaseLanes","markSpawnedWork","subtreeRenderLanes","updateLegacyHiddenComponent","updateMode","updateProfiler","effectDuration","passiveEffectDuration","markRef","updateClassComponent","hasContext","isLegacyContextProvider","pushLegacyContextProvider","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","resetHydrationState","hydrate","updateHostComponent","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","mountIncompleteClassComponent","mountIndeterminateComponent","ownerName","warningKey","_debugID","debugSource","fileName","lineNumber","SUSPENDED_MARKER","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseContext","suspenseState","getRemainingWorkInPrimaryTree","updateSuspenseComponent","shouldSuspend","showFallback","nextPrimaryChildren","nextFallbackChildren","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","unstable_expectedLoadTime","mountSuspensePrimaryChildren","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","createFiberFromOffscreen","fallbackChildren","progressedPrimaryFragment","treeBaseDuration","createWorkInProgressOffscreenFiber","offscreenProps","currentPrimaryChildFragment","currentFallbackChildFragment","progressedLastEffect","scheduleWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","toLowerCase","validateTailOptions","tailMode","validateSuspenseListNestedChild","childSlot","isIterable","validateSuspenseListChildren","childrenIterator","initSuspenseListRenderState","isBackwards","tail","lastEffectBeforeRendering","renderState","renderingStartTime","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","providerType","providerPropTypes","hasLegacyContextChanged","hasWarnedAboutUsingContextAsConsumer","updateContextConsumer","Consumer","unstable_observedBits","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","beginWork","_debugNeedsRemount","hasChildWork","primaryChildLanes","unresolvedProps","markUpdate","appendAllChildren","updateHostContainer","needsVisibilityToggle","currentHostContext","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","completeWork","popLegacyContext","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","fiberRoot","wasHydrated","nextDidTimeout","prevDidTimeout","hasInvisibleChildContext","renderDidSuspend","renderDidSuspendDelayIfPossible","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThennables","getRenderTargetTime","previousSibling","popRenderLanes","prevIsHidden","nextIsHidden","unwindWork","unwindInterruptedWork","interruptedWork","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","e","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","componentDidCatch","markFailedErrorBoundaryForHotReloading","markLegacyErrorBoundaryAsFailed","attachPingListener","wakeable","pingCache","threadIDs","ping","pingSuspendedRoot","then","throwException","sourceFiber","rootRenderLanes","currentSource","hasInvisibleParentBoundary","wakeables","currentSourceFiber","renderDidError","isAlreadyFailedLegacyErrorBoundary","invokeGuardedCallbackProd","func","d","f","funcArgs","onError","invokeGuardedCallbackImpl","window","dispatchEvent","document","createEvent","fakeNode","createElement","invokeGuardedCallbackDev","evt","didCall","windowEvent","event","windowEventDescriptor","getOwnPropertyDescriptor","restoreAfterDispatch","removeEventListener","evtType","didSetError","isCrossOriginError","handleWindowError","colno","lineno","defaultPrevented","inner","addEventListener","initEvent","hasError","caughtError","reporter","invokeGuardedCallback","hasCaughtError","clearCaughtError","didWarnAboutUndefinedSnapshotBeforeUpdate","PossiblyWeakSet","WeakSet","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","unmountError","captureCommitPhaseError","safelyDetachRef","refError","safelyCallDestroy","commitBeforeMutationLifeCycles","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitHookEffectListMount","schedulePassiveEffects","NoHookEffect","enqueuePendingPassiveHookEffectUnmount","enqueuePendingPassiveHookEffectMount","commitLifeCycles","finishedRoot","committedLanes","commitMount","onCommit","onRender","memoizedInteractions","commitSuspenseHydrationCallbacks","hideOrUnhideAllChildren","commitAttachRef","instanceToUse","commitDetachRef","currentRef","commitUnmount","renderPriorityLevel","unmountHostComponents","commitNestedUnmounts","detachFiberMutation","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","isContainer","parentStateNode","before","insertOrAppendPlacementNodeIntoContainer","insertOrAppendPlacementNode","isHost","currentParentIsValid","currentParentIsContainer","findParent","commitDeletion","commitWork","commitSuspenseComponent","attachSuspenseRetryListeners","markCommitTimeOfFallback","primaryChildParent","retryCache","retry","resolveRetryWakeable","__reactDoNotTraceInteractions","Schedule_tracing_wrap","isSuspenseBoundaryBeingHidden","commitResetTextContent","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","didWarnAboutMessageChannel","enqueueTaskImpl","enqueueTask","task","requireString","random","nodeRequire","module","setImmediate","_err","MessageChannel","channel","port1","onmessage","port2","postMessage","ceil","IsSomeRendererActing","NoContext","BatchedContext","DiscreteEventContext","LegacyUnbatchedContext","RenderContext","CommitContext","RetryAfterError","RootIncomplete","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootUpdatedLanes","workInProgressRootPingedLanes","mostRecentlyUpdatedRoot","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsRenderPriority","pendingPassiveEffectsLanes","pendingPassiveHookEffectsMount","pendingPassiveHookEffectsUnmount","rootsWithPendingDiscreteUpdates","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","spawnedWorkDuringRender","currentEventTime","currentEventWipLanes","currentEventPendingLanes","isFlushingPassiveEffects","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","isTransition","schedulerPriority","schedulerLanePriority","requestRetryLane","checkForNestedUpdates","warnAboutRenderPhaseUpdatesInDEV","markUpdateLaneFromFiberToRoot","warnAboutUpdateOnUnmountedFiberInDEV","schedulePendingInteractions","performSyncWorkOnRoot","ensureRootIsScheduled","warnAboutUpdateOnNotYetMountedFiberInDEV","existingCallbackNode","newCallbackPriority","callbackPriority","existingCallbackPriority","newCallbackNode","performConcurrentWorkOnRoot","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","exitStatus","renderRootConcurrent","prepareFreshStack","renderRootSync","fatalError","finishedLanes","finishConcurrentRender","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","markRootSuspended_dontCallThisOneDirectly","batchedUpdates","prevExecutionContext","flushSync","pushToStack","popFromStack","handleError","thrownValue","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","popDispatcher","pushInteractions","prevInteractions","popInteractions","startWorkOnPendingInteractions","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","completedWork","resetChildLanes","siblingFiber","newChildLanes","shouldBubbleActualDurations","isTimedOutSuspense","commitRootImpl","flushRenderPhaseStrictModeWarningsInDEV","commitBeforeMutationEffects","commitMutationEffects","commitLayoutEffects","rootDidHavePassiveEffects","nextNextEffect","detachFiberAfterEffects","scheduleInteractions","finishPendingInteractions","onCommitRootDevTools","beforeActiveInstanceBlur","commitBeforeMutationEffectOnFiber","primaryFlags","commitLayoutEffectOnFiber","flushPassiveEffectsImpl","invokePassiveEffectCreate","unmountEffects","mountEffects","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","errorToIgnore","retryTimedOutBoundary","boundaryFiber","timeElapsed","didWarnStateUpdateForNotYetMountedComponent","previousFiber","ReactCurrentFiberCurrent","didWarnStateUpdateForUnmountedComponent","originalBeginWork","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","ReactCurrentDebugFiberIsRenderingInDEV","renderingComponentName","dedupeKey","setStateComponentName","IsThisRendererActing","warnsIfNotActing","warnIfNotCurrentlyActingUpdatesInDEV","didWarnAboutUnmockedScheduler","warnIfUnmockedScheduler","computeThreadID","interactionThreadID","interactions","pendingInteractionMap","pendingInteractions","interaction","__count","subscriber","threadID","onWorkScheduled","scheduledInteractions","scheduledLane","onWorkStarted","remainingLanesAfterCommit","onWorkStopped","onInteractionScheduledWorkCompleted","actingUpdatesScopeDepth","flushMockScheduler","isSchedulerMocked","flushActWork","isFlushingAct","didFlushWork","flushWorkAndMicroTasks","onDone","act","previousActingUpdatesScopeDepth","previousIsSomeRendererActing","previousIsThisRendererActing","isInsideThisAct","result","called","Promise","resolve","reject","resolveFamily","failedBoundaries","setRefreshHandler","handler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","findHostInstancesForRefresh","families","hostInstances","types","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","debugCounter","FiberNode","Number","NaN","createFiber","currentDependencies","createHostRootFiber","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromLegacyHidden","elements","content","pendingChildren","FiberRootNode","_debugRootType","createFiberRoot","hydrationCallbacks","uninitializedFiber","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","createContainer","ReactCurrentFiberIsRendering","getPublicRootInstance","containerFiber","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setSuspenseHandler","copyWithDeleteImpl","obj","path","updated","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldSuspendImpl","findHostInstanceByFiber","hostFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","getCurrentFiber","defaultTestOptions","toJSON","renderedChildren","renderedChild","json","childrenToTree","nodeAndSiblingsArray","toTree","flatten","nodeWithSibling","arr","n","el","nodeType","rendered","validWrapperTypes","getChildren","startingNode","outer","descend","wrapFiber","ReactTestInstance","_currentFiber","_fiber","find","predicate","expectOne","findAll","deep","findByType","findAllByType","findByProps","findAllByProps","JSON","stringify","propsMatch","results","all","filter","isConcurrent","unstable_isConcurrent","entry","_Scheduler","newElement","unmount","unstable_flushSync","fiberToWrapper","wrapper","ReactVersion","unstable_concurrentAct","scope","unwind","thenable","runOnlyPendingTimers"],"mappings":";;;;;;EAWA,IAAMA,oBAAoB,GACxBC,wDADF;;ECDA;EACA;EACA;EACA;;AAEA,EAAO,SAASC,IAAT,CAAcC,MAAd,EAA+B;EACpC,EAAa;EAAA,sCADiBC,IACjB;EADiBA,MAAAA,IACjB;EAAA;;EACXC,IAAAA,YAAY,CAAC,MAAD,EAASF,MAAT,EAAiBC,IAAjB,CAAZ;EACD;EACF;AAED,EAAO,SAASE,KAAT,CAAeH,MAAf,EAAgC;EACrC,EAAa;EAAA,uCADkBC,IAClB;EADkBA,MAAAA,IAClB;EAAA;;EACXC,IAAAA,YAAY,CAAC,OAAD,EAAUF,MAAV,EAAkBC,IAAlB,CAAZ;EACD;EACF;;EAED,SAASC,YAAT,CAAsBE,KAAtB,EAA6BJ,MAA7B,EAAqCC,IAArC,EAA2C;EACzC;EACA;EACA,EAAa;EACX,QAAMI,sBAAsB,GAAGR,oBAAoB,CAACQ,sBAApD;EACA,QAAMC,KAAK,GAAGD,sBAAsB,CAACE,gBAAvB,EAAd;;EACA,QAAID,KAAK,KAAK,EAAd,EAAkB;EAChBN,MAAAA,MAAM,IAAI,IAAV;EACAC,MAAAA,IAAI,GAAGA,IAAI,CAACO,MAAL,CAAY,CAACF,KAAD,CAAZ,CAAP;EACD;;EAED,QAAMG,cAAc,GAAGR,IAAI,CAACS,GAAL,CAAS,UAAAC,IAAI;EAAA,aAAI,KAAKA,IAAT;EAAA,KAAb,CAAvB,CARW;;EAUXF,IAAAA,cAAc,CAACG,OAAf,CAAuB,cAAcZ,MAArC,EAVW;EAYX;EACA;;EACAa,IAAAA,QAAQ,CAACC,SAAT,CAAmBC,KAAnB,CAAyBC,IAAzB,CAA8BC,OAAO,CAACb,KAAD,CAArC,EAA8Ca,OAA9C,EAAuDR,cAAvD;EACD;EACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECnCD,IAAMS,cAAc,GAAGpB,wDAAvB;AAEA,gBAAeoB,cAAc,CAACC,MAA9B;;ECuBO,IAAMC,iBAAiB,GAAG,CAA1B;AACP,EAAO,IAAMC,cAAc,GAAG,CAAvB;AACP,EAAO,IAAMC,sBAAsB,GAAG,CAA/B;;AACP,EAAO,IAAMC,QAAQ,GAAG,CAAjB;;AACP,EAAO,IAAMC,UAAU,GAAG,CAAnB;;AACP,EAAO,IAAMC,aAAa,GAAG,CAAtB;AACP,EAAO,IAAMC,QAAQ,GAAG,CAAjB;AACP,EAAO,IAAMC,QAAQ,GAAG,CAAjB;AACP,EAAO,IAAMC,IAAI,GAAG,CAAb;AACP,EAAO,IAAMC,eAAe,GAAG,CAAxB;AACP,EAAO,IAAMC,eAAe,GAAG,EAAxB;AACP,EAAO,IAAMC,UAAU,GAAG,EAAnB;AACP,EAAO,IAAMC,QAAQ,GAAG,EAAjB;AACP,EAAO,IAAMC,iBAAiB,GAAG,EAA1B;AACP,EAAO,IAAMC,aAAa,GAAG,EAAtB;AACP,EAAO,IAAMC,mBAAmB,GAAG,EAA5B;AACP,EAAO,IAAMC,aAAa,GAAG,EAAtB;AACP,EAAO,IAAMC,wBAAwB,GAAG,EAAjC;AACP,EAAO,IAAMC,kBAAkB,GAAG,EAA3B;AACP,EAAO,IAAMC,qBAAqB,GAAG,EAA9B;AACP,EAAO,IAAMC,oBAAoB,GAAG,EAA7B;AACP,EAAO,IAAMC,cAAc,GAAG,EAAvB;AACP,EAAO,IAAMC,KAAK,GAAG,EAAd;AACP,EAAO,IAAMC,kBAAkB,GAAG,EAA3B;AACP,EAAO,IAAMC,qBAAqB,GAAG,EAA9B;;ECrDP;;;;;;;;;EAmBO,SAASC,GAAT,CAAaC,GAAb,EAAkB;EACvB,SAAOA,GAAG,CAACC,eAAX;EACD;AAED,EAIO,SAASC,GAAT,CAAaF,GAAb,EAAkBG,KAAlB,EAAyB;EAC9BH,EAAAA,GAAG,CAACC,eAAJ,GAAsBE,KAAtB;EACD;;EC3BD;EACA;EACA;EAEA;EACA;AACA,EAAO,IAAIC,kBAAkB,GAAG,MAAzB;AACP,EAAO,IAAIC,iBAAiB,GAAG,MAAxB;AACP,EAAO,IAAIC,mBAAmB,GAAG,MAA1B;AACP,EAAO,IAAIC,sBAAsB,GAAG,MAA7B;AACP,EAAO,IAAIC,mBAAmB,GAAG,MAA1B;AACP,EAAO,IAAIC,mBAAmB,GAAG,MAA1B;AACP,EAAO,IAAIC,kBAAkB,GAAG,MAAzB;AACP,EAAO,IAAIC,sBAAsB,GAAG,MAA7B;AACP,EAAO,IAAIC,mBAAmB,GAAG,MAA1B;AACP,EAAO,IAAIC,wBAAwB,GAAG,MAA/B;AACP,EAAO,IAAIC,eAAe,GAAG,MAAtB;AACP,EAAO,IAAIC,eAAe,GAAG,MAAtB;AACP,EAAO,IAAIC,gBAAgB,GAAG,MAAvB;AACP,EAAO,IAAIC,uBAAuB,GAAG,MAA9B;AACP,EAAO,IAAIC,sBAAsB,GAAG,MAA7B;AACP,EAAO,IAAIC,gBAAgB,GAAG,MAAvB;AACP,EAAO,IAAIC,oBAAoB,GAAG,MAA3B;AACP,EAAO,IAAIC,6BAA6B,GAAG,MAApC;AACP,EAAO,IAAIC,oBAAoB,GAAG,MAA3B;AACP,EAAO,IAAIC,wBAAwB,GAAG,MAA/B;;EAEP,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;EAC9C,MAAMC,SAAS,GAAGF,MAAM,CAACC,GAAzB;EACArB,EAAAA,kBAAkB,GAAGsB,SAAS,CAAC,eAAD,CAA9B;EACArB,EAAAA,iBAAiB,GAAGqB,SAAS,CAAC,cAAD,CAA7B;EACApB,EAAAA,mBAAmB,GAAGoB,SAAS,CAAC,gBAAD,CAA/B;EACAnB,EAAAA,sBAAsB,GAAGmB,SAAS,CAAC,mBAAD,CAAlC;EACAlB,EAAAA,mBAAmB,GAAGkB,SAAS,CAAC,gBAAD,CAA/B;EACAjB,EAAAA,mBAAmB,GAAGiB,SAAS,CAAC,gBAAD,CAA/B;EACAhB,EAAAA,kBAAkB,GAAGgB,SAAS,CAAC,eAAD,CAA9B;EACAf,EAAAA,sBAAsB,GAAGe,SAAS,CAAC,mBAAD,CAAlC;EACAd,EAAAA,mBAAmB,GAAGc,SAAS,CAAC,gBAAD,CAA/B;EACAb,EAAAA,wBAAwB,GAAGa,SAAS,CAAC,qBAAD,CAApC;EACAZ,EAAAA,eAAe,GAAGY,SAAS,CAAC,YAAD,CAA3B;EACAX,EAAAA,eAAe,GAAGW,SAAS,CAAC,YAAD,CAA3B;EACAV,EAAAA,gBAAgB,GAAGU,SAAS,CAAC,aAAD,CAA5B;EACAT,EAAAA,uBAAuB,GAAGS,SAAS,CAAC,oBAAD,CAAnC;EACAR,EAAAA,sBAAsB,GAAGQ,SAAS,CAAC,mBAAD,CAAlC;EACAP,EAAAA,gBAAgB,GAAGO,SAAS,CAAC,aAAD,CAA5B;EACAN,EAAAA,oBAAoB,GAAGM,SAAS,CAAC,iBAAD,CAAhC;EACAL,EAAAA,6BAA6B,GAAGK,SAAS,CAAC,wBAAD,CAAzC;EACAJ,EAAAA,oBAAoB,GAAGI,SAAS,CAAC,iBAAD,CAAhC;EACAH,EAAAA,wBAAwB,GAAGG,SAAS,CAAC,qBAAD,CAApC;EACD;;EAED,IAAMC,qBAAqB,GAAG,OAAOH,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACI,QAArE;EACA,IAAMC,oBAAoB,GAAG,YAA7B;AAEA,EAAO,SAASC,aAAT,CAAuBC,aAAvB,EAAiE;EACtE,MAAIA,aAAa,KAAK,IAAlB,IAA0B,OAAOA,aAAP,KAAyB,QAAvD,EAAiE;EAC/D,WAAO,IAAP;EACD;;EACD,MAAMC,aAAa,GAChBL,qBAAqB,IAAII,aAAa,CAACJ,qBAAD,CAAvC,IACAI,aAAa,CAACF,oBAAD,CAFf;;EAGA,MAAI,OAAOG,aAAP,KAAyB,UAA7B,EAAyC;EACvC,WAAOA,aAAP;EACD;;EACD,SAAO,IAAP;EACD;;EC/CD,SAASC,cAAT,CACEC,SADF,EAEEC,SAFF,EAGEC,WAHF,EAIU;EACR,MAAMC,YAAY,GAAGF,SAAS,CAACG,WAAV,IAAyBH,SAAS,CAACI,IAAnC,IAA2C,EAAhE;EACA,SACGL,SAAD,CAAiBI,WAAjB,KACCD,YAAY,KAAK,EAAjB,GAAyBD,WAAzB,SAAwCC,YAAxC,SAA0DD,WAD3D,CADF;EAID;;EAED,SAASI,cAAT,CAAwBC,IAAxB,EAAiD;EAC/C,SAAOA,IAAI,CAACH,WAAL,IAAoB,SAA3B;EACD;;EAED,SAASI,gBAAT,CAA0BD,IAA1B,EAAsD;EACpD,MAAIA,IAAI,IAAI,IAAZ,EAAkB;EAChB;EACA,WAAO,IAAP;EACD;;EACD,EAAa;EACX,QAAI,OAAQA,IAAD,CAAYE,GAAnB,KAA2B,QAA/B,EAAyC;EACvC,YACE,0DACE,sDAFJ;EAID;EACF;;EACD,MAAI,OAAOF,IAAP,KAAgB,UAApB,EAAgC;EAC9B,WAAQA,IAAD,CAAYH,WAAZ,IAA2BG,IAAI,CAACF,IAAhC,IAAwC,IAA/C;EACD;;EACD,MAAI,OAAOE,IAAP,KAAgB,QAApB,EAA8B;EAC5B,WAAOA,IAAP;EACD;;EACD,UAAQA,IAAR;EACE,SAAKnC,mBAAL;EACE,aAAO,UAAP;;EACF,SAAKD,iBAAL;EACE,aAAO,QAAP;;EACF,SAAKG,mBAAL;EACE,aAAO,UAAP;;EACF,SAAKD,sBAAL;EACE,aAAO,YAAP;;EACF,SAAKK,mBAAL;EACE,aAAO,UAAP;;EACF,SAAKC,wBAAL;EACE,aAAO,cAAP;EAZJ;;EAcA,MAAI,OAAO4B,IAAP,KAAgB,QAApB,EAA8B;EAC5B,YAAQA,IAAI,CAACG,QAAb;EACE,WAAKlC,kBAAL;EACE,YAAMmC,OAA0B,GAAIJ,IAApC;EACA,eAAOD,cAAc,CAACK,OAAD,CAAd,GAA0B,WAAjC;;EACF,WAAKpC,mBAAL;EACE,YAAMqC,QAAgC,GAAIL,IAA1C;EACA,eAAOD,cAAc,CAACM,QAAQ,CAACC,QAAV,CAAd,GAAoC,WAA3C;;EACF,WAAKpC,sBAAL;EACE,eAAOsB,cAAc,CAACQ,IAAD,EAAOA,IAAI,CAACO,MAAZ,EAAoB,YAApB,CAArB;;EACF,WAAKlC,eAAL;EACE,eAAO4B,gBAAgB,CAACD,IAAI,CAACA,IAAN,CAAvB;;EACF,WAAKzB,gBAAL;EACE,eAAO0B,gBAAgB,CAACD,IAAI,CAACQ,OAAN,CAAvB;;EACF,WAAKlC,eAAL;EAAsB;EACpB,cAAMmC,aAAsC,GAAIT,IAAhD;EACA,cAAMU,OAAO,GAAGD,aAAa,CAACE,QAA9B;EACA,cAAMC,IAAI,GAAGH,aAAa,CAACI,KAA3B;;EACA,cAAI;EACF,mBAAOZ,gBAAgB,CAACW,IAAI,CAACF,OAAD,CAAL,CAAvB;EACD,WAFD,CAEE,OAAOI,CAAP,EAAU;EACV,mBAAO,IAAP;EACD;EACF;EAtBH;EAwBD;;EACD,SAAO,IAAP;EACD;;EC5FD;AACA,EAAO,IAAMC,OAAO;EAAG;EAA2B,CAA3C;AACP,EAAO,IAAMC,aAAa;EAAG;EAAqB,CAA3C;;AAGP,EAAO,IAAMC,SAAS;EAAG;EAAyB,CAA3C;AACP,EAAO,IAAMC,MAAM;EAAG;EAA4B,CAA3C;AACP,EAAO,IAAMC,kBAAkB;EAAG;EAAgB,CAA3C;AACP,EAAO,IAAMC,QAAQ;EAAG;EAA0B,CAA3C;AACP,EAAO,IAAMC,YAAY;EAAG;EAAsB,EAA3C;AACP,EAAO,IAAMC,QAAQ;EAAG;EAA0B,EAA3C;AACP,EAAO,IAAMC,UAAU;EAAG;EAAwB,EAA3C;AACP,EAAO,IAAMC,GAAG;EAAG;EAA+B,GAA3C;AACP,EAAO,IAAMC,QAAQ;EAAG;EAA0B,GAA3C;AACP,EAAO,IAAMC,OAAO;EAAG;EAA2B,GAA3C;;AAEP,EAAO,IAAMC,wBAAwB;EAAG;EAAU,IAA3C;AACP,EAAO,IAAMC,SAAS;EAAG;EAAyB,IAA3C;AACP,EAAO,IAAMC,kBAAkB;EAAG;EAAgB,IAA3C;;AAGP,EAAO,IAAMC,mBAAmB;EAAG;EAAe,GAA3C;;AAGP,EAAO,IAAMC,cAAc;EAAG;EAAoB,IAA3C;;AAGP,EAAO,IAAMC,UAAU;EAAG;EAAwB,IAA3C;AACP,EAAO,IAAMC,aAAa;EAAG;EAAqB,IAA3C;AACP,EAAO,IAAMC,4BAA4B;EAAG;EAAM,KAA3C;;ECvBA,IAAMC,mBAAmB,GAAGC,IAA5B;AACP,EASO,IAAMC,oBAAoB,GAAG,KAA7B;AACP,EAKO,IAAMC,mBAAmB,GAAG,KAA5B;AACP,EAYO,IAAMC,mBAAmB,GAAG,KAA5B;;EChBP,IAAMC,iBAAiB,GAAGlI,oBAAoB,CAACkI,iBAA/C;AAEA,EAAO,SAASC,sBAAT,CAAgCC,KAAhC,EAA4D;EACjE,MAAIC,IAAI,GAAGD,KAAX;EACA,MAAIE,cAAc,GAAGF,KAArB;;EACA,MAAI,CAACA,KAAK,CAACG,SAAX,EAAsB;EACpB;EACA;EACA,QAAIC,QAAQ,GAAGH,IAAf;;EACA,OAAG;EACDA,MAAAA,IAAI,GAAGG,QAAP;;EACA,UAAI,CAACH,IAAI,CAACI,KAAL,IAAc9B,SAAS,GAAGW,SAA1B,CAAD,MAA2Cb,OAA/C,EAAwD;EACtD;EACA;EACA;EACA6B,QAAAA,cAAc,GAAGD,IAAI,CAACK,MAAtB;EACD;;EACDF,MAAAA,QAAQ,GAAGH,IAAI,CAACK,MAAhB;EACD,KATD,QASSF,QATT;EAUD,GAdD,MAcO;EACL,WAAOH,IAAI,CAACK,MAAZ,EAAoB;EAClBL,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;EACF;;EACD,MAAIL,IAAI,CAACzC,GAAL,KAAalE,QAAjB,EAA2B;EACzB;EACA;EACA,WAAO4G,cAAP;EACD,GA1BgE;EA4BjE;;;EACA,SAAO,IAAP;EACD;AAED,EAwBO,SAASK,cAAT,CAAwBP,KAAxB,EAA+C;EACpD,SAAOD,sBAAsB,CAACC,KAAD,CAAtB,KAAkCA,KAAzC;EACD;AAED,EAAO,SAASQ,SAAT,CAAmBC,SAAnB,EAAkE;EACvE,EAAa;EACX,QAAMC,KAAK,GAAIZ,iBAAiB,CAACa,OAAjC;;EACA,QAAID,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAAClD,GAAN,KAAcpE,cAApC,EAAoD;EAClD,UAAMwH,UAAiB,GAAGF,KAA1B;EACA,UAAMG,QAAQ,GAAGD,UAAU,CAACE,SAA5B;;EACA,UAAI,CAACD,QAAQ,CAACE,wBAAd,EAAwC;EACtC,cACE,6DACE,mEADF,GAEE,oEAFF,GAGE,iEAHF,GAIE,6BALJ,EAMExD,gBAAgB,CAACqD,UAAU,CAACtD,IAAZ,CAAhB,IAAqC,aANvC;EAQD;;EACDuD,MAAAA,QAAQ,CAACE,wBAAT,GAAoC,IAApC;EACD;EACF;;EAED,MAAMf,KAAa,GAAGgB,GAAW,CAACP,SAAD,CAAjC;;EACA,MAAI,CAACT,KAAL,EAAY;EACV,WAAO,KAAP;EACD;;EACD,SAAOD,sBAAsB,CAACC,KAAD,CAAtB,KAAkCA,KAAzC;EACD;;EAED,SAASiB,eAAT,CAAyBjB,KAAzB,EAAgC;EAAA,QAE5BD,sBAAsB,CAACC,KAAD,CAAtB,KAAkCA,KAFN;EAAA;EAAA;EAAA;EAAA;EAK/B;;AAED,EAAO,SAASkB,6BAAT,CAAuClB,KAAvC,EAAmE;EACxE,MAAMG,SAAS,GAAGH,KAAK,CAACG,SAAxB;;EACA,MAAI,CAACA,SAAL,EAAgB;EACd;EACA,QAAMD,cAAc,GAAGH,sBAAsB,CAACC,KAAD,CAA7C;;EAFc,UAIZE,cAAc,KAAK,IAJP;EAAA;EAAA;EAAA;EAAA;;EAOd,QAAIA,cAAc,KAAKF,KAAvB,EAA8B;EAC5B,aAAO,IAAP;EACD;;EACD,WAAOA,KAAP;EACD,GAbuE;EAexE;EACA;;;EACA,MAAImB,CAAQ,GAAGnB,KAAf;EACA,MAAIoB,CAAQ,GAAGjB,SAAf;;EACA,SAAO,IAAP,EAAa;EACX,QAAMkB,OAAO,GAAGF,CAAC,CAACb,MAAlB;;EACA,QAAIe,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACA;EACD;;EACD,QAAMC,OAAO,GAAGD,OAAO,CAAClB,SAAxB;;EACA,QAAImB,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACA;EACA;EACA;EACA,UAAMC,UAAU,GAAGF,OAAO,CAACf,MAA3B;;EACA,UAAIiB,UAAU,KAAK,IAAnB,EAAyB;EACvBJ,QAAAA,CAAC,GAAGC,CAAC,GAAGG,UAAR;EACA;EACD,OATmB;;;EAWpB;EACD,KAnBU;EAsBX;EACA;;;EACA,QAAIF,OAAO,CAACG,KAAR,KAAkBF,OAAO,CAACE,KAA9B,EAAqC;EACnC,UAAIA,KAAK,GAAGH,OAAO,CAACG,KAApB;;EACA,aAAOA,KAAP,EAAc;EACZ,YAAIA,KAAK,KAAKL,CAAd,EAAiB;EACf;EACAF,UAAAA,eAAe,CAACI,OAAD,CAAf;EACA,iBAAOrB,KAAP;EACD;;EACD,YAAIwB,KAAK,KAAKJ,CAAd,EAAiB;EACf;EACAH,UAAAA,eAAe,CAACI,OAAD,CAAf;EACA,iBAAOlB,SAAP;EACD;;EACDqB,QAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;EACD,OAdkC;EAgBnC;;;EAhBmC;EAAA;EAAA;EAAA;EAAA;EAkBpC;;EAED,QAAIN,CAAC,CAACb,MAAF,KAAac,CAAC,CAACd,MAAnB,EAA2B;EACzB;EACA;EACA;EACA;EACAa,MAAAA,CAAC,GAAGE,OAAJ;EACAD,MAAAA,CAAC,GAAGE,OAAJ;EACD,KAPD,MAOO;EACL;EACA;EACA;EACA;EACA;EACA,UAAII,YAAY,GAAG,KAAnB;EACA,UAAIF,MAAK,GAAGH,OAAO,CAACG,KAApB;;EACA,aAAOA,MAAP,EAAc;EACZ,YAAIA,MAAK,KAAKL,CAAd,EAAiB;EACfO,UAAAA,YAAY,GAAG,IAAf;EACAP,UAAAA,CAAC,GAAGE,OAAJ;EACAD,UAAAA,CAAC,GAAGE,OAAJ;EACA;EACD;;EACD,YAAIE,MAAK,KAAKJ,CAAd,EAAiB;EACfM,UAAAA,YAAY,GAAG,IAAf;EACAN,UAAAA,CAAC,GAAGC,OAAJ;EACAF,UAAAA,CAAC,GAAGG,OAAJ;EACA;EACD;;EACDE,QAAAA,MAAK,GAAGA,MAAK,CAACC,OAAd;EACD;;EACD,UAAI,CAACC,YAAL,EAAmB;EACjB;EACAF,QAAAA,MAAK,GAAGF,OAAO,CAACE,KAAhB;;EACA,eAAOA,MAAP,EAAc;EACZ,cAAIA,MAAK,KAAKL,CAAd,EAAiB;EACfO,YAAAA,YAAY,GAAG,IAAf;EACAP,YAAAA,CAAC,GAAGG,OAAJ;EACAF,YAAAA,CAAC,GAAGC,OAAJ;EACA;EACD;;EACD,cAAIG,MAAK,KAAKJ,CAAd,EAAiB;EACfM,YAAAA,YAAY,GAAG,IAAf;EACAN,YAAAA,CAAC,GAAGE,OAAJ;EACAH,YAAAA,CAAC,GAAGE,OAAJ;EACA;EACD;;EACDG,UAAAA,MAAK,GAAGA,MAAK,CAACC,OAAd;EACD;;EAjBgB,aAmBfC,YAnBe;EAAA;EAAA;EAAA;EAAA;EAuBlB;EACF;;EAlGU,UAqGTP,CAAC,CAAChB,SAAF,KAAgBiB,CArGP;EAAA;EAAA;EAAA;EAAA;EAyGZ,GA5HuE;EA8HxE;;;EA9HwE,QAgItED,CAAC,CAAC3D,GAAF,KAAUlE,QAhI4D;EAAA;EAAA;EAAA;EAAA;;EAmIxE,MAAI6H,CAAC,CAACL,SAAF,CAAYH,OAAZ,KAAwBQ,CAA5B,EAA+B;EAC7B;EACA,WAAOnB,KAAP;EACD,GAtIuE;;;EAwIxE,SAAOG,SAAP;EACD;AAED,EAAO,SAASwB,oBAAT,CAA8BC,MAA9B,EAA2D;EAChE,MAAMC,aAAa,GAAGX,6BAA6B,CAACU,MAAD,CAAnD;;EACA,MAAI,CAACC,aAAL,EAAoB;EAClB,WAAO,IAAP;EACD,GAJ+D;;;EAOhE,MAAI5B,IAAW,GAAG4B,aAAlB;;EACA,SAAO,IAAP,EAAa;EACX,QAAI5B,IAAI,CAACzC,GAAL,KAAahE,aAAb,IAA8ByG,IAAI,CAACzC,GAAL,KAAa/D,QAA/C,EAAyD;EACvD,aAAOwG,IAAP;EACD,KAFD,MAEO,IAAIA,IAAI,CAACuB,KAAT,EAAgB;EACrBvB,MAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,MAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;EACA;EACD;;EACD,QAAIvB,IAAI,KAAK4B,aAAb,EAA4B;EAC1B,aAAO,IAAP;EACD;;EACD,WAAO,CAAC5B,IAAI,CAACwB,OAAb,EAAsB;EACpB,UAAI,CAACxB,IAAI,CAACK,MAAN,IAAgBL,IAAI,CAACK,MAAL,KAAgBuB,aAApC,EAAmD;EACjD,eAAO,IAAP;EACD;;EACD5B,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;;EACDL,IAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;EACAL,IAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;EACD,GA3B+D;EA6BhE;;;EACA,SAAO,IAAP;EACD;AAED,EA8CO,SAASK,gBAAT,CACLC,WADK,EAELC,UAFK,EAGI;EACT,MAAI/B,IAAI,GAAG+B,UAAX;EACA,MAAMC,oBAAoB,GAAGF,WAAW,CAAC5B,SAAzC;;EACA,SAAOF,IAAI,KAAK,IAAhB,EAAsB;EACpB,QAAIA,IAAI,KAAK8B,WAAT,IAAwB9B,IAAI,KAAKgC,oBAArC,EAA2D;EACzD,aAAO,IAAP;EACD;;EACDhC,IAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;;EACD,SAAO,KAAP;EACD;;ECzVD;;EAEA,SAAS4B,IAAT,GAA4B;EAAA;EAAA;EAAA;EAAA;EAAA;EAO3B;EAQM,IAAMC,yBAAyB,GAAGD,IAAlC;AACP,EAAO,IAAME,0BAA0B,GAAGF,IAAnC;AACP,EAIO,IAAMG,mBAAmB,GAAGH,IAA5B;;ECoBP,IAAMI,UAAU,GAAG,EAAnB;EACA,IAAMC,aAAa,GAAG,EAAtB;EACA,IAAMC,iBAAiB,GAAG,IAAIC,OAAJ,EAA1B;;AAEA,EAAa;EACXC,EAAAA,MAAM,CAACC,MAAP,CAAcL,UAAd;EACAI,EAAAA,MAAM,CAACC,MAAP,CAAcJ,aAAd;EACD;;AAED,EAAO,SAASK,iBAAT,CAA2BC,IAA3B,EAA6D;EAClE,UAAQA,IAAI,CAACrF,GAAb;EACE,SAAK,UAAL;EACE,UAAMsF,cAAc,GAAGD,IAAI,CAACE,qBAAL,CAA2BD,cAAlD;EACA,UAAME,QAAQ,GAAGF,cAAc,CAAC;EAC9BxF,QAAAA,IAAI,EAAEuF,IAAI,CAACvF,IADmB;EAE9B2F,QAAAA,KAAK,EAAEJ,IAAI,CAACI;EAFkB,OAAD,CAA/B;;EAIA,UAAI,OAAOD,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;EACrDR,QAAAA,iBAAiB,CAACzH,GAAlB,CAAsBiI,QAAtB,EAAgCH,IAAhC;EACD;;EACD,aAAOG,QAAP;;EACF;EACE,aAAOH,IAAP;EAZJ;EAcD;AAED,EAAO,SAASK,WAAT,CACLC,cADK,EAEL3B,KAFK,EAGC;EACN,EAAa;EACX,QAAI,CAAC4B,KAAK,CAACC,OAAN,CAAcF,cAAc,CAACG,QAA7B,CAAL,EAA6C;EAC3C,YACE,6CACE,0FADF,GAEE,2EAFF,GAGE,wBAJJ;EAMD;EACF;;EACD,MAAMC,KAAK,GAAGJ,cAAc,CAACG,QAAf,CAAwBE,OAAxB,CAAgChC,KAAhC,CAAd;;EACA,MAAI+B,KAAK,KAAK,CAAC,CAAf,EAAkB;EAChBJ,IAAAA,cAAc,CAACG,QAAf,CAAwBG,MAAxB,CAA+BF,KAA/B,EAAsC,CAAtC;EACD;;EACDJ,EAAAA,cAAc,CAACG,QAAf,CAAwBI,IAAxB,CAA6BlC,KAA7B;EACD;AAED,EAAO,SAASmC,YAAT,CACLR,cADK,EAEL3B,KAFK,EAGLoC,WAHK,EAIC;EACN,MAAML,KAAK,GAAGJ,cAAc,CAACG,QAAf,CAAwBE,OAAxB,CAAgChC,KAAhC,CAAd;;EACA,MAAI+B,KAAK,KAAK,CAAC,CAAf,EAAkB;EAChBJ,IAAAA,cAAc,CAACG,QAAf,CAAwBG,MAAxB,CAA+BF,KAA/B,EAAsC,CAAtC;EACD;;EACD,MAAMM,WAAW,GAAGV,cAAc,CAACG,QAAf,CAAwBE,OAAxB,CAAgCI,WAAhC,CAApB;EACAT,EAAAA,cAAc,CAACG,QAAf,CAAwBG,MAAxB,CAA+BI,WAA/B,EAA4C,CAA5C,EAA+CrC,KAA/C;EACD;AAED,EAAO,SAASsC,WAAT,CACLX,cADK,EAEL3B,KAFK,EAGC;EACN,MAAM+B,KAAK,GAAGJ,cAAc,CAACG,QAAf,CAAwBE,OAAxB,CAAgChC,KAAhC,CAAd;EACA2B,EAAAA,cAAc,CAACG,QAAf,CAAwBG,MAAxB,CAA+BF,KAA/B,EAAsC,CAAtC;EACD;AAED,EAAO,SAASQ,cAAT,CAAwBC,SAAxB,EAAoD;EACzDA,EAAAA,SAAS,CAACV,QAAV,CAAmBG,MAAnB,CAA0B,CAA1B;EACD;AAED,EAAO,SAASQ,kBAAT,CACLlB,qBADK,EAEQ;EACb,SAAOT,UAAP;EACD;AAED,EAAO,SAAS4B,mBAAT,CACLC,iBADK,EAEL7G,IAFK,EAGLyF,qBAHK,EAIQ;EACb,SAAOT,UAAP;EACD;AAED,EAAO,SAAS8B,gBAAT,CAA0BC,aAA1B,EAAmE;EACxE;EACA,SAAO,IAAP;EACD;AAED,EAAO,SAASC,gBAAT,CAA0BD,aAA1B,EAA0D;EAEhE;AAED,EAAO,SAASE,cAAT,CACLjH,IADK,EAEL2F,KAFK,EAGLF,qBAHK,EAILyB,WAJK,EAKLC,sBALK,EAMK;EACV,SAAO;EACLnH,IAAAA,IAAI,EAAJA,IADK;EAEL2F,IAAAA,KAAK,EAALA,KAFK;EAGLyB,IAAAA,QAAQ,EAAE,KAHL;EAILpB,IAAAA,QAAQ,EAAE,EAJL;EAKLmB,IAAAA,sBAAsB,EAAtBA,sBALK;EAML1B,IAAAA,qBAAqB,EAArBA,qBANK;EAOLvF,IAAAA,GAAG,EAAE;EAPA,GAAP;EASD;AAED,EAAO,SAASmH,kBAAT,CACLxB,cADK,EAEL3B,KAFK,EAGC;EACN,MAAM+B,KAAK,GAAGJ,cAAc,CAACG,QAAf,CAAwBE,OAAxB,CAAgChC,KAAhC,CAAd;;EACA,MAAI+B,KAAK,KAAK,CAAC,CAAf,EAAkB;EAChBJ,IAAAA,cAAc,CAACG,QAAf,CAAwBG,MAAxB,CAA+BF,KAA/B,EAAsC,CAAtC;EACD;;EACDJ,EAAAA,cAAc,CAACG,QAAf,CAAwBI,IAAxB,CAA6BlC,KAA7B;EACD;AAED,EAUO,SAASoD,aAAT,CACLC,WADK,EAELvH,IAFK,EAGLwH,QAHK,EAILC,QAJK,EAKLhC,qBALK,EAMLyB,WANK,EAOS;EACd,SAAOjC,aAAP;EACD;AAED,EAAO,SAASyC,oBAAT,CAA8B1H,IAA9B,EAA4C2F,KAA5C,EAAmE;EACxE,SAAO,KAAP;EACD;AAED,EAAO,SAASgC,kBAAT,CACLC,IADK,EAELnC,qBAFK,EAGLyB,WAHK,EAILC,sBAJK,EAKS;EACd,SAAO;EACLS,IAAAA,IAAI,EAAJA,IADK;EAELR,IAAAA,QAAQ,EAAE,KAFL;EAGLlH,IAAAA,GAAG,EAAE;EAHA,GAAP;EAKD;AAED,EAGO,IAAM2H,eAAe,GAAGC,UAAxB;AACP,EAAO,IAAMC,aAAa,GAAGC,YAAtB;AACP,EAAO,IAAMC,SAAS,GAAG,CAAC,CAAnB;AAGP,EAKO,SAASC,YAAT,CACL3E,QADK,EAEL4E,aAFK,EAGLnI,IAHK,EAILwH,QAJK,EAKLC,QALK,EAMLN,sBANK,EAOC;EACN5D,EAAAA,QAAQ,CAACvD,IAAT,GAAgBA,IAAhB;EACAuD,EAAAA,QAAQ,CAACoC,KAAT,GAAiB8B,QAAjB;EACD;AAED,EASO,SAASW,gBAAT,CACLC,YADK,EAELC,OAFK,EAGLC,OAHK,EAIC;EACNF,EAAAA,YAAY,CAACT,IAAb,GAAoBW,OAApB;EACD;AAED,EAAO,SAASC,gBAAT,CAA0BjB,WAA1B,EAAuD;EAE7D;AAED,EAAO,IAAMkB,sBAAsB,GAAG7C,WAA/B;AACP,EAAO,IAAM8C,uBAAuB,GAAGrC,YAAhC;AACP,EAAO,IAAMsC,wBAAwB,GAAGnC,WAAjC;AAEP,EAAO,SAASoC,YAAT,CAAsBrF,QAAtB,EAAgD;EACrDA,EAAAA,QAAQ,CAAC6D,QAAT,GAAoB,IAApB;EACD;AAED,EAAO,SAASyB,gBAAT,CAA0BR,YAA1B,EAA4D;EACjEA,EAAAA,YAAY,CAACjB,QAAb,GAAwB,IAAxB;EACD;AAED,EAAO,SAAS0B,cAAT,CAAwBvF,QAAxB,EAA4CoC,KAA5C,EAAgE;EACrEpC,EAAAA,QAAQ,CAAC6D,QAAT,GAAoB,KAApB;EACD;AAED,EAAO,SAAS2B,kBAAT,CACLV,YADK,EAELT,IAFK,EAGC;EACNS,EAAAA,YAAY,CAACjB,QAAb,GAAwB,KAAxB;EACD;AAED,EAwDA,IAAI4B,QAAgB,GAAG,CAAvB;AACA,EAIO,SAASC,iBAAT,CAA2BC,iBAA3B,EAAwE;EAC7E,MAAMC,EAAE,GAAG,OAAO,CAACH,QAAQ,EAAT,EAAaI,QAAb,CAAsB,EAAtB,CAAlB;EACA,SAAO;EACLA,IAAAA,QADK,cACM;EACTF,MAAAA,iBAAiB;EACjB,aAAOC,EAAP;EACD,KAJI;EAKLE,IAAAA,OALK,cAKK;EACRH,MAAAA,iBAAiB;EACjB,aAAOC,EAAP;EACD;EARI,GAAP;EAUD;AAED,EA0BO,SAASG,kBAAT,CAA4BC,cAA5B,EAA4D;EAElE;;EC5XD;EACA;EACA;EACA;EAEA,IAAIC,aAAa,GAAG,CAApB;EACA,IAAIC,OAAJ;EACA,IAAIC,QAAJ;EACA,IAAIC,QAAJ;EACA,IAAIC,SAAJ;EACA,IAAIC,SAAJ;EACA,IAAIC,kBAAJ;EACA,IAAIC,YAAJ;;EAEA,SAASC,WAAT,GAAuB;;EACvBA,WAAW,CAACC,kBAAZ,GAAiC,IAAjC;AAEA,EAAO,SAASC,WAAT,GAA6B;EAClC,EAAa;EACX,QAAIV,aAAa,KAAK,CAAtB,EAAyB;EACvB;EACAC,MAAAA,OAAO,GAAG/N,OAAO,CAACyO,GAAlB;EACAT,MAAAA,QAAQ,GAAGhO,OAAO,CAAC0O,IAAnB;EACAT,MAAAA,QAAQ,GAAGjO,OAAO,CAAClB,IAAnB;EACAoP,MAAAA,SAAS,GAAGlO,OAAO,CAACd,KAApB;EACAiP,MAAAA,SAAS,GAAGnO,OAAO,CAAC2O,KAApB;EACAP,MAAAA,kBAAkB,GAAGpO,OAAO,CAAC4O,cAA7B;EACAP,MAAAA,YAAY,GAAGrO,OAAO,CAAC6O,QAAvB,CARuB;;EAUvB,UAAM5E,KAAK,GAAG;EACZ6E,QAAAA,YAAY,EAAE,IADF;EAEZC,QAAAA,UAAU,EAAE,IAFA;EAGZ/M,QAAAA,KAAK,EAAEsM,WAHK;EAIZU,QAAAA,QAAQ,EAAE;EAJE,OAAd,CAVuB;;EAiBvBtF,MAAAA,MAAM,CAACuF,gBAAP,CAAwBjP,OAAxB,EAAiC;EAC/B0O,QAAAA,IAAI,EAAEzE,KADyB;EAE/BwE,QAAAA,GAAG,EAAExE,KAF0B;EAG/BnL,QAAAA,IAAI,EAAEmL,KAHyB;EAI/B/K,QAAAA,KAAK,EAAE+K,KAJwB;EAK/B0E,QAAAA,KAAK,EAAE1E,KALwB;EAM/B2E,QAAAA,cAAc,EAAE3E,KANe;EAO/B4E,QAAAA,QAAQ,EAAE5E;EAPqB,OAAjC;EASA;EACD;;EACD6D,IAAAA,aAAa;EACd;EACF;AAED,EAAO,SAASoB,YAAT,GAA8B;EACnC,EAAa;EACXpB,IAAAA,aAAa;;EACb,QAAIA,aAAa,KAAK,CAAtB,EAAyB;EACvB;EACA,UAAM7D,KAAK,GAAG;EACZ6E,QAAAA,YAAY,EAAE,IADF;EAEZC,QAAAA,UAAU,EAAE,IAFA;EAGZC,QAAAA,QAAQ,EAAE;EAHE,OAAd,CAFuB;;EAQvBtF,MAAAA,MAAM,CAACuF,gBAAP,CAAwBjP,OAAxB,EAAiC;EAC/ByO,QAAAA,GAAG,cAAMxE,KAAN;EAAajI,UAAAA,KAAK,EAAE+L;EAApB,UAD4B;EAE/BW,QAAAA,IAAI,cAAMzE,KAAN;EAAajI,UAAAA,KAAK,EAAEgM;EAApB,UAF2B;EAG/BlP,QAAAA,IAAI,cAAMmL,KAAN;EAAajI,UAAAA,KAAK,EAAEiM;EAApB,UAH2B;EAI/B/O,QAAAA,KAAK,cAAM+K,KAAN;EAAajI,UAAAA,KAAK,EAAEkM;EAApB,UAJ0B;EAK/BS,QAAAA,KAAK,cAAM1E,KAAN;EAAajI,UAAAA,KAAK,EAAEmM;EAApB,UAL0B;EAM/BS,QAAAA,cAAc,cAAM3E,KAAN;EAAajI,UAAAA,KAAK,EAAEoM;EAApB,UANiB;EAO/BS,QAAAA,QAAQ,cAAM5E,KAAN;EAAajI,UAAAA,KAAK,EAAEqM;EAApB;EAPuB,OAAjC;EASA;EACD;;EACD,QAAIP,aAAa,GAAG,CAApB,EAAuB;EACrB,YACE,oCACE,+CAFJ;EAID;EACF;EACF;;MC9DMqB,yBAA0BvQ,qBAA1BuQ;EAEP,IAAIC,MAAJ;AACA,EAAO,SAASC,6BAAT,CACLjL,IADK,EAELkL,MAFK,EAGLC,OAHK,EAIG;EACR,EAAmC;EACjC,QAAIH,MAAM,KAAKI,SAAf,EAA0B;EACxB;EACA,UAAI;EACF,cAAMC,KAAK,EAAX;EACD,OAFD,CAEE,OAAOrK,CAAP,EAAU;EACV,YAAMsK,KAAK,GAAGtK,CAAC,CAAC/F,KAAF,CAAQsQ,IAAR,GAAeD,KAAf,CAAqB,cAArB,CAAd;EACAN,QAAAA,MAAM,GAAIM,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAf,IAAuB,EAAhC;EACD;EACF,KATgC;;;EAWjC,WAAO,OAAON,MAAP,GAAgBhL,IAAvB;EACD,GAZD;EAmBD;EAED,IAAIwL,OAAO,GAAG,KAAd;EACA,IAAIC,mBAAJ;;AACA,EAAa;EACX,MAAMC,eAAe,GAAG,OAAOrG,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0CsG,GAAlE;EACAF,EAAAA,mBAAmB,GAAG,IAAIC,eAAJ,EAAtB;EACD;;AAED,EAAO,SAASE,4BAAT,CACLC,EADK,EAELC,SAFK,EAGG;EACR;EACA,MAAI,CAACD,EAAD,IAAOL,OAAX,EAAoB;EAClB,WAAO,EAAP;EACD;;EAED,EAAa;EACX,QAAMO,KAAK,GAAGN,mBAAmB,CAACjO,GAApB,CAAwBqO,EAAxB,CAAd;;EACA,QAAIE,KAAK,KAAKX,SAAd,EAAyB;EACvB,aAAOW,KAAP;EACD;EACF;;EAED,MAAIC,OAAJ;EAEAR,EAAAA,OAAO,GAAG,IAAV;EACA,MAAMS,yBAAyB,GAAGZ,KAAK,CAACa,iBAAxC,CAhBQ;;EAkBRb,EAAAA,KAAK,CAACa,iBAAN,GAA0Bd,SAA1B;EACA,MAAIe,kBAAJ;;EACA,EAAa;EACXA,IAAAA,kBAAkB,GAAGpB,sBAAsB,CAACxH,OAA5C,CADW;EAGX;;EACAwH,IAAAA,sBAAsB,CAACxH,OAAvB,GAAiC,IAAjC;EACA6G,IAAAA,WAAW;EACZ;;EACD,MAAI;EACF;EACA,QAAI0B,SAAJ,EAAe;EACb;EACA,UAAMM,IAAI,GAAG,YAAW;EACtB,cAAMf,KAAK,EAAX;EACD,OAFD,CAFa;;;EAMb/F,MAAAA,MAAM,CAAC+G,cAAP,CAAsBD,IAAI,CAAC3Q,SAA3B,EAAsC,OAAtC,EAA+C;EAC7CkC,QAAAA,GAAG,EAAE,YAAW;EACd;EACA;EACA,gBAAM0N,KAAK,EAAX;EACD;EAL4C,OAA/C;;EAOA,UAAI,OAAOiB,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,CAACR,SAA3C,EAAsD;EACpD;EACA;EACA,YAAI;EACFQ,UAAAA,OAAO,CAACR,SAAR,CAAkBM,IAAlB,EAAwB,EAAxB;EACD,SAFD,CAEE,OAAOpL,CAAP,EAAU;EACVgL,UAAAA,OAAO,GAAGhL,CAAV;EACD;;EACDsL,QAAAA,OAAO,CAACR,SAAR,CAAkBD,EAAlB,EAAsB,EAAtB,EAA0BO,IAA1B;EACD,OATD,MASO;EACL,YAAI;EACFA,UAAAA,IAAI,CAACzQ,IAAL;EACD,SAFD,CAEE,OAAOqF,CAAP,EAAU;EACVgL,UAAAA,OAAO,GAAGhL,CAAV;EACD;;EACD6K,QAAAA,EAAE,CAAClQ,IAAH,CAAQyQ,IAAI,CAAC3Q,SAAb;EACD;EACF,KA9BD,MA8BO;EACL,UAAI;EACF,cAAM4P,KAAK,EAAX;EACD,OAFD,CAEE,OAAOrK,CAAP,EAAU;EACVgL,QAAAA,OAAO,GAAGhL,CAAV;EACD;;EACD6K,MAAAA,EAAE;EACH;EACF,GAxCD,CAwCE,OAAOU,MAAP,EAAe;EACf;EACA,QAAIA,MAAM,IAAIP,OAAV,IAAqB,OAAOO,MAAM,CAACtR,KAAd,KAAwB,QAAjD,EAA2D;EACzD;EACA;EACA,UAAMuR,WAAW,GAAGD,MAAM,CAACtR,KAAP,CAAawR,KAAb,CAAmB,IAAnB,CAApB;EACA,UAAMC,YAAY,GAAGV,OAAO,CAAC/Q,KAAR,CAAcwR,KAAd,CAAoB,IAApB,CAArB;EACA,UAAIE,CAAC,GAAGH,WAAW,CAACI,MAAZ,GAAqB,CAA7B;EACA,UAAIC,CAAC,GAAGH,YAAY,CAACE,MAAb,GAAsB,CAA9B;;EACA,aAAOD,CAAC,IAAI,CAAL,IAAUE,CAAC,IAAI,CAAf,IAAoBL,WAAW,CAACG,CAAD,CAAX,KAAmBD,YAAY,CAACG,CAAD,CAA1D,EAA+D;EAC7D;EACA;EACA;EACA;EACA;EACA;EACAA,QAAAA,CAAC;EACF;;EACD,aAAOF,CAAC,IAAI,CAAL,IAAUE,CAAC,IAAI,CAAtB,EAAyBF,CAAC,IAAIE,CAAC,EAA/B,EAAmC;EACjC;EACA;EACA,YAAIL,WAAW,CAACG,CAAD,CAAX,KAAmBD,YAAY,CAACG,CAAD,CAAnC,EAAwC;EACtC;EACA;EACA;EACA;EACA;EACA,cAAIF,CAAC,KAAK,CAAN,IAAWE,CAAC,KAAK,CAArB,EAAwB;EACtB,eAAG;EACDF,cAAAA,CAAC;EACDE,cAAAA,CAAC,GAFA;EAID;;EACA,kBAAIA,CAAC,GAAG,CAAJ,IAASL,WAAW,CAACG,CAAD,CAAX,KAAmBD,YAAY,CAACG,CAAD,CAA5C,EAAiD;EAC/C;EACA,oBAAMd,MAAK,GAAG,OAAOS,WAAW,CAACG,CAAD,CAAX,CAAeG,OAAf,CAAuB,UAAvB,EAAmC,MAAnC,CAArB;;EACA,gBAAa;EACX,sBAAI,OAAOjB,EAAP,KAAc,UAAlB,EAA8B;EAC5BJ,oBAAAA,mBAAmB,CAAC9N,GAApB,CAAwBkO,EAAxB,EAA4BE,MAA5B;EACD;EACF,iBAP8C;;;EAS/C,uBAAOA,MAAP;EACD;EACF,aAhBD,QAgBSY,CAAC,IAAI,CAAL,IAAUE,CAAC,IAAI,CAhBxB;EAiBD;;EACD;EACD;EACF;EACF;EACF,GA1FD,SA0FU;EACRrB,IAAAA,OAAO,GAAG,KAAV;;EACA,IAAa;EACXT,MAAAA,sBAAsB,CAACxH,OAAvB,GAAiC4I,kBAAjC;EACArB,MAAAA,YAAY;EACb;;EACDO,IAAAA,KAAK,CAACa,iBAAN,GAA0BD,yBAA1B;EACD,GA5HO;;;EA8HR,MAAMjM,IAAI,GAAG6L,EAAE,GAAGA,EAAE,CAAC9L,WAAH,IAAkB8L,EAAE,CAAC7L,IAAxB,GAA+B,EAA9C;EACA,MAAM+M,cAAc,GAAG/M,IAAI,GAAGiL,6BAA6B,CAACjL,IAAD,CAAhC,GAAyC,EAApE;;EACA,EAAa;EACX,QAAI,OAAO6L,EAAP,KAAc,UAAlB,EAA8B;EAC5BJ,MAAAA,mBAAmB,CAAC9N,GAApB,CAAwBkO,EAAxB,EAA4BkB,cAA5B;EACD;EACF;;EACD,SAAOA,cAAP;EACD;AAED;AA8BA,EAAO,SAASC,2BAAT,CACLC,IADK,EAEL/B,MAFK,EAGLC,OAHK,EAIG;EACR,EAAmC;EACjC,WAAOS,4BAA4B,CAACqB,IAAD,EAAO,IAAP,CAAnC;EACD,GAFD;EAKD;AAED,EAAO,SAASC,8BAAT,CACLrB,EADK,EAELX,MAFK,EAGLC,OAHK,EAIG;EACR,EAAmC;EACjC,WAAOS,4BAA4B,CAACC,EAAD,EAAK,KAAL,CAAnC;EACD,GAFD;EAaD;;EAED,SAASsB,eAAT,CAAyBC,SAAzB,EAA8C;EAC5C,MAAM3R,SAAS,GAAG2R,SAAS,CAAC3R,SAA5B;EACA,SAAO,CAAC,EAAEA,SAAS,IAAIA,SAAS,CAAC4R,gBAAzB,CAAR;EACD;;AAED,EAAO,SAASC,oCAAT,CACLpN,IADK,EAELgL,MAFK,EAGLC,OAHK,EAIG;AACR;EAGA,MAAIjL,IAAI,IAAI,IAAZ,EAAkB;EAChB,WAAO,EAAP;EACD;;EACD,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;EAC9B,IAAmC;EACjC,aAAO0L,4BAA4B,CAAC1L,IAAD,EAAOiN,eAAe,CAACjN,IAAD,CAAtB,CAAnC;EACD,KAFD;EAKD;;EACD,MAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;EAC5B,WAAO+K,6BAA6B,CAAC/K,IAAD,AAAA,CAApC;EACD;;EACD,UAAQA,IAAR;EACE,SAAK7B,mBAAL;EACE,aAAO4M,6BAA6B,CAAC,UAAD,AAAA,CAApC;;EACF,SAAK3M,wBAAL;EACE,aAAO2M,6BAA6B,CAAC,cAAD,AAAA,CAApC;EAJJ;;EAMA,MAAI,OAAO/K,IAAP,KAAgB,QAApB,EAA8B;EAC5B,YAAQA,IAAI,CAACG,QAAb;EACE,WAAKjC,sBAAL;EACE,eAAO8O,8BAA8B,CAAChN,IAAI,CAACO,MAAN,AAAA,CAArC;;EACF,WAAKlC,eAAL;EACE;EACA,eAAO+O,oCAAoC,CAACpN,IAAI,CAACA,IAAN,EAAYgL,MAAZ,EAAoBC,OAApB,CAA3C;;EACF,WAAK1M,gBAAL;EACE,eAAOyO,8BAA8B,CAAChN,IAAI,CAACQ,OAAN,AAAA,CAArC;;EACF,WAAKlC,eAAL;EAAsB;EACpB,cAAMmC,aAAsC,GAAIT,IAAhD;EACA,cAAMU,OAAO,GAAGD,aAAa,CAACE,QAA9B;EACA,cAAMC,IAAI,GAAGH,aAAa,CAACI,KAA3B;;EACA,cAAI;EACF;EACA,mBAAOuM,oCAAoC,CACzCxM,IAAI,CAACF,OAAD,CADqC,EAEzCsK,MAFyC,EAGzCC,OAHyC,CAA3C;EAKD,WAPD,CAOE,OAAOnK,CAAP,EAAU;EACb;EApBH;EAsBD;;EACD,SAAO,EAAP;EACD;;ECxTD,IAAMuM,kBAAkB,GAAG,EAA3B;AAEA,EAIA,IAAMvS,sBAAsB,GAAGR,oBAAoB,CAACQ,sBAApD;;EAEA,SAASwS,6BAAT,CAAuCC,OAAvC,EAAgD;EAC9C,EAAa;EACX,QAAIA,OAAJ,EAAa;EACX,UAAMnK,KAAK,GAAGmK,OAAO,CAACC,MAAtB;EACA,UAAMzS,KAAK,GAAGqS,oCAAoC,CAChDG,OAAO,CAACvN,IADwC,EAEhDuN,OAAO,CAACE,OAFwC,EAGhDrK,KAAK,GAAGA,KAAK,CAACpD,IAAT,GAAgB,IAH2B,CAAlD;EAKAlF,MAAAA,sBAAsB,CAAC4S,kBAAvB,CAA0C3S,KAA1C;EACD,KARD,MAQO;EACLD,MAAAA,sBAAsB,CAAC4S,kBAAvB,CAA0C,IAA1C;EACD;EACF;EACF;;AAED,EAAe,SAASC,cAAT,CACbC,SADa,EAEbC,MAFa,EAGbC,QAHa,EAIbC,aAJa,EAKbR,OALa,EAMP;EACN,EAAa;EACX;EACA,QAAMS,GAAG,GAAG1S,QAAQ,CAACG,IAAT,CAAcwS,IAAd,CAAmB7I,MAAM,CAAC7J,SAAP,CAAiB2S,cAApC,CAAZ;;EACA,SAAK,IAAMC,YAAX,IAA2BP,SAA3B,EAAsC;EACpC,UAAII,GAAG,CAACJ,SAAD,EAAYO,YAAZ,CAAP,EAAkC;EAChC,YAAIvT,OAAK,SAAT,CADgC;EAGhC;EACA;;EACA,YAAI;EACF;EACA;EACA,cAAI,OAAOgT,SAAS,CAACO,YAAD,CAAhB,KAAmC,UAAvC,EAAmD;EACjD,gBAAMC,GAAG,GAAGjD,KAAK,CACf,CAAC4C,aAAa,IAAI,aAAlB,IACE,IADF,GAEED,QAFF,GAGE,SAHF,GAIEK,YAJF,GAKE,gBALF,GAME,8EANF,GAOE,OAAOP,SAAS,CAACO,YAAD,CAPlB,GAQE,IARF,GASE,+FAVa,CAAjB;EAYAC,YAAAA,GAAG,CAACtO,IAAJ,GAAW,qBAAX;EACA,kBAAMsO,GAAN;EACD;;EACDxT,UAAAA,OAAK,GAAGgT,SAAS,CAACO,YAAD,CAAT,CACNN,MADM,EAENM,YAFM,EAGNJ,aAHM,EAIND,QAJM,EAKN,IALM,EAMN,8CANM,CAAR;EAQD,SA3BD,CA2BE,OAAOO,EAAP,EAAW;EACXzT,UAAAA,OAAK,GAAGyT,EAAR;EACD;;EACD,YAAIzT,OAAK,IAAI,EAAEA,OAAK,YAAYuQ,KAAnB,CAAb,EAAwC;EACtCmC,UAAAA,6BAA6B,CAACC,OAAD,CAA7B;;EACA,gBACE,iCACE,qCADF,GAEE,+DAFF,GAGE,iEAHF,GAIE,gEAJF,GAKE,iCANJ,EAOEQ,aAAa,IAAI,aAPnB,EAQED,QARF,EASEK,YATF,EAUE,OAAOvT,OAVT;;EAYA0S,UAAAA,6BAA6B,CAAC,IAAD,CAA7B;EACD;;EACD,YAAI1S,OAAK,YAAYuQ,KAAjB,IAA0B,EAAEvQ,OAAK,CAAC0T,OAAN,IAAiBjB,kBAAnB,CAA9B,EAAsE;EACpE;EACA;EACAA,UAAAA,kBAAkB,CAACzS,OAAK,CAAC0T,OAAP,CAAlB,GAAoC,IAApC;EACAhB,UAAAA,6BAA6B,CAACC,OAAD,CAA7B;;EACA,gBAAc,oBAAd,EAAoCO,QAApC,EAA8ClT,OAAK,CAAC0T,OAApD;;EACAhB,UAAAA,6BAA6B,CAAC,IAAD,CAA7B;EACD;EACF;EACF;EACF;EACF;;EC7FD,IAAMiB,UAAsB,GAAG,EAA/B;EAEA,IAAIC,UAAJ;;AAEA,EAAa;EACXA,EAAAA,UAAU,GAAG,EAAb;EACD;;EAED,IAAIvI,KAAK,GAAG,CAAC,CAAb;;EAEA,SAASwI,YAAT,CAAyBC,YAAzB,EAA0D;EACxD,SAAO;EACLrL,IAAAA,OAAO,EAAEqL;EADJ,GAAP;EAGD;;EAMD,SAASC,GAAT,CAAgBC,MAAhB,EAAwClM,KAAxC,EAA4D;EAC1D,MAAIuD,KAAK,GAAG,CAAZ,EAAe;EACb,IAAa;EACX,YAAc,iBAAd;EACD;;EACD;EACD;;EAED,EAAa;EACX,QAAIvD,KAAK,KAAK8L,UAAU,CAACvI,KAAD,CAAxB,EAAiC;EAC/B,YAAc,0BAAd;EACD;EACF;;EAED2I,EAAAA,MAAM,CAACvL,OAAP,GAAiBkL,UAAU,CAACtI,KAAD,CAA3B;EAEAsI,EAAAA,UAAU,CAACtI,KAAD,CAAV,GAAoB,IAApB;;EAEA,EAAa;EACXuI,IAAAA,UAAU,CAACvI,KAAD,CAAV,GAAoB,IAApB;EACD;;EAEDA,EAAAA,KAAK;EACN;;EAED,SAASG,IAAT,CAAiBwI,MAAjB,EAAyClR,KAAzC,EAAmDgF,KAAnD,EAAuE;EACrEuD,EAAAA,KAAK;EAELsI,EAAAA,UAAU,CAACtI,KAAD,CAAV,GAAoB2I,MAAM,CAACvL,OAA3B;;EAEA,EAAa;EACXmL,IAAAA,UAAU,CAACvI,KAAD,CAAV,GAAoBvD,KAApB;EACD;;EAEDkM,EAAAA,MAAM,CAACvL,OAAP,GAAiB3F,KAAjB;EACD;;EC/CD,IAAImR,iCAAJ;;AAEA,EAAa;EACXA,EAAAA,iCAAiC,GAAG,EAApC;EACD;;AAED,EAAO,IAAMC,kBAAkB,GAAG,EAA3B;;AACP,EAAa;EACX1J,EAAAA,MAAM,CAACC,MAAP,CAAcyJ,kBAAd;EACD;;;EAGD,IAAMC,kBAAuC,GAAGN,YAAY,CAC1DK,kBAD0D,CAA5D;;EAIA,IAAME,yBAA+C,GAAGP,YAAY,CAAC,KAAD,CAApE;EAEA;EACA;;EACA,IAAIQ,eAAuB,GAAGH,kBAA9B;;EAEA,SAASI,kBAAT,CACEC,cADF,EAEEjC,SAFF,EAGEkC,2BAHF,EAIU;EACR,EAEO;EACL,QAAIA,2BAA2B,IAAIC,iBAAiB,CAACnC,SAAD,CAApD,EAAiE;EAC/D;EACA;EACA;EACA;EACA,aAAO+B,eAAP;EACD;;EACD,WAAOF,kBAAkB,CAAC1L,OAA1B;EACD;EACF;;EAED,SAASiM,YAAT,CACEH,cADF,EAEEI,eAFF,EAGEC,aAHF,EAIQ;EACN,EAEO;EACL,QAAMjM,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC;EACAD,IAAAA,QAAQ,CAACkM,2CAAT,GAAuDF,eAAvD;EACAhM,IAAAA,QAAQ,CAACmM,yCAAT,GAAqDF,aAArD;EACD;EACF;;EAED,SAASG,gBAAT,CACER,cADF,EAEEI,eAFF,EAGU;EACR,EAEO;EACL,QAAMvP,IAAI,GAAGmP,cAAc,CAACnP,IAA5B;EACA,QAAM4P,YAAY,GAAG5P,IAAI,CAAC4P,YAA1B;;EACA,QAAI,CAACA,YAAL,EAAmB;EACjB,aAAOd,kBAAP;EACD,KALI;EAQL;EACA;;;EACA,QAAMvL,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC;;EACA,QACED,QAAQ,IACRA,QAAQ,CAACkM,2CAAT,KAAyDF,eAF3D,EAGE;EACA,aAAOhM,QAAQ,CAACmM,yCAAhB;EACD;;EAED,QAAMtP,OAAO,GAAG,EAAhB;;EACA,SAAK,IAAM7C,GAAX,IAAkBqS,YAAlB,EAAgC;EAC9BxP,MAAAA,OAAO,CAAC7C,GAAD,CAAP,GAAegS,eAAe,CAAChS,GAAD,CAA9B;EACD;;EAED,IAAa;EACX,UAAMuC,IAAI,GAAGG,gBAAgB,CAACD,IAAD,CAAhB,IAA0B,SAAvC;EACA2N,MAAAA,cAAc,CAACiC,YAAD,EAAexP,OAAf,EAAwB,SAAxB,EAAmCN,IAAnC,CAAd;EACD,KA1BI;EA6BL;;;EACA,QAAIyD,QAAJ,EAAc;EACZ+L,MAAAA,YAAY,CAACH,cAAD,EAAiBI,eAAjB,EAAkCnP,OAAlC,CAAZ;EACD;;EAED,WAAOA,OAAP;EACD;EACF;;EAED,SAASyP,iBAAT,GAAsC;EACpC,EAEO;EACL,WAAOb,yBAAyB,CAAC3L,OAAjC;EACD;EACF;;EAED,SAASgM,iBAAT,CAA2BrP,IAA3B,EAAoD;EAClD,EAEO;EACL,QAAM8P,iBAAiB,GAAG9P,IAAI,CAAC8P,iBAA/B;EACA,WAAOA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK5E,SAA3D;EACD;EACF;;EAED,SAAS6E,UAAT,CAAoBrN,KAApB,EAAwC;EACtC,EAEO;EACLiM,IAAAA,GAAG,CAACK,yBAAD,EAA4BtM,KAA5B,CAAH;EACAiM,IAAAA,GAAG,CAACI,kBAAD,EAAqBrM,KAArB,CAAH;EACD;EACF;;EAED,SAASsN,wBAAT,CAAkCtN,KAAlC,EAAsD;EACpD,EAEO;EACLiM,IAAAA,GAAG,CAACK,yBAAD,EAA4BtM,KAA5B,CAAH;EACAiM,IAAAA,GAAG,CAACI,kBAAD,EAAqBrM,KAArB,CAAH;EACD;EACF;;EAED,SAASuN,yBAAT,CACEvN,KADF,EAEEtC,OAFF,EAGE8P,SAHF,EAIQ;EACN,EAEO;EAAA,UAEHnB,kBAAkB,CAAC1L,OAAnB,KAA+ByL,kBAF5B;EAAA;EAAA;EAAA;EAAA;;EAOL1I,IAAAA,IAAI,CAAC2I,kBAAD,EAAqB3O,OAArB,EAA8BsC,KAA9B,CAAJ;EACA0D,IAAAA,IAAI,CAAC4I,yBAAD,EAA4BkB,SAA5B,EAAuCxN,KAAvC,CAAJ;EACD;EACF;;EAED,SAASyN,mBAAT,CACEzN,KADF,EAEE1C,IAFF,EAGEoQ,aAHF,EAIU;EACR,EAEO;EACL,QAAM7M,QAAQ,GAAGb,KAAK,CAACc,SAAvB;EACA,QAAMsM,iBAAiB,GAAG9P,IAAI,CAAC8P,iBAA/B,CAFK;EAKL;;EACA,QAAI,OAAOvM,QAAQ,CAAC8M,eAAhB,KAAoC,UAAxC,EAAoD;EAClD,MAAa;EACX,YAAMtC,aAAa,GAAG9N,gBAAgB,CAACD,IAAD,CAAhB,IAA0B,SAAhD;;EAEA,YAAI,CAAC6O,iCAAiC,CAACd,aAAD,CAAtC,EAAuD;EACrDc,UAAAA,iCAAiC,CAACd,aAAD,CAAjC,GAAmD,IAAnD;;EACA,gBACE,gFACE,2EADF,GAEE,4BAHJ,EAIEA,aAJF,EAKEA,aALF;EAOD;EACF;;EACD,aAAOqC,aAAP;EACD;;EAED,QAAME,YAAY,GAAG/M,QAAQ,CAAC8M,eAAT,EAArB;;EACA,SAAK,IAAME,UAAX,IAAyBD,YAAzB,EAAuC;EAAA,YAEnCC,UAAU,IAAIT,iBAFqB;EAAA;EAAA,wBAInC7P,gBAAgB,CAACD,IAAD,CAAhB,IAA0B,SAJS,mCAKnCuQ,UALmC;EAAA;EAAA;EAOtC;;EACD,IAAa;EACX,UAAMzQ,IAAI,GAAGG,gBAAgB,CAACD,IAAD,CAAhB,IAA0B,SAAvC;EACA2N,MAAAA,cAAc,CAACmC,iBAAD,EAAoBQ,YAApB,EAAkC,eAAlC,EAAmDxQ,IAAnD,CAAd;EACD;;EAED,uBAAWsQ,aAAX,EAA6BE,YAA7B;EACD;EACF;;EAED,SAASE,mBAAT,CAA6BrB,cAA7B,EAA6D;EAC3D,EAEO;EACL,QAAM5L,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC,CADK;EAGL;EACA;;EACA,QAAMiN,0BAA0B,GAC7BlN,QAAQ,IAAIA,QAAQ,CAACmN,yCAAtB,IACA5B,kBAFF,CALK;EAUL;;EACAG,IAAAA,eAAe,GAAGF,kBAAkB,CAAC1L,OAArC;EACA+C,IAAAA,IAAI,CAAC2I,kBAAD,EAAqB0B,0BAArB,EAAiDtB,cAAjD,CAAJ;EACA/I,IAAAA,IAAI,CACF4I,yBADE,EAEFA,yBAAyB,CAAC3L,OAFxB,EAGF8L,cAHE,CAAJ;EAMA,WAAO,IAAP;EACD;EACF;;EAED,SAASwB,yBAAT,CACExB,cADF,EAEEnP,IAFF,EAGEkQ,SAHF,EAIQ;EACN,EAEO;EACL,QAAM3M,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC;;EADK,SAGHD,QAHG;EAAA;EAAA;EAAA;EAAA;;EAQL,QAAI2M,SAAJ,EAAe;EACb;EACA;EACA;EACA,UAAMU,aAAa,GAAGT,mBAAmB,CACvChB,cADuC,EAEvCnP,IAFuC,EAGvCiP,eAHuC,CAAzC;EAKA1L,MAAAA,QAAQ,CAACmN,yCAAT,GAAqDE,aAArD,CATa;EAYb;;EACAjC,MAAAA,GAAG,CAACK,yBAAD,EAA4BG,cAA5B,CAAH;EACAR,MAAAA,GAAG,CAACI,kBAAD,EAAqBI,cAArB,CAAH,CAda;;EAgBb/I,MAAAA,IAAI,CAAC2I,kBAAD,EAAqB6B,aAArB,EAAoCzB,cAApC,CAAJ;EACA/I,MAAAA,IAAI,CAAC4I,yBAAD,EAA4BkB,SAA5B,EAAuCf,cAAvC,CAAJ;EACD,KAlBD,MAkBO;EACLR,MAAAA,GAAG,CAACK,yBAAD,EAA4BG,cAA5B,CAAH;EACA/I,MAAAA,IAAI,CAAC4I,yBAAD,EAA4BkB,SAA5B,EAAuCf,cAAvC,CAAJ;EACD;EACF;EACF;;EAED,SAAS0B,0BAAT,CAAoCnO,KAApC,EAA0D;EACxD,EAEO;EACL;EACA;EAFK,UAIHO,cAAc,CAACP,KAAD,CAAd,IAAyBA,KAAK,CAACxC,GAAN,KAAcpE,cAJpC;EAAA;EAAA;EAAA;EAAA;;EASL,QAAI6G,IAAI,GAAGD,KAAX;;EACA,OAAG;EACD,cAAQC,IAAI,CAACzC,GAAb;EACE,aAAKlE,QAAL;EACE,iBAAO2G,IAAI,CAACa,SAAL,CAAepD,OAAtB;;EACF,aAAKtE,cAAL;EAAqB;EACnB,gBAAMoR,SAAS,GAAGvK,IAAI,CAAC3C,IAAvB;;EACA,gBAAIqP,iBAAiB,CAACnC,SAAD,CAArB,EAAkC;EAChC,qBAAOvK,IAAI,CAACa,SAAL,CAAekN,yCAAtB;EACD;;EACD;EACD;EATH;;EAWA/N,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD,KAbD,QAaSL,IAAI,KAAK,IAblB;;EAVK;EAAA;EAAA;EAAA;EAAA;EA6BN;EACF;;ECvTM,IAAMmO,UAAU,GAAG,CAAnB;AACP,EAAO,IAAMC,YAAY,GAAG,CAArB;AACP,EAAO,IAAMC,cAAc,GAAG,CAAvB;;ECKP,IAAIC,UAAU,GAAG,IAAjB;EACA,IAAIC,YAAY,GAAG,IAAnB;EACA,IAAIC,cAAc,GAAG,KAArB;AAEA,EAAO,IAAMC,iBAAiB,GAC5B,OAAOC,8BAAP,KAA0C,WADrC;AAGP,EAAO,SAASC,eAAT,CAAyBC,SAAzB,EAAqD;EAC1D,MAAI,OAAOF,8BAAP,KAA0C,WAA9C,EAA2D;EACzD;EACA,WAAO,KAAP;EACD;;EACD,MAAMG,IAAI,GAAGH,8BAAb;;EACA,MAAIG,IAAI,CAACC,UAAT,EAAqB;EACnB;EACA;EACA;EACA,WAAO,IAAP;EACD;;EACD,MAAI,CAACD,IAAI,CAACE,aAAV,EAAyB;EACvB,IAAa;EACX,YACE,0EACE,mEADF,GAEE,yCAHJ;EAKD,KAPsB;;;EASvB,WAAO,IAAP;EACD;;EACD,MAAI;EACFT,IAAAA,UAAU,GAAGO,IAAI,CAACG,MAAL,CAAYJ,SAAZ,CAAb,CADE;;EAGFL,IAAAA,YAAY,GAAGM,IAAf;EACD,GAJD,CAIE,OAAOpD,GAAP,EAAY;EACZ;EACA,IAAa;EACX,YAAc,iDAAd,EAAiEA,GAAjE;EACD;EACF,GAhCyD;;;EAkC1D,SAAO,IAAP;EACD;AAED,EAAO,SAASwD,cAAT,CAAwBC,IAAxB,EAAyC7L,QAAzC,EAAkE;EACvE,EAAa;EACX,QACEkL,YAAY,IACZ,OAAOA,YAAY,CAACY,mBAApB,KAA4C,UAF9C,EAGE;EACA,UAAI;EACFZ,QAAAA,YAAY,CAACY,mBAAb,CAAiCb,UAAjC,EAA6CY,IAA7C,EAAmD7L,QAAnD;EACD,OAFD,CAEE,OAAOoI,GAAP,EAAY;EACZ,YAAI2D,CAAW,CAACZ,cAAhB,EAAgC;EAC9BA,UAAAA,cAAc,GAAG,IAAjB;;EACA,gBAAc,gDAAd,EAAgE/C,GAAhE;EACD;EACF;EACF;EACF;EACF;AAED,EAAO,SAAS4D,YAAT,CACLH,IADK,EAELI,aAFK,EAGL;EACA,MAAIf,YAAY,IAAI,OAAOA,YAAY,CAACgB,iBAApB,KAA0C,UAA9D,EAA0E;EACxE,QAAI;EACF,UAAMC,QAAQ,GAAG,CAACN,IAAI,CAACxO,OAAL,CAAaN,KAAb,GAAqBxB,UAAtB,MAAsCA,UAAvD;;EACA,UAAIY,mBAAJ,EAAyB;EACvB+O,QAAAA,YAAY,CAACgB,iBAAb,CACEjB,UADF,EAEEY,IAFF,EAGEI,aAHF,EAIEE,QAJF;EAMD,OAPD,MAOO;EACLjB,QAAAA,YAAY,CAACgB,iBAAb,CAA+BjB,UAA/B,EAA2CY,IAA3C,EAAiD3G,SAAjD,EAA4DiH,QAA5D;EACD;EACF,KAZD,CAYE,OAAO/D,GAAP,EAAY;EACZ,MAAa;EACX,YAAI,CAAC+C,cAAL,EAAqB;EACnBA,UAAAA,cAAc,GAAG,IAAjB;;EACA,gBAAc,gDAAd,EAAgE/C,GAAhE;EACD;EACF;EACF;EACF;EACF;AAED,EAAO,SAASgE,eAAT,CAAyB1P,KAAzB,EAAuC;EAC5C,MAAIwO,YAAY,IAAI,OAAOA,YAAY,CAACmB,oBAApB,KAA6C,UAAjE,EAA6E;EAC3E,QAAI;EACFnB,MAAAA,YAAY,CAACmB,oBAAb,CAAkCpB,UAAlC,EAA8CvO,KAA9C;EACD,KAFD,CAEE,OAAO0L,GAAP,EAAY;EACZ,MAAa;EACX,YAAI,CAAC+C,cAAL,EAAqB;EACnBA,UAAAA,cAAc,GAAG,IAAjB;;EACA,gBAAc,gDAAd,EAAgE/C,GAAhE;EACD;EACF;EACF;EACF;EACF;;EC9GD,IAAMzS,gBAAc,GAAGpB,wDAAvB;8BAYIoB,gBAAc,CAAC2W;MATjBC,0CAAAA;MACAC,wCAAAA;MACAC,uCAAAA;MACAC,4CAAAA;MACAC,6CAAAA;MACAC,2CAAAA;MACAC,uCAAAA;MACAC,6CAAAA;MACAC,sCAAAA;;MCUcC,gBAOZC;;AAEJ,EAA4B;EAC1B;EACA;EACA;EAH0B,QAKxBV,iBAAiB,IAAI,IAArB,IAA6BA,iBAAiB,CAAClP,OAAlB,IAA6B,IALlC;EAAA;EAAA;EAAA;EAAA;EAY3B;EASD;EACA;;AACA,EAAO,IAAM6P,iBAAqC,GAAG,EAA9C;AACP,EAAO,IAAMC,oBAAwC,GAAG,EAAjD;AACP,EAAO,IAAMC,cAAkC,GAAG,EAA3C;AACP,EAAO,IAAMC,WAA+B,GAAG,EAAxC;AACP,EAAO,IAAMC,YAAgC,GAAG,EAAzC;;AAEP,EAAO,IAAMC,UAA8B,GAAG,EAAvC;AAEP,EAQA,IAAMC,aAAqB,GAAGR,aAAa,EAA3C;;ECnCO,IAAMS,gBAA8B,GAAG,EAAvC;AACP,EAAO,IAAMC,uBAAqC,GAAG,EAA9C;EAEP,IAAMC,kCAAgD,GAAG,EAAzD;AACA,EAAO,IAAMC,yBAAuC,GAAG,EAAhD;EAEP,IAAMC,oCAAkD,GAAG,EAA3D;AACA,EAAO,IAAMC,2BAAyC,GAAG,EAAlD;EAEP,IAAMC,4BAA0C,GAAG,CAAnD;AACA,EAAO,IAAMC,mBAAiC,GAAG,CAA1C;EAEP,IAAMC,2BAAyC,GAAG,CAAlD;AACA,EAAO,IAAMC,kBAAgC,GAAG,CAAzC;EAEP,IAAMC,iBAA+B,GAAG,CAAxC;EAEA,IAAMC,8BAA4C,GAAG,CAArD;EAEA,IAAMC,yBAAuC,GAAG,CAAhD;EACA,IAAMC,gBAA8B,GAAG,CAAvC;EAEA,IAAMC,qBAAmC,GAAG,CAA5C;AAEA,EAAO,IAAMC,cAA4B,GAAG,CAArC;EAEP,IAAMC,UAAU,GAAG,EAAnB;AAEA,EAAO,IAAMC,OAAc;EAAG;EAA6B,CAApD;AACP,EAAO,IAAMC,MAAY;EAAG;EAA+B,CAApD;AAEP,EAAO,IAAMC,QAAc;EAAG;EAA6B,CAApD;AACP,EAAO,IAAMC,eAAqB;EAAG;EAAsB,CAApD;AAEP,EAAO,IAAMC,0BAAgC;EAAG;EAAW,CAApD;EACP,IAAMC,kBAAyB;EAAG;EAAyB,EAA3D;EAEA,IAAMC,4BAAkC;EAAG;EAAgB,EAA3D;EACA,IAAMC,oBAA2B;EAAG;EAAuB,GAA3D;AAEA,EAAO,IAAMC,oBAA0B;EAAG;EAAiB,GAApD;AACP,EAAO,IAAMC,YAAmB;EAAG;EAAwB,IAApD;EAEP,IAAMC,uBAA6B;EAAG;EAAqB,IAA3D;EACA,IAAMC,eAAsB;EAAG;EAA4B,OAA3D;EAEA,IAAMC,UAAiB;EAAG;EAAiC,QAA3D;AAEA,EAAO,IAAMC,aAAoB;EAAG;EAAuB,QAApD;AAEP,EAAO,IAAMC,sBAA4B;EAAG;EAAe,QAApD;EAEP,IAAMC,YAAY;EAAG;EAAsC,SAA3D;AAEA,EAAO,IAAMC,iBAAuB;EAAG;EAAoB,SAApD;EACP,IAAMC,SAAgB;EAAG;EAAkC,SAA3D;AAEA,EAAO,IAAMC,aAAmB;EAAG;EAAwB,UAApD;AAEP,EAAO,IAAMC,WAAW,GAAG,CAAC,CAArB;AAEP,EAWA;;EACA,IAAIC,0BAAwC,GAAG9B,mBAA/C;;EAEA,SAAS+B,uBAAT,CAAiCC,KAAjC,EAA6D;EAC3D,MAAI,CAACpB,QAAQ,GAAGoB,KAAZ,MAAuBtB,OAA3B,EAAoC;EAClCoB,IAAAA,0BAA0B,GAAGrC,gBAA7B;EACA,WAAOmB,QAAP;EACD;;EACD,MAAI,CAACC,eAAe,GAAGmB,KAAnB,MAA8BtB,OAAlC,EAA2C;EACzCoB,IAAAA,0BAA0B,GAAGpC,uBAA7B;EACA,WAAOmB,eAAP;EACD;;EACD,MAAI,CAACC,0BAA0B,GAAGkB,KAA9B,MAAyCtB,OAA7C,EAAsD;EACpDoB,IAAAA,0BAA0B,GAAGnC,kCAA7B;EACA,WAAOmB,0BAAP;EACD;;EACD,MAAMmB,kBAAkB,GAAGlB,kBAAkB,GAAGiB,KAAhD;;EACA,MAAIC,kBAAkB,KAAKvB,OAA3B,EAAoC;EAClCoB,IAAAA,0BAA0B,GAAGlC,yBAA7B;EACA,WAAOqC,kBAAP;EACD;;EACD,MAAI,CAACD,KAAK,GAAGhB,4BAAT,MAA2CN,OAA/C,EAAwD;EACtDoB,IAAAA,0BAA0B,GAAGjC,oCAA7B;EACA,WAAOmB,4BAAP;EACD;;EACD,MAAMkB,oBAAoB,GAAGjB,oBAAoB,GAAGe,KAApD;;EACA,MAAIE,oBAAoB,KAAKxB,OAA7B,EAAsC;EACpCoB,IAAAA,0BAA0B,GAAGhC,2BAA7B;EACA,WAAOoC,oBAAP;EACD;;EACD,MAAI,CAACF,KAAK,GAAGd,oBAAT,MAAmCR,OAAvC,EAAgD;EAC9CoB,IAAAA,0BAA0B,GAAG/B,4BAA7B;EACA,WAAOmB,oBAAP;EACD;;EACD,MAAMiB,YAAY,GAAGhB,YAAY,GAAGa,KAApC;;EACA,MAAIG,YAAY,KAAKzB,OAArB,EAA8B;EAC5BoB,IAAAA,0BAA0B,GAAG9B,mBAA7B;EACA,WAAOmC,YAAP;EACD;;EACD,MAAI,CAACH,KAAK,GAAGZ,uBAAT,MAAsCV,OAA1C,EAAmD;EACjDoB,IAAAA,0BAA0B,GAAG7B,2BAA7B;EACA,WAAOmB,uBAAP;EACD;;EACD,MAAMgB,eAAe,GAAGf,eAAe,GAAGW,KAA1C;;EACA,MAAII,eAAe,KAAK1B,OAAxB,EAAiC;EAC/BoB,IAAAA,0BAA0B,GAAG5B,kBAA7B;EACA,WAAOkC,eAAP;EACD;;EACD,MAAMC,UAAU,GAAGf,UAAU,GAAGU,KAAhC;;EACA,MAAIK,UAAU,KAAK3B,OAAnB,EAA4B;EAC1BoB,IAAAA,0BAA0B,GAAG3B,iBAA7B;EACA,WAAOkC,UAAP;EACD;;EACD,MAAIL,KAAK,GAAGR,sBAAZ,EAAoC;EAClCM,IAAAA,0BAA0B,GAAG1B,8BAA7B;EACA,WAAOoB,sBAAP;EACD;;EACD,MAAI,CAACQ,KAAK,GAAGN,iBAAT,MAAgChB,OAApC,EAA6C;EAC3CoB,IAAAA,0BAA0B,GAAGzB,yBAA7B;EACA,WAAOqB,iBAAP;EACD;;EACD,MAAMY,SAAS,GAAGX,SAAS,GAAGK,KAA9B;;EACA,MAAIM,SAAS,KAAK5B,OAAlB,EAA2B;EACzBoB,IAAAA,0BAA0B,GAAGxB,gBAA7B;EACA,WAAOgC,SAAP;EACD;;EACD,MAAI,CAACV,aAAa,GAAGI,KAAjB,MAA4BtB,OAAhC,EAAyC;EACvCoB,IAAAA,0BAA0B,GAAGvB,qBAA7B;EACA,WAAOqB,aAAP;EACD;;EACD,EAAa;EACX,UAAc,2DAAd;EACD,GArE0D;;;EAuE3DE,EAAAA,0BAA0B,GAAG9B,mBAA7B;EACA,SAAOgC,KAAP;EACD;;AAED,EAAO,SAASO,+BAAT,CACLC,sBADK,EAES;EACd,UAAQA,sBAAR;EACE,SAAKC,iBAAL;EACE,aAAOhD,gBAAP;;EACF,SAAKiD,oBAAL;EACE,aAAO5C,2BAAP;;EACF,SAAK6C,cAAL;EACA,SAAKC,WAAL;EACE;EACA,aAAO5C,mBAAP;;EACF,SAAK6C,YAAL;EACE,aAAOvC,gBAAP;;EACF;EACE,aAAOE,cAAP;EAZJ;EAcD;AAED,EAAO,SAASsC,+BAAT,CACLC,YADK,EAEe;EACpB,UAAQA,YAAR;EACE,SAAKtD,gBAAL;EACA,SAAKC,uBAAL;EACE,aAAO+C,iBAAP;;EACF,SAAK9C,kCAAL;EACA,SAAKC,yBAAL;EACA,SAAKC,oCAAL;EACA,SAAKC,2BAAL;EACE,aAAO4C,oBAAP;;EACF,SAAK3C,4BAAL;EACA,SAAKC,mBAAL;EACA,SAAKC,2BAAL;EACA,SAAKC,kBAAL;EACA,SAAKE,8BAAL;EACA,SAAKD,iBAAL;EACE,aAAOwC,cAAP;;EACF,SAAKtC,yBAAL;EACA,SAAKC,gBAAL;EACA,SAAKC,qBAAL;EACE,aAAOsC,YAAP;;EACF,SAAKrC,cAAL;EACE,aAAOwC,UAAP;;EACF;EAAA;EAAA;EAAA,qDAIID,YAJJ;EAAA;EAAA;;EAtBF;EA6BD;AAED,EAAO,SAASE,YAAT,CAAsBpF,IAAtB,EAAuCqF,QAAvC,EAA+D;EACpE;EACA,MAAMC,YAAY,GAAGtF,IAAI,CAACsF,YAA1B;;EACA,MAAIA,YAAY,KAAKzC,OAArB,EAA8B;EAC5BoB,IAAAA,0BAA0B,GAAGtB,cAA7B;EACA,WAAOE,OAAP;EACD;;EAED,MAAI0C,SAAS,GAAG1C,OAAhB;EACA,MAAI2C,gBAAgB,GAAG7C,cAAvB;EAEA,MAAM8C,YAAY,GAAGzF,IAAI,CAACyF,YAA1B;EACA,MAAMC,cAAc,GAAG1F,IAAI,CAAC0F,cAA5B;EACA,MAAMC,WAAW,GAAG3F,IAAI,CAAC2F,WAAzB,CAboE;;EAgBpE,MAAIF,YAAY,KAAK5C,OAArB,EAA8B;EAC5B0C,IAAAA,SAAS,GAAGE,YAAZ;EACAD,IAAAA,gBAAgB,GAAGvB,0BAA0B,GAAGrC,gBAAhD;EACD,GAHD,MAGO;EACL;EACA;EACA,QAAMgE,mBAAmB,GAAGN,YAAY,GAAG1B,YAA3C;;EACA,QAAIgC,mBAAmB,KAAK/C,OAA5B,EAAqC;EACnC,UAAMgD,qBAAqB,GAAGD,mBAAmB,GAAG,CAACF,cAArD;;EACA,UAAIG,qBAAqB,KAAKhD,OAA9B,EAAuC;EACrC0C,QAAAA,SAAS,GAAGrB,uBAAuB,CAAC2B,qBAAD,CAAnC;EACAL,QAAAA,gBAAgB,GAAGvB,0BAAnB;EACD,OAHD,MAGO;EACL,YAAM6B,kBAAkB,GAAGF,mBAAmB,GAAGD,WAAjD;;EACA,YAAIG,kBAAkB,KAAKjD,OAA3B,EAAoC;EAClC0C,UAAAA,SAAS,GAAGrB,uBAAuB,CAAC4B,kBAAD,CAAnC;EACAN,UAAAA,gBAAgB,GAAGvB,0BAAnB;EACD;EACF;EACF,KAZD,MAYO;EACL;EACA,UAAM8B,cAAc,GAAGT,YAAY,GAAG,CAACI,cAAvC;;EACA,UAAIK,cAAc,KAAKlD,OAAvB,EAAgC;EAC9B0C,QAAAA,SAAS,GAAGrB,uBAAuB,CAAC6B,cAAD,CAAnC;EACAP,QAAAA,gBAAgB,GAAGvB,0BAAnB;EACD,OAHD,MAGO;EACL,YAAI0B,WAAW,KAAK9C,OAApB,EAA6B;EAC3B0C,UAAAA,SAAS,GAAGrB,uBAAuB,CAACyB,WAAD,CAAnC;EACAH,UAAAA,gBAAgB,GAAGvB,0BAAnB;EACD;EACF;EACF;EACF;;EAED,MAAIsB,SAAS,KAAK1C,OAAlB,EAA2B;EACzB;EACA;EACA,WAAOA,OAAP;EACD,GAtDmE;EAyDpE;;;EACA0C,EAAAA,SAAS,GAAGD,YAAY,GAAGU,6BAA6B,CAACT,SAAD,CAAxD,CA1DoE;EA6DpE;EACA;;EACA,MACEF,QAAQ,KAAKxC,OAAb,IACAwC,QAAQ,KAAKE,SADb;EAGA;EACA,GAACF,QAAQ,GAAGK,cAAZ,MAAgC7C,OALlC,EAME;EACAqB,IAAAA,uBAAuB,CAACmB,QAAD,CAAvB;EACA,QAAMY,eAAe,GAAGhC,0BAAxB;;EACA,QAAIuB,gBAAgB,IAAIS,eAAxB,EAAyC;EACvC,aAAOZ,QAAP;EACD,KAFD,MAEO;EACLpB,MAAAA,0BAA0B,GAAGuB,gBAA7B;EACD;EACF,GA7EmE;EAgFpE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,MAAMU,cAAc,GAAGlG,IAAI,CAACkG,cAA5B;;EACA,MAAIA,cAAc,KAAKrD,OAAvB,EAAgC;EAC9B,QAAMsD,aAAa,GAAGnG,IAAI,CAACmG,aAA3B;EACA,QAAIhC,KAAK,GAAGoB,SAAS,GAAGW,cAAxB;;EACA,WAAO/B,KAAK,GAAG,CAAf,EAAkB;EAChB,UAAM/P,KAAK,GAAGgS,sBAAsB,CAACjC,KAAD,CAApC;EACA,UAAMkC,IAAI,GAAG,KAAKjS,KAAlB;EAEAmR,MAAAA,SAAS,IAAIY,aAAa,CAAC/R,KAAD,CAA1B;EAEA+P,MAAAA,KAAK,IAAI,CAACkC,IAAV;EACD;EACF;;EAED,SAAOd,SAAP;EACD;AAED,EAAO,SAASe,sBAAT,CAAgCtG,IAAhC,EAAiDmE,KAAjD,EAAuE;EAC5E,MAAMoC,UAAU,GAAGvG,IAAI,CAACuG,UAAxB;EAEA,MAAIC,mBAAmB,GAAGxC,WAA1B;;EACA,SAAOG,KAAK,GAAG,CAAf,EAAkB;EAChB,QAAM/P,KAAK,GAAGgS,sBAAsB,CAACjC,KAAD,CAApC;EACA,QAAMkC,IAAI,GAAG,KAAKjS,KAAlB;EAEA,QAAMqS,SAAS,GAAGF,UAAU,CAACnS,KAAD,CAA5B;;EACA,QAAIqS,SAAS,GAAGD,mBAAhB,EAAqC;EACnCA,MAAAA,mBAAmB,GAAGC,SAAtB;EACD;;EAEDtC,IAAAA,KAAK,IAAI,CAACkC,IAAV;EACD;;EAED,SAAOG,mBAAP;EACD;;EAED,SAASE,qBAAT,CAA+BL,IAA/B,EAA2CM,WAA3C,EAAgE;EAC9D;EACAzC,EAAAA,uBAAuB,CAACmC,IAAD,CAAvB;EACA,MAAMO,QAAQ,GAAG3C,0BAAjB;;EACA,MAAI2C,QAAQ,IAAI3E,2BAAhB,EAA6C;EAC3C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,WAAO0E,WAAW,GAAG,GAArB;EACD,GAjBD,MAiBO,IAAIC,QAAQ,IAAIvE,kBAAhB,EAAoC;EACzC,WAAOsE,WAAW,GAAG,IAArB;EACD,GAFM,MAEA;EACL;EACA,WAAO3C,WAAP;EACD;EACF;;AAED,EAAO,SAAS6C,yBAAT,CACL7G,IADK,EAEL2G,WAFK,EAGC;EACN;EACA;EACA;EAEA,MAAMrB,YAAY,GAAGtF,IAAI,CAACsF,YAA1B;EACA,MAAMI,cAAc,GAAG1F,IAAI,CAAC0F,cAA5B;EACA,MAAMC,WAAW,GAAG3F,IAAI,CAAC2F,WAAzB;EACA,MAAMmB,eAAe,GAAG9G,IAAI,CAAC8G,eAA7B,CARM;EAWN;EACA;;EACA,MAAI3C,KAAK,GAAGmB,YAAZ;;EACA,SAAOnB,KAAK,GAAG,CAAf,EAAkB;EAChB,QAAM/P,KAAK,GAAGgS,sBAAsB,CAACjC,KAAD,CAApC;EACA,QAAMkC,IAAI,GAAG,KAAKjS,KAAlB;EAEA,QAAM2S,cAAc,GAAGD,eAAe,CAAC1S,KAAD,CAAtC;;EACA,QAAI2S,cAAc,KAAK/C,WAAvB,EAAoC;EAClC;EACA;EACA;EACA,UACE,CAACqC,IAAI,GAAGX,cAAR,MAA4B7C,OAA5B,IACA,CAACwD,IAAI,GAAGV,WAAR,MAAyB9C,OAF3B,EAGE;EACA;EACAiE,QAAAA,eAAe,CAAC1S,KAAD,CAAf,GAAyBsS,qBAAqB,CAACL,IAAD,EAAOM,WAAP,CAA9C;EACD;EACF,KAXD,MAWO,IAAII,cAAc,IAAIJ,WAAtB,EAAmC;EACxC;EACA3G,MAAAA,IAAI,CAACyF,YAAL,IAAqBY,IAArB;EACD;;EAEDlC,IAAAA,KAAK,IAAI,CAACkC,IAAV;EACD;EACF;AAGD,EAKO,SAASW,mCAAT,CAA6ChH,IAA7C,EAAqE;EAC1E,MAAMiH,sBAAsB,GAAGjH,IAAI,CAACsF,YAAL,GAAoB,CAACvB,aAApD;;EACA,MAAIkD,sBAAsB,KAAKpE,OAA/B,EAAwC;EACtC,WAAOoE,sBAAP;EACD;;EACD,MAAIA,sBAAsB,GAAGlD,aAA7B,EAA4C;EAC1C,WAAOA,aAAP;EACD;;EACD,SAAOlB,OAAP;EACD;AAED,EAAO,SAASqE,uBAAT,GAAmC;EACxC,SAAOjD,0BAAP;EACD;AACD,EAAO,SAASkD,mBAAT,CAA6BhD,KAA7B,EAA2C;EAChD,SAAO,CAACA,KAAK,GAAGP,YAAT,MAA2Bf,OAAlC;EACD;AACD,EAAO,SAASuE,mBAAT,CAA6BjD,KAA7B,EAA2C;EAChD,SAAO,CAACA,KAAK,GAAGV,UAAT,MAAyBU,KAAhC;EACD;AACD,EAAO,SAASkD,uBAAT,CAAiClD,KAAjC,EAA+C;EACpD,SAAO,CAACA,KAAK,GAAGX,eAAT,MAA8BW,KAArC;EACD;EAGD;;AACA,EAAO,SAASmD,cAAT,CACLpC,YADK,EAELG,QAFK,EAGC;EACN,UAAQH,YAAR;EACE,SAAKvC,cAAL;EACE;;EACF,SAAKf,gBAAL;EACE,aAAOmB,QAAP;;EACF,SAAKlB,uBAAL;EACE,aAAOmB,eAAP;;EACF,SAAKjB,yBAAL;EAAgC;EAC9B,YAAMsE,KAAI,GAAGkB,iBAAiB,CAACrE,kBAAkB,GAAG,CAACmC,QAAvB,CAA9B;;EACA,YAAIgB,KAAI,KAAKvD,MAAb,EAAqB;EACnB;EACA,iBAAOwE,cAAc,CAACrF,2BAAD,EAA8BoD,QAA9B,CAArB;EACD;;EACD,eAAOgB,KAAP;EACD;;EACD,SAAKpE,2BAAL;EAAkC;EAChC,YAAMoE,MAAI,GAAGkB,iBAAiB,CAACnE,oBAAoB,GAAG,CAACiC,QAAzB,CAA9B;;EACA,YAAIgB,MAAI,KAAKvD,MAAb,EAAqB;EACnB;EACA,iBAAOwE,cAAc,CAACnF,mBAAD,EAAsBkD,QAAtB,CAArB;EACD;;EACD,eAAOgB,MAAP;EACD;;EACD,SAAKlE,mBAAL;EAA0B;EACxB,YAAIkE,MAAI,GAAGkB,iBAAiB,CAACjE,YAAY,GAAG,CAAC+B,QAAjB,CAA5B;;EACA,YAAIgB,MAAI,KAAKvD,MAAb,EAAqB;EACnB;EACA;EACAuD,UAAAA,MAAI,GAAGkB,iBAAiB,CAAC/D,eAAe,GAAG,CAAC6B,QAApB,CAAxB;;EACA,cAAIgB,MAAI,KAAKvD,MAAb,EAAqB;EACnB;EACA;EACA;EACAuD,YAAAA,MAAI,GAAGkB,iBAAiB,CAACjE,YAAD,CAAxB;EACD;EACF;;EACD,eAAO+C,MAAP;EACD;;EACD,SAAKhE,kBAAL,CAtCF;;EAuCE,SAAKC,iBAAL;EAAwB;EACtB;;EACF,SAAKG,gBAAL;EACE,UAAI4D,IAAI,GAAGkB,iBAAiB,CAACzD,SAAS,GAAG,CAACuB,QAAd,CAA5B;;EACA,UAAIgB,IAAI,KAAKvD,MAAb,EAAqB;EACnBuD,QAAAA,IAAI,GAAGkB,iBAAiB,CAACzD,SAAD,CAAxB;EACD;;EACD,aAAOuC,IAAP;EA9CJ;;EADM;EAAA;EAAA,iDAuDJnB,YAvDI;EAAA;EAAA;EAyDP;EAGD;;AACA,EAAO,SAASsC,kBAAT,CAA4BnC,QAA5B,EAA6CC,YAA7C,EAAwE;EAC7E;EACA;EACA,MAAIe,IAAI,GAAGkB,iBAAiB,CAAC/D,eAAe,GAAG,CAAC8B,YAApB,CAA5B;;EACA,MAAIe,IAAI,KAAKvD,MAAb,EAAqB;EACnB;EACA;EACAuD,IAAAA,IAAI,GAAGkB,iBAAiB,CAAC/D,eAAe,GAAG,CAAC6B,QAApB,CAAxB;;EACA,QAAIgB,IAAI,KAAKvD,MAAb,EAAqB;EACnB;EACA;EACAuD,MAAAA,IAAI,GAAGkB,iBAAiB,CAAC/D,eAAD,CAAxB;EACD;EACF;;EACD,SAAO6C,IAAP;EACD;EAGD;;AACA,EAAO,SAASoB,aAAT,CAAuBpC,QAAvB,EAA8C;EACnD;EACA;EACA;EACA,MAAIgB,IAAI,GAAGkB,iBAAiB,CAAC9D,UAAU,GAAG,CAAC4B,QAAf,CAA5B;;EACA,MAAIgB,IAAI,KAAKvD,MAAb,EAAqB;EACnBuD,IAAAA,IAAI,GAAGkB,iBAAiB,CAAC9D,UAAD,CAAxB;EACD;;EACD,SAAO4C,IAAP;EACD;;EAED,SAASqB,sBAAT,CAAgCvD,KAAhC,EAA8C;EAC5C,SAAOA,KAAK,GAAG,CAACA,KAAhB;EACD;;EAED,SAASwD,qBAAT,CAA+BxD,KAA/B,EAAmD;EACjD;EACA,MAAM/P,KAAK,GAAG,KAAKwT,KAAK,CAACzD,KAAD,CAAxB;EACA,SAAO/P,KAAK,GAAG,CAAR,GAAYyO,OAAZ,GAAsB,KAAKzO,KAAlC;EACD;;EAED,SAAS4R,6BAAT,CAAuC7B,KAAvC,EAAmE;EACjE,SAAO,CAACwD,qBAAqB,CAACxD,KAAD,CAArB,IAAgC,CAAjC,IAAsC,CAA7C;EACD;;AAED,EAAO,SAASoD,iBAAT,CAA2BpD,KAA3B,EAA+C;EACpD;EACA;EACA;EACA;EACA,SAAOuD,sBAAsB,CAACvD,KAAD,CAA7B;EACD;;EAED,SAASiC,sBAAT,CAAgCjC,KAAhC,EAA8C;EAC5C,SAAO,KAAKyD,KAAK,CAACzD,KAAD,CAAjB;EACD;;EAED,SAAS0D,WAAT,CAAqBxB,IAArB,EAAiC;EAC/B,SAAOD,sBAAsB,CAACC,IAAD,CAA7B;EACD;;AAED,EAAO,SAASyB,gBAAT,CAA0B9V,CAA1B,EAA2CC,CAA3C,EAA4D;EACjE,SAAO,CAACD,CAAC,GAAGC,CAAL,MAAY4Q,OAAnB;EACD;AAED,EAAO,SAASkF,eAAT,CAAyBnc,GAAzB,EAAqCoc,MAArC,EAA2D;EAChE,SAAO,CAACpc,GAAG,GAAGoc,MAAP,MAAmBA,MAA1B;EACD;AAED,EAAO,SAASC,UAAT,CAAoBjW,CAApB,EAAqCC,CAArC,EAA6D;EAClE,SAAOD,CAAC,GAAGC,CAAX;EACD;AAED,EAAO,SAASiW,WAAT,CAAqBtc,GAArB,EAAiCoc,MAAjC,EAA8D;EACnE,SAAOpc,GAAG,GAAG,CAACoc,MAAd;EACD;EAGD;;AACA,EAAO,SAASG,WAAT,CAAqB9B,IAArB,EAAwC;EAC7C,SAAOA,IAAP;EACD;AAED,EAYO,SAAS+B,aAAT,CAA0BC,OAA1B,EAAkD;EACvD;EACA;EACA,MAAMC,OAAO,GAAG,EAAhB;;EACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3F,UAApB,EAAgC2F,CAAC,EAAjC,EAAqC;EACnCD,IAAAA,OAAO,CAAC/T,IAAR,CAAa8T,OAAb;EACD;;EACD,SAAOC,OAAP;EACD;AAED,EAAO,SAASE,eAAT,CACLxI,IADK,EAELyI,UAFK,EAGLhC,SAHK,EAIL;EACAzG,EAAAA,IAAI,CAACsF,YAAL,IAAqBmD,UAArB,CADA;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;;EACA,MAAMC,mBAAmB,GAAGD,UAAU,GAAG,CAAzC,CAdA;;EAgBAzI,EAAAA,IAAI,CAAC0F,cAAL,IAAuBgD,mBAAvB;EACA1I,EAAAA,IAAI,CAAC2F,WAAL,IAAoB+C,mBAApB;EAEA,MAAMnC,UAAU,GAAGvG,IAAI,CAACuG,UAAxB;EACA,MAAMnS,KAAK,GAAGyT,WAAW,CAACY,UAAD,CAAzB,CApBA;EAsBA;;EACAlC,EAAAA,UAAU,CAACnS,KAAD,CAAV,GAAoBqS,SAApB;EACD;AAED,EAAO,SAASkC,iBAAT,CAA2B3I,IAA3B,EAA4C0F,cAA5C,EAAmE;EACxE1F,EAAAA,IAAI,CAAC0F,cAAL,IAAuBA,cAAvB;EACA1F,EAAAA,IAAI,CAAC2F,WAAL,IAAoB,CAACD,cAArB,CAFwE;;EAKxE,MAAMoB,eAAe,GAAG9G,IAAI,CAAC8G,eAA7B;EACA,MAAI3C,KAAK,GAAGuB,cAAZ;;EACA,SAAOvB,KAAK,GAAG,CAAf,EAAkB;EAChB,QAAM/P,KAAK,GAAGgS,sBAAsB,CAACjC,KAAD,CAApC;EACA,QAAMkC,IAAI,GAAG,KAAKjS,KAAlB;EAEA0S,IAAAA,eAAe,CAAC1S,KAAD,CAAf,GAAyB4P,WAAzB;EAEAG,IAAAA,KAAK,IAAI,CAACkC,IAAV;EACD;EACF;AAED,EAAO,SAASuC,cAAT,CACL5I,IADK,EAEL2F,WAFK,EAGLc,SAHK,EAIL;EACAzG,EAAAA,IAAI,CAAC2F,WAAL,IAAoB3F,IAAI,CAAC0F,cAAL,GAAsBC,WAA1C;EACD;AAED,EAQO,SAASkD,gBAAT,CAA0B1E,KAA1B,EAAwC;EAC7C,SAAO,CAACA,KAAK,GAAGjB,kBAAT,MAAiCL,OAAxC;EACD;AAED,EAAO,SAASiG,mBAAT,CAA6B9I,IAA7B,EAA8CyI,UAA9C,EAAgE;EACrEzI,EAAAA,IAAI,CAAC+I,gBAAL,IAAyBN,UAAU,GAAGzI,IAAI,CAACsF,YAA3C;EACD;AAED,EAAO,SAAS0D,gBAAT,CAA0BhJ,IAA1B,EAA2CiJ,cAA3C,EAAkE;EACvE,MAAMC,oBAAoB,GAAGlJ,IAAI,CAACsF,YAAL,GAAoB,CAAC2D,cAAlD;EAEAjJ,EAAAA,IAAI,CAACsF,YAAL,GAAoB2D,cAApB,CAHuE;;EAMvEjJ,EAAAA,IAAI,CAAC0F,cAAL,GAAsB,CAAtB;EACA1F,EAAAA,IAAI,CAAC2F,WAAL,GAAmB,CAAnB;EAEA3F,EAAAA,IAAI,CAACyF,YAAL,IAAqBwD,cAArB;EACAjJ,EAAAA,IAAI,CAAC+I,gBAAL,IAAyBE,cAAzB;EAEAjJ,EAAAA,IAAI,CAACkG,cAAL,IAAuB+C,cAAvB;EAEA,MAAM9C,aAAa,GAAGnG,IAAI,CAACmG,aAA3B;EACA,MAAMI,UAAU,GAAGvG,IAAI,CAACuG,UAAxB;EACA,MAAMO,eAAe,GAAG9G,IAAI,CAAC8G,eAA7B,CAhBuE;;EAmBvE,MAAI3C,KAAK,GAAG+E,oBAAZ;;EACA,SAAO/E,KAAK,GAAG,CAAf,EAAkB;EAChB,QAAM/P,KAAK,GAAGgS,sBAAsB,CAACjC,KAAD,CAApC;EACA,QAAMkC,IAAI,GAAG,KAAKjS,KAAlB;EAEA+R,IAAAA,aAAa,CAAC/R,KAAD,CAAb,GAAuByO,OAAvB;EACA0D,IAAAA,UAAU,CAACnS,KAAD,CAAV,GAAoB4P,WAApB;EACA8C,IAAAA,eAAe,CAAC1S,KAAD,CAAf,GAAyB4P,WAAzB;EAEAG,IAAAA,KAAK,IAAI,CAACkC,IAAV;EACD;EACF;AAED,EAAO,SAAS8C,iBAAT,CAA2BnJ,IAA3B,EAA4CkG,cAA5C,EAAmE;EACxElG,EAAAA,IAAI,CAACkG,cAAL,IAAuBA,cAAvB;EAEA,MAAMC,aAAa,GAAGnG,IAAI,CAACmG,aAA3B;EACA,MAAIhC,KAAK,GAAG+B,cAAZ;;EACA,SAAO/B,KAAK,GAAG,CAAf,EAAkB;EAChB,QAAM/P,KAAK,GAAGgS,sBAAsB,CAACjC,KAAD,CAApC;EACA,QAAMkC,IAAI,GAAG,KAAKjS,KAAlB;EAEA+R,IAAAA,aAAa,CAAC/R,KAAD,CAAb,IAAwB8R,cAAxB;EAEA/B,IAAAA,KAAK,IAAI,CAACkC,IAAV;EACD;EACF;AAED,EA4DA,IAAMuB,KAAK,GAAGwB,IAAI,CAACxB,KAAL,GAAawB,IAAI,CAACxB,KAAlB,GAA0ByB,aAAxC;EAGA;EACA;;EACA,IAAM/Q,GAAG,GAAG8Q,IAAI,CAAC9Q,GAAjB;EACA,IAAMgR,GAAG,GAAGF,IAAI,CAACE,GAAjB;;EACA,SAASD,aAAT,CAAuBlF,KAAvB,EAA4C;EAC1C,MAAIA,KAAK,KAAK,CAAd,EAAiB;EACf,WAAO,EAAP;EACD;;EACD,SAAQ,MAAO7L,GAAG,CAAC6L,KAAD,CAAH,GAAamF,GAAd,GAAqB,CAA3B,CAAD,GAAkC,CAAzC;EACD;;MC9yB2BC,4BAYxBnI;MAXyBoI,6BAWzBpI;MAVuBqI,2BAUvBrI;MAToBsI,wBASpBtI;MARqBuI,yBAQrBvI;MAPYD,kBAOZC;MANgCwI,oCAMhCxI;MAL0ByI,8BAK1BzI;MAJ6B0I,iCAI7B1I;MAHuB2I,2BAGvB3I;MAFoB4I,wBAEpB5I;MADqB6I,yBACrB7I;;AAEJ,EAA4B;EAC1B;EACA;EACA;EAH0B,QAKxBV,iBAAiB,IAAI,IAArB,IAA6BA,iBAAiB,CAAClP,OAAlB,IAA6B,IALlC;EAAA;EAAA;EAAA;EAAA;EAY3B;;EAMD,IAAM0Y,gBAAgB,GAAG,EAAzB;EAGA;EACA;;AACA,EAAO,IAAM7I,mBAAqC,GAAG,EAA9C;AACP,EAAO,IAAMC,sBAAwC,GAAG,EAAjD;AACP,EAAO,IAAMC,gBAAkC,GAAG,EAA3C;AACP,EAAO,IAAMC,aAA+B,GAAG,EAAxC;AACP,EAAO,IAAMC,cAAgC,GAAG,EAAzC;;AAEP,EAAO,IAAMC,YAA8B,GAAG,EAAvC;AAEP,EAAO,IAAMyI,WAAW,GAAGT,qBAApB;AACP,EAAO,IAAMU,YAAY;EAEvBT,sBAAsB,KAAKtQ,SAA3B,GAAuCsQ,sBAAvC,GAAgE,YAAM,EAFjE;EAIP,IAAIU,SAA0C,GAAG,IAAjD;EACA,IAAIC,0BAAwC,GAAG,IAA/C;EACA,IAAIC,mBAA4B,GAAG,KAAnC;EACA,IAAM5I,eAAqB,GAAGR,eAAa,EAA3C;EAGA;EACA;EACA;EACA;EACA;EACA;;AACA,EAAO,IAAMqJ,GAAG,GACd7I,eAAa,GAAG,KAAhB,GAAwBR,eAAxB,GAAwC;EAAA,SAAMA,eAAa,KAAKQ,eAAxB;EAAA,CADnC;AAGP,EAAO,SAAS8I,uBAAT,GAAuD;EAC5D,UAAQb,iCAAiC,EAAzC;EACE,SAAKC,2BAAL;EACE,aAAOxI,mBAAP;;EACF,SAAKyI,8BAAL;EACE,aAAOxI,sBAAP;;EACF,SAAKyI,wBAAL;EACE,aAAOxI,gBAAP;;EACF,SAAKyI,qBAAL;EACE,aAAOxI,aAAP;;EACF,SAAKyI,sBAAL;EACE,aAAOxI,cAAP;;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;;EAXF;EAcD;;EAED,SAASiJ,gCAAT,CAA0CC,kBAA1C,EAA8D;EAC5D,UAAQA,kBAAR;EACE,SAAKtJ,mBAAL;EACE,aAAOwI,2BAAP;;EACF,SAAKvI,sBAAL;EACE,aAAOwI,8BAAP;;EACF,SAAKvI,gBAAL;EACE,aAAOwI,wBAAP;;EACF,SAAKvI,aAAL;EACE,aAAOwI,qBAAP;;EACF,SAAKvI,cAAL;EACE,aAAOwI,sBAAP;;EACF;EAAA;EAAA;EAAA;EAAA;EAAA;;EAXF;EAcD;;AAED,EAAO,SAASW,eAAT,CACLD,kBADK,EAEL7Q,EAFK,EAGF;EACH,MAAMsG,aAAa,GAAGsK,gCAAgC,CAACC,kBAAD,CAAtD;EACA,SAAOpB,yBAAyB,CAACnJ,aAAD,EAAgBtG,EAAhB,CAAhC;EACD;AAED,EAAO,SAAS+Q,gBAAT,CACLF,kBADK,EAELG,QAFK,EAGLC,OAHK,EAIL;EACA,MAAM3K,aAAa,GAAGsK,gCAAgC,CAACC,kBAAD,CAAtD;EACA,SAAOnB,0BAA0B,CAACpJ,aAAD,EAAgB0K,QAAhB,EAA0BC,OAA1B,CAAjC;EACD;AAED,EAAO,SAASC,oBAAT,CAA8BF,QAA9B,EAA2D;EAChE;EACA;EACA,MAAIT,SAAS,KAAK,IAAlB,EAAwB;EACtBA,IAAAA,SAAS,GAAG,CAACS,QAAD,CAAZ,CADsB;;EAGtBR,IAAAA,0BAA0B,GAAGd,0BAA0B,CACrDK,2BADqD,EAErDoB,0BAFqD,CAAvD;EAID,GAPD,MAOO;EACL;EACA;EACAZ,IAAAA,SAAS,CAAC9V,IAAV,CAAeuW,QAAf;EACD;;EACD,SAAOZ,gBAAP;EACD;AAED,EAAO,SAASgB,cAAT,CAAwBC,YAAxB,EAA6C;EAClD,MAAIA,YAAY,KAAKjB,gBAArB,EAAuC;EACrCT,IAAAA,wBAAwB,CAAC0B,YAAD,CAAxB;EACD;EACF;AAED,EAAO,SAASC,sBAAT,GAAkC;EACvC,MAAId,0BAA0B,KAAK,IAAnC,EAAyC;EACvC,QAAMxZ,IAAI,GAAGwZ,0BAAb;EACAA,IAAAA,0BAA0B,GAAG,IAA7B;EACAb,IAAAA,wBAAwB,CAAC3Y,IAAD,CAAxB;EACD;;EACDma,EAAAA,0BAA0B;EAC3B;;EAED,SAASA,0BAAT,GAAsC;EACpC,MAAI,CAACV,mBAAD,IAAwBF,SAAS,KAAK,IAA1C,EAAgD;EAC9C;EACAE,IAAAA,mBAAmB,GAAG,IAAtB;EACA,QAAIhC,CAAC,GAAG,CAAR;;EACA,IA8BO;EACL,UAAI;EACF,YAAM8C,QAAM,GAAG,IAAf;EACA,YAAMC,MAAK,GAAGjB,SAAd;EACAO,QAAAA,eAAe,CAACvJ,mBAAD,EAAoB,YAAM;EACvC,iBAAOkH,CAAC,GAAG+C,MAAK,CAACzQ,MAAjB,EAAyB0N,CAAC,EAA1B,EAA8B;EAC5B,gBAAIuC,QAAQ,GAAGQ,MAAK,CAAC/C,CAAD,CAApB;;EACA,eAAG;EACDuC,cAAAA,QAAQ,GAAGA,QAAQ,CAACO,QAAD,CAAnB;EACD,aAFD,QAESP,QAAQ,KAAK,IAFtB;EAGD;EACF,SAPc,CAAf;EAQAT,QAAAA,SAAS,GAAG,IAAZ;EACD,OAZD,CAYE,OAAOthB,KAAP,EAAc;EACd;EACA,YAAIshB,SAAS,KAAK,IAAlB,EAAwB;EACtBA,UAAAA,SAAS,GAAGA,SAAS,CAACkB,KAAV,CAAgBhD,CAAC,GAAG,CAApB,CAAZ;EACD,SAJa;;;EAMdiB,QAAAA,0BAA0B,CACxBK,2BADwB,EAExBuB,sBAFwB,CAA1B;EAIA,cAAMriB,KAAN;EACD,OAvBD,SAuBU;EACRwhB,QAAAA,mBAAmB,GAAG,KAAtB;EACD;EACF;EACF;EACF;;ECzOD;AACA,qBAAe,QAAf;;ECGO,IAAMiB,MAAM,GAAG,CAAf;AACP,EAAO,IAAMC,UAAU,GAAG,CAAnB;EAEP;;AACA,EAAO,IAAMC,YAAY,GAAG,CAArB;AACP,EAAO,IAAMC,cAAc,GAAG,CAAvB;AACP,EAAO,IAAMC,WAAW,GAAG,CAApB;AACP,EAAO,IAAMC,gBAAgB,GAAG,EAAzB;;MCPAC,0BAA2BrjB,qBAA3BqjB;AAEP,EAAO,IAAMC,YAAY,GAAG,CAArB;AAEP,EAAO,SAASC,wBAAT,GAA4C;EACjD,SAAOF,uBAAuB,CAACG,UAA/B;EACD;;ECRD;;;;EAIA,SAASC,EAAT,CAAYjd,CAAZ,EAAoBkd,CAApB,EAA4B;EAC1B,SACGld,CAAC,KAAKkd,CAAN,KAAYld,CAAC,KAAK,CAAN,IAAW,IAAIA,CAAJ,KAAU,IAAIkd,CAArC,CAAD,IAA8Cld,CAAC,KAAKA,CAAN,IAAWkd,CAAC,KAAKA,CADjE;EAAA;EAGD;;EAED,IAAMC,QAAqC,GACzC,OAAO7Y,MAAM,CAAC2Y,EAAd,KAAqB,UAArB,GAAkC3Y,MAAM,CAAC2Y,EAAzC,GAA8CA,EADhD;;ECRA,IAAM7P,cAAc,GAAG9I,MAAM,CAAC7J,SAAP,CAAiB2S,cAAxC;EAEA;;;;;;EAKA,SAASgQ,YAAT,CAAsBC,IAAtB,EAAmCC,IAAnC,EAAyD;EACvD,MAAIL,QAAE,CAACI,IAAD,EAAOC,IAAP,CAAN,EAAoB;EAClB,WAAO,IAAP;EACD;;EAED,MACE,OAAOD,IAAP,KAAgB,QAAhB,IACAA,IAAI,KAAK,IADT,IAEA,OAAOC,IAAP,KAAgB,QAFhB,IAGAA,IAAI,KAAK,IAJX,EAKE;EACA,WAAO,KAAP;EACD;;EAED,MAAMC,KAAK,GAAGjZ,MAAM,CAACkZ,IAAP,CAAYH,IAAZ,CAAd;EACA,MAAMI,KAAK,GAAGnZ,MAAM,CAACkZ,IAAP,CAAYF,IAAZ,CAAd;;EAEA,MAAIC,KAAK,CAAC3R,MAAN,KAAiB6R,KAAK,CAAC7R,MAA3B,EAAmC;EACjC,WAAO,KAAP;EACD,GAnBsD;;;EAsBvD,OAAK,IAAI0N,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiE,KAAK,CAAC3R,MAA1B,EAAkC0N,CAAC,EAAnC,EAAuC;EACrC,QACE,CAAClM,cAAc,CAACzS,IAAf,CAAoB2iB,IAApB,EAA0BC,KAAK,CAACjE,CAAD,CAA/B,CAAD,IACA,CAAC2D,QAAE,CAACI,IAAI,CAACE,KAAK,CAACjE,CAAD,CAAN,CAAL,EAAiBgE,IAAI,CAACC,KAAK,CAACjE,CAAD,CAAN,CAArB,CAFL,EAGE;EACA,aAAO,KAAP;EACD;EACF;;EAED,SAAO,IAAP;EACD;;ECrBD,SAASoE,aAAT,CAAuB9b,KAAvB,EAA6C;EAC3C,MAAMU,KAAsB,GAAG2O,CAC3BrP,KAAK,CAAC+b,WAAN,GACE/b,KAAK,CAAC+b,WAAN,CAAkBze,IADpB,GAEE,IAHgC,CAAtC;EAKA,MAAMgL,MAAM,GAAG+G,CAAUrP,KAAK,CAACgc,YAAT,CAAtB;;EACA,UAAQhc,KAAK,CAACxC,GAAd;EACE,SAAKhE,aAAL;EACE,aAAO6O,6BAA6B,CAACrI,KAAK,CAAC1C,IAAP,AAAA,CAApC;;EACF,SAAKnD,aAAL;EACE,aAAOkO,6BAA6B,CAAC,MAAD,AAAA,CAApC;;EACF,SAAKrO,iBAAL;EACE,aAAOqO,6BAA6B,CAAC,UAAD,AAAA,CAApC;;EACF,SAAK/N,qBAAL;EACE,aAAO+N,6BAA6B,CAAC,cAAD,AAAA,CAApC;;EACF,SAAKlP,iBAAL;EACA,SAAKE,sBAAL;EACA,SAAKa,mBAAL;EACE,aAAOoQ,8BAA8B,CAACtK,KAAK,CAAC1C,IAAP,AAAA,CAArC;;EACF,SAAKxD,UAAL;EACE,aAAOwQ,8BAA8B,CAACtK,KAAK,CAAC1C,IAAN,CAAWO,MAAZ,AAAA,CAArC;;EACF,SAAKpD,KAAL;EACE,aAAO6P,8BAA8B,CAACtK,KAAK,CAAC1C,IAAN,CAAWQ,OAAZ,AAAA,CAArC;;EACF,SAAK1E,cAAL;EACE,aAAOgR,2BAA2B,CAACpK,KAAK,CAAC1C,IAAP,AAAA,CAAlC;;EACF;EACE,aAAO,EAAP;EApBJ;EAsBD;;AAED,EAAO,SAAS2e,2BAAT,CAAqCxP,cAArC,EAAoE;EACzE,MAAI;EACF,QAAI/E,IAAI,GAAG,EAAX;EACA,QAAIzH,IAAI,GAAGwM,cAAX;;EACA,OAAG;EACD/E,MAAAA,IAAI,IAAIoU,aAAa,CAAC7b,IAAD,CAArB;EACAA,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD,KAHD,QAGSL,IAHT;;EAIA,WAAOyH,IAAP;EACD,GARD,CAQE,OAAOtJ,CAAP,EAAU;EACV,WAAO,+BAA+BA,CAAC,CAACwN,OAAjC,GAA2C,IAA3C,GAAkDxN,CAAC,CAAC/F,KAA3D;EACD;EACF;;ECzDD,IAAMD,wBAAsB,GAAGR,oBAAoB,CAACQ,sBAApD;AAEA,EAAO,IAAIuI,OAAqB,GAAG,IAA5B;AACP,EAAO,IAAIub,WAAoB,GAAG,KAA3B;AAEP,EAAO,SAASC,mCAAT,GAA8D;EACnE,EAAa;EACX,QAAIxb,OAAO,KAAK,IAAhB,EAAsB;EACpB,aAAO,IAAP;EACD;;EACD,QAAMD,KAAK,GAAGC,OAAO,CAACob,WAAtB;;EACA,QAAIrb,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,WAAvC,EAAoD;EAClD,aAAOnD,gBAAgB,CAACmD,KAAK,CAACpD,IAAP,CAAvB;EACD;EACF;;EACD,SAAO,IAAP;EACD;;EAED,SAAS8e,yBAAT,GAA6C;EAC3C,EAAa;EACX,QAAIzb,OAAO,KAAK,IAAhB,EAAsB;EACpB,aAAO,EAAP;EACD,KAHU;EAKX;;;EACA,WAAOsb,2BAA2B,CAACtb,OAAD,CAAlC;EACD;EAEF;;AAED,EAAO,SAAS0b,iBAAT,GAA6B;EAClC,EAAa;EACXjkB,IAAAA,wBAAsB,CAACkkB,eAAvB,GAAyC,IAAzC;EACA3b,IAAAA,OAAO,GAAG,IAAV;EACAub,IAAAA,WAAW,GAAG,KAAd;EACD;EACF;AAED,EAAO,SAASK,eAAT,CAAyBvc,KAAzB,EAAuC;EAC5C,EAAa;EACX5H,IAAAA,wBAAsB,CAACkkB,eAAvB,GAAyCF,yBAAzC;EACAzb,IAAAA,OAAO,GAAGX,KAAV;EACAkc,IAAAA,WAAW,GAAG,KAAd;EACD;EACF;AAED,EAAO,SAASM,cAAT,CAAwBC,SAAxB,EAA4C;EACjD,EAAa;EACXP,IAAAA,WAAW,GAAGO,SAAd;EACD;EACF;AAED,EAAO,SAASC,cAAT,GAA0B;EAC/B,EAAa;EACX,WAAOR,WAAP;EACD;EACF;;EClDD,IAAMS,uBAAuB,GAAG;EAC9BC,EAAAA,6BAD8B,YACA5c,KADA,EACca,QADd,EACmC,EADnC;EAE9Bgc,EAAAA,mCAF8B,cAEc,EAFd;EAG9BC,EAAAA,0BAH8B,YAGH9c,KAHG,EAGWa,QAHX,EAGgC,EAHhC;EAI9Bkc,EAAAA,yBAJ8B,cAII,EAJJ;EAK9BC,EAAAA,sBAL8B,cAKC;EALD,CAAhC;;AAQA,EAAa;EACX,MAAMC,cAAc,GAAG,UAACjd,KAAD,EAAgC;EACrD,QAAIkd,eAAe,GAAG,IAAtB;EAEA,QAAIjd,IAAI,GAAGD,KAAX;;EACA,WAAOC,IAAI,KAAK,IAAhB,EAAsB;EACpB,UAAIA,IAAI,CAACkd,IAAL,GAAYvC,UAAhB,EAA4B;EAC1BsC,QAAAA,eAAe,GAAGjd,IAAlB;EACD;;EACDA,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;;EAED,WAAO4c,eAAP;EACD,GAZD;;EAcA,MAAME,iBAAiB,GAAG,UAAAriB,GAAG,EAAI;EAC/B,QAAMsiB,KAAK,GAAG,EAAd;EACAtiB,IAAAA,GAAG,CAACuiB,OAAJ,CAAY,UAAAtiB,KAAK,EAAI;EACnBqiB,MAAAA,KAAK,CAAC3Z,IAAN,CAAW1I,KAAX;EACD,KAFD;EAGA,WAAOqiB,KAAK,CAACE,IAAN,GAAaC,IAAb,CAAkB,IAAlB,CAAP;EACD,GAND;;EAQA,MAAIC,iCAA+C,GAAG,EAAtD;EACA,MAAIC,wCAAsD,GAAG,EAA7D;EACA,MAAIC,wCAAsD,GAAG,EAA7D;EACA,MAAIC,+CAA6D,GAAG,EAApE;EACA,MAAIC,kCAAgD,GAAG,EAAvD;EACA,MAAIC,yCAAuD,GAAG,EAA9D,CA5BW;;EA+BX,MAAMC,4BAA4B,GAAG,IAAIC,GAAJ,EAArC;;EAEArB,EAAAA,uBAAuB,CAACC,6BAAxB,GAAwD,UACtD5c,KADsD,EAEtDa,QAFsD,EAGnD;EACH;EACA,QAAIkd,4BAA4B,CAACzS,GAA7B,CAAiCtL,KAAK,CAAC1C,IAAvC,CAAJ,EAAkD;EAChD;EACD;;EAED,QACE,OAAOuD,QAAQ,CAACod,kBAAhB,KAAuC,UAAvC;EAEApd,IAAAA,QAAQ,CAACod,kBAAT,CAA4BC,4BAA5B,KAA6D,IAH/D,EAIE;EACAT,MAAAA,iCAAiC,CAAC/Z,IAAlC,CAAuC1D,KAAvC;EACD;;EAED,QACEA,KAAK,CAACmd,IAAN,GAAavC,UAAb,IACA,OAAO/Z,QAAQ,CAACsd,yBAAhB,KAA8C,UAFhD,EAGE;EACAT,MAAAA,wCAAwC,CAACha,IAAzC,CAA8C1D,KAA9C;EACD;;EAED,QACE,OAAOa,QAAQ,CAACud,yBAAhB,KAA8C,UAA9C,IACAvd,QAAQ,CAACud,yBAAT,CAAmCF,4BAAnC,KAAoE,IAFtE,EAGE;EACAP,MAAAA,wCAAwC,CAACja,IAAzC,CAA8C1D,KAA9C;EACD;;EAED,QACEA,KAAK,CAACmd,IAAN,GAAavC,UAAb,IACA,OAAO/Z,QAAQ,CAACwd,gCAAhB,KAAqD,UAFvD,EAGE;EACAT,MAAAA,+CAA+C,CAACla,IAAhD,CAAqD1D,KAArD;EACD;;EAED,QACE,OAAOa,QAAQ,CAACyd,mBAAhB,KAAwC,UAAxC,IACAzd,QAAQ,CAACyd,mBAAT,CAA6BJ,4BAA7B,KAA8D,IAFhE,EAGE;EACAL,MAAAA,kCAAkC,CAACna,IAAnC,CAAwC1D,KAAxC;EACD;;EAED,QACEA,KAAK,CAACmd,IAAN,GAAavC,UAAb,IACA,OAAO/Z,QAAQ,CAAC0d,0BAAhB,KAA+C,UAFjD,EAGE;EACAT,MAAAA,yCAAyC,CAACpa,IAA1C,CAA+C1D,KAA/C;EACD;EACF,GAnDD;;EAqDA2c,EAAAA,uBAAuB,CAACE,mCAAxB,GAA8D,YAAM;EAClE;EACA,QAAM2B,6BAA6B,GAAG,IAAIR,GAAJ,EAAtC;;EACA,QAAIP,iCAAiC,CAACzT,MAAlC,GAA2C,CAA/C,EAAkD;EAChDyT,MAAAA,iCAAiC,CAACH,OAAlC,CAA0C,UAAAtd,KAAK,EAAI;EACjDwe,QAAAA,6BAA6B,CAACC,GAA9B,CACElhB,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,WADlC;EAGAygB,QAAAA,4BAA4B,CAACU,GAA7B,CAAiCze,KAAK,CAAC1C,IAAvC;EACD,OALD;EAMAmgB,MAAAA,iCAAiC,GAAG,EAApC;EACD;;EAED,QAAMiB,oCAAoC,GAAG,IAAIV,GAAJ,EAA7C;;EACA,QAAIN,wCAAwC,CAAC1T,MAAzC,GAAkD,CAAtD,EAAyD;EACvD0T,MAAAA,wCAAwC,CAACJ,OAAzC,CAAiD,UAAAtd,KAAK,EAAI;EACxD0e,QAAAA,oCAAoC,CAACD,GAArC,CACElhB,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,WADlC;EAGAygB,QAAAA,4BAA4B,CAACU,GAA7B,CAAiCze,KAAK,CAAC1C,IAAvC;EACD,OALD;EAMAogB,MAAAA,wCAAwC,GAAG,EAA3C;EACD;;EAED,QAAMiB,oCAAoC,GAAG,IAAIX,GAAJ,EAA7C;;EACA,QAAIL,wCAAwC,CAAC3T,MAAzC,GAAkD,CAAtD,EAAyD;EACvD2T,MAAAA,wCAAwC,CAACL,OAAzC,CAAiD,UAAAtd,KAAK,EAAI;EACxD2e,QAAAA,oCAAoC,CAACF,GAArC,CACElhB,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,WADlC;EAGAygB,QAAAA,4BAA4B,CAACU,GAA7B,CAAiCze,KAAK,CAAC1C,IAAvC;EACD,OALD;EAOAqgB,MAAAA,wCAAwC,GAAG,EAA3C;EACD;;EAED,QAAMiB,2CAA2C,GAAG,IAAIZ,GAAJ,EAApD;;EACA,QAAIJ,+CAA+C,CAAC5T,MAAhD,GAAyD,CAA7D,EAAgE;EAC9D4T,MAAAA,+CAA+C,CAACN,OAAhD,CAAwD,UAAAtd,KAAK,EAAI;EAC/D4e,QAAAA,2CAA2C,CAACH,GAA5C,CACElhB,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,WADlC;EAGAygB,QAAAA,4BAA4B,CAACU,GAA7B,CAAiCze,KAAK,CAAC1C,IAAvC;EACD,OALD;EAOAsgB,MAAAA,+CAA+C,GAAG,EAAlD;EACD;;EAED,QAAMiB,8BAA8B,GAAG,IAAIb,GAAJ,EAAvC;;EACA,QAAIH,kCAAkC,CAAC7T,MAAnC,GAA4C,CAAhD,EAAmD;EACjD6T,MAAAA,kCAAkC,CAACP,OAAnC,CAA2C,UAAAtd,KAAK,EAAI;EAClD6e,QAAAA,8BAA8B,CAACJ,GAA/B,CACElhB,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,WADlC;EAGAygB,QAAAA,4BAA4B,CAACU,GAA7B,CAAiCze,KAAK,CAAC1C,IAAvC;EACD,OALD;EAOAugB,MAAAA,kCAAkC,GAAG,EAArC;EACD;;EAED,QAAMiB,qCAAqC,GAAG,IAAId,GAAJ,EAA9C;;EACA,QAAIF,yCAAyC,CAAC9T,MAA1C,GAAmD,CAAvD,EAA0D;EACxD8T,MAAAA,yCAAyC,CAACR,OAA1C,CAAkD,UAAAtd,KAAK,EAAI;EACzD8e,QAAAA,qCAAqC,CAACL,GAAtC,CACElhB,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,WADlC;EAGAygB,QAAAA,4BAA4B,CAACU,GAA7B,CAAiCze,KAAK,CAAC1C,IAAvC;EACD,OALD;EAOAwgB,MAAAA,yCAAyC,GAAG,EAA5C;EACD,KAtEiE;EAyElE;;;EACA,QAAIY,oCAAoC,CAACK,IAArC,GAA4C,CAAhD,EAAmD;EACjD,UAAMC,WAAW,GAAG5B,iBAAiB,CACnCsB,oCADmC,CAArC;;EAGA,YACE,2GACE,2EADF,GAEE,iGAFF,GAGE,8CAJJ,EAKEM,WALF;EAOD;;EAED,QAAIJ,2CAA2C,CAACG,IAA5C,GAAmD,CAAvD,EAA0D;EACxD,UAAMC,YAAW,GAAG5B,iBAAiB,CACnCwB,2CADmC,CAArC;;EAGA,YACE,8EACE,sCADF,GAEE,2EAFF,GAGE,oEAHF,GAIE,oDAJF,GAKE,iEALF,GAME,0FANF,GAOE,8CARJ,EASEI,YATF;EAWD;;EAED,QAAIF,qCAAqC,CAACC,IAAtC,GAA6C,CAAjD,EAAoD;EAClD,UAAMC,aAAW,GAAG5B,iBAAiB,CACnC0B,qCADmC,CAArC;;EAGA,YACE,wEACE,sCADF,GAEE,2EAFF,GAGE,oEAHF,GAIE,8CALJ,EAMEE,aANF;EAQD;;EAED,QAAIR,6BAA6B,CAACO,IAA9B,GAAqC,CAAzC,EAA4C;EAC1C,UAAMC,aAAW,GAAG5B,iBAAiB,CAACoB,6BAAD,CAArC;;EAEA,WACE,0EACE,2EADF,GAEE,iGAFF,GAGE,uEAHF,GAIE,mFAJF,GAKE,sEALF,GAME,+EANF,GAOE,8CARJ,EASEQ,aATF;EAWD;;EAED,QAAIL,oCAAoC,CAACI,IAArC,GAA4C,CAAhD,EAAmD;EACjD,UAAMC,aAAW,GAAG5B,iBAAiB,CACnCuB,oCADmC,CAArC;;EAIA,WACE,iFACE,2EADF,GAEE,oEAFF,GAGE,kEAHF,GAIE,mDAJF,GAKE,0FALF,GAME,qFANF,GAOE,mFAPF,GAQE,sEARF,GASE,+EATF,GAUE,8CAXJ,EAYEK,aAZF;EAcD;;EAED,QAAIH,8BAA8B,CAACE,IAA/B,GAAsC,CAA1C,EAA6C;EAC3C,UAAMC,aAAW,GAAG5B,iBAAiB,CAACyB,8BAAD,CAArC;;EAEA,WACE,2EACE,2EADF,GAEE,oEAFF,GAGE,yEAHF,GAIE,mFAJF,GAKE,sEALF,GAME,+EANF,GAOE,8CARJ,EASEG,aATF;EAWD;EACF,GA1KD;;EA4KA,MAAIC,2BAAsD,GAAG,IAAIlW,GAAJ,EAA7D,CAlQW;;EAqQX,MAAMmW,yBAAyB,GAAG,IAAIlB,GAAJ,EAAlC;;EAEArB,EAAAA,uBAAuB,CAACG,0BAAxB,GAAqD,UACnD9c,KADmD,EAEnDa,QAFmD,EAGhD;EACH,QAAMse,UAAU,GAAGlC,cAAc,CAACjd,KAAD,CAAjC;;EACA,QAAImf,UAAU,KAAK,IAAnB,EAAyB;EACvB,YACE,oEACE,sEAFJ;;EAIA;EACD,KARE;;;EAWH,QAAID,yBAAyB,CAAC5T,GAA1B,CAA8BtL,KAAK,CAAC1C,IAApC,CAAJ,EAA+C;EAC7C;EACD;;EAED,QAAI8hB,eAAe,GAAGH,2BAA2B,CAACrkB,GAA5B,CAAgCukB,UAAhC,CAAtB;;EAEA,QACEnf,KAAK,CAAC1C,IAAN,CAAW4P,YAAX,IAA2B,IAA3B,IACAlN,KAAK,CAAC1C,IAAN,CAAW8P,iBAAX,IAAgC,IADhC,IAECvM,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAQ,CAAC8M,eAAhB,KAAoC,UAH5D,EAIE;EACA,UAAIyR,eAAe,KAAK5W,SAAxB,EAAmC;EACjC4W,QAAAA,eAAe,GAAG,EAAlB;EACAH,QAAAA,2BAA2B,CAAClkB,GAA5B,CAAgCokB,UAAhC,EAA4CC,eAA5C;EACD;;EACDA,MAAAA,eAAe,CAAC1b,IAAhB,CAAqB1D,KAArB;EACD;EACF,GA/BD;;EAiCA2c,EAAAA,uBAAuB,CAACI,yBAAxB,GAAoD,YAAM;EACtDkC,IAAAA,2BAAF,CAAgE3B,OAAhE,CACE,UAAC+B,UAAD,EAAyBF,UAAzB,EAAwC;EACtC,UAAIE,UAAU,CAACrV,MAAX,KAAsB,CAA1B,EAA6B;EAC3B;EACD;;EACD,UAAMsV,UAAU,GAAGD,UAAU,CAAC,CAAD,CAA7B;EAEA,UAAME,WAAW,GAAG,IAAIvB,GAAJ,EAApB;EACAqB,MAAAA,UAAU,CAAC/B,OAAX,CAAmB,UAAAtd,KAAK,EAAI;EAC1Buf,QAAAA,WAAW,CAACd,GAAZ,CAAgBlhB,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,WAAhD;EACA4hB,QAAAA,yBAAyB,CAACT,GAA1B,CAA8Bze,KAAK,CAAC1C,IAApC;EACD,OAHD;EAKA,UAAM0hB,WAAW,GAAG5B,iBAAiB,CAACmC,WAAD,CAArC;;EAEA,UAAI;EACFC,QAAAA,eAAyB,CAACF,UAAD,CAAzB;;EACA,cACE,oEACE,2EADF,GAEE,6CAFF,GAGE,gDAHF,GAIE,iFALJ,EAMEN,WANF;EAQD,OAVD,SAUU;EACRS,QAAAA,iBAA2B;EAC5B;EACF,KA5BH;EA8BD,GA/BD;;EAiCA9C,EAAAA,uBAAuB,CAACK,sBAAxB,GAAiD,YAAM;EACrDS,IAAAA,iCAAiC,GAAG,EAApC;EACAC,IAAAA,wCAAwC,GAAG,EAA3C;EACAC,IAAAA,wCAAwC,GAAG,EAA3C;EACAC,IAAAA,+CAA+C,GAAG,EAAlD;EACAC,IAAAA,kCAAkC,GAAG,EAArC;EACAC,IAAAA,yCAAyC,GAAG,EAA5C;EACAmB,IAAAA,2BAA2B,GAAG,IAAIlW,GAAJ,EAA9B;EACD,GARD;EASD;;ECtWM,SAAS2W,mBAAT,CAA6BlV,SAA7B,EAA6CmV,SAA7C,EAAwE;EAC7E,MAAInV,SAAS,IAAIA,SAAS,CAACoV,YAA3B,EAAyC;EACvC;EACA,QAAM3c,KAAK,GAAG,QAAc,EAAd,EAAkB0c,SAAlB,CAAd;;EACA,QAAMC,YAAY,GAAGpV,SAAS,CAACoV,YAA/B;;EACA,SAAK,IAAMC,QAAX,IAAuBD,YAAvB,EAAqC;EACnC,UAAI3c,KAAK,CAAC4c,QAAD,CAAL,KAAoBrX,SAAxB,EAAmC;EACjCvF,QAAAA,KAAK,CAAC4c,QAAD,CAAL,GAAkBD,YAAY,CAACC,QAAD,CAA9B;EACD;EACF;;EACD,WAAO5c,KAAP;EACD;;EACD,SAAO0c,SAAP;EACD;;ECbD;EACA;EACA;AACA,EAAO,IAAMG,qBAAqB,GAAG,UAA9B;;ECyBP,IAAMC,WAA+B,GAAGhU,YAAY,CAAC,IAAD,CAApD;EAEA,IAAIiU,aAAJ;;AACA,EAAa;EACX;EACAA,EAAAA,aAAa,GAAG,EAAhB;EACD;;EAED,IAAIC,uBAAqC,GAAG,IAA5C;EACA,IAAIC,qBAAsD,GAAG,IAA7D;EACA,IAAIC,8BAAwD,GAAG,IAA/D;EAEA,IAAIC,4BAAqC,GAAG,KAA5C;AAEA,EAAO,SAASC,wBAAT,GAA0C;EAC/C;EACA;EACAJ,EAAAA,uBAAuB,GAAG,IAA1B;EACAC,EAAAA,qBAAqB,GAAG,IAAxB;EACAC,EAAAA,8BAA8B,GAAG,IAAjC;;EACA,EAAa;EACXC,IAAAA,4BAA4B,GAAG,KAA/B;EACD;EACF;AAED,EAAO,SAASE,+BAAT,GAAiD;EACtD,EAAa;EACXF,IAAAA,4BAA4B,GAAG,IAA/B;EACD;EACF;AAED,EAAO,SAASG,8BAAT,GAAgD;EACrD,EAAa;EACXH,IAAAA,4BAA4B,GAAG,KAA/B;EACD;EACF;AAED,EAAO,SAASI,YAAT,CAAyBC,aAAzB,EAA+CC,SAA/C,EAAmE;EACxE,MAAMhjB,OAAwB,GAAG+iB,aAAa,CAACnjB,IAAd,CAAmBM,QAApD;;EAEA,EAiBO;EACL8F,IAAAA,IAAI,CAACqc,WAAD,EAAcriB,OAAO,CAACijB,cAAtB,EAAsCF,aAAtC,CAAJ;EAEA/iB,IAAAA,OAAO,CAACijB,cAAR,GAAyBD,SAAzB;;EACA,IAAa;EACX,UACEhjB,OAAO,CAACkjB,iBAAR,KAA8BpY,SAA9B,IACA9K,OAAO,CAACkjB,iBAAR,KAA8B,IAD9B,IAEAljB,OAAO,CAACkjB,iBAAR,KAA8BZ,aAHhC,EAIE;EACA,cACE,4DACE,uDAFJ;EAID;;EACDtiB,MAAAA,OAAO,CAACkjB,iBAAR,GAA4BZ,aAA5B;EACD;EACF;EACF;AAED,EAAO,SAASa,WAAT,CAAqBJ,aAArB,EAAiD;EACtD,MAAMK,YAAY,GAAGf,WAAW,CAACpf,OAAjC;EAEAsL,EAAAA,GAAG,CAAC8T,WAAD,EAAcU,aAAd,CAAH;EAEA,MAAM/iB,OAA0B,GAAG+iB,aAAa,CAACnjB,IAAd,CAAmBM,QAAtD;;EACA,EAEO;EACLF,IAAAA,OAAO,CAACijB,cAAR,GAAyBG,YAAzB;EACD;EACF;AAED,EAAO,SAASC,oBAAT,CACLrjB,OADK,EAELsjB,QAFK,EAGLC,QAHK,EAIL;EACA,MAAI5F,QAAE,CAAC4F,QAAD,EAAWD,QAAX,CAAN,EAA4B;EAC1B;EACA,WAAO,CAAP;EACD,GAHD,MAGO;EACL,QAAME,WAAW,GACf,OAAOxjB,OAAO,CAACyjB,qBAAf,KAAyC,UAAzC,GACIzjB,OAAO,CAACyjB,qBAAR,CAA8BF,QAA9B,EAAwCD,QAAxC,CADJ,GAEIlB,qBAHN;;EAKA,IAAa;EACX,UAAI,CAACoB,WAAW,GAAGpB,qBAAf,MAA0CoB,WAA9C,EAA2D;EACzD,cACE,6DACE,sCAFJ,EAGEA,WAHF;EAKD;EACF;;EACD,WAAOA,WAAW,GAAG,CAArB;EACD;EACF;AAED,EAAO,SAASE,wBAAT,CACLxf,MADK,EAELyf,WAFK,EAGL;EACA;EACA,MAAIphB,IAAI,GAAG2B,MAAX;;EACA,SAAO3B,IAAI,KAAK,IAAhB,EAAsB;EACpB,QAAME,SAAS,GAAGF,IAAI,CAACE,SAAvB;;EACA,QAAI,CAAC+W,eAAe,CAACjX,IAAI,CAACqhB,UAAN,EAAkBD,WAAlB,CAApB,EAAoD;EAClDphB,MAAAA,IAAI,CAACqhB,UAAL,GAAkBlK,UAAU,CAACnX,IAAI,CAACqhB,UAAN,EAAkBD,WAAlB,CAA5B;;EACA,UAAIlhB,SAAS,KAAK,IAAlB,EAAwB;EACtBA,QAAAA,SAAS,CAACmhB,UAAV,GAAuBlK,UAAU,CAACjX,SAAS,CAACmhB,UAAX,EAAuBD,WAAvB,CAAjC;EACD;EACF,KALD,MAKO,IACLlhB,SAAS,KAAK,IAAd,IACA,CAAC+W,eAAe,CAAC/W,SAAS,CAACmhB,UAAX,EAAuBD,WAAvB,CAFX,EAGL;EACAlhB,MAAAA,SAAS,CAACmhB,UAAV,GAAuBlK,UAAU,CAACjX,SAAS,CAACmhB,UAAX,EAAuBD,WAAvB,CAAjC;EACD,KALM,MAKA;EACL;EACA;EACA;EACD;;EACDphB,IAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;EACF;AAED,EAAO,SAASihB,sBAAT,CACL9U,cADK,EAEL/O,OAFK,EAGLwjB,WAHK,EAILG,WAJK,EAKC;EACN,MAAIrhB,KAAK,GAAGyM,cAAc,CAACjL,KAA3B;;EACA,MAAIxB,KAAK,KAAK,IAAd,EAAoB;EAClB;EACAA,IAAAA,KAAK,CAACM,MAAN,GAAemM,cAAf;EACD;;EACD,SAAOzM,KAAK,KAAK,IAAjB,EAAuB;EACrB,QAAIwhB,SAAS,SAAb,CADqB;;EAIrB,QAAMC,IAAI,GAAGzhB,KAAK,CAAC0hB,YAAnB;;EACA,QAAID,IAAI,KAAK,IAAb,EAAmB;EACjBD,MAAAA,SAAS,GAAGxhB,KAAK,CAACwB,KAAlB;EAEA,UAAImgB,UAAU,GAAGF,IAAI,CAACG,YAAtB;;EACA,aAAOD,UAAU,KAAK,IAAtB,EAA4B;EAC1B;EACA,YACEA,UAAU,CAACjkB,OAAX,KAAuBA,OAAvB,IACA,CAACikB,UAAU,CAACE,YAAX,GAA0BX,WAA3B,MAA4C,CAF9C,EAGE;EACA;EAEA,cAAIlhB,KAAK,CAACxC,GAAN,KAAcpE,cAAlB,EAAkC;EAChC;EACA,gBAAM0oB,MAAM,GAAGC,YAAY,CACzB5O,WADyB,EAEzBuD,iBAAiB,CAAC2K,WAAD,CAFQ,CAA3B;EAIAS,YAAAA,MAAM,CAACtkB,GAAP,GAAawkB,WAAb,CANgC;EAQhC;EACA;EACA;;EACAC,YAAAA,aAAa,CAACjiB,KAAD,EAAQ8hB,MAAR,CAAb;EACD;;EACD9hB,UAAAA,KAAK,CAACsT,KAAN,GAAc8D,UAAU,CAACpX,KAAK,CAACsT,KAAP,EAAc+N,WAAd,CAAxB;EACA,cAAMlhB,SAAS,GAAGH,KAAK,CAACG,SAAxB;;EACA,cAAIA,SAAS,KAAK,IAAlB,EAAwB;EACtBA,YAAAA,SAAS,CAACmT,KAAV,GAAkB8D,UAAU,CAACjX,SAAS,CAACmT,KAAX,EAAkB+N,WAAlB,CAA5B;EACD;;EACDD,UAAAA,wBAAwB,CAACphB,KAAK,CAACM,MAAP,EAAe+gB,WAAf,CAAxB,CArBA;;EAwBAI,UAAAA,IAAI,CAACnO,KAAL,GAAa8D,UAAU,CAACqK,IAAI,CAACnO,KAAN,EAAa+N,WAAb,CAAvB,CAxBA;EA2BA;;EACA;EACD;;EACDM,QAAAA,UAAU,GAAGA,UAAU,CAACO,IAAxB;EACD;EACF,KAzCD,MAyCO,IAAIliB,KAAK,CAACxC,GAAN,KAAc3D,eAAlB,EAAmC;EACxC;EACA2nB,MAAAA,SAAS,GAAGxhB,KAAK,CAAC1C,IAAN,KAAemP,cAAc,CAACnP,IAA9B,GAAqC,IAArC,GAA4C0C,KAAK,CAACwB,KAA9D;EACD,KAHM,MAGA,AAuBA;EACL;EACAggB,MAAAA,SAAS,GAAGxhB,KAAK,CAACwB,KAAlB;EACD;;EAED,QAAIggB,SAAS,KAAK,IAAlB,EAAwB;EACtB;EACAA,MAAAA,SAAS,CAAClhB,MAAV,GAAmBN,KAAnB;EACD,KAHD,MAGO;EACL;EACAwhB,MAAAA,SAAS,GAAGxhB,KAAZ;;EACA,aAAOwhB,SAAS,KAAK,IAArB,EAA2B;EACzB,YAAIA,SAAS,KAAK/U,cAAlB,EAAkC;EAChC;EACA+U,UAAAA,SAAS,GAAG,IAAZ;EACA;EACD;;EACD,YAAM/f,OAAO,GAAG+f,SAAS,CAAC/f,OAA1B;;EACA,YAAIA,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACAA,UAAAA,OAAO,CAACnB,MAAR,GAAiBkhB,SAAS,CAAClhB,MAA3B;EACAkhB,UAAAA,SAAS,GAAG/f,OAAZ;EACA;EACD,SAZwB;;;EAczB+f,QAAAA,SAAS,GAAGA,SAAS,CAAClhB,MAAtB;EACD;EACF;;EACDN,IAAAA,KAAK,GAAGwhB,SAAR;EACD;EACF;AAED,EAAO,SAASW,oBAAT,CACL1V,cADK,EAEL4U,WAFK,EAGC;EACNpB,EAAAA,uBAAuB,GAAGxT,cAA1B;EACAyT,EAAAA,qBAAqB,GAAG,IAAxB;EACAC,EAAAA,8BAA8B,GAAG,IAAjC;EAEA,MAAMuB,YAAY,GAAGjV,cAAc,CAACiV,YAApC;;EACA,MAAIA,YAAY,KAAK,IAArB,EAA2B;EACzB,QAAME,YAAY,GAAGF,YAAY,CAACE,YAAlC;;EACA,QAAIA,YAAY,KAAK,IAArB,EAA2B;EACzB,UAAI3K,gBAAgB,CAACyK,YAAY,CAACpO,KAAd,EAAqB+N,WAArB,CAApB,EAAuD;EACrD;EACAe,QAAAA,gCAAgC;EACjC,OAJwB;;;EAMzBV,MAAAA,YAAY,CAACE,YAAb,GAA4B,IAA5B;EACD;EACF;EACF;AAED,EAAO,SAASS,WAAT,CACL3kB,OADK,EAELmkB,YAFK,EAGF;EACH,EAAa;EACX;EACA;EACA,QAAIzB,4BAAJ,EAAkC;EAChC,YACE,wDACE,gFADF,GAEE,iFAFF,GAGE,8CAJJ;EAMD;EACF;;EAED,MAAID,8BAA8B,KAAKziB,OAAvC,EAAgD,CAAhD,MAEO,IAAImkB,YAAY,KAAK,KAAjB,IAA0BA,YAAY,KAAK,CAA/C,EAAkD,CAAlD,MAEA;EACL,QAAIS,oBAAJ,CADK;;EAEL,QACE,OAAOT,YAAP,KAAwB,QAAxB,IACAA,YAAY,KAAK/B,qBAFnB,EAGE;EACA;EACAK,MAAAA,8BAA8B,GAAKziB,OAAnC;EACA4kB,MAAAA,oBAAoB,GAAGxC,qBAAvB;EACD,KAPD,MAOO;EACLwC,MAAAA,oBAAoB,GAAGT,YAAvB;EACD;;EAED,QAAMU,WAAW,GAAG;EAClB7kB,MAAAA,OAAO,EAAIA,OADO;EAElBmkB,MAAAA,YAAY,EAAES,oBAFI;EAGlBJ,MAAAA,IAAI,EAAE;EAHY,KAApB;;EAMA,QAAIhC,qBAAqB,KAAK,IAA9B,EAAoC;EAAA,YAEhCD,uBAAuB,KAAK,IAFI;EAAA;EAAA;EAAA;EAAA;;;EAUlCC,MAAAA,qBAAqB,GAAGqC,WAAxB;EACAtC,MAAAA,uBAAuB,CAACyB,YAAxB,GAAuC;EACrCpO,QAAAA,KAAK,EAAEtB,OAD8B;EAErC4P,QAAAA,YAAY,EAAEW,WAFuB;EAGrCC,QAAAA,UAAU,EAAE;EAHyB,OAAvC;EAKD,KAhBD,MAgBO;EACL;EACAtC,MAAAA,qBAAqB,GAAGA,qBAAqB,CAACgC,IAAtB,GAA6BK,WAArD;EACD;EACF;;EACD,SAAOE,CAA4C/kB,OAAO,CAACijB,cAA3D;EACD;;EC1PM,IAAM+B,WAAW,GAAG,CAApB;AACP,EAAO,IAAMC,YAAY,GAAG,CAArB;AACP,EAAO,IAAMX,WAAW,GAAG,CAApB;AACP,EAAO,IAAMY,aAAa,GAAG,CAAtB;EAGP;EACA;;EACA,IAAIC,cAAc,GAAG,KAArB;EAEA,IAAIC,yBAAJ;EACA,IAAIC,wBAAJ;AACA;AACA,EAAa;EACXD,EAAAA,yBAAyB,GAAG,KAA5B;EACAC,EAAAA,wBAAwB,GAAG,IAA3B;EAID;;AAED,EAAO,SAASC,qBAAT,CAAsChjB,KAAtC,EAA0D;EAC/D,MAAMya,KAAyB,GAAG;EAChCwI,IAAAA,SAAS,EAAEjjB,KAAK,CAACkjB,aADe;EAEhCC,IAAAA,eAAe,EAAE,IAFe;EAGhCC,IAAAA,cAAc,EAAE,IAHgB;EAIhCC,IAAAA,MAAM,EAAE;EACNC,MAAAA,OAAO,EAAE;EADH,KAJwB;EAOhCC,IAAAA,OAAO,EAAE;EAPuB,GAAlC;EASAvjB,EAAAA,KAAK,CAACwjB,WAAN,GAAoB/I,KAApB;EACD;AAED,EAAO,SAASgJ,gBAAT,CACL9iB,OADK,EAEL8L,cAFK,EAGC;EACN;EACA,MAAMgO,KAAyB,GAAIhO,cAAc,CAAC+W,WAAlD;EACA,MAAME,YAAgC,GAAI/iB,OAAO,CAAC6iB,WAAlD;;EACA,MAAI/I,KAAK,KAAKiJ,YAAd,EAA4B;EAC1B,QAAMC,KAAyB,GAAG;EAChCV,MAAAA,SAAS,EAAES,YAAY,CAACT,SADQ;EAEhCE,MAAAA,eAAe,EAAEO,YAAY,CAACP,eAFE;EAGhCC,MAAAA,cAAc,EAAEM,YAAY,CAACN,cAHG;EAIhCC,MAAAA,MAAM,EAAEK,YAAY,CAACL,MAJW;EAKhCE,MAAAA,OAAO,EAAEG,YAAY,CAACH;EALU,KAAlC;EAOA9W,IAAAA,cAAc,CAAC+W,WAAf,GAA6BG,KAA7B;EACD;EACF;AAED,EAAO,SAAS5B,YAAT,CAAsBnM,SAAtB,EAAyCJ,IAAzC,EAAgE;EACrE,MAAMsM,MAAiB,GAAG;EACxBlM,IAAAA,SAAS,EAATA,SADwB;EAExBJ,IAAAA,IAAI,EAAJA,IAFwB;EAIxBhY,IAAAA,GAAG,EAAEklB,WAJmB;EAKxB1kB,IAAAA,OAAO,EAAE,IALe;EAMxBic,IAAAA,QAAQ,EAAE,IANc;EAQxBiI,IAAAA,IAAI,EAAE;EARkB,GAA1B;EAUA,SAAOJ,MAAP;EACD;AAED,EAAO,SAASG,aAAT,CAA8BjiB,KAA9B,EAA4C8hB,MAA5C,EAAmE;EACxE,MAAM0B,WAAW,GAAGxjB,KAAK,CAACwjB,WAA1B;;EACA,MAAIA,WAAW,KAAK,IAApB,EAA0B;EACxB;EACA;EACD;;EAED,MAAMI,WAA+B,GAAIJ,WAAD,CAAmBH,MAA3D;EACA,MAAMC,OAAO,GAAGM,WAAW,CAACN,OAA5B;;EACA,MAAIA,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACAxB,IAAAA,MAAM,CAACI,IAAP,GAAcJ,MAAd;EACD,GAHD,MAGO;EACLA,IAAAA,MAAM,CAACI,IAAP,GAAcoB,OAAO,CAACpB,IAAtB;EACAoB,IAAAA,OAAO,CAACpB,IAAR,GAAeJ,MAAf;EACD;;EACD8B,EAAAA,WAAW,CAACN,OAAZ,GAAsBxB,MAAtB;;EAEA,EAAa;EACX,QACEiB,wBAAwB,KAAKa,WAA7B,IACA,CAACd,yBAFH,EAGE;EACA,YACE,sEACE,mEADF,GAEE,iEAFF,GAGE,WAJJ;;EAMAA,MAAAA,yBAAyB,GAAG,IAA5B;EACD;EACF;EACF;AAED,EAAO,SAASe,qBAAT,CACLpX,cADK,EAELqX,cAFK,EAGL;EACA;EACA;EACA;EACA,MAAIrJ,KAAyB,GAAIhO,cAAc,CAAC+W,WAAhD,CAJA;;EAOA,MAAM7iB,OAAO,GAAG8L,cAAc,CAACtM,SAA/B;;EACA,MAAIQ,OAAO,KAAK,IAAhB,EAAsB;EACpB,QAAM+iB,YAAgC,GAAI/iB,OAAO,CAAC6iB,WAAlD;;EACA,QAAI/I,KAAK,KAAKiJ,YAAd,EAA4B;EAC1B;EACA;EACA;EACA;EACA;EACA;EACA,UAAIK,QAAQ,GAAG,IAAf;EACA,UAAIC,OAAO,GAAG,IAAd;EACA,UAAMb,eAAe,GAAG1I,KAAK,CAAC0I,eAA9B;;EACA,UAAIA,eAAe,KAAK,IAAxB,EAA8B;EAC5B;EACA,YAAIrB,MAAM,GAAGqB,eAAb;;EACA,WAAG;EACD,cAAMQ,KAAoB,GAAG;EAC3B/N,YAAAA,SAAS,EAAEkM,MAAM,CAAClM,SADS;EAE3BJ,YAAAA,IAAI,EAAEsM,MAAM,CAACtM,IAFc;EAI3BhY,YAAAA,GAAG,EAAEskB,MAAM,CAACtkB,GAJe;EAK3BQ,YAAAA,OAAO,EAAE8jB,MAAM,CAAC9jB,OALW;EAM3Bic,YAAAA,QAAQ,EAAE6H,MAAM,CAAC7H,QANU;EAQ3BiI,YAAAA,IAAI,EAAE;EARqB,WAA7B;;EAUA,cAAI8B,OAAO,KAAK,IAAhB,EAAsB;EACpBD,YAAAA,QAAQ,GAAGC,OAAO,GAAGL,KAArB;EACD,WAFD,MAEO;EACLK,YAAAA,OAAO,CAAC9B,IAAR,GAAeyB,KAAf;EACAK,YAAAA,OAAO,GAAGL,KAAV;EACD;;EACD7B,UAAAA,MAAM,GAAGA,MAAM,CAACI,IAAhB;EACD,SAlBD,QAkBSJ,MAAM,KAAK,IAlBpB,EAH4B;;;EAwB5B,YAAIkC,OAAO,KAAK,IAAhB,EAAsB;EACpBD,UAAAA,QAAQ,GAAGC,OAAO,GAAGF,cAArB;EACD,SAFD,MAEO;EACLE,UAAAA,OAAO,CAAC9B,IAAR,GAAe4B,cAAf;EACAE,UAAAA,OAAO,GAAGF,cAAV;EACD;EACF,OA9BD,MA8BO;EACL;EACAC,QAAAA,QAAQ,GAAGC,OAAO,GAAGF,cAArB;EACD;;EACDrJ,MAAAA,KAAK,GAAG;EACNwI,QAAAA,SAAS,EAAES,YAAY,CAACT,SADlB;EAENE,QAAAA,eAAe,EAAEY,QAFX;EAGNX,QAAAA,cAAc,EAAEY,OAHV;EAINX,QAAAA,MAAM,EAAEK,YAAY,CAACL,MAJf;EAKNE,QAAAA,OAAO,EAAEG,YAAY,CAACH;EALhB,OAAR;EAOA9W,MAAAA,cAAc,CAAC+W,WAAf,GAA6B/I,KAA7B;EACA;EACD;EACF,GAhED;;;EAmEA,MAAM2I,cAAc,GAAG3I,KAAK,CAAC2I,cAA7B;;EACA,MAAIA,cAAc,KAAK,IAAvB,EAA6B;EAC3B3I,IAAAA,KAAK,CAAC0I,eAAN,GAAwBW,cAAxB;EACD,GAFD,MAEO;EACLV,IAAAA,cAAc,CAAClB,IAAf,GAAsB4B,cAAtB;EACD;;EACDrJ,EAAAA,KAAK,CAAC2I,cAAN,GAAuBU,cAAvB;EACD;;EAED,SAASG,kBAAT,CACExX,cADF,EAEEgO,KAFF,EAGEqH,MAHF,EAIEoC,SAJF,EAKEC,SALF,EAMEtjB,QANF,EAOO;EACL,UAAQihB,MAAM,CAACtkB,GAAf;EACE,SAAKmlB,YAAL;EAAmB;EACjB,YAAM3kB,OAAO,GAAG8jB,MAAM,CAAC9jB,OAAvB;;EACA,YAAI,OAAOA,OAAP,KAAmB,UAAvB,EAAmC;EACjC;EACA,UAAa;EACXsiB,YAAAA,+BAA+B;EAChC;;EACD,cAAM8D,SAAS,GAAGpmB,OAAO,CAACjF,IAAR,CAAa8H,QAAb,EAAuBqjB,SAAvB,EAAkCC,SAAlC,CAAlB;;EACA,UAAa;AACX;EAWA5D,YAAAA,8BAA8B;EAC/B;;EACD,iBAAO6D,SAAP;EACD,SAvBgB;;;EAyBjB,eAAOpmB,OAAP;EACD;;EACD,SAAK4kB,aAAL;EAAoB;EAClBnW,QAAAA,cAAc,CAACpM,KAAf,GACGoM,cAAc,CAACpM,KAAf,GAAuB,CAACd,aAAzB,GAA0CV,UAD5C;EAED;EACD;;EACA,SAAK6jB,WAAL;EAAkB;EAChB,YAAM1kB,QAAO,GAAG8jB,MAAM,CAAC9jB,OAAvB;EACA,YAAIqmB,YAAJ;;EACA,YAAI,OAAOrmB,QAAP,KAAmB,UAAvB,EAAmC;EACjC;EACA,UAAa;EACXsiB,YAAAA,+BAA+B;EAChC;;EACD+D,UAAAA,YAAY,GAAGrmB,QAAO,CAACjF,IAAR,CAAa8H,QAAb,EAAuBqjB,SAAvB,EAAkCC,SAAlC,CAAf;;EACA,UAAa;AACX;EAWA5D,YAAAA,8BAA8B;EAC/B;EACF,SApBD,MAoBO;EACL;EACA8D,UAAAA,YAAY,GAAGrmB,QAAf;EACD;;EACD,YAAIqmB,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK7b,SAA9C,EAAyD;EACvD;EACA,iBAAO0b,SAAP;EACD,SA9Be;;;EAgChB,eAAO,QAAc,EAAd,EAAkBA,SAAlB,EAA6BG,YAA7B,CAAP;EACD;;EACD,SAAKrC,WAAL;EAAkB;EAChBa,QAAAA,cAAc,GAAG,IAAjB;EACA,eAAOqB,SAAP;EACD;EAtEH;;EAwEA,SAAOA,SAAP;EACD;;AAED,EAAO,SAASI,kBAAT,CACL7X,cADK,EAELxJ,KAFK,EAGLpC,QAHK,EAILwgB,WAJK,EAKC;EACN;EACA,MAAM5G,KAAyB,GAAIhO,cAAc,CAAC+W,WAAlD;EAEAX,EAAAA,cAAc,GAAG,KAAjB;;EAEA,EAAa;EACXE,IAAAA,wBAAwB,GAAGtI,KAAK,CAAC4I,MAAjC;EACD;;EAED,MAAIF,eAAe,GAAG1I,KAAK,CAAC0I,eAA5B;EACA,MAAIC,cAAc,GAAG3I,KAAK,CAAC2I,cAA3B,CAXM;;EAcN,MAAImB,YAAY,GAAG9J,KAAK,CAAC4I,MAAN,CAAaC,OAAhC;;EACA,MAAIiB,YAAY,KAAK,IAArB,EAA2B;EACzB9J,IAAAA,KAAK,CAAC4I,MAAN,CAAaC,OAAb,GAAuB,IAAvB,CADyB;EAIzB;;EACA,QAAMkB,iBAAiB,GAAGD,YAA1B;EACA,QAAME,kBAAkB,GAAGD,iBAAiB,CAACtC,IAA7C;EACAsC,IAAAA,iBAAiB,CAACtC,IAAlB,GAAyB,IAAzB,CAPyB;;EASzB,QAAIkB,cAAc,KAAK,IAAvB,EAA6B;EAC3BD,MAAAA,eAAe,GAAGsB,kBAAlB;EACD,KAFD,MAEO;EACLrB,MAAAA,cAAc,CAAClB,IAAf,GAAsBuC,kBAAtB;EACD;;EACDrB,IAAAA,cAAc,GAAGoB,iBAAjB,CAdyB;EAiBzB;EACA;EACA;EACA;;EACA,QAAM7jB,OAAO,GAAG8L,cAAc,CAACtM,SAA/B;;EACA,QAAIQ,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACA,UAAM+iB,YAAgC,GAAI/iB,OAAO,CAAC6iB,WAAlD;EACA,UAAMkB,qBAAqB,GAAGhB,YAAY,CAACN,cAA3C;;EACA,UAAIsB,qBAAqB,KAAKtB,cAA9B,EAA8C;EAC5C,YAAIsB,qBAAqB,KAAK,IAA9B,EAAoC;EAClChB,UAAAA,YAAY,CAACP,eAAb,GAA+BsB,kBAA/B;EACD,SAFD,MAEO;EACLC,UAAAA,qBAAqB,CAACxC,IAAtB,GAA6BuC,kBAA7B;EACD;;EACDf,QAAAA,YAAY,CAACN,cAAb,GAA8BoB,iBAA9B;EACD;EACF;EACF,GAlDK;;;EAqDN,MAAIrB,eAAe,KAAK,IAAxB,EAA8B;EAC5B;EACA,QAAIwB,QAAQ,GAAGlK,KAAK,CAACwI,SAArB,CAF4B;EAI5B;;EACA,QAAI2B,QAAQ,GAAG5S,OAAf;EAEA,QAAI6S,YAAY,GAAG,IAAnB;EACA,QAAIC,kBAAkB,GAAG,IAAzB;EACA,QAAIC,iBAAiB,GAAG,IAAxB;EAEA,QAAIjD,MAAM,GAAGqB,eAAb;;EACA,OAAG;EACD,UAAMvL,UAAU,GAAGkK,MAAM,CAACtM,IAA1B;EACA,UAAMwP,eAAe,GAAGlD,MAAM,CAAClM,SAA/B;;EACA,UAAI,CAACsB,eAAe,CAACmK,WAAD,EAAczJ,UAAd,CAApB,EAA+C;EAC7C;EACA;EACA;EACA,YAAM+L,KAAoB,GAAG;EAC3B/N,UAAAA,SAAS,EAAEoP,eADgB;EAE3BxP,UAAAA,IAAI,EAAEoC,UAFqB;EAI3Bpa,UAAAA,GAAG,EAAEskB,MAAM,CAACtkB,GAJe;EAK3BQ,UAAAA,OAAO,EAAE8jB,MAAM,CAAC9jB,OALW;EAM3Bic,UAAAA,QAAQ,EAAE6H,MAAM,CAAC7H,QANU;EAQ3BiI,UAAAA,IAAI,EAAE;EARqB,SAA7B;;EAUA,YAAI6C,iBAAiB,KAAK,IAA1B,EAAgC;EAC9BD,UAAAA,kBAAkB,GAAGC,iBAAiB,GAAGpB,KAAzC;EACAkB,UAAAA,YAAY,GAAGF,QAAf;EACD,SAHD,MAGO;EACLI,UAAAA,iBAAiB,GAAGA,iBAAiB,CAAC7C,IAAlB,GAAyByB,KAA7C;EACD,SAnB4C;;;EAqB7CiB,QAAAA,QAAQ,GAAGxN,UAAU,CAACwN,QAAD,EAAWhN,UAAX,CAArB;EACD,OAtBD,MAsBO;EACL;EAEA,YAAImN,iBAAiB,KAAK,IAA1B,EAAgC;EAC9B,cAAMpB,MAAoB,GAAG;EAC3B/N,YAAAA,SAAS,EAAEoP,eADgB;EAE3B;EACA;EACA;EACAxP,YAAAA,IAAI,EAAEvD,MALqB;EAO3BzU,YAAAA,GAAG,EAAEskB,MAAM,CAACtkB,GAPe;EAQ3BQ,YAAAA,OAAO,EAAE8jB,MAAM,CAAC9jB,OARW;EAS3Bic,YAAAA,QAAQ,EAAE6H,MAAM,CAAC7H,QATU;EAW3BiI,YAAAA,IAAI,EAAE;EAXqB,WAA7B;EAaA6C,UAAAA,iBAAiB,GAAGA,iBAAiB,CAAC7C,IAAlB,GAAyByB,MAA7C;EACD,SAlBI;;;EAqBLgB,QAAAA,QAAQ,GAAGV,kBAAkB,CAC3BxX,cAD2B,EAE3BgO,KAF2B,EAG3BqH,MAH2B,EAI3B6C,QAJ2B,EAK3B1hB,KAL2B,EAM3BpC,QAN2B,CAA7B;EAQA,YAAMoZ,QAAQ,GAAG6H,MAAM,CAAC7H,QAAxB;;EACA,YAAIA,QAAQ,KAAK,IAAjB,EAAuB;EACrBxN,UAAAA,cAAc,CAACpM,KAAf,IAAwBzB,QAAxB;EACA,cAAM2kB,OAAO,GAAG9I,KAAK,CAAC8I,OAAtB;;EACA,cAAIA,OAAO,KAAK,IAAhB,EAAsB;EACpB9I,YAAAA,KAAK,CAAC8I,OAAN,GAAgB,CAACzB,MAAD,CAAhB;EACD,WAFD,MAEO;EACLyB,YAAAA,OAAO,CAAC7f,IAAR,CAAaoe,MAAb;EACD;EACF;EACF;;EACDA,MAAAA,MAAM,GAAGA,MAAM,CAACI,IAAhB;;EACA,UAAIJ,MAAM,KAAK,IAAf,EAAqB;EACnByC,QAAAA,YAAY,GAAG9J,KAAK,CAAC4I,MAAN,CAAaC,OAA5B;;EACA,YAAIiB,YAAY,KAAK,IAArB,EAA2B;EACzB;EACD,SAFD,MAEO;EACL;EACA;EACA,cAAMC,kBAAiB,GAAGD,YAA1B,CAHK;EAKL;;EACA,cAAME,mBAAkB,GAAKD,kBAAiB,CAACtC,IAA/C;EACAsC,UAAAA,kBAAiB,CAACtC,IAAlB,GAAyB,IAAzB;EACAJ,UAAAA,MAAM,GAAG2C,mBAAT;EACAhK,UAAAA,KAAK,CAAC2I,cAAN,GAAuBoB,kBAAvB;EACA/J,UAAAA,KAAK,CAAC4I,MAAN,CAAaC,OAAb,GAAuB,IAAvB;EACD;EACF;EACF,KAnFD,QAmFS,IAnFT;;EAqFA,QAAIyB,iBAAiB,KAAK,IAA1B,EAAgC;EAC9BF,MAAAA,YAAY,GAAGF,QAAf;EACD;;EAEDlK,IAAAA,KAAK,CAACwI,SAAN,GAAoB4B,YAApB;EACApK,IAAAA,KAAK,CAAC0I,eAAN,GAAwB2B,kBAAxB;EACArK,IAAAA,KAAK,CAAC2I,cAAN,GAAuB2B,iBAAvB,CAvG4B;EA0G5B;EACA;EACA;EACA;EACA;EACA;;EACAE,IAAAA,sBAAsB,CAACL,QAAD,CAAtB;EACAnY,IAAAA,cAAc,CAAC6G,KAAf,GAAuBsR,QAAvB;EACAnY,IAAAA,cAAc,CAACyW,aAAf,GAA+ByB,QAA/B;EACD;;EAED,EAAa;EACX5B,IAAAA,wBAAwB,GAAG,IAA3B;EACD;EACF;;EAED,SAASmC,YAAT,CAAsBjL,QAAtB,EAAgCvc,OAAhC,EAAyC;EAAA,QAErC,OAAOuc,QAAP,KAAoB,UAFiB;EAAA;EAAA,oGAKrCA,QALqC;EAAA;EAAA;;EAOvCA,EAAAA,QAAQ,CAAClhB,IAAT,CAAc2E,OAAd;EACD;;AAED,EAAO,SAASynB,mCAAT,GAA+C;EACpDtC,EAAAA,cAAc,GAAG,KAAjB;EACD;AAED,EAAO,SAASuC,kCAAT,GAAuD;EAC5D,SAAOvC,cAAP;EACD;AAED,EAAO,SAASwC,iBAAT,CACLC,YADK,EAELC,aAFK,EAGL1kB,QAHK,EAIC;EACN;EACA,MAAM0iB,OAAO,GAAGgC,aAAa,CAAChC,OAA9B;EACAgC,EAAAA,aAAa,CAAChC,OAAd,GAAwB,IAAxB;;EACA,MAAIA,OAAO,KAAK,IAAhB,EAAsB;EACpB,SAAK,IAAI7L,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6L,OAAO,CAACvZ,MAA5B,EAAoC0N,CAAC,EAArC,EAAyC;EACvC,UAAM8N,MAAM,GAAGjC,OAAO,CAAC7L,CAAD,CAAtB;EACA,UAAMuC,QAAQ,GAAGuL,MAAM,CAACvL,QAAxB;;EACA,UAAIA,QAAQ,KAAK,IAAjB,EAAuB;EACrBuL,QAAAA,MAAM,CAACvL,QAAP,GAAkB,IAAlB;EACAiL,QAAAA,YAAY,CAACjL,QAAD,EAAWpZ,QAAX,CAAZ;EACD;EACF;EACF;EACF;;EC/hBD,IAAM4kB,oBAAoB,GAAG,EAA7B;EACA,IAAMpiB,OAAO,GAAGD,KAAK,CAACC,OAAtB;EAGA;;AACA,EAAO,IAAMqiB,eAAe,GAAG,IAAI7tB,eAAJ,GAAsB8tB,IAA9C;EAEP,IAAIC,uCAAJ;EACA,IAAIC,8BAAJ;EACA,IAAIC,mDAAJ;EACA,IAAIC,2CAAJ;EACA,IAAIC,iCAAJ;EACA,IAAIC,2BAAJ;EACA,IAAIC,qBAAJ;EACA,IAAIC,yCAAJ;EACA,IAAIC,sCAAJ;EACA,IAAIC,iCAAJ;;AAEA,EAAa;EACXT,EAAAA,uCAAuC,GAAG,IAAI5H,GAAJ,EAA1C;EACA6H,EAAAA,8BAA8B,GAAG,IAAI7H,GAAJ,EAAjC;EACA8H,EAAAA,mDAAmD,GAAG,IAAI9H,GAAJ,EAAtD;EACA+H,EAAAA,2CAA2C,GAAG,IAAI/H,GAAJ,EAA9C;EACAmI,EAAAA,yCAAyC,GAAG,IAAInI,GAAJ,EAA5C;EACAgI,EAAAA,iCAAiC,GAAG,IAAIhI,GAAJ,EAApC;EACAoI,EAAAA,sCAAsC,GAAG,IAAIpI,GAAJ,EAAzC;EACAqI,EAAAA,iCAAiC,GAAG,IAAIrI,GAAJ,EAApC;EAEA,MAAMsI,wBAAwB,GAAG,IAAItI,GAAJ,EAAjC;;EAEAkI,EAAAA,qBAAqB,GAAG,UAASjM,QAAT,EAA0BsM,UAA1B,EAA8C;EACpE,QAAItM,QAAQ,KAAK,IAAb,IAAqB,OAAOA,QAAP,KAAoB,UAA7C,EAAyD;EACvD;EACD;;EACD,QAAMpf,GAAG,GAAG0rB,UAAU,GAAG,GAAb,GAAoBtM,QAAhC;;EACA,QAAI,CAACqM,wBAAwB,CAAChb,GAAzB,CAA6BzQ,GAA7B,CAAL,EAAwC;EACtCyrB,MAAAA,wBAAwB,CAAC7H,GAAzB,CAA6B5jB,GAA7B;;EACA,YACE,qEACE,iCAFJ,EAGE0rB,UAHF,EAIEtM,QAJF;EAMD;EACF,GAdD;;EAgBAgM,EAAAA,2BAA2B,GAAG,UAAS3oB,IAAT,EAAe+mB,YAAf,EAA6B;EACzD,QAAIA,YAAY,KAAK7b,SAArB,EAAgC;EAC9B,UAAM6C,aAAa,GAAG9N,gBAAgB,CAACD,IAAD,CAAhB,IAA0B,WAAhD;;EACA,UAAI,CAAC0oB,iCAAiC,CAAC1a,GAAlC,CAAsCD,aAAtC,CAAL,EAA2D;EACzD2a,QAAAA,iCAAiC,CAACvH,GAAlC,CAAsCpT,aAAtC;;EACA,cACE,qFACE,8BAFJ,EAGEA,aAHF;EAKD;EACF;EACF,GAZD,CA5BW;EA2CX;EACA;EACA;EACA;;;EACA3I,EAAAA,MAAM,CAAC+G,cAAP,CAAsBgc,oBAAtB,EAA4C,sBAA5C,EAAoE;EAClE1d,IAAAA,UAAU,EAAE,KADsD;EAElE/M,IAAAA,KAAK,EAAE,YAAW;EAAA;EAAA;EAAA;EAAA;EAAA;EAUjB;EAZiE,GAApE;EAcA0H,EAAAA,MAAM,CAACC,MAAP,CAAc8iB,oBAAd;EACD;;AAED,EAAO,SAASe,0BAAT,CACL/Z,cADK,EAELpC,IAFK,EAGLoc,wBAHK,EAILtC,SAJK,EAKL;EACA,MAAMD,SAAS,GAAGzX,cAAc,CAACyW,aAAjC;;EAiBA,MAAMmB,YAAY,GAAGoC,wBAAwB,CAACtC,SAAD,EAAYD,SAAZ,CAA7C;;EAEA,EAAa;EACX+B,IAAAA,2BAA2B,CAAC5b,IAAD,EAAOga,YAAP,CAA3B;EACD,GAtBD;;;EAwBA,MAAMnB,aAAa,GACjBmB,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK7b,SAA1C,GACI0b,SADJ,GAEI,QAAc,EAAd,EAAkBA,SAAlB,EAA6BG,YAA7B,CAHN;EAIA5X,EAAAA,cAAc,CAACyW,aAAf,GAA+BA,aAA/B,CA5BA;EA+BA;;EACA,MAAIzW,cAAc,CAAC6G,KAAf,KAAyBtB,OAA7B,EAAsC;EACpC;EACA,QAAMwR,WAA6B,GAAI/W,cAAc,CAAC+W,WAAtD;EACAA,IAAAA,WAAW,CAACP,SAAZ,GAAwBC,aAAxB;EACD;EACF;EAED,IAAMwD,qBAAqB,GAAG;EAC5BlmB,EAAAA,SAAS,EAATA,SAD4B;EAE5BmmB,EAAAA,eAF4B,YAEZ9jB,IAFY,EAEN7E,OAFM,EAEGic,QAFH,EAEa;EACvC,QAAMja,KAAK,GAAGgB,GAAW,CAAC6B,IAAD,CAAzB;EACA,QAAM+S,SAAS,GAAGgR,gBAAgB,EAAlC;EACA,QAAMpR,IAAI,GAAGqR,iBAAiB,CAAC7mB,KAAD,CAA9B;EAEA,QAAM8hB,MAAM,GAAGC,YAAY,CAACnM,SAAD,EAAYJ,IAAZ,CAA3B;EACAsM,IAAAA,MAAM,CAAC9jB,OAAP,GAAiBA,OAAjB;;EACA,QAAIic,QAAQ,KAAKzR,SAAb,IAA0ByR,QAAQ,KAAK,IAA3C,EAAiD;EAC/C,MAAa;EACXiM,QAAAA,qBAAqB,CAACjM,QAAD,EAAW,UAAX,CAArB;EACD;;EACD6H,MAAAA,MAAM,CAAC7H,QAAP,GAAkBA,QAAlB;EACD;;EAEDgI,IAAAA,aAAa,CAACjiB,KAAD,EAAQ8hB,MAAR,CAAb;EACAgF,IAAAA,qBAAqB,CAAC9mB,KAAD,EAAQwV,IAAR,EAAcI,SAAd,CAArB;EAcD,GA/B2B;EAgC5BmR,EAAAA,mBAhC4B,YAgCRlkB,IAhCQ,EAgCF7E,OAhCE,EAgCOic,QAhCP,EAgCiB;EAC3C,QAAMja,KAAK,GAAGgB,GAAW,CAAC6B,IAAD,CAAzB;EACA,QAAM+S,SAAS,GAAGgR,gBAAgB,EAAlC;EACA,QAAMpR,IAAI,GAAGqR,iBAAiB,CAAC7mB,KAAD,CAA9B;EAEA,QAAM8hB,MAAM,GAAGC,YAAY,CAACnM,SAAD,EAAYJ,IAAZ,CAA3B;EACAsM,IAAAA,MAAM,CAACtkB,GAAP,GAAamlB,YAAb;EACAb,IAAAA,MAAM,CAAC9jB,OAAP,GAAiBA,OAAjB;;EAEA,QAAIic,QAAQ,KAAKzR,SAAb,IAA0ByR,QAAQ,KAAK,IAA3C,EAAiD;EAC/C,MAAa;EACXiM,QAAAA,qBAAqB,CAACjM,QAAD,EAAW,cAAX,CAArB;EACD;;EACD6H,MAAAA,MAAM,CAAC7H,QAAP,GAAkBA,QAAlB;EACD;;EAEDgI,IAAAA,aAAa,CAACjiB,KAAD,EAAQ8hB,MAAR,CAAb;EACAgF,IAAAA,qBAAqB,CAAC9mB,KAAD,EAAQwV,IAAR,EAAcI,SAAd,CAArB;EAcD,GA/D2B;EAgE5BoR,EAAAA,kBAhE4B,YAgETnkB,IAhES,EAgEHoX,QAhEG,EAgEO;EACjC,QAAMja,KAAK,GAAGgB,GAAW,CAAC6B,IAAD,CAAzB;EACA,QAAM+S,SAAS,GAAGgR,gBAAgB,EAAlC;EACA,QAAMpR,IAAI,GAAGqR,iBAAiB,CAAC7mB,KAAD,CAA9B;EAEA,QAAM8hB,MAAM,GAAGC,YAAY,CAACnM,SAAD,EAAYJ,IAAZ,CAA3B;EACAsM,IAAAA,MAAM,CAACtkB,GAAP,GAAawkB,WAAb;;EAEA,QAAI/H,QAAQ,KAAKzR,SAAb,IAA0ByR,QAAQ,KAAK,IAA3C,EAAiD;EAC/C,MAAa;EACXiM,QAAAA,qBAAqB,CAACjM,QAAD,EAAW,aAAX,CAArB;EACD;;EACD6H,MAAAA,MAAM,CAAC7H,QAAP,GAAkBA,QAAlB;EACD;;EAEDgI,IAAAA,aAAa,CAACjiB,KAAD,EAAQ8hB,MAAR,CAAb;EACAgF,IAAAA,qBAAqB,CAAC9mB,KAAD,EAAQwV,IAAR,EAAcI,SAAd,CAArB;EAcD;EA9F2B,CAA9B;;EAiGA,SAASqR,0BAAT,CACExa,cADF,EAEEpC,IAFF,EAGEvF,QAHF,EAIEC,QAJF,EAKEmiB,QALF,EAMEvC,QANF,EAOEwC,WAPF,EAQE;EACA,MAAMtmB,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC;;EACA,MAAI,OAAOD,QAAQ,CAACumB,qBAAhB,KAA0C,UAA9C,EAA0D;AACxD;EAcA,QAAMC,YAAY,GAAGxmB,QAAQ,CAACumB,qBAAT,CACnBriB,QADmB,EAEnB4f,QAFmB,EAGnBwC,WAHmB,CAArB;;EAMA,IAAa;EACX,UAAIE,YAAY,KAAK7e,SAArB,EAAgC;EAC9B,cACE,iEACE,mDAFJ,EAGEjL,gBAAgB,CAAC8M,IAAD,CAAhB,IAA0B,WAH5B;EAKD;EACF;;EAED,WAAOgd,YAAP;EACD;;EAED,MAAIhd,IAAI,CAACxR,SAAL,IAAkBwR,IAAI,CAACxR,SAAL,CAAeyuB,oBAArC,EAA2D;EACzD,WACE,CAAC9L,YAAY,CAAC1W,QAAD,EAAWC,QAAX,CAAb,IAAqC,CAACyW,YAAY,CAAC0L,QAAD,EAAWvC,QAAX,CADpD;EAGD;;EAED,SAAO,IAAP;EACD;;EAED,SAAS4C,kBAAT,CAA4B9a,cAA5B,EAAmDpC,IAAnD,EAA8DtF,QAA9D,EAA6E;EAC3E,MAAMlE,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC;;EACA,EAAa;EACX,QAAM1D,IAAI,GAAGG,gBAAgB,CAAC8M,IAAD,CAAhB,IAA0B,WAAvC;EACA,QAAMmd,aAAa,GAAG3mB,QAAQ,CAAChD,MAA/B;;EAEA,QAAI,CAAC2pB,aAAL,EAAoB;EAClB,UAAInd,IAAI,CAACxR,SAAL,IAAkB,OAAOwR,IAAI,CAACxR,SAAL,CAAegF,MAAtB,KAAiC,UAAvD,EAAmE;EACjE,cACE,iEACE,uEAFJ,EAGET,IAHF;EAKD,OAND,MAMO;EACL,cACE,iEACE,sDAFJ,EAGEA,IAHF;EAKD;EACF;;EAED,QACEyD,QAAQ,CAAC4mB,eAAT,IACA,CAAC5mB,QAAQ,CAAC4mB,eAAT,CAAyBC,oBAD1B,IAEA,CAAC7mB,QAAQ,CAAC8mB,KAHZ,EAIE;EACA,YACE,kEACE,sEADF,GAEE,kDAHJ,EAIEvqB,IAJF;EAMD;;EACD,QACEyD,QAAQ,CAAC+mB,eAAT,IACA,CAAC/mB,QAAQ,CAAC+mB,eAAT,CAAyBF,oBAF5B,EAGE;EACA,YACE,kEACE,sEADF,GAEE,uDAHJ,EAIEtqB,IAJF;EAMD;;EACD,QAAIyD,QAAQ,CAACgnB,SAAb,EAAwB;EACtB,YACE,uEACE,uCAFJ,EAGEzqB,IAHF;EAKD;;EACD,QAAIyD,QAAQ,CAACinB,WAAb,EAA0B;EACxB,YACE,yEACE,yCAFJ,EAGE1qB,IAHF;EAKD;;EAED,IAeO;EACL,UAAIyD,QAAQ,CAACqM,YAAb,EAA2B;EACzB,cACE,0EACE,0CAFJ,EAGE9P,IAHF;EAKD;;EAED,UACEiN,IAAI,CAACyd,WAAL,IACAzd,IAAI,CAAC6C,YADL,IAEA,CAACkZ,sCAAsC,CAAC9a,GAAvC,CAA2CjB,IAA3C,CAHH,EAIE;EACA+b,QAAAA,sCAAsC,CAAC3H,GAAvC,CAA2CpU,IAA3C;;EACA,cACE,sEACE,mDAFJ,EAGEjN,IAHF;EAKD;EACF;;EAED,QAAI,OAAOyD,QAAQ,CAACknB,qBAAhB,KAA0C,UAA9C,EAA0D;EACxD,YACE,4BACE,iEADF,GAEE,4DAFF,GAGE,6BAJJ,EAKE3qB,IALF;EAOD;;EACD,QACEiN,IAAI,CAACxR,SAAL,IACAwR,IAAI,CAACxR,SAAL,CAAeyuB,oBADf,IAEA,OAAOzmB,QAAQ,CAACumB,qBAAhB,KAA0C,WAH5C,EAIE;EACA,YACE,qDACE,+EADF,GAEE,iEAHJ,EAIE7pB,gBAAgB,CAAC8M,IAAD,CAAhB,IAA0B,kBAJ5B;EAMD;;EACD,QAAI,OAAOxJ,QAAQ,CAACmnB,mBAAhB,KAAwC,UAA5C,EAAwD;EACtD,YACE,4BACE,gEADF,GAEE,sCAHJ,EAIE5qB,IAJF;EAMD;;EACD,QAAI,OAAOyD,QAAQ,CAAConB,wBAAhB,KAA6C,UAAjD,EAA6D;EAC3D,YACE,4BACE,qEADF,GAEE,kEAFF,GAGE,iEAHF,GAIE,yFALJ,EAME7qB,IANF;EAQD;;EACD,QAAI,OAAOyD,QAAQ,CAACqnB,yBAAhB,KAA8C,UAAlD,EAA8D;EAC5D,YACE,4BACE,wEAFJ,EAGE9qB,IAHF;EAKD;;EACD,QAAI,OAAOyD,QAAQ,CAACsnB,gCAAhB,KAAqD,UAAzD,EAAqE;EACnE,YACE,4BACE,sFAFJ,EAGE/qB,IAHF;EAKD;;EACD,QAAMgrB,eAAe,GAAGvnB,QAAQ,CAACoC,KAAT,KAAmB8B,QAA3C;;EACA,QAAIlE,QAAQ,CAACoC,KAAT,KAAmBuF,SAAnB,IAAgC4f,eAApC,EAAqD;EACnD,YACE,8DACE,iEAFJ,EAGEhrB,IAHF,EAIEA,IAJF;EAMD;;EACD,QAAIyD,QAAQ,CAAC+e,YAAb,EAA2B;EACzB,YACE,6FACE,2DAFJ,EAGExiB,IAHF,EAIEA,IAJF;EAMD;;EAED,QACE,OAAOyD,QAAQ,CAACwnB,uBAAhB,KAA4C,UAA5C,IACA,OAAOxnB,QAAQ,CAACynB,kBAAhB,KAAuC,UADvC,IAEA,CAACxC,mDAAmD,CAACxa,GAApD,CAAwDjB,IAAxD,CAHH,EAIE;EACAyb,MAAAA,mDAAmD,CAACrH,GAApD,CAAwDpU,IAAxD;;EACA,YACE,6EACE,wDAFJ,EAGE9M,gBAAgB,CAAC8M,IAAD,CAHlB;EAKD;;EAED,QAAI,OAAOxJ,QAAQ,CAAC4lB,wBAAhB,KAA6C,UAAjD,EAA6D;EAC3D,YACE,qEACE,8DAFJ,EAGErpB,IAHF;EAKD;;EACD,QAAI,OAAOyD,QAAQ,CAAC0nB,wBAAhB,KAA6C,UAAjD,EAA6D;EAC3D,YACE,qEACE,8DAFJ,EAGEnrB,IAHF;EAKD;;EACD,QAAI,OAAOiN,IAAI,CAACge,uBAAZ,KAAwC,UAA5C,EAAwD;EACtD,YACE,iEACE,iEAFJ,EAGEjrB,IAHF;EAKD;;EACD,QAAMuqB,MAAK,GAAG9mB,QAAQ,CAAC8mB,KAAvB;;EACA,QAAIA,MAAK,KAAK,OAAOA,MAAP,KAAiB,QAAjB,IAA6BtkB,OAAO,CAACskB,MAAD,CAAzC,CAAT,EAA4D;EAC1D,YAAc,4CAAd,EAA4DvqB,IAA5D;EACD;;EACD,QACE,OAAOyD,QAAQ,CAAC8M,eAAhB,KAAoC,UAApC,IACA,OAAOtD,IAAI,CAAC+C,iBAAZ,KAAkC,QAFpC,EAGE;EACA,YACE,yEACE,wBAFJ,EAGEhQ,IAHF;EAKD;EACF;EACF;;EAED,SAASorB,kBAAT,CAA4B/b,cAA5B,EAAmD5L,QAAnD,EAAwE;EACtEA,EAAAA,QAAQ,CAAC4nB,OAAT,GAAmB/B,qBAAnB;EACAja,EAAAA,cAAc,CAAC3L,SAAf,GAA2BD,QAA3B,CAFsE;;EAItE6nB,EAAAA,GAAW,CAAC7nB,QAAD,EAAW4L,cAAX,CAAX;;EACA,EAAa;EACX5L,IAAAA,QAAQ,CAAC8nB,sBAAT,GAAkClD,oBAAlC;EACD;EACF;;EAED,SAASmD,sBAAT,CACEnc,cADF,EAEEpC,IAFF,EAGEpH,KAHF,EAIO;EACL,MAAI4lB,uBAAuB,GAAG,KAA9B;EACA,MAAIhc,eAAe,GAAGT,kBAAtB;EACA,MAAI1O,OAAO,GAAG0O,kBAAd;EACA,MAAM0b,WAAW,GAAGzd,IAAI,CAACyd,WAAzB;;EAEA,EAAa;EACX,QAAI,iBAAiBzd,IAArB,EAA2B;EACzB,UAAMye,OAAO;EAEXhB,MAAAA,WAAW,KAAK,IAAhB,IACCA,WAAW,KAAKtf,SAAhB,IACCsf,WAAW,CAACrqB,QAAZ,KAAyBlC,kBAD1B,IAECusB,WAAW,CAAClqB,QAAZ,KAAyB4K,SAL7B,CADyB;;EAQzB,UAAI,CAACsgB,OAAD,IAAY,CAACzC,iCAAiC,CAAC/a,GAAlC,CAAsCjB,IAAtC,CAAjB,EAA8D;EAC5Dgc,QAAAA,iCAAiC,CAAC5H,GAAlC,CAAsCpU,IAAtC;EAEA,YAAI0e,QAAQ,GAAG,EAAf;;EACA,YAAIjB,WAAW,KAAKtf,SAApB,EAA+B;EAC7BugB,UAAAA,QAAQ,GACN,uCACA,0EADA,GAEA,wDAFA,GAGA,yDAJF;EAKD,SAND,MAMO,IAAI,OAAOjB,WAAP,KAAuB,QAA3B,EAAqC;EAC1CiB,UAAAA,QAAQ,GAAG,8BAA8B,OAAOjB,WAArC,GAAmD,GAA9D;EACD,SAFM,MAEA,IAAIA,WAAW,CAACrqB,QAAZ,KAAyBnC,mBAA7B,EAAkD;EACvDytB,UAAAA,QAAQ,GAAG,0DAAX;EACD,SAFM,MAEA,IAAIjB,WAAW,CAAClqB,QAAZ,KAAyB4K,SAA7B,EAAwC;EAC7C;EACAugB,UAAAA,QAAQ,GAAG,0DAAX;EACD,SAHM,MAGA;EACLA,UAAAA,QAAQ,GACN,iDACArmB,MAAM,CAACkZ,IAAP,CAAYkM,WAAZ,EAAyBtK,IAAzB,CAA8B,IAA9B,CADA,GAEA,IAHF;EAID;;EACD,cACE,wCACE,qFAFJ,EAGEjgB,gBAAgB,CAAC8M,IAAD,CAAhB,IAA0B,WAH5B,EAIE0e,QAJF;EAMD;EACF;EACF;;EAED,MAAI,OAAOjB,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;EAC3DpqB,IAAAA,OAAO,GAAG2kB,WAAW,CAAEyF,WAAF,CAArB;EACD,GAFD,MAEO,AAA2B;EAChCjb,IAAAA,eAAe,GAAGL,kBAAkB,CAACC,cAAD,EAAiBpC,IAAjB,EAAuB,IAAvB,CAApC;EACA,QAAM6C,YAAY,GAAG7C,IAAI,CAAC6C,YAA1B;EACA2b,IAAAA,uBAAuB,GACrB3b,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK1E,SAD5C;EAEA9K,IAAAA,OAAO,GAAGmrB,uBAAuB,GAC7B5b,gBAAgB,CAACR,cAAD,EAAiBI,eAAjB,CADa,GAE7BT,kBAFJ;EAGD,GA1DI;;EA2EL,MAAMvL,QAAQ,GAAG,IAAIwJ,IAAJ,CAASpH,KAAT,EAAgBvF,OAAhB,CAAjB;EACA,MAAMiqB,KAAK,GAAIlb,cAAc,CAACyW,aAAf,GACbriB,QAAQ,CAAC8mB,KAAT,KAAmB,IAAnB,IAA2B9mB,QAAQ,CAAC8mB,KAAT,KAAmBnf,SAA9C,GACI3H,QAAQ,CAAC8mB,KADb,GAEI,IAHN;EAIAa,EAAAA,kBAAkB,CAAC/b,cAAD,EAAiB5L,QAAjB,CAAlB;;EAEA,EAAa;EACX,QAAI,OAAOwJ,IAAI,CAACoc,wBAAZ,KAAyC,UAAzC,IAAuDkB,KAAK,KAAK,IAArE,EAA2E;EACzE,UAAMtc,aAAa,GAAG9N,gBAAgB,CAAC8M,IAAD,CAAhB,IAA0B,WAAhD;;EACA,UAAI,CAACwb,8BAA8B,CAACva,GAA/B,CAAmCD,aAAnC,CAAL,EAAwD;EACtDwa,QAAAA,8BAA8B,CAACpH,GAA/B,CAAmCpT,aAAnC;;EACA,cACE,mEACE,oEADF,GAEE,kEAFF,GAGE,iFAJJ,EAKEA,aALF,EAMExK,QAAQ,CAAC8mB,KAAT,KAAmB,IAAnB,GAA0B,MAA1B,GAAmC,WANrC,EAOEtc,aAPF;EASD;EACF,KAfU;EAkBX;EACA;;;EACA,QACE,OAAOhB,IAAI,CAACoc,wBAAZ,KAAyC,UAAzC,IACA,OAAO5lB,QAAQ,CAACwnB,uBAAhB,KAA4C,UAF9C,EAGE;EACA,UAAIW,kBAAkB,GAAG,IAAzB;EACA,UAAIC,yBAAyB,GAAG,IAAhC;EACA,UAAIC,mBAAmB,GAAG,IAA1B;;EACA,UACE,OAAOroB,QAAQ,CAACod,kBAAhB,KAAuC,UAAvC,IACApd,QAAQ,CAACod,kBAAT,CAA4BC,4BAA5B,KAA6D,IAF/D,EAGE;EACA8K,QAAAA,kBAAkB,GAAG,oBAArB;EACD,OALD,MAKO,IAAI,OAAOnoB,QAAQ,CAACsd,yBAAhB,KAA8C,UAAlD,EAA8D;EACnE6K,QAAAA,kBAAkB,GAAG,2BAArB;EACD;;EACD,UACE,OAAOnoB,QAAQ,CAACud,yBAAhB,KAA8C,UAA9C,IACAvd,QAAQ,CAACud,yBAAT,CAAmCF,4BAAnC,KAAoE,IAFtE,EAGE;EACA+K,QAAAA,yBAAyB,GAAG,2BAA5B;EACD,OALD,MAKO,IACL,OAAOpoB,QAAQ,CAACwd,gCAAhB,KAAqD,UADhD,EAEL;EACA4K,QAAAA,yBAAyB,GAAG,kCAA5B;EACD;;EACD,UACE,OAAOpoB,QAAQ,CAACyd,mBAAhB,KAAwC,UAAxC,IACAzd,QAAQ,CAACyd,mBAAT,CAA6BJ,4BAA7B,KAA8D,IAFhE,EAGE;EACAgL,QAAAA,mBAAmB,GAAG,qBAAtB;EACD,OALD,MAKO,IAAI,OAAOroB,QAAQ,CAAC0d,0BAAhB,KAA+C,UAAnD,EAA+D;EACpE2K,QAAAA,mBAAmB,GAAG,4BAAtB;EACD;;EACD,UACEF,kBAAkB,KAAK,IAAvB,IACAC,yBAAyB,KAAK,IAD9B,IAEAC,mBAAmB,KAAK,IAH1B,EAIE;EACA,YAAM7d,cAAa,GAAG9N,gBAAgB,CAAC8M,IAAD,CAAhB,IAA0B,WAAhD;;EACA,YAAM8e,UAAU,GACd,OAAO9e,IAAI,CAACoc,wBAAZ,KAAyC,UAAzC,GACI,4BADJ,GAEI,2BAHN;;EAIA,YAAI,CAACV,2CAA2C,CAACza,GAA5C,CAAgDD,cAAhD,CAAL,EAAqE;EACnE0a,UAAAA,2CAA2C,CAACtH,GAA5C,CAAgDpT,cAAhD;;EACA,gBACE,6FACE,yEADF,GAEE,+EAFF,GAGE,sDAJJ,EAKEA,cALF,EAME8d,UANF,EAOEH,kBAAkB,KAAK,IAAvB,YAAqCA,kBAArC,GAA4D,EAP9D,EAQEC,yBAAyB,KAAK,IAA9B,YACWA,yBADX,GAEI,EAVN,EAWEC,mBAAmB,KAAK,IAAxB,YAAsCA,mBAAtC,GAA8D,EAXhE;EAaD;EACF;EACF;EACF,GAnKI;EAsKL;;;EACA,MAAIL,uBAAJ,EAA6B;EAC3Bjc,IAAAA,YAAY,CAACH,cAAD,EAAiBI,eAAjB,EAAkCnP,OAAlC,CAAZ;EACD;;EAED,SAAOmD,QAAP;EACD;;EAED,SAASuoB,sBAAT,CAAgC3c,cAAhC,EAAgD5L,QAAhD,EAA0D;EACxD,MAAMqmB,QAAQ,GAAGrmB,QAAQ,CAAC8mB,KAA1B;;EAEA,MAAI,OAAO9mB,QAAQ,CAACod,kBAAhB,KAAuC,UAA3C,EAAuD;EACrDpd,IAAAA,QAAQ,CAACod,kBAAT;EACD;;EACD,MAAI,OAAOpd,QAAQ,CAACsd,yBAAhB,KAA8C,UAAlD,EAA8D;EAC5Dtd,IAAAA,QAAQ,CAACsd,yBAAT;EACD;;EAED,MAAI+I,QAAQ,KAAKrmB,QAAQ,CAAC8mB,KAA1B,EAAiC;EAC/B,IAAa;EACX,YACE,kEACE,0CADF,GAEE,qCAHJ,EAIEpqB,gBAAgB,CAACkP,cAAc,CAACnP,IAAhB,CAAhB,IAAyC,WAJ3C;EAMD;;EACDopB,IAAAA,qBAAqB,CAACK,mBAAtB,CAA0ClmB,QAA1C,EAAoDA,QAAQ,CAAC8mB,KAA7D,EAAoE,IAApE;EACD;EACF;;EAED,SAAS0B,6BAAT,CACE5c,cADF,EAEE5L,QAFF,EAGEkE,QAHF,EAIEoiB,WAJF,EAKE;EACA,MAAMD,QAAQ,GAAGrmB,QAAQ,CAAC8mB,KAA1B;;EACA,MAAI,OAAO9mB,QAAQ,CAACud,yBAAhB,KAA8C,UAAlD,EAA8D;EAC5Dvd,IAAAA,QAAQ,CAACud,yBAAT,CAAmCrZ,QAAnC,EAA6CoiB,WAA7C;EACD;;EACD,MAAI,OAAOtmB,QAAQ,CAACwd,gCAAhB,KAAqD,UAAzD,EAAqE;EACnExd,IAAAA,QAAQ,CAACwd,gCAAT,CAA0CtZ,QAA1C,EAAoDoiB,WAApD;EACD;;EAED,MAAItmB,QAAQ,CAAC8mB,KAAT,KAAmBT,QAAvB,EAAiC;EAC/B,IAAa;EACX,UAAM7b,aAAa,GACjB9N,gBAAgB,CAACkP,cAAc,CAACnP,IAAhB,CAAhB,IAAyC,WAD3C;;EAEA,UAAI,CAACsoB,uCAAuC,CAACta,GAAxC,CAA4CD,aAA5C,CAAL,EAAiE;EAC/Dua,QAAAA,uCAAuC,CAACnH,GAAxC,CAA4CpT,aAA5C;;EACA,cACE,2DACE,wDADF,GAEE,qCAHJ,EAIEA,aAJF;EAMD;EACF;;EACDqb,IAAAA,qBAAqB,CAACK,mBAAtB,CAA0ClmB,QAA1C,EAAoDA,QAAQ,CAAC8mB,KAA7D,EAAoE,IAApE;EACD;EACF;;;EAGD,SAAS2B,kBAAT,CACE7c,cADF,EAEEpC,IAFF,EAGEtF,QAHF,EAIEsc,WAJF,EAKQ;EACN,EAAa;EACXkG,IAAAA,kBAAkB,CAAC9a,cAAD,EAAiBpC,IAAjB,EAAuBtF,QAAvB,CAAlB;EACD;;EAED,MAAMlE,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC;EACAD,EAAAA,QAAQ,CAACoC,KAAT,GAAiB8B,QAAjB;EACAlE,EAAAA,QAAQ,CAAC8mB,KAAT,GAAiBlb,cAAc,CAACyW,aAAhC;EACAriB,EAAAA,QAAQ,CAAC8kB,IAAT,GAAgBD,eAAhB;EAEA1C,EAAAA,qBAAqB,CAACvW,cAAD,CAArB;EAEA,MAAMqb,WAAW,GAAGzd,IAAI,CAACyd,WAAzB;;EACA,MAAI,OAAOA,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;EAC3DjnB,IAAAA,QAAQ,CAACnD,OAAT,GAAmB2kB,WAAW,CAACyF,WAAD,CAA9B;EACD,GAFD,MAEO,AAEA;EACL,QAAMjb,eAAe,GAAGL,kBAAkB,CAACC,cAAD,EAAiBpC,IAAjB,EAAuB,IAAvB,CAA1C;EACAxJ,IAAAA,QAAQ,CAACnD,OAAT,GAAmBuP,gBAAgB,CAACR,cAAD,EAAiBI,eAAjB,CAAnC;EACD;;EAED,EAAa;EACX,QAAIhM,QAAQ,CAAC8mB,KAAT,KAAmB5iB,QAAvB,EAAiC;EAC/B,UAAMsG,aAAa,GAAG9N,gBAAgB,CAAC8M,IAAD,CAAhB,IAA0B,WAAhD;;EACA,UAAI,CAAC8b,yCAAyC,CAAC7a,GAA1C,CAA8CD,aAA9C,CAAL,EAAmE;EACjE8a,QAAAA,yCAAyC,CAAC1H,GAA1C,CAA8CpT,aAA9C;;EACA,cACE,iEACE,wDADF,GAEE,oDAHJ,EAIEA,aAJF;EAMD;EACF;;EAED,QAAIoB,cAAc,CAAC0Q,IAAf,GAAsBvC,UAA1B,EAAsC;EACpC+B,MAAAA,uBAAuB,CAACG,0BAAxB,CACErQ,cADF,EAEE5L,QAFF;EAID;;EAED,IAAmC;EACjC8b,MAAAA,uBAAuB,CAACC,6BAAxB,CACEnQ,cADF,EAEE5L,QAFF;EAID;EACF;;EAEDyjB,EAAAA,kBAAkB,CAAC7X,cAAD,EAAiB1H,QAAjB,EAA2BlE,QAA3B,EAAqCwgB,WAArC,CAAlB;EACAxgB,EAAAA,QAAQ,CAAC8mB,KAAT,GAAiBlb,cAAc,CAACyW,aAAhC;EAEA,MAAMuD,wBAAwB,GAAGpc,IAAI,CAACoc,wBAAtC;;EACA,MAAI,OAAOA,wBAAP,KAAoC,UAAxC,EAAoD;EAClDD,IAAAA,0BAA0B,CACxB/Z,cADwB,EAExBpC,IAFwB,EAGxBoc,wBAHwB,EAIxB1hB,QAJwB,CAA1B;EAMAlE,IAAAA,QAAQ,CAAC8mB,KAAT,GAAiBlb,cAAc,CAACyW,aAAhC;EACD,GA/DK;EAkEN;;;EACA,MACE,OAAO7Y,IAAI,CAACoc,wBAAZ,KAAyC,UAAzC,IACA,OAAO5lB,QAAQ,CAACwnB,uBAAhB,KAA4C,UAD5C,KAEC,OAAOxnB,QAAQ,CAACsd,yBAAhB,KAA8C,UAA9C,IACC,OAAOtd,QAAQ,CAACod,kBAAhB,KAAuC,UAHzC,CADF,EAKE;EACAmL,IAAAA,sBAAsB,CAAC3c,cAAD,EAAiB5L,QAAjB,CAAtB,CADA;EAGA;;EACAyjB,IAAAA,kBAAkB,CAAC7X,cAAD,EAAiB1H,QAAjB,EAA2BlE,QAA3B,EAAqCwgB,WAArC,CAAlB;EACAxgB,IAAAA,QAAQ,CAAC8mB,KAAT,GAAiBlb,cAAc,CAACyW,aAAhC;EACD;;EAED,MAAI,OAAOriB,QAAQ,CAAC0oB,iBAAhB,KAAsC,UAA1C,EAAsD;EACpD9c,IAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD;EACF;;EAED,SAASgrB,wBAAT,CACE/c,cADF,EAEEpC,IAFF,EAGEtF,QAHF,EAIEsc,WAJF,EAKW;EACT,MAAMxgB,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC;EAEA,MAAMgE,QAAQ,GAAG2H,cAAc,CAACgd,aAAhC;EACA5oB,EAAAA,QAAQ,CAACoC,KAAT,GAAiB6B,QAAjB;EAEA,MAAM4kB,UAAU,GAAG7oB,QAAQ,CAACnD,OAA5B;EACA,MAAMoqB,WAAW,GAAGzd,IAAI,CAACyd,WAAzB;EACA,MAAIX,WAAW,GAAG/a,kBAAlB;;EACA,MAAI,OAAO0b,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;EAC3DX,IAAAA,WAAW,GAAG9E,WAAW,CAACyF,WAAD,CAAzB;EACD,GAFD,MAEO,AAA2B;EAChC,QAAM6B,yBAAyB,GAAGnd,kBAAkB,CAClDC,cADkD,EAElDpC,IAFkD,EAGlD,IAHkD,CAApD;EAKA8c,IAAAA,WAAW,GAAGla,gBAAgB,CAACR,cAAD,EAAiBkd,yBAAjB,CAA9B;EACD;;EAED,MAAMlD,wBAAwB,GAAGpc,IAAI,CAACoc,wBAAtC;EACA,MAAMmD,gBAAgB,GACpB,OAAOnD,wBAAP,KAAoC,UAApC,IACA,OAAO5lB,QAAQ,CAACwnB,uBAAhB,KAA4C,UAF9C,CArBS;EA0BT;EACA;EAEA;EACA;;EACA,MACE,CAACuB,gBAAD,KACC,OAAO/oB,QAAQ,CAACwd,gCAAhB,KAAqD,UAArD,IACC,OAAOxd,QAAQ,CAACud,yBAAhB,KAA8C,UAFhD,CADF,EAIE;EACA,QAAItZ,QAAQ,KAAKC,QAAb,IAAyB2kB,UAAU,KAAKvC,WAA5C,EAAyD;EACvDkC,MAAAA,6BAA6B,CAC3B5c,cAD2B,EAE3B5L,QAF2B,EAG3BkE,QAH2B,EAI3BoiB,WAJ2B,CAA7B;EAMD;EACF;;EAEDhC,EAAAA,mCAAmC;EAEnC,MAAM+B,QAAQ,GAAGza,cAAc,CAACyW,aAAhC;EACA,MAAIyB,QAAQ,GAAI9jB,QAAQ,CAAC8mB,KAAT,GAAiBT,QAAjC;EACA5C,EAAAA,kBAAkB,CAAC7X,cAAD,EAAiB1H,QAAjB,EAA2BlE,QAA3B,EAAqCwgB,WAArC,CAAlB;EACAsD,EAAAA,QAAQ,GAAGlY,cAAc,CAACyW,aAA1B;;EACA,MACEpe,QAAQ,KAAKC,QAAb,IACAmiB,QAAQ,KAAKvC,QADb,IAEA,CAACxX,iBAAiB,EAFlB,IAGA,CAACiY,kCAAkC,EAJrC,EAKE;EACA;EACA;EACA,QAAI,OAAOvkB,QAAQ,CAAC0oB,iBAAhB,KAAsC,UAA1C,EAAsD;EACpD9c,MAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD;;EACD,WAAO,KAAP;EACD;;EAED,MAAI,OAAOioB,wBAAP,KAAoC,UAAxC,EAAoD;EAClDD,IAAAA,0BAA0B,CACxB/Z,cADwB,EAExBpC,IAFwB,EAGxBoc,wBAHwB,EAIxB1hB,QAJwB,CAA1B;EAMA4f,IAAAA,QAAQ,GAAGlY,cAAc,CAACyW,aAA1B;EACD;;EAED,MAAMmE,YAAY,GAChBjC,kCAAkC,MAClC6B,0BAA0B,CACxBxa,cADwB,EAExBpC,IAFwB,EAGxBvF,QAHwB,EAIxBC,QAJwB,EAKxBmiB,QALwB,EAMxBvC,QANwB,EAOxBwC,WAPwB,CAF5B;;EAYA,MAAIE,YAAJ,EAAkB;EAChB;EACA;EACA,QACE,CAACuC,gBAAD,KACC,OAAO/oB,QAAQ,CAACsd,yBAAhB,KAA8C,UAA9C,IACC,OAAOtd,QAAQ,CAACod,kBAAhB,KAAuC,UAFzC,CADF,EAIE;EACA,UAAI,OAAOpd,QAAQ,CAACod,kBAAhB,KAAuC,UAA3C,EAAuD;EACrDpd,QAAAA,QAAQ,CAACod,kBAAT;EACD;;EACD,UAAI,OAAOpd,QAAQ,CAACsd,yBAAhB,KAA8C,UAAlD,EAA8D;EAC5Dtd,QAAAA,QAAQ,CAACsd,yBAAT;EACD;EACF;;EACD,QAAI,OAAOtd,QAAQ,CAAC0oB,iBAAhB,KAAsC,UAA1C,EAAsD;EACpD9c,MAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD;EACF,GAlBD,MAkBO;EACL;EACA;EACA,QAAI,OAAOqC,QAAQ,CAAC0oB,iBAAhB,KAAsC,UAA1C,EAAsD;EACpD9c,MAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD,KALI;EAQL;;;EACAiO,IAAAA,cAAc,CAACgd,aAAf,GAA+B1kB,QAA/B;EACA0H,IAAAA,cAAc,CAACyW,aAAf,GAA+ByB,QAA/B;EACD,GArHQ;EAwHT;;;EACA9jB,EAAAA,QAAQ,CAACoC,KAAT,GAAiB8B,QAAjB;EACAlE,EAAAA,QAAQ,CAAC8mB,KAAT,GAAiBhD,QAAjB;EACA9jB,EAAAA,QAAQ,CAACnD,OAAT,GAAmBypB,WAAnB;EAEA,SAAOE,YAAP;EACD;;;EAGD,SAASwC,mBAAT,CACElpB,OADF,EAEE8L,cAFF,EAGEpC,IAHF,EAIEtF,QAJF,EAKEsc,WALF,EAMW;EACT,MAAMxgB,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC;EAEA2iB,EAAAA,gBAAgB,CAAC9iB,OAAD,EAAU8L,cAAV,CAAhB;EAEA,MAAMqd,kBAAkB,GAAGrd,cAAc,CAACgd,aAA1C;EACA,MAAM3kB,QAAQ,GACZ2H,cAAc,CAACnP,IAAf,KAAwBmP,cAAc,CAACsd,WAAvC,GACID,kBADJ,GAEIpK,mBAAmB,CAACjT,cAAc,CAACnP,IAAhB,EAAsBwsB,kBAAtB,CAHzB;EAIAjpB,EAAAA,QAAQ,CAACoC,KAAT,GAAiB6B,QAAjB;EACA,MAAMklB,kBAAkB,GAAGvd,cAAc,CAACwd,YAA1C;EAEA,MAAMP,UAAU,GAAG7oB,QAAQ,CAACnD,OAA5B;EACA,MAAMoqB,WAAW,GAAGzd,IAAI,CAACyd,WAAzB;EACA,MAAIX,WAAW,GAAG/a,kBAAlB;;EACA,MAAI,OAAO0b,WAAP,KAAuB,QAAvB,IAAmCA,WAAW,KAAK,IAAvD,EAA6D;EAC3DX,IAAAA,WAAW,GAAG9E,WAAW,CAACyF,WAAD,CAAzB;EACD,GAFD,MAEO,AAA2B;EAChC,QAAMoC,mBAAmB,GAAG1d,kBAAkB,CAACC,cAAD,EAAiBpC,IAAjB,EAAuB,IAAvB,CAA9C;EACA8c,IAAAA,WAAW,GAAGla,gBAAgB,CAACR,cAAD,EAAiByd,mBAAjB,CAA9B;EACD;;EAED,MAAMzD,wBAAwB,GAAGpc,IAAI,CAACoc,wBAAtC;EACA,MAAMmD,gBAAgB,GACpB,OAAOnD,wBAAP,KAAoC,UAApC,IACA,OAAO5lB,QAAQ,CAACwnB,uBAAhB,KAA4C,UAF9C,CAxBS;EA6BT;EACA;EAEA;EACA;;EACA,MACE,CAACuB,gBAAD,KACC,OAAO/oB,QAAQ,CAACwd,gCAAhB,KAAqD,UAArD,IACC,OAAOxd,QAAQ,CAACud,yBAAhB,KAA8C,UAFhD,CADF,EAIE;EACA,QACE0L,kBAAkB,KAAKE,kBAAvB,IACAN,UAAU,KAAKvC,WAFjB,EAGE;EACAkC,MAAAA,6BAA6B,CAC3B5c,cAD2B,EAE3B5L,QAF2B,EAG3BkE,QAH2B,EAI3BoiB,WAJ2B,CAA7B;EAMD;EACF;;EAEDhC,EAAAA,mCAAmC;EAEnC,MAAM+B,QAAQ,GAAGza,cAAc,CAACyW,aAAhC;EACA,MAAIyB,QAAQ,GAAI9jB,QAAQ,CAAC8mB,KAAT,GAAiBT,QAAjC;EACA5C,EAAAA,kBAAkB,CAAC7X,cAAD,EAAiB1H,QAAjB,EAA2BlE,QAA3B,EAAqCwgB,WAArC,CAAlB;EACAsD,EAAAA,QAAQ,GAAGlY,cAAc,CAACyW,aAA1B;;EAEA,MACE4G,kBAAkB,KAAKE,kBAAvB,IACA9C,QAAQ,KAAKvC,QADb,IAEA,CAACxX,iBAAiB,EAFlB,IAGA,CAACiY,kCAAkC,EAJrC,EAKE;EACA;EACA;EACA,QAAI,OAAOvkB,QAAQ,CAACynB,kBAAhB,KAAuC,UAA3C,EAAuD;EACrD,UACEwB,kBAAkB,KAAKnpB,OAAO,CAAC8oB,aAA/B,IACAvC,QAAQ,KAAKvmB,OAAO,CAACuiB,aAFvB,EAGE;EACAzW,QAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD;EACF;;EACD,QAAI,OAAOqC,QAAQ,CAACwnB,uBAAhB,KAA4C,UAAhD,EAA4D;EAC1D,UACEyB,kBAAkB,KAAKnpB,OAAO,CAAC8oB,aAA/B,IACAvC,QAAQ,KAAKvmB,OAAO,CAACuiB,aAFvB,EAGE;EACAzW,QAAAA,cAAc,CAACpM,KAAf,IAAwBtB,QAAxB;EACD;EACF;;EACD,WAAO,KAAP;EACD;;EAED,MAAI,OAAO0nB,wBAAP,KAAoC,UAAxC,EAAoD;EAClDD,IAAAA,0BAA0B,CACxB/Z,cADwB,EAExBpC,IAFwB,EAGxBoc,wBAHwB,EAIxB1hB,QAJwB,CAA1B;EAMA4f,IAAAA,QAAQ,GAAGlY,cAAc,CAACyW,aAA1B;EACD;;EAED,MAAMmE,YAAY,GAChBjC,kCAAkC,MAClC6B,0BAA0B,CACxBxa,cADwB,EAExBpC,IAFwB,EAGxBvF,QAHwB,EAIxBC,QAJwB,EAKxBmiB,QALwB,EAMxBvC,QANwB,EAOxBwC,WAPwB,CAF5B;;EAYA,MAAIE,YAAJ,EAAkB;EAChB;EACA;EACA,QACE,CAACuC,gBAAD,KACC,OAAO/oB,QAAQ,CAAC0d,0BAAhB,KAA+C,UAA/C,IACC,OAAO1d,QAAQ,CAACyd,mBAAhB,KAAwC,UAF1C,CADF,EAIE;EACA,UAAI,OAAOzd,QAAQ,CAACyd,mBAAhB,KAAwC,UAA5C,EAAwD;EACtDzd,QAAAA,QAAQ,CAACyd,mBAAT,CAA6BvZ,QAA7B,EAAuC4f,QAAvC,EAAiDwC,WAAjD;EACD;;EACD,UAAI,OAAOtmB,QAAQ,CAAC0d,0BAAhB,KAA+C,UAAnD,EAA+D;EAC7D1d,QAAAA,QAAQ,CAAC0d,0BAAT,CAAoCxZ,QAApC,EAA8C4f,QAA9C,EAAwDwC,WAAxD;EACD;EACF;;EACD,QAAI,OAAOtmB,QAAQ,CAACynB,kBAAhB,KAAuC,UAA3C,EAAuD;EACrD7b,MAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD;;EACD,QAAI,OAAOqC,QAAQ,CAACwnB,uBAAhB,KAA4C,UAAhD,EAA4D;EAC1D5b,MAAAA,cAAc,CAACpM,KAAf,IAAwBtB,QAAxB;EACD;EACF,GArBD,MAqBO;EACL;EACA;EACA,QAAI,OAAO8B,QAAQ,CAACynB,kBAAhB,KAAuC,UAA3C,EAAuD;EACrD,UACEwB,kBAAkB,KAAKnpB,OAAO,CAAC8oB,aAA/B,IACAvC,QAAQ,KAAKvmB,OAAO,CAACuiB,aAFvB,EAGE;EACAzW,QAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD;EACF;;EACD,QAAI,OAAOqC,QAAQ,CAACwnB,uBAAhB,KAA4C,UAAhD,EAA4D;EAC1D,UACEyB,kBAAkB,KAAKnpB,OAAO,CAAC8oB,aAA/B,IACAvC,QAAQ,KAAKvmB,OAAO,CAACuiB,aAFvB,EAGE;EACAzW,QAAAA,cAAc,CAACpM,KAAf,IAAwBtB,QAAxB;EACD;EACF,KAlBI;EAqBL;;;EACA0N,IAAAA,cAAc,CAACgd,aAAf,GAA+B1kB,QAA/B;EACA0H,IAAAA,cAAc,CAACyW,aAAf,GAA+ByB,QAA/B;EACD,GAzJQ;EA4JT;;;EACA9jB,EAAAA,QAAQ,CAACoC,KAAT,GAAiB8B,QAAjB;EACAlE,EAAAA,QAAQ,CAAC8mB,KAAT,GAAiBhD,QAAjB;EACA9jB,EAAAA,QAAQ,CAACnD,OAAT,GAAmBypB,WAAnB;EAEA,SAAOE,YAAP;EACD;;ECvnCD,IAAI8C,gBAAJ;EACA,IAAIC,sBAAJ;EACA,IAAIC,sBAAJ;EACA,IAAIC,qBAAJ;EACA,IAAIC,2BAAJ;;EACA,IAAIC,iBAAiB,GAAG,UAAChpB,KAAD,EAAeipB,WAAf,EAAsC,EAA9D;;AAEA,EAAa;EACXN,EAAAA,gBAAgB,GAAG,KAAnB;EACAC,EAAAA,sBAAsB,GAAG,KAAzB;EACAC,EAAAA,sBAAsB,GAAG,EAAzB;EAEA;;;;;;EAKAC,EAAAA,qBAAqB,GAAG,EAAxB;EACAC,EAAAA,2BAA2B,GAAG,EAA9B;;EAEAC,EAAAA,iBAAiB,GAAG,UAAChpB,KAAD,EAAeipB,WAAf,EAAsC;EACxD,QAAIjpB,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAAvC,EAAiD;EAC/C;EACD;;EACD,QAAI,CAACA,KAAK,CAACkpB,MAAP,IAAiBlpB,KAAK,CAACkpB,MAAN,CAAaC,SAA9B,IAA2CnpB,KAAK,CAAC3G,GAAN,IAAa,IAA5D,EAAkE;EAChE;EACD;;EANuD,UAQtD,OAAO2G,KAAK,CAACkpB,MAAb,KAAwB,QAR8B;EAAA;EAAA;EAAA;EAAA;;EAYxDlpB,IAAAA,KAAK,CAACkpB,MAAN,CAAaC,SAAb,GAAyB,IAAzB;EAEA,QAAMtf,aAAa,GAAG9N,gBAAgB,CAACktB,WAAW,CAACntB,IAAb,CAAhB,IAAsC,WAA5D;;EAEA,QAAIgtB,qBAAqB,CAACjf,aAAD,CAAzB,EAA0C;EACxC;EACD;;EACDif,IAAAA,qBAAqB,CAACjf,aAAD,CAArB,GAAuC,IAAvC;;EAEA,UACE,+CACE,4DADF,GAEE,mBAHJ;EAKD,GA1BD;EA2BD;;EAED,IAAMhI,SAAO,GAAGD,KAAK,CAACC,OAAtB;;EAEA,SAASunB,SAAT,CACEH,WADF,EAEE9pB,OAFF,EAGEkK,OAHF,EAIE;EACA,MAAMggB,QAAQ,GAAGhgB,OAAO,CAACigB,GAAzB;;EACA,MACED,QAAQ,KAAK,IAAb,IACA,OAAOA,QAAP,KAAoB,UADpB,IAEA,OAAOA,QAAP,KAAoB,QAHtB,EAIE;EACA,IAAa;EACX;EACA;EACA,UACE,CAACJ,WAAW,CAACtN,IAAZ,GAAmBvC,UAAnB,IAAiChb,mBAAlC;EAEA;EACA;EACA,QACEiL,OAAO,CAACC,MAAR,IACAD,OAAO,CAACkgB,KADR,IAEAlgB,OAAO,CAACC,MAAR,CAAehK,SAAf,KAA6B+J,OAAO,CAACkgB,KAHvC,CALF,EAUE;EACA,YAAM1f,aAAa,GAAG9N,gBAAgB,CAACktB,WAAW,CAACntB,IAAb,CAAhB,IAAsC,WAA5D;;EACA,YAAI,CAAC+sB,sBAAsB,CAAChf,aAAD,CAA3B,EAA4C;EAC1C,UAUO;EACL,kBACE,mEACE,oEADF,GAEE,sDAFF,GAGE,2CAHF,GAIE,iDALJ,EAMEwf,QANF;EAQD;;EACDR,UAAAA,sBAAsB,CAAChf,aAAD,CAAtB,GAAwC,IAAxC;EACD;EACF;EACF;;EAED,QAAIR,OAAO,CAACC,MAAZ,EAAoB;EAClB,UAAMpK,KAAa,GAAImK,OAAO,CAACC,MAA/B;EACA,UAAIjI,IAAJ;;EACA,UAAInC,KAAJ,EAAW;EACT,YAAME,UAAU,GAAKF,KAArB;;EADS,cAGPE,UAAU,CAACpD,GAAX,KAAmBpE,cAHZ;EAAA;EAAA;EAAA;EAAA;;EASTyJ,QAAAA,IAAI,GAAGjC,UAAU,CAACE,SAAlB;EACD;;EAbiB,WAehB+B,IAfgB;EAAA;EAAA,yDAkBhBgoB,QAlBgB;EAAA;EAAA;;EAoBlB,UAAMG,SAAS,GAAG,KAAKH,QAAvB,CApBkB;;EAsBlB,UACElqB,OAAO,KAAK,IAAZ,IACAA,OAAO,CAACmqB,GAAR,KAAgB,IADhB,IAEA,OAAOnqB,OAAO,CAACmqB,GAAf,KAAuB,UAFvB,IAGAnqB,OAAO,CAACmqB,GAAR,CAAYG,UAAZ,KAA2BD,SAJ7B,EAKE;EACA,eAAOrqB,OAAO,CAACmqB,GAAf;EACD;;EACD,UAAMA,GAAG,GAAG,UAAS9vB,KAAT,EAAgB;EAC1B,YAAI2qB,IAAI,GAAG9iB,IAAI,CAAC8iB,IAAhB;;EACA,YAAIA,IAAI,KAAKD,eAAb,EAA8B;EAC5B;EACAC,UAAAA,IAAI,GAAG9iB,IAAI,CAAC8iB,IAAL,GAAY,EAAnB;EACD;;EACD,YAAI3qB,KAAK,KAAK,IAAd,EAAoB;EAClB,iBAAO2qB,IAAI,CAACqF,SAAD,CAAX;EACD,SAFD,MAEO;EACLrF,UAAAA,IAAI,CAACqF,SAAD,CAAJ,GAAkBhwB,KAAlB;EACD;EACF,OAXD;;EAYA8vB,MAAAA,GAAG,CAACG,UAAJ,GAAiBD,SAAjB;EACA,aAAOF,GAAP;EACD,KA5CD,MA4CO;EAAA,YAEH,OAAOD,QAAP,KAAoB,QAFjB;EAAA;EAAA;EAAA;EAAA;;EAAA,WAMHhgB,OAAO,CAACC,MANL;EAAA;EAAA,mEAaH+f,QAbG;EAAA;EAAA;EAeN;EACF;;EACD,SAAOA,QAAP;EACD;;EAED,SAASK,wBAAT,CAAkCT,WAAlC,EAAsDU,QAAtD,EAAwE;EACtE,MAAIV,WAAW,CAACntB,IAAZ,KAAqB,UAAzB,EAAqC;EAAA;EAAA;EAAA,0EAMjCoF,MAAM,CAAC7J,SAAP,CAAiB6N,QAAjB,CAA0B3N,IAA1B,CAA+BoyB,QAA/B,MAA6C,iBAA7C,GACI,uBAAuBzoB,MAAM,CAACkZ,IAAP,CAAYuP,QAAZ,EAAsB3N,IAAtB,CAA2B,IAA3B,CAAvB,GAA0D,GAD9D,GAEI2N,QAR6B;EAAA;EAAA;EAUpC;EACF;;EAED,SAASC,kBAAT,CAA4BX,WAA5B,EAAgD;EAC9C,EAAa;EACX,QAAMpf,aAAa,GAAG9N,gBAAgB,CAACktB,WAAW,CAACntB,IAAb,CAAhB,IAAsC,WAA5D;;EAEA,QAAIitB,2BAA2B,CAAClf,aAAD,CAA/B,EAAgD;EAC9C;EACD;;EACDkf,IAAAA,2BAA2B,CAAClf,aAAD,CAA3B,GAA6C,IAA7C;;EAEA,UACE,kEACE,+DADF,GAEE,iEAHJ;EAKD;EACF;EAmBD;EACA;EACA;;;EACA,SAASggB,eAAT,CAAyBC,sBAAzB,EAAiD;EAC/C,WAASC,WAAT,CAAqBd,WAArB,EAAyCe,aAAzC,EAAqE;EACnE,QAAI,CAACF,sBAAL,EAA6B;EAC3B;EACA;EACD,KAJkE;EAMnE;EACA;EACA;EACA;;;EACA,QAAMG,IAAI,GAAGhB,WAAW,CAACiB,UAAzB;;EACA,QAAID,IAAI,KAAK,IAAb,EAAmB;EACjBA,MAAAA,IAAI,CAACE,UAAL,GAAkBH,aAAlB;EACAf,MAAAA,WAAW,CAACiB,UAAZ,GAAyBF,aAAzB;EACD,KAHD,MAGO;EACLf,MAAAA,WAAW,CAACmB,WAAZ,GAA0BnB,WAAW,CAACiB,UAAZ,GAAyBF,aAAnD;EACD;;EACDA,IAAAA,aAAa,CAACG,UAAd,GAA2B,IAA3B;EACAH,IAAAA,aAAa,CAACnrB,KAAd,GAAsB3B,QAAtB;EACD;;EAED,WAASmtB,uBAAT,CACEpB,WADF,EAEEqB,iBAFF,EAGQ;EACN,QAAI,CAACR,sBAAL,EAA6B;EAC3B;EACA,aAAO,IAAP;EACD,KAJK;EAON;;;EACA,QAAIE,aAAa,GAAGM,iBAApB;;EACA,WAAON,aAAa,KAAK,IAAzB,EAA+B;EAC7BD,MAAAA,WAAW,CAACd,WAAD,EAAce,aAAd,CAAX;EACAA,MAAAA,aAAa,GAAGA,aAAa,CAAC/pB,OAA9B;EACD;;EACD,WAAO,IAAP;EACD;;EAED,WAASsqB,oBAAT,CACEtB,WADF,EAEEqB,iBAFF,EAG+B;EAC7B;EACA;EACA;EACA,QAAME,gBAA6C,GAAG,IAAIjjB,GAAJ,EAAtD;EAEA,QAAIkjB,aAAa,GAAGH,iBAApB;;EACA,WAAOG,aAAa,KAAK,IAAzB,EAA+B;EAC7B,UAAIA,aAAa,CAACpxB,GAAd,KAAsB,IAA1B,EAAgC;EAC9BmxB,QAAAA,gBAAgB,CAACjxB,GAAjB,CAAqBkxB,aAAa,CAACpxB,GAAnC,EAAwCoxB,aAAxC;EACD,OAFD,MAEO;EACLD,QAAAA,gBAAgB,CAACjxB,GAAjB,CAAqBkxB,aAAa,CAAC1oB,KAAnC,EAA0C0oB,aAA1C;EACD;;EACDA,MAAAA,aAAa,GAAGA,aAAa,CAACxqB,OAA9B;EACD;;EACD,WAAOuqB,gBAAP;EACD;;EAED,WAASE,QAAT,CAAkBlsB,KAAlB,EAAgCiqB,YAAhC,EAA4D;EAC1D;EACA;EACA,QAAMtG,KAAK,GAAGwI,oBAAoB,CAACnsB,KAAD,EAAQiqB,YAAR,CAAlC;EACAtG,IAAAA,KAAK,CAACpgB,KAAN,GAAc,CAAd;EACAogB,IAAAA,KAAK,CAACliB,OAAN,GAAgB,IAAhB;EACA,WAAOkiB,KAAP;EACD;;EAED,WAASyI,UAAT,CACEC,QADF,EAEEC,eAFF,EAGEC,QAHF,EAIU;EACRF,IAAAA,QAAQ,CAAC9oB,KAAT,GAAiBgpB,QAAjB;;EACA,QAAI,CAACjB,sBAAL,EAA6B;EAC3B;EACA,aAAOgB,eAAP;EACD;;EACD,QAAM3rB,OAAO,GAAG0rB,QAAQ,CAAClsB,SAAzB;;EACA,QAAIQ,OAAO,KAAK,IAAhB,EAAsB;EACpB,UAAM6rB,QAAQ,GAAG7rB,OAAO,CAAC4C,KAAzB;;EACA,UAAIipB,QAAQ,GAAGF,eAAf,EAAgC;EAC9B;EACAD,QAAAA,QAAQ,CAAChsB,KAAT,GAAiB9B,SAAjB;EACA,eAAO+tB,eAAP;EACD,OAJD,MAIO;EACL;EACA,eAAOE,QAAP;EACD;EACF,KAVD,MAUO;EACL;EACAH,MAAAA,QAAQ,CAAChsB,KAAT,GAAiB9B,SAAjB;EACA,aAAO+tB,eAAP;EACD;EACF;;EAED,WAASG,gBAAT,CAA0BJ,QAA1B,EAAkD;EAChD;EACA;EACA,QAAIf,sBAAsB,IAAIe,QAAQ,CAAClsB,SAAT,KAAuB,IAArD,EAA2D;EACzDksB,MAAAA,QAAQ,CAAChsB,KAAT,GAAiB9B,SAAjB;EACD;;EACD,WAAO8tB,QAAP;EACD;;EAED,WAASK,cAAT,CACEjC,WADF,EAEE9pB,OAFF,EAGEgsB,WAHF,EAIErZ,KAJF,EAKE;EACA,QAAI3S,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACnD,GAAR,KAAgB/D,QAAxC,EAAkD;EAChD;EACA,UAAMmzB,OAAO,GAAGC,mBAAmB,CAACF,WAAD,EAAclC,WAAW,CAACtN,IAA1B,EAAgC7J,KAAhC,CAAnC;EACAsZ,MAAAA,OAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,aAAOmC,OAAP;EACD,KALD,MAKO;EACL;EACA,UAAME,QAAQ,GAAGZ,QAAQ,CAACvrB,OAAD,EAAUgsB,WAAV,CAAzB;EACAG,MAAAA,QAAQ,CAACxsB,MAAT,GAAkBmqB,WAAlB;EACA,aAAOqC,QAAP;EACD;EACF;;EAED,WAASC,aAAT,CACEtC,WADF,EAEE9pB,OAFF,EAGEkK,OAHF,EAIEyI,KAJF,EAKS;EACP,QAAI3S,OAAO,KAAK,IAAhB,EAAsB;EACpB,UACEA,OAAO,CAACopB,WAAR,KAAwBlf,OAAO,CAACvN,IAAhC;EAEC+R,MAAAA,CAAU2d,iCAAiC,CAACrsB,OAAD,EAAUkK,OAAV,CAApC,CAFR,CADF,EAIE;EACA;EACA,YAAMiiB,QAAQ,GAAGZ,QAAQ,CAACvrB,OAAD,EAAUkK,OAAO,CAAC5H,KAAlB,CAAzB;EACA6pB,QAAAA,QAAQ,CAAChC,GAAT,GAAeF,SAAS,CAACH,WAAD,EAAc9pB,OAAd,EAAuBkK,OAAvB,CAAxB;EACAiiB,QAAAA,QAAQ,CAACxsB,MAAT,GAAkBmqB,WAAlB;;EACA,QAAa;EACXqC,UAAAA,QAAQ,CAAC9Q,YAAT,GAAwBnR,OAAO,CAACE,OAAhC;EACA+hB,UAAAA,QAAQ,CAAC/Q,WAAT,GAAuBlR,OAAO,CAACC,MAA/B;EACD;;EACD,eAAOgiB,QAAP;EACD,OAdD;EAqCD,KAvCM;;;EAyCP,QAAMF,OAAO,GAAGK,sBAAsB,CAACpiB,OAAD,EAAU4f,WAAW,CAACtN,IAAtB,EAA4B7J,KAA5B,CAAtC;EACAsZ,IAAAA,OAAO,CAAC9B,GAAR,GAAcF,SAAS,CAACH,WAAD,EAAc9pB,OAAd,EAAuBkK,OAAvB,CAAvB;EACA+hB,IAAAA,OAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,WAAOmC,OAAP;EACD;;EAED,WAASM,YAAT,CACEzC,WADF,EAEE9pB,OAFF,EAGEwsB,MAHF,EAIE7Z,KAJF,EAKS;EACP,QACE3S,OAAO,KAAK,IAAZ,IACAA,OAAO,CAACnD,GAAR,KAAgBjE,UADhB,IAEAoH,OAAO,CAACG,SAAR,CAAkBuD,aAAlB,KAAoC8oB,MAAM,CAAC9oB,aAF3C,IAGA1D,OAAO,CAACG,SAAR,CAAkBssB,cAAlB,KAAqCD,MAAM,CAACC,cAJ9C,EAKE;EACA;EACA,UAAMR,OAAO,GAAGS,qBAAqB,CAACF,MAAD,EAAS1C,WAAW,CAACtN,IAArB,EAA2B7J,KAA3B,CAArC;EACAsZ,MAAAA,OAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,aAAOmC,OAAP;EACD,KAVD,MAUO;EACL;EACA,UAAME,QAAQ,GAAGZ,QAAQ,CAACvrB,OAAD,EAAUwsB,MAAM,CAAC7pB,QAAP,IAAmB,EAA7B,CAAzB;EACAwpB,MAAAA,QAAQ,CAACxsB,MAAT,GAAkBmqB,WAAlB;EACA,aAAOqC,QAAP;EACD;EACF;;EAED,WAASQ,cAAT,CACE7C,WADF,EAEE9pB,OAFF,EAGE4sB,QAHF,EAIEja,KAJF,EAKEzY,GALF,EAMS;EACP,QAAI8F,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACnD,GAAR,KAAgB9D,QAAxC,EAAkD;EAChD;EACA,UAAMkzB,OAAO,GAAGY,uBAAuB,CACrCD,QADqC,EAErC9C,WAAW,CAACtN,IAFyB,EAGrC7J,KAHqC,EAIrCzY,GAJqC,CAAvC;EAMA+xB,MAAAA,OAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,aAAOmC,OAAP;EACD,KAVD,MAUO;EACL;EACA,UAAME,QAAQ,GAAGZ,QAAQ,CAACvrB,OAAD,EAAU4sB,QAAV,CAAzB;EACAT,MAAAA,QAAQ,CAACxsB,MAAT,GAAkBmqB,WAAlB;EACA,aAAOqC,QAAP;EACD;EACF;;EAED,WAASW,WAAT,CACEhD,WADF,EAEEU,QAFF,EAGE7X,KAHF,EAIgB;EACd,QAAI,OAAO6X,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,QAAxD,EAAkE;EAChE;EACA;EACA;EACA,UAAMyB,OAAO,GAAGC,mBAAmB,CACjC,KAAK1B,QAD4B,EAEjCV,WAAW,CAACtN,IAFqB,EAGjC7J,KAHiC,CAAnC;EAKAsZ,MAAAA,OAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,aAAOmC,OAAP;EACD;;EAED,QAAI,OAAOzB,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;EACrD,cAAQA,QAAQ,CAAC1tB,QAAjB;EACE,aAAKxC,kBAAL;EAAyB;EACvB,gBAAM2xB,QAAO,GAAGK,sBAAsB,CACpC9B,QADoC,EAEpCV,WAAW,CAACtN,IAFwB,EAGpC7J,KAHoC,CAAtC;;EAKAsZ,YAAAA,QAAO,CAAC9B,GAAR,GAAcF,SAAS,CAACH,WAAD,EAAc,IAAd,EAAoBU,QAApB,CAAvB;EACAyB,YAAAA,QAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,mBAAOmC,QAAP;EACD;;EACD,aAAK1xB,iBAAL;EAAwB;EACtB,gBAAM0xB,SAAO,GAAGS,qBAAqB,CACnClC,QADmC,EAEnCV,WAAW,CAACtN,IAFuB,EAGnC7J,KAHmC,CAArC;;EAKAsZ,YAAAA,SAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,mBAAOmC,SAAP;EACD;EAnBH;;EA6BA,UAAIvpB,SAAO,CAAC8nB,QAAD,CAAP,IAAqBxuB,aAAa,CAACwuB,QAAD,CAAtC,EAAkD;EAChD,YAAMyB,SAAO,GAAGY,uBAAuB,CACrCrC,QADqC,EAErCV,WAAW,CAACtN,IAFyB,EAGrC7J,KAHqC,EAIrC,IAJqC,CAAvC;;EAMAsZ,QAAAA,SAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,eAAOmC,SAAP;EACD;;EAED1B,MAAAA,wBAAwB,CAACT,WAAD,EAAcU,QAAd,CAAxB;EACD;;EAED,IAAa;EACX,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;EAClCC,QAAAA,kBAAkB,CAACX,WAAD,CAAlB;EACD;EACF;;EAED,WAAO,IAAP;EACD;;EAED,WAASiD,UAAT,CACEjD,WADF,EAEEkD,QAFF,EAGExC,QAHF,EAIE7X,KAJF,EAKgB;EACd;EAEA,QAAMzY,GAAG,GAAG8yB,QAAQ,KAAK,IAAb,GAAoBA,QAAQ,CAAC9yB,GAA7B,GAAmC,IAA/C;;EAEA,QAAI,OAAOswB,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,QAAxD,EAAkE;EAChE;EACA;EACA;EACA,UAAItwB,GAAG,KAAK,IAAZ,EAAkB;EAChB,eAAO,IAAP;EACD;;EACD,aAAO6xB,cAAc,CAACjC,WAAD,EAAckD,QAAd,EAAwB,KAAKxC,QAA7B,EAAuC7X,KAAvC,CAArB;EACD;;EAED,QAAI,OAAO6X,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;EACrD,cAAQA,QAAQ,CAAC1tB,QAAjB;EACE,aAAKxC,kBAAL;EAAyB;EACvB,gBAAIkwB,QAAQ,CAACtwB,GAAT,KAAiBA,GAArB,EAA0B;EACxB,kBAAIswB,QAAQ,CAAC7tB,IAAT,KAAkBnC,mBAAtB,EAA2C;EACzC,uBAAOmyB,cAAc,CACnB7C,WADmB,EAEnBkD,QAFmB,EAGnBxC,QAAQ,CAACloB,KAAT,CAAeK,QAHI,EAInBgQ,KAJmB,EAKnBzY,GALmB,CAArB;EAOD;;EACD,qBAAOkyB,aAAa,CAACtC,WAAD,EAAckD,QAAd,EAAwBxC,QAAxB,EAAkC7X,KAAlC,CAApB;EACD,aAXD,MAWO;EACL,qBAAO,IAAP;EACD;EACF;;EACD,aAAKpY,iBAAL;EAAwB;EACtB,gBAAIiwB,QAAQ,CAACtwB,GAAT,KAAiBA,GAArB,EAA0B;EACxB,qBAAOqyB,YAAY,CAACzC,WAAD,EAAckD,QAAd,EAAwBxC,QAAxB,EAAkC7X,KAAlC,CAAnB;EACD,aAFD,MAEO;EACL,qBAAO,IAAP;EACD;EACF;EAvBH;;EAiCA,UAAIjQ,SAAO,CAAC8nB,QAAD,CAAP,IAAqBxuB,aAAa,CAACwuB,QAAD,CAAtC,EAAkD;EAChD,YAAItwB,GAAG,KAAK,IAAZ,EAAkB;EAChB,iBAAO,IAAP;EACD;;EAED,eAAOyyB,cAAc,CAAC7C,WAAD,EAAckD,QAAd,EAAwBxC,QAAxB,EAAkC7X,KAAlC,EAAyC,IAAzC,CAArB;EACD;;EAED4X,MAAAA,wBAAwB,CAACT,WAAD,EAAcU,QAAd,CAAxB;EACD;;EAED,IAAa;EACX,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;EAClCC,QAAAA,kBAAkB,CAACX,WAAD,CAAlB;EACD;EACF;;EAED,WAAO,IAAP;EACD;;EAED,WAASmD,aAAT,CACE5B,gBADF,EAEEvB,WAFF,EAGEoD,MAHF,EAIE1C,QAJF,EAKE7X,KALF,EAMgB;EACd,QAAI,OAAO6X,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,QAAxD,EAAkE;EAChE;EACA;EACA,UAAM2C,YAAY,GAAG9B,gBAAgB,CAACpxB,GAAjB,CAAqBizB,MAArB,KAAgC,IAArD;EACA,aAAOnB,cAAc,CAACjC,WAAD,EAAcqD,YAAd,EAA4B,KAAK3C,QAAjC,EAA2C7X,KAA3C,CAArB;EACD;;EAED,QAAI,OAAO6X,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAAjD,EAAuD;EACrD,cAAQA,QAAQ,CAAC1tB,QAAjB;EACE,aAAKxC,kBAAL;EAAyB;EACvB,gBAAM6yB,aAAY,GAChB9B,gBAAgB,CAACpxB,GAAjB,CACEuwB,QAAQ,CAACtwB,GAAT,KAAiB,IAAjB,GAAwBgzB,MAAxB,GAAiC1C,QAAQ,CAACtwB,GAD5C,KAEK,IAHP;;EAIA,gBAAIswB,QAAQ,CAAC7tB,IAAT,KAAkBnC,mBAAtB,EAA2C;EACzC,qBAAOmyB,cAAc,CACnB7C,WADmB,EAEnBqD,aAFmB,EAGnB3C,QAAQ,CAACloB,KAAT,CAAeK,QAHI,EAInBgQ,KAJmB,EAKnB6X,QAAQ,CAACtwB,GALU,CAArB;EAOD;;EACD,mBAAOkyB,aAAa,CAACtC,WAAD,EAAcqD,aAAd,EAA4B3C,QAA5B,EAAsC7X,KAAtC,CAApB;EACD;;EACD,aAAKpY,iBAAL;EAAwB;EACtB,gBAAM4yB,cAAY,GAChB9B,gBAAgB,CAACpxB,GAAjB,CACEuwB,QAAQ,CAACtwB,GAAT,KAAiB,IAAjB,GAAwBgzB,MAAxB,GAAiC1C,QAAQ,CAACtwB,GAD5C,KAEK,IAHP;;EAIA,mBAAOqyB,YAAY,CAACzC,WAAD,EAAcqD,cAAd,EAA4B3C,QAA5B,EAAsC7X,KAAtC,CAAnB;EACD;;EAvBH;;EAsCA,UAAIjQ,SAAO,CAAC8nB,QAAD,CAAP,IAAqBxuB,aAAa,CAACwuB,QAAD,CAAtC,EAAkD;EAChD,YAAM2C,cAAY,GAAG9B,gBAAgB,CAACpxB,GAAjB,CAAqBizB,MAArB,KAAgC,IAArD;;EACA,eAAOP,cAAc,CAAC7C,WAAD,EAAcqD,cAAd,EAA4B3C,QAA5B,EAAsC7X,KAAtC,EAA6C,IAA7C,CAArB;EACD;;EAED4X,MAAAA,wBAAwB,CAACT,WAAD,EAAcU,QAAd,CAAxB;EACD;;EAED,IAAa;EACX,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;EAClCC,QAAAA,kBAAkB,CAACX,WAAD,CAAlB;EACD;EACF;;EAED,WAAO,IAAP;EACD;EAED;;;;;EAGA,WAASsD,gBAAT,CACEvsB,KADF,EAEEwsB,SAFF,EAGEvD,WAHF,EAIsB;EACpB,IAAa;EACX,UAAI,OAAOjpB,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA3C,EAAiD;EAC/C,eAAOwsB,SAAP;EACD;;EACD,cAAQxsB,KAAK,CAAC/D,QAAd;EACE,aAAKxC,kBAAL;EACA,aAAKC,iBAAL;EACEsvB,UAAAA,iBAAiB,CAAChpB,KAAD,EAAQipB,WAAR,CAAjB;EACA,cAAM5vB,GAAG,GAAG2G,KAAK,CAAC3G,GAAlB;;EACA,cAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;EAC3B;EACD;;EACD,cAAImzB,SAAS,KAAK,IAAlB,EAAwB;EACtBA,YAAAA,SAAS,GAAG,IAAIhQ,GAAJ,EAAZ;EACAgQ,YAAAA,SAAS,CAACvP,GAAV,CAAc5jB,GAAd;EACA;EACD;;EACD,cAAI,CAACmzB,SAAS,CAAC1iB,GAAV,CAAczQ,GAAd,CAAL,EAAyB;EACvBmzB,YAAAA,SAAS,CAACvP,GAAV,CAAc5jB,GAAd;EACA;EACD;;EACD,gBACE,uDACE,mEADF,GAEE,2DAFF,GAGE,8DAHF,GAIE,mCALJ,EAMEA,GANF;;EAQA;EAzBJ;EAsCD;;EACD,WAAOmzB,SAAP;EACD;;EAED,WAASC,sBAAT,CACExD,WADF,EAEEqB,iBAFF,EAGEoC,WAHF,EAIE5a,KAJF,EAKgB;EACd;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EAEA,IAAa;EACX;EACA,UAAI0a,SAAS,GAAG,IAAhB;;EACA,WAAK,IAAItW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwW,WAAW,CAAClkB,MAAhC,EAAwC0N,CAAC,EAAzC,EAA6C;EAC3C,YAAMlW,KAAK,GAAG0sB,WAAW,CAACxW,CAAD,CAAzB;EACAsW,QAAAA,SAAS,GAAGD,gBAAgB,CAACvsB,KAAD,EAAQwsB,SAAR,EAAmBvD,WAAnB,CAA5B;EACD;EACF;;EAED,QAAI0D,mBAAiC,GAAG,IAAxC;EACA,QAAIC,gBAA8B,GAAG,IAArC;EAEA,QAAIT,QAAQ,GAAG7B,iBAAf;EACA,QAAIQ,eAAe,GAAG,CAAtB;EACA,QAAIuB,MAAM,GAAG,CAAb;EACA,QAAIQ,YAAY,GAAG,IAAnB;;EACA,WAAOV,QAAQ,KAAK,IAAb,IAAqBE,MAAM,GAAGK,WAAW,CAAClkB,MAAjD,EAAyD6jB,MAAM,EAA/D,EAAmE;EACjE,UAAIF,QAAQ,CAACpqB,KAAT,GAAiBsqB,MAArB,EAA6B;EAC3BQ,QAAAA,YAAY,GAAGV,QAAf;EACAA,QAAAA,QAAQ,GAAG,IAAX;EACD,OAHD,MAGO;EACLU,QAAAA,YAAY,GAAGV,QAAQ,CAAClsB,OAAxB;EACD;;EACD,UAAM4qB,QAAQ,GAAGqB,UAAU,CACzBjD,WADyB,EAEzBkD,QAFyB,EAGzBO,WAAW,CAACL,MAAD,CAHc,EAIzBva,KAJyB,CAA3B;;EAMA,UAAI+Y,QAAQ,KAAK,IAAjB,EAAuB;EACrB;EACA;EACA;EACA;EACA,YAAIsB,QAAQ,KAAK,IAAjB,EAAuB;EACrBA,UAAAA,QAAQ,GAAGU,YAAX;EACD;;EACD;EACD;;EACD,UAAI/C,sBAAJ,EAA4B;EAC1B,YAAIqC,QAAQ,IAAItB,QAAQ,CAAClsB,SAAT,KAAuB,IAAvC,EAA6C;EAC3C;EACA;EACAorB,UAAAA,WAAW,CAACd,WAAD,EAAckD,QAAd,CAAX;EACD;EACF;;EACDrB,MAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;EACA,UAAIO,gBAAgB,KAAK,IAAzB,EAA+B;EAC7B;EACAD,QAAAA,mBAAmB,GAAG9B,QAAtB;EACD,OAHD,MAGO;EACL;EACA;EACA;EACA;EACA+B,QAAAA,gBAAgB,CAAC3sB,OAAjB,GAA2B4qB,QAA3B;EACD;;EACD+B,MAAAA,gBAAgB,GAAG/B,QAAnB;EACAsB,MAAAA,QAAQ,GAAGU,YAAX;EACD;;EAED,QAAIR,MAAM,KAAKK,WAAW,CAAClkB,MAA3B,EAAmC;EACjC;EACA6hB,MAAAA,uBAAuB,CAACpB,WAAD,EAAckD,QAAd,CAAvB;EACA,aAAOQ,mBAAP;EACD;;EAED,QAAIR,QAAQ,KAAK,IAAjB,EAAuB;EACrB;EACA;EACA,aAAOE,MAAM,GAAGK,WAAW,CAAClkB,MAA5B,EAAoC6jB,MAAM,EAA1C,EAA8C;EAC5C,YAAMxB,SAAQ,GAAGoB,WAAW,CAAChD,WAAD,EAAcyD,WAAW,CAACL,MAAD,CAAzB,EAAmCva,KAAnC,CAA5B;;EACA,YAAI+Y,SAAQ,KAAK,IAAjB,EAAuB;EACrB;EACD;;EACDC,QAAAA,eAAe,GAAGF,UAAU,CAACC,SAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;EACA,YAAIO,gBAAgB,KAAK,IAAzB,EAA+B;EAC7B;EACAD,UAAAA,mBAAmB,GAAG9B,SAAtB;EACD,SAHD,MAGO;EACL+B,UAAAA,gBAAgB,CAAC3sB,OAAjB,GAA2B4qB,SAA3B;EACD;;EACD+B,QAAAA,gBAAgB,GAAG/B,SAAnB;EACD;;EACD,aAAO8B,mBAAP;EACD,KAzGa;;;EA4Gd,QAAMnC,gBAAgB,GAAGD,oBAAoB,CAACtB,WAAD,EAAckD,QAAd,CAA7C,CA5Gc;;EA+Gd,WAAOE,MAAM,GAAGK,WAAW,CAAClkB,MAA5B,EAAoC6jB,MAAM,EAA1C,EAA8C;EAC5C,UAAMxB,UAAQ,GAAGuB,aAAa,CAC5B5B,gBAD4B,EAE5BvB,WAF4B,EAG5BoD,MAH4B,EAI5BK,WAAW,CAACL,MAAD,CAJiB,EAK5Bva,KAL4B,CAA9B;;EAOA,UAAI+Y,UAAQ,KAAK,IAAjB,EAAuB;EACrB,YAAIf,sBAAJ,EAA4B;EAC1B,cAAIe,UAAQ,CAAClsB,SAAT,KAAuB,IAA3B,EAAiC;EAC/B;EACA;EACA;EACA;EACA6rB,YAAAA,gBAAgB,CAACsC,MAAjB,CACEjC,UAAQ,CAACxxB,GAAT,KAAiB,IAAjB,GAAwBgzB,MAAxB,GAAiCxB,UAAQ,CAACxxB,GAD5C;EAGD;EACF;;EACDyxB,QAAAA,eAAe,GAAGF,UAAU,CAACC,UAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;EACA,YAAIO,gBAAgB,KAAK,IAAzB,EAA+B;EAC7BD,UAAAA,mBAAmB,GAAG9B,UAAtB;EACD,SAFD,MAEO;EACL+B,UAAAA,gBAAgB,CAAC3sB,OAAjB,GAA2B4qB,UAA3B;EACD;;EACD+B,QAAAA,gBAAgB,GAAG/B,UAAnB;EACD;EACF;;EAED,QAAIf,sBAAJ,EAA4B;EAC1B;EACA;EACAU,MAAAA,gBAAgB,CAAC1O,OAAjB,CAAyB,UAAA9b,KAAK;EAAA,eAAI+pB,WAAW,CAACd,WAAD,EAAcjpB,KAAd,CAAf;EAAA,OAA9B;EACD;;EAED,WAAO2sB,mBAAP;EACD;;EAED,WAASI,yBAAT,CACE9D,WADF,EAEEqB,iBAFF,EAGE0C,mBAHF,EAIElb,KAJF,EAKgB;EACd;EACA;EAEA,QAAMmb,UAAU,GAAG9xB,aAAa,CAAC6xB,mBAAD,CAAhC;;EAJc,UAMZ,OAAOC,UAAP,KAAsB,UANV;EAAA;EAAA;EAAA;EAAA;;EAWd,IAAa;EACX;EACA;EACA,UACE,OAAOpyB,MAAP,KAAkB,UAAlB;EAEAmyB,MAAAA,mBAAmB,CAACnyB,MAAM,CAACqyB,WAAR,CAAnB,KAA4C,WAH9C,EAIE;EACA,YAAI,CAACtE,sBAAL,EAA6B;EAC3B,gBACE,uEACE,iEADF,GAEE,4DAFF,GAGE,wDAHF,GAIE,+DALJ;EAOD;;EACDA,QAAAA,sBAAsB,GAAG,IAAzB;EACD,OAlBU;;;EAqBX,UAAKoE,mBAAD,CAA2BG,OAA3B,KAAuCF,UAA3C,EAAuD;EACrD,YAAI,CAACtE,gBAAL,EAAuB;EACrB,gBACE,8CACE,8CAFJ;EAID;;EACDA,QAAAA,gBAAgB,GAAG,IAAnB;EACD,OA7BU;EAgCX;;;EACA,UAAM+D,YAAW,GAAGO,UAAU,CAAC11B,IAAX,CAAgBy1B,mBAAhB,CAApB;;EACA,UAAIN,YAAJ,EAAiB;EACf,YAAIF,SAAS,GAAG,IAAhB;;EACA,YAAIY,KAAI,GAAGV,YAAW,CAAChM,IAAZ,EAAX;;EACA,eAAO,CAAC0M,KAAI,CAACC,IAAb,EAAmBD,KAAI,GAAGV,YAAW,CAAChM,IAAZ,EAA1B,EAA8C;EAC5C,cAAM1gB,KAAK,GAAGotB,KAAI,CAAC5zB,KAAnB;EACAgzB,UAAAA,SAAS,GAAGD,gBAAgB,CAACvsB,KAAD,EAAQwsB,SAAR,EAAmBvD,WAAnB,CAA5B;EACD;EACF;EACF;;EAED,QAAMyD,WAAW,GAAGO,UAAU,CAAC11B,IAAX,CAAgBy1B,mBAAhB,CAApB;;EAvDc,UAwDJN,WAAW,IAAI,IAxDX;EAAA;EAAA;EAAA;EAAA;;EA0Dd,QAAIC,mBAAiC,GAAG,IAAxC;EACA,QAAIC,gBAA8B,GAAG,IAArC;EAEA,QAAIT,QAAQ,GAAG7B,iBAAf;EACA,QAAIQ,eAAe,GAAG,CAAtB;EACA,QAAIuB,MAAM,GAAG,CAAb;EACA,QAAIQ,YAAY,GAAG,IAAnB;EAEA,QAAIO,IAAI,GAAGV,WAAW,CAAChM,IAAZ,EAAX;;EACA,WAEEyL,QAAQ,KAAK,IAAb,IAAqB,CAACiB,IAAI,CAACC,IAF7B,EAGEhB,MAAM,IAAIe,IAAI,GAAGV,WAAW,CAAChM,IAAZ,EAHnB,EAIE;EACA,UAAIyL,QAAQ,CAACpqB,KAAT,GAAiBsqB,MAArB,EAA6B;EAC3BQ,QAAAA,YAAY,GAAGV,QAAf;EACAA,QAAAA,QAAQ,GAAG,IAAX;EACD,OAHD,MAGO;EACLU,QAAAA,YAAY,GAAGV,QAAQ,CAAClsB,OAAxB;EACD;;EACD,UAAM4qB,QAAQ,GAAGqB,UAAU,CAACjD,WAAD,EAAckD,QAAd,EAAwBiB,IAAI,CAAC5zB,KAA7B,EAAoCsY,KAApC,CAA3B;;EACA,UAAI+Y,QAAQ,KAAK,IAAjB,EAAuB;EACrB;EACA;EACA;EACA;EACA,YAAIsB,QAAQ,KAAK,IAAjB,EAAuB;EACrBA,UAAAA,QAAQ,GAAGU,YAAX;EACD;;EACD;EACD;;EACD,UAAI/C,sBAAJ,EAA4B;EAC1B,YAAIqC,QAAQ,IAAItB,QAAQ,CAAClsB,SAAT,KAAuB,IAAvC,EAA6C;EAC3C;EACA;EACAorB,UAAAA,WAAW,CAACd,WAAD,EAAckD,QAAd,CAAX;EACD;EACF;;EACDrB,MAAAA,eAAe,GAAGF,UAAU,CAACC,QAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;EACA,UAAIO,gBAAgB,KAAK,IAAzB,EAA+B;EAC7B;EACAD,QAAAA,mBAAmB,GAAG9B,QAAtB;EACD,OAHD,MAGO;EACL;EACA;EACA;EACA;EACA+B,QAAAA,gBAAgB,CAAC3sB,OAAjB,GAA2B4qB,QAA3B;EACD;;EACD+B,MAAAA,gBAAgB,GAAG/B,QAAnB;EACAsB,MAAAA,QAAQ,GAAGU,YAAX;EACD;;EAED,QAAIO,IAAI,CAACC,IAAT,EAAe;EACb;EACAhD,MAAAA,uBAAuB,CAACpB,WAAD,EAAckD,QAAd,CAAvB;EACA,aAAOQ,mBAAP;EACD;;EAED,QAAIR,QAAQ,KAAK,IAAjB,EAAuB;EACrB;EACA;EACA,aAAO,CAACiB,IAAI,CAACC,IAAb,EAAmBhB,MAAM,IAAIe,IAAI,GAAGV,WAAW,CAAChM,IAAZ,EAApC,EAAwD;EACtD,YAAMmK,UAAQ,GAAGoB,WAAW,CAAChD,WAAD,EAAcmE,IAAI,CAAC5zB,KAAnB,EAA0BsY,KAA1B,CAA5B;;EACA,YAAI+Y,UAAQ,KAAK,IAAjB,EAAuB;EACrB;EACD;;EACDC,QAAAA,eAAe,GAAGF,UAAU,CAACC,UAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;EACA,YAAIO,gBAAgB,KAAK,IAAzB,EAA+B;EAC7B;EACAD,UAAAA,mBAAmB,GAAG9B,UAAtB;EACD,SAHD,MAGO;EACL+B,UAAAA,gBAAgB,CAAC3sB,OAAjB,GAA2B4qB,UAA3B;EACD;;EACD+B,QAAAA,gBAAgB,GAAG/B,UAAnB;EACD;;EACD,aAAO8B,mBAAP;EACD,KAvIa;;;EA0Id,QAAMnC,gBAAgB,GAAGD,oBAAoB,CAACtB,WAAD,EAAckD,QAAd,CAA7C,CA1Ic;;EA6Id,WAAO,CAACiB,IAAI,CAACC,IAAb,EAAmBhB,MAAM,IAAIe,IAAI,GAAGV,WAAW,CAAChM,IAAZ,EAApC,EAAwD;EACtD,UAAMmK,UAAQ,GAAGuB,aAAa,CAC5B5B,gBAD4B,EAE5BvB,WAF4B,EAG5BoD,MAH4B,EAI5Be,IAAI,CAAC5zB,KAJuB,EAK5BsY,KAL4B,CAA9B;;EAOA,UAAI+Y,UAAQ,KAAK,IAAjB,EAAuB;EACrB,YAAIf,sBAAJ,EAA4B;EAC1B,cAAIe,UAAQ,CAAClsB,SAAT,KAAuB,IAA3B,EAAiC;EAC/B;EACA;EACA;EACA;EACA6rB,YAAAA,gBAAgB,CAACsC,MAAjB,CACEjC,UAAQ,CAACxxB,GAAT,KAAiB,IAAjB,GAAwBgzB,MAAxB,GAAiCxB,UAAQ,CAACxxB,GAD5C;EAGD;EACF;;EACDyxB,QAAAA,eAAe,GAAGF,UAAU,CAACC,UAAD,EAAWC,eAAX,EAA4BuB,MAA5B,CAA5B;;EACA,YAAIO,gBAAgB,KAAK,IAAzB,EAA+B;EAC7BD,UAAAA,mBAAmB,GAAG9B,UAAtB;EACD,SAFD,MAEO;EACL+B,UAAAA,gBAAgB,CAAC3sB,OAAjB,GAA2B4qB,UAA3B;EACD;;EACD+B,QAAAA,gBAAgB,GAAG/B,UAAnB;EACD;EACF;;EAED,QAAIf,sBAAJ,EAA4B;EAC1B;EACA;EACAU,MAAAA,gBAAgB,CAAC1O,OAAjB,CAAyB,UAAA9b,KAAK;EAAA,eAAI+pB,WAAW,CAACd,WAAD,EAAcjpB,KAAd,CAAf;EAAA,OAA9B;EACD;;EAED,WAAO2sB,mBAAP;EACD;;EAED,WAASW,uBAAT,CACErE,WADF,EAEEqB,iBAFF,EAGEa,WAHF,EAIErZ,KAJF,EAKS;EACP;EACA;EACA,QAAIwY,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,CAACtuB,GAAlB,KAA0B/D,QAA5D,EAAsE;EACpE;EACA;EACAoyB,MAAAA,uBAAuB,CAACpB,WAAD,EAAcqB,iBAAiB,CAACrqB,OAAhC,CAAvB;EACA,UAAMqrB,QAAQ,GAAGZ,QAAQ,CAACJ,iBAAD,EAAoBa,WAApB,CAAzB;EACAG,MAAAA,QAAQ,CAACxsB,MAAT,GAAkBmqB,WAAlB;EACA,aAAOqC,QAAP;EACD,KAVM;EAYP;;;EACAjB,IAAAA,uBAAuB,CAACpB,WAAD,EAAcqB,iBAAd,CAAvB;EACA,QAAMc,OAAO,GAAGC,mBAAmB,CAACF,WAAD,EAAclC,WAAW,CAACtN,IAA1B,EAAgC7J,KAAhC,CAAnC;EACAsZ,IAAAA,OAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,WAAOmC,OAAP;EACD;;EAED,WAASmC,sBAAT,CACEtE,WADF,EAEEqB,iBAFF,EAGEjhB,OAHF,EAIEyI,KAJF,EAKS;EACP,QAAMzY,GAAG,GAAGgQ,OAAO,CAAChQ,GAApB;EACA,QAAI2G,KAAK,GAAGsqB,iBAAZ;;EACA,WAAOtqB,KAAK,KAAK,IAAjB,EAAuB;EACrB;EACA;EACA,UAAIA,KAAK,CAAC3G,GAAN,KAAcA,GAAlB,EAAuB;EACrB,gBAAQ2G,KAAK,CAAChE,GAAd;EACE,eAAK9D,QAAL;EAAe;EACb,kBAAImR,OAAO,CAACvN,IAAR,KAAiBnC,mBAArB,EAA0C;EACxC0wB,gBAAAA,uBAAuB,CAACpB,WAAD,EAAcjpB,KAAK,CAACC,OAApB,CAAvB;EACA,oBAAMqrB,QAAQ,GAAGZ,QAAQ,CAAC1qB,KAAD,EAAQqJ,OAAO,CAAC5H,KAAR,CAAcK,QAAtB,CAAzB;EACAwpB,gBAAAA,QAAQ,CAACxsB,MAAT,GAAkBmqB,WAAlB;;EACA,gBAAa;EACXqC,kBAAAA,QAAQ,CAAC9Q,YAAT,GAAwBnR,OAAO,CAACE,OAAhC;EACA+hB,kBAAAA,QAAQ,CAAC/Q,WAAT,GAAuBlR,OAAO,CAACC,MAA/B;EACD;;EACD,uBAAOgiB,QAAP;EACD;;EACD;EACD;;EACD,eAAKryB,KAAL;AACE;EAwBF;EACA;;EACA;EAAS;EACP,kBACE+G,KAAK,CAACuoB,WAAN,KAAsBlf,OAAO,CAACvN,IAA9B;EAEC+R,cAAAA,CACG2d,iCAAiC,CAACxrB,KAAD,EAAQqJ,OAAR,CAD7B,CAFR,CADF,EAME;EACAghB,gBAAAA,uBAAuB,CAACpB,WAAD,EAAcjpB,KAAK,CAACC,OAApB,CAAvB;;EACA,oBAAMqrB,UAAQ,GAAGZ,QAAQ,CAAC1qB,KAAD,EAAQqJ,OAAO,CAAC5H,KAAhB,CAAzB;;EACA6pB,gBAAAA,UAAQ,CAAChC,GAAT,GAAeF,SAAS,CAACH,WAAD,EAAcjpB,KAAd,EAAqBqJ,OAArB,CAAxB;EACAiiB,gBAAAA,UAAQ,CAACxsB,MAAT,GAAkBmqB,WAAlB;;EACA,gBAAa;EACXqC,kBAAAA,UAAQ,CAAC9Q,YAAT,GAAwBnR,OAAO,CAACE,OAAhC;EACA+hB,kBAAAA,UAAQ,CAAC/Q,WAAT,GAAuBlR,OAAO,CAACC,MAA/B;EACD;;EACD,uBAAOgiB,UAAP;EACD;;EACD;EACD;EA5DH,SADqB;;;EAgErBjB,QAAAA,uBAAuB,CAACpB,WAAD,EAAcjpB,KAAd,CAAvB;EACA;EACD,OAlED,MAkEO;EACL+pB,QAAAA,WAAW,CAACd,WAAD,EAAcjpB,KAAd,CAAX;EACD;;EACDA,MAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;EACD;;EAED,QAAIoJ,OAAO,CAACvN,IAAR,KAAiBnC,mBAArB,EAA0C;EACxC,UAAMyxB,OAAO,GAAGY,uBAAuB,CACrC3iB,OAAO,CAAC5H,KAAR,CAAcK,QADuB,EAErCmnB,WAAW,CAACtN,IAFyB,EAGrC7J,KAHqC,EAIrCzI,OAAO,CAAChQ,GAJ6B,CAAvC;EAMA+xB,MAAAA,OAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,aAAOmC,OAAP;EACD,KATD,MASO;EACL,UAAMA,SAAO,GAAGK,sBAAsB,CAACpiB,OAAD,EAAU4f,WAAW,CAACtN,IAAtB,EAA4B7J,KAA5B,CAAtC;;EACAsZ,MAAAA,SAAO,CAAC9B,GAAR,GAAcF,SAAS,CAACH,WAAD,EAAcqB,iBAAd,EAAiCjhB,OAAjC,CAAvB;EACA+hB,MAAAA,SAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,aAAOmC,SAAP;EACD;EACF;;EAED,WAASoC,qBAAT,CACEvE,WADF,EAEEqB,iBAFF,EAGEqB,MAHF,EAIE7Z,KAJF,EAKS;EACP,QAAMzY,GAAG,GAAGsyB,MAAM,CAACtyB,GAAnB;EACA,QAAI2G,KAAK,GAAGsqB,iBAAZ;;EACA,WAAOtqB,KAAK,KAAK,IAAjB,EAAuB;EACrB;EACA;EACA,UAAIA,KAAK,CAAC3G,GAAN,KAAcA,GAAlB,EAAuB;EACrB,YACE2G,KAAK,CAAChE,GAAN,KAAcjE,UAAd,IACAiI,KAAK,CAACV,SAAN,CAAgBuD,aAAhB,KAAkC8oB,MAAM,CAAC9oB,aADzC,IAEA7C,KAAK,CAACV,SAAN,CAAgBssB,cAAhB,KAAmCD,MAAM,CAACC,cAH5C,EAIE;EACAvB,UAAAA,uBAAuB,CAACpB,WAAD,EAAcjpB,KAAK,CAACC,OAApB,CAAvB;EACA,cAAMqrB,QAAQ,GAAGZ,QAAQ,CAAC1qB,KAAD,EAAQ2rB,MAAM,CAAC7pB,QAAP,IAAmB,EAA3B,CAAzB;EACAwpB,UAAAA,QAAQ,CAACxsB,MAAT,GAAkBmqB,WAAlB;EACA,iBAAOqC,QAAP;EACD,SATD,MASO;EACLjB,UAAAA,uBAAuB,CAACpB,WAAD,EAAcjpB,KAAd,CAAvB;EACA;EACD;EACF,OAdD,MAcO;EACL+pB,QAAAA,WAAW,CAACd,WAAD,EAAcjpB,KAAd,CAAX;EACD;;EACDA,MAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;EACD;;EAED,QAAMmrB,OAAO,GAAGS,qBAAqB,CAACF,MAAD,EAAS1C,WAAW,CAACtN,IAArB,EAA2B7J,KAA3B,CAArC;EACAsZ,IAAAA,OAAO,CAACtsB,MAAR,GAAiBmqB,WAAjB;EACA,WAAOmC,OAAP;EACD,GAn+B8C;EAs+B/C;EACA;;;EACA,WAASqC,oBAAT,CACExE,WADF,EAEEqB,iBAFF,EAGEX,QAHF,EAIE7X,KAJF,EAKgB;EACd;EACA;EACA;EACA;EAEA;EACA;EACA;EACA,QAAM4b,yBAAyB,GAC7B,OAAO/D,QAAP,KAAoB,QAApB,IACAA,QAAQ,KAAK,IADb,IAEAA,QAAQ,CAAC7tB,IAAT,KAAkBnC,mBAFlB,IAGAgwB,QAAQ,CAACtwB,GAAT,KAAiB,IAJnB;;EAKA,QAAIq0B,yBAAJ,EAA+B;EAC7B/D,MAAAA,QAAQ,GAAGA,QAAQ,CAACloB,KAAT,CAAeK,QAA1B;EACD,KAhBa;;;EAmBd,QAAM6rB,QAAQ,GAAG,OAAOhE,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAA9D;;EAEA,QAAIgE,QAAJ,EAAc;EACZ,cAAQhE,QAAQ,CAAC1tB,QAAjB;EACE,aAAKxC,kBAAL;EACE,iBAAOwxB,gBAAgB,CACrBsC,sBAAsB,CACpBtE,WADoB,EAEpBqB,iBAFoB,EAGpBX,QAHoB,EAIpB7X,KAJoB,CADD,CAAvB;;EAQF,aAAKpY,iBAAL;EACE,iBAAOuxB,gBAAgB,CACrBuC,qBAAqB,CACnBvE,WADmB,EAEnBqB,iBAFmB,EAGnBX,QAHmB,EAInB7X,KAJmB,CADA,CAAvB;;EAXJ;EAgCD;;EAED,QAAI,OAAO6X,QAAP,KAAoB,QAApB,IAAgC,OAAOA,QAAP,KAAoB,QAAxD,EAAkE;EAChE,aAAOsB,gBAAgB,CACrBqC,uBAAuB,CACrBrE,WADqB,EAErBqB,iBAFqB,EAGrB,KAAKX,QAHgB,EAIrB7X,KAJqB,CADF,CAAvB;EAQD;;EAED,QAAIjQ,SAAO,CAAC8nB,QAAD,CAAX,EAAuB;EACrB,aAAO8C,sBAAsB,CAC3BxD,WAD2B,EAE3BqB,iBAF2B,EAG3BX,QAH2B,EAI3B7X,KAJ2B,CAA7B;EAMD;;EAED,QAAI3W,aAAa,CAACwuB,QAAD,CAAjB,EAA6B;EAC3B,aAAOoD,yBAAyB,CAC9B9D,WAD8B,EAE9BqB,iBAF8B,EAG9BX,QAH8B,EAI9B7X,KAJ8B,CAAhC;EAMD;;EAED,QAAI6b,QAAJ,EAAc;EACZjE,MAAAA,wBAAwB,CAACT,WAAD,EAAcU,QAAd,CAAxB;EACD;;EAED,IAAa;EACX,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;EAClCC,QAAAA,kBAAkB,CAACX,WAAD,CAAlB;EACD;EACF;;EACD,QAAI,OAAOU,QAAP,KAAoB,WAApB,IAAmC,CAAC+D,yBAAxC,EAAmE;EACjE;EACA;EACA;EACA,cAAQzE,WAAW,CAACjtB,GAApB;EACE,aAAKpE,cAAL;EAAqB;EACnB,YAAa;EACX,kBAAMyH,QAAQ,GAAG4pB,WAAW,CAAC3pB,SAA7B;;EACA,kBAAID,QAAQ,CAAChD,MAAT,CAAgBuxB,eAApB,EAAqC;EACnC;EACA;EACD;EACF;EACF;EACD;EACA;EACA;;EACA,aAAK30B,KAAL;EACA,aAAKtB,iBAAL;EACA,aAAKW,UAAL;EACA,aAAKI,mBAAL;EAA0B;EAAA;EAAA;EAAA,8BAMtBqD,gBAAgB,CAACktB,WAAW,CAACntB,IAAb,CAAhB,IAAsC,WANhB;EAAA;EAAA;EAQzB;EAxBH;EA0BD,KA5Ha;;;EA+Hd,WAAOuuB,uBAAuB,CAACpB,WAAD,EAAcqB,iBAAd,CAA9B;EACD;;EAED,SAAOmD,oBAAP;EACD;;AAED,EAAO,IAAMA,oBAAoB,GAAG5D,eAAe,CAAC,IAAD,CAA5C;AACP,EAAO,IAAMgE,gBAAgB,GAAGhE,eAAe,CAAC,KAAD,CAAxC;AAEP,EAAO,SAASiE,gBAAT,CACL3uB,OADK,EAEL8L,cAFK,EAGC;EAAA,QAEJ9L,OAAO,KAAK,IAAZ,IAAoB8L,cAAc,CAACjL,KAAf,KAAyBb,OAAO,CAACa,KAFjD;EAAA;EAAA;EAAA;EAAA;;EAMN,MAAIiL,cAAc,CAACjL,KAAf,KAAyB,IAA7B,EAAmC;EACjC;EACD;;EAED,MAAI+tB,YAAY,GAAG9iB,cAAc,CAACjL,KAAlC;EACA,MAAI2pB,QAAQ,GAAGgB,oBAAoB,CAACoD,YAAD,EAAeA,YAAY,CAACtF,YAA5B,CAAnC;EACAxd,EAAAA,cAAc,CAACjL,KAAf,GAAuB2pB,QAAvB;EAEAA,EAAAA,QAAQ,CAAC7qB,MAAT,GAAkBmM,cAAlB;;EACA,SAAO8iB,YAAY,CAAC9tB,OAAb,KAAyB,IAAhC,EAAsC;EACpC8tB,IAAAA,YAAY,GAAGA,YAAY,CAAC9tB,OAA5B;EACA0pB,IAAAA,QAAQ,GAAGA,QAAQ,CAAC1pB,OAAT,GAAmB0qB,oBAAoB,CAChDoD,YADgD,EAEhDA,YAAY,CAACtF,YAFmC,CAAlD;EAIAkB,IAAAA,QAAQ,CAAC7qB,MAAT,GAAkBmM,cAAlB;EACD;;EACD0e,EAAAA,QAAQ,CAAC1pB,OAAT,GAAmB,IAAnB;EACD;;AAGD,EAAO,SAAS+tB,gBAAT,CAA0B/iB,cAA1B,EAAiD6G,KAAjD,EAAqE;EAC1E,MAAI9R,KAAK,GAAGiL,cAAc,CAACjL,KAA3B;;EACA,SAAOA,KAAK,KAAK,IAAjB,EAAuB;EACrBiuB,IAAAA,mBAAmB,CAACjuB,KAAD,EAAQ8R,KAAR,CAAnB;EACA9R,IAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;EACD;EACF;;ECv5CD,IAAMa,YAAsB,GAAI,EAAhC;EAEA,IAAM+J,oBAAyD,GAAGN,YAAY,CAC5EzJ,YAD4E,CAA9E;EAGA,IAAMotB,uBAAwD,GAAG3jB,YAAY,CAC3EzJ,YAD2E,CAA7E;EAGA,IAAMqtB,uBAEL,GAAG5jB,YAAY,CAACzJ,YAAD,CAFhB;;EAIA,SAASstB,eAAT,CAAgC3lB,CAAhC,EAA8D;EAAA,QAE1DA,CAAC,KAAK3H,YAFoD;EAAA;EAAA;EAAA;EAAA;;EAM5D,SAAQ2H,CAAR;EACD;;EAED,SAAS4lB,oBAAT,GAA2C;EACzC,MAAMC,YAAY,GAAGF,eAAe,CAACD,uBAAuB,CAAChvB,OAAzB,CAApC;EACA,SAAOmvB,YAAP;EACD;;EAED,SAASC,iBAAT,CAA2B/vB,KAA3B,EAAyCgwB,gBAAzC,EAAsE;EACpE;EACA;EACAtsB,EAAAA,IAAI,CAACisB,uBAAD,EAA0BK,gBAA1B,EAA4ChwB,KAA5C,CAAJ,CAHoE;EAKpE;;EACA0D,EAAAA,IAAI,CAACgsB,uBAAD,EAA0B1vB,KAA1B,EAAiCA,KAAjC,CAAJ,CANoE;EASpE;EACA;EACA;EACA;;EACA0D,EAAAA,IAAI,CAAC2I,oBAAD,EAAqB/J,YAArB,EAAiCtC,KAAjC,CAAJ;EACA,MAAMiwB,eAAe,GAAGhsB,kBAAkB,CAAC+rB,AAAD,CAA1C,CAdoE;;EAgBpE/jB,EAAAA,GAAG,CAACI,oBAAD,EAAqBrM,KAArB,CAAH;EACA0D,EAAAA,IAAI,CAAC2I,oBAAD,EAAqB4jB,eAArB,EAAsCjwB,KAAtC,CAAJ;EACD;;EAED,SAASkwB,gBAAT,CAA0BlwB,KAA1B,EAAwC;EACtCiM,EAAAA,GAAG,CAACI,oBAAD,EAAqBrM,KAArB,CAAH;EACAiM,EAAAA,GAAG,CAACyjB,uBAAD,EAA0B1vB,KAA1B,CAAH;EACAiM,EAAAA,GAAG,CAAC0jB,uBAAD,EAA0B3vB,KAA1B,CAAH;EACD;;EAED,SAASmwB,cAAT,GAAuC;EACrC,MAAMzyB,OAAO,GAAGkyB,eAAe,CAACvjB,oBAAkB,CAAC1L,OAApB,CAA/B;EACA,SAAOjD,OAAP;EACD;;EAED,SAAS0yB,eAAT,CAAyBpwB,KAAzB,EAA6C;EAC3C,MAAM8vB,YAAuB,GAAGF,eAAe,CAC7CD,uBAAuB,CAAChvB,OADqB,CAA/C;EAGA,MAAMjD,OAAoB,GAAGkyB,eAAe,CAACvjB,oBAAkB,CAAC1L,OAApB,CAA5C;EACA,MAAMwmB,WAAW,GAAGjjB,mBAAmB,CAACxG,OAAD,EAAUsC,KAAK,CAAC1C,IAAhB,AAAA,CAAvC,CAL2C;;EAQ3C,MAAII,OAAO,KAAKypB,WAAhB,EAA6B;EAC3B;EACD,GAV0C;EAa3C;;;EACAzjB,EAAAA,IAAI,CAACgsB,uBAAD,EAA0B1vB,KAA1B,EAAiCA,KAAjC,CAAJ;EACA0D,EAAAA,IAAI,CAAC2I,oBAAD,EAAqB8a,WAArB,EAAkCnnB,KAAlC,CAAJ;EACD;;EAED,SAASqwB,cAAT,CAAwBrwB,KAAxB,EAA4C;EAC1C;EACA;EACA,MAAI0vB,uBAAuB,CAAC/uB,OAAxB,KAAoCX,KAAxC,EAA+C;EAC7C;EACD;;EAEDiM,EAAAA,GAAG,CAACI,oBAAD,EAAqBrM,KAArB,CAAH;EACAiM,EAAAA,GAAG,CAACyjB,uBAAD,EAA0B1vB,KAA1B,CAAH;EACD;;ECrFD,IAAMswB,sBAAuC,GAAG,CAAhD;EAGA;EACA;EACA;;EACA,IAAMC,0BAA2C,GAAG,CAApD;EAIA;EACA;EACA;EACA;EACA;EACA;;AACA,EAAO,IAAMC,8BAAsD,GAAG,CAA/D;EAIP;EACA;;AACA,EAAO,IAAMC,qBAA6C,GAAG,CAAtD;AAEP,EAAO,IAAMC,mBAAiD,GAAG3kB,YAAY,CAC3EukB,sBAD2E,CAAtE;AAIP,EAAO,SAASK,kBAAT,CACLjjB,aADK,EAELkjB,IAFK,EAGI;EACT,SAAO,CAACljB,aAAa,GAAGkjB,IAAjB,MAA2B,CAAlC;EACD;AAED,EAAO,SAASC,gCAAT,CACLnjB,aADK,EAEY;EACjB,SAAOA,aAAa,GAAG6iB,0BAAvB;EACD;AAED,EAAO,SAASO,yBAAT,CACLpjB,aADK,EAELqjB,cAFK,EAGY;EACjB,SAAQrjB,aAAa,GAAG6iB,0BAAjB,GAA+CQ,cAAtD;EACD;AAED,EAAO,SAASC,yBAAT,CACLtjB,aADK,EAELujB,cAFK,EAGY;EACjB,SAAOvjB,aAAa,GAAGujB,cAAvB;EACD;AAED,EAAO,SAASC,mBAAT,CACLlxB,KADK,EAELmxB,UAFK,EAGC;EACNztB,EAAAA,IAAI,CAACgtB,mBAAD,EAAsBS,UAAtB,EAAkCnxB,KAAlC,CAAJ;EACD;AAED,EAAO,SAASoxB,kBAAT,CAA4BpxB,KAA5B,EAAgD;EACrDiM,EAAAA,GAAG,CAACykB,mBAAD,EAAsB1wB,KAAtB,CAAH;EACD;;ECfM,SAASqxB,qBAAT,CACL5kB,cADK,EAEL6kB,kBAFK,EAGI;EACT;EACA;EACA,MAAMlN,SAA+B,GAAG3X,cAAc,CAACyW,aAAvD;;EACA,MAAIkB,SAAS,KAAK,IAAlB,EAAwB;EACtB,QAAIA,SAAS,CAACmN,UAAV,KAAyB,IAA7B,EAAmC;EACjC;EACA,aAAO,IAAP;EACD;;EACD,WAAO,KAAP;EACD;;EACD,MAAMtuB,KAAK,GAAGwJ,cAAc,CAACgd,aAA7B,CAXS;;EAaT,MAAIxmB,KAAK,CAACuuB,QAAN,KAAmBhpB,SAAvB,EAAkC;EAChC,WAAO,KAAP;EACD,GAfQ;;;EAiBT,MAAIvF,KAAK,CAACwuB,0BAAN,KAAqC,IAAzC,EAA+C;EAC7C,WAAO,IAAP;EACD,GAnBQ;EAqBT;;;EACA,MAAIH,kBAAJ,EAAwB;EACtB,WAAO,KAAP;EACD,GAxBQ;;;EA0BT,SAAO,IAAP;EACD;AAED,EAAO,SAASI,kBAAT,CAA4BC,GAA5B,EAAsD;EAC3D,MAAI1xB,IAAI,GAAG0xB,GAAX;;EACA,SAAO1xB,IAAI,KAAK,IAAhB,EAAsB;EACpB,QAAIA,IAAI,CAACzC,GAAL,KAAaxD,iBAAjB,EAAoC;EAClC,UAAM2tB,KAA2B,GAAG1nB,IAAI,CAACijB,aAAzC;;EACA,UAAIyE,KAAK,KAAK,IAAd,EAAoB;EAClB,YAAM4J,UAAmC,GAAG5J,KAAK,CAAC4J,UAAlD;;EACA,YACEA,UAAU,KAAK,IAAf,IACApvB,yBAAyB,CAACovB,AAAD,CADzB,IAEAnvB,0BAA0B,CAACmvB,AAAD,CAH5B,EAIE;EACA,iBAAOtxB,IAAP;EACD;EACF;EACF,KAZD,MAYO,IACLA,IAAI,CAACzC,GAAL,KAAalD,qBAAb;EAEA;EACA2F,IAAAA,IAAI,CAACwpB,aAAL,CAAmBmI,WAAnB,KAAmCppB,SAJ9B,EAKL;EACA,UAAMqpB,UAAU,GAAG,CAAC5xB,IAAI,CAACI,KAAL,GAAaxB,UAAd,MAA8BR,OAAjD;;EACA,UAAIwzB,UAAJ,EAAgB;EACd,eAAO5xB,IAAP;EACD;EACF,KAVM,MAUA,IAAIA,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;EAC9BvB,MAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,MAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;EACA;EACD;;EACD,QAAIvB,IAAI,KAAK0xB,GAAb,EAAkB;EAChB,aAAO,IAAP;EACD;;EACD,WAAO1xB,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;EAC5B,UAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBqxB,GAA5C,EAAiD;EAC/C,eAAO,IAAP;EACD;;EACD1xB,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;;EACDL,IAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;EACAL,IAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;EACD;;EACD,SAAO,IAAP;EACD;;ECnIM,IAAMpD,SAAO;EAAG;EAAO,CAAvB;;AAGP,EAAO,IAAMyzB,SAAS;EAAG;EAAM,CAAxB;;AAGP,EAAO,IAAMC,MAAM;EAAG;EAAS,CAAxB;AACP,EAAO,IAAM/yB,SAAO;EAAG;EAAQ,CAAxB;;EC6CP,IAAIgzB,WAAoB,GAAG,KAA3B;;EAYA,SAASC,mBAAT,CAA6BjyB,KAA7B,EAAoD;EAClD,EAAwB;EACtB,WAAO,KAAP;EACD;EAOF;;EAgND,SAASkyB,4BAAT,CACElyB,KADF,EAEE+C,qBAFF,EAGEyB,WAHF,EAIW;EACT,EAAwB;EAAA;EAAA;EAAA;EAAA;EAAA;EAMvB;EAmBF;;EAED,SAAS2tB,gCAAT,CAA0CnyB,KAA1C,EAAiE;EAC/D,EAAwB;EAAA;EAAA;EAAA;EAAA;EAAA;EAMvB;EAID,MAAMqnB,YAAY,GAAGhlB,mBAAmB,CAACsD,AAAD,CAAxC;EAmCD;;EAwDD,SAASysB,iBAAT,CAA2BpyB,KAA3B,EAAkD;EAChD,EAAwB;EACtB,WAAO,KAAP;EACD;EA4CF;;EAYD,SAASqyB,cAAT,GAAmC;EACjC,SAAOL,WAAP;EACD;;ECzdD;EACA;;EACA,IAAMM,qBAAgD,GAAG,EAAzD;EAEA,IAAItS,eAAJ;;AACA,EAAa;EACX;EACAA,EAAAA,eAAa,GAAG,EAAhB;EACD;;AAED,EAAO,SAASuS,iBAAT,CAA2BC,aAA3B,EAAoE;EACzEF,EAAAA,qBAAqB,CAAC5uB,IAAtB,CAA2B8uB,aAA3B;EACD;AAED,EAAO,SAASC,2BAAT,GAA6C;EAClD,OAAK,IAAI/a,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4a,qBAAqB,CAACtoB,MAA1C,EAAkD0N,CAAC,EAAnD,EAAuD;EACrD,QAAM8a,aAAa,GAAGF,qBAAqB,CAAC5a,CAAD,CAA3C;;EACA,IAEO;EACL8a,MAAAA,aAAa,CAACE,+BAAd,GAAgD,IAAhD;EACD;EACF;;EACDJ,EAAAA,qBAAqB,CAACtoB,MAAtB,GAA+B,CAA/B;EACD;AAED,EAAO,SAAS2oB,wBAAT,CACLH,aADK,EAEwB;EAC7B,EAEO;EACL,WAAOA,aAAa,CAACE,+BAArB;EACD;EACF;AAED,EAAO,SAASE,wBAAT,CACLJ,aADK,EAELK,OAFK,EAGC;EACN,EAEO;EACLL,IAAAA,aAAa,CAACE,+BAAd,GAAgDG,OAAhD;EACD;;EACDP,EAAAA,qBAAqB,CAAC5uB,IAAtB,CAA2B8uB,aAA3B;EACD;AAED,EAAO,SAASM,6BAAT,CACLN,aADK,EAEC;EACN,EAAa;EACX,IASO;EACL,UAAIA,aAAa,CAACO,yBAAd,IAA2C,IAA/C,EAAqD;EACnDP,QAAAA,aAAa,CAACO,yBAAd,GAA0C/S,eAA1C;EACD,OAFD,MAEO,IAAIwS,aAAa,CAACO,yBAAd,KAA4C/S,eAAhD,EAA+D;EACpE,cACE,4DACE,qDAFJ;EAID;EACF;EACF;EACF;;MCKM7X,2BAAmDvQ,qBAAnDuQ;MAAwB8S,4BAA2BrjB,qBAA3BqjB;EAkC/B,IAAI+X,uCAAJ;EACA,IAAIC,+BAAJ;;AACA,EAAa;EACXA,EAAAA,+BAA+B,GAAG,EAAlC;EACAD,EAAAA,uCAAuC,GAAG,IAAIhV,GAAJ,EAA1C;EACD;;EAwBD;EACA,IAAIqD,WAAkB,GAAGrP,OAAzB;EAEA;;EACA,IAAIiO,yBAA8B,GAAI,IAAtC;EAGA;EACA;EACA;;EACA,IAAIiT,WAAwB,GAAG,IAA/B;EACA,IAAIC,kBAA+B,GAAG,IAAtC;EAGA;EACA;EACA;;EACA,IAAIC,4BAAqC,GAAG,KAA5C;EAEA;EACA;EACA;;EACA,IAAIC,0CAAmD,GAAG,KAA1D;EAEA,IAAMC,eAAe,GAAG,EAAxB;;EAGA,IAAIC,oBAA+B,GAAG,IAAtC;EAGA;EACA;;EACA,IAAIC,YAAoC,GAAG,IAA3C;EACA,IAAIC,uBAA+B,GAAG,CAAC,CAAvC;EAGA;EACA;;EACA,IAAIC,0BAAmC,GAAG,KAA1C;;EAEA,SAASC,iBAAT,GAA6B;EAC3B,EAAa;EACX,QAAMC,QAAQ,GAAKL,oBAAnB;;EAEA,QAAIC,YAAY,KAAK,IAArB,EAA2B;EACzBA,MAAAA,YAAY,GAAG,CAACI,QAAD,CAAf;EACD,KAFD,MAEO;EACLJ,MAAAA,YAAY,CAAC9vB,IAAb,CAAkBkwB,QAAlB;EACD;EACF;EACF;;EAED,SAASC,kBAAT,GAA8B;EAC5B,EAAa;EACX,QAAMD,QAAQ,GAAKL,oBAAnB;;EAEA,QAAIC,YAAY,KAAK,IAArB,EAA2B;EACzBC,MAAAA,uBAAuB;;EACvB,UAAID,YAAY,CAACC,uBAAD,CAAZ,KAA0CG,QAA9C,EAAwD;EACtDE,QAAAA,uBAAuB,CAACF,QAAD,CAAvB;EACD;EACF;EACF;EACF;;EAED,SAASG,oBAAT,CAA8BC,IAA9B,EAA2C;EACzC,EAAa;EACX,QAAIA,IAAI,KAAKxrB,SAAT,IAAsBwrB,IAAI,KAAK,IAA/B,IAAuC,CAAC5wB,KAAK,CAACC,OAAN,CAAc2wB,IAAd,CAA5C,EAAiE;EAC/D;EACA;EACA,YACE,sFACE,iDAFJ,EAGET,oBAHF,EAIE,OAAOS,IAJT;EAMD;EACF;EACF;;EAED,SAASF,uBAAT,CAAiCG,eAAjC,EAA4D;EAC1D,EAAa;EACX,QAAM5oB,aAAa,GAAG9N,gBAAgB,CAAC0iB,yBAAuB,CAAC3iB,IAAzB,CAAtC;;EACA,QAAI,CAAC01B,uCAAuC,CAAC1nB,GAAxC,CAA4CD,aAA5C,CAAL,EAAiE;EAC/D2nB,MAAAA,uCAAuC,CAACvU,GAAxC,CAA4CpT,aAA5C;;EAEA,UAAImoB,YAAY,KAAK,IAArB,EAA2B;EACzB,YAAIU,KAAK,GAAG,EAAZ;EAEA,YAAMC,iBAAiB,GAAG,EAA1B;;EAEA,aAAK,IAAIzc,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAM+b,uBAAvB,EAA+D/b,CAAC,EAAhE,EAAoE;EAClE,cAAM0c,WAAW,GAAGZ,YAAY,CAAC9b,CAAD,CAAhC;EACA,cAAM2c,WAAW,GACf3c,CAAC,KAAO+b,uBAAR,GACIQ,eADJ,GAEIG,WAHN;EAKA,cAAIzC,GAAG,GAAMja,CAAC,GAAG,CAAV,UAAgB0c,WAAvB,CAPkE;EAUlE;;EACA,iBAAOzC,GAAG,CAAC3nB,MAAJ,GAAamqB,iBAApB,EAAuC;EACrCxC,YAAAA,GAAG,IAAI,GAAP;EACD;;EAEDA,UAAAA,GAAG,IAAI0C,WAAW,GAAG,IAArB;EAEAH,UAAAA,KAAK,IAAIvC,GAAT;EACD;;EAED,cACE,qEACE,kDADF,GAEE,4FAFF,GAGE,6CAHF,GAIE,6DAJF,GAKE,IALF,GAME,6DAPJ,EAQEtmB,aARF,EASE6oB,KATF;EAWD;EACF;EACF;EACF;;EAED,SAASI,qBAAT,GAAiC;EAAA;EAAA;EAAA;EAAA;EAAA;EAUhC;;EAED,SAASC,kBAAT,CACEC,QADF,EAEEC,QAFF,EAGE;EACA,EAAa;EACX,QAAIf,0BAAJ,EAAgC;EAC9B;EACA,aAAO,KAAP;EACD;EACF;;EAED,MAAIe,QAAQ,KAAK,IAAjB,EAAuB;EACrB,IAAa;EACX,YACE,qEACE,mEADF,GAEE,yCAHJ,EAIElB,oBAJF;EAMD;;EACD,WAAO,KAAP;EACD;;EAED,EAAa;EACX;EACA;EACA,QAAIiB,QAAQ,CAACxqB,MAAT,KAAoByqB,QAAQ,CAACzqB,MAAjC,EAAyC;EACvC,YACE,uEACE,wDADF,GAEE,gBAFF,GAGE,cAJJ,EAKEupB,oBALF,QAMMkB,QAAQ,CAACjX,IAAT,CAAc,IAAd,CANN,cAOMgX,QAAQ,CAAChX,IAAT,CAAc,IAAd,CAPN;EASD;EACF;;EACD,OAAK,IAAI9F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+c,QAAQ,CAACzqB,MAAb,IAAuB0N,CAAC,GAAG8c,QAAQ,CAACxqB,MAApD,EAA4D0N,CAAC,EAA7D,EAAiE;EAC/D,QAAI2D,QAAE,CAACmZ,QAAQ,CAAC9c,CAAD,CAAT,EAAc+c,QAAQ,CAAC/c,CAAD,CAAtB,CAAN,EAAkC;EAChC;EACD;;EACD,WAAO,KAAP;EACD;;EACD,SAAO,IAAP;EACD;;AAED,EAAO,SAASgd,eAAT,CACL/zB,OADK,EAEL8L,cAFK,EAGLjC,SAHK,EAILvH,KAJK,EAKL0xB,SALK,EAMLC,eANK,EAOA;EACLvT,EAAAA,WAAW,GAAGuT,eAAd;EACA3U,EAAAA,yBAAuB,GAAGxT,cAA1B;;EAEA,EAAa;EACX+mB,IAAAA,YAAY,GACV7yB,OAAO,KAAK,IAAZ,GACMA,OAAO,CAACk0B,eADd,GAEI,IAHN;EAIApB,IAAAA,uBAAuB,GAAG,CAAC,CAA3B,CALW;;EAOXC,IAAAA,0BAA0B,GACxB/yB,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACrD,IAAR,KAAiBmP,cAAc,CAACnP,IADtD;EAED;;EAEDmP,EAAAA,cAAc,CAACyW,aAAf,GAA+B,IAA/B;EACAzW,EAAAA,cAAc,CAAC+W,WAAf,GAA6B,IAA7B;EACA/W,EAAAA,cAAc,CAAC6G,KAAf,GAAuBtB,OAAvB,CAjBK;EAoBL;EACA;EAEA;EAEA;EACA;EACA;EAEA;EACA;EACA;;EACA,EAAa;EACX,QAAIrR,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACuiB,aAAR,KAA0B,IAAlD,EAAwD;EACtD/a,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm0B,4BAAjC;EACD,KAFD,MAEO,IAAItB,YAAY,KAAK,IAArB,EAA2B;EAChC;EACA;EACA;EACA;EACA;EACArrB,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo0B,wCAAjC;EACD,KAPM,MAOA;EACL5sB,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCq0B,2BAAjC;EACD;EACF,GAbD;;EAoBA,MAAI1xB,QAAQ,GAAGkH,SAAS,CAACvH,KAAD,EAAQ0xB,SAAR,CAAxB,CApDK;;EAuDL,MAAItB,0CAAJ,EAAgD;EAC9C;EACA;EACA,QAAI4B,iBAAyB,GAAG,CAAhC;;EACA,OAAG;EACD5B,MAAAA,0CAA0C,GAAG,KAA7C;;EADC,YAGC4B,iBAAiB,GAAG3B,eAHrB;EAAA;EAAA;EAAA;EAAA;;EAQD2B,MAAAA,iBAAiB,IAAI,CAArB;;EACA,MAAa;EACX;EACA;EACAvB,QAAAA,0BAA0B,GAAG,KAA7B;EACD,OAbA;;;EAgBDR,MAAAA,WAAW,GAAG,IAAd;EACAC,MAAAA,kBAAkB,GAAG,IAArB;EAEA1mB,MAAAA,cAAc,CAAC+W,WAAf,GAA6B,IAA7B;;EAEA,MAAa;EACX;EACAiQ,QAAAA,uBAAuB,GAAG,CAAC,CAA3B;EACD;;EAEDtrB,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiC0O,CAC7B6lB,8BADoC,CAAxC;EAIA5xB,MAAAA,QAAQ,GAAGkH,SAAS,CAACvH,KAAD,EAAQ0xB,SAAR,CAApB;EACD,KA/BD,QA+BStB,0CA/BT;EAgCD,GA3FI;EA8FL;;;EACAlrB,EAAAA,wBAAsB,CAACxH,OAAvB,GAAiCw0B,qBAAjC;;EAEA,EAAa;EACX1oB,IAAAA,cAAc,CAACooB,eAAf,GAAiCrB,YAAjC;EACD,GAnGI;EAsGL;;;EACA,MAAM4B,oBAAoB,GACxBlC,WAAW,KAAK,IAAhB,IAAwBA,WAAW,CAAChR,IAAZ,KAAqB,IAD/C;EAGAb,EAAAA,WAAW,GAAGrP,OAAd;EACAiO,EAAAA,yBAAuB,GAAI,IAA3B;EAEAiT,EAAAA,WAAW,GAAG,IAAd;EACAC,EAAAA,kBAAkB,GAAG,IAArB;;EAEA,EAAa;EACXI,IAAAA,oBAAoB,GAAG,IAAvB;EACAC,IAAAA,YAAY,GAAG,IAAf;EACAC,IAAAA,uBAAuB,GAAG,CAAC,CAA3B;EACD;;EAEDL,EAAAA,4BAA4B,GAAG,KAA/B;;EAtHK,OAyHH,CAACgC,oBAzHE;EAAA;EAAA;EAAA;EAAA;;EA8HL,SAAO9xB,QAAP;EACD;AAED,EAAO,SAAS+xB,YAAT,CACL10B,OADK,EAEL8L,cAFK,EAGL6G,KAHK,EAIL;EACA7G,EAAAA,cAAc,CAAC+W,WAAf,GAA6B7iB,OAAO,CAAC6iB,WAArC;EACA/W,EAAAA,cAAc,CAACpM,KAAf,IAAwB,EAAEi1B,OAAa,GAAGC,MAAlB,CAAxB;EACA50B,EAAAA,OAAO,CAAC2S,KAAR,GAAgB+D,WAAW,CAAC1W,OAAO,CAAC2S,KAAT,EAAgBA,KAAhB,CAA3B;EACD;AAED,EAAO,SAASkiB,oBAAT,GAAsC;EAC3C;EACA;EACArtB,EAAAA,wBAAsB,CAACxH,OAAvB,GAAiCw0B,qBAAjC;;EAEA,MAAI/B,4BAAJ,EAAkC;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,QAAItkB,IAAiB,GAAGmR,yBAAuB,CAACiD,aAAhD;;EACA,WAAOpU,IAAI,KAAK,IAAhB,EAAsB;EACpB,UAAM2L,KAAK,GAAG3L,IAAI,CAAC2L,KAAnB;;EACA,UAAIA,KAAK,KAAK,IAAd,EAAoB;EAClBA,QAAAA,KAAK,CAAC6I,OAAN,GAAgB,IAAhB;EACD;;EACDxU,MAAAA,IAAI,GAAGA,IAAI,CAACoT,IAAZ;EACD;;EACDkR,IAAAA,4BAA4B,GAAG,KAA/B;EACD;;EAED/R,EAAAA,WAAW,GAAGrP,OAAd;EACAiO,EAAAA,yBAAuB,GAAI,IAA3B;EAEAiT,EAAAA,WAAW,GAAG,IAAd;EACAC,EAAAA,kBAAkB,GAAG,IAArB;;EAEA,EAAa;EACXK,IAAAA,YAAY,GAAG,IAAf;EACAC,IAAAA,uBAAuB,GAAG,CAAC,CAA3B;EAEAF,IAAAA,oBAAoB,GAAG,IAAvB;EAEAkC,IAAAA,kCAAkC,GAAG,KAArC;EACD;;EAEDpC,EAAAA,0CAA0C,GAAG,KAA7C;EACD;;EAED,SAASqC,uBAAT,GAAyC;EACvC,MAAM5mB,IAAU,GAAG;EACjBoU,IAAAA,aAAa,EAAE,IADE;EAGjBD,IAAAA,SAAS,EAAE,IAHM;EAIjB0S,IAAAA,SAAS,EAAE,IAJM;EAKjBlb,IAAAA,KAAK,EAAE,IALU;EAOjByH,IAAAA,IAAI,EAAE;EAPW,GAAnB;;EAUA,MAAIiR,kBAAkB,KAAK,IAA3B,EAAiC;EAC/B;EACAlT,IAAAA,yBAAuB,CAACiD,aAAxB,GAAwCiQ,kBAAkB,GAAGrkB,IAA7D;EACD,GAHD,MAGO;EACL;EACAqkB,IAAAA,kBAAkB,GAAGA,kBAAkB,CAACjR,IAAnB,GAA0BpT,IAA/C;EACD;;EACD,SAAOqkB,kBAAP;EACD;;EAED,SAASyC,wBAAT,GAA0C;EACxC;EACA;EACA;EACA;EACA;EACA,MAAIC,eAAJ;;EACA,MAAI3C,WAAW,KAAK,IAApB,EAA0B;EACxB,QAAMvyB,OAAO,GAAGsf,yBAAuB,CAAC9f,SAAxC;;EACA,QAAIQ,OAAO,KAAK,IAAhB,EAAsB;EACpBk1B,MAAAA,eAAe,GAAGl1B,OAAO,CAACuiB,aAA1B;EACD,KAFD,MAEO;EACL2S,MAAAA,eAAe,GAAG,IAAlB;EACD;EACF,GAPD,MAOO;EACLA,IAAAA,eAAe,GAAG3C,WAAW,CAAChR,IAA9B;EACD;;EAED,MAAI4T,sBAAJ;;EACA,MAAI3C,kBAAkB,KAAK,IAA3B,EAAiC;EAC/B2C,IAAAA,sBAAsB,GAAG7V,yBAAuB,CAACiD,aAAjD;EACD,GAFD,MAEO;EACL4S,IAAAA,sBAAsB,GAAG3C,kBAAkB,CAACjR,IAA5C;EACD;;EAED,MAAI4T,sBAAsB,KAAK,IAA/B,EAAqC;EACnC;EACA3C,IAAAA,kBAAkB,GAAG2C,sBAArB;EACAA,IAAAA,sBAAsB,GAAG3C,kBAAkB,CAACjR,IAA5C;EAEAgR,IAAAA,WAAW,GAAG2C,eAAd;EACD,GAND,MAMO;EACL;EADK,UAIHA,eAAe,KAAK,IAJjB;EAAA;EAAA;EAAA;EAAA;;EAOL3C,IAAAA,WAAW,GAAG2C,eAAd;EAEA,QAAME,OAAa,GAAG;EACpB7S,MAAAA,aAAa,EAAEgQ,WAAW,CAAChQ,aADP;EAGpBD,MAAAA,SAAS,EAAEiQ,WAAW,CAACjQ,SAHH;EAIpB0S,MAAAA,SAAS,EAAEzC,WAAW,CAACyC,SAJH;EAKpBlb,MAAAA,KAAK,EAAEyY,WAAW,CAACzY,KALC;EAOpByH,MAAAA,IAAI,EAAE;EAPc,KAAtB;;EAUA,QAAIiR,kBAAkB,KAAK,IAA3B,EAAiC;EAC/B;EACAlT,MAAAA,yBAAuB,CAACiD,aAAxB,GAAwCiQ,kBAAkB,GAAG4C,OAA7D;EACD,KAHD,MAGO;EACL;EACA5C,MAAAA,kBAAkB,GAAGA,kBAAkB,CAACjR,IAAnB,GAA0B6T,OAA/C;EACD;EACF;;EACD,SAAO5C,kBAAP;EACD;;EAED,SAAS6C,kCAAT,GAA4E;EAC1E,SAAO;EACLtK,IAAAA,UAAU,EAAE;EADP,GAAP;EAGD;;EAED,SAASuK,iBAAT,CAA8BtO,KAA9B,EAAwCuO,MAAxC,EAAwE;EACtE;EACA,SAAO,OAAOA,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACvO,KAAD,CAArC,GAA+CuO,MAAtD;EACD;;EAED,SAASC,YAAT,CACEC,OADF,EAEEC,UAFF,EAGEn4B,IAHF,EAIoB;EAClB,MAAM4Q,IAAI,GAAG4mB,uBAAuB,EAApC;EACA,MAAIY,YAAJ;;EACA,MAAIp4B,IAAI,KAAKsK,SAAb,EAAwB;EACtB8tB,IAAAA,YAAY,GAAGp4B,IAAI,CAACm4B,UAAD,CAAnB;EACD,GAFD,MAEO;EACLC,IAAAA,YAAY,GAAKD,UAAjB;EACD;;EACDvnB,EAAAA,IAAI,CAACoU,aAAL,GAAqBpU,IAAI,CAACmU,SAAL,GAAiBqT,YAAtC;EACA,MAAM7b,KAAK,GAAI3L,IAAI,CAAC2L,KAAL,GAAa;EAC1B6I,IAAAA,OAAO,EAAE,IADiB;EAE1BiT,IAAAA,QAAQ,EAAE,IAFgB;EAG1BC,IAAAA,mBAAmB,EAAEJ,OAHK;EAI1BK,IAAAA,iBAAiB,EAAGH;EAJM,GAA5B;EAMA,MAAMC,QAAqB,GAAI9b,KAAK,CAAC8b,QAAN,GAAkBG,cAAc,CAACnrB,IAAf,CAC/C,IAD+C,EAE/C0U,yBAF+C,EAG/CxF,KAH+C,CAAjD;EAKA,SAAO,CAAC3L,IAAI,CAACoU,aAAN,EAAqBqT,QAArB,CAAP;EACD;;EAED,SAASI,aAAT,CACEP,OADF,EAEEC,UAFF,EAGEn4B,IAHF,EAIoB;EAClB,MAAM4Q,IAAI,GAAG8mB,wBAAwB,EAArC;EACA,MAAMnb,KAAK,GAAG3L,IAAI,CAAC2L,KAAnB;;EAFkB,QAIhBA,KAAK,KAAK,IAJM;EAAA;EAAA;EAAA;EAAA;;EAQlBA,EAAAA,KAAK,CAAC+b,mBAAN,GAA4BJ,OAA5B;EAEA,MAAMz1B,OAAa,GAAIuyB,WAAvB,CAVkB;;EAalB,MAAIyC,SAAS,GAAGh1B,OAAO,CAACg1B,SAAxB,CAbkB;;EAgBlB,MAAMpR,YAAY,GAAG9J,KAAK,CAAC6I,OAA3B;;EACA,MAAIiB,YAAY,KAAK,IAArB,EAA2B;EACzB;EACA;EACA,QAAIoR,SAAS,KAAK,IAAlB,EAAwB;EACtB;EACA,UAAMiB,SAAS,GAAGjB,SAAS,CAACzT,IAA5B;EACA,UAAM2U,YAAY,GAAGtS,YAAY,CAACrC,IAAlC;EACAyT,MAAAA,SAAS,CAACzT,IAAV,GAAiB2U,YAAjB;EACAtS,MAAAA,YAAY,CAACrC,IAAb,GAAoB0U,SAApB;EACD;;EACD,IAAa;EACX,UAAIj2B,OAAO,CAACg1B,SAAR,KAAsBA,SAA1B,EAAqC;EACnC;EACA;EACA,cACE,oEACE,yBAFJ;EAID;EACF;;EACDh1B,IAAAA,OAAO,CAACg1B,SAAR,GAAoBA,SAAS,GAAGpR,YAAhC;EACA9J,IAAAA,KAAK,CAAC6I,OAAN,GAAgB,IAAhB;EACD;;EAED,MAAIqS,SAAS,KAAK,IAAlB,EAAwB;EACtB;EACA,QAAMmB,KAAK,GAAGnB,SAAS,CAACzT,IAAxB;EACA,QAAIyC,QAAQ,GAAGhkB,OAAO,CAACsiB,SAAvB;EAEA,QAAI4B,YAAY,GAAG,IAAnB;EACA,QAAIkS,iBAAiB,GAAG,IAAxB;EACA,QAAIC,gBAAgB,GAAG,IAAvB;EACA,QAAIlV,MAAM,GAAGgV,KAAb;;EACA,OAAG;EACD,UAAMlf,UAAU,GAAGkK,MAAM,CAACtM,IAA1B;;EACA,UAAI,CAAC0B,eAAe,CAACmK,WAAD,EAAczJ,UAAd,CAApB,EAA+C;EAC7C;EACA;EACA;EACA,YAAM+L,KAAmB,GAAG;EAC1BnO,UAAAA,IAAI,EAAEoC,UADoB;EAE1Bse,UAAAA,MAAM,EAAEpU,MAAM,CAACoU,MAFW;EAG1Be,UAAAA,YAAY,EAAEnV,MAAM,CAACmV,YAHK;EAI1BC,UAAAA,UAAU,EAAEpV,MAAM,CAACoV,UAJO;EAK1BhV,UAAAA,IAAI,EAAG;EALmB,SAA5B;;EAOA,YAAI8U,gBAAgB,KAAK,IAAzB,EAA+B;EAC7BD,UAAAA,iBAAiB,GAAGC,gBAAgB,GAAGrT,KAAvC;EACAkB,UAAAA,YAAY,GAAGF,QAAf;EACD,SAHD,MAGO;EACLqS,UAAAA,gBAAgB,GAAGA,gBAAgB,CAAC9U,IAAjB,GAAwByB,KAA3C;EACD,SAhB4C;EAkB7C;EACA;;;EACA1D,QAAAA,yBAAuB,CAAC3M,KAAxB,GAAgC8D,UAAU,CACxC6I,yBAAuB,CAAC3M,KADgB,EAExCsE,UAFwC,CAA1C;EAIAqN,QAAAA,sBAAsB,CAACrN,UAAD,CAAtB;EACD,OAzBD,MAyBO;EACL;EAEA,YAAIof,gBAAgB,KAAK,IAAzB,EAA+B;EAC7B,cAAMrT,MAAmB,GAAG;EAC1B;EACA;EACA;EACAnO,YAAAA,IAAI,EAAEvD,MAJoB;EAK1BikB,YAAAA,MAAM,EAAEpU,MAAM,CAACoU,MALW;EAM1Be,YAAAA,YAAY,EAAEnV,MAAM,CAACmV,YANK;EAO1BC,YAAAA,UAAU,EAAEpV,MAAM,CAACoV,UAPO;EAQ1BhV,YAAAA,IAAI,EAAG;EARmB,WAA5B;EAUA8U,UAAAA,gBAAgB,GAAGA,gBAAgB,CAAC9U,IAAjB,GAAwByB,MAA3C;EACD,SAfI;;;EAkBL,YAAI7B,MAAM,CAACmV,YAAP,KAAwBb,OAA5B,EAAqC;EACnC;EACA;EACAzR,UAAAA,QAAQ,GAAK7C,MAAM,CAACoV,UAApB;EACD,SAJD,MAIO;EACL,cAAMhB,MAAM,GAAGpU,MAAM,CAACoU,MAAtB;EACAvR,UAAAA,QAAQ,GAAGyR,OAAO,CAACzR,QAAD,EAAWuR,MAAX,CAAlB;EACD;EACF;;EACDpU,MAAAA,MAAM,GAAGA,MAAM,CAACI,IAAhB;EACD,KAvDD,QAuDSJ,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAKgV,KAvDvC;;EAyDA,QAAIE,gBAAgB,KAAK,IAAzB,EAA+B;EAC7BnS,MAAAA,YAAY,GAAGF,QAAf;EACD,KAFD,MAEO;EACLqS,MAAAA,gBAAgB,CAAC9U,IAAjB,GAAyB6U,iBAAzB;EACD,KAtEqB;EAyEtB;;;EACA,QAAI,CAAC1b,QAAE,CAACsJ,QAAD,EAAW7V,IAAI,CAACoU,aAAhB,CAAP,EAAuC;EACrCd,MAAAA,gCAAgC;EACjC;;EAEDtT,IAAAA,IAAI,CAACoU,aAAL,GAAqByB,QAArB;EACA7V,IAAAA,IAAI,CAACmU,SAAL,GAAiB4B,YAAjB;EACA/V,IAAAA,IAAI,CAAC6mB,SAAL,GAAiBqB,gBAAjB;EAEAvc,IAAAA,KAAK,CAACgc,iBAAN,GAA0B9R,QAA1B;EACD;;EAED,MAAM4R,QAAqB,GAAI9b,KAAK,CAAC8b,QAArC;EACA,SAAO,CAACznB,IAAI,CAACoU,aAAN,EAAqBqT,QAArB,CAAP;EACD;;EAED,SAASY,eAAT,CACEf,OADF,EAEEC,UAFF,EAGEn4B,IAHF,EAIoB;EAClB,MAAM4Q,IAAI,GAAG8mB,wBAAwB,EAArC;EACA,MAAMnb,KAAK,GAAG3L,IAAI,CAAC2L,KAAnB;;EAFkB,QAIhBA,KAAK,KAAK,IAJM;EAAA;EAAA;EAAA;EAAA;;EAQlBA,EAAAA,KAAK,CAAC+b,mBAAN,GAA4BJ,OAA5B,CARkB;EAWlB;;EACA,MAAMG,QAAqB,GAAI9b,KAAK,CAAC8b,QAArC;EACA,MAAMa,qBAAqB,GAAG3c,KAAK,CAAC6I,OAApC;EACA,MAAIqB,QAAQ,GAAG7V,IAAI,CAACoU,aAApB;;EACA,MAAIkU,qBAAqB,KAAK,IAA9B,EAAoC;EAClC;EACA3c,IAAAA,KAAK,CAAC6I,OAAN,GAAgB,IAAhB;EAEA,QAAM+T,sBAAsB,GAAGD,qBAAqB,CAAClV,IAArD;EACA,QAAIJ,MAAM,GAAGuV,sBAAb;;EACA,OAAG;EACD;EACA;EACA;EACA,UAAMnB,MAAM,GAAGpU,MAAM,CAACoU,MAAtB;EACAvR,MAAAA,QAAQ,GAAGyR,OAAO,CAACzR,QAAD,EAAWuR,MAAX,CAAlB;EACApU,MAAAA,MAAM,GAAGA,MAAM,CAACI,IAAhB;EACD,KAPD,QAOSJ,MAAM,KAAKuV,sBAPpB,EANkC;EAgBlC;;;EACA,QAAI,CAAChc,QAAE,CAACsJ,QAAD,EAAW7V,IAAI,CAACoU,aAAhB,CAAP,EAAuC;EACrCd,MAAAA,gCAAgC;EACjC;;EAEDtT,IAAAA,IAAI,CAACoU,aAAL,GAAqByB,QAArB,CArBkC;EAuBlC;EACA;EACA;;EACA,QAAI7V,IAAI,CAAC6mB,SAAL,KAAmB,IAAvB,EAA6B;EAC3B7mB,MAAAA,IAAI,CAACmU,SAAL,GAAiB0B,QAAjB;EACD;;EAEDlK,IAAAA,KAAK,CAACgc,iBAAN,GAA0B9R,QAA1B;EACD;;EACD,SAAO,CAACA,QAAD,EAAW4R,QAAX,CAAP;EACD;;EAWD,SAASe,gCAAT,CACEnoB,IADF,EAEE7G,MAFF,EAGEivB,WAHF,EAIY;EACV,EAAa;EACXzE,IAAAA,6BAA6B,CAACxqB,MAAD,CAA7B;EACD;;EAED,MAAMkvB,UAAU,GAAGlvB,MAAM,CAACmvB,WAA1B;EACA,MAAM5E,OAAO,GAAG2E,UAAU,CAAClvB,MAAM,CAACyC,OAAR,CAA1B,CANU;;EASV,MAAI2sB,sBAAsB,GAAG,KAA7B,CATU;EAYV;EACA;;EACA,MAAMC,oBAAoB,GAAGhF,wBAAwB,CAACrqB,MAAD,CAArD;;EACA,MAAIqvB,oBAAoB,KAAK,IAA7B,EAAmC;EACjC;EACA;EACAD,IAAAA,sBAAsB,GAAGC,oBAAoB,KAAK9E,OAAlD;EACD,GAJD,MAIO;EACL;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA6E,IAAAA,sBAAsB,GAAGxgB,eAAe,CACtCmK,WADsC,EAEtClS,IAAI,CAAC+I,gBAFiC,CAAxC;;EAKA,QAAIwf,sBAAJ,EAA4B;EAC1B;EACA;EACA;EACA9E,MAAAA,wBAAwB,CAACtqB,MAAD,EAASuqB,OAAT,CAAxB;EACD;EACF;;EAED,MAAI6E,sBAAJ,EAA4B;EAC1B,QAAME,QAAQ,GAAGL,WAAW,CAACjvB,MAAM,CAACyC,OAAR,CAA5B;;EACA,IAAa;EACX,UAAI,OAAO6sB,QAAP,KAAoB,UAAxB,EAAoC;EAClC,cACE,wEACE,4DAFJ;EAID;EACF;;EACD,WAAOA,QAAP;EACD,GAXD,MAWO;EACL;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACArF,IAAAA,iBAAiB,CAACjqB,MAAD,CAAjB;;EAVK;EAAA;EAAA;EAAA;EAAA;EAgBN;EACF;;EAED,SAASuvB,gBAAT,CACE/oB,IADF,EAEExG,MAFF,EAGEivB,WAHF,EAIEO,SAJF,EAKY;EACV,MAAM3oB,IAAI,GAAK4oB,qBAAqB,EAApC;;EADU,QAGR5oB,IAAI,KAAK,IAHD;EAAA;EAAA;EAAA;EAAA;;EAOV,MAAMqoB,UAAU,GAAGlvB,MAAM,CAACmvB,WAA1B;EACA,MAAM5E,OAAO,GAAG2E,UAAU,CAAClvB,MAAM,CAACyC,OAAR,CAA1B;EAEA,MAAMitB,UAAU,GAAG7vB,wBAAsB,CAACxH,OAA1C,CAVU;;EAAA,6BAa2Bq3B,UAAU,CAACC,QAAX,CAAoB;EAAA,WACvDX,gCAAgC,CAACnoB,IAAD,EAAO7G,MAAP,EAAeivB,WAAf,CADuB;EAAA,GAApB,CAb3B;EAAA,MAaLW,eAbK;EAAA,MAaYC,WAbZ;;EAgBV,MAAIP,QAAQ,GAAGM,eAAf,CAhBU;EAmBV;;EACA,MAAME,SAAS,GAAKjF,kBAApB;EAEA,MAAMjQ,aAAa,GAAKpU,IAAI,CAACoU,aAA7B;EAIA,MAAMyC,IAAI,GAAGzC,aAAa,CAACyC,IAA3B;EACA,MAAM0S,eAAe,GAAG1S,IAAI,CAAC4R,WAA7B;EACA,MAAMe,UAAU,GAAGpV,aAAa,CAAC5a,MAAjC;EACA,MAAMiwB,aAAa,GAAGrV,aAAa,CAAC4U,SAApC;EAEA,MAAM93B,KAAK,GAAGigB,yBAAd;EAEAnR,EAAAA,IAAI,CAACoU,aAAL,GAAsB;EACpByC,IAAAA,IAAI,EAAJA,IADoB;EAEpBrd,IAAAA,MAAM,EAANA,MAFoB;EAGpBwvB,IAAAA,SAAS,EAATA;EAHoB,GAAtB,CAjCU;;EAwCVE,EAAAA,UAAU,CAACQ,SAAX,CAAqB,YAAM;EACzB7S,IAAAA,IAAI,CAAC4R,WAAL,GAAmBA,WAAnB,CADyB;EAIzB;EACA;EACA;;EACA5R,IAAAA,IAAI,CAACwS,WAAL,GAAmBA,WAAnB,CAPyB;;EAUzB,QAAMM,eAAe,GAAGjB,UAAU,CAAClvB,MAAM,CAACyC,OAAR,CAAlC;;EACA,QAAI,CAACsQ,QAAE,CAACwX,OAAD,EAAU4F,eAAV,CAAP,EAAmC;EACjC,UAAMC,gBAAgB,GAAGnB,WAAW,CAACjvB,MAAM,CAACyC,OAAR,CAApC;;EACA,MAAa;EACX,YAAI,OAAO2tB,gBAAP,KAA4B,UAAhC,EAA4C;EAC1C,gBACE,wEACE,4DAFJ;EAID;EACF;;EAED,UAAI,CAACrd,QAAE,CAACuc,QAAD,EAAWc,gBAAX,CAAP,EAAqC;EACnCP,QAAAA,WAAW,CAACO,gBAAD,CAAX;EAEA,YAAMljB,IAAI,GAAGqR,iBAAiB,CAAC7mB,KAAD,CAA9B;EACAiY,QAAAA,mBAAmB,CAAC9I,IAAD,EAAOqG,IAAP,CAAnB;EACD,OAhBgC;EAkBjC;EACA;;;EACA8C,MAAAA,iBAAiB,CAACnJ,IAAD,EAAOA,IAAI,CAAC+I,gBAAZ,CAAjB;EACD;EACF,GAjCD,EAiCG,CAACqf,WAAD,EAAcjvB,MAAd,EAAsBwvB,SAAtB,CAjCH,EAxCU;;EA4EVE,EAAAA,UAAU,CAACQ,SAAX,CAAqB,YAAM;EACzB,QAAMG,YAAY,GAAG,YAAM;EACzB,UAAMC,iBAAiB,GAAGjT,IAAI,CAAC4R,WAA/B;EACA,UAAMsB,iBAAiB,GAAGlT,IAAI,CAACwS,WAA/B;;EAEA,UAAI;EACFU,QAAAA,iBAAiB,CAACD,iBAAiB,CAACtwB,MAAM,CAACyC,OAAR,CAAlB,CAAjB,CADE;;EAIF,YAAMyK,IAAI,GAAGqR,iBAAiB,CAAC7mB,KAAD,CAA9B;EAEAiY,QAAAA,mBAAmB,CAAC9I,IAAD,EAAOqG,IAAP,CAAnB;EACD,OAPD,CAOE,OAAOtd,KAAP,EAAc;EACd;EACA;EACA;EACA;EACA2gC,QAAAA,iBAAiB,CACd,YAAM;EACL,gBAAM3gC,KAAN;EACD,SAHc,CAAjB;EAKD;EACF,KAtBD;;EAwBA,QAAM4gC,WAAW,GAAGhB,SAAS,CAACxvB,MAAM,CAACyC,OAAR,EAAiB4tB,YAAjB,CAA7B;;EACA,IAAa;EACX,UAAI,OAAOG,WAAP,KAAuB,UAA3B,EAAuC;EACrC,cACE,wEADF;EAGD;EACF;;EAED,WAAOA,WAAP;EACD,GAnCD,EAmCG,CAACxwB,MAAD,EAASwvB,SAAT,CAnCH,EA5EU;EAkHV;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,MACE,CAACzc,QAAE,CAACgd,eAAD,EAAkBd,WAAlB,CAAH,IACA,CAAClc,QAAE,CAACid,UAAD,EAAahwB,MAAb,CADH,IAEA,CAAC+S,QAAE,CAACkd,aAAD,EAAgBT,SAAhB,CAHL,EAIE;EACA;EACA;EACA;EACA;EACA,QAAMiB,QAAQ,GAAG;EACfzV,MAAAA,OAAO,EAAE,IADM;EAEfiT,MAAAA,QAAQ,EAAE,IAFK;EAGfC,MAAAA,mBAAmB,EAAEP,iBAHN;EAIfQ,MAAAA,iBAAiB,EAAEmB;EAJJ,KAAjB;EAMAmB,IAAAA,QAAQ,CAACxC,QAAT,GAAoB4B,WAAW,GAAIzB,cAAc,CAACnrB,IAAf,CACjC,IADiC,EAEjC0U,yBAFiC,EAGjC8Y,QAHiC,CAAnC;EAKAX,IAAAA,SAAS,CAAC3d,KAAV,GAAkBse,QAAlB;EACAX,IAAAA,SAAS,CAACzC,SAAV,GAAsB,IAAtB;EACAiC,IAAAA,QAAQ,GAAGN,gCAAgC,CAACnoB,IAAD,EAAO7G,MAAP,EAAeivB,WAAf,CAA3C;EACAa,IAAAA,SAAS,CAAClV,aAAV,GAA0BkV,SAAS,CAACnV,SAAV,GAAsB2U,QAAhD;EACD;;EAED,SAAOA,QAAP;EACD;;EAED,SAASoB,kBAAT,CACE1wB,MADF,EAEEivB,WAFF,EAGEO,SAHF,EAIY;EACV,MAAMhpB,IAAI,GAAG4mB,uBAAuB,EAApC;EACA5mB,EAAAA,IAAI,CAACoU,aAAL,GAAsB;EACpByC,IAAAA,IAAI,EAAE;EACJ4R,MAAAA,WAAW,EAAXA,WADI;EAEJY,MAAAA,WAAW,EAAG;EAFV,KADc;EAKpB7vB,IAAAA,MAAM,EAANA,MALoB;EAMpBwvB,IAAAA,SAAS,EAATA;EANoB,GAAtB;EAQA,SAAOD,gBAAgB,CAAC/oB,IAAD,EAAOxG,MAAP,EAAeivB,WAAf,EAA4BO,SAA5B,CAAvB;EACD;;EAED,SAASmB,mBAAT,CACE3wB,MADF,EAEEivB,WAFF,EAGEO,SAHF,EAIY;EACV,MAAMhpB,IAAI,GAAG8mB,wBAAwB,EAArC;EACA,SAAOiC,gBAAgB,CAAC/oB,IAAD,EAAOxG,MAAP,EAAeivB,WAAf,EAA4BO,SAA5B,CAAvB;EACD;;EAED,SAASoB,UAAT,CACE5C,YADF,EAEsC;EACpC,MAAMxnB,IAAI,GAAG4mB,uBAAuB,EAApC;;EACA,MAAI,OAAOY,YAAP,KAAwB,UAA5B,EAAwC;EACtC;EACAA,IAAAA,YAAY,GAAGA,YAAY,EAA3B;EACD;;EACDxnB,EAAAA,IAAI,CAACoU,aAAL,GAAqBpU,IAAI,CAACmU,SAAL,GAAiBqT,YAAtC;EACA,MAAM7b,KAAK,GAAI3L,IAAI,CAAC2L,KAAL,GAAa;EAC1B6I,IAAAA,OAAO,EAAE,IADiB;EAE1BiT,IAAAA,QAAQ,EAAE,IAFgB;EAG1BC,IAAAA,mBAAmB,EAAEP,iBAHK;EAI1BQ,IAAAA,iBAAiB,EAAGH;EAJM,GAA5B;EAMA,MAAMC,QAEL,GAAI9b,KAAK,CAAC8b,QAAN,GAAkBG,cAAc,CAACnrB,IAAf,CACrB,IADqB,EAErB0U,yBAFqB,EAGrBxF,KAHqB,CAFvB;EAOA,SAAO,CAAC3L,IAAI,CAACoU,aAAN,EAAqBqT,QAArB,CAAP;EACD;;EAED,SAAS4C,WAAT,CACE7C,YADF,EAEsC;EACpC,SAAOK,aAAa,CAACV,iBAAD,AAAA,CAApB;EACD;;EAED,SAASmD,aAAT,CACE9C,YADF,EAEsC;EACpC,SAAOa,eAAe,CAAClB,iBAAD,AAAA,CAAtB;EACD;;EAED,SAASoD,UAAT,CAAoB77B,GAApB,EAAyB87B,MAAzB,EAAiCC,OAAjC,EAA0CvF,IAA1C,EAAgD;EAC9C,MAAMxO,MAAc,GAAG;EACrBhoB,IAAAA,GAAG,EAAHA,GADqB;EAErB87B,IAAAA,MAAM,EAANA,MAFqB;EAGrBC,IAAAA,OAAO,EAAPA,OAHqB;EAIrBvF,IAAAA,IAAI,EAAJA,IAJqB;EAKrB;EACA9R,IAAAA,IAAI,EAAG;EANc,GAAvB;EAQA,MAAIsX,oBAAyD,GAAIvZ,yBAAuB,CAACuD,WAAzF;;EACA,MAAIgW,oBAAoB,KAAK,IAA7B,EAAmC;EACjCA,IAAAA,oBAAoB,GAAGxD,kCAAkC,EAAzD;EACA/V,IAAAA,yBAAuB,CAACuD,WAAxB,GAAuCgW,oBAAvC;EACAA,IAAAA,oBAAoB,CAAC9N,UAArB,GAAkClG,MAAM,CAACtD,IAAP,GAAcsD,MAAhD;EACD,GAJD,MAIO;EACL,QAAMkG,UAAU,GAAG8N,oBAAoB,CAAC9N,UAAxC;;EACA,QAAIA,UAAU,KAAK,IAAnB,EAAyB;EACvB8N,MAAAA,oBAAoB,CAAC9N,UAArB,GAAkClG,MAAM,CAACtD,IAAP,GAAcsD,MAAhD;EACD,KAFD,MAEO;EACL,UAAMoG,WAAW,GAAGF,UAAU,CAACxJ,IAA/B;EACAwJ,MAAAA,UAAU,CAACxJ,IAAX,GAAkBsD,MAAlB;EACAA,MAAAA,MAAM,CAACtD,IAAP,GAAc0J,WAAd;EACA4N,MAAAA,oBAAoB,CAAC9N,UAArB,GAAkClG,MAAlC;EACD;EACF;;EACD,SAAOA,MAAP;EACD;;EAED,SAASiU,QAAT,CAAqBC,YAArB,EAAsD;EACpD,MAAM5qB,IAAI,GAAG4mB,uBAAuB,EAApC;EACA,MAAM5K,GAAG,GAAG;EAACnqB,IAAAA,OAAO,EAAE+4B;EAAV,GAAZ;;EACA,EAAa;EACXh3B,IAAAA,MAAM,CAACi3B,IAAP,CAAY7O,GAAZ;EACD;;EACDhc,EAAAA,IAAI,CAACoU,aAAL,GAAqB4H,GAArB;EACA,SAAOA,GAAP;EACD;;EAED,SAAS8O,SAAT,CAAsBF,YAAtB,EAAuD;EACrD,MAAM5qB,IAAI,GAAG8mB,wBAAwB,EAArC;EACA,SAAO9mB,IAAI,CAACoU,aAAZ;EACD;;EAED,SAAS2W,eAAT,CAAyBC,UAAzB,EAAqCC,SAArC,EAAgDT,MAAhD,EAAwDtF,IAAxD,EAAoE;EAClE,MAAMllB,IAAI,GAAG4mB,uBAAuB,EAApC;EACA,MAAMlB,QAAQ,GAAGR,IAAI,KAAKxrB,SAAT,GAAqB,IAArB,GAA4BwrB,IAA7C;EACA/T,EAAAA,yBAAuB,CAAC5f,KAAxB,IAAiCy5B,UAAjC;EACAhrB,EAAAA,IAAI,CAACoU,aAAL,GAAqBmW,UAAU,CAC7BW,SAAa,GAAGD,SADa,EAE7BT,MAF6B,EAG7B9wB,SAH6B,EAI7BgsB,QAJ6B,CAA/B;EAMD;;EAED,SAASyF,gBAAT,CAA0BH,UAA1B,EAAsCC,SAAtC,EAAiDT,MAAjD,EAAyDtF,IAAzD,EAAqE;EACnE,MAAMllB,IAAI,GAAG8mB,wBAAwB,EAArC;EACA,MAAMpB,QAAQ,GAAGR,IAAI,KAAKxrB,SAAT,GAAqB,IAArB,GAA4BwrB,IAA7C;EACA,MAAIuF,OAAO,GAAG/wB,SAAd;;EAEA,MAAI0qB,WAAW,KAAK,IAApB,EAA0B;EACxB,QAAMgH,UAAU,GAAGhH,WAAW,CAAChQ,aAA/B;EACAqW,IAAAA,OAAO,GAAGW,UAAU,CAACX,OAArB;;EACA,QAAI/E,QAAQ,KAAK,IAAjB,EAAuB;EACrB,UAAMC,QAAQ,GAAGyF,UAAU,CAAClG,IAA5B;;EACA,UAAIO,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;EAC1C4E,QAAAA,UAAU,CAACU,SAAD,EAAYT,MAAZ,EAAoBC,OAApB,EAA6B/E,QAA7B,CAAV;EACA;EACD;EACF;EACF;;EAEDvU,EAAAA,yBAAuB,CAAC5f,KAAxB,IAAiCy5B,UAAjC;EAEAhrB,EAAAA,IAAI,CAACoU,aAAL,GAAqBmW,UAAU,CAC7BW,SAAa,GAAGD,SADa,EAE7BT,MAF6B,EAG7BC,OAH6B,EAI7B/E,QAJ6B,CAA/B;EAMD;;EAED,SAAS2F,WAAT,CACEb,MADF,EAEEtF,IAFF,EAGQ;EACN,EAAa;EACX;EACA,QAAI,gBAAgB,OAAOoG,IAA3B,EAAiC;EAC/BC,MAAAA,oCAAoC,CAACpa,yBAAD,CAApC;EACD;EACF;;EACD,SAAO4Z,eAAe,CACpBtE,MAAY,GAAGD,OADK,EAEpBgF,SAFoB,EAGpBhB,MAHoB,EAIpBtF,IAJoB,CAAtB;EAMD;;EAED,SAASuG,YAAT,CACEjB,MADF,EAEEtF,IAFF,EAGQ;EACN,EAAa;EACX;EACA,QAAI,gBAAgB,OAAOoG,IAA3B,EAAiC;EAC/BC,MAAAA,oCAAoC,CAACpa,yBAAD,CAApC;EACD;EACF;;EACD,SAAOga,gBAAgB,CACrB1E,MAAY,GAAGD,OADM,EAErBgF,SAFqB,EAGrBhB,MAHqB,EAIrBtF,IAJqB,CAAvB;EAMD;;EAED,SAASwG,iBAAT,CACElB,MADF,EAEEtF,IAFF,EAGQ;EACN,SAAO6F,eAAe,CAACtE,MAAD,EAAekF,MAAf,EAA2BnB,MAA3B,EAAmCtF,IAAnC,CAAtB;EACD;;EAED,SAAS0G,kBAAT,CACEpB,MADF,EAEEtF,IAFF,EAGQ;EACN,SAAOiG,gBAAgB,CAAC1E,MAAD,EAAekF,MAAf,EAA2BnB,MAA3B,EAAmCtF,IAAnC,CAAvB;EACD;;EAED,SAAS2G,sBAAT,CACErB,MADF,EAEExO,GAFF,EAGE;EACA,MAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;EAC7B,QAAM8P,WAAW,GAAG9P,GAApB;;EACA,QAAMjoB,KAAI,GAAGy2B,MAAM,EAAnB;;EACAsB,IAAAA,WAAW,CAAC/3B,KAAD,CAAX;EACA,WAAO,YAAM;EACX+3B,MAAAA,WAAW,CAAC,IAAD,CAAX;EACD,KAFD;EAGD,GAPD,MAOO,IAAI9P,GAAG,KAAK,IAAR,IAAgBA,GAAG,KAAKtiB,SAA5B,EAAuC;EAC5C,QAAMqyB,SAAS,GAAG/P,GAAlB;;EACA,IAAa;EACX,UAAI,CAAC+P,SAAS,CAACrvB,cAAV,CAAyB,SAAzB,CAAL,EAA0C;EACxC,cACE,kEACE,iEAFJ,EAGE,0BAA0B9I,MAAM,CAACkZ,IAAP,CAAYif,SAAZ,EAAuBrd,IAAvB,CAA4B,IAA5B,CAA1B,GAA8D,GAHhE;EAKD;EACF;;EACD,QAAM3a,MAAI,GAAGy2B,MAAM,EAAnB;;EACAuB,IAAAA,SAAS,CAACl6B,OAAV,GAAoBkC,MAApB;EACA,WAAO,YAAM;EACXg4B,MAAAA,SAAS,CAACl6B,OAAV,GAAoB,IAApB;EACD,KAFD;EAGD;EACF;;EAED,SAASm6B,qBAAT,CACEhQ,GADF,EAEEwO,MAFF,EAGEtF,IAHF,EAIQ;EACN,EAAa;EACX,QAAI,OAAOsF,MAAP,KAAkB,UAAtB,EAAkC;EAChC,YACE,qEACE,8CAFJ,EAGEA,MAAM,KAAK,IAAX,GAAkB,OAAOA,MAAzB,GAAkC,MAHpC;EAKD;EACF,GATK;;;EAYN,MAAMyB,UAAU,GACd/G,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKxrB,SAA1B,GAAsCwrB,IAAI,CAACz7B,MAAL,CAAY,CAACuyB,GAAD,CAAZ,CAAtC,GAA2D,IAD7D;EAGA,SAAO+O,eAAe,CACpBtE,MADoB,EAEpBkF,MAFoB,EAGpBE,sBAAsB,CAACpvB,IAAvB,CAA4B,IAA5B,EAAkC+tB,MAAlC,EAA0CxO,GAA1C,CAHoB,EAIpBiQ,UAJoB,CAAtB;EAMD;;EAED,SAASC,sBAAT,CACElQ,GADF,EAEEwO,MAFF,EAGEtF,IAHF,EAIQ;EACN,EAAa;EACX,QAAI,OAAOsF,MAAP,KAAkB,UAAtB,EAAkC;EAChC,YACE,qEACE,8CAFJ,EAGEA,MAAM,KAAK,IAAX,GAAkB,OAAOA,MAAzB,GAAkC,MAHpC;EAKD;EACF,GATK;;;EAYN,MAAMyB,UAAU,GACd/G,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAKxrB,SAA1B,GAAsCwrB,IAAI,CAACz7B,MAAL,CAAY,CAACuyB,GAAD,CAAZ,CAAtC,GAA2D,IAD7D;EAGA,SAAOmP,gBAAgB,CACrB1E,MADqB,EAErBkF,MAFqB,EAGrBE,sBAAsB,CAACpvB,IAAvB,CAA4B,IAA5B,EAAkC+tB,MAAlC,EAA0CxO,GAA1C,CAHqB,EAIrBiQ,UAJqB,CAAvB;EAMD;;EAED,SAASE,eAAT,CAA4BjgC,KAA5B,EAAsCkgC,WAAtC,EAA+E;EAE7E;EACA;EACD;;EAED,IAAMC,gBAAgB,GAAGF,eAAzB;;EAEA,SAASG,aAAT,CAA0BnhB,QAA1B,EAAuC+Z,IAAvC,EAA4E;EAC1E,MAAMllB,IAAI,GAAG4mB,uBAAuB,EAApC;EACA,MAAMlB,QAAQ,GAAGR,IAAI,KAAKxrB,SAAT,GAAqB,IAArB,GAA4BwrB,IAA7C;EACAllB,EAAAA,IAAI,CAACoU,aAAL,GAAqB,CAACjJ,QAAD,EAAWua,QAAX,CAArB;EACA,SAAOva,QAAP;EACD;;EAED,SAASohB,cAAT,CAA2BphB,QAA3B,EAAwC+Z,IAAxC,EAA6E;EAC3E,MAAMllB,IAAI,GAAG8mB,wBAAwB,EAArC;EACA,MAAMpB,QAAQ,GAAGR,IAAI,KAAKxrB,SAAT,GAAqB,IAArB,GAA4BwrB,IAA7C;EACA,MAAM9P,SAAS,GAAGpV,IAAI,CAACoU,aAAvB;;EACA,MAAIgB,SAAS,KAAK,IAAlB,EAAwB;EACtB,QAAIsQ,QAAQ,KAAK,IAAjB,EAAuB;EACrB,UAAMC,QAA6B,GAAGvQ,SAAS,CAAC,CAAD,CAA/C;;EACA,UAAIqQ,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;EAC1C,eAAOvQ,SAAS,CAAC,CAAD,CAAhB;EACD;EACF;EACF;;EACDpV,EAAAA,IAAI,CAACoU,aAAL,GAAqB,CAACjJ,QAAD,EAAWua,QAAX,CAArB;EACA,SAAOva,QAAP;EACD;;EAED,SAASqhB,SAAT,CACEC,UADF,EAEEvH,IAFF,EAGK;EACH,MAAMllB,IAAI,GAAG4mB,uBAAuB,EAApC;EACA,MAAMlB,QAAQ,GAAGR,IAAI,KAAKxrB,SAAT,GAAqB,IAArB,GAA4BwrB,IAA7C;EACA,MAAMtT,SAAS,GAAG6a,UAAU,EAA5B;EACAzsB,EAAAA,IAAI,CAACoU,aAAL,GAAqB,CAACxC,SAAD,EAAY8T,QAAZ,CAArB;EACA,SAAO9T,SAAP;EACD;;EAED,SAAS8a,UAAT,CACED,UADF,EAEEvH,IAFF,EAGK;EACH,MAAMllB,IAAI,GAAG8mB,wBAAwB,EAArC;EACA,MAAMpB,QAAQ,GAAGR,IAAI,KAAKxrB,SAAT,GAAqB,IAArB,GAA4BwrB,IAA7C;EACA,MAAM9P,SAAS,GAAGpV,IAAI,CAACoU,aAAvB;;EACA,MAAIgB,SAAS,KAAK,IAAlB,EAAwB;EACtB;EACA,QAAIsQ,QAAQ,KAAK,IAAjB,EAAuB;EACrB,UAAMC,QAA6B,GAAGvQ,SAAS,CAAC,CAAD,CAA/C;;EACA,UAAIqQ,kBAAkB,CAACC,QAAD,EAAWC,QAAX,CAAtB,EAA4C;EAC1C,eAAOvQ,SAAS,CAAC,CAAD,CAAhB;EACD;EACF;EACF;;EACD,MAAMxD,SAAS,GAAG6a,UAAU,EAA5B;EACAzsB,EAAAA,IAAI,CAACoU,aAAL,GAAqB,CAACxC,SAAD,EAAY8T,QAAZ,CAArB;EACA,SAAO9T,SAAP;EACD;;EAED,SAAS+a,kBAAT,CAA+BzgC,KAA/B,EAA4C;EAAA,oBACZk+B,UAAU,CAACl+B,KAAD,CADE;EAAA,MACnC0gC,SADmC;EAAA,MACxBC,QADwB;;EAE1CxB,EAAAA,WAAW,CAAC,YAAM;EAChB,QAAMyB,cAAc,GAAG3gB,yBAAuB,CAACG,UAA/C;EACAH,IAAAA,yBAAuB,CAACG,UAAxB,GAAqC,CAArC;;EACA,QAAI;EACFugB,MAAAA,QAAQ,CAAC3gC,KAAD,CAAR;EACD,KAFD,SAEU;EACRigB,MAAAA,yBAAuB,CAACG,UAAxB,GAAqCwgB,cAArC;EACD;EACF,GARU,EAQR,CAAC5gC,KAAD,CARQ,CAAX;EASA,SAAO0gC,SAAP;EACD;;EAED,SAASG,mBAAT,CAAgC7gC,KAAhC,EAA6C;EAAA,qBACbm+B,WAAW,CAACn+B,AAAD,CADE;EAAA,MACpC0gC,SADoC;EAAA,MACzBC,QADyB;;EAE3CpB,EAAAA,YAAY,CAAC,YAAM;EACjB,QAAMqB,cAAc,GAAG3gB,yBAAuB,CAACG,UAA/C;EACAH,IAAAA,yBAAuB,CAACG,UAAxB,GAAqC,CAArC;;EACA,QAAI;EACFugB,MAAAA,QAAQ,CAAC3gC,KAAD,CAAR;EACD,KAFD,SAEU;EACRigB,MAAAA,yBAAuB,CAACG,UAAxB,GAAqCwgB,cAArC;EACD;EACF,GARW,EAQT,CAAC5gC,KAAD,CARS,CAAZ;EASA,SAAO0gC,SAAP;EACD;;EAED,SAASI,qBAAT,CAAkC9gC,KAAlC,EAA+C;EAAA,uBACfo+B,aAAa,CAACp+B,AAAD,CADE;EAAA,MACtC0gC,SADsC;EAAA,MAC3BC,QAD2B;;EAE7CpB,EAAAA,YAAY,CAAC,YAAM;EACjB,QAAMqB,cAAc,GAAG3gB,yBAAuB,CAACG,UAA/C;EACAH,IAAAA,yBAAuB,CAACG,UAAxB,GAAqC,CAArC;;EACA,QAAI;EACFugB,MAAAA,QAAQ,CAAC3gC,KAAD,CAAR;EACD,KAFD,SAEU;EACRigB,MAAAA,yBAAuB,CAACG,UAAxB,GAAqCwgB,cAArC;EACD;EACF,GARW,EAQT,CAAC5gC,KAAD,CARS,CAAZ;EASA,SAAO0gC,SAAP;EACD;;EAED,SAASK,eAAT,CAAyBC,UAAzB,EAAqC/hB,QAArC,EAA+C;EAC7C,MAAM1K,aAAa,GAAGqK,uBAAuB,EAA7C;;EACA,EAoCO;EACLG,IAAAA,eAAe,CACbxK,aAAa,GAAGkB,sBAAhB,GACIA,sBADJ,GAEIlB,aAHS,EAIb,YAAM;EACJysB,MAAAA,UAAU,CAAC,IAAD,CAAV;EACD,KANY,CAAf;EASAjiB,IAAAA,eAAe,CACbxK,aAAa,GAAGmB,gBAAhB,GAAiCA,gBAAjC,GAAkDnB,aADrC,EAEb,YAAM;EACJ,UAAMqsB,cAAc,GAAG3gB,yBAAuB,CAACG,UAA/C;EACAH,MAAAA,yBAAuB,CAACG,UAAxB,GAAqC,CAArC;;EACA,UAAI;EACF4gB,QAAAA,UAAU,CAAC,KAAD,CAAV;EACA/hB,QAAAA,QAAQ;EACT,OAHD,SAGU;EACRgB,QAAAA,yBAAuB,CAACG,UAAxB,GAAqCwgB,cAArC;EACD;EACF,KAXY,CAAf;EAaD;EACF;;EAED,SAASK,eAAT,GAA4D;EAAA,qBAC1B/C,UAAU,CAAC,KAAD,CADgB;EAAA,MACnDgD,SADmD;EAAA,MACxCF,UADwC;EAG1D;;;EACA,MAAMG,KAAK,GAAGJ,eAAe,CAACxwB,IAAhB,CAAqB,IAArB,EAA2BywB,UAA3B,CAAd;EACAvC,EAAAA,QAAQ,CAAC0C,KAAD,CAAR;EACA,SAAO,CAACA,KAAD,EAAQD,SAAR,CAAP;EACD;;EAED,SAASE,gBAAT,GAA6D;EAAA,sBACvCjD,WAAW,CAAC,AAAD,CAD4B;EAAA,MACpD+C,SADoD;;EAE3D,MAAMG,QAAQ,GAAGzC,SAAS,EAA1B;EACA,MAAMuC,KAA2B,GAAIE,QAAQ,CAAC17B,OAA9C;EACA,SAAO,CAACw7B,KAAD,EAAQD,SAAR,CAAP;EACD;;EAED,SAASI,kBAAT,GAA+D;EAAA,wBACzClD,aAAa,CAAC,AAAD,CAD4B;EAAA,MACtD8C,SADsD;;EAE7D,MAAMG,QAAQ,GAAGzC,SAAS,EAA1B;EACA,MAAMuC,KAA2B,GAAIE,QAAQ,CAAC17B,OAA9C;EACA,SAAO,CAACw7B,KAAD,EAAQD,SAAR,CAAP;EACD;;EAED,IAAIzG,kCAAkC,GAAG,KAAzC;AACA,EAAO,SAAS8G,0CAAT,GAAsE;EAC3E,EAAa;EACX,WAAO9G,kCAAP;EACD;EACF;;EAED,SAAS+G,iCAAT,CAA2Cx8B,KAA3C,EAAkD;EAChD,EAAa;EACX;EACA,QAAM5C,IAAI,GAAGG,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,SAA7C;;EACA,QAAIof,cAAc,MAAM,CAACuW,+BAA+B,CAAC71B,IAAD,CAAxD,EAAgE;EAC9D,YACE,oEACE,qDADF,GAEE,iBAHJ;;EAKA61B,MAAAA,+BAA+B,CAAC71B,IAAD,CAA/B,GAAwC,IAAxC;EACD;EACF;EACF;;EAED,SAASq/B,qBAAT,GAAsD;EACpD,MAAMC,MAAM,GAAGrtB,CACX9I,iBAAiB,CAACgF,IAAlB,CACE,IADF,EAEEixB,iCAAiC,CAACjxB,IAAlC,CAAuC,IAAvC,EAA6C0U,yBAA7C,CAFF,CADkB,CAAtB;;EAOA,EAwCO;EACL,QAAMxZ,GAAE,GAAGi2B,MAAM,EAAjB;;EACAxD,IAAAA,UAAU,CAACzyB,GAAD,CAAV;EACA,WAAOA,GAAP;EACD;EACF;;EAED,SAASk2B,sBAAT,GAAuD;EACrD,MAAMl2B,EAAE,GAAG0yB,WAAW,CAAC3wB,AAAD,CAAX,CAAuB,CAAvB,CAAX;EACA,SAAO/B,EAAP;EACD;;EAED,SAASm2B,wBAAT,GAAyD;EACvD,MAAMn2B,EAAE,GAAG2yB,aAAa,CAAC5wB,AAAD,CAAb,CAAyB,CAAzB,CAAX;EACA,SAAO/B,EAAP;EACD;;EAED,SAASiwB,cAAT,CACE12B,KADF,EAEEya,KAFF,EAGEyb,MAHF,EAIE;EACA,EAAa;EACX,QAAI,OAAO2G,SAAS,CAAC,CAAD,CAAhB,KAAwB,UAA5B,EAAwC;EACtC,YACE,gFACE,2DADF,GAEE,+DAHJ;EAKD;EACF;;EAED,MAAMjnB,SAAS,GAAGgR,gBAAgB,EAAlC;EACA,MAAMpR,IAAI,GAAGqR,iBAAiB,CAAC7mB,KAAD,CAA9B;EAEA,MAAM8hB,MAAoB,GAAG;EAC3BtM,IAAAA,IAAI,EAAJA,IAD2B;EAE3B0gB,IAAAA,MAAM,EAANA,MAF2B;EAG3Be,IAAAA,YAAY,EAAE,IAHa;EAI3BC,IAAAA,UAAU,EAAE,IAJe;EAK3BhV,IAAAA,IAAI,EAAG;EALoB,GAA7B,CAdA;;EAuBA,MAAMoB,OAAO,GAAG7I,KAAK,CAAC6I,OAAtB;;EACA,MAAIA,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACAxB,IAAAA,MAAM,CAACI,IAAP,GAAcJ,MAAd;EACD,GAHD,MAGO;EACLA,IAAAA,MAAM,CAACI,IAAP,GAAcoB,OAAO,CAACpB,IAAtB;EACAoB,IAAAA,OAAO,CAACpB,IAAR,GAAeJ,MAAf;EACD;;EACDrH,EAAAA,KAAK,CAAC6I,OAAN,GAAgBxB,MAAhB;EAEA,MAAM3hB,SAAS,GAAGH,KAAK,CAACG,SAAxB;;EACA,MACEH,KAAK,KAAKigB,yBAAV,IACC9f,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK8f,yBAFvC,EAGE;EACA;EACA;EACA;EACAoT,IAAAA,0CAA0C,GAAGD,4BAA4B,GAAG,IAA5E;EACD,GARD,MAQO;EACL,QACEpzB,KAAK,CAACsT,KAAN,KAAgBtB,OAAhB,KACC7R,SAAS,KAAK,IAAd,IAAsBA,SAAS,CAACmT,KAAV,KAAoBtB,OAD3C,CADF,EAGE;EACA;EACA;EACA;EACA,UAAMwkB,mBAAmB,GAAG/b,KAAK,CAAC+b,mBAAlC;;EACA,UAAIA,mBAAmB,KAAK,IAA5B,EAAkC;EAChC,YAAIsG,cAAJ;;EACA,QAAa;EACXA,UAAAA,cAAc,GAAG30B,wBAAsB,CAACxH,OAAxC;EACAwH,UAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo8B,yCAAjC;EACD;;EACD,YAAI;EACF,cAAMC,YAAe,GAAIviB,KAAK,CAACgc,iBAA/B;EACA,cAAMS,UAAU,GAAGV,mBAAmB,CAACwG,YAAD,EAAe9G,MAAf,CAAtC,CAFE;EAIF;EACA;EACA;;EACApU,UAAAA,MAAM,CAACmV,YAAP,GAAsBT,mBAAtB;EACA1U,UAAAA,MAAM,CAACoV,UAAP,GAAoBA,UAApB;;EACA,cAAI7b,QAAE,CAAC6b,UAAD,EAAa8F,YAAb,CAAN,EAAkC;EAChC;EACA;EACA;EACA;EACA;EACD;EACF,SAhBD,CAgBE,OAAO9kC,KAAP,EAAc;EAEf,SAlBD,SAkBU;EACR,UAAa;EACXiQ,YAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF;EACF;EACF;;EACD,IAAa;EACX;EACA,UAAI,gBAAgB,OAAO1C,IAA3B,EAAiC;EAC/B6C,QAAAA,8BAA8B,CAACj9B,KAAD,CAA9B;EACAk9B,QAAAA,oCAAoC,CAACl9B,KAAD,CAApC;EACD;EACF;;EACD8mB,IAAAA,qBAAqB,CAAC9mB,KAAD,EAAQwV,IAAR,EAAcI,SAAd,CAArB;EACD;EAcF;;AAED,EAAO,IAAMuf,qBAAiC,GAAG;EAC/C9S,EAAAA,WAAW,EAAXA,WAD+C;EAG/C8a,EAAAA,WAAW,EAAE7I,qBAHkC;EAI/C8I,EAAAA,UAAU,EAAE9I,qBAJmC;EAK/CkE,EAAAA,SAAS,EAAElE,qBALoC;EAM/C+I,EAAAA,mBAAmB,EAAE/I,qBAN0B;EAO/CgJ,EAAAA,eAAe,EAAEhJ,qBAP8B;EAQ/CiJ,EAAAA,OAAO,EAAEjJ,qBARsC;EAS/CkJ,EAAAA,UAAU,EAAElJ,qBATmC;EAU/CmJ,EAAAA,MAAM,EAAEnJ,qBAVuC;EAW/C2D,EAAAA,QAAQ,EAAE3D,qBAXqC;EAY/CoJ,EAAAA,aAAa,EAAEpJ,qBAZgC;EAa/CqJ,EAAAA,gBAAgB,EAAErJ,qBAb6B;EAc/CsJ,EAAAA,aAAa,EAAEtJ,qBAdgC;EAe/CuD,EAAAA,gBAAgB,EAAEvD,qBAf6B;EAgB/CuJ,EAAAA,mBAAmB,EAAEvJ,qBAhB0B;EAkB/CwJ,EAAAA,wBAAwB,EAAEj+B;EAlBqB,CAA1C;AAqBP,EA+DA,IAAIm1B,2BAA8C,GAAG,IAArD;EACA,IAAID,wCAA2D,GAAG,IAAlE;EACA,IAAID,4BAA+C,GAAG,IAAtD;EACA,IAAII,8BAAiD,GAAG,IAAxD;EACA,IAAI6I,wCAA2D,GAAG,IAAlE;EACA,IAAIhB,yCAA4D,GAAG,IAAnE;EACA,IAAIiB,2CAA8D,GAAG,IAArE;;AAEA,EAAa;EACX,MAAMC,wBAAwB,GAAG,YAAM;EACrC,UACE,wDACE,gFADF,GAEE,iFAFF,GAGE,8CAJJ;EAMD,GAPD;;EASA,MAAMC,qBAAqB,GAAG,YAAM;EAClC,UACE,qFACE,mEADF,GAEE,4BAFF,GAGE,yCAJJ;EAMD,GAPD;;EASAlJ,EAAAA,2BAA2B,GAAG;EAC5B3S,IAAAA,WAD4B,YAE1B3kB,OAF0B,EAG1BmkB,YAH0B,EAIvB;EACH,aAAOQ,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KAN2B;EAO5Bsb,IAAAA,WAP4B,YAObljB,QAPa,EAOA+Z,IAPA,EAOqC;EAC/DT,MAAAA,oBAAoB,GAAG,aAAvB;EACAI,MAAAA,iBAAiB;EACjBI,MAAAA,oBAAoB,CAACC,IAAD,CAApB;EACA,aAAOoH,aAAa,CAACnhB,QAAD,EAAW+Z,IAAX,CAApB;EACD,KAZ2B;EAa5BoJ,IAAAA,UAb4B,YAc1B1/B,OAd0B,EAe1BmkB,YAf0B,EAgBvB;EACH0R,MAAAA,oBAAoB,GAAG,YAAvB;EACAI,MAAAA,iBAAiB;EACjB,aAAOtR,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KApB2B;EAqB5B2W,IAAAA,SArB4B,YAsB1Bc,MAtB0B,EAuB1BtF,IAvB0B,EAwBpB;EACNT,MAAAA,oBAAoB,GAAG,WAAvB;EACAI,MAAAA,iBAAiB;EACjBI,MAAAA,oBAAoB,CAACC,IAAD,CAApB;EACA,aAAOmG,WAAW,CAACb,MAAD,EAAStF,IAAT,CAAlB;EACD,KA7B2B;EA8B5BqJ,IAAAA,mBA9B4B,YA+B1BvS,GA/B0B,EAgC1BwO,MAhC0B,EAiC1BtF,IAjC0B,EAkCpB;EACNT,MAAAA,oBAAoB,GAAG,qBAAvB;EACAI,MAAAA,iBAAiB;EACjBI,MAAAA,oBAAoB,CAACC,IAAD,CAApB;EACA,aAAO8G,qBAAqB,CAAChQ,GAAD,EAAMwO,MAAN,EAActF,IAAd,CAA5B;EACD,KAvC2B;EAwC5BsJ,IAAAA,eAxC4B,YAyC1BhE,MAzC0B,EA0C1BtF,IA1C0B,EA2CpB;EACNT,MAAAA,oBAAoB,GAAG,iBAAvB;EACAI,MAAAA,iBAAiB;EACjBI,MAAAA,oBAAoB,CAACC,IAAD,CAApB;EACA,aAAOwG,iBAAiB,CAAClB,MAAD,EAAStF,IAAT,CAAxB;EACD,KAhD2B;EAiD5BuJ,IAAAA,OAjD4B,YAiDjBjE,MAjDiB,EAiDAtF,IAjDA,EAiDqC;EAC/DT,MAAAA,oBAAoB,GAAG,SAAvB;EACAI,MAAAA,iBAAiB;EACjBI,MAAAA,oBAAoB,CAACC,IAAD,CAApB;EACA,UAAM8I,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo9B,wCAAjC;;EACA,UAAI;EACF,eAAOzC,SAAS,CAAChC,MAAD,EAAStF,IAAT,CAAhB;EACD,OAFD,SAEU;EACR7rB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KA5D2B;EA6D5BU,IAAAA,UA7D4B,YA8D1BpH,OA9D0B,EA+D1BC,UA/D0B,EAgE1Bn4B,IAhE0B,EAiER;EAClBq1B,MAAAA,oBAAoB,GAAG,YAAvB;EACAI,MAAAA,iBAAiB;EACjB,UAAMmJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo9B,wCAAjC;;EACA,UAAI;EACF,eAAO5H,YAAY,CAACC,OAAD,EAAUC,UAAV,EAAsBn4B,IAAtB,CAAnB;EACD,OAFD,SAEU;EACRiK,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KA3E2B;EA4E5BW,IAAAA,MA5E4B,YA4ElB/D,YA5EkB,EA4Ee;EACzCnG,MAAAA,oBAAoB,GAAG,QAAvB;EACAI,MAAAA,iBAAiB;EACjB,aAAO8F,QAAQ,CAACC,YAAD,CAAf;EACD,KAhF2B;EAiF5BzB,IAAAA,QAjF4B,YAkF1B3B,YAlF0B,EAmFU;EACpC/C,MAAAA,oBAAoB,GAAG,UAAvB;EACAI,MAAAA,iBAAiB;EACjB,UAAMmJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo9B,wCAAjC;;EACA,UAAI;EACF,eAAO7E,UAAU,CAAC5C,YAAD,CAAjB;EACD,OAFD,SAEU;EACRnuB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KA7F2B;EA8F5BY,IAAAA,aA9F4B,YA8FX1iC,KA9FW,EA8FDkgC,WA9FC,EA8FwC;EAClE3H,MAAAA,oBAAoB,GAAG,eAAvB;EACAI,MAAAA,iBAAiB;EACjB,aAAOsH,eAAe,CAACjgC,AAAD,CAAtB;EACD,KAlG2B;EAmG5B2iC,IAAAA,gBAnG4B,YAmGR3iC,KAnGQ,EAmGK;EAC/Bu4B,MAAAA,oBAAoB,GAAG,kBAAvB;EACAI,MAAAA,iBAAiB;EACjB,aAAO8H,kBAAkB,CAACzgC,KAAD,CAAzB;EACD,KAvG2B;EAwG5B4iC,IAAAA,aAxG4B,cAwGqB;EAC/CrK,MAAAA,oBAAoB,GAAG,eAAvB;EACAI,MAAAA,iBAAiB;EACjB,aAAOsI,eAAe,EAAtB;EACD,KA5G2B;EA6G5BpE,IAAAA,gBA7G4B,YA8G1BvvB,MA9G0B,EA+G1BivB,WA/G0B,EAgH1BO,SAhH0B,EAiHhB;EACVvE,MAAAA,oBAAoB,GAAG,kBAAvB;EACAI,MAAAA,iBAAiB;EACjB,aAAOqF,kBAAkB,CAAC1wB,MAAD,EAASivB,WAAT,EAAsBO,SAAtB,CAAzB;EACD,KArH2B;EAsH5B+F,IAAAA,mBAtH4B,cAsHe;EACzCtK,MAAAA,oBAAoB,GAAG,qBAAvB;EACAI,MAAAA,iBAAiB;EACjB,aAAO8I,qBAAqB,EAA5B;EACD,KA1H2B;EA4H5BqB,IAAAA,wBAAwB,EAAEj+B;EA5HE,GAA9B;EA+HAk1B,EAAAA,wCAAwC,GAAG;EACzC1S,IAAAA,WADyC,YAEvC3kB,OAFuC,EAGvCmkB,YAHuC,EAIpC;EACH,aAAOQ,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KANwC;EAOzCsb,IAAAA,WAPyC,YAO1BljB,QAP0B,EAOb+Z,IAPa,EAOwB;EAC/DT,MAAAA,oBAAoB,GAAG,aAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOuH,aAAa,CAACnhB,QAAD,EAAW+Z,IAAX,CAApB;EACD,KAXwC;EAYzCoJ,IAAAA,UAZyC,YAavC1/B,OAbuC,EAcvCmkB,YAduC,EAepC;EACH0R,MAAAA,oBAAoB,GAAG,YAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOxR,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KAnBwC;EAoBzC2W,IAAAA,SApByC,YAqBvCc,MArBuC,EAsBvCtF,IAtBuC,EAuBjC;EACNT,MAAAA,oBAAoB,GAAG,WAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOsG,WAAW,CAACb,MAAD,EAAStF,IAAT,CAAlB;EACD,KA3BwC;EA4BzCqJ,IAAAA,mBA5ByC,YA6BvCvS,GA7BuC,EA8BvCwO,MA9BuC,EA+BvCtF,IA/BuC,EAgCjC;EACNT,MAAAA,oBAAoB,GAAG,qBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOiH,qBAAqB,CAAChQ,GAAD,EAAMwO,MAAN,EAActF,IAAd,CAA5B;EACD,KApCwC;EAqCzCsJ,IAAAA,eArCyC,YAsCvChE,MAtCuC,EAuCvCtF,IAvCuC,EAwCjC;EACNT,MAAAA,oBAAoB,GAAG,iBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO2G,iBAAiB,CAAClB,MAAD,EAAStF,IAAT,CAAxB;EACD,KA5CwC;EA6CzCuJ,IAAAA,OA7CyC,YA6C9BjE,MA7C8B,EA6CbtF,IA7Ca,EA6CwB;EAC/DT,MAAAA,oBAAoB,GAAG,SAAvB;EACAM,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo9B,wCAAjC;;EACA,UAAI;EACF,eAAOzC,SAAS,CAAChC,MAAD,EAAStF,IAAT,CAAhB;EACD,OAFD,SAEU;EACR7rB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAvDwC;EAwDzCU,IAAAA,UAxDyC,YAyDvCpH,OAzDuC,EA0DvCC,UA1DuC,EA2DvCn4B,IA3DuC,EA4DrB;EAClBq1B,MAAAA,oBAAoB,GAAG,YAAvB;EACAM,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo9B,wCAAjC;;EACA,UAAI;EACF,eAAO5H,YAAY,CAACC,OAAD,EAAUC,UAAV,EAAsBn4B,IAAtB,CAAnB;EACD,OAFD,SAEU;EACRiK,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAtEwC;EAuEzCW,IAAAA,MAvEyC,YAuE/B/D,YAvE+B,EAuEE;EACzCnG,MAAAA,oBAAoB,GAAG,QAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO4F,QAAQ,CAACC,YAAD,CAAf;EACD,KA3EwC;EA4EzCzB,IAAAA,QA5EyC,YA6EvC3B,YA7EuC,EA8EH;EACpC/C,MAAAA,oBAAoB,GAAG,UAAvB;EACAM,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo9B,wCAAjC;;EACA,UAAI;EACF,eAAO7E,UAAU,CAAC5C,YAAD,CAAjB;EACD,OAFD,SAEU;EACRnuB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAxFwC;EAyFzCY,IAAAA,aAzFyC,YAyFxB1iC,KAzFwB,EAyFdkgC,WAzFc,EAyF2B;EAClE3H,MAAAA,oBAAoB,GAAG,eAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOoH,eAAe,CAACjgC,AAAD,CAAtB;EACD,KA7FwC;EA8FzC2iC,IAAAA,gBA9FyC,YA8FrB3iC,KA9FqB,EA8FR;EAC/Bu4B,MAAAA,oBAAoB,GAAG,kBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO4H,kBAAkB,CAACzgC,KAAD,CAAzB;EACD,KAlGwC;EAmGzC4iC,IAAAA,aAnGyC,cAmGQ;EAC/CrK,MAAAA,oBAAoB,GAAG,eAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOoI,eAAe,EAAtB;EACD,KAvGwC;EAwGzCpE,IAAAA,gBAxGyC,YAyGvCvvB,MAzGuC,EA0GvCivB,WA1GuC,EA2GvCO,SA3GuC,EA4G7B;EACVvE,MAAAA,oBAAoB,GAAG,kBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOmF,kBAAkB,CAAC1wB,MAAD,EAASivB,WAAT,EAAsBO,SAAtB,CAAzB;EACD,KAhHwC;EAiHzC+F,IAAAA,mBAjHyC,cAiHE;EACzCtK,MAAAA,oBAAoB,GAAG,qBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO4I,qBAAqB,EAA5B;EACD,KArHwC;EAuHzCqB,IAAAA,wBAAwB,EAAEj+B;EAvHe,GAA3C;EA0HAi1B,EAAAA,4BAA4B,GAAG;EAC7BzS,IAAAA,WAD6B,YAE3B3kB,OAF2B,EAG3BmkB,YAH2B,EAIxB;EACH,aAAOQ,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KAN4B;EAO7Bsb,IAAAA,WAP6B,YAOdljB,QAPc,EAOD+Z,IAPC,EAOoC;EAC/DT,MAAAA,oBAAoB,GAAG,aAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOwH,cAAc,CAACphB,QAAD,EAAW+Z,IAAX,CAArB;EACD,KAX4B;EAY7BoJ,IAAAA,UAZ6B,YAa3B1/B,OAb2B,EAc3BmkB,YAd2B,EAexB;EACH0R,MAAAA,oBAAoB,GAAG,YAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOxR,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KAnB4B;EAoB7B2W,IAAAA,SApB6B,YAqB3Bc,MArB2B,EAsB3BtF,IAtB2B,EAuBrB;EACNT,MAAAA,oBAAoB,GAAG,WAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO0G,YAAY,CAACjB,MAAD,EAAStF,IAAT,CAAnB;EACD,KA3B4B;EA4B7BqJ,IAAAA,mBA5B6B,YA6B3BvS,GA7B2B,EA8B3BwO,MA9B2B,EA+B3BtF,IA/B2B,EAgCrB;EACNT,MAAAA,oBAAoB,GAAG,qBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOmH,sBAAsB,CAAClQ,GAAD,EAAMwO,MAAN,EAActF,IAAd,CAA7B;EACD,KApC4B;EAqC7BsJ,IAAAA,eArC6B,YAsC3BhE,MAtC2B,EAuC3BtF,IAvC2B,EAwCrB;EACNT,MAAAA,oBAAoB,GAAG,iBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO6G,kBAAkB,CAACpB,MAAD,EAAStF,IAAT,CAAzB;EACD,KA5C4B;EA6C7BuJ,IAAAA,OA7C6B,YA6ClBjE,MA7CkB,EA6CDtF,IA7CC,EA6CoC;EAC/DT,MAAAA,oBAAoB,GAAG,SAAvB;EACAM,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo8B,yCAAjC;;EACA,UAAI;EACF,eAAOvB,UAAU,CAAClC,MAAD,EAAStF,IAAT,CAAjB;EACD,OAFD,SAEU;EACR7rB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAvD4B;EAwD7BU,IAAAA,UAxD6B,YAyD3BpH,OAzD2B,EA0D3BC,UA1D2B,EA2D3Bn4B,IA3D2B,EA4DT;EAClBq1B,MAAAA,oBAAoB,GAAG,YAAvB;EACAM,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo8B,yCAAjC;;EACA,UAAI;EACF,eAAOpG,aAAa,CAACP,OAAD,EAAUC,UAAV,EAAsBn4B,IAAtB,CAApB;EACD,OAFD,SAEU;EACRiK,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAtE4B;EAuE7BW,IAAAA,MAvE6B,YAuEnB/D,YAvEmB,EAuEc;EACzCnG,MAAAA,oBAAoB,GAAG,QAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO+F,SAAS,CAACF,AAAD,CAAhB;EACD,KA3E4B;EA4E7BzB,IAAAA,QA5E6B,YA6E3B3B,YA7E2B,EA8ES;EACpC/C,MAAAA,oBAAoB,GAAG,UAAvB;EACAM,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo8B,yCAAjC;;EACA,UAAI;EACF,eAAO5D,WAAW,CAAC7C,YAAD,CAAlB;EACD,OAFD,SAEU;EACRnuB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAxF4B;EAyF7BY,IAAAA,aAzF6B,YAyFZ1iC,KAzFY,EAyFFkgC,WAzFE,EAyFuC;EAClE3H,MAAAA,oBAAoB,GAAG,eAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOsH,gBAAgB,CAACngC,AAAD,CAAvB;EACD,KA7F4B;EA8F7B2iC,IAAAA,gBA9F6B,YA8FT3iC,KA9FS,EA8FI;EAC/Bu4B,MAAAA,oBAAoB,GAAG,kBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOgI,mBAAmB,CAAC7gC,KAAD,CAA1B;EACD,KAlG4B;EAmG7B4iC,IAAAA,aAnG6B,cAmGoB;EAC/CrK,MAAAA,oBAAoB,GAAG,eAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOuI,gBAAgB,EAAvB;EACD,KAvG4B;EAwG7BvE,IAAAA,gBAxG6B,YAyG3BvvB,MAzG2B,EA0G3BivB,WA1G2B,EA2G3BO,SA3G2B,EA4GjB;EACVvE,MAAAA,oBAAoB,GAAG,kBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOoF,mBAAmB,CAAC3wB,MAAD,EAASivB,WAAT,EAAsBO,SAAtB,CAA1B;EACD,KAhH4B;EAiH7B+F,IAAAA,mBAjH6B,cAiHc;EACzCtK,MAAAA,oBAAoB,GAAG,qBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO8I,sBAAsB,EAA7B;EACD,KArH4B;EAuH7BmB,IAAAA,wBAAwB,EAAEj+B;EAvHG,GAA/B;EA0HAq1B,EAAAA,8BAA8B,GAAG;EAC/B7S,IAAAA,WAD+B,YAE7B3kB,OAF6B,EAG7BmkB,YAH6B,EAI1B;EACH,aAAOQ,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KAN8B;EAQ/Bsb,IAAAA,WAR+B,YAQhBljB,QARgB,EAQH+Z,IARG,EAQkC;EAC/DT,MAAAA,oBAAoB,GAAG,aAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOwH,cAAc,CAACphB,QAAD,EAAW+Z,IAAX,CAArB;EACD,KAZ8B;EAa/BoJ,IAAAA,UAb+B,YAc7B1/B,OAd6B,EAe7BmkB,YAf6B,EAgB1B;EACH0R,MAAAA,oBAAoB,GAAG,YAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOxR,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KApB8B;EAqB/B2W,IAAAA,SArB+B,YAsB7Bc,MAtB6B,EAuB7BtF,IAvB6B,EAwBvB;EACNT,MAAAA,oBAAoB,GAAG,WAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO0G,YAAY,CAACjB,MAAD,EAAStF,IAAT,CAAnB;EACD,KA5B8B;EA6B/BqJ,IAAAA,mBA7B+B,YA8B7BvS,GA9B6B,EA+B7BwO,MA/B6B,EAgC7BtF,IAhC6B,EAiCvB;EACNT,MAAAA,oBAAoB,GAAG,qBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOmH,sBAAsB,CAAClQ,GAAD,EAAMwO,MAAN,EAActF,IAAd,CAA7B;EACD,KArC8B;EAsC/BsJ,IAAAA,eAtC+B,YAuC7BhE,MAvC6B,EAwC7BtF,IAxC6B,EAyCvB;EACNT,MAAAA,oBAAoB,GAAG,iBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO6G,kBAAkB,CAACpB,MAAD,EAAStF,IAAT,CAAzB;EACD,KA7C8B;EA8C/BuJ,IAAAA,OA9C+B,YA8CpBjE,MA9CoB,EA8CHtF,IA9CG,EA8CkC;EAC/DT,MAAAA,oBAAoB,GAAG,SAAvB;EACAM,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCq9B,2CAAjC;;EACA,UAAI;EACF,eAAOxC,UAAU,CAAClC,MAAD,EAAStF,IAAT,CAAjB;EACD,OAFD,SAEU;EACR7rB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAxD8B;EAyD/BU,IAAAA,UAzD+B,YA0D7BpH,OA1D6B,EA2D7BC,UA3D6B,EA4D7Bn4B,IA5D6B,EA6DX;EAClBq1B,MAAAA,oBAAoB,GAAG,YAAvB;EACAM,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCq9B,2CAAjC;;EACA,UAAI;EACF,eAAO7G,eAAe,CAACf,OAAD,EAAUC,UAAV,EAAsBn4B,IAAtB,CAAtB;EACD,OAFD,SAEU;EACRiK,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAvE8B;EAwE/BW,IAAAA,MAxE+B,YAwErB/D,YAxEqB,EAwEY;EACzCnG,MAAAA,oBAAoB,GAAG,QAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO+F,SAAS,CAACF,AAAD,CAAhB;EACD,KA5E8B;EA6E/BzB,IAAAA,QA7E+B,YA8E7B3B,YA9E6B,EA+EO;EACpC/C,MAAAA,oBAAoB,GAAG,UAAvB;EACAM,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCq9B,2CAAjC;;EACA,UAAI;EACF,eAAO5E,aAAa,CAAC9C,YAAD,CAApB;EACD,OAFD,SAEU;EACRnuB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAzF8B;EA0F/BY,IAAAA,aA1F+B,YA0Fd1iC,KA1Fc,EA0FJkgC,WA1FI,EA0FqC;EAClE3H,MAAAA,oBAAoB,GAAG,eAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOsH,gBAAgB,CAACngC,AAAD,CAAvB;EACD,KA9F8B;EA+F/B2iC,IAAAA,gBA/F+B,YA+FX3iC,KA/FW,EA+FE;EAC/Bu4B,MAAAA,oBAAoB,GAAG,kBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOiI,qBAAqB,CAAC9gC,KAAD,CAA5B;EACD,KAnG8B;EAoG/B4iC,IAAAA,aApG+B,cAoGkB;EAC/CrK,MAAAA,oBAAoB,GAAG,eAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOyI,kBAAkB,EAAzB;EACD,KAxG8B;EAyG/BzE,IAAAA,gBAzG+B,YA0G7BvvB,MA1G6B,EA2G7BivB,WA3G6B,EA4G7BO,SA5G6B,EA6GnB;EACVvE,MAAAA,oBAAoB,GAAG,kBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAOoF,mBAAmB,CAAC3wB,MAAD,EAASivB,WAAT,EAAsBO,SAAtB,CAA1B;EACD,KAjH8B;EAkH/B+F,IAAAA,mBAlH+B,cAkHY;EACzCtK,MAAAA,oBAAoB,GAAG,qBAAvB;EACAM,MAAAA,kBAAkB;EAClB,aAAO+I,wBAAwB,EAA/B;EACD,KAtH8B;EAwH/BkB,IAAAA,wBAAwB,EAAEj+B;EAxHK,GAAjC;EA2HAk+B,EAAAA,wCAAwC,GAAG;EACzC1b,IAAAA,WADyC,YAEvC3kB,OAFuC,EAGvCmkB,YAHuC,EAIpC;EACHoc,MAAAA,wBAAwB;EACxB,aAAO5b,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KAPwC;EAQzCsb,IAAAA,WARyC,YAQ1BljB,QAR0B,EAQb+Z,IARa,EAQwB;EAC/DT,MAAAA,oBAAoB,GAAG,aAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,aAAOyH,aAAa,CAACnhB,QAAD,EAAW+Z,IAAX,CAApB;EACD,KAbwC;EAczCoJ,IAAAA,UAdyC,YAevC1/B,OAfuC,EAgBvCmkB,YAhBuC,EAiBpC;EACH0R,MAAAA,oBAAoB,GAAG,YAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,aAAOtR,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KAtBwC;EAuBzC2W,IAAAA,SAvByC,YAwBvCc,MAxBuC,EAyBvCtF,IAzBuC,EA0BjC;EACNT,MAAAA,oBAAoB,GAAG,WAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,aAAOwG,WAAW,CAACb,MAAD,EAAStF,IAAT,CAAlB;EACD,KA/BwC;EAgCzCqJ,IAAAA,mBAhCyC,YAiCvCvS,GAjCuC,EAkCvCwO,MAlCuC,EAmCvCtF,IAnCuC,EAoCjC;EACNT,MAAAA,oBAAoB,GAAG,qBAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,aAAOmH,qBAAqB,CAAChQ,GAAD,EAAMwO,MAAN,EAActF,IAAd,CAA5B;EACD,KAzCwC;EA0CzCsJ,IAAAA,eA1CyC,YA2CvChE,MA3CuC,EA4CvCtF,IA5CuC,EA6CjC;EACNT,MAAAA,oBAAoB,GAAG,iBAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,aAAO6G,iBAAiB,CAAClB,MAAD,EAAStF,IAAT,CAAxB;EACD,KAlDwC;EAmDzCuJ,IAAAA,OAnDyC,YAmD9BjE,MAnD8B,EAmDbtF,IAnDa,EAmDwB;EAC/DT,MAAAA,oBAAoB,GAAG,SAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,UAAMmJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo9B,wCAAjC;;EACA,UAAI;EACF,eAAOzC,SAAS,CAAChC,MAAD,EAAStF,IAAT,CAAhB;EACD,OAFD,SAEU;EACR7rB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KA9DwC;EA+DzCU,IAAAA,UA/DyC,YAgEvCpH,OAhEuC,EAiEvCC,UAjEuC,EAkEvCn4B,IAlEuC,EAmErB;EAClBq1B,MAAAA,oBAAoB,GAAG,YAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,UAAMmJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo9B,wCAAjC;;EACA,UAAI;EACF,eAAO5H,YAAY,CAACC,OAAD,EAAUC,UAAV,EAAsBn4B,IAAtB,CAAnB;EACD,OAFD,SAEU;EACRiK,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KA9EwC;EA+EzCW,IAAAA,MA/EyC,YA+E/B/D,YA/E+B,EA+EE;EACzCnG,MAAAA,oBAAoB,GAAG,QAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,aAAO8F,QAAQ,CAACC,YAAD,CAAf;EACD,KApFwC;EAqFzCzB,IAAAA,QArFyC,YAsFvC3B,YAtFuC,EAuFH;EACpC/C,MAAAA,oBAAoB,GAAG,UAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,UAAMmJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo9B,wCAAjC;;EACA,UAAI;EACF,eAAO7E,UAAU,CAAC5C,YAAD,CAAjB;EACD,OAFD,SAEU;EACRnuB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAlGwC;EAmGzCY,IAAAA,aAnGyC,YAmGxB1iC,KAnGwB,EAmGdkgC,WAnGc,EAmG2B;EAClE3H,MAAAA,oBAAoB,GAAG,eAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,aAAOsH,eAAe,CAACjgC,AAAD,CAAtB;EACD,KAxGwC;EAyGzC2iC,IAAAA,gBAzGyC,YAyGrB3iC,KAzGqB,EAyGR;EAC/Bu4B,MAAAA,oBAAoB,GAAG,kBAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,aAAO8H,kBAAkB,CAACzgC,KAAD,CAAzB;EACD,KA9GwC;EA+GzC4iC,IAAAA,aA/GyC,cA+GQ;EAC/CrK,MAAAA,oBAAoB,GAAG,eAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,aAAOsI,eAAe,EAAtB;EACD,KApHwC;EAqHzCpE,IAAAA,gBArHyC,YAsHvCvvB,MAtHuC,EAuHvCivB,WAvHuC,EAwHvCO,SAxHuC,EAyH7B;EACVvE,MAAAA,oBAAoB,GAAG,kBAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,aAAOqF,kBAAkB,CAAC1wB,MAAD,EAASivB,WAAT,EAAsBO,SAAtB,CAAzB;EACD,KA9HwC;EA+HzC+F,IAAAA,mBA/HyC,cA+HE;EACzCtK,MAAAA,oBAAoB,GAAG,qBAAvB;EACA2K,MAAAA,qBAAqB;EACrBvK,MAAAA,iBAAiB;EACjB,aAAO8I,qBAAqB,EAA5B;EACD,KApIwC;EAsIzCqB,IAAAA,wBAAwB,EAAEj+B;EAtIe,GAA3C;EAyIAk9B,EAAAA,yCAAyC,GAAG;EAC1C1a,IAAAA,WAD0C,YAExC3kB,OAFwC,EAGxCmkB,YAHwC,EAIrC;EACHoc,MAAAA,wBAAwB;EACxB,aAAO5b,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KAPyC;EAQ1Csb,IAAAA,WAR0C,YAQ3BljB,QAR2B,EAQd+Z,IARc,EAQuB;EAC/DT,MAAAA,oBAAoB,GAAG,aAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOwH,cAAc,CAACphB,QAAD,EAAW+Z,IAAX,CAArB;EACD,KAbyC;EAc1CoJ,IAAAA,UAd0C,YAexC1/B,OAfwC,EAgBxCmkB,YAhBwC,EAiBrC;EACH0R,MAAAA,oBAAoB,GAAG,YAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOxR,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KAtByC;EAuB1C2W,IAAAA,SAvB0C,YAwBxCc,MAxBwC,EAyBxCtF,IAzBwC,EA0BlC;EACNT,MAAAA,oBAAoB,GAAG,WAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAO0G,YAAY,CAACjB,MAAD,EAAStF,IAAT,CAAnB;EACD,KA/ByC;EAgC1CqJ,IAAAA,mBAhC0C,YAiCxCvS,GAjCwC,EAkCxCwO,MAlCwC,EAmCxCtF,IAnCwC,EAoClC;EACNT,MAAAA,oBAAoB,GAAG,qBAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOmH,sBAAsB,CAAClQ,GAAD,EAAMwO,MAAN,EAActF,IAAd,CAA7B;EACD,KAzCyC;EA0C1CsJ,IAAAA,eA1C0C,YA2CxChE,MA3CwC,EA4CxCtF,IA5CwC,EA6ClC;EACNT,MAAAA,oBAAoB,GAAG,iBAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAO6G,kBAAkB,CAACpB,MAAD,EAAStF,IAAT,CAAzB;EACD,KAlDyC;EAmD1CuJ,IAAAA,OAnD0C,YAmD/BjE,MAnD+B,EAmDdtF,IAnDc,EAmDuB;EAC/DT,MAAAA,oBAAoB,GAAG,SAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo8B,yCAAjC;;EACA,UAAI;EACF,eAAOvB,UAAU,CAAClC,MAAD,EAAStF,IAAT,CAAjB;EACD,OAFD,SAEU;EACR7rB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KA9DyC;EA+D1CU,IAAAA,UA/D0C,YAgExCpH,OAhEwC,EAiExCC,UAjEwC,EAkExCn4B,IAlEwC,EAmEtB;EAClBq1B,MAAAA,oBAAoB,GAAG,YAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo8B,yCAAjC;;EACA,UAAI;EACF,eAAOpG,aAAa,CAACP,OAAD,EAAUC,UAAV,EAAsBn4B,IAAtB,CAApB;EACD,OAFD,SAEU;EACRiK,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KA9EyC;EA+E1CW,IAAAA,MA/E0C,YA+EhC/D,YA/EgC,EA+EC;EACzCnG,MAAAA,oBAAoB,GAAG,QAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAO+F,SAAS,CAACF,AAAD,CAAhB;EACD,KApFyC;EAqF1CzB,IAAAA,QArF0C,YAsFxC3B,YAtFwC,EAuFJ;EACpC/C,MAAAA,oBAAoB,GAAG,UAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo8B,yCAAjC;;EACA,UAAI;EACF,eAAO5D,WAAW,CAAC7C,YAAD,CAAlB;EACD,OAFD,SAEU;EACRnuB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAlGyC;EAmG1CY,IAAAA,aAnG0C,YAmGzB1iC,KAnGyB,EAmGfkgC,WAnGe,EAmG0B;EAClE3H,MAAAA,oBAAoB,GAAG,eAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOsH,gBAAgB,CAACngC,AAAD,CAAvB;EACD,KAxGyC;EAyG1C2iC,IAAAA,gBAzG0C,YAyGtB3iC,KAzGsB,EAyGT;EAC/Bu4B,MAAAA,oBAAoB,GAAG,kBAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOgI,mBAAmB,CAAC7gC,KAAD,CAA1B;EACD,KA9GyC;EA+G1C4iC,IAAAA,aA/G0C,cA+GO;EAC/CrK,MAAAA,oBAAoB,GAAG,eAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOuI,gBAAgB,EAAvB;EACD,KApHyC;EAqH1CvE,IAAAA,gBArH0C,YAsHxCvvB,MAtHwC,EAuHxCivB,WAvHwC,EAwHxCO,SAxHwC,EAyH9B;EACVvE,MAAAA,oBAAoB,GAAG,kBAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOoF,mBAAmB,CAAC3wB,MAAD,EAASivB,WAAT,EAAsBO,SAAtB,CAA1B;EACD,KA9HyC;EA+H1C+F,IAAAA,mBA/H0C,cA+HC;EACzCtK,MAAAA,oBAAoB,GAAG,qBAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAO8I,sBAAsB,EAA7B;EACD,KApIyC;EAsI1CmB,IAAAA,wBAAwB,EAAEj+B;EAtIgB,GAA5C;EAyIAm+B,EAAAA,2CAA2C,GAAG;EAC5C3b,IAAAA,WAD4C,YAE1C3kB,OAF0C,EAG1CmkB,YAH0C,EAIvC;EACHoc,MAAAA,wBAAwB;EACxB,aAAO5b,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KAP2C;EAS5Csb,IAAAA,WAT4C,YAS7BljB,QAT6B,EAShB+Z,IATgB,EASqB;EAC/DT,MAAAA,oBAAoB,GAAG,aAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOwH,cAAc,CAACphB,QAAD,EAAW+Z,IAAX,CAArB;EACD,KAd2C;EAe5CoJ,IAAAA,UAf4C,YAgB1C1/B,OAhB0C,EAiB1CmkB,YAjB0C,EAkBvC;EACH0R,MAAAA,oBAAoB,GAAG,YAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOxR,WAAW,CAAC3kB,OAAD,EAAUmkB,YAAV,CAAlB;EACD,KAvB2C;EAwB5C2W,IAAAA,SAxB4C,YAyB1Cc,MAzB0C,EA0B1CtF,IA1B0C,EA2BpC;EACNT,MAAAA,oBAAoB,GAAG,WAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAO0G,YAAY,CAACjB,MAAD,EAAStF,IAAT,CAAnB;EACD,KAhC2C;EAiC5CqJ,IAAAA,mBAjC4C,YAkC1CvS,GAlC0C,EAmC1CwO,MAnC0C,EAoC1CtF,IApC0C,EAqCpC;EACNT,MAAAA,oBAAoB,GAAG,qBAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOmH,sBAAsB,CAAClQ,GAAD,EAAMwO,MAAN,EAActF,IAAd,CAA7B;EACD,KA1C2C;EA2C5CsJ,IAAAA,eA3C4C,YA4C1ChE,MA5C0C,EA6C1CtF,IA7C0C,EA8CpC;EACNT,MAAAA,oBAAoB,GAAG,iBAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAO6G,kBAAkB,CAACpB,MAAD,EAAStF,IAAT,CAAzB;EACD,KAnD2C;EAoD5CuJ,IAAAA,OApD4C,YAoDjCjE,MApDiC,EAoDhBtF,IApDgB,EAoDqB;EAC/DT,MAAAA,oBAAoB,GAAG,SAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo8B,yCAAjC;;EACA,UAAI;EACF,eAAOvB,UAAU,CAAClC,MAAD,EAAStF,IAAT,CAAjB;EACD,OAFD,SAEU;EACR7rB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KA/D2C;EAgE5CU,IAAAA,UAhE4C,YAiE1CpH,OAjE0C,EAkE1CC,UAlE0C,EAmE1Cn4B,IAnE0C,EAoExB;EAClBq1B,MAAAA,oBAAoB,GAAG,YAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo8B,yCAAjC;;EACA,UAAI;EACF,eAAO5F,eAAe,CAACf,OAAD,EAAUC,UAAV,EAAsBn4B,IAAtB,CAAtB;EACD,OAFD,SAEU;EACRiK,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KA/E2C;EAgF5CW,IAAAA,MAhF4C,YAgFlC/D,YAhFkC,EAgFD;EACzCnG,MAAAA,oBAAoB,GAAG,QAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAO+F,SAAS,CAACF,AAAD,CAAhB;EACD,KArF2C;EAsF5CzB,IAAAA,QAtF4C,YAuF1C3B,YAvF0C,EAwFN;EACpC/C,MAAAA,oBAAoB,GAAG,UAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,UAAMiJ,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,MAAAA,wBAAsB,CAACxH,OAAvB,GAAiCo8B,yCAAjC;;EACA,UAAI;EACF,eAAO3D,aAAa,CAAC9C,YAAD,CAApB;EACD,OAFD,SAEU;EACRnuB,QAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;EACF,KAnG2C;EAoG5CY,IAAAA,aApG4C,YAoG3B1iC,KApG2B,EAoGjBkgC,WApGiB,EAoGwB;EAClE3H,MAAAA,oBAAoB,GAAG,eAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOsH,gBAAgB,CAACngC,AAAD,CAAvB;EACD,KAzG2C;EA0G5C2iC,IAAAA,gBA1G4C,YA0GxB3iC,KA1GwB,EA0GX;EAC/Bu4B,MAAAA,oBAAoB,GAAG,kBAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOiI,qBAAqB,CAAC9gC,KAAD,CAA5B;EACD,KA/G2C;EAgH5C4iC,IAAAA,aAhH4C,cAgHK;EAC/CrK,MAAAA,oBAAoB,GAAG,eAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOyI,kBAAkB,EAAzB;EACD,KArH2C;EAsH5CzE,IAAAA,gBAtH4C,YAuH1CvvB,MAvH0C,EAwH1CivB,WAxH0C,EAyH1CO,SAzH0C,EA0HhC;EACVvE,MAAAA,oBAAoB,GAAG,kBAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAOoF,mBAAmB,CAAC3wB,MAAD,EAASivB,WAAT,EAAsBO,SAAtB,CAA1B;EACD,KA/H2C;EAgI5C+F,IAAAA,mBAhI4C,cAgID;EACzCtK,MAAAA,oBAAoB,GAAG,qBAAvB;EACA2K,MAAAA,qBAAqB;EACrBrK,MAAAA,kBAAkB;EAClB,aAAO+I,wBAAwB,EAA/B;EACD,KArI2C;EAuI5CkB,IAAAA,wBAAwB,EAAEj+B;EAvIkB,GAA9C;EAyID;;MC7rFoB8Z,QAAOpJ;EAW5B,IAAI4tB,UAAkB,GAAG,CAAzB;AACA,EACA,IAAIC,iBAAyB,GAAG,CAAC,CAAjC;AACA;EAEA,SAASC,aAAT,GAAiC;EAC/B,SAAOF,UAAP;EACD;;EAED,SAASG,gBAAT,GAAkC;AAChC;EAGAH,EAAAA,UAAU,GAAGxkB,KAAG,EAAhB;EACD;;EAED,SAAS4kB,kBAAT,CAA4Bv+B,KAA5B,EAAgD;AAC9C;EAIAo+B,EAAAA,iBAAiB,GAAGzkB,KAAG,EAAvB;;EAEA,MAAM3Z,KAAK,CAACw+B,eAAR,GAAyC,CAA7C,EAAgD;EAC9Cx+B,IAAAA,KAAK,CAACw+B,eAAN,GAAwB7kB,KAAG,EAA3B;EACD;EACF;;EAED,SAAS8kB,0BAAT,CAAoCz+B,KAApC,EAAwD;AACtD;EAGAo+B,EAAAA,iBAAiB,GAAG,CAAC,CAArB;EACD;;EAED,SAASM,wCAAT,CACE1+B,KADF,EAEE2+B,gBAFF,EAGQ;AACN;EAIA,MAAIP,iBAAiB,IAAI,CAAzB,EAA4B;EAC1B,QAAMQ,WAAW,GAAGjlB,KAAG,KAAKykB,iBAA5B;EACAp+B,IAAAA,KAAK,CAAC6+B,cAAN,IAAwBD,WAAxB;;EACA,QAAID,gBAAJ,EAAsB;EACpB3+B,MAAAA,KAAK,CAAC8+B,gBAAN,GAAyBF,WAAzB;EACD;;EACDR,IAAAA,iBAAiB,GAAG,CAAC,CAArB;EACD;EACF;;EAmED,SAASW,sBAAT,CAAgC/+B,KAAhC,EAAoD;EAClD;EACA;EACA;EACA,MAAIwB,KAAK,GAAGxB,KAAK,CAACwB,KAAlB;;EACA,SAAOA,KAAP,EAAc;EACZxB,IAAAA,KAAK,CAAC6+B,cAAN,IAAwBr9B,KAAK,CAACq9B,cAA9B;EACAr9B,IAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;EACD;EACF;;ECgDD,IAAM3B,mBAAiB,GAAGlI,oBAAoB,CAACkI,iBAA/C;EAEA,IAAIk/B,gBAAyB,GAAG,KAAhC;EAEA,IAAIC,oBAAJ;EACA,IAAIC,kCAAJ;EACA,IAAIC,0CAAJ;EACA,IAAIC,8CAAJ;EACA,IAAIC,wBAAJ;AACA,EAAO,IAAIC,4BAAJ;EACP,IAAIC,uBAAJ;EACA,IAAIC,uBAAJ;AACA;AAEA,EAAa;EACXP,EAAAA,oBAAoB,GAAG,EAAvB;EACAC,EAAAA,kCAAkC,GAAG,EAArC;EACAC,EAAAA,0CAA0C,GAAG,EAA7C;EACAC,EAAAA,8CAA8C,GAAG,EAAjD;EACAC,EAAAA,wBAAwB,GAAG,EAA3B;EACAC,EAAAA,4BAA4B,GAAG,KAA/B;EACAC,EAAAA,uBAAuB,GAAG,EAA1B;EACAC,EAAAA,uBAAuB,GAAG,EAA1B;AACAC,EACD;;AAED,EAAO,SAASC,iBAAT,CACL/+B,OADK,EAEL8L,cAFK,EAGLkzB,YAHK,EAILte,WAJK,EAKL;EACA,MAAI1gB,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACA;EACA;EACA;EACA8L,IAAAA,cAAc,CAACjL,KAAf,GAAuB6tB,gBAAgB,CACrC5iB,cADqC,EAErC,IAFqC,EAGrCkzB,YAHqC,EAIrCte,WAJqC,CAAvC;EAMD,GAXD,MAWO;EACL;EACA;EACA;EAEA;EACA;EACA5U,IAAAA,cAAc,CAACjL,KAAf,GAAuBytB,oBAAoB,CACzCxiB,cADyC,EAEzC9L,OAAO,CAACa,KAFiC,EAGzCm+B,YAHyC,EAIzCte,WAJyC,CAA3C;EAMD;EACF;;EAED,SAASue,+BAAT,CACEj/B,OADF,EAEE8L,cAFF,EAGEkzB,YAHF,EAIEte,WAJF,EAKE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA5U,EAAAA,cAAc,CAACjL,KAAf,GAAuBytB,oBAAoB,CACzCxiB,cADyC,EAEzC9L,OAAO,CAACa,KAFiC,EAGzC,IAHyC,EAIzC6f,WAJyC,CAA3C,CATA;EAgBA;EACA;EACA;;EACA5U,EAAAA,cAAc,CAACjL,KAAf,GAAuBytB,oBAAoB,CACzCxiB,cADyC,EAEzC,IAFyC,EAGzCkzB,YAHyC,EAIzCte,WAJyC,CAA3C;EAMD;;EAED,SAASwe,gBAAT,CACEl/B,OADF,EAEE8L,cAFF,EAGEjC,SAHF,EAIE2Z,SAJF,EAKE9C,WALF,EAME;EACA;EACA;EACA;EAEA,EAAa;EACX,QAAI5U,cAAc,CAACnP,IAAf,KAAwBmP,cAAc,CAACsd,WAA3C,EAAwD;EACtD;EACA;EACA,UAAM+V,cAAc,GAAGt1B,SAAS,CAACqd,SAAjC;;EACA,UAAIiY,cAAJ,EAAoB;EAClB70B,QAAAA,cAAc,CACZ60B,cADY,EAEZ3b,SAFY;EAGZ,cAHY,EAIZ5mB,gBAAgB,CAACiN,SAAD,CAJJ,CAAd;EAMD;EACF;EACF;;EAED,MAAM3M,MAAM,GAAG2M,SAAS,CAAC3M,MAAzB;EACA,MAAMitB,GAAG,GAAGre,cAAc,CAACqe,GAA3B,CAtBA;;EAyBA,MAAI6U,YAAJ;EACAxd,EAAAA,oBAAoB,CAAC1V,cAAD,EAAiB4U,WAAjB,CAApB;;EACA,EAAa;EACXvhB,IAAAA,mBAAiB,CAACa,OAAlB,GAA4B8L,cAA5B;EACA+P,IAAAA,cAAc,CAAC,IAAD,CAAd;EACAmjB,IAAAA,YAAY,GAAGjL,eAAe,CAC5B/zB,OAD4B,EAE5B8L,cAF4B,EAG5B5O,MAH4B,EAI5BsmB,SAJ4B,EAK5B2G,GAL4B,EAM5BzJ,WAN4B,CAA9B;;EA0BA7E,IAAAA,cAAc,CAAC,KAAD,CAAd;EACD,GA9BD;;EAyCA,MAAI7b,OAAO,KAAK,IAAZ,IAAoB,CAACq+B,gBAAzB,EAA2C;EACzC3J,IAAAA,YAAY,CAAC10B,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAAZ;EACA,WAAO0e,4BAA4B,CAACp/B,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAAnC;EACD,GAvED;;;EA0EA5U,EAAAA,cAAc,CAACpM,KAAf,IAAwB/B,aAAxB;EACAohC,EAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0BkzB,YAA1B,EAAwCte,WAAxC,CAAjB;EACA,SAAO5U,cAAc,CAACjL,KAAtB;EACD;;EAED,SAASw+B,mBAAT,CACEr/B,OADF,EAEE8L,cAFF,EAGEjC,SAHF,EAIE2Z,SAJF,EAKE8b,WALF,EAME5e,WANF,EAOgB;EACd,MAAI1gB,OAAO,KAAK,IAAhB,EAAsB;EACpB,QAAMrD,IAAI,GAAGkN,SAAS,CAAClN,IAAvB;;EACA,QACE4iC,yBAAyB,CAAC5iC,IAAD,CAAzB,IACAkN,SAAS,CAAC21B,OAAV,KAAsB,IADtB;EAGA31B,IAAAA,SAAS,CAACoV,YAAV,KAA2BpX,SAJ7B,EAKE;EACA,UAAI43B,YAAY,GAAG9iC,IAAnB;;EACA,MAAa;EACX8iC,QAAAA,YAAY,GAAGC,8BAA8B,CAAC/iC,IAAD,CAA7C;EACD,OAJD;EAMA;EACA;;;EACAmP,MAAAA,cAAc,CAACjP,GAAf,GAAqBtD,mBAArB;EACAuS,MAAAA,cAAc,CAACnP,IAAf,GAAsB8iC,YAAtB;;EACA,MAAa;EACXE,QAAAA,8BAA8B,CAAC7zB,cAAD,EAAiBnP,IAAjB,CAA9B;EACD;;EACD,aAAOijC,yBAAyB,CAC9B5/B,OAD8B,EAE9B8L,cAF8B,EAG9B2zB,YAH8B,EAI9Bjc,SAJ8B,EAK9B8b,WAL8B,EAM9B5e,WAN8B,CAAhC;EAQD;;EACD,IAAa;EACX,UAAMye,cAAc,GAAGxiC,IAAI,CAACuqB,SAA5B;;EACA,UAAIiY,cAAJ,EAAoB;EAClB;EACA;EACA70B,QAAAA,cAAc,CACZ60B,cADY,EAEZ3b,SAFY;EAGZ,cAHY,EAIZ5mB,gBAAgB,CAACD,IAAD,CAJJ,CAAd;EAMD;EACF;;EACD,QAAMkE,KAAK,GAAGg/B,2BAA2B,CACvCh2B,SAAS,CAAClN,IAD6B,EAEvC,IAFuC,EAGvC6mB,SAHuC,EAIvC1X,cAJuC,EAKvCA,cAAc,CAAC0Q,IALwB,EAMvCkE,WANuC,CAAzC;EAQA7f,IAAAA,KAAK,CAACspB,GAAN,GAAYre,cAAc,CAACqe,GAA3B;EACAtpB,IAAAA,KAAK,CAAClB,MAAN,GAAemM,cAAf;EACAA,IAAAA,cAAc,CAACjL,KAAf,GAAuBA,KAAvB;EACA,WAAOA,KAAP;EACD;;EACD,EAAa;EACX,QAAMlE,KAAI,GAAGkN,SAAS,CAAClN,IAAvB;EACA,QAAMwiC,eAAc,GAAGxiC,KAAI,CAACuqB,SAA5B;;EACA,QAAIiY,eAAJ,EAAoB;EAClB;EACA;EACA70B,MAAAA,cAAc,CACZ60B,eADY,EAEZ3b,SAFY;EAGZ,YAHY,EAIZ5mB,gBAAgB,CAACD,KAAD,CAJJ,CAAd;EAMD;EACF;;EACD,MAAMiyB,YAAY,GAAK5uB,OAAO,CAACa,KAA/B,CAtEc;;EAuEd,MAAI,CAACyV,gBAAgB,CAACgpB,WAAD,EAAc5e,WAAd,CAArB,EAAiD;EAC/C;EACA;EACA,QAAMof,SAAS,GAAGlR,YAAY,CAAC9F,aAA/B,CAH+C;;EAK/C,QAAI0W,OAAO,GAAG31B,SAAS,CAAC21B,OAAxB;EACAA,IAAAA,OAAO,GAAGA,OAAO,KAAK,IAAZ,GAAmBA,OAAnB,GAA6B3kB,YAAvC;;EACA,QAAI2kB,OAAO,CAACM,SAAD,EAAYtc,SAAZ,CAAP,IAAiCxjB,OAAO,CAACmqB,GAAR,KAAgBre,cAAc,CAACqe,GAApE,EAAyE;EACvE,aAAOiV,4BAA4B,CAACp/B,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAAnC;EACD;EACF,GAjFa;;;EAmFd5U,EAAAA,cAAc,CAACpM,KAAf,IAAwB/B,aAAxB;EACA,MAAM6sB,QAAQ,GAAGgB,oBAAoB,CAACoD,YAAD,EAAepL,SAAf,CAArC;EACAgH,EAAAA,QAAQ,CAACL,GAAT,GAAere,cAAc,CAACqe,GAA9B;EACAK,EAAAA,QAAQ,CAAC7qB,MAAT,GAAkBmM,cAAlB;EACAA,EAAAA,cAAc,CAACjL,KAAf,GAAuB2pB,QAAvB;EACA,SAAOA,QAAP;EACD;;EAED,SAASoV,yBAAT,CACE5/B,OADF,EAEE8L,cAFF,EAGEjC,SAHF,EAIE2Z,SAJF,EAKE8b,WALF,EAME5e,WANF,EAOgB;EACd;EACA;EACA;EAEA,EAAa;EACX,QAAI5U,cAAc,CAACnP,IAAf,KAAwBmP,cAAc,CAACsd,WAA3C,EAAwD;EACtD;EACA;EACA,UAAI2W,aAAa,GAAGj0B,cAAc,CAACsd,WAAnC;;EACA,UAAI2W,aAAa,CAACjjC,QAAd,KAA2B7B,eAA/B,EAAgD;EAC9C;EACA;EACA;EACA,YAAMmC,aAA0C,GAAG2iC,aAAnD;EACA,YAAM1iC,OAAO,GAAGD,aAAa,CAACE,QAA9B;EACA,YAAMC,IAAI,GAAGH,aAAa,CAACI,KAA3B;;EACA,YAAI;EACFuiC,UAAAA,aAAa,GAAGxiC,IAAI,CAACF,OAAD,CAApB;EACD,SAFD,CAEE,OAAOI,CAAP,EAAU;EACVsiC,UAAAA,aAAa,GAAG,IAAhB;EACD,SAX6C;;;EAa9C,YAAMC,cAAc,GAAGD,aAAa,IAAKA,aAAD,CAAqB7Y,SAA7D;;EACA,YAAI8Y,cAAJ,EAAoB;EAClB11B,UAAAA,cAAc,CACZ01B,cADY,EAEZxc,SAFY;EAGZ,gBAHY,EAIZ5mB,gBAAgB,CAACmjC,aAAD,CAJJ,CAAd;EAMD;EACF;EACF;EACF;;EACD,MAAI//B,OAAO,KAAK,IAAhB,EAAsB;EACpB,QAAM8/B,SAAS,GAAG9/B,OAAO,CAAC8oB,aAA1B;;EACA,QACEjO,YAAY,CAACilB,SAAD,EAAYtc,SAAZ,CAAZ,IACAxjB,OAAO,CAACmqB,GAAR,KAAgBre,cAAc,CAACqe,GAD/B;EAGCzb,IAAAA,CAAU5C,cAAc,CAACnP,IAAf,KAAwBqD,OAAO,CAACrD,IAAnC,CAHR,CADF,EAKE;EACA0hC,MAAAA,gBAAgB,GAAG,KAAnB;;EACA,UAAI,CAAC/nB,gBAAgB,CAACoK,WAAD,EAAc4e,WAAd,CAArB,EAAiD;EAC/C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAxzB,QAAAA,cAAc,CAAC6G,KAAf,GAAuB3S,OAAO,CAAC2S,KAA/B;EACA,eAAOysB,4BAA4B,CACjCp/B,OADiC,EAEjC8L,cAFiC,EAGjC4U,WAHiC,CAAnC;EAKD,OApBD,MAoBO,IAAI,CAAC1gB,OAAO,CAACN,KAAR,GAAgBb,4BAAjB,MAAmDnB,OAAvD,EAAgE;EACrE;EACA;EACA2gC,QAAAA,gBAAgB,GAAG,IAAnB;EACD;EACF;EACF;;EACD,SAAO4B,uBAAuB,CAC5BjgC,OAD4B,EAE5B8L,cAF4B,EAG5BjC,SAH4B,EAI5B2Z,SAJ4B,EAK5B9C,WAL4B,CAA9B;EAOD;;EAED,SAASwf,wBAAT,CACElgC,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIE;EACA,MAAM8C,SAAyB,GAAG1X,cAAc,CAACwd,YAAjD;EACA,MAAM0V,YAAY,GAAGxb,SAAS,CAAC7gB,QAA/B;EAEA,MAAM4gB,SAAgC,GACpCvjB,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAACuiB,aAA3B,GAA2C,IAD7C;;EAGA,MACEiB,SAAS,CAAChH,IAAV,KAAmB,QAAnB,IACAgH,SAAS,CAAChH,IAAV,KAAmB,+BAFrB,EAGE;EACA,QAAI,CAAC1Q,cAAc,CAAC0Q,IAAf,GAAsBrC,cAAvB,MAA2CH,MAA/C,EAAuD;EACrD;EACA;EACA,UAAMyJ,SAAyB,GAAG;EAChC0c,QAAAA,SAAS,EAAE9uB;EADqB,OAAlC;EAGAvF,MAAAA,cAAc,CAACyW,aAAf,GAA+BkB,SAA/B;EACA2c,MAAAA,eAAe,CAACt0B,cAAD,EAAiB4U,WAAjB,CAAf;EACD,KARD,MAQO,IAAI,CAACpK,gBAAgB,CAACoK,WAAD,EAAenO,aAAf,CAArB,EAA2D;EAChE,UAAI8tB,aAAJ;;EACA,UAAI9c,SAAS,KAAK,IAAlB,EAAwB;EACtB,YAAM+c,aAAa,GAAG/c,SAAS,CAAC4c,SAAhC;EACAE,QAAAA,aAAa,GAAG5pB,UAAU,CAAC6pB,aAAD,EAAgB5f,WAAhB,CAA1B;EACD,OAHD,MAGO;EACL2f,QAAAA,aAAa,GAAG3f,WAAhB;EACD,OAP+D;;;EAUhE,MAA4B;EAC1B6f,QAAAA,eAAe,CAAEhuB,aAAF,CAAf;EACD;;EACDzG,MAAAA,cAAc,CAAC6G,KAAf,GAAuB7G,cAAc,CAAC6U,UAAf,GAA4BhK,WAAW,CAC5DpE,aAD4D,CAA9D;EAGA,UAAMkR,UAAyB,GAAG;EAChC0c,QAAAA,SAAS,EAAEE;EADqB,OAAlC;EAGAv0B,MAAAA,cAAc,CAACyW,aAAf,GAA+BkB,UAA/B,CAnBgE;EAqBhE;;EACA2c,MAAAA,eAAe,CAACt0B,cAAD,EAAiBu0B,aAAjB,CAAf;EACA,aAAO,IAAP;EACD,KAxBM,MAwBA;EACL;EACA,UAAM5c,WAAyB,GAAG;EAChC0c,QAAAA,SAAS,EAAE9uB;EADqB,OAAlC;EAGAvF,MAAAA,cAAc,CAACyW,aAAf,GAA+BkB,WAA/B,CALK;;EAOL,UAAM+c,kBAAkB,GACtBjd,SAAS,KAAK,IAAd,GAAqBA,SAAS,CAAC4c,SAA/B,GAA2Czf,WAD7C;EAEA0f,MAAAA,eAAe,CAACt0B,cAAD,EAAiB00B,kBAAjB,CAAf;EACD;EACF,GA/CD,MA+CO;EACL,QAAIA,mBAAJ;;EACA,QAAIjd,SAAS,KAAK,IAAlB,EAAwB;EACtBid,MAAAA,mBAAkB,GAAG/pB,UAAU,CAAC8M,SAAS,CAAC4c,SAAX,EAAsBzf,WAAtB,CAA/B,CADsB;;EAGtB5U,MAAAA,cAAc,CAACyW,aAAf,GAA+B,IAA/B;EACD,KAJD,MAIO;EACL;EACA;EACA;EACAie,MAAAA,mBAAkB,GAAG9f,WAArB;EACD;;EACD0f,IAAAA,eAAe,CAACt0B,cAAD,EAAiB00B,mBAAjB,CAAf;EACD;;EAEDzB,EAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0BkzB,YAA1B,EAAwCte,WAAxC,CAAjB;EACA,SAAO5U,cAAc,CAACjL,KAAtB;EACD;EAGD;EACA;;;EACA,IAAM4/B,2BAA2B,GAAGP,wBAApC;;EAEA,SAASvT,cAAT,CACE3sB,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIE;EACA,MAAMse,YAAY,GAAGlzB,cAAc,CAACwd,YAApC;EACAyV,EAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0BkzB,YAA1B,EAAwCte,WAAxC,CAAjB;EACA,SAAO5U,cAAc,CAACjL,KAAtB;EACD;;EAED,SAAS6/B,UAAT,CACE1gC,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIE;EACA,MAAMse,YAAY,GAAGlzB,cAAc,CAACwd,YAAf,CAA4B3mB,QAAjD;EACAo8B,EAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0BkzB,YAA1B,EAAwCte,WAAxC,CAAjB;EACA,SAAO5U,cAAc,CAACjL,KAAtB;EACD;;EAED,SAAS8/B,cAAT,CACE3gC,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIE;EACA,EAAyB;EACvB5U,IAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB,CADuB;EAIvB;;EACA,QAAMsC,SAAS,GAAG2L,cAAc,CAAC3L,SAAjC;EACAA,IAAAA,SAAS,CAACygC,cAAV,GAA2B,CAA3B;EACAzgC,IAAAA,SAAS,CAAC0gC,qBAAV,GAAkC,CAAlC;EACD;;EACD,MAAMrd,SAAS,GAAG1X,cAAc,CAACwd,YAAjC;EACA,MAAM0V,YAAY,GAAGxb,SAAS,CAAC7gB,QAA/B;EACAo8B,EAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0BkzB,YAA1B,EAAwCte,WAAxC,CAAjB;EACA,SAAO5U,cAAc,CAACjL,KAAtB;EACD;;EAED,SAASigC,OAAT,CAAiB9gC,OAAjB,EAAwC8L,cAAxC,EAA+D;EAC7D,MAAMqe,GAAG,GAAGre,cAAc,CAACqe,GAA3B;;EACA,MACGnqB,OAAO,KAAK,IAAZ,IAAoBmqB,GAAG,KAAK,IAA7B,IACCnqB,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACmqB,GAAR,KAAgBA,GAFvC,EAGE;EACA;EACAre,IAAAA,cAAc,CAACpM,KAAf,IAAwBvB,GAAxB;EACD;EACF;;EAED,SAAS8hC,uBAAT,CACEjgC,OADF,EAEE8L,cAFF,EAGEjC,SAHF,EAIE2Z,SAJF,EAKE9C,WALF,EAME;EACA,EAAa;EACX,QAAI5U,cAAc,CAACnP,IAAf,KAAwBmP,cAAc,CAACsd,WAA3C,EAAwD;EACtD;EACA;EACA,UAAM+V,cAAc,GAAGt1B,SAAS,CAACqd,SAAjC;;EACA,UAAIiY,cAAJ,EAAoB;EAClB70B,QAAAA,cAAc,CACZ60B,cADY,EAEZ3b,SAFY;EAGZ,cAHY,EAIZ5mB,gBAAgB,CAACiN,SAAD,CAJJ,CAAd;EAMD;EACF;EACF;;EAED,MAAI9M,OAAJ;;EACA,EAA2B;EACzB,QAAMmP,eAAe,GAAGL,kBAAkB,CAACC,cAAD,EAAiBjC,SAAjB,EAA4B,IAA5B,CAA1C;EACA9M,IAAAA,OAAO,GAAGuP,gBAAgB,CAACR,cAAD,EAAiBI,eAAjB,CAA1B;EACD;;EAED,MAAI8yB,YAAJ;EACAxd,EAAAA,oBAAoB,CAAC1V,cAAD,EAAiB4U,WAAjB,CAApB;;EACA,EAAa;EACXvhB,IAAAA,mBAAiB,CAACa,OAAlB,GAA4B8L,cAA5B;EACA+P,IAAAA,cAAc,CAAC,IAAD,CAAd;EACAmjB,IAAAA,YAAY,GAAGjL,eAAe,CAC5B/zB,OAD4B,EAE5B8L,cAF4B,EAG5BjC,SAH4B,EAI5B2Z,SAJ4B,EAK5BzmB,OAL4B,EAM5B2jB,WAN4B,CAA9B;;EA0BA7E,IAAAA,cAAc,CAAC,KAAD,CAAd;EACD,GA9BD;;EAyCA,MAAI7b,OAAO,KAAK,IAAZ,IAAoB,CAACq+B,gBAAzB,EAA2C;EACzC3J,IAAAA,YAAY,CAAC10B,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAAZ;EACA,WAAO0e,4BAA4B,CAACp/B,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAAnC;EACD,GArED;;;EAwEA5U,EAAAA,cAAc,CAACpM,KAAf,IAAwB/B,aAAxB;EACAohC,EAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0BkzB,YAA1B,EAAwCte,WAAxC,CAAjB;EACA,SAAO5U,cAAc,CAACjL,KAAtB;EACD;;EAuED,SAASkgC,oBAAT,CACE/gC,OADF,EAEE8L,cAFF,EAGEjC,SAHF,EAIE2Z,SAJF,EAKE9C,WALF,EAME;EACA,EAAa;EACX,QAAI5U,cAAc,CAACnP,IAAf,KAAwBmP,cAAc,CAACsd,WAA3C,EAAwD;EACtD;EACA;EACA,UAAM+V,cAAc,GAAGt1B,SAAS,CAACqd,SAAjC;;EACA,UAAIiY,cAAJ,EAAoB;EAClB70B,QAAAA,cAAc,CACZ60B,cADY,EAEZ3b,SAFY;EAGZ,cAHY,EAIZ5mB,gBAAgB,CAACiN,SAAD,CAJJ,CAAd;EAMD;EACF;EACF,GAfD;EAkBA;EACA;;;EACA,MAAIm3B,UAAJ;;EACA,MAAIC,iBAAuB,CAACp3B,SAAD,CAA3B,EAAwC;EACtCm3B,IAAAA,UAAU,GAAG,IAAb;EACAE,IAAAA,mBAAyB,CAACp1B,cAAD,CAAzB;EACD,GAHD,MAGO;EACLk1B,IAAAA,UAAU,GAAG,KAAb;EACD;;EACDxf,EAAAA,oBAAoB,CAAC1V,cAAD,EAAiB4U,WAAjB,CAApB;EAEA,MAAMxgB,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC;EACA,MAAIumB,YAAJ;;EACA,MAAIxmB,QAAQ,KAAK,IAAjB,EAAuB;EACrB,QAAIF,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACA;EACA;EACA;EACAA,MAAAA,OAAO,CAACR,SAAR,GAAoB,IAApB;EACAsM,MAAAA,cAAc,CAACtM,SAAf,GAA2B,IAA3B,CANoB;;EAQpBsM,MAAAA,cAAc,CAACpM,KAAf,IAAwB9B,SAAxB;EACD,KAVoB;;;EAYrBqqB,IAAAA,sBAAsB,CAACnc,cAAD,EAAiBjC,SAAjB,EAA4B2Z,SAA5B,CAAtB;EACAmF,IAAAA,kBAAkB,CAAC7c,cAAD,EAAiBjC,SAAjB,EAA4B2Z,SAA5B,EAAuC9C,WAAvC,CAAlB;EACAgG,IAAAA,YAAY,GAAG,IAAf;EACD,GAfD,MAeO,IAAI1mB,OAAO,KAAK,IAAhB,EAAsB;EAC3B;EACA0mB,IAAAA,YAAY,GAAGmC,wBAAwB,CACrC/c,cADqC,EAErCjC,SAFqC,EAGrC2Z,SAHqC,EAIrC9C,WAJqC,CAAvC;EAMD,GARM,MAQA;EACLgG,IAAAA,YAAY,GAAGwC,mBAAmB,CAChClpB,OADgC,EAEhC8L,cAFgC,EAGhCjC,SAHgC,EAIhC2Z,SAJgC,EAKhC9C,WALgC,CAAlC;EAOD;;EACD,MAAMygB,cAAc,GAAGC,oBAAoB,CACzCphC,OADyC,EAEzC8L,cAFyC,EAGzCjC,SAHyC,EAIzC6c,YAJyC,EAKzCsa,UALyC,EAMzCtgB,WANyC,CAA3C;;EAQA,EAAa;EACX,QAAMxe,IAAI,GAAG4J,cAAc,CAAC3L,SAA5B;;EACA,QAAIumB,YAAY,IAAIxkB,IAAI,CAACI,KAAL,KAAekhB,SAAnC,EAA8C;EAC5C,UAAI,CAACmb,4BAAL,EAAmC;EACjC,cACE,2EACE,uDAFJ,EAGE/hC,gBAAgB,CAACkP,cAAc,CAACnP,IAAhB,CAAhB,IAAyC,aAH3C;EAKD;;EACDgiC,MAAAA,4BAA4B,GAAG,IAA/B;EACD;EACF;;EACD,SAAOwC,cAAP;EACD;;EAED,SAASC,oBAAT,CACEphC,OADF,EAEE8L,cAFF,EAGEjC,SAHF,EAIE6c,YAJF,EAKEsa,UALF,EAMEtgB,WANF,EAOE;EACA;EACAogB,EAAAA,OAAO,CAAC9gC,OAAD,EAAU8L,cAAV,CAAP;EAEA,MAAMu1B,eAAe,GAAG,CAACv1B,cAAc,CAACpM,KAAf,GAAuBxB,UAAxB,MAAwCR,OAAhE;;EAEA,MAAI,CAACgpB,YAAD,IAAiB,CAAC2a,eAAtB,EAAuC;EACrC;EACA,QAAIL,UAAJ,EAAgB;EACd1zB,MAAAA,yBAAyB,CAACxB,cAAD,EAAiBjC,SAAjB,EAA4B,KAA5B,CAAzB;EACD;;EAED,WAAOu1B,4BAA4B,CAACp/B,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAAnC;EACD;;EAED,MAAMxgB,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC,CAfA;;EAkBAhB,EAAAA,mBAAiB,CAACa,OAAlB,GAA4B8L,cAA5B;EACA,MAAIkzB,YAAJ;;EACA,MACEqC,eAAe,IACf,OAAOx3B,SAAS,CAAC+d,wBAAjB,KAA8C,UAFhD,EAGE;EACA;EACA;EACA;EACA;EACA;EACAoX,IAAAA,YAAY,GAAG,IAAf;;EAEA,IAAyB;EACvBlB,MAAAA,0BAA0B,CAAChyB,AAAD,CAA1B;EACD;EACF,GAdD,MAcO;EACL,IAAa;EACX+P,MAAAA,cAAc,CAAC,IAAD,CAAd;EACAmjB,MAAAA,YAAY,GAAG9+B,QAAQ,CAAChD,MAAT,EAAf;;EAYA2e,MAAAA,cAAc,CAAC,KAAD,CAAd;EACD,KAfD;EAkBD,GArDD;;;EAwDA/P,EAAAA,cAAc,CAACpM,KAAf,IAAwB/B,aAAxB;;EACA,MAAIqC,OAAO,KAAK,IAAZ,IAAoBqhC,eAAxB,EAAyC;EACvC;EACA;EACA;EACA;EACApC,IAAAA,+BAA+B,CAC7Bj/B,OAD6B,EAE7B8L,cAF6B,EAG7BkzB,YAH6B,EAI7Bte,WAJ6B,CAA/B;EAMD,GAXD,MAWO;EACLqe,IAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0BkzB,YAA1B,EAAwCte,WAAxC,CAAjB;EACD,GAtED;EAyEA;;;EACA5U,EAAAA,cAAc,CAACyW,aAAf,GAA+BriB,QAAQ,CAAC8mB,KAAxC,CA1EA;;EA6EA,MAAIga,UAAJ,EAAgB;EACd1zB,IAAAA,yBAAyB,CAACxB,cAAD,EAAiBjC,SAAjB,EAA4B,IAA5B,CAAzB;EACD;;EAED,SAAOiC,cAAc,CAACjL,KAAtB;EACD;;EAED,SAASygC,mBAAT,CAA6Bx1B,cAA7B,EAA6C;EAC3C,MAAM0C,IAAI,GAAI1C,cAAc,CAAC3L,SAA7B;;EACA,MAAIqO,IAAI,CAAC+yB,cAAT,EAAyB;EACvB30B,IAAAA,yBAAyB,CACvBd,cADuB,EAEvB0C,IAAI,CAAC+yB,cAFkB,EAGvB/yB,IAAI,CAAC+yB,cAAL,KAAwB/yB,IAAI,CAACzR,OAHN,CAAzB;EAKD,GAND,MAMO,IAAIyR,IAAI,CAACzR,OAAT,EAAkB;EACvB;EACA6P,IAAAA,yBAAyB,CAACd,cAAD,EAAiB0C,IAAI,CAACzR,OAAtB,EAA+B,KAA/B,CAAzB;EACD;;EACDqyB,EAAAA,iBAAiB,CAACtjB,cAAD,EAAiB0C,IAAI,CAAC9K,aAAtB,CAAjB;EACD;;EAED,SAAS89B,cAAT,CAAwBxhC,OAAxB,EAAiC8L,cAAjC,EAAiD4U,WAAjD,EAA8D;EAC5D4gB,EAAAA,mBAAmB,CAACx1B,cAAD,CAAnB;EACA,MAAM+W,WAAW,GAAG/W,cAAc,CAAC+W,WAAnC;;EAF4D,QAI1D7iB,OAAO,KAAK,IAAZ,IAAoB6iB,WAAW,KAAK,IAJsB;EAAA;EAAA;EAAA;EAAA;;EAS5D,MAAMW,SAAS,GAAG1X,cAAc,CAACwd,YAAjC;EACA,MAAM/F,SAAS,GAAGzX,cAAc,CAACyW,aAAjC;EACA,MAAMkf,YAAY,GAAGle,SAAS,KAAK,IAAd,GAAqBA,SAAS,CAACrZ,OAA/B,GAAyC,IAA9D;EACA4Y,EAAAA,gBAAgB,CAAC9iB,OAAD,EAAU8L,cAAV,CAAhB;EACA6X,EAAAA,kBAAkB,CAAC7X,cAAD,EAAiB0X,SAAjB,EAA4B,IAA5B,EAAkC9C,WAAlC,CAAlB;EACA,MAAM+C,SAAS,GAAG3X,cAAc,CAACyW,aAAjC,CAd4D;EAgB5D;;EACA,MAAMyc,YAAY,GAAGvb,SAAS,CAACvZ,OAA/B;;EACA,MAAI80B,YAAY,KAAKyC,YAArB,EAAmC;AACjCC,EACA,WAAOtC,4BAA4B,CAACp/B,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAAnC;EACD;;EACD,MAAMlS,IAAe,GAAG1C,cAAc,CAAC3L,SAAvC;;EACA,MAAIqO,IAAI,CAACmzB,OAAL,IAAgBrQ,mBAAmB,CAACxlB,AAAD,CAAvC,EAAyD;AACvD;EAmBA,QAAMjL,KAAK,GAAG6tB,gBAAgB,CAC5B5iB,cAD4B,EAE5B,IAF4B,EAG5BkzB,YAH4B,EAI5Bte,WAJ4B,CAA9B;EAMA5U,IAAAA,cAAc,CAACjL,KAAf,GAAuBA,KAAvB;EAEA,QAAIvB,IAAI,GAAGuB,KAAX;;EACA,WAAOvB,IAAP,EAAa;EACX;EACA;EACA;EACA;EACA;EACA;EACAA,MAAAA,IAAI,CAACI,KAAL,GAAcJ,IAAI,CAACI,KAAL,GAAa,CAAC9B,SAAf,GAA4BW,SAAzC;EACAe,MAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;EACD;EACF,GAvCD,MAuCO;EACL;EACA;EACAi+B,IAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0BkzB,YAA1B,EAAwCte,WAAxC,CAAjB;AACAghB,EACD;;EACD,SAAO51B,cAAc,CAACjL,KAAtB;EACD;;EAED,SAAS+gC,mBAAT,CACE5hC,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIE;EACA+O,EAAAA,eAAe,CAAC3jB,cAAD,CAAf;;EAMA,MAAMnP,IAAI,GAAGmP,cAAc,CAACnP,IAA5B;EACA,MAAM6mB,SAAS,GAAG1X,cAAc,CAACwd,YAAjC;EACA,MAAMwW,SAAS,GAAG9/B,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAAC8oB,aAA3B,GAA2C,IAA7D;EAEA,MAAIkW,YAAY,GAAGxb,SAAS,CAAC7gB,QAA7B;AACA;EAEA,EAMO,IAAIm9B,SAAS,KAAK,IAAd,IAAsBz7B,oBAAoB,CAAC1H,AAAD,CAA9C,EAAiE;EACtE;EACA;EACAmP,IAAAA,cAAc,CAACpM,KAAf,IAAwB1B,YAAxB;EACD;;EAED8iC,EAAAA,OAAO,CAAC9gC,OAAD,EAAU8L,cAAV,CAAP;EACAizB,EAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0BkzB,YAA1B,EAAwCte,WAAxC,CAAjB;EACA,SAAO5U,cAAc,CAACjL,KAAtB;EACD;;EAED,SAASghC,cAAT,CAAwB7hC,OAAxB,EAAiC8L,cAAjC,EAAiD;AAC/C,EAIA;;;EACA,SAAO,IAAP;EACD;;EAED,SAASg2B,kBAAT,CACEC,QADF,EAEEj2B,cAFF,EAGEsd,WAHF,EAIEkW,WAJF,EAKE5e,WALF,EAME;EACA,MAAIqhB,QAAQ,KAAK,IAAjB,EAAuB;EACrB;EACA;EACA;EACA;EACAA,IAAAA,QAAQ,CAACviC,SAAT,GAAqB,IAArB;EACAsM,IAAAA,cAAc,CAACtM,SAAf,GAA2B,IAA3B,CANqB;;EAQrBsM,IAAAA,cAAc,CAACpM,KAAf,IAAwB9B,SAAxB;EACD;;EAED,MAAM0E,KAAK,GAAGwJ,cAAc,CAACwd,YAA7B;EACA,MAAMlsB,aAA0C,GAAGgsB,WAAnD;EACA,MAAM/rB,OAAO,GAAGD,aAAa,CAACE,QAA9B;EACA,MAAMC,IAAI,GAAGH,aAAa,CAACI,KAA3B;EACA,MAAIqM,SAAS,GAAGtM,IAAI,CAACF,OAAD,CAApB,CAhBA;;EAkBAyO,EAAAA,cAAc,CAACnP,IAAf,GAAsBkN,SAAtB;EACA,MAAMm4B,WAAW,GAAIl2B,cAAc,CAACjP,GAAf,GAAqBolC,uBAAuB,CAACp4B,SAAD,CAAjE;EACA,MAAMq4B,aAAa,GAAGnjB,mBAAmB,CAAClV,SAAD,EAAYvH,KAAZ,CAAzC;EACA,MAAIzB,KAAJ;;EACA,UAAQmhC,WAAR;EACE,SAAKxpC,iBAAL;EAAwB;EACtB,QAAa;EACXmnC,UAAAA,8BAA8B,CAAC7zB,cAAD,EAAiBjC,SAAjB,CAA9B;EACAiC,UAAAA,cAAc,CAACnP,IAAf,GAAsBkN,SAAS,GAAG61B,8BAA8B,CAC9D71B,SAD8D,CAAhE;EAGD;;EACDhJ,QAAAA,KAAK,GAAGo/B,uBAAuB,CAC7B,IAD6B,EAE7Bn0B,cAF6B,EAG7BjC,SAH6B,EAI7Bq4B,aAJ6B,EAK7BxhB,WAL6B,CAA/B;EAOA,eAAO7f,KAAP;EACD;;EACD,SAAKpI,cAAL;EAAqB;EACnB,QAAa;EACXqT,UAAAA,cAAc,CAACnP,IAAf,GAAsBkN,SAAS,GAAGs4B,2BAA2B,CAC3Dt4B,SAD2D,CAA7D;EAGD;;EACDhJ,QAAAA,KAAK,GAAGkgC,oBAAoB,CAC1B,IAD0B,EAE1Bj1B,cAF0B,EAG1BjC,SAH0B,EAI1Bq4B,aAJ0B,EAK1BxhB,WAL0B,CAA5B;EAOA,eAAO7f,KAAP;EACD;;EACD,SAAK1H,UAAL;EAAiB;EACf,QAAa;EACX2S,UAAAA,cAAc,CAACnP,IAAf,GAAsBkN,SAAS,GAAGu4B,gCAAgC,CAChEv4B,SADgE,CAAlE;EAGD;;EACDhJ,QAAAA,KAAK,GAAGq+B,gBAAgB,CACtB,IADsB,EAEtBpzB,cAFsB,EAGtBjC,SAHsB,EAItBq4B,aAJsB,EAKtBxhB,WALsB,CAAxB;EAOA,eAAO7f,KAAP;EACD;;EACD,SAAKvH,aAAL;EAAoB;EAClB,QAAa;EACX,cAAIwS,cAAc,CAACnP,IAAf,KAAwBmP,cAAc,CAACsd,WAA3C,EAAwD;EACtD,gBAAM4W,cAAc,GAAGn2B,SAAS,CAACqd,SAAjC;;EACA,gBAAI8Y,cAAJ,EAAoB;EAClB11B,cAAAA,cAAc,CACZ01B,cADY,EAEZkC,aAFY;EAGZ,oBAHY,EAIZtlC,gBAAgB,CAACiN,SAAD,CAJJ,CAAd;EAMD;EACF;EACF;;EACDhJ,QAAAA,KAAK,GAAGw+B,mBAAmB,CACzB,IADyB,EAEzBvzB,cAFyB,EAGzBjC,SAHyB,EAIzBkV,mBAAmB,CAAClV,SAAS,CAAClN,IAAX,EAAiBulC,aAAjB,CAJM;EAKzB5C,QAAAA,WALyB,EAMzB5e,WANyB,CAA3B;EAQA,eAAO7f,KAAP;EACD;EAtEH;;EAsFA,MAAIwhC,IAAI,GAAG,EAAX;;EACA,EAAa;EACX,QACEx4B,SAAS,KAAK,IAAd,IACA,OAAOA,SAAP,KAAqB,QADrB,IAEAA,SAAS,CAAC/M,QAAV,KAAuB7B,eAHzB,EAIE;EACAonC,MAAAA,IAAI,GAAG,2DAAP;EACD;EACF,GArHD;EAuHA;EACA;;;EAxHA;EAAA;EAAA,sFA6HEx4B,SA7HF,gEA8HEw4B,IA9HF;EAAA;EAAA;EAgID;;EAED,SAASC,6BAAT,CACEP,QADF,EAEEj2B,cAFF,EAGEjC,SAHF,EAIE2Z,SAJF,EAKE9C,WALF,EAME;EACA,MAAIqhB,QAAQ,KAAK,IAAjB,EAAuB;EACrB;EACA;EACA;EACA;EACAA,IAAAA,QAAQ,CAACviC,SAAT,GAAqB,IAArB;EACAsM,IAAAA,cAAc,CAACtM,SAAf,GAA2B,IAA3B,CANqB;;EAQrBsM,IAAAA,cAAc,CAACpM,KAAf,IAAwB9B,SAAxB;EACD,GAVD;;;EAaAkO,EAAAA,cAAc,CAACjP,GAAf,GAAqBpE,cAArB,CAbA;EAiBA;EACA;EACA;;EACA,MAAIuoC,UAAJ;;EACA,MAAIC,iBAAuB,CAACp3B,SAAD,CAA3B,EAAwC;EACtCm3B,IAAAA,UAAU,GAAG,IAAb;EACAE,IAAAA,mBAAyB,CAACp1B,cAAD,CAAzB;EACD,GAHD,MAGO;EACLk1B,IAAAA,UAAU,GAAG,KAAb;EACD;;EACDxf,EAAAA,oBAAoB,CAAC1V,cAAD,EAAiB4U,WAAjB,CAApB;EAEAuH,EAAAA,sBAAsB,CAACnc,cAAD,EAAiBjC,SAAjB,EAA4B2Z,SAA5B,CAAtB;EACAmF,EAAAA,kBAAkB,CAAC7c,cAAD,EAAiBjC,SAAjB,EAA4B2Z,SAA5B,EAAuC9C,WAAvC,CAAlB;EAEA,SAAO0gB,oBAAoB,CACzB,IADyB,EAEzBt1B,cAFyB,EAGzBjC,SAHyB,EAIzB,IAJyB,EAKzBm3B,UALyB,EAMzBtgB,WANyB,CAA3B;EAQD;;EAED,SAAS6hB,2BAAT,CACER,QADF,EAEEj2B,cAFF,EAGEjC,SAHF,EAIE6W,WAJF,EAKE;EACA,MAAIqhB,QAAQ,KAAK,IAAjB,EAAuB;EACrB;EACA;EACA;EACA;EACAA,IAAAA,QAAQ,CAACviC,SAAT,GAAqB,IAArB;EACAsM,IAAAA,cAAc,CAACtM,SAAf,GAA2B,IAA3B,CANqB;;EAQrBsM,IAAAA,cAAc,CAACpM,KAAf,IAAwB9B,SAAxB;EACD;;EAED,MAAM0E,KAAK,GAAGwJ,cAAc,CAACwd,YAA7B;EACA,MAAIvsB,OAAJ;;EACA,EAA2B;EACzB,QAAMmP,eAAe,GAAGL,kBAAkB,CACxCC,cADwC,EAExCjC,SAFwC,EAGxC,KAHwC,CAA1C;EAKA9M,IAAAA,OAAO,GAAGuP,gBAAgB,CAACR,cAAD,EAAiBI,eAAjB,CAA1B;EACD;;EAEDsV,EAAAA,oBAAoB,CAAC1V,cAAD,EAAiB4U,WAAjB,CAApB;EACA,MAAIrmB,KAAJ;;EAEA,EAAa;EACX,QACEwP,SAAS,CAAC3R,SAAV,IACA,OAAO2R,SAAS,CAAC3R,SAAV,CAAoBgF,MAA3B,KAAsC,UAFxC,EAGE;EACA,UAAMwN,aAAa,GAAG9N,gBAAgB,CAACiN,SAAD,CAAhB,IAA+B,SAArD;;EAEA,UAAI,CAACy0B,oBAAoB,CAAC5zB,aAAD,CAAzB,EAA0C;EACxC,cACE,+FACE,8EAFJ,EAGEA,aAHF,EAIEA,aAJF;;EAMA4zB,QAAAA,oBAAoB,CAAC5zB,aAAD,CAApB,GAAsC,IAAtC;EACD;EACF;;EAED,QAAIoB,cAAc,CAAC0Q,IAAf,GAAsBvC,UAA1B,EAAsC;EACpC+B,MAAAA,uBAAuB,CAACG,0BAAxB,CAAmDrQ,cAAnD,EAAmE,IAAnE;EACD;;EAED+P,IAAAA,cAAc,CAAC,IAAD,CAAd;EACA1c,IAAAA,mBAAiB,CAACa,OAAlB,GAA4B8L,cAA5B;EACAzR,IAAAA,KAAK,GAAG05B,eAAe,CACrB,IADqB,EAErBjoB,cAFqB,EAGrBjC,SAHqB,EAIrBvH,KAJqB,EAKrBvF,OALqB,EAMrB2jB,WANqB,CAAvB;EAQA7E,IAAAA,cAAc,CAAC,KAAD,CAAd;EACD,GAjCD,AA1BA;;;EAsEA/P,EAAAA,cAAc,CAACpM,KAAf,IAAwB/B,aAAxB;;EAEA,EAAa;EACX;EACA;EACA,QACE,OAAOtD,KAAP,KAAiB,QAAjB,IACAA,KAAK,KAAK,IADV,IAEA,OAAOA,KAAK,CAAC6C,MAAb,KAAwB,UAFxB,IAGA7C,KAAK,CAACyC,QAAN,KAAmB+K,SAJrB,EAKE;EACA,UAAM6C,cAAa,GAAG9N,gBAAgB,CAACiN,SAAD,CAAhB,IAA+B,SAArD;;EACA,UAAI,CAAC00B,kCAAkC,CAAC7zB,cAAD,CAAvC,EAAwD;EACtD,cACE,4FACE,6DADF,GAEE,wFAFF,GAGE,mFAHF,GAIE,uCALJ,EAMEA,cANF,EAOEA,cAPF,EAQEA,cARF;;EAUA6zB,QAAAA,kCAAkC,CAAC7zB,cAAD,CAAlC,GAAoD,IAApD;EACD;EACF;EACF;;EAED;EAEE;EACA,GACA,OAAOrQ,KAAP,KAAiB,QADjB,IAEAA,KAAK,KAAK,IAFV,IAGA,OAAOA,KAAK,CAAC6C,MAAb,KAAwB,UAHxB,IAIA7C,KAAK,CAACyC,QAAN,KAAmB+K,SAPrB,EAQE;EACA,IAAa;EACX,UAAM6C,eAAa,GAAG9N,gBAAgB,CAACiN,SAAD,CAAhB,IAA+B,SAArD;;EACA,UAAI,CAAC00B,kCAAkC,CAAC7zB,eAAD,CAAvC,EAAwD;EACtD,cACE,4FACE,6DADF,GAEE,wFAFF,GAGE,mFAHF,GAIE,uCALJ,EAMEA,eANF,EAOEA,eAPF,EAQEA,eARF;;EAUA6zB,QAAAA,kCAAkC,CAAC7zB,eAAD,CAAlC,GAAoD,IAApD;EACD;EACF,KAhBD;;;EAmBAoB,IAAAA,cAAc,CAACjP,GAAf,GAAqBpE,cAArB,CAnBA;;EAsBAqT,IAAAA,cAAc,CAACyW,aAAf,GAA+B,IAA/B;EACAzW,IAAAA,cAAc,CAAC+W,WAAf,GAA6B,IAA7B,CAvBA;EA0BA;EACA;;EACA,QAAIme,UAAU,GAAG,KAAjB;;EACA,QAAIC,iBAAuB,CAACp3B,SAAD,CAA3B,EAAwC;EACtCm3B,MAAAA,UAAU,GAAG,IAAb;EACAE,MAAAA,mBAAyB,CAACp1B,cAAD,CAAzB;EACD,KAHD,MAGO;EACLk1B,MAAAA,UAAU,GAAG,KAAb;EACD;;EAEDl1B,IAAAA,cAAc,CAACyW,aAAf,GACEloB,KAAK,CAAC2sB,KAAN,KAAgB,IAAhB,IAAwB3sB,KAAK,CAAC2sB,KAAN,KAAgBnf,SAAxC,GAAoDxN,KAAK,CAAC2sB,KAA1D,GAAkE,IADpE;EAGA3E,IAAAA,qBAAqB,CAACvW,cAAD,CAArB;EAEA,QAAMga,wBAAwB,GAAGjc,SAAS,CAACic,wBAA3C;;EACA,QAAI,OAAOA,wBAAP,KAAoC,UAAxC,EAAoD;EAClDD,MAAAA,0BAA0B,CACxB/Z,cADwB,EAExBjC,SAFwB,EAGxBic,wBAHwB,EAIxBxjB,KAJwB,CAA1B;EAMD;;EAEDulB,IAAAA,kBAAkB,CAAC/b,cAAD,EAAiBzR,KAAjB,CAAlB;EACAsuB,IAAAA,kBAAkB,CAAC7c,cAAD,EAAiBjC,SAAjB,EAA4BvH,KAA5B,EAAmCoe,WAAnC,CAAlB;EACA,WAAO0gB,oBAAoB,CACzB,IADyB,EAEzBt1B,cAFyB,EAGzBjC,SAHyB,EAIzB,IAJyB,EAKzBm3B,UALyB,EAMzBtgB,WANyB,CAA3B;EAQD,GArED,MAqEO;EACL;EACA5U,IAAAA,cAAc,CAACjP,GAAf,GAAqBrE,iBAArB;;EA6BAumC,IAAAA,iBAAiB,CAAC,IAAD,EAAOjzB,cAAP,EAAuBzR,KAAvB,EAA8BqmB,WAA9B,CAAjB;;EACA,IAAa;EACXif,MAAAA,8BAA8B,CAAC7zB,cAAD,EAAiBjC,SAAjB,CAA9B;EACD;;EACD,WAAOiC,cAAc,CAACjL,KAAtB;EACD;EACF;;EAED,SAAS8+B,8BAAT,CAAwC7zB,cAAxC,EAA+DjC,SAA/D,EAA+E;EAC7E,EAAa;EACX,QAAIA,SAAJ,EAAe;EACb,UAAIA,SAAS,CAAC4C,iBAAd,EAAiC;EAC/B,cACE,uEADF,EAEE5C,SAAS,CAACrN,WAAV,IAAyBqN,SAAS,CAACpN,IAAnC,IAA2C,WAF7C;EAID;EACF;;EACD,QAAIqP,cAAc,CAACqe,GAAf,KAAuB,IAA3B,EAAiC;EAC/B,UAAIpjB,IAAI,GAAG,EAAX;EACA,UAAMy7B,SAAS,GAAGhnB,mCAAmC,EAArD;;EACA,UAAIgnB,SAAJ,EAAe;EACbz7B,QAAAA,IAAI,IAAI,qCAAqCy7B,SAArC,GAAiD,IAAzD;EACD;;EAED,UAAIC,UAAU,GAAGD,SAAS,IAAI12B,cAAc,CAAC42B,QAA5B,IAAwC,EAAzD;EACA,UAAMC,WAAW,GAAG72B,cAAc,CAACuP,YAAnC;;EACA,UAAIsnB,WAAJ,EAAiB;EACfF,QAAAA,UAAU,GAAGE,WAAW,CAACC,QAAZ,GAAuB,GAAvB,GAA6BD,WAAW,CAACE,UAAtD;EACD;;EACD,UAAI,CAACnE,wBAAwB,CAAC+D,UAAD,CAA7B,EAA2C;EACzC/D,QAAAA,wBAAwB,CAAC+D,UAAD,CAAxB,GAAuC,IAAvC;;EACA,cACE,+CACE,yCADF,GAEE,2CAHJ,EAIE17B,IAJF;EAMD;EACF;;EAkBD,QAAI,OAAO8C,SAAS,CAACic,wBAAjB,KAA8C,UAAlD,EAA8D;EAC5D,UAAMpb,eAAa,GAAG9N,gBAAgB,CAACiN,SAAD,CAAhB,IAA+B,SAArD;;EAEA,UAAI,CAAC40B,8CAA8C,CAAC/zB,eAAD,CAAnD,EAAoE;EAClE,cACE,kEADF,EAEEA,eAFF;;EAIA+zB,QAAAA,8CAA8C,CAAC/zB,eAAD,CAA9C,GAAgE,IAAhE;EACD;EACF;;EAED,QACE,OAAOb,SAAS,CAACsd,WAAjB,KAAiC,QAAjC,IACAtd,SAAS,CAACsd,WAAV,KAA0B,IAF5B,EAGE;EACA,UAAMzc,eAAa,GAAG9N,gBAAgB,CAACiN,SAAD,CAAhB,IAA+B,SAArD;;EAEA,UAAI,CAAC20B,0CAA0C,CAAC9zB,eAAD,CAA/C,EAAgE;EAC9D,cACE,qDADF,EAEEA,eAFF;;EAIA8zB,QAAAA,0CAA0C,CAAC9zB,eAAD,CAA1C,GAA4D,IAA5D;EACD;EACF;EACF;EACF;;EAED,IAAMo4B,gBAA+B,GAAG;EACtClS,EAAAA,UAAU,EAAE,IAD0B;EAEtCmS,EAAAA,SAAS,EAAEzxB;EAF2B,CAAxC;;EAKA,SAAS0xB,2BAAT,CAAqCtiB,WAArC,EAAyE;EACvE,SAAO;EACLyf,IAAAA,SAAS,EAAEzf;EADN,GAAP;EAGD;;EAED,SAASuiB,4BAAT,CACEC,kBADF,EAEExiB,WAFF,EAGkB;EAChB,SAAO;EACLyf,IAAAA,SAAS,EAAE1pB,UAAU,CAACysB,kBAAkB,CAAC/C,SAApB,EAA+Bzf,WAA/B;EADhB,GAAP;EAGD;;;EAGD,SAASyiB,sBAAT,CACEC,eADF,EAEEpjC,OAFF,EAGE8L,cAHF,EAIE4U,WAJF,EAKE;EACA;EACA;EACA;EACA,MAAI1gB,OAAO,KAAK,IAAhB,EAAsB;EACpB,QAAMqjC,aAA4B,GAAGrjC,OAAO,CAACuiB,aAA7C;;EACA,QAAI8gB,aAAa,KAAK,IAAtB,EAA4B;EAC1B;EACA;EACA;EACA;EACA,aAAO,KAAP;EACD;EACF,GAbD;;;EAgBA,SAAOrT,kBAAkB,CACvBoT,eADuB,EAEtBtT,qBAFsB,CAAzB;EAID;;EAED,SAASwT,6BAAT,CAAuCtjC,OAAvC,EAAuD0gB,WAAvD,EAAoE;EAClE;EACA,SAAOhK,WAAW,CAAC1W,OAAO,CAAC2gB,UAAT,EAAqBD,WAArB,CAAlB;EACD;;EAED,SAAS6iB,uBAAT,CAAiCvjC,OAAjC,EAA0C8L,cAA1C,EAA0D4U,WAA1D,EAAuE;EACrE,MAAM8C,SAAS,GAAG1X,cAAc,CAACwd,YAAjC,CADqE;;EAIrE,EAAa;EACX,QAAIka,aAAa,CAAC13B,cAAD,CAAjB,EAAmC;EACjCA,MAAAA,cAAc,CAACpM,KAAf,IAAwBxB,UAAxB;EACD;EACF;;EAED,MAAIklC,eAAgC,GAAGrT,mBAAmB,CAAC/vB,OAA3D;EAEA,MAAIyjC,YAAY,GAAG,KAAnB;EACA,MAAMvS,UAAU,GAAG,CAACplB,cAAc,CAACpM,KAAf,GAAuBxB,UAAxB,MAAwCR,OAA3D;;EAEA,MACEwzB,UAAU,IACViS,sBAAsB,CACpBC,eADoB,EAEpBpjC,OAFoB,AAAA,CAFxB,EAQE;EACA;EACA;EACAyjC,IAAAA,YAAY,GAAG,IAAf;EACA33B,IAAAA,cAAc,CAACpM,KAAf,IAAwB,CAACxB,UAAzB;EACD,GAbD,MAaO;EACL;EACA,QACE8B,OAAO,KAAK,IAAZ,IACCA,OAAO,CAACuiB,aAAT,KAAkD,IAFpD,EAGE;EACA;EACA;EACA;EACA;EACA;EACA,UACEiB,SAAS,CAACqN,QAAV,KAAuBhpB,SAAvB,IACA2b,SAAS,CAACsN,0BAAV,KAAyC,IAF3C,EAGE;EACAsS,QAAAA,eAAe,GAAG/S,yBAAyB,CACzC+S,eADyC,EAEzCvT,8BAFyC,CAA3C;EAID;EACF;EACF;;EAEDuT,EAAAA,eAAe,GAAGlT,gCAAgC,CAACkT,eAAD,CAAlD;EAEA7S,EAAAA,mBAAmB,CAACzkB,cAAD,EAAiBs3B,eAAjB,CAAnB,CArDqE;EAwDrE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,MAAIpjC,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACA;EACA;EACA,QAAIwjB,SAAS,CAACqN,QAAV,KAAuBhpB,SAA3B,EAAsC;;EAmBtC,QAAM67B,mBAAmB,GAAGlgB,SAAS,CAAC7gB,QAAtC;EACA,QAAMghC,oBAAoB,GAAGngB,SAAS,CAACqN,QAAvC;;EACA,QAAI4S,YAAJ,EAAkB;EAChB,UAAMG,gBAAgB,GAAGC,6BAA6B,CACpD/3B,cADoD,EAEpD43B,mBAFoD,EAGpDC,oBAHoD,EAIpDjjB,WAJoD,CAAtD;EAMA,UAAMojB,oBAA2B,GAAIh4B,cAAc,CAACjL,KAApD;EACAijC,MAAAA,oBAAoB,CAACvhB,aAArB,GAAqCygB,2BAA2B,CAC9DtiB,WAD8D,CAAhE;EAGA5U,MAAAA,cAAc,CAACyW,aAAf,GAA+BugB,gBAA/B;EACA,aAAOc,gBAAP;EACD,KAbD,MAaO,IAAI,OAAOpgB,SAAS,CAACugB,yBAAjB,KAA+C,QAAnD,EAA6D;EAClE;EACA;EACA;EACA,UAAMH,iBAAgB,GAAGC,6BAA6B,CACpD/3B,cADoD,EAEpD43B,mBAFoD,EAGpDC,oBAHoD,EAIpDjjB,WAJoD,CAAtD;;EAMA,UAAMojB,qBAA2B,GAAIh4B,cAAc,CAACjL,KAApD;EACAijC,MAAAA,qBAAoB,CAACvhB,aAArB,GAAqCygB,2BAA2B,CAC9DtiB,WAD8D,CAAhE;EAGA5U,MAAAA,cAAc,CAACyW,aAAf,GAA+BugB,gBAA/B,CAdkE;EAiBlE;EACA;EACA;EACA;EACA;EACA;EACA;;EACAh3B,MAAAA,cAAc,CAAC6G,KAAf,GAAuBT,aAAvB;;EACA,MAA4B;EAC1BquB,QAAAA,eAAe,CAACruB,aAAD,CAAf;EACD;;EACD,aAAO0xB,iBAAP;EACD,KA7BM,MA6BA;EACL,aAAOI,4BAA4B,CACjCl4B,cADiC,EAEjC43B,mBAFiC,EAGjChjB,WAHiC,CAAnC;EAKD;EACF,GA1ED,MA0EO;EACL;EAEA;EACA;EACA,QAAM6C,SAA+B,GAAGvjB,OAAO,CAACuiB,aAAhD;;EACA,QAAIgB,SAAS,KAAK,IAAlB,EAAwB;AACtB;EA8CA,UAAIkgB,YAAJ,EAAkB;EAChB,YAAME,sBAAoB,GAAGngB,SAAS,CAACqN,QAAvC;EACA,YAAM6S,qBAAmB,GAAGlgB,SAAS,CAAC7gB,QAAtC;;EACA,YAAMshC,sBAAqB,GAAGC,8BAA8B,CAC1DlkC,OAD0D,EAE1D8L,cAF0D,EAG1D43B,qBAH0D,EAI1DC,sBAJ0D,EAK1DjjB,WAL0D,CAA5D;;EAOA,YAAMojB,sBAA2B,GAAIh4B,cAAc,CAACjL,KAApD;EACA,YAAMqiC,kBAAyC,GAAIljC,OAAO,CAACa,KAAT,CAC/C0hB,aADH;EAEAuhB,QAAAA,sBAAoB,CAACvhB,aAArB,GACE2gB,kBAAkB,KAAK,IAAvB,GACIF,2BAA2B,CAACtiB,WAAD,CAD/B,GAEIuiB,4BAA4B,CAACC,kBAAD,EAAqBxiB,WAArB,CAHlC;EAIAojB,QAAAA,sBAAoB,CAACnjB,UAArB,GAAkC2iB,6BAA6B,CAC7DtjC,OAD6D,EAE7D0gB,WAF6D,CAA/D;EAIA5U,QAAAA,cAAc,CAACyW,aAAf,GAA+BugB,gBAA/B;EACA,eAAOmB,sBAAP;EACD,OAvBD,MAuBO;EACL,YAAMP,qBAAmB,GAAGlgB,SAAS,CAAC7gB,QAAtC;;EACA,YAAMmhC,sBAAoB,GAAGK,6BAA6B,CACxDnkC,OADwD,EAExD8L,cAFwD,EAGxD43B,qBAHwD,EAIxDhjB,WAJwD,CAA1D;;EAMA5U,QAAAA,cAAc,CAACyW,aAAf,GAA+B,IAA/B;EACA,eAAOuhB,sBAAP;EACD;EACF,KAjFD,MAiFO;EACL;EACA,UAAIL,YAAJ,EAAkB;EAChB;EACA,YAAME,sBAAoB,GAAGngB,SAAS,CAACqN,QAAvC;EACA,YAAM6S,qBAAmB,GAAGlgB,SAAS,CAAC7gB,QAAtC;;EACA,YAAMshC,uBAAqB,GAAGC,8BAA8B,CAC1DlkC,OAD0D,EAE1D8L,cAF0D,EAG1D43B,qBAH0D,EAI1DC,sBAJ0D,EAK1DjjB,WAL0D,CAA5D;;EAOA,YAAMojB,sBAA2B,GAAIh4B,cAAc,CAACjL,KAApD;EACA,YAAMqiC,mBAAyC,GAAIljC,OAAO,CAACa,KAAT,CAC/C0hB,aADH;EAEAuhB,QAAAA,sBAAoB,CAACvhB,aAArB,GACE2gB,mBAAkB,KAAK,IAAvB,GACIF,2BAA2B,CAACtiB,WAAD,CAD/B,GAEIuiB,4BAA4B,CAACC,mBAAD,EAAqBxiB,WAArB,CAHlC;EAIAojB,QAAAA,sBAAoB,CAACnjB,UAArB,GAAkC2iB,6BAA6B,CAC7DtjC,OAD6D,EAE7D0gB,WAF6D,CAA/D,CAlBgB;EAuBhB;;EACA5U,QAAAA,cAAc,CAACyW,aAAf,GAA+BugB,gBAA/B;EACA,eAAOmB,uBAAP;EACD,OA1BD,MA0BO;EACL;EACA;EACA,YAAMP,qBAAmB,GAAGlgB,SAAS,CAAC7gB,QAAtC;;EACA,YAAMmhC,sBAAoB,GAAGK,6BAA6B,CACxDnkC,OADwD,EAExD8L,cAFwD,EAGxD43B,qBAHwD,EAIxDhjB,WAJwD,CAA1D;;EAMA5U,QAAAA,cAAc,CAACyW,aAAf,GAA+B,IAA/B;EACA,eAAOuhB,sBAAP;EACD;EACF;EACF;EACF;;EAED,SAASE,4BAAT,CACEl4B,cADF,EAEEs4B,eAFF,EAGE1jB,WAHF,EAIE;EACA,MAAMlE,IAAI,GAAG1Q,cAAc,CAAC0Q,IAA5B;EACA,MAAM6nB,iBAAiC,GAAG;EACxC7nB,IAAAA,IAAI,EAAE,SADkC;EAExC7Z,IAAAA,QAAQ,EAAEyhC;EAF8B,GAA1C;EAIA,MAAMN,oBAAoB,GAAGQ,wBAAwB,CACnDD,iBADmD,EAEnD7nB,IAFmD,EAGnDkE,WAHmD,EAInD,IAJmD,CAArD;EAMAojB,EAAAA,oBAAoB,CAACnkC,MAArB,GAA8BmM,cAA9B;EACAA,EAAAA,cAAc,CAACjL,KAAf,GAAuBijC,oBAAvB;EACA,SAAOA,oBAAP;EACD;;EAED,SAASD,6BAAT,CACE/3B,cADF,EAEEs4B,eAFF,EAGEG,gBAHF,EAIE7jB,WAJF,EAKE;EACA,MAAMlE,IAAI,GAAG1Q,cAAc,CAAC0Q,IAA5B;EACA,MAAMgoB,yBAAuC,GAAG14B,cAAc,CAACjL,KAA/D;EAEA,MAAMwjC,iBAAiC,GAAG;EACxC7nB,IAAAA,IAAI,EAAE,QADkC;EAExC7Z,IAAAA,QAAQ,EAAEyhC;EAF8B,GAA1C;EAKA,MAAIN,oBAAJ;EACA,MAAIG,qBAAJ;;EACA,MAAI,CAACznB,IAAI,GAAGtC,YAAR,MAA0BF,MAA1B,IAAoCwqB,yBAAyB,KAAK,IAAtE,EAA4E;EAC1E;EACA;EACAV,IAAAA,oBAAoB,GAAGU,yBAAvB;EACAV,IAAAA,oBAAoB,CAACnjB,UAArB,GAAkCtP,OAAlC;EACAyyB,IAAAA,oBAAoB,CAACxa,YAArB,GAAoC+a,iBAApC;;EAEA,QAAIvlC,CAAuBgN,cAAc,CAAC0Q,IAAf,GAAsBpC,WAAjD,EAA8D;EAC5D;EACA;EACA;EACA;EACA0pB,MAAAA,oBAAoB,CAAC5F,cAArB,GAAsC,CAAtC;EACA4F,MAAAA,oBAAoB,CAACjG,eAArB,GAAuC,CAAC,CAAxC;EACAiG,MAAAA,oBAAoB,CAAC3F,gBAArB,GAAwC,CAAxC;EACA2F,MAAAA,oBAAoB,CAACW,gBAArB,GAAwC,CAAxC;EACD;;EAEDR,IAAAA,qBAAqB,GAAGpX,uBAAuB,CAC7C0X,gBAD6C,EAE7C/nB,IAF6C,EAG7CkE,WAH6C,EAI7C,IAJ6C,CAA/C;EAMD,GAxBD,MAwBO;EACLojB,IAAAA,oBAAoB,GAAGQ,wBAAwB,CAC7CD,iBAD6C,EAE7C7nB,IAF6C,EAG7CnL,OAH6C,EAI7C,IAJ6C,CAA/C;EAMA4yB,IAAAA,qBAAqB,GAAGpX,uBAAuB,CAC7C0X,gBAD6C,EAE7C/nB,IAF6C,EAG7CkE,WAH6C,EAI7C,IAJ6C,CAA/C;EAMD;;EAEDojB,EAAAA,oBAAoB,CAACnkC,MAArB,GAA8BmM,cAA9B;EACAm4B,EAAAA,qBAAqB,CAACtkC,MAAtB,GAA+BmM,cAA/B;EACAg4B,EAAAA,oBAAoB,CAAChjC,OAArB,GAA+BmjC,qBAA/B;EACAn4B,EAAAA,cAAc,CAACjL,KAAf,GAAuBijC,oBAAvB;EACA,SAAOG,qBAAP;EACD;;EAED,SAASS,kCAAT,CACE1kC,OADF,EAEE2kC,cAFF,EAGE;EACA;EACA;EACA,SAAOnZ,oBAAoB,CAACxrB,OAAD,EAAU2kC,cAAV,CAA3B;EACD;;EAED,SAASR,6BAAT,CACEnkC,OADF,EAEE8L,cAFF,EAGEs4B,eAHF,EAIE1jB,WAJF,EAKE;EACA,MAAMkkB,2BAAkC,GAAI5kC,OAAO,CAACa,KAApD;EACA,MAAMgkC,4BAA0C,GAC9CD,2BAA2B,CAAC9jC,OAD9B;EAGA,MAAMgjC,oBAAoB,GAAGY,kCAAkC,CAC7DE,2BAD6D,EAE7D;EACEpoB,IAAAA,IAAI,EAAE,SADR;EAEE7Z,IAAAA,QAAQ,EAAEyhC;EAFZ,GAF6D,CAA/D;;EAOA,MAAI,CAACt4B,cAAc,CAAC0Q,IAAf,GAAsBtC,YAAvB,MAAyCF,MAA7C,EAAqD;EACnD8pB,IAAAA,oBAAoB,CAACnxB,KAArB,GAA6B+N,WAA7B;EACD;;EACDojB,EAAAA,oBAAoB,CAACnkC,MAArB,GAA8BmM,cAA9B;EACAg4B,EAAAA,oBAAoB,CAAChjC,OAArB,GAA+B,IAA/B;;EACA,MAAI+jC,4BAA4B,KAAK,IAArC,EAA2C;EACzC;EACAA,IAAAA,4BAA4B,CAAC7Z,UAA7B,GAA0C,IAA1C;EACA6Z,IAAAA,4BAA4B,CAACnlC,KAA7B,GAAqC3B,QAArC;EACA+N,IAAAA,cAAc,CAACmf,WAAf,GAA6Bnf,cAAc,CAACif,UAAf,GAA4B8Z,4BAAzD;EACD;;EAED/4B,EAAAA,cAAc,CAACjL,KAAf,GAAuBijC,oBAAvB;EACA,SAAOA,oBAAP;EACD;;EAED,SAASI,8BAAT,CACElkC,OADF,EAEE8L,cAFF,EAGEs4B,eAHF,EAIEG,gBAJF,EAKE7jB,WALF,EAME;EACA,MAAMlE,IAAI,GAAG1Q,cAAc,CAAC0Q,IAA5B;EACA,MAAMooB,2BAAkC,GAAI5kC,OAAO,CAACa,KAApD;EACA,MAAMgkC,4BAA0C,GAC9CD,2BAA2B,CAAC9jC,OAD9B;EAGA,MAAMujC,iBAAiC,GAAG;EACxC7nB,IAAAA,IAAI,EAAE,QADkC;EAExC7Z,IAAAA,QAAQ,EAAEyhC;EAF8B,GAA1C;EAKA,MAAIN,oBAAJ;;EACA;EAEE;EACA,GAACtnB,IAAI,GAAGtC,YAAR,MAA0BF,MAA1B;EAEA;EACA;EACA;EACA;EACA;EACAlO,EAAAA,cAAc,CAACjL,KAAf,KAAyB+jC,2BAV3B,EAWE;EACA,QAAMJ,yBAAgC,GAAI14B,cAAc,CAACjL,KAAzD;EACAijC,IAAAA,oBAAoB,GAAGU,yBAAvB;EACAV,IAAAA,oBAAoB,CAACnjB,UAArB,GAAkCtP,OAAlC;EACAyyB,IAAAA,oBAAoB,CAACxa,YAArB,GAAoC+a,iBAApC;;EAEA,QAAIvlC,CAAuBgN,cAAc,CAAC0Q,IAAf,GAAsBpC,WAAjD,EAA8D;EAC5D;EACA;EACA;EACA;EACA0pB,MAAAA,oBAAoB,CAAC5F,cAArB,GAAsC,CAAtC;EACA4F,MAAAA,oBAAoB,CAACjG,eAArB,GAAuC,CAAC,CAAxC;EACAiG,MAAAA,oBAAoB,CAAC3F,gBAArB,GACEyG,2BAA2B,CAACzG,gBAD9B;EAEA2F,MAAAA,oBAAoB,CAACW,gBAArB,GACEG,2BAA2B,CAACH,gBAD9B;EAED,KAjBD;EAoBA;EACA;EACA;EACA;EACA;;;EACA,QAAMK,oBAAoB,GAAGhB,oBAAoB,CAAC/Y,UAAlD;;EACA,QAAI+Z,oBAAoB,KAAK,IAA7B,EAAmC;EACjCh5B,MAAAA,cAAc,CAACmf,WAAf,GAA6B6Y,oBAAoB,CAAC7Y,WAAlD;EACAnf,MAAAA,cAAc,CAACif,UAAf,GAA4B+Z,oBAA5B;EACAA,MAAAA,oBAAoB,CAAC9Z,UAArB,GAAkC,IAAlC;EACD,KAJD,MAIO;EACL;EACAlf,MAAAA,cAAc,CAACmf,WAAf,GAA6Bnf,cAAc,CAACif,UAAf,GAA4B,IAAzD;EACD;EACF,GA7CD,MA6CO;EACL+Y,IAAAA,oBAAoB,GAAGY,kCAAkC,CACvDE,2BADuD,EAEvDP,iBAFuD,CAAzD;EAID;;EACD,MAAIJ,qBAAJ;;EACA,MAAIY,4BAA4B,KAAK,IAArC,EAA2C;EACzCZ,IAAAA,qBAAqB,GAAGzY,oBAAoB,CAC1CqZ,4BAD0C,EAE1CN,gBAF0C,CAA5C;EAID,GALD,MAKO;EACLN,IAAAA,qBAAqB,GAAGpX,uBAAuB,CAC7C0X,gBAD6C,EAE7C/nB,IAF6C,EAG7CkE,WAH6C,EAI7C,IAJ6C,CAA/C,CADK;EAQL;;EACAujB,IAAAA,qBAAqB,CAACvkC,KAAtB,IAA+B9B,SAA/B;EACD;;EAEDqmC,EAAAA,qBAAqB,CAACtkC,MAAtB,GAA+BmM,cAA/B;EACAg4B,EAAAA,oBAAoB,CAACnkC,MAArB,GAA8BmM,cAA9B;EACAg4B,EAAAA,oBAAoB,CAAChjC,OAArB,GAA+BmjC,qBAA/B;EACAn4B,EAAAA,cAAc,CAACjL,KAAf,GAAuBijC,oBAAvB;EAEA,SAAOG,qBAAP;EACD;;EA2OD,SAASc,mBAAT,CAA6B1lC,KAA7B,EAA2CqhB,WAA3C,EAA+D;EAC7DrhB,EAAAA,KAAK,CAACsT,KAAN,GAAc8D,UAAU,CAACpX,KAAK,CAACsT,KAAP,EAAc+N,WAAd,CAAxB;EACA,MAAMlhB,SAAS,GAAGH,KAAK,CAACG,SAAxB;;EACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;EACtBA,IAAAA,SAAS,CAACmT,KAAV,GAAkB8D,UAAU,CAACjX,SAAS,CAACmT,KAAX,EAAkB+N,WAAlB,CAA5B;EACD;;EACDD,EAAAA,wBAAwB,CAACphB,KAAK,CAACM,MAAP,EAAe+gB,WAAf,CAAxB;EACD;;EAED,SAASskB,8BAAT,CACEl5B,cADF,EAEEm5B,UAFF,EAGEvkB,WAHF,EAIQ;EACN;EACA;EACA;EACA,MAAIphB,IAAI,GAAG2lC,UAAX;;EACA,SAAO3lC,IAAI,KAAK,IAAhB,EAAsB;EACpB,QAAIA,IAAI,CAACzC,GAAL,KAAaxD,iBAAjB,EAAoC;EAClC,UAAM2tB,KAA2B,GAAG1nB,IAAI,CAACijB,aAAzC;;EACA,UAAIyE,KAAK,KAAK,IAAd,EAAoB;EAClB+d,QAAAA,mBAAmB,CAACzlC,IAAD,EAAOohB,WAAP,CAAnB;EACD;EACF,KALD,MAKO,IAAIphB,IAAI,CAACzC,GAAL,KAAalD,qBAAjB,EAAwC;EAC7C;EACA;EACA;EACA;EACA;EACAorC,MAAAA,mBAAmB,CAACzlC,IAAD,EAAOohB,WAAP,CAAnB;EACD,KAPM,MAOA,IAAIphB,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;EAC9BvB,MAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,MAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;EACA;EACD;;EACD,QAAIvB,IAAI,KAAKwM,cAAb,EAA6B;EAC3B;EACD;;EACD,WAAOxM,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;EAC5B,UAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBmM,cAA5C,EAA4D;EAC1D;EACD;;EACDxM,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;;EACDL,IAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;EACAL,IAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;EACD;EACF;;EAED,SAASokC,kBAAT,CAA4BD,UAA5B,EAAoE;EAClE;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAIjU,GAAG,GAAGiU,UAAV;EACA,MAAIE,cAA4B,GAAG,IAAnC;;EACA,SAAOnU,GAAG,KAAK,IAAf,EAAqB;EACnB,QAAMoU,UAAU,GAAGpU,GAAG,CAACxxB,SAAvB,CADmB;;EAGnB,QAAI4lC,UAAU,KAAK,IAAf,IAAuBrU,kBAAkB,CAACqU,UAAD,CAAlB,KAAmC,IAA9D,EAAoE;EAClED,MAAAA,cAAc,GAAGnU,GAAjB;EACD;;EACDA,IAAAA,GAAG,GAAGA,GAAG,CAAClwB,OAAV;EACD;;EACD,SAAOqkC,cAAP;EACD;;EAID,SAASE,mBAAT,CAA6BpU,WAA7B,EAAmE;EACjE,EAAa;EACX,QACEA,WAAW,KAAKppB,SAAhB,IACAopB,WAAW,KAAK,UADhB,IAEAA,WAAW,KAAK,WAFhB,IAGAA,WAAW,KAAK,UAHhB,IAIA,CAAC2N,uBAAuB,CAAC3N,WAAD,CAL1B,EAME;EACA2N,MAAAA,uBAAuB,CAAC3N,WAAD,CAAvB,GAAuC,IAAvC;;EACA,UAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;EACnC,gBAAQA,WAAW,CAACqU,WAAZ,EAAR;EACE,eAAK,UAAL;EACA,eAAK,UAAL;EACA,eAAK,WAAL;EAAkB;EAChB,oBACE,oEACE,6BAFJ,EAGErU,WAHF,EAIEA,WAAW,CAACqU,WAAZ,EAJF;;EAMA;EACD;;EACD,eAAK,SAAL;EACA,eAAK,UAAL;EAAiB;EACf,oBACE,oEACE,8DAFJ,EAGErU,WAHF,EAIEA,WAAW,CAACqU,WAAZ,EAJF;;EAMA;EACD;;EACD;EACE,kBACE,8DACE,qDAFJ,EAGErU,WAHF;;EAKA;EA5BJ;EA8BD,OA/BD,MA+BO;EACL,cACE,sEACE,qDAFJ,EAGEA,WAHF;EAKD;EACF;EACF;EACF;;EAED,SAASsU,mBAAT,CACEC,QADF,EAEEvU,WAFF,EAGE;EACA,EAAa;EACX,QAAIuU,QAAQ,KAAK39B,SAAb,IAA0B,CAACg3B,uBAAuB,CAAC2G,QAAD,CAAtD,EAAkE;EAChE,UAAIA,QAAQ,KAAK,WAAb,IAA4BA,QAAQ,KAAK,QAA7C,EAAuD;EACrD3G,QAAAA,uBAAuB,CAAC2G,QAAD,CAAvB,GAAoC,IAApC;;EACA,cACE,iEACE,uCAFJ,EAGEA,QAHF;EAKD,OAPD,MAOO,IAAIvU,WAAW,KAAK,UAAhB,IAA8BA,WAAW,KAAK,WAAlD,EAA+D;EACpE4N,QAAAA,uBAAuB,CAAC2G,QAAD,CAAvB,GAAoC,IAApC;;EACA,cACE,gEACE,6BADF,GAEE,iDAHJ,EAIEA,QAJF;EAMD;EACF;EACF;EACF;;EAED,SAASC,+BAAT,CAAyCC,SAAzC,EAA2D9iC,KAA3D,EAA0E;EACxE,EAAa;EACX,QAAMF,OAAO,GAAGD,KAAK,CAACC,OAAN,CAAcgjC,SAAd,CAAhB;EACA,QAAMC,UAAU,GACd,CAACjjC,OAAD,IAAY,OAAO1G,aAAa,CAAC0pC,SAAD,CAApB,KAAoC,UADlD;;EAEA,QAAIhjC,OAAO,IAAIijC,UAAf,EAA2B;EACzB,UAAMhpC,IAAI,GAAG+F,OAAO,GAAG,OAAH,GAAa,UAAjC;;EACA,YACE,uEACE,2DADF,GAEE,qCAFF,GAGE,wDAHF,GAIE,iBALJ,EAME/F,IANF,EAOEiG,KAPF,EAQEjG,IARF;;EAUA,aAAO,KAAP;EACD;EACF;;EACD,SAAO,IAAP;EACD;;EAED,SAASipC,4BAAT,CACEjjC,QADF,EAEEsuB,WAFF,EAGE;EACA,EAAa;EACX,QACE,CAACA,WAAW,KAAK,UAAhB,IAA8BA,WAAW,KAAK,WAA/C,KACAtuB,QAAQ,KAAKkF,SADb,IAEAlF,QAAQ,KAAK,IAFb,IAGAA,QAAQ,KAAK,KAJf,EAKE;EACA,UAAIF,KAAK,CAACC,OAAN,CAAcC,QAAd,CAAJ,EAA6B;EAC3B,aAAK,IAAIoU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpU,QAAQ,CAAC0G,MAA7B,EAAqC0N,CAAC,EAAtC,EAA0C;EACxC,cAAI,CAAC0uB,+BAA+B,CAAC9iC,QAAQ,CAACoU,CAAD,CAAT,EAAcA,CAAd,CAApC,EAAsD;EACpD;EACD;EACF;EACF,OAND,MAMO;EACL,YAAM+W,UAAU,GAAG9xB,aAAa,CAAC2G,QAAD,CAAhC;;EACA,YAAI,OAAOmrB,UAAP,KAAsB,UAA1B,EAAsC;EACpC,cAAM+X,gBAAgB,GAAG/X,UAAU,CAAC11B,IAAX,CAAgBuK,QAAhB,CAAzB;;EACA,cAAIkjC,gBAAJ,EAAsB;EACpB,gBAAI5X,IAAI,GAAG4X,gBAAgB,CAACtkB,IAAjB,EAAX;EACA,gBAAIxK,EAAC,GAAG,CAAR;;EACA,mBAAO,CAACkX,IAAI,CAACC,IAAb,EAAmBD,IAAI,GAAG4X,gBAAgB,CAACtkB,IAAjB,EAA1B,EAAmD;EACjD,kBAAI,CAACkkB,+BAA+B,CAACxX,IAAI,CAAC5zB,KAAN,EAAa0c,EAAb,CAApC,EAAqD;EACnD;EACD;;EACDA,cAAAA,EAAC;EACF;EACF;EACF,SAZD,MAYO;EACL,gBACE,qEACE,mDADF,GAEE,qDAHJ,EAIEka,WAJF;EAMD;EACF;EACF;EACF;EACF;;EAED,SAAS6U,2BAAT,CACEh6B,cADF,EAEEi6B,WAFF,EAGEC,IAHF,EAIEb,cAJF,EAKEK,QALF,EAMES,yBANF,EAOQ;EACN,MAAMC,WAA2C,GAC/Cp6B,cAAc,CAACyW,aADjB;;EAEA,MAAI2jB,WAAW,KAAK,IAApB,EAA0B;EACxBp6B,IAAAA,cAAc,CAACyW,aAAf,GAAgC;EAC9BwjB,MAAAA,WAAW,EAAEA,WADiB;EAE9BjqB,MAAAA,SAAS,EAAE,IAFmB;EAG9BqqB,MAAAA,kBAAkB,EAAE,CAHU;EAI9Brb,MAAAA,IAAI,EAAEqa,cAJwB;EAK9Ba,MAAAA,IAAI,EAAEA,IALwB;EAM9BR,MAAAA,QAAQ,EAAEA,QANoB;EAO9Bza,MAAAA,UAAU,EAAEkb;EAPkB,KAAhC;EASD,GAVD,MAUO;EACL;EACAC,IAAAA,WAAW,CAACH,WAAZ,GAA0BA,WAA1B;EACAG,IAAAA,WAAW,CAACpqB,SAAZ,GAAwB,IAAxB;EACAoqB,IAAAA,WAAW,CAACC,kBAAZ,GAAiC,CAAjC;EACAD,IAAAA,WAAW,CAACpb,IAAZ,GAAmBqa,cAAnB;EACAe,IAAAA,WAAW,CAACF,IAAZ,GAAmBA,IAAnB;EACAE,IAAAA,WAAW,CAACV,QAAZ,GAAuBA,QAAvB;EACAU,IAAAA,WAAW,CAACnb,UAAZ,GAAyBkb,yBAAzB;EACD;EACF;EAGD;EACA;EACA;EACA;EACA;EACA;;;EACA,SAASG,2BAAT,CACEpmC,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIE;EACA,MAAM8C,SAAS,GAAG1X,cAAc,CAACwd,YAAjC;EACA,MAAM2H,WAAoC,GAAGzN,SAAS,CAACyN,WAAvD;EACA,MAAMuU,QAA8B,GAAGhiB,SAAS,CAACwiB,IAAjD;EACA,MAAMzY,WAAW,GAAG/J,SAAS,CAAC7gB,QAA9B;EAEA0iC,EAAAA,mBAAmB,CAACpU,WAAD,CAAnB;EACAsU,EAAAA,mBAAmB,CAACC,QAAD,EAAWvU,WAAX,CAAnB;EACA2U,EAAAA,4BAA4B,CAACrY,WAAD,EAAc0D,WAAd,CAA5B;EAEA8N,EAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0ByhB,WAA1B,EAAuC7M,WAAvC,CAAjB;EAEA,MAAI0iB,eAAgC,GAAGrT,mBAAmB,CAAC/vB,OAA3D;EAEA,MAAMqmC,mBAAmB,GAAGrW,kBAAkB,CAC5CoT,eAD4C,EAE3CtT,qBAF2C,CAA9C;;EAIA,MAAIuW,mBAAJ,EAAyB;EACvBjD,IAAAA,eAAe,GAAGjT,yBAAyB,CACzCiT,eADyC,EAEzCtT,qBAFyC,CAA3C;EAIAhkB,IAAAA,cAAc,CAACpM,KAAf,IAAwBxB,UAAxB;EACD,GAND,MAMO;EACL,QAAMooC,gBAAgB,GACpBtmC,OAAO,KAAK,IAAZ,IAAoB,CAACA,OAAO,CAACN,KAAR,GAAgBxB,UAAjB,MAAiCR,OADvD;;EAEA,QAAI4oC,gBAAJ,EAAsB;EACpB;EACA;EACA;EACAtB,MAAAA,8BAA8B,CAC5Bl5B,cAD4B,EAE5BA,cAAc,CAACjL,KAFa,EAG5B6f,WAH4B,CAA9B;EAKD;;EACD0iB,IAAAA,eAAe,GAAGlT,gCAAgC,CAACkT,eAAD,CAAlD;EACD;;EACD7S,EAAAA,mBAAmB,CAACzkB,cAAD,EAAiBs3B,eAAjB,CAAnB;;EAEA,MAAI,CAACt3B,cAAc,CAAC0Q,IAAf,GAAsBtC,YAAvB,MAAyCF,MAA7C,EAAqD;EACnD;EACA;EACAlO,IAAAA,cAAc,CAACyW,aAAf,GAA+B,IAA/B;EACD,GAJD,MAIO;EACL,YAAQ0O,WAAR;EACE,WAAK,UAAL;EAAiB;EACf,cAAMkU,cAAc,GAAGD,kBAAkB,CAACp5B,cAAc,CAACjL,KAAhB,CAAzC;EACA,cAAImlC,IAAJ;;EACA,cAAIb,cAAc,KAAK,IAAvB,EAA6B;EAC3B;EACA;EACAa,YAAAA,IAAI,GAAGl6B,cAAc,CAACjL,KAAtB;EACAiL,YAAAA,cAAc,CAACjL,KAAf,GAAuB,IAAvB;EACD,WALD,MAKO;EACL;EACA;EACAmlC,YAAAA,IAAI,GAAGb,cAAc,CAACrkC,OAAtB;EACAqkC,YAAAA,cAAc,CAACrkC,OAAf,GAAyB,IAAzB;EACD;;EACDglC,UAAAA,2BAA2B,CACzBh6B,cADyB,EAEzB,KAFyB;EAGzBk6B,UAAAA,IAHyB,EAIzBb,cAJyB,EAKzBK,QALyB,EAMzB15B,cAAc,CAACif,UANU,CAA3B;EAQA;EACD;;EACD,WAAK,WAAL;EAAkB;EAChB;EACA;EACA;EACA;EACA,cAAIib,KAAI,GAAG,IAAX;EACA,cAAIhV,GAAG,GAAGllB,cAAc,CAACjL,KAAzB;EACAiL,UAAAA,cAAc,CAACjL,KAAf,GAAuB,IAAvB;;EACA,iBAAOmwB,GAAG,KAAK,IAAf,EAAqB;EACnB,gBAAMoU,UAAU,GAAGpU,GAAG,CAACxxB,SAAvB,CADmB;;EAGnB,gBAAI4lC,UAAU,KAAK,IAAf,IAAuBrU,kBAAkB,CAACqU,UAAD,CAAlB,KAAmC,IAA9D,EAAoE;EAClE;EACAt5B,cAAAA,cAAc,CAACjL,KAAf,GAAuBmwB,GAAvB;EACA;EACD;;EACD,gBAAMuV,OAAO,GAAGvV,GAAG,CAAClwB,OAApB;EACAkwB,YAAAA,GAAG,CAAClwB,OAAJ,GAAcklC,KAAd;EACAA,YAAAA,KAAI,GAAGhV,GAAP;EACAA,YAAAA,GAAG,GAAGuV,OAAN;EACD,WApBe;;;EAsBhBT,UAAAA,2BAA2B,CACzBh6B,cADyB,EAEzB,IAFyB;EAGzBk6B,UAAAA,KAHyB,EAIzB,IAJyB;EAKzBR,UAAAA,QALyB,EAMzB15B,cAAc,CAACif,UANU,CAA3B;EAQA;EACD;;EACD,WAAK,UAAL;EAAiB;EACf+a,UAAAA,2BAA2B,CACzBh6B,cADyB,EAEzB,KAFyB;EAGzB,cAHyB;EAIzB,cAJyB;EAKzBjE,UAAAA,SALyB,EAMzBiE,cAAc,CAACif,UANU,CAA3B;EAQA;EACD;;EACD;EAAS;EACP;EACA;EACAjf,UAAAA,cAAc,CAACyW,aAAf,GAA+B,IAA/B;EACD;EAxEH;EA0ED;;EACD,SAAOzW,cAAc,CAACjL,KAAtB;EACD;;EAED,SAAS2lC,qBAAT,CACExmC,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIE;EACA0O,EAAAA,iBAAiB,CAACtjB,cAAD,EAAiBA,cAAc,CAAC3L,SAAf,CAAyBuD,aAA1C,CAAjB;EACA,MAAMs7B,YAAY,GAAGlzB,cAAc,CAACwd,YAApC;;EACA,MAAItpB,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACA;EACA;EACA;EACA;EACA8L,IAAAA,cAAc,CAACjL,KAAf,GAAuBytB,oBAAoB,CACzCxiB,cADyC,EAEzC,IAFyC,EAGzCkzB,YAHyC,EAIzCte,WAJyC,CAA3C;EAMD,GAZD,MAYO;EACLqe,IAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0BkzB,YAA1B,EAAwCte,WAAxC,CAAjB;EACD;;EACD,SAAO5U,cAAc,CAACjL,KAAtB;EACD;;EAED,IAAI4lC,+CAA+C,GAAG,KAAtD;;EAEA,SAASC,qBAAT,CACE1mC,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIE;EACA,MAAMimB,YAAoC,GAAG76B,cAAc,CAACnP,IAA5D;EACA,MAAMI,OAA0B,GAAG4pC,YAAY,CAAC1pC,QAAhD;EAEA,MAAMmH,QAAQ,GAAG0H,cAAc,CAACwd,YAAhC;EACA,MAAMnlB,QAAQ,GAAG2H,cAAc,CAACgd,aAAhC;EAEA,MAAMzI,QAAQ,GAAGjc,QAAQ,CAAC/J,KAA1B;;EAEA,EAAa;EACX,QAAI,EAAE,WAAW+J,QAAb,CAAJ,EAA4B;EAC1B,UAAI,CAACqiC,+CAAL,EAAsD;EACpDA,QAAAA,+CAA+C,GAAG,IAAlD;;EACA,cACE,sGADF;EAGD;EACF;;EACD,QAAMG,iBAAiB,GAAG96B,cAAc,CAACnP,IAAf,CAAoBuqB,SAA9C;;EAEA,QAAI0f,iBAAJ,EAAuB;EACrBt8B,MAAAA,cAAc,CAACs8B,iBAAD,EAAoBxiC,QAApB,EAA8B,MAA9B,EAAsC,kBAAtC,CAAd;EACD;EACF;;EAEDyb,EAAAA,YAAY,CAAC/T,cAAD,EAAiBuU,QAAjB,CAAZ;;EAEA,MAAIlc,QAAQ,KAAK,IAAjB,EAAuB;EACrB,QAAMmc,QAAQ,GAAGnc,QAAQ,CAAC9J,KAA1B;EACA,QAAMkmB,WAAW,GAAGH,oBAAoB,CAACrjB,OAAD,EAAUsjB,QAAV,EAAoBC,QAApB,CAAxC;;EACA,QAAIC,WAAW,KAAK,CAApB,EAAuB;EACrB;EACA,UACEpc,QAAQ,CAACxB,QAAT,KAAsByB,QAAQ,CAACzB,QAA/B,IACA,CAACkkC,iBAAuB,EAF1B,EAGE;EACA,eAAOzH,4BAA4B,CACjCp/B,OADiC,EAEjC8L,cAFiC,EAGjC4U,WAHiC,CAAnC;EAKD;EACF,KAZD,MAYO;EACL;EACA;EACAE,MAAAA,sBAAsB,CAAC9U,cAAD,EAAiB/O,OAAjB,EAA0BwjB,WAA1B,EAAuCG,WAAvC,CAAtB;EACD;EACF;;EAED,MAAM6M,WAAW,GAAGnpB,QAAQ,CAACzB,QAA7B;EACAo8B,EAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0ByhB,WAA1B,EAAuC7M,WAAvC,CAAjB;EACA,SAAO5U,cAAc,CAACjL,KAAtB;EACD;;EAED,IAAIimC,oCAAoC,GAAG,KAA3C;;EAEA,SAASC,qBAAT,CACE/mC,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIE;EACA,MAAI3jB,OAA0B,GAAG+O,cAAc,CAACnP,IAAhD,CADA;EAGA;EACA;EACA;EACA;EACA;EACA;;EACA,EAAa;EACX,QAAKI,OAAD,CAAeE,QAAf,KAA4B4K,SAAhC,EAA2C;EACzC;EACA;EACA;EACA,UAAI9K,OAAO,KAAKA,OAAO,CAACiqC,QAAxB,EAAkC;EAChC,YAAI,CAACF,oCAAL,EAA2C;EACzCA,UAAAA,oCAAoC,GAAG,IAAvC;;EACA,gBACE,0EACE,4EAFJ;EAID;EACF;EACF,KAbD,MAaO;EACL/pC,MAAAA,OAAO,GAAIA,OAAD,CAAeE,QAAzB;EACD;EACF;;EACD,MAAMmH,QAAQ,GAAG0H,cAAc,CAACwd,YAAhC;EACA,MAAMpsB,MAAM,GAAGkH,QAAQ,CAACzB,QAAxB;;EAEA,EAAa;EACX,QAAI,OAAOzF,MAAP,KAAkB,UAAtB,EAAkC;EAChC,YACE,wEACE,mEADF,GAEE,kEAFF,GAGE,iDAJJ;EAMD;EACF;;EAEDskB,EAAAA,oBAAoB,CAAC1V,cAAD,EAAiB4U,WAAjB,CAApB;EACA,MAAML,QAAQ,GAAGqB,WAAW,CAAC3kB,OAAD,EAAUqH,QAAQ,CAAC6iC,qBAAnB,CAA5B;EACA,MAAI1Z,WAAJ;;EACA,EAAa;EACXpuB,IAAAA,mBAAiB,CAACa,OAAlB,GAA4B8L,cAA5B;EACA+P,IAAAA,cAAc,CAAC,IAAD,CAAd;EACA0R,IAAAA,WAAW,GAAGrwB,MAAM,CAACmjB,QAAD,CAApB;EACAxE,IAAAA,cAAc,CAAC,KAAD,CAAd;EACD,GALD,AA5CA;;;EAsDA/P,EAAAA,cAAc,CAACpM,KAAf,IAAwB/B,aAAxB;EACAohC,EAAAA,iBAAiB,CAAC/+B,OAAD,EAAU8L,cAAV,EAA0ByhB,WAA1B,EAAuC7M,WAAvC,CAAjB;EACA,SAAO5U,cAAc,CAACjL,KAAtB;EACD;;AAsBD,EAAO,SAAS4gB,gCAAT,GAA4C;EACjD4c,EAAAA,gBAAgB,GAAG,IAAnB;EACD;;EAED,SAASe,4BAAT,CACEp/B,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIgB;EACd,MAAI1gB,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACA8L,IAAAA,cAAc,CAACiV,YAAf,GAA8B/gB,OAAO,CAAC+gB,YAAtC;EACD;;EAED,EAAyB;EACvB;EACA+c,IAAAA,0BAA0B,CAAChyB,AAAD,CAA1B;EACD;;EAEDwY,EAAAA,sBAAsB,CAACxY,cAAc,CAAC6G,KAAhB,CAAtB,CAXc;;EAcd,MAAI,CAAC2D,gBAAgB,CAACoK,WAAD,EAAc5U,cAAc,CAAC6U,UAA7B,CAArB,EAA+D;EAC7D;EACA;EACA;EACA,WAAO,IAAP;EACD,GALD,MAKO;EACL;EACA;EACAgO,IAAAA,gBAAgB,CAAC3uB,OAAD,EAAU8L,cAAV,CAAhB;EACA,WAAOA,cAAc,CAACjL,KAAtB;EACD;EACF;;EAED,SAASqmC,YAAT,CACElnC,OADF,EAEEmnC,iBAFF,EAGEC,iBAHF,EAIgB;EACd,EAAa;EACX,QAAMtd,WAAW,GAAGqd,iBAAiB,CAACxnC,MAAtC;;EACA,QAAImqB,WAAW,KAAK,IAApB,EAA0B;EACxB,YAAM,IAAIhiB,KAAJ,CAAU,6BAAV,CAAN;EACD,KAJU;EAOX;;;EACA9H,IAAAA,OAAO,CAACR,SAAR,GAAoB,IAApB;EACA2nC,IAAAA,iBAAiB,CAAC3nC,SAAlB,GAA8B,IAA9B,CATW;;EAYX4nC,IAAAA,iBAAiB,CAACxkC,KAAlB,GAA0BukC,iBAAiB,CAACvkC,KAA5C;EACAwkC,IAAAA,iBAAiB,CAACtmC,OAAlB,GAA4BqmC,iBAAiB,CAACrmC,OAA9C;EACAsmC,IAAAA,iBAAiB,CAACznC,MAAlB,GAA2BwnC,iBAAiB,CAACxnC,MAA7C;EACAynC,IAAAA,iBAAiB,CAACjd,GAAlB,GAAwBgd,iBAAiB,CAAChd,GAA1C,CAfW;;EAkBX,QAAIgd,iBAAiB,KAAKrd,WAAW,CAACjpB,KAAtC,EAA6C;EAC3CipB,MAAAA,WAAW,CAACjpB,KAAZ,GAAoBumC,iBAApB;EACD,KAFD,MAEO;EACL,UAAIC,WAAW,GAAGvd,WAAW,CAACjpB,KAA9B;;EACA,UAAIwmC,WAAW,KAAK,IAApB,EAA0B;EACxB,cAAM,IAAIv/B,KAAJ,CAAU,kCAAV,CAAN;EACD;;EACD,aAAOu/B,WAAW,CAACvmC,OAAZ,KAAwBqmC,iBAA/B,EAAkD;EAChDE,QAAAA,WAAW,GAAGA,WAAW,CAACvmC,OAA1B;;EACA,YAAIumC,WAAW,KAAK,IAApB,EAA0B;EACxB,gBAAM,IAAIv/B,KAAJ,CAAU,wCAAV,CAAN;EACD;EACF;;EACDu/B,MAAAA,WAAW,CAACvmC,OAAZ,GAAsBsmC,iBAAtB;EACD,KAhCU;EAmCX;;;EACA,QAAMtc,IAAI,GAAGhB,WAAW,CAACiB,UAAzB;;EACA,QAAID,IAAI,KAAK,IAAb,EAAmB;EACjBA,MAAAA,IAAI,CAACE,UAAL,GAAkBhrB,OAAlB;EACA8pB,MAAAA,WAAW,CAACiB,UAAZ,GAAyB/qB,OAAzB;EACD,KAHD,MAGO;EACL8pB,MAAAA,WAAW,CAACmB,WAAZ,GAA0BnB,WAAW,CAACiB,UAAZ,GAAyB/qB,OAAnD;EACD;;EACDA,IAAAA,OAAO,CAACgrB,UAAR,GAAqB,IAArB;EACAhrB,IAAAA,OAAO,CAACN,KAAR,GAAgB3B,QAAhB;EAEAqpC,IAAAA,iBAAiB,CAAC1nC,KAAlB,IAA2B9B,SAA3B,CA9CW;;EAiDX,WAAOwpC,iBAAP;EACD,GAlDD;EAwDD;;EAED,SAASE,SAAT,CACEtnC,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIgB;EACd,MAAM4e,WAAW,GAAGxzB,cAAc,CAAC6G,KAAnC;;EAEA,EAAa;EACX,QAAI7G,cAAc,CAACy7B,kBAAf,IAAqCvnC,OAAO,KAAK,IAArD,EAA2D;EACzD;EACA,aAAOknC,YAAY,CACjBlnC,OADiB,EAEjB8L,cAFiB,EAGjB+zB,2BAA2B,CACzB/zB,cAAc,CAACnP,IADU,EAEzBmP,cAAc,CAAC5R,GAFU,EAGzB4R,cAAc,CAACwd,YAHU,EAIzBxd,cAAc,CAACsP,WAAf,IAA8B,IAJL,EAKzBtP,cAAc,CAAC0Q,IALU,EAMzB1Q,cAAc,CAAC6G,KANU,CAHV,CAAnB;EAYD;EACF;;EAED,MAAI3S,OAAO,KAAK,IAAhB,EAAsB;EACpB,QAAMmE,QAAQ,GAAGnE,OAAO,CAAC8oB,aAAzB;EACA,QAAM1kB,QAAQ,GAAG0H,cAAc,CAACwd,YAAhC;;EAEA,QACEnlB,QAAQ,KAAKC,QAAb,IACAyiC,iBAAuB,EADvB;EAGCn4B,IAAAA,CAAU5C,cAAc,CAACnP,IAAf,KAAwBqD,OAAO,CAACrD,IAAnC,CAHR,CADF,EAKE;EACA;EACA;EACA0hC,MAAAA,gBAAgB,GAAG,IAAnB;EACD,KATD,MASO,IAAI,CAAC/nB,gBAAgB,CAACoK,WAAD,EAAc4e,WAAd,CAArB,EAAiD;EACtDjB,MAAAA,gBAAgB,GAAG,KAAnB,CADsD;EAGtD;EACA;;EACA,cAAQvyB,cAAc,CAACjP,GAAvB;EACE,aAAKlE,QAAL;EACE2oC,UAAAA,mBAAmB,CAACx1B,cAAD,CAAnB;AACA41B,EACA;;EACF,aAAK7oC,aAAL;EACE42B,UAAAA,eAAe,CAAC3jB,cAAD,CAAf;EACA;;EACF,aAAKrT,cAAL;EAAqB;EACnB,gBAAMoR,SAAS,GAAGiC,cAAc,CAACnP,IAAjC;;EACA,gBAAIskC,iBAAuB,CAACp3B,SAAD,CAA3B,EAAwC;EACtCq3B,cAAAA,mBAAyB,CAACp1B,cAAD,CAAzB;EACD;;EACD;EACD;;EACD,aAAKlT,UAAL;EACEw2B,UAAAA,iBAAiB,CACftjB,cADe,EAEfA,cAAc,CAAC3L,SAAf,CAAyBuD,aAFV,CAAjB;EAIA;;EACF,aAAKxK,eAAL;EAAsB;EACpB,gBAAMmnB,QAAQ,GAAGvU,cAAc,CAACgd,aAAf,CAA6BzuB,KAA9C;EACAwlB,YAAAA,YAAY,CAAC/T,cAAD,EAAiBuU,QAAjB,CAAZ;EACA;EACD;;EACD,aAAKjnB,QAAL;EACE,UAAyB;EACvB;EACA,gBAAMouC,YAAY,GAAGlxB,gBAAgB,CACnCoK,WADmC,EAEnC5U,cAAc,CAAC6U,UAFoB,CAArC;;EAIA,gBAAI6mB,YAAJ,EAAkB;EAChB17B,cAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD,aARsB;EAWvB;;;EACA,gBAAMsC,SAAS,GAAG2L,cAAc,CAAC3L,SAAjC;EACAA,YAAAA,SAAS,CAACygC,cAAV,GAA2B,CAA3B;EACAzgC,YAAAA,SAAS,CAAC0gC,qBAAV,GAAkC,CAAlC;EACD;;EACD;;EACF,aAAKxnC,iBAAL;EAAwB;EACtB,gBAAM2tB,KAA2B,GAAGlb,cAAc,CAACyW,aAAnD;;EACA,gBAAIyE,KAAK,KAAK,IAAd,EAAoB;AAClB,EAiBA;EACA;EACA;;;EACA,kBAAM8c,oBAA2B,GAAIh4B,cAAc,CAACjL,KAApD;EACA,kBAAM4mC,iBAAiB,GAAG3D,oBAAoB,CAACnjB,UAA/C;;EACA,kBAAIrK,gBAAgB,CAACoK,WAAD,EAAc+mB,iBAAd,CAApB,EAAsD;EACpD;EACA;EACA,uBAAOlE,uBAAuB,CAC5BvjC,OAD4B,EAE5B8L,cAF4B,EAG5B4U,WAH4B,CAA9B;EAKD,eARD,MAQO;EACL;EACA;EACA6P,gBAAAA,mBAAmB,CACjBzkB,cADiB,EAEjBokB,gCAAgC,CAACH,mBAAmB,CAAC/vB,OAArB,CAFf,CAAnB,CAHK;EAQL;;EACA,oBAAMa,KAAK,GAAGu+B,4BAA4B,CACxCp/B,OADwC,EAExC8L,cAFwC,EAGxC4U,WAHwC,CAA1C;;EAKA,oBAAI7f,KAAK,KAAK,IAAd,EAAoB;EAClB;EACA;EACA,yBAAOA,KAAK,CAACC,OAAb;EACD,iBAJD,MAIO;EACL,yBAAO,IAAP;EACD;EACF;EACF,aArDD,MAqDO;EACLyvB,cAAAA,mBAAmB,CACjBzkB,cADiB,EAEjBokB,gCAAgC,CAACH,mBAAmB,CAAC/vB,OAArB,CAFf,CAAnB;EAID;;EACD;EACD;;EACD,aAAKrG,qBAAL;EAA4B;EAC1B,gBAAM2sC,gBAAgB,GAAG,CAACtmC,OAAO,CAACN,KAAR,GAAgBxB,UAAjB,MAAiCR,OAA1D;;EAEA,gBAAM8pC,aAAY,GAAGlxB,gBAAgB,CACnCoK,WADmC,EAEnC5U,cAAc,CAAC6U,UAFoB,CAArC;;EAKA,gBAAI2lB,gBAAJ,EAAsB;EACpB,kBAAIkB,aAAJ,EAAkB;EAChB;EACA;EACA;EACA;EACA;EACA,uBAAOpB,2BAA2B,CAChCpmC,OADgC,EAEhC8L,cAFgC,EAGhC4U,WAHgC,CAAlC;EAKD,eAZmB;EAcpB;EACA;;;EACA5U,cAAAA,cAAc,CAACpM,KAAf,IAAwBxB,UAAxB;EACD,aAzByB;EA4B1B;EACA;;;EACA,gBAAMgoC,WAAW,GAAGp6B,cAAc,CAACyW,aAAnC;;EACA,gBAAI2jB,WAAW,KAAK,IAApB,EAA0B;EACxB;EACA;EACAA,cAAAA,WAAW,CAACpqB,SAAZ,GAAwB,IAAxB;EACAoqB,cAAAA,WAAW,CAACF,IAAZ,GAAmB,IAAnB;EACAE,cAAAA,WAAW,CAACnb,UAAZ,GAAyB,IAAzB;EACD;;EACDwF,YAAAA,mBAAmB,CAACzkB,cAAD,EAAiBikB,mBAAmB,CAAC/vB,OAArC,CAAnB;;EAEA,gBAAIwnC,aAAJ,EAAkB;EAChB;EACD,aAFD,MAEO;EACL;EACA;EACA;EACA,qBAAO,IAAP;EACD;EACF;;EACD,aAAKztC,kBAAL;EACA,aAAKC,qBAAL;EAA4B;EAC1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA8R,YAAAA,cAAc,CAAC6G,KAAf,GAAuBtB,OAAvB;EACA,mBAAO6uB,wBAAwB,CAAClgC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAA/B;EACD;EAxKH;;EA0KA,aAAO0e,4BAA4B,CAACp/B,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAAnC;EACD,KAhLM,MAgLA;EACL,UAAI,CAAC1gB,OAAO,CAACN,KAAR,GAAgBb,4BAAjB,MAAmDnB,OAAvD,EAAgE;EAC9D;EACA;EACA2gC,QAAAA,gBAAgB,GAAG,IAAnB;EACD,OAJD,MAIO;EACL;EACA;EACA;EACA;EACAA,QAAAA,gBAAgB,GAAG,KAAnB;EACD;EACF;EACF,GA1MD,MA0MO;EACLA,IAAAA,gBAAgB,GAAG,KAAnB;EACD,GAjOa;EAoOd;EACA;EACA;EACA;;;EACAvyB,EAAAA,cAAc,CAAC6G,KAAf,GAAuBtB,OAAvB;;EAEA,UAAQvF,cAAc,CAACjP,GAAvB;EACE,SAAKnE,sBAAL;EAA6B;EAC3B,eAAO6pC,2BAA2B,CAChCviC,OADgC,EAEhC8L,cAFgC,EAGhCA,cAAc,CAACnP,IAHiB,EAIhC+jB,WAJgC,CAAlC;EAMD;;EACD,SAAKlnB,aAAL;EAAoB;EAClB,YAAM4vB,WAAW,GAAGtd,cAAc,CAACsd,WAAnC;EACA,eAAO0Y,kBAAkB,CACvB9hC,OADuB,EAEvB8L,cAFuB,EAGvBsd,WAHuB,EAIvBkW,WAJuB,EAKvB5e,WALuB,CAAzB;EAOD;;EACD,SAAKloB,iBAAL;EAAwB;EACtB,YAAMqR,UAAS,GAAGiC,cAAc,CAACnP,IAAjC;EACA,YAAM+qC,eAAe,GAAG57B,cAAc,CAACwd,YAAvC;EACA,YAAM4Y,aAAa,GACjBp2B,cAAc,CAACsd,WAAf,KAA+Bvf,UAA/B,GACI69B,eADJ,GAEI3oB,mBAAmB,CAAClV,UAAD,EAAY69B,eAAZ,CAHzB;EAIA,eAAOzH,uBAAuB,CAC5BjgC,OAD4B,EAE5B8L,cAF4B,EAG5BjC,UAH4B,EAI5Bq4B,aAJ4B,EAK5BxhB,WAL4B,CAA9B;EAOD;;EACD,SAAKjoB,cAAL;EAAqB;EACnB,YAAMoR,WAAS,GAAGiC,cAAc,CAACnP,IAAjC;EACA,YAAM+qC,gBAAe,GAAG57B,cAAc,CAACwd,YAAvC;;EACA,YAAM4Y,cAAa,GACjBp2B,cAAc,CAACsd,WAAf,KAA+Bvf,WAA/B,GACI69B,gBADJ,GAEI3oB,mBAAmB,CAAClV,WAAD,EAAY69B,gBAAZ,CAHzB;;EAIA,eAAO3G,oBAAoB,CACzB/gC,OADyB,EAEzB8L,cAFyB,EAGzBjC,WAHyB,EAIzBq4B,cAJyB,EAKzBxhB,WALyB,CAA3B;EAOD;;EACD,SAAK/nB,QAAL;EACE,aAAO6oC,cAAc,CAACxhC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAArB;;EACF,SAAK7nB,aAAL;EACE,aAAO+oC,mBAAmB,CAAC5hC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAA1B;;EACF,SAAK5nB,QAAL;EACE,aAAO+oC,cAAc,CAAC7hC,AAAD,CAArB;;EACF,SAAK3G,iBAAL;EACE,aAAOkqC,uBAAuB,CAACvjC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAA9B;;EACF,SAAK9nB,UAAL;EACE,aAAO4tC,qBAAqB,CAACxmC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAA5B;;EACF,SAAKvnB,UAAL;EAAiB;EACf,YAAMwD,IAAI,GAAGmP,cAAc,CAACnP,IAA5B;EACA,YAAM+qC,iBAAe,GAAG57B,cAAc,CAACwd,YAAvC;;EACA,YAAM4Y,eAAa,GACjBp2B,cAAc,CAACsd,WAAf,KAA+BzsB,IAA/B,GACI+qC,iBADJ,GAEI3oB,mBAAmB,CAACpiB,IAAD,EAAO+qC,iBAAP,CAHzB;;EAIA,eAAOxI,gBAAgB,CACrBl/B,OADqB,EAErB8L,cAFqB,EAGrBnP,IAHqB,EAIrBulC,eAJqB,EAKrBxhB,WALqB,CAAvB;EAOD;;EACD,SAAK3nB,QAAL;EACE,aAAO4zB,cAAc,CAAC3sB,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAArB;;EACF,SAAK1nB,IAAL;EACE,aAAO0nC,UAAU,CAAC1gC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAAjB;;EACF,SAAKtnB,QAAL;EACE,aAAOunC,cAAc,CAAC3gC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAArB;;EACF,SAAKxnB,eAAL;EACE,aAAOwtC,qBAAqB,CAAC1mC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAA5B;;EACF,SAAKznB,eAAL;EACE,aAAO8tC,qBAAqB,CAAC/mC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAA5B;;EACF,SAAKpnB,aAAL;EAAoB;EAClB,YAAMqD,MAAI,GAAGmP,cAAc,CAACnP,IAA5B;EACA,YAAM+qC,iBAAe,GAAG57B,cAAc,CAACwd,YAAvC,CAFkB;;EAIlB,YAAI4Y,eAAa,GAAGnjB,mBAAmB,CAACpiB,MAAD,EAAO+qC,iBAAP,CAAvC;;EACA,QAAa;EACX,cAAI57B,cAAc,CAACnP,IAAf,KAAwBmP,cAAc,CAACsd,WAA3C,EAAwD;EACtD,gBAAM4W,cAAc,GAAGrjC,MAAI,CAACuqB,SAA5B;;EACA,gBAAI8Y,cAAJ,EAAoB;EAClB11B,cAAAA,cAAc,CACZ01B,cADY,EAEZkC,eAFY;EAGZ,oBAHY,EAIZtlC,gBAAgB,CAACD,MAAD,CAJJ,CAAd;EAMD;EACF;EACF;;EACDulC,QAAAA,eAAa,GAAGnjB,mBAAmB,CAACpiB,MAAI,CAACA,IAAN,EAAYulC,eAAZ,CAAnC;EACA,eAAO7C,mBAAmB,CACxBr/B,OADwB,EAExB8L,cAFwB,EAGxBnP,MAHwB,EAIxBulC,eAJwB,EAKxB5C,WALwB,EAMxB5e,WANwB,CAA1B;EAQD;;EACD,SAAKnnB,mBAAL;EAA0B;EACxB,eAAOqmC,yBAAyB,CAC9B5/B,OAD8B,EAE9B8L,cAF8B,EAG9BA,cAAc,CAACnP,IAHe,EAI9BmP,cAAc,CAACwd,YAJe,EAK9BgW,WAL8B,EAM9B5e,WAN8B,CAAhC;EAQD;;EACD,SAAKjnB,wBAAL;EAA+B;EAC7B,YAAMoQ,WAAS,GAAGiC,cAAc,CAACnP,IAAjC;EACA,YAAM+qC,iBAAe,GAAG57B,cAAc,CAACwd,YAAvC;;EACA,YAAM4Y,eAAa,GACjBp2B,cAAc,CAACsd,WAAf,KAA+Bvf,WAA/B,GACI69B,iBADJ,GAEI3oB,mBAAmB,CAAClV,WAAD,EAAY69B,iBAAZ,CAHzB;;EAIA,eAAOpF,6BAA6B,CAClCtiC,OADkC,EAElC8L,cAFkC,EAGlCjC,WAHkC,EAIlCq4B,eAJkC,EAKlCxhB,WALkC,CAApC;EAOD;;EACD,SAAK/mB,qBAAL;EAA4B;EAC1B,eAAOysC,2BAA2B,CAACpmC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAAlC;EACD;;EACD,SAAK9mB,oBAAL;EAA2B;AACzB;EAGA;EACD;;EACD,SAAKC,cAAL;EAAqB;AACnB;EAGA;EACD;;EACD,SAAKC,KAAL;EAAY;AACV;EAKA;EACD;;EACD,SAAKC,kBAAL;EAAyB;EACvB,eAAOmmC,wBAAwB,CAAClgC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAA/B;EACD;;EACD,SAAK1mB,qBAAL;EAA4B;EAC1B,eAAOymC,2BAA2B,CAACzgC,OAAD,EAAU8L,cAAV,EAA0B4U,WAA1B,CAAlC;EACD;EArKH;;EA1Oc;EAAA;EAAA,kDAqZZ5U,cAAc,CAACjP,GArZH;EAAA;EAAA;EAuZf;;EC1xGD,SAAS8qC,UAAT,CAAoB77B,cAApB,EAA2C;EACzC;EACA;EACAA,EAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD;;EAED,SAASijC,SAAT,CAAiBh1B,cAAjB,EAAwC;EACtCA,EAAAA,cAAc,CAACpM,KAAf,IAAwBvB,GAAxB;EACD;;EAED,IAAIypC,iBAAJ;EACA,IAAIC,mBAAJ;EACA,IAAIjG,qBAAJ;EACA,IAAIC,gBAAJ;;AACA,EAAsB;EACpB;EAEA+F,EAAAA,iBAAiB,GAAG,UAClB3mC,MADkB,EAElB6K,cAFkB,EAGlBg8B,qBAHkB,EAIlB/jC,QAJkB,EAKlB;EACA;EACA;EACA,QAAIzE,IAAI,GAAGwM,cAAc,CAACjL,KAA1B;;EACA,WAAOvB,IAAI,KAAK,IAAhB,EAAsB;EACpB,UAAIA,IAAI,CAACzC,GAAL,KAAahE,aAAb,IAA8ByG,IAAI,CAACzC,GAAL,KAAa/D,QAA/C,EAAyD;EACvDkL,QAAAA,kBAAkB,CAAC/C,MAAD,EAAS3B,IAAI,CAACa,SAAd,CAAlB;EACD,OAFD,MAEO,AAEA,IAAIb,IAAI,CAACzC,GAAL,KAAajE,UAAjB,EAA6B,CAA7B,MAIA,IAAI0G,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;EAC9BvB,QAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,QAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;EACA;EACD;;EACD,UAAIvB,IAAI,KAAKwM,cAAb,EAA6B;EAC3B;EACD;;EACD,aAAOxM,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;EAC5B,YAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBmM,cAA5C,EAA4D;EAC1D;EACD;;EACDxM,QAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;;EACDL,MAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;EACAL,MAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;EACD;EACF,GAnCD;;EAqCA+mC,EAAAA,mBAAmB,GAAG,UAAS/7B,cAAT,EAAgC;EAErD,GAFD;;EAGA81B,EAAAA,qBAAmB,GAAG,UACpB5hC,OADoB,EAEpB8L,cAFoB,EAGpBnP,IAHoB,EAIpByH,QAJoB,EAKpBhC,qBALoB,EAMpB;EACA;EACA;EACA,QAAM+B,QAAQ,GAAGnE,OAAO,CAAC8oB,aAAzB;;EACA,QAAI3kB,QAAQ,KAAKC,QAAjB,EAA2B;EACzB;EACA;EACA;EACD,KARD;EAWA;EACA;EACA;;;EACA,QAAMlE,QAAkB,GAAG4L,cAAc,CAAC3L,SAA1C;EACA,QAAM4nC,kBAAkB,GAAGvY,cAAc,EAAzC,CAfA;EAiBA;EACA;;EACA,QAAM1qB,aAAa,GAAGb,aAAa,CACjC/D,AADiC,CAAnC,CAnBA;;EA4BA4L,IAAAA,cAAc,CAAC+W,WAAf,GAA8B/d,aAA9B,CA5BA;EA8BA;;EACA,QAAIA,aAAJ,EAAmB;EACjB6iC,MAAAA,UAAU,CAAC77B,cAAD,CAAV;EACD;EACF,GAxCD;;EAyCA+1B,EAAAA,gBAAc,GAAG,UACf7hC,OADe,EAEf8L,cAFe,EAGf7G,OAHe,EAIfC,OAJe,EAKf;EACA;EACA,QAAID,OAAO,KAAKC,OAAhB,EAAyB;EACvByiC,MAAAA,UAAU,CAAC77B,cAAD,CAAV;EACD;EACF,GAVD;EAWD,CA/FD;;EAoaA,SAASk8B,kBAAT,CACE9B,WADF,EAEE+B,wBAFF,EAGE;AACA;EAKA,UAAQ/B,WAAW,CAACV,QAApB;EACE,SAAK,QAAL;EAAe;EACb;EACA;EACA;EACA;EACA;EACA,YAAI0C,QAAQ,GAAGhC,WAAW,CAACF,IAA3B;EACA,YAAImC,YAAY,GAAG,IAAnB;;EACA,eAAOD,QAAQ,KAAK,IAApB,EAA0B;EACxB,cAAIA,QAAQ,CAAC1oC,SAAT,KAAuB,IAA3B,EAAiC;EAC/B2oC,YAAAA,YAAY,GAAGD,QAAf;EACD;;EACDA,UAAAA,QAAQ,GAAGA,QAAQ,CAACpnC,OAApB;EACD,SAbY;EAeb;;;EACA,YAAIqnC,YAAY,KAAK,IAArB,EAA2B;EACzB;EACAjC,UAAAA,WAAW,CAACF,IAAZ,GAAmB,IAAnB;EACD,SAHD,MAGO;EACL;EACA;EACAmC,UAAAA,YAAY,CAACrnC,OAAb,GAAuB,IAAvB;EACD;;EACD;EACD;;EACD,SAAK,WAAL;EAAkB;EAChB;EACA;EACA;EACA;EACA;EACA,YAAIonC,SAAQ,GAAGhC,WAAW,CAACF,IAA3B;EACA,YAAImC,aAAY,GAAG,IAAnB;;EACA,eAAOD,SAAQ,KAAK,IAApB,EAA0B;EACxB,cAAIA,SAAQ,CAAC1oC,SAAT,KAAuB,IAA3B,EAAiC;EAC/B2oC,YAAAA,aAAY,GAAGD,SAAf;EACD;;EACDA,UAAAA,SAAQ,GAAGA,SAAQ,CAACpnC,OAApB;EACD,SAbe;EAehB;;;EACA,YAAIqnC,aAAY,KAAK,IAArB,EAA2B;EACzB;EACA,cAAI,CAACF,wBAAD,IAA6B/B,WAAW,CAACF,IAAZ,KAAqB,IAAtD,EAA4D;EAC1D;EACA;EACAE,YAAAA,WAAW,CAACF,IAAZ,CAAiBllC,OAAjB,GAA2B,IAA3B;EACD,WAJD,MAIO;EACLolC,YAAAA,WAAW,CAACF,IAAZ,GAAmB,IAAnB;EACD;EACF,SATD,MASO;EACL;EACA;EACAmC,UAAAA,aAAY,CAACrnC,OAAb,GAAuB,IAAvB;EACD;;EACD;EACD;EA1DH;EA4DD;;EAED,SAASsnC,YAAT,CACEpoC,OADF,EAEE8L,cAFF,EAGE4U,WAHF,EAIgB;EACd,MAAMtc,QAAQ,GAAG0H,cAAc,CAACwd,YAAhC;;EAEA,UAAQxd,cAAc,CAACjP,GAAvB;EACE,SAAKnE,sBAAL;EACA,SAAKc,aAAL;EACA,SAAKD,mBAAL;EACA,SAAKf,iBAAL;EACA,SAAKW,UAAL;EACA,SAAKJ,QAAL;EACA,SAAKC,IAAL;EACA,SAAKI,QAAL;EACA,SAAKH,eAAL;EACA,SAAKK,aAAL;EACE,aAAO,IAAP;;EACF,SAAKb,cAAL;EAAqB;EACnB,YAAMoR,SAAS,GAAGiC,cAAc,CAACnP,IAAjC;;EACA,YAAIskC,iBAAuB,CAACp3B,SAAD,CAA3B,EAAwC;EACtCw+B,UAAAA,UAAgB,CAACv8B,cAAD,CAAhB;EACD;;EACD,eAAO,IAAP;EACD;;EACD,SAAKnT,QAAL;EAAe;EACb42B,QAAAA,gBAAgB,CAACzjB,cAAD,CAAhB;EACAw8B,QAAAA,wBAA8B,CAACx8B,cAAD,CAA9B;EACAy8B,QAAAA,2BAAwC;EACxC,YAAMC,SAAS,GAAI18B,cAAc,CAAC3L,SAAlC;;EACA,YAAIqoC,SAAS,CAACjH,cAAd,EAA8B;EAC5BiH,UAAAA,SAAS,CAACzrC,OAAV,GAAoByrC,SAAS,CAACjH,cAA9B;EACAiH,UAAAA,SAAS,CAACjH,cAAV,GAA2B,IAA3B;EACD;;EACD,YAAIvhC,OAAO,KAAK,IAAZ,IAAoBA,OAAO,CAACa,KAAR,KAAkB,IAA1C,EAAgD;EAC9C;EACA;EACA,cAAM4nC,WAAW,GAAGhX,iBAAiB,CAAC3lB,AAAD,CAArC;;EACA,cAAI28B,WAAJ,EAAiB;EACf;EACA;EACAd,YAAAA,UAAU,CAAC77B,cAAD,CAAV;EACD,WAJD,MAIO,IAAI,CAAC08B,SAAS,CAAC7G,OAAf,EAAwB;EAC7B;EACA;EACA;EACA;EACA71B,YAAAA,cAAc,CAACpM,KAAf,IAAwBtB,QAAxB;EACD;EACF;;EACDypC,QAAAA,mBAAmB,CAAC/7B,cAAD,CAAnB;EACA,eAAO,IAAP;EACD;;EACD,SAAKjT,aAAL;EAAoB;EAClB62B,QAAAA,cAAc,CAAC5jB,cAAD,CAAd;EACA,YAAM1J,qBAAqB,GAAG8sB,oBAAoB,EAAlD;EACA,YAAMvyB,IAAI,GAAGmP,cAAc,CAACnP,IAA5B;;EACA,YAAIqD,OAAO,KAAK,IAAZ,IAAoB8L,cAAc,CAAC3L,SAAf,IAA4B,IAApD,EAA0D;EACxDyhC,UAAAA,qBAAmB,CACjB5hC,OADiB,EAEjB8L,cAFiB,EAGjBnP,IAHiB,EAIjByH,QAJiB,EAKjBhC,qBALiB,CAAnB;;EAQA,cAAIpC,OAAO,CAACmqB,GAAR,KAAgBre,cAAc,CAACqe,GAAnC,EAAwC;EACtC2W,YAAAA,SAAO,CAACh1B,cAAD,CAAP;EACD;EACF,SAZD,MAYO;EACL,cAAI,CAAC1H,QAAL,EAAe;EAAA,kBAEX0H,cAAc,CAAC3L,SAAf,KAA6B,IAFlB;EAAA;EAAA;EAAA;EAAA;;;EAOb,mBAAO,IAAP;EACD;;EAED,cAAM4nC,kBAAkB,GAAGvY,cAAc,EAAzC,CAXK;EAaL;EACA;EACA;;EACA,cAAMiZ,YAAW,GAAGhX,iBAAiB,CAAC3lB,AAAD,CAArC;;EACA,cAAI28B,YAAJ,EAAiB;EACf;EACA;EACA,gBACElX,4BAA4B,CAC1BzlB,AAD0B,CAD9B,EAME;EACA;EACA;EACA67B,cAAAA,UAAU,CAAC77B,cAAD,CAAV;EACD;EACF,WAdD,MAcO;EACL,gBAAM5L,QAAQ,GAAG0D,cAAc,CAC7BjH,IAD6B,EAE7ByH,QAF6B,EAG7BhC,qBAH6B,EAI7B2lC,kBAJ6B,EAK7Bj8B,cAL6B,CAA/B;EAQA87B,YAAAA,iBAAiB,CAAC1nC,QAAD,EAAW4L,cAAX,EAA2B,KAA3B,EAAkC,KAAlC,CAAjB;EAEAA,YAAAA,cAAc,CAAC3L,SAAf,GAA2BD,QAA3B,CAXK;AAcL,EAaD;;EAED,cAAI4L,cAAc,CAACqe,GAAf,KAAuB,IAA3B,EAAiC;EAC/B;EACA2W,YAAAA,SAAO,CAACh1B,cAAD,CAAP;EACD;EACF;;EACD,eAAO,IAAP;EACD;;EACD,SAAKhT,QAAL;EAAe;EACb,YAAMoM,OAAO,GAAGd,QAAhB;;EACA,YAAIpE,OAAO,IAAI8L,cAAc,CAAC3L,SAAf,IAA4B,IAA3C,EAAiD;EAC/C,cAAM8E,OAAO,GAAGjF,OAAO,CAAC8oB,aAAxB,CAD+C;EAG/C;;EACA+Y,UAAAA,gBAAc,CAAC7hC,OAAD,EAAU8L,cAAV,EAA0B7G,OAA1B,EAAmCC,OAAnC,CAAd;EACD,SALD,MAKO;EACL,cAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;EAAA,kBAE7B4G,cAAc,CAAC3L,SAAf,KAA6B,IAFA;EAAA;EAAA;EAAA;EAAA;;EAOhC;;EACD,cAAMiC,sBAAqB,GAAG8sB,oBAAoB,EAAlD;;EACA,cAAM6Y,mBAAkB,GAAGvY,cAAc,EAAzC;;EACA,cAAMiZ,aAAW,GAAGhX,iBAAiB,CAAC3lB,AAAD,CAArC;;EACA,cAAI28B,aAAJ,EAAiB;EACf,gBAAIjX,gCAAgC,CAAC1lB,AAAD,CAApC,EAAsD;EACpD67B,cAAAA,UAAU,CAAC77B,cAAD,CAAV;EACD;EACF,WAJD,MAIO;EACLA,YAAAA,cAAc,CAAC3L,SAAf,GAA2BmE,kBAAkB,CAC3CY,OAD2C,AAAA,CAA7C;EAMD;EACF;;EACD,eAAO,IAAP;EACD;;EACD,SAAK7L,iBAAL;EAAwB;EACtBo3B,QAAAA,kBAAkB,CAAC3kB,cAAD,CAAlB;EACA,YAAM2X,SAA+B,GAAG3X,cAAc,CAACyW,aAAvD;;EAoCA,YAAI,CAACzW,cAAc,CAACpM,KAAf,GAAuBxB,UAAxB,MAAwCR,OAA5C,EAAqD;EACnD;EACAoO,UAAAA,cAAc,CAAC6G,KAAf,GAAuB+N,WAAvB,CAFmD;;EAInD,cACE5hB,CACA,CAACgN,cAAc,CAAC0Q,IAAf,GAAsBpC,WAAvB,MAAwCJ,MAF1C,EAGE;EACAokB,YAAAA,sBAAsB,CAACtyB,cAAD,CAAtB;EACD;;EACD,iBAAOA,cAAP;EACD;;EAED,YAAM48B,cAAc,GAAGjlB,SAAS,KAAK,IAArC;EACA,YAAIklB,cAAc,GAAG,KAArB;;EACA,YAAI3oC,OAAO,KAAK,IAAhB,EAAsB;EACpB,cAAI8L,cAAc,CAACgd,aAAf,CAA6B+H,QAA7B,KAA0ChpB,SAA9C,EAAyD;EAG1D,SAJD,MAIO;EACL,cAAM0b,SAA+B,GAAGvjB,OAAO,CAACuiB,aAAhD;EACAomB,UAAAA,cAAc,GAAGplB,SAAS,KAAK,IAA/B;EACD;;EAED,YAAImlB,cAAc,IAAI,CAACC,cAAvB,EAAuC;EACrC;EACA;EACA;EACA;EACA;EACA,cAAI,CAAC78B,cAAc,CAAC0Q,IAAf,GAAsBtC,YAAvB,MAAyCF,MAA7C,EAAqD;EACnD;EACA;EACA;EACA;EACA;EACA;EACA;EACA,gBAAM4uB,wBAAwB,GAC5B5oC,OAAO,KAAK,IAAZ,IACA8L,cAAc,CAACgd,aAAf,CAA6BgI,0BAA7B,KAA4D,IAF9D;;EAGA,gBACE8X,wBAAwB,IACxB5Y,kBAAkB,CAChBD,mBAAmB,CAAC/vB,OADJ,EAEf6vB,8BAFe,CAFpB,EAME;EACA;EACA;EACAgZ,cAAAA,gBAAgB;EACjB,aAVD,MAUO;EACL;EACA;EACAC,cAAAA,+BAA+B;EAChC;EACF;EACF;;EAWD,QAAsB;EACpB;EACA,cAAIJ,cAAc,IAAIC,cAAtB,EAAsC;EACpC;EACA;EACA;EACA;EACA;EACA78B,YAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD;EACF;;EASD,eAAO,IAAP;EACD;;EACD,SAAKjF,UAAL;EACE22B,MAAAA,gBAAgB,CAACzjB,cAAD,CAAhB;EACA+7B,MAAAA,mBAAmB,CAAC/7B,cAAD,CAAnB;;EACA,UAAI9L,OAAO,KAAK,IAAhB,EAAsB;EACpBiG,QAAAA,kBAAkB,CAAC6F,cAAc,CAAC3L,SAAf,CAAyBuD,aAA1B,CAAlB;EACD;;EACD,aAAO,IAAP;;EACF,SAAKxK,eAAL;EACE;EACAgnB,MAAAA,WAAW,CAACpU,cAAD,CAAX;EACA,aAAO,IAAP;;EACF,SAAKrS,wBAAL;EAA+B;EAC7B;EACA;EACA,YAAMoQ,UAAS,GAAGiC,cAAc,CAACnP,IAAjC;;EACA,YAAIskC,iBAAuB,CAACp3B,UAAD,CAA3B,EAAwC;EACtCw+B,UAAAA,UAAgB,CAACv8B,cAAD,CAAhB;EACD;;EACD,eAAO,IAAP;EACD;;EACD,SAAKnS,qBAAL;EAA4B;EAC1B82B,QAAAA,kBAAkB,CAAC3kB,cAAD,CAAlB;EAEA,YAAMo6B,WAA2C,GAC/Cp6B,cAAc,CAACyW,aADjB;;EAGA,YAAI2jB,WAAW,KAAK,IAApB,EAA0B;EACxB;EACA;EACA,iBAAO,IAAP;EACD;;EAED,YAAI6C,iBAAiB,GAAG,CAACj9B,cAAc,CAACpM,KAAf,GAAuBxB,UAAxB,MAAwCR,OAAhE;EAEA,YAAMsrC,YAAY,GAAG9C,WAAW,CAACpqB,SAAjC;;EACA,YAAIktB,YAAY,KAAK,IAArB,EAA2B;EACzB;EACA,cAAI,CAACD,iBAAL,EAAwB;EACtB;EACA;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA,gBAAME,iBAAiB,GACrBC,wBAAwB,OACvBlpC,OAAO,KAAK,IAAZ,IAAoB,CAACA,OAAO,CAACN,KAAR,GAAgBxB,UAAjB,MAAiCR,OAD9B,CAD1B;;EAGA,gBAAI,CAACurC,iBAAL,EAAwB;EACtB,kBAAIjY,GAAG,GAAGllB,cAAc,CAACjL,KAAzB;;EACA,qBAAOmwB,GAAG,KAAK,IAAf,EAAqB;EACnB,oBAAMmY,SAAS,GAAGpY,kBAAkB,CAACC,GAAD,CAApC;;EACA,oBAAImY,SAAS,KAAK,IAAlB,EAAwB;EACtBJ,kBAAAA,iBAAiB,GAAG,IAApB;EACAj9B,kBAAAA,cAAc,CAACpM,KAAf,IAAwBxB,UAAxB;EACA8pC,kBAAAA,kBAAkB,CAAC9B,WAAD,EAAc,KAAd,CAAlB,CAHsB;EAMtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,sBAAMkD,aAAa,GAAGD,SAAS,CAACtmB,WAAhC;;EACA,sBAAIumB,aAAa,KAAK,IAAtB,EAA4B;EAC1Bt9B,oBAAAA,cAAc,CAAC+W,WAAf,GAA6BumB,aAA7B;EACAt9B,oBAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD,mBArBqB;EAwBtB;EACA;;;EACA,sBAAIqoC,WAAW,CAACnb,UAAZ,KAA2B,IAA/B,EAAqC;EACnCjf,oBAAAA,cAAc,CAACmf,WAAf,GAA6B,IAA7B;EACD;;EACDnf,kBAAAA,cAAc,CAACif,UAAf,GAA4Bmb,WAAW,CAACnb,UAAxC,CA7BsB;;EA+BtB8D,kBAAAA,gBAAgB,CAAC/iB,cAAD,EAAiB4U,WAAjB,CAAhB,CA/BsB;EAkCtB;;EACA6P,kBAAAA,mBAAmB,CACjBzkB,cADiB,EAEjBqkB,yBAAyB,CACvBJ,mBAAmB,CAAC/vB,OADG,EAEvB8vB,qBAFuB,CAFR,CAAnB;EAOA,yBAAOhkB,cAAc,CAACjL,KAAtB;EACD;;EACDmwB,gBAAAA,GAAG,GAAGA,GAAG,CAAClwB,OAAV;EACD;EACF;;EAED,gBAAIolC,WAAW,CAACF,IAAZ,KAAqB,IAArB,IAA6BhtB,GAAG,KAAKqwB,mBAAmB,EAA5D,EAAgE;EAC9D;EACA;EACA;EACAv9B,cAAAA,cAAc,CAACpM,KAAf,IAAwBxB,UAAxB;EACA6qC,cAAAA,iBAAiB,GAAG,IAApB;EAEAf,cAAAA,kBAAkB,CAAC9B,WAAD,EAAc,KAAd,CAAlB,CAP8D;EAU9D;EACA;EACA;EACA;EACA;EACA;EACA;;EACAp6B,cAAAA,cAAc,CAAC6G,KAAf,GAAuBT,aAAvB;;EACA,cAA4B;EAC1BquB,gBAAAA,eAAe,CAACruB,aAAD,CAAf;EACD;EACF;EACF,WAzFD,MAyFO;EACL81B,YAAAA,kBAAkB,CAAC9B,WAAD,EAAc,KAAd,CAAlB;EACD,WA7FwB;;EA+F1B,SA/FD,MA+FO;EACL;EACA,cAAI,CAAC6C,iBAAL,EAAwB;EACtB,gBAAMI,UAAS,GAAGpY,kBAAkB,CAACiY,YAAD,CAApC;;EACA,gBAAIG,UAAS,KAAK,IAAlB,EAAwB;EACtBr9B,cAAAA,cAAc,CAACpM,KAAf,IAAwBxB,UAAxB;EACA6qC,cAAAA,iBAAiB,GAAG,IAApB,CAFsB;EAKtB;;EACA,kBAAMK,cAAa,GAAGD,UAAS,CAACtmB,WAAhC;;EACA,kBAAIumB,cAAa,KAAK,IAAtB,EAA4B;EAC1Bt9B,gBAAAA,cAAc,CAAC+W,WAAf,GAA6BumB,cAA7B;EACAt9B,gBAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD;;EAEDmqC,cAAAA,kBAAkB,CAAC9B,WAAD,EAAc,IAAd,CAAlB,CAZsB;;EActB,kBACEA,WAAW,CAACF,IAAZ,KAAqB,IAArB,IACAE,WAAW,CAACV,QAAZ,KAAyB,QADzB,IAEA,CAACwD,YAAY,CAACxpC,SAFd,IAGA,CAACkyB,cAAc,EAJjB;EAAA,gBAKE;EACA;EACA;EACA;EACA,sBAAM3G,UAAU,GAAIjf,cAAc,CAACif,UAAf,GAClBmb,WAAW,CAACnb,UADd,CAJA;;EAOA,sBAAIA,UAAU,KAAK,IAAnB,EAAyB;EACvBA,oBAAAA,UAAU,CAACC,UAAX,GAAwB,IAAxB;EACD,mBATD;;;EAWA,yBAAO,IAAP;EACD;EACF,aAhCD,MAgCO;EAEL;EACA;EACAhS,YAAAA,GAAG,KAAK,CAAR,GAAYktB,WAAW,CAACC,kBAAxB,GACEkD,mBAAmB,EADrB,IAEA3oB,WAAW,KAAKnO,aANX,EAOL;EACA;EACA;EACA;EACAzG,cAAAA,cAAc,CAACpM,KAAf,IAAwBxB,UAAxB;EACA6qC,cAAAA,iBAAiB,GAAG,IAApB;EAEAf,cAAAA,kBAAkB,CAAC9B,WAAD,EAAc,KAAd,CAAlB,CAPA;EAUA;EACA;EACA;EACA;EACA;EACA;EACA;;EACAp6B,cAAAA,cAAc,CAAC6G,KAAf,GAAuBT,aAAvB;;EACA,cAA4B;EAC1BquB,gBAAAA,eAAe,CAACruB,aAAD,CAAf;EACD;EACF;EACF;;EACD,cAAIg0B,WAAW,CAACH,WAAhB,EAA6B;EAC3B;EACA;EACA;EACA;EACA;EACAiD,YAAAA,YAAY,CAACloC,OAAb,GAAuBgL,cAAc,CAACjL,KAAtC;EACAiL,YAAAA,cAAc,CAACjL,KAAf,GAAuBmoC,YAAvB;EACD,WARD,MAQO;EACL,gBAAMM,eAAe,GAAGpD,WAAW,CAACpb,IAApC;;EACA,gBAAIwe,eAAe,KAAK,IAAxB,EAA8B;EAC5BA,cAAAA,eAAe,CAACxoC,OAAhB,GAA0BkoC,YAA1B;EACD,aAFD,MAEO;EACLl9B,cAAAA,cAAc,CAACjL,KAAf,GAAuBmoC,YAAvB;EACD;;EACD9C,YAAAA,WAAW,CAACpb,IAAZ,GAAmBke,YAAnB;EACD;EACF;;EAED,YAAI9C,WAAW,CAACF,IAAZ,KAAqB,IAAzB,EAA+B;EAC7B;EACA;EACA,cAAMzkB,IAAI,GAAG2kB,WAAW,CAACF,IAAzB;EACAE,UAAAA,WAAW,CAACpqB,SAAZ,GAAwByF,IAAxB;EACA2kB,UAAAA,WAAW,CAACF,IAAZ,GAAmBzkB,IAAI,CAACzgB,OAAxB;EACAolC,UAAAA,WAAW,CAACnb,UAAZ,GAAyBjf,cAAc,CAACif,UAAxC;EACAmb,UAAAA,WAAW,CAACC,kBAAZ,GAAiCntB,GAAG,EAApC;EACAuI,UAAAA,IAAI,CAACzgB,OAAL,GAAe,IAAf,CAR6B;EAW7B;EACA;;EACA,cAAIsiC,eAAe,GAAGrT,mBAAmB,CAAC/vB,OAA1C;;EACA,cAAI+oC,iBAAJ,EAAuB;EACrB3F,YAAAA,eAAe,GAAGjT,yBAAyB,CACzCiT,eADyC,EAEzCtT,qBAFyC,CAA3C;EAID,WALD,MAKO;EACLsT,YAAAA,eAAe,GAAGlT,gCAAgC,CAACkT,eAAD,CAAlD;EACD;;EACD7S,UAAAA,mBAAmB,CAACzkB,cAAD,EAAiBs3B,eAAjB,CAAnB,CAtB6B;;EAwB7B,iBAAO7hB,IAAP;EACD;;EACD,eAAO,IAAP;EACD;;EACD,SAAK3nB,oBAAL;EAA2B;AACzB;EAgDA;EACD;;EACD,SAAKC,cAAL;EAAqB;AACnB;EAmBA;EACD;;EACD,SAAKC,KAAL;AACE;EAGA;;EACF,SAAKC,kBAAL;EACA,SAAKC,qBAAL;EAA4B;EAC1BuvC,QAAAA,cAAc,CAACz9B,cAAD,CAAd;;EACA,YAAI9L,OAAO,KAAK,IAAhB,EAAsB;EACpB,cAAMyjB,UAAgC,GAAG3X,cAAc,CAACyW,aAAxD;EACA,cAAMgB,UAAgC,GAAGvjB,OAAO,CAACuiB,aAAjD;EAEA,cAAMinB,YAAY,GAAGjmB,UAAS,KAAK,IAAnC;EACA,cAAMkmB,YAAY,GAAGhmB,UAAS,KAAK,IAAnC;;EACA,cACE+lB,YAAY,KAAKC,YAAjB,IACArlC,QAAQ,CAACoY,IAAT,KAAkB,+BAFpB,EAGE;EACA1Q,YAAAA,cAAc,CAACpM,KAAf,IAAwB7B,MAAxB;EACD;EACF;;EACD,eAAO,IAAP;EACD;EArnBH;;EAHc;EAAA;EAAA,kDA8nBZiO,cAAc,CAACjP,GA9nBH;EAAA;EAAA;EAgoBf;;EC1tCD,SAAS6sC,UAAT,CAAoB59B,cAApB,EAA2C4U,WAA3C,EAA+D;EAC7D,UAAQ5U,cAAc,CAACjP,GAAvB;EACE,SAAKpE,cAAL;EAAqB;EACnB,YAAMoR,SAAS,GAAGiC,cAAc,CAACnP,IAAjC;;EACA,YAAIskC,iBAAuB,CAACp3B,SAAD,CAA3B,EAAwC;EACtCw+B,UAAAA,UAAgB,CAACv8B,cAAD,CAAhB;EACD;;EACD,YAAMpM,KAAK,GAAGoM,cAAc,CAACpM,KAA7B;;EACA,YAAIA,KAAK,GAAGd,aAAZ,EAA2B;EACzBkN,UAAAA,cAAc,CAACpM,KAAf,GAAwBA,KAAK,GAAG,CAACd,aAAV,GAA2BV,UAAlD;;EACA,cACEY,CACA,CAACgN,cAAc,CAAC0Q,IAAf,GAAsBpC,WAAvB,MAAwCJ,MAF1C,EAGE;EACAokB,YAAAA,sBAAsB,CAACtyB,cAAD,CAAtB;EACD;;EACD,iBAAOA,cAAP;EACD;;EACD,eAAO,IAAP;EACD;;EACD,SAAKnT,QAAL;EAAe;EACb42B,QAAAA,gBAAgB,CAACzjB,cAAD,CAAhB;EACAw8B,QAAAA,wBAA8B,CAACx8B,cAAD,CAA9B;EACAy8B,QAAAA,2BAAwC;EACxC,YAAM7oC,MAAK,GAAGoM,cAAc,CAACpM,KAA7B;;EAJa,cAMX,CAACA,MAAK,GAAGxB,UAAT,MAAyBR,OANd;EAAA;EAAA;EAAA;EAAA;;EAUboO,QAAAA,cAAc,CAACpM,KAAf,GAAwBA,MAAK,GAAG,CAACd,aAAV,GAA2BV,UAAlD;EACA,eAAO4N,cAAP;EACD;;EACD,SAAKjT,aAAL;EAAoB;EAClB;EACA62B,QAAAA,cAAc,CAAC5jB,cAAD,CAAd;EACA,eAAO,IAAP;EACD;;EACD,SAAKzS,iBAAL;EAAwB;EACtBo3B,QAAAA,kBAAkB,CAAC3kB,cAAD,CAAlB;;EAaA,YAAMpM,OAAK,GAAGoM,cAAc,CAACpM,KAA7B;;EACA,YAAIA,OAAK,GAAGd,aAAZ,EAA2B;EACzBkN,UAAAA,cAAc,CAACpM,KAAf,GAAwBA,OAAK,GAAG,CAACd,aAAV,GAA2BV,UAAlD,CADyB;;EAGzB,cACEY,CACA,CAACgN,cAAc,CAAC0Q,IAAf,GAAsBpC,WAAvB,MAAwCJ,MAF1C,EAGE;EACAokB,YAAAA,sBAAsB,CAACtyB,cAAD,CAAtB;EACD;;EACD,iBAAOA,cAAP;EACD;;EACD,eAAO,IAAP;EACD;;EACD,SAAKnS,qBAAL;EAA4B;EAC1B82B,QAAAA,kBAAkB,CAAC3kB,cAAD,CAAlB,CAD0B;EAG1B;;EACA,eAAO,IAAP;EACD;;EACD,SAAKlT,UAAL;EACE22B,MAAAA,gBAAgB,CAACzjB,cAAD,CAAhB;EACA,aAAO,IAAP;;EACF,SAAK5S,eAAL;EACEgnB,MAAAA,WAAW,CAACpU,cAAD,CAAX;EACA,aAAO,IAAP;;EACF,SAAK/R,kBAAL;EACA,SAAKC,qBAAL;EACEuvC,MAAAA,cAAc,CAACz9B,cAAD,CAAd;EACA,aAAO,IAAP;;EACF;EACE,aAAO,IAAP;EAlFJ;EAoFD;;EAED,SAAS69B,qBAAT,CAA+BC,eAA/B,EAAuD;EACrD,UAAQA,eAAe,CAAC/sC,GAAxB;EACE,SAAKpE,cAAL;EAAqB;EACnB,YAAMgU,iBAAiB,GAAGm9B,eAAe,CAACjtC,IAAhB,CAAqB8P,iBAA/C;;EACA,YAAIA,iBAAiB,KAAK,IAAtB,IAA8BA,iBAAiB,KAAK5E,SAAxD,EAAmE;EACjEwgC,UAAAA,UAAgB,CAACuB,eAAD,CAAhB;EACD;;EACD;EACD;;EACD,SAAKjxC,QAAL;EAAe;EACb42B,QAAAA,gBAAgB,CAACqa,eAAD,CAAhB;EACAtB,QAAAA,wBAA8B,CAACsB,eAAD,CAA9B;EACArB,QAAAA,2BAAwC;EACxC;EACD;;EACD,SAAK1vC,aAAL;EAAoB;EAClB62B,QAAAA,cAAc,CAACka,eAAD,CAAd;EACA;EACD;;EACD,SAAKhxC,UAAL;EACE22B,MAAAA,gBAAgB,CAACqa,eAAD,CAAhB;EACA;;EACF,SAAKvwC,iBAAL;EACEo3B,MAAAA,kBAAkB,CAACmZ,eAAD,CAAlB;EACA;;EACF,SAAKjwC,qBAAL;EACE82B,MAAAA,kBAAkB,CAACmZ,eAAD,CAAlB;EACA;;EACF,SAAK1wC,eAAL;EACEgnB,MAAAA,WAAW,CAAC0pB,eAAD,CAAX;EACA;;EACF,SAAK7vC,kBAAL;EACA,SAAKC,qBAAL;EACEuvC,MAAAA,cAAc,CAACK,eAAD,CAAd;EACA;EAjCJ;EAqCD;;ECxJM,SAASC,mBAAT,CACLxvC,KADK,EAELsN,MAFK,EAGa;EAClB;EACA;EACA,SAAO;EACLtN,IAAAA,KAAK,EAALA,KADK;EAELsN,IAAAA,MAAM,EAANA,MAFK;EAGLjQ,IAAAA,KAAK,EAAE4jB,2BAA2B,CAAC3T,MAAD;EAH7B,GAAP;EAKD;;EClBD;EACA;EACA;AAEA,EAAO,SAASmiC,eAAT,CACLC,QADK,EAELC,SAFK,EAGI;EACT,SAAO,IAAP;EACD;;ECLM,SAASC,gBAAT,CACLF,QADK,EAELC,SAFK,EAGC;EACN,MAAI;EACF,QAAME,QAAQ,GAAGJ,eAAe,CAACC,QAAD,EAAWC,SAAX,CAAhC,CADE;EAIF;;EACA,QAAIE,QAAQ,KAAK,KAAjB,EAAwB;EACtB;EACD;;EAED,QAAM3yC,KAAK,GAAIyyC,SAAS,CAAC3vC,KAAzB;;EACA,QAAIqU,IAAJ,EAAa;EACX,UAAM/G,MAAM,GAAGqiC,SAAS,CAACriC,MAAzB;EACA,UAAMjQ,KAAK,GAAGsyC,SAAS,CAACtyC,KAAxB;EACA,UAAMyyC,cAAc,GAAGzyC,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB,EAAhD,CAHW;EAKX;EACA;;EACA,UAAIH,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAAC6yC,gBAA3B,EAA6C;EAC3C,YAAIL,QAAQ,CAACltC,GAAT,KAAiBpE,cAArB,EAAqC;EACnC;EACA;EACA;EACA;EACD,SAN0C;EAQ3C;EACA;EACA;;;EACAJ,QAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBd,KAAjB,EAX2C;EAY3C;EACA;EACD;;EAED,UAAMmT,aAAa,GAAG/C,MAAM,GAAG/K,gBAAgB,CAAC+K,MAAM,CAAChL,IAAR,CAAnB,GAAmC,IAA/D;EACA,UAAM0tC,oBAAoB,GAAG3/B,aAAa,yCACFA,aADE,oBAEtC,2DAFJ;EAIA,UAAI4/B,oBAAJ;EACA,UAAMC,iBAAiB,GAAG3tC,gBAAgB,CAACmtC,QAAQ,CAACptC,IAAV,CAA1C;;EACA,UAAI4tC,iBAAJ,EAAuB;EACrBD,QAAAA,oBAAoB,GAClB,8GAC0CC,iBAD1C,OADF;EAGD,OAJD,MAIO;EACLD,QAAAA,oBAAoB,GAClB,2FACA,uFAFF;EAGD;;EACD,UAAME,eAAe,GAChBH,oBAAH,UAA4BF,cAA5B,kBACGG,oBADH,CADF,CAvCW;EA4CX;EACA;EACA;;EACAjyC,MAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBmyC,eAAjB,EA/CW;EAgDZ,KAhDD,MAgDO;EACL;EACA;EACA;EACAnyC,MAAAA,OAAO,CAAC,OAAD,CAAP,CAAiBd,KAAjB,EAJK;EAKN;EACF,GAhED,CAgEE,OAAOkzC,CAAP,EAAU;EACV;EACA;EACA;EACA;EACAhmC,IAAAA,UAAU,CAAC,YAAM;EACf,YAAMgmC,CAAN;EACD,KAFS,CAAV;EAGD;EACF;;ECtBD,IAAMtiC,iBAAe,GAAG,OAAOrG,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0CsG,GAAlE;;EAEA,SAASsiC,qBAAT,CACErrC,KADF,EAEE2qC,SAFF,EAGEn1B,IAHF,EAIiB;EACf,MAAMsM,MAAM,GAAGC,YAAY,CAAC5O,WAAD,EAAcqC,IAAd,CAA3B,CADe;;EAGfsM,EAAAA,MAAM,CAACtkB,GAAP,GAAaolB,aAAb,CAHe;EAKf;;EACAd,EAAAA,MAAM,CAAC9jB,OAAP,GAAiB;EAAC6M,IAAAA,OAAO,EAAE;EAAV,GAAjB;EACA,MAAM3S,KAAK,GAAGyyC,SAAS,CAAC3vC,KAAxB;;EACA8mB,EAAAA,MAAM,CAAC7H,QAAP,GAAkB,YAAM;EACtBqxB,IAAAA,eAAe,CAACpzC,KAAD,CAAf;EACA0yC,IAAAA,gBAAgB,CAAC5qC,KAAD,EAAQ2qC,SAAR,CAAhB;EACD,GAHD;;EAIA,SAAO7oB,MAAP;EACD;;EAED,SAASypB,sBAAT,CACEvrC,KADF,EAEE2qC,SAFF,EAGEn1B,IAHF,EAIiB;EACf,MAAMsM,MAAM,GAAGC,YAAY,CAAC5O,WAAD,EAAcqC,IAAd,CAA3B;EACAsM,EAAAA,MAAM,CAACtkB,GAAP,GAAaolB,aAAb;EACA,MAAM2F,wBAAwB,GAAGvoB,KAAK,CAAC1C,IAAN,CAAWirB,wBAA5C;;EACA,MAAI,OAAOA,wBAAP,KAAoC,UAAxC,EAAoD;EAClD,QAAMrwB,OAAK,GAAGyyC,SAAS,CAAC3vC,KAAxB;;EACA8mB,IAAAA,MAAM,CAAC9jB,OAAP,GAAiB,YAAM;EACrB4sC,MAAAA,gBAAgB,CAAC5qC,KAAD,EAAQ2qC,SAAR,CAAhB;EACA,aAAOpiB,wBAAwB,CAACrwB,OAAD,CAA/B;EACD,KAHD;EAID;;EAED,MAAM2K,IAAI,GAAG7C,KAAK,CAACc,SAAnB;;EACA,MAAI+B,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAI,CAAC2oC,iBAAZ,KAAkC,UAAvD,EAAmE;EACjE1pB,IAAAA,MAAM,CAAC7H,QAAP,GAAkB,SAASA,QAAT,GAAoB;EACpC,MAAa;EACXwxB,QAAAA,sCAAsC,CAACzrC,KAAD,CAAtC;EACD;;EACD,UAAI,OAAOuoB,wBAAP,KAAoC,UAAxC,EAAoD;EAClD;EACA;EACA;EACA;EACA;EACAmjB,QAAAA,+BAA+B,CAAC,IAAD,CAA/B,CANkD;;EASlDd,QAAAA,gBAAgB,CAAC5qC,KAAD,EAAQ2qC,SAAR,CAAhB;EACD;;EACD,UAAMzyC,OAAK,GAAGyyC,SAAS,CAAC3vC,KAAxB;EACA,UAAM3C,KAAK,GAAGsyC,SAAS,CAACtyC,KAAxB;EACA,WAAKmzC,iBAAL,CAAuBtzC,OAAvB,EAA8B;EAC5B4yC,QAAAA,cAAc,EAAEzyC,KAAK,KAAK,IAAV,GAAiBA,KAAjB,GAAyB;EADb,OAA9B;;EAGA,MAAa;EACX,YAAI,OAAOkwB,wBAAP,KAAoC,UAAxC,EAAoD;EAClD;EACA;EACA;EACA,cAAI,CAACtR,gBAAgB,CAACjX,KAAK,CAACsT,KAAP,EAAepB,QAAf,CAArB,EAAsD;EACpD,kBACE,uEACE,mFAFJ,EAGE3U,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,SAHlC;EAKD;EACF;EACF;EACF,KAlCD;EAmCD,GApCD,MAoCO,AAAa;EAClBwkB,IAAAA,MAAM,CAAC7H,QAAP,GAAkB,YAAM;EACtBwxB,MAAAA,sCAAsC,CAACzrC,KAAD,CAAtC;EACD,KAFD;EAGD;;EACD,SAAO8hB,MAAP;EACD;;EAED,SAAS6pB,kBAAT,CAA4Bx8B,IAA5B,EAA6Cy8B,QAA7C,EAAiEt4B,KAAjE,EAA+E;EAC7E;EACA;EACA;EACA,MAAIu4B,SAAS,GAAG18B,IAAI,CAAC08B,SAArB;EACA,MAAIC,SAAJ;;EACA,MAAID,SAAS,KAAK,IAAlB,EAAwB;EACtBA,IAAAA,SAAS,GAAG18B,IAAI,CAAC08B,SAAL,GAAiB,IAAI/iC,iBAAJ,EAA7B;EACAgjC,IAAAA,SAAS,GAAG,IAAI9tB,GAAJ,EAAZ;EACA6tB,IAAAA,SAAS,CAAC9wC,GAAV,CAAc6wC,QAAd,EAAwBE,SAAxB;EACD,GAJD,MAIO;EACLA,IAAAA,SAAS,GAAGD,SAAS,CAACjxC,GAAV,CAAcgxC,QAAd,CAAZ;;EACA,QAAIE,SAAS,KAAKtjC,SAAlB,EAA6B;EAC3BsjC,MAAAA,SAAS,GAAG,IAAI9tB,GAAJ,EAAZ;EACA6tB,MAAAA,SAAS,CAAC9wC,GAAV,CAAc6wC,QAAd,EAAwBE,SAAxB;EACD;EACF;;EACD,MAAI,CAACA,SAAS,CAACxgC,GAAV,CAAcgI,KAAd,CAAL,EAA2B;EACzB;EACAw4B,IAAAA,SAAS,CAACrtB,GAAV,CAAcnL,KAAd;EACA,QAAMy4B,IAAI,GAAGC,iBAAiB,CAACzgC,IAAlB,CAAuB,IAAvB,EAA6B4D,IAA7B,EAAmCy8B,QAAnC,EAA6Ct4B,KAA7C,CAAb;EACAs4B,IAAAA,QAAQ,CAACK,IAAT,CAAcF,IAAd,EAAoBA,IAApB;EACD;EACF;;EAED,SAASG,cAAT,CACE/8B,IADF,EAEEsb,WAFF,EAGE0hB,WAHF,EAIEnxC,KAJF,EAKEoxC,eALF,EAME;EACA;EACAD,EAAAA,WAAW,CAAC9rC,KAAZ,IAAqBf,UAArB,CAFA;;EAIA6sC,EAAAA,WAAW,CAACvgB,WAAZ,GAA0BugB,WAAW,CAACzgB,UAAZ,GAAyB,IAAnD;;EAEA,MACE1wB,KAAK,KAAK,IAAV,IACA,OAAOA,KAAP,KAAiB,QADjB,IAEA,OAAOA,KAAK,CAACixC,IAAb,KAAsB,UAHxB,EAIE;EACA;EACA,QAAML,QAAkB,GAAI5wC,KAA5B;;EAeA,QAAI,CAACmxC,WAAW,CAAChvB,IAAZ,GAAmBtC,YAApB,MAAsCF,MAA1C,EAAkD;EAChD;EACA;EACA,UAAM0xB,aAAa,GAAGF,WAAW,CAAChsC,SAAlC;;EACA,UAAIksC,aAAJ,EAAmB;EACjBF,QAAAA,WAAW,CAAC3oB,WAAZ,GAA0B6oB,aAAa,CAAC7oB,WAAxC;EACA2oB,QAAAA,WAAW,CAACjpB,aAAZ,GAA4BmpB,aAAa,CAACnpB,aAA1C;EACAipB,QAAAA,WAAW,CAAC74B,KAAZ,GAAoB+4B,aAAa,CAAC/4B,KAAlC;EACD,OAJD,MAIO;EACL64B,QAAAA,WAAW,CAAC3oB,WAAZ,GAA0B,IAA1B;EACA2oB,QAAAA,WAAW,CAACjpB,aAAZ,GAA4B,IAA5B;EACD;EACF;;EAED,QAAMopB,0BAA0B,GAAG3b,kBAAkB,CACnDD,mBAAmB,CAAC/vB,OAD+B,EAElD6vB,8BAFkD,CAArD,CA/BA;;EAqCA,QAAI/jB,eAAc,GAAGge,WAArB;;EACA,OAAG;EACD,UACEhe,eAAc,CAACjP,GAAf,KAAuBxD,iBAAvB,IACAq3B,qBAAqB,CAAC5kB,eAAD,EAAiB6/B,0BAAjB,CAFvB,EAGE;EACA;EAEA;EACA;EACA,YAAMC,SAAwB,GAAI9/B,eAAc,CAAC+W,WAAjD;;EACA,YAAI+oB,SAAS,KAAK,IAAlB,EAAwB;EACtB,cAAM/oB,WAAW,GAAI,IAAIxF,GAAJ,EAArB;EACAwF,UAAAA,WAAW,CAAC/E,GAAZ,CAAgBmtB,QAAhB;EACAn/B,UAAAA,eAAc,CAAC+W,WAAf,GAA6BA,WAA7B;EACD,SAJD,MAIO;EACL+oB,UAAAA,SAAS,CAAC9tB,GAAV,CAAcmtB,QAAd;EACD,SAZD;EAeA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,YAAI,CAACn/B,eAAc,CAAC0Q,IAAf,GAAsBtC,YAAvB,MAAyCF,MAA7C,EAAqD;EACnDlO,UAAAA,eAAc,CAACpM,KAAf,IAAwBxB,UAAxB;EACAstC,UAAAA,WAAW,CAAC9rC,KAAZ,IAAqBb,4BAArB,CAFmD;EAKnD;EACA;;EACA2sC,UAAAA,WAAW,CAAC9rC,KAAZ,IAAqB,EAAEjB,mBAAmB,GAAGE,UAAxB,CAArB;;EAEA,cAAI6sC,WAAW,CAAC3uC,GAAZ,KAAoBpE,cAAxB,EAAwC;EACtC,gBAAMozC,kBAAkB,GAAGL,WAAW,CAAChsC,SAAvC;;EACA,gBAAIqsC,kBAAkB,KAAK,IAA3B,EAAiC;EAC/B;EACA;EACA;EACAL,cAAAA,WAAW,CAAC3uC,GAAZ,GAAkBpD,wBAAlB;EACD,aALD,MAKO;EACL;EACA;EACA;EACA,kBAAM0nB,MAAM,GAAGC,YAAY,CAAC5O,WAAD,EAAcjB,QAAd,CAA3B;EACA4P,cAAAA,MAAM,CAACtkB,GAAP,GAAawkB,WAAb;EACAC,cAAAA,aAAa,CAACkqB,WAAD,EAAcrqB,MAAd,CAAb;EACD;EACF,WAxBkD;EA2BnD;;;EACAqqB,UAAAA,WAAW,CAAC74B,KAAZ,GAAoB8D,UAAU,CAAC+0B,WAAW,CAAC74B,KAAb,EAAoBpB,QAApB,CAA9B,CA5BmD;;EA+BnD;EACD,SAtDD;EAyDA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEAy5B,QAAAA,kBAAkB,CAACx8B,IAAD,EAAOy8B,QAAP,EAAiBQ,eAAjB,CAAlB;EAEA3/B,QAAAA,eAAc,CAACpM,KAAf,IAAwBd,aAAxB;EACAkN,QAAAA,eAAc,CAAC6G,KAAf,GAAuB84B,eAAvB;EAEA;EACD,OA5GA;EA8GD;;;EACA3/B,MAAAA,eAAc,GAAGA,eAAc,CAACnM,MAAhC;EACD,KAhHD,QAgHSmM,eAAc,KAAK,IAhH5B,EAtCA;EAwJA;;;EACAzR,IAAAA,KAAK,GAAG,IAAIyN,KAAJ,CACN,CAAClL,gBAAgB,CAAC4uC,WAAW,CAAC7uC,IAAb,CAAhB,IAAsC,mBAAvC,IACE,iEADF,GAEE,IAFF,GAGE,gEAHF,GAIE,wDALI,CAAR;EAOD,GA1KD;EA6KA;EACA;;;EACAmvC,EAAAA,cAAc;EAEdzxC,EAAAA,KAAK,GAAGwvC,mBAAmB,CAACxvC,KAAD,EAAQmxC,WAAR,CAA3B;EACA,MAAI1/B,cAAc,GAAGge,WAArB;;EACA,KAAG;EACD,YAAQhe,cAAc,CAACjP,GAAvB;EACE,WAAKlE,QAAL;EAAe;EACb,cAAMqxC,UAAS,GAAG3vC,KAAlB;EACAyR,UAAAA,cAAc,CAACpM,KAAf,IAAwBd,aAAxB;EACA,cAAMiW,IAAI,GAAGkB,iBAAiB,CAAC01B,eAAD,CAA9B;EACA3/B,UAAAA,cAAc,CAAC6G,KAAf,GAAuB8D,UAAU,CAAC3K,cAAc,CAAC6G,KAAhB,EAAuBkC,IAAvB,CAAjC;;EACA,cAAMsM,OAAM,GAAGupB,qBAAqB,CAAC5+B,cAAD,EAAiBk+B,UAAjB,EAA4Bn1B,IAA5B,CAApC;;EACAqO,UAAAA,qBAAqB,CAACpX,cAAD,EAAiBqV,OAAjB,CAArB;EACA;EACD;;EACD,WAAK1oB,cAAL;EACE;EACA,YAAMuxC,SAAS,GAAG3vC,KAAlB;EACA,YAAMqP,IAAI,GAAGoC,cAAc,CAACnP,IAA5B;EACA,YAAMuD,QAAQ,GAAG4L,cAAc,CAAC3L,SAAhC;;EACA,YACE,CAAC2L,cAAc,CAACpM,KAAf,GAAuBxB,UAAxB,MAAwCR,OAAxC,KACC,OAAOgM,IAAI,CAACke,wBAAZ,KAAyC,UAAzC,IACE1nB,QAAQ,KAAK,IAAb,IACC,OAAOA,QAAQ,CAAC2qC,iBAAhB,KAAsC,UADvC,IAEC,CAACkB,kCAAkC,CAAC7rC,QAAD,CAJvC,CADF,EAME;EACA4L,UAAAA,cAAc,CAACpM,KAAf,IAAwBd,aAAxB;;EACA,cAAMiW,KAAI,GAAGkB,iBAAiB,CAAC01B,eAAD,CAA9B;;EACA3/B,UAAAA,cAAc,CAAC6G,KAAf,GAAuB8D,UAAU,CAAC3K,cAAc,CAAC6G,KAAhB,EAAuBkC,KAAvB,CAAjC,CAHA;;EAKA,cAAMsM,QAAM,GAAGypB,sBAAsB,CACnC9+B,cADmC,EAEnCk+B,SAFmC,EAGnCn1B,KAHmC,CAArC;;EAKAqO,UAAAA,qBAAqB,CAACpX,cAAD,EAAiBqV,QAAjB,CAArB;EACA;EACD;;EACD;EAlCJ;;EAsCArV,IAAAA,cAAc,GAAGA,cAAc,CAACnM,MAAhC;EACD,GAxCD,QAwCSmM,cAAc,KAAK,IAxC5B;EAyCD;;ECzYD,SAASkgC,yBAAT,CACEvvC,IADF,EAEEwvC,IAFF,EAGElvC,OAHF,EAIEyD,CAJF,EAKEC,CALF,EAME6I,CANF,EAOE4iC,CAPF,EAQEzB,CARF,EASE0B,CATF,EAUE;EACA,MAAMC,QAAQ,GAAG3pC,KAAK,CAACvK,SAAN,CAAgB6hB,KAAhB,CAAsB3hB,IAAtB,CAA2B8jC,SAA3B,EAAsC,CAAtC,CAAjB;;EACA,MAAI;EACF+P,IAAAA,IAAI,CAAC9zC,KAAL,CAAW4E,OAAX,EAAoBqvC,QAApB;EACD,GAFD,CAEE,OAAO70C,KAAP,EAAc;EACd,SAAK80C,OAAL,CAAa90C,KAAb;EACD;EACF;;EAED,IAAI+0C,yBAAyB,GAAGN,yBAAhC;;AAEA,EAAa;EACX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA,MACE,OAAOO,MAAP,KAAkB,WAAlB,IACA,OAAOA,MAAM,CAACC,aAAd,KAAgC,UADhC,IAEA,OAAOC,QAAP,KAAoB,WAFpB,IAGA,OAAOA,QAAQ,CAACC,WAAhB,KAAgC,UAJlC,EAKE;EACA,QAAMC,QAAQ,GAAGF,QAAQ,CAACG,aAAT,CAAuB,OAAvB,CAAjB;;EAEAN,IAAAA,yBAAyB,GAAG,SAASO,wBAAT,CAS1BpwC,IAT0B,EAU1BwvC,IAV0B,EAW1BlvC,OAX0B,EAY1ByD,CAZ0B,EAa1BC,CAb0B,EAc1B6I,CAd0B,EAe1B4iC,CAf0B,EAgB1BzB,CAhB0B,EAiB1B0B,CAjB0B,EAkB1B;EACA;EACA;EACA;EACA;EAJA,YAME,OAAOM,QAAP,KAAoB,WANtB;EAAA;EAAA;EAAA;EAAA;;EAeA,UAAMK,GAAG,GAAGL,QAAQ,CAACC,WAAT,CAAqB,OAArB,CAAZ;EAEA,UAAIK,OAAO,GAAG,KAAd,CAjBA;EAmBA;EACA;EACA;EACA;EACA;;EACA,UAAIj+B,QAAQ,GAAG,IAAf,CAxBA;EA2BA;EACA;;EACA,UAAMk+B,WAAW,GAAGT,MAAM,CAACU,KAA3B,CA7BA;EAgCA;;EACA,UAAMC,qBAAqB,GAAGnrC,MAAM,CAACorC,wBAAP,CAC5BZ,MAD4B,EAE5B,OAF4B,CAA9B;;EAKA,eAASa,oBAAT,GAAgC;EAC9B;EACA;EACA;EACA;EACAT,QAAAA,QAAQ,CAACU,mBAAT,CAA6BC,OAA7B,EAAsC/oB,YAAtC,EAAoD,KAApD,EAL8B;EAQ9B;EACA;EACA;;EACA,YACE,OAAOgoB,MAAM,CAACU,KAAd,KAAwB,WAAxB,IACAV,MAAM,CAAC1hC,cAAP,CAAsB,OAAtB,CAFF,EAGE;EACA0hC,UAAAA,MAAM,CAACU,KAAP,GAAeD,WAAf;EACD;EACF,OAvDD;EA0DA;EACA;;;EACA,UAAMZ,QAAQ,GAAG3pC,KAAK,CAACvK,SAAN,CAAgB6hB,KAAhB,CAAsB3hB,IAAtB,CAA2B8jC,SAA3B,EAAsC,CAAtC,CAAjB;;EACA,eAAS3X,YAAT,GAAwB;EACtBwoB,QAAAA,OAAO,GAAG,IAAV;EACAK,QAAAA,oBAAoB;EACpBnB,QAAAA,IAAI,CAAC9zC,KAAL,CAAW4E,OAAX,EAAoBqvC,QAApB;EACAt9B,QAAAA,QAAQ,GAAG,KAAX;EACD,OAlED;EAqEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,UAAIvX,KAAJ,CA/EA;;EAiFA,UAAIg2C,WAAW,GAAG,KAAlB;EACA,UAAIC,kBAAkB,GAAG,KAAzB;;EAEA,eAASC,iBAAT,CAA2BR,KAA3B,EAAkC;EAChC11C,QAAAA,KAAK,GAAG01C,KAAK,CAAC11C,KAAd;EACAg2C,QAAAA,WAAW,GAAG,IAAd;;EACA,YAAIh2C,KAAK,KAAK,IAAV,IAAkB01C,KAAK,CAACS,KAAN,KAAgB,CAAlC,IAAuCT,KAAK,CAACU,MAAN,KAAiB,CAA5D,EAA+D;EAC7DH,UAAAA,kBAAkB,GAAG,IAArB;EACD;;EACD,YAAIP,KAAK,CAACW,gBAAV,EAA4B;EAC1B;EACA;EACA;EACA,cAAIr2C,KAAK,IAAI,IAAT,IAAiB,OAAOA,KAAP,KAAiB,QAAtC,EAAgD;EAC9C,gBAAI;EACFA,cAAAA,KAAK,CAAC6yC,gBAAN,GAAyB,IAAzB;EACD,aAFD,CAEE,OAAOyD,KAAP,EAAc;EAEf;EACF;EACF;EACF,OAtGD;;;EAyGA,UAAMP,OAAO,eAAY7wC,IAAI,GAAGA,IAAH,GAAU,uBAA1B,CAAb,CAzGA;;EA4GA8vC,MAAAA,MAAM,CAACuB,gBAAP,CAAwB,OAAxB,EAAiCL,iBAAjC;EACAd,MAAAA,QAAQ,CAACmB,gBAAT,CAA0BR,OAA1B,EAAmC/oB,YAAnC,EAAiD,KAAjD,EA7GA;EAgHA;;EACAuoB,MAAAA,GAAG,CAACiB,SAAJ,CAAcT,OAAd,EAAuB,KAAvB,EAA8B,KAA9B;EACAX,MAAAA,QAAQ,CAACH,aAAT,CAAuBM,GAAvB;;EAEA,UAAII,qBAAJ,EAA2B;EACzBnrC,QAAAA,MAAM,CAAC+G,cAAP,CAAsByjC,MAAtB,EAA8B,OAA9B,EAAuCW,qBAAvC;EACD;;EAED,UAAIH,OAAO,IAAIj+B,QAAf,EAAyB;EACvB,YAAI,CAACy+B,WAAL,EAAkB;EAChB;EACAh2C,UAAAA,KAAK,GAAG,IAAIuQ,KAAJ,CACN,kEACE,0DADF,GAEE,2DAFF,GAGE,4DAHF,GAIE,+DAJF,GAKE,6DALF,GAME,gEANF,GAOE,qDARI,CAAR;EAUD,SAZD,MAYO,IAAI0lC,kBAAJ,EAAwB;EAC7Bj2C,UAAAA,KAAK,GAAG,IAAIuQ,KAAJ,CACN,mEACE,0CADF,GAEE,sEAHI,CAAR;EAKD;;EACD,aAAKukC,OAAL,CAAa90C,KAAb;EACD,OA7ID;;;EAgJAg1C,MAAAA,MAAM,CAACc,mBAAP,CAA2B,OAA3B,EAAoCI,iBAApC;;EAEA,UAAI,CAACV,OAAL,EAAc;EACZ;EACA;EACA;EACA;EACAK,QAAAA,oBAAoB;EACpB,eAAOpB,yBAAyB,CAAC7zC,KAA1B,CAAgC,IAAhC,EAAsC+jC,SAAtC,CAAP;EACD;EACF,KA5KD;EA6KD;EACF;;AAED,oCAAeoQ,yBAAf;;ECjOA,IAAI0B,QAAiB,GAAG,KAAxB;EACA,IAAIC,WAAkB,GAAG,IAAzB;EAMA,IAAMC,QAAQ,GAAG;EACf7B,EAAAA,OADe,YACP90C,KADO,EACO;EACpBy2C,IAAAA,QAAQ,GAAG,IAAX;EACAC,IAAAA,WAAW,GAAG12C,KAAd;EACD;EAJc,CAAjB;EAOA;;;;;;;;;;;;;;AAaA,EAAO,SAAS42C,qBAAT,CACL1xC,IADK,EAELwvC,IAFK,EAGLlvC,OAHK,EAILyD,CAJK,EAKLC,CALK,EAML6I,CANK,EAOL4iC,CAPK,EAQLzB,CARK,EASL0B,CATK,EAUC;EACN6B,EAAAA,QAAQ,GAAG,KAAX;EACAC,EAAAA,WAAW,GAAG,IAAd;EACA3B,EAAAA,2BAAyB,CAACn0C,KAA1B,CAAgC+1C,QAAhC,EAA0ChS,SAA1C;EACD;AAED,EAoDO,SAASkS,cAAT,GAA0B;EAC/B,SAAOJ,QAAP;EACD;AAED,EAAO,SAASK,gBAAT,GAA4B;EACjC,MAAIL,QAAJ,EAAc;EACZ,QAAMz2C,KAAK,GAAG02C,WAAd;EACAD,IAAAA,QAAQ,GAAG,KAAX;EACAC,IAAAA,WAAW,GAAG,IAAd;EACA,WAAO12C,KAAP;EACD,GALD,MAKO;EAAA;EAAA;EAAA;EAAA;EAAA;EAMN;EACF;;ECGD,IAAI+2C,yCAA4D,GAAG,IAAnE;;AACA,EAAa;EACXA,EAAAA,yCAAyC,GAAG,IAAIjxB,GAAJ,EAA5C;EACD;;EAED,IAAMkxB,eAAe,GAAG,OAAOC,OAAP,KAAmB,UAAnB,GAAgCA,OAAhC,GAA0CnxB,GAAlE;;EAEA,IAAMoxB,iCAAiC,GAAG,UAASzuC,OAAT,EAAkBE,QAAlB,EAA4B;EACpEA,EAAAA,QAAQ,CAACoC,KAAT,GAAiBtC,OAAO,CAAC8oB,aAAzB;EACA5oB,EAAAA,QAAQ,CAAC8mB,KAAT,GAAiBhnB,OAAO,CAACuiB,aAAzB;;EACA,EAWO;EACLriB,IAAAA,QAAQ,CAACwuC,oBAAT;EACD;EACF,CAjBD;;;EAoBA,SAASC,8BAAT,CAAwC3uC,OAAxC,EAAwDE,QAAxD,EAAuE;EACrE,EAAa;EACXiuC,IAAAA,qBAAqB,CACnB,IADmB,EAEnBM,iCAFmB,EAGnB,IAHmB,EAInBzuC,OAJmB,EAKnBE,QALmB,CAArB;;EAOA,QAAIkuC,cAAc,EAAlB,EAAsB;EACpB,UAAMQ,YAAY,GAAGP,gBAAgB,EAArC;EACAQ,MAAAA,uBAAuB,CAAC7uC,OAAD,EAAU4uC,YAAV,CAAvB;EACD;EACF,GAZD;EAmBD;;EAED,SAASE,eAAT,CAAyB9uC,OAAzB,EAAyC;EACvC,MAAMmqB,GAAG,GAAGnqB,OAAO,CAACmqB,GAApB;;EACA,MAAIA,GAAG,KAAK,IAAZ,EAAkB;EAChB,QAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;EAC7B,MAAa;EACXgkB,QAAAA,qBAAqB,CAAC,IAAD,EAAOhkB,GAAP,EAAY,IAAZ,EAAkB,IAAlB,CAArB;;EACA,YAAIikB,cAAc,EAAlB,EAAsB;EACpB,cAAMW,QAAQ,GAAGV,gBAAgB,EAAjC;EACAQ,UAAAA,uBAAuB,CAAC7uC,OAAD,EAAU+uC,QAAV,CAAvB;EACD;EACF,OAND;EAaD,KAdD,MAcO;EACL5kB,MAAAA,GAAG,CAACnqB,OAAJ,GAAc,IAAd;EACD;EACF;EACF;;EAED,SAASgvC,iBAAT,CAA2BhvC,OAA3B,EAA2C44B,OAA3C,EAAgE;EAC9D,EAAa;EACXuV,IAAAA,qBAAqB,CAAC,IAAD,EAAOvV,OAAP,EAAgB,IAAhB,CAArB;;EACA,QAAIwV,cAAc,EAAlB,EAAsB;EACpB,UAAM72C,KAAK,GAAG82C,gBAAgB,EAA9B;EACAQ,MAAAA,uBAAuB,CAAC7uC,OAAD,EAAUzI,KAAV,CAAvB;EACD;EACF,GAND;EAaD;;EAED,SAAS03C,8BAAT,CACEjvC,OADF,EAEE2kB,YAFF,EAGQ;EACN,UAAQA,YAAY,CAAC9nB,GAArB;EACE,SAAKrE,iBAAL;EACA,SAAKW,UAAL;EACA,SAAKI,mBAAL;EACA,SAAKO,KAAL;EAAY;EACV;EACD;;EACD,SAAKrB,cAAL;EAAqB;EACnB,YAAIksB,YAAY,CAACjlB,KAAb,GAAqBtB,QAAzB,EAAmC;EACjC,cAAI4B,OAAO,KAAK,IAAhB,EAAsB;EACpB,gBAAM8/B,SAAS,GAAG9/B,OAAO,CAAC8oB,aAA1B;EACA,gBAAMvF,SAAS,GAAGvjB,OAAO,CAACuiB,aAA1B;EACA,gBAAMriB,QAAQ,GAAGykB,YAAY,CAACxkB,SAA9B,CAHoB;EAKpB;EACA;;EACA,YAAa;EACX,kBACEwkB,YAAY,CAAChoB,IAAb,KAAsBgoB,YAAY,CAACyE,WAAnC,IACA,CAACuV,4BAFH,EAGE;EACA,oBAAIz+B,QAAQ,CAACoC,KAAT,KAAmBqiB,YAAY,CAACmE,aAApC,EAAmD;EACjD,wBACE,sDACE,2BADF,GAEE,6DAFF,GAGE,8CAHF,GAIE,uBALJ,EAMElsB,gBAAgB,CAAC+nB,YAAY,CAAChoB,IAAd,CAAhB,IAAuC,UANzC;EAQD;;EACD,oBAAIuD,QAAQ,CAAC8mB,KAAT,KAAmBrC,YAAY,CAACpC,aAApC,EAAmD;EACjD,wBACE,sDACE,2BADF,GAEE,6DAFF,GAGE,8CAHF,GAIE,uBALJ,EAME3lB,gBAAgB,CAAC+nB,YAAY,CAAChoB,IAAd,CAAhB,IAAuC,UANzC;EAQD;EACF;EACF;;EACD,gBAAMs6B,QAAQ,GAAG/2B,QAAQ,CAACwnB,uBAAT,CACf/C,YAAY,CAACyE,WAAb,KAA6BzE,YAAY,CAAChoB,IAA1C,GACImjC,SADJ,GAEI/gB,mBAAmB,CAAC4F,YAAY,CAAChoB,IAAd,EAAoBmjC,SAApB,CAHR,EAIfvc,SAJe,CAAjB;;EAMA,YAAa;EACX,kBAAM2rB,UAAU,GAAKZ,yCAArB;;EACA,kBAAIrX,QAAQ,KAAKpvB,SAAb,IAA0B,CAACqnC,UAAU,CAACvkC,GAAX,CAAega,YAAY,CAAChoB,IAA5B,CAA/B,EAAkE;EAChEuyC,gBAAAA,UAAU,CAACpxB,GAAX,CAAe6G,YAAY,CAAChoB,IAA5B;;EACA,sBACE,8DACE,gDAFJ,EAGEC,gBAAgB,CAAC+nB,YAAY,CAAChoB,IAAd,CAHlB;EAKD;EACF;;EACDuD,YAAAA,QAAQ,CAACivC,mCAAT,GAA+ClY,QAA/C;EACD;EACF;;EACD;EACD;;EACD,SAAKt+B,QAAL;EAAe;EACb,QAAsB;EACpB,cAAIgsB,YAAY,CAACjlB,KAAb,GAAqBtB,QAAzB,EAAmC;EACjC,gBAAMoQ,IAAI,GAAGmW,YAAY,CAACxkB,SAA1B;EACAiD,YAAAA,cAAc,CAACoL,IAAI,CAAC9K,aAAN,CAAd;EACD;EACF;;EACD;EACD;;EACD,SAAK7K,aAAL;EACA,SAAKC,QAAL;EACA,SAAKF,UAAL;EACA,SAAKa,wBAAL;EACE;EACA;EA/EJ;;EADM;EAAA;EAAA;EAAA;EAAA;EAuFP;;EAED,SAAS21C,2BAAT,CAAqCvyC,GAArC,EAAkD8nB,YAAlD,EAAuE;EACrE,MAAM9B,WAAgD,GAAI8B,YAAY,CAAC9B,WAAvE;EACA,MAAMkI,UAAU,GAAGlI,WAAW,KAAK,IAAhB,GAAuBA,WAAW,CAACkI,UAAnC,GAAgD,IAAnE;;EACA,MAAIA,UAAU,KAAK,IAAnB,EAAyB;EACvB,QAAME,WAAW,GAAGF,UAAU,CAACxJ,IAA/B;EACA,QAAIsD,MAAM,GAAGoG,WAAb;;EACA,OAAG;EACD,UAAI,CAACpG,MAAM,CAAChoB,GAAP,GAAaA,GAAd,MAAuBA,GAA3B,EAAgC;EAC9B;EACA,YAAM+7B,OAAO,GAAG/T,MAAM,CAAC+T,OAAvB;EACA/T,QAAAA,MAAM,CAAC+T,OAAP,GAAiB/wB,SAAjB;;EACA,YAAI+wB,OAAO,KAAK/wB,SAAhB,EAA2B;EACzB+wB,UAAAA,OAAO;EACR;EACF;;EACD/T,MAAAA,MAAM,GAAGA,MAAM,CAACtD,IAAhB;EACD,KAVD,QAUSsD,MAAM,KAAKoG,WAVpB;EAWD;EACF;;EAED,SAASokB,yBAAT,CAAmCxyC,GAAnC,EAAgD8nB,YAAhD,EAAqE;EACnE,MAAM9B,WAAgD,GAAI8B,YAAY,CAAC9B,WAAvE;EACA,MAAMkI,UAAU,GAAGlI,WAAW,KAAK,IAAhB,GAAuBA,WAAW,CAACkI,UAAnC,GAAgD,IAAnE;;EACA,MAAIA,UAAU,KAAK,IAAnB,EAAyB;EACvB,QAAME,WAAW,GAAGF,UAAU,CAACxJ,IAA/B;EACA,QAAIsD,MAAM,GAAGoG,WAAb;;EACA,OAAG;EACD,UAAI,CAACpG,MAAM,CAAChoB,GAAP,GAAaA,GAAd,MAAuBA,GAA3B,EAAgC;EAC9B;EACA,YAAM87B,MAAM,GAAG9T,MAAM,CAAC8T,MAAtB;EACA9T,QAAAA,MAAM,CAAC+T,OAAP,GAAiBD,MAAM,EAAvB;;EAEA,QAAa;EACX,cAAMC,OAAO,GAAG/T,MAAM,CAAC+T,OAAvB;;EACA,cAAIA,OAAO,KAAK/wB,SAAZ,IAAyB,OAAO+wB,OAAP,KAAmB,UAAhD,EAA4D;EAC1D,gBAAIxQ,QAAQ,SAAZ;;EACA,gBAAIwQ,OAAO,KAAK,IAAhB,EAAsB;EACpBxQ,cAAAA,QAAQ,GACN,+DACA,oCAFF;EAGD,aAJD,MAIO,IAAI,OAAOwQ,OAAO,CAAC0S,IAAf,KAAwB,UAA5B,EAAwC;EAC7CljB,cAAAA,QAAQ,GACN,mFACA,uDADA,GAEA,8BAFA,GAGA,qBAHA,GAIA,kCAJA,GAKA,6BALA,GAMA,qDANA,GAOA,cAPA,GAQA,OARA,GASA,kBATA,wEAWA,yFAZF;EAaD,aAdM,MAcA;EACLA,cAAAA,QAAQ,GAAG,oBAAoBwQ,OAA/B;EACD;;EACD,kBACE,qEACE,+BAFJ,EAGExQ,QAHF;EAKD;EACF;EACF;;EACDvD,MAAAA,MAAM,GAAGA,MAAM,CAACtD,IAAhB;EACD,KAxCD,QAwCSsD,MAAM,KAAKoG,WAxCpB;EAyCD;EACF;;EAED,SAASqkB,sBAAT,CAAgC3qB,YAAhC,EAAqD;EACnD,MAAM9B,WAAgD,GAAI8B,YAAY,CAAC9B,WAAvE;EACA,MAAMkI,UAAU,GAAGlI,WAAW,KAAK,IAAhB,GAAuBA,WAAW,CAACkI,UAAnC,GAAgD,IAAnE;;EACA,MAAIA,UAAU,KAAK,IAAnB,EAAyB;EACvB,QAAME,WAAW,GAAGF,UAAU,CAACxJ,IAA/B;EACA,QAAIsD,MAAM,GAAGoG,WAAb;;EACA,OAAG;EAAA,oBACmBpG,MADnB;EAAA,UACMtD,IADN,WACMA,IADN;EAAA,UACY1kB,GADZ,WACYA,GADZ;;EAED,UACE,CAACA,GAAG,GAAG88B,SAAP,MAAwB4V,SAAxB,IACA,CAAC1yC,GAAG,GAAGw8B,SAAP,MAA0BkW,SAF5B,EAGE;EACAC,QAAAA,sCAAsC,CAAC7qB,YAAD,EAAeE,MAAf,CAAtC;EACA4qB,QAAAA,oCAAoC,CAAC9qB,YAAD,EAAeE,MAAf,CAApC;EACD;;EACDA,MAAAA,MAAM,GAAGtD,IAAT;EACD,KAVD,QAUSsD,MAAM,KAAKoG,WAVpB;EAWD;EACF;;EAyDD,SAASykB,gBAAT,CACEC,YADF,EAEE3vC,OAFF,EAGE2kB,YAHF,EAIEirB,cAJF,EAKQ;EACN,UAAQjrB,YAAY,CAAC9nB,GAArB;EACE,SAAKrE,iBAAL;EACA,SAAKW,UAAL;EACA,SAAKI,mBAAL;EACA,SAAKO,KAAL;EAAY;EACV;EACA;EACA;EACA;EACA,QAWO;EACLu1C,UAAAA,yBAAyB,CAACvV,MAAU,GAAGT,SAAd,EAA6B1U,YAA7B,CAAzB;EACD;;EAED2qB,QAAAA,sBAAsB,CAAC3qB,YAAD,CAAtB;EACA;EACD;;EACD,SAAKlsB,cAAL;EAAqB;EACnB,YAAMyH,QAAQ,GAAGykB,YAAY,CAACxkB,SAA9B;;EACA,YAAIwkB,YAAY,CAACjlB,KAAb,GAAqB7B,MAAzB,EAAiC;EAC/B,cAAImC,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACA;EACA;EACA,YAAa;EACX,kBACE2kB,YAAY,CAAChoB,IAAb,KAAsBgoB,YAAY,CAACyE,WAAnC,IACA,CAACuV,4BAFH,EAGE;EACA,oBAAIz+B,QAAQ,CAACoC,KAAT,KAAmBqiB,YAAY,CAACmE,aAApC,EAAmD;EACjD,wBACE,sDACE,qBADF,GAEE,6DAFF,GAGE,8CAHF,GAIE,uBALJ,EAMElsB,gBAAgB,CAAC+nB,YAAY,CAAChoB,IAAd,CAAhB,IAAuC,UANzC;EAQD;;EACD,oBAAIuD,QAAQ,CAAC8mB,KAAT,KAAmBrC,YAAY,CAACpC,aAApC,EAAmD;EACjD,wBACE,sDACE,qBADF,GAEE,6DAFF,GAGE,8CAHF,GAIE,uBALJ,EAME3lB,gBAAgB,CAAC+nB,YAAY,CAAChoB,IAAd,CAAhB,IAAuC,UANzC;EAQD;EACF;EACF;;EACD,YAWO;EACLuD,cAAAA,QAAQ,CAAC0oB,iBAAT;EACD;EACF,WA7CD,MA6CO;EACL,gBAAMkX,SAAS,GACbnb,YAAY,CAACyE,WAAb,KAA6BzE,YAAY,CAAChoB,IAA1C,GACIqD,OAAO,CAAC8oB,aADZ,GAEI/J,mBAAmB,CAAC4F,YAAY,CAAChoB,IAAd,EAAoBqD,OAAO,CAAC8oB,aAA5B,CAHzB;EAIA,gBAAMvF,SAAS,GAAGvjB,OAAO,CAACuiB,aAA1B,CALK;EAOL;EACA;;EACA,YAAa;EACX,kBACEoC,YAAY,CAAChoB,IAAb,KAAsBgoB,YAAY,CAACyE,WAAnC,IACA,CAACuV,4BAFH,EAGE;EACA,oBAAIz+B,QAAQ,CAACoC,KAAT,KAAmBqiB,YAAY,CAACmE,aAApC,EAAmD;EACjD,wBACE,sDACE,sBADF,GAEE,6DAFF,GAGE,8CAHF,GAIE,uBALJ,EAMElsB,gBAAgB,CAAC+nB,YAAY,CAAChoB,IAAd,CAAhB,IAAuC,UANzC;EAQD;;EACD,oBAAIuD,QAAQ,CAAC8mB,KAAT,KAAmBrC,YAAY,CAACpC,aAApC,EAAmD;EACjD,wBACE,sDACE,sBADF,GAEE,6DAFF,GAGE,8CAHF,GAIE,uBALJ,EAME3lB,gBAAgB,CAAC+nB,YAAY,CAAChoB,IAAd,CAAhB,IAAuC,UANzC;EAQD;EACF;EACF;;EACD,YAeO;EACLuD,cAAAA,QAAQ,CAACynB,kBAAT,CACEmY,SADF,EAEEvc,SAFF,EAGErjB,QAAQ,CAACivC,mCAHX;EAKD;EACF;EACF,SA3GkB;EA8GnB;;;EACA,YAAMtsB,WAEE,GAAI8B,YAAY,CAAC9B,WAFzB;;EAGA,YAAIA,WAAW,KAAK,IAApB,EAA0B;EACxB,UAAa;EACX,gBACE8B,YAAY,CAAChoB,IAAb,KAAsBgoB,YAAY,CAACyE,WAAnC,IACA,CAACuV,4BAFH,EAGE;EACA,kBAAIz+B,QAAQ,CAACoC,KAAT,KAAmBqiB,YAAY,CAACmE,aAApC,EAAmD;EACjD,sBACE,sDACE,+BADF,GAEE,6DAFF,GAGE,8CAHF,GAIE,uBALJ,EAMElsB,gBAAgB,CAAC+nB,YAAY,CAAChoB,IAAd,CAAhB,IAAuC,UANzC;EAQD;;EACD,kBAAIuD,QAAQ,CAAC8mB,KAAT,KAAmBrC,YAAY,CAACpC,aAApC,EAAmD;EACjD,sBACE,sDACE,+BADF,GAEE,6DAFF,GAGE,8CAHF,GAIE,uBALJ,EAME3lB,gBAAgB,CAAC+nB,YAAY,CAAChoB,IAAd,CAAhB,IAAuC,UANzC;EAQD;EACF;EACF,WA3BuB;EA6BxB;EACA;;;EACA+nB,UAAAA,iBAAiB,CAACC,YAAD,EAAe9B,WAAf,EAA4B3iB,QAA5B,CAAjB;EACD;;EACD;EACD;;EACD,SAAKvH,QAAL;EAAe;EACb;EACA;EACA,YAAMkqB,YAEE,GAAI8B,YAAY,CAAC9B,WAFzB;;EAGA,YAAIA,YAAW,KAAK,IAApB,EAA0B;EACxB,cAAI3iB,SAAQ,GAAG,IAAf;;EACA,cAAIykB,YAAY,CAAC9jB,KAAb,KAAuB,IAA3B,EAAiC;EAC/B,oBAAQ8jB,YAAY,CAAC9jB,KAAb,CAAmBhE,GAA3B;EACE,mBAAKhE,aAAL;EACEqH,gBAAAA,SAAQ,GAAG+B,iBAAiB,CAAC0iB,YAAY,CAAC9jB,KAAb,CAAmBV,SAApB,CAA5B;EACA;;EACF,mBAAK1H,cAAL;EACEyH,gBAAAA,SAAQ,GAAGykB,YAAY,CAAC9jB,KAAb,CAAmBV,SAA9B;EACA;EANJ;EAQD;;EACDukB,UAAAA,iBAAiB,CAACC,YAAD,EAAe9B,YAAf,EAA4B3iB,SAA5B,CAAjB;EACD;;EACD;EACD;;EACD,SAAKrH,aAAL;EAAoB;EAClB,YAAMqH,UAAkB,GAAGykB,YAAY,CAACxkB,SAAxC,CADkB;EAIlB;EACA;EACA;;EACA,YAAIH,OAAO,KAAK,IAAZ,IAAoB2kB,YAAY,CAACjlB,KAAb,GAAqB7B,MAA7C,EAAqD;EACnD,cAAMlB,IAAI,GAAGgoB,YAAY,CAAChoB,IAA1B;EACA,cAAM2F,KAAK,GAAGqiB,YAAY,CAACmE,aAA3B;AACA+mB,EACD;;EAED;EACD;;EACD,SAAK/2C,QAAL;EAAe;EACb;EACA;EACD;;EACD,SAAKF,UAAL;EAAiB;EACf;EACA;EACD;;EACD,SAAKQ,QAAL;EAAe;EACb,QAAyB;EAAA,uCACMurB,YAAY,CAACmE,aADnB;EAAA,cAChBgnB,QADgB,0BAChBA,QADgB;EAAA,cACNC,QADM,0BACNA,QADM;EAAA,cAEhBnP,cAFgB,GAEEjc,YAAY,CAACxkB,SAFf,CAEhBygC,cAFgB;EAIvB,cAAMpD,UAAU,GAAGE,aAAa,EAAhC;;EAEA,cAAI,OAAOqS,QAAP,KAAoB,UAAxB,EAAoC;EAClC,YAA4B;EAC1BA,cAAAA,QAAQ,CACNprB,YAAY,CAACmE,aAAb,CAA2BhjB,EADrB,EAEN9F,OAAO,KAAK,IAAZ,GAAmB,OAAnB,GAA6B,QAFvB,EAGN2kB,YAAY,CAACuZ,cAHP,EAINvZ,YAAY,CAAC8f,gBAJP,EAKN9f,YAAY,CAACkZ,eALP,EAMNL,UANM,EAONmS,YAAY,CAACK,oBAPP,CAAR;EASD,aAVD;EAoBD;EAuCF;;EACD;EACD;;EACD,SAAK32C,iBAAL;EAAwB;AACtB42C,EACA;EACD;;EACD,SAAKt2C,qBAAL;EACA,SAAKF,wBAAL;EACA,SAAKG,oBAAL;EACA,SAAKC,cAAL;EACA,SAAKE,kBAAL;EACA,SAAKC,qBAAL;EACE;EA7SJ;;EADM;EAAA;EAAA;EAAA;EAAA;EAqTP;;EAED,SAASk2C,uBAAT,CAAiCvrB,YAAjC,EAA+C5gB,QAA/C,EAAyD;EACvD,EAAsB;EACpB;EACA;EACA,QAAIzE,IAAW,GAAGqlB,YAAlB;;EACA,WAAO,IAAP,EAAa;EACX,UAAIrlB,IAAI,CAACzC,GAAL,KAAahE,aAAjB,EAAgC;EAC9B,YAAMqH,QAAQ,GAAGZ,IAAI,CAACa,SAAtB;;EACA,YAAI4D,QAAJ,EAAc;EACZwB,UAAAA,YAAY,CAACrF,QAAD,CAAZ;EACD,SAFD,MAEO;EACLuF,UAAAA,cAAc,CAACnG,IAAI,CAACa,SAAN,EAAiBb,IAAI,CAACwpB,aAAtB,CAAd;EACD;EACF,OAPD,MAOO,IAAIxpB,IAAI,CAACzC,GAAL,KAAa/D,QAAjB,EAA2B;EAChC,YAAMoH,UAAQ,GAAGZ,IAAI,CAACa,SAAtB;;EACA,YAAI4D,QAAJ,EAAc;EACZyB,UAAAA,gBAAgB,CAACtF,UAAD,CAAhB;EACD,SAFD,MAEO;EACLwF,UAAAA,kBAAkB,CAACxF,UAAD,EAAWZ,IAAI,CAACwpB,aAAhB,CAAlB;EACD;EACF,OAPM,MAOA,IACL,CAACxpB,IAAI,CAACzC,GAAL,KAAa9C,kBAAb,IACCuF,IAAI,CAACzC,GAAL,KAAa7C,qBADf,KAECsF,IAAI,CAACijB,aAAN,KAAyC,IAFzC,IAGAjjB,IAAI,KAAKqlB,YAJJ,EAKL,CALK,MAQA,IAAIrlB,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;EAC9BvB,QAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,QAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;EACA;EACD;;EACD,UAAIvB,IAAI,KAAKqlB,YAAb,EAA2B;EACzB;EACD;;EACD,aAAOrlB,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;EAC5B,YAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBglB,YAA5C,EAA0D;EACxD;EACD;;EACDrlB,QAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;;EACDL,MAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;EACAL,MAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;EACD;EACF;EACF;;EAED,SAASqvC,eAAT,CAAyBxrB,YAAzB,EAA8C;EAC5C,MAAMwF,GAAG,GAAGxF,YAAY,CAACwF,GAAzB;;EACA,MAAIA,GAAG,KAAK,IAAZ,EAAkB;EAChB,QAAMjqB,QAAQ,GAAGykB,YAAY,CAACxkB,SAA9B;EACA,QAAIiwC,aAAJ;;EACA,YAAQzrB,YAAY,CAAC9nB,GAArB;EACE,WAAKhE,aAAL;EACEu3C,QAAAA,aAAa,GAAGnuC,iBAAiB,CAAC/B,QAAD,CAAjC;EACA;;EACF;EACEkwC,QAAAA,aAAa,GAAGlwC,QAAhB;EALJ,KAHgB;;EAchB,QAAI,OAAOiqB,GAAP,KAAe,UAAnB,EAA+B;EAC7BA,MAAAA,GAAG,CAACimB,aAAD,CAAH;EACD,KAFD,MAEO;EACL,MAAa;EACX,YAAI,CAACjmB,GAAG,CAACtf,cAAJ,CAAmB,SAAnB,CAAL,EAAoC;EAClC,gBACE,4CACE,wDAFJ,EAGEjO,gBAAgB,CAAC+nB,YAAY,CAAChoB,IAAd,CAHlB;EAKD;EACF;;EAEDwtB,MAAAA,GAAG,CAACnqB,OAAJ,GAAcowC,aAAd;EACD;EACF;EACF;;EAED,SAASC,eAAT,CAAyBrwC,OAAzB,EAAyC;EACvC,MAAMswC,UAAU,GAAGtwC,OAAO,CAACmqB,GAA3B;;EACA,MAAImmB,UAAU,KAAK,IAAnB,EAAyB;EACvB,QAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;EACpCA,MAAAA,UAAU,CAAC,IAAD,CAAV;EACD,KAFD,MAEO;EACLA,MAAAA,UAAU,CAACtwC,OAAX,GAAqB,IAArB;EACD;EACF;EACF;EAGD;EACA;;;EACA,SAASuwC,aAAT,CACEZ,YADF,EAEE3vC,OAFF,EAGEwwC,mBAHF,EAIQ;EACNzhC,EAAAA,eAAe,CAAC/O,OAAD,CAAf;;EAEA,UAAQA,OAAO,CAACnD,GAAhB;EACE,SAAKrE,iBAAL;EACA,SAAKW,UAAL;EACA,SAAKG,aAAL;EACA,SAAKC,mBAAL;EACA,SAAKO,KAAL;EAAY;EACV,YAAM+oB,WAAgD,GAAI7iB,OAAO,CAAC6iB,WAAlE;;EACA,YAAIA,WAAW,KAAK,IAApB,EAA0B;EACxB,cAAMkI,UAAU,GAAGlI,WAAW,CAACkI,UAA/B;;EACA,cAAIA,UAAU,KAAK,IAAnB,EAAyB;EACvB,gBAAME,WAAW,GAAGF,UAAU,CAACxJ,IAA/B;EAEA,gBAAIsD,MAAM,GAAGoG,WAAb;;EACA,eAAG;EAAA,6BACsBpG,MADtB;EAAA,kBACM+T,OADN,YACMA,OADN;EAAA,kBACe/7B,GADf,YACeA,GADf;;EAED,kBAAI+7B,OAAO,KAAK/wB,SAAhB,EAA2B;EACzB,oBAAI,CAAChL,GAAG,GAAG88B,SAAP,MAAwB4V,SAA5B,EAA0C;EACxCC,kBAAAA,sCAAsC,CAACxvC,OAAD,EAAU6kB,MAAV,CAAtC;EACD,iBAFD,MAEO;EACL,kBAQO;EACLmqB,oBAAAA,iBAAiB,CAAChvC,OAAD,EAAU44B,OAAV,CAAjB;EACD;EACF;EACF;;EACD/T,cAAAA,MAAM,GAAGA,MAAM,CAACtD,IAAhB;EACD,aApBD,QAoBSsD,MAAM,KAAKoG,WApBpB;EAqBD;EACF;;EACD;EACD;;EACD,SAAKxyB,cAAL;EAAqB;EACnBq2C,QAAAA,eAAe,CAAC9uC,OAAD,CAAf;EACA,YAAME,QAAQ,GAAGF,OAAO,CAACG,SAAzB;;EACA,YAAI,OAAOD,QAAQ,CAACwuC,oBAAhB,KAAyC,UAA7C,EAAyD;EACvDC,UAAAA,8BAA8B,CAAC3uC,OAAD,EAAUE,QAAV,CAA9B;EACD;;EACD;EACD;;EACD,SAAKrH,aAAL;EAAoB;EAClBi2C,QAAAA,eAAe,CAAC9uC,OAAD,CAAf;EACA;EACD;;EACD,SAAKpH,UAAL;EAAiB;EACf;EACA;EACA;EACA,QAAsB;EACpB63C,UAAAA,qBAAqB,CAACd,YAAD,EAAe3vC,OAAf,AAAA,CAArB;EACD,SAFD;;EAKA;EACD;;EACD,SAAKpG,oBAAL;EAA2B;AACzB;EAOA;EACD;;EACD,SAAKF,kBAAL;EAAyB;AACvB;EASA;EACD;;EACD,SAAKG,cAAL;EAAqB;AACnB;EAGA;EACD;EAxFH;EA0FD;;EAED,SAAS62C,oBAAT,CACEf,YADF,EAEEnhC,IAFF,EAGEgiC,mBAHF,EAIQ;EACN;EACA;EACA;EACA;EACA;EACA,MAAIlxC,IAAW,GAAGkP,IAAlB;;EACA,SAAO,IAAP,EAAa;EACX+hC,IAAAA,aAAa,CAACZ,YAAD,EAAerwC,IAAf,AAAA,CAAb,CADW;EAGX;;EACA,QACEA,IAAI,CAACuB,KAAL,KAAe,IAAf;EAEA;EACC,KAAqBvB,IAAI,CAACzC,GAAL,KAAajE,UAHnC,CADF,EAKE;EACA0G,MAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,MAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;EACA;EACD;;EACD,QAAIvB,IAAI,KAAKkP,IAAb,EAAmB;EACjB;EACD;;EACD,WAAOlP,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;EAC5B,UAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgB6O,IAA5C,EAAkD;EAChD;EACD;;EACDlP,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;;EACDL,IAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;EACAL,IAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;EACD;EACF;;EAED,SAAS6vC,mBAAT,CAA6BtxC,KAA7B,EAA2C;EACzC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAA,EAAAA,KAAK,CAACG,SAAN,GAAkB,IAAlB;EACAH,EAAAA,KAAK,CAACwB,KAAN,GAAc,IAAd;EACAxB,EAAAA,KAAK,CAAC0hB,YAAN,GAAqB,IAArB;EACA1hB,EAAAA,KAAK,CAAC4rB,WAAN,GAAoB,IAApB;EACA5rB,EAAAA,KAAK,CAAC0rB,UAAN,GAAmB,IAAnB;EACA1rB,EAAAA,KAAK,CAACypB,aAAN,GAAsB,IAAtB;EACAzpB,EAAAA,KAAK,CAACkjB,aAAN,GAAsB,IAAtB;EACAljB,EAAAA,KAAK,CAACiqB,YAAN,GAAqB,IAArB;EACAjqB,EAAAA,KAAK,CAACM,MAAN,GAAe,IAAf;EACAN,EAAAA,KAAK,CAACwjB,WAAN,GAAoB,IAApB;;EACA,EAAa;EACXxjB,IAAAA,KAAK,CAAC+b,WAAN,GAAoB,IAApB;EACD;EACF;;EAgDD,SAASw1B,kBAAT,CAA4BvxC,KAA5B,EAAiD;EAC/C,MAAI4B,MAAM,GAAG5B,KAAK,CAACM,MAAnB;;EACA,SAAOsB,MAAM,KAAK,IAAlB,EAAwB;EACtB,QAAI4vC,YAAY,CAAC5vC,MAAD,CAAhB,EAA0B;EACxB,aAAOA,MAAP;EACD;;EACDA,IAAAA,MAAM,GAAGA,MAAM,CAACtB,MAAhB;EACD;;EAP8C;EAAA;EAAA;EAAA;EAAA;EAahD;;EAED,SAASkxC,YAAT,CAAsBxxC,KAAtB,EAA6C;EAC3C,SACEA,KAAK,CAACxC,GAAN,KAAchE,aAAd,IACAwG,KAAK,CAACxC,GAAN,KAAclE,QADd,IAEA0G,KAAK,CAACxC,GAAN,KAAcjE,UAHhB;EAKD;;EAED,SAASk4C,cAAT,CAAwBzxC,KAAxB,EAAiD;EAC/C;EACA;EACA;EACA;EACA,MAAIC,IAAW,GAAGD,KAAlB;;EACA0xC,EAAAA,QAAQ,EAAE,OAAO,IAAP,EAAa;EACrB;EACA,WAAOzxC,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;EAC5B,UAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBkxC,YAAY,CAACvxC,IAAI,CAACK,MAAN,CAAxC,EAAuD;EACrD;EACA;EACA,eAAO,IAAP;EACD;;EACDL,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;;EACDL,IAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;EACAL,IAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;;EACA,WACExB,IAAI,CAACzC,GAAL,KAAahE,aAAb,IACAyG,IAAI,CAACzC,GAAL,KAAa/D,QADb,IAEAwG,IAAI,CAACzC,GAAL,KAAanD,kBAHf,EAIE;EACA;EACA;EACA,UAAI4F,IAAI,CAACI,KAAL,GAAa9B,SAAjB,EAA4B;EAC1B;EACA,iBAASmzC,QAAT;EACD,OAND;EAQA;;;EACA,UAAIzxC,IAAI,CAACuB,KAAL,KAAe,IAAf,IAAuBvB,IAAI,CAACzC,GAAL,KAAajE,UAAxC,EAAoD;EAClD,iBAASm4C,QAAT;EACD,OAFD,MAEO;EACLzxC,QAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,QAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;EACD;EACF,KA/BoB;;;EAiCrB,QAAI,EAAEvB,IAAI,CAACI,KAAL,GAAa9B,SAAf,CAAJ,EAA+B;EAC7B;EACA,aAAO0B,IAAI,CAACa,SAAZ;EACD;EACF;EACF;;EAED,SAAS6wC,eAAT,CAAyBrsB,YAAzB,EAAoD;AAClD;;EAKA,MAAMvjB,WAAW,GAAGwvC,kBAAkB,CAACjsB,YAAD,CAAtC,CANkD;;EASlD,MAAI1jB,MAAJ;EACA,MAAIgwC,WAAJ;EACA,MAAMC,eAAe,GAAG9vC,WAAW,CAACjB,SAApC;;EACA,UAAQiB,WAAW,CAACvE,GAApB;EACE,SAAKhE,aAAL;EACEoI,MAAAA,MAAM,GAAGiwC,eAAT;EACAD,MAAAA,WAAW,GAAG,KAAd;EACA;;EACF,SAAKt4C,QAAL;EACEsI,MAAAA,MAAM,GAAGiwC,eAAe,CAACxtC,aAAzB;EACAutC,MAAAA,WAAW,GAAG,IAAd;EACA;;EACF,SAAKr4C,UAAL;EACEqI,MAAAA,MAAM,GAAGiwC,eAAe,CAACxtC,aAAzB;EACAutC,MAAAA,WAAW,GAAG,IAAd;EACA;;EACF,SAAKr3C,oBAAL;AACE;EAIF;;EACA;EAAA;EAAA;EAAA;EAAA;EAAA;;EAnBF;;EA0BA,MAAIwH,WAAW,CAAC1B,KAAZ,GAAoB1B,YAAxB,EAAsC;AACpC;EAGAoD,IAAAA,WAAW,CAAC1B,KAAZ,IAAqB,CAAC1B,YAAtB;EACD;;EAED,MAAMmzC,MAAM,GAAGL,cAAc,CAACnsB,YAAD,CAA7B,CA7CkD;EA+ClD;;EACA,MAAIssB,WAAJ,EAAiB;EACfG,IAAAA,wCAAwC,CAACzsB,YAAD,EAAewsB,MAAf,EAAuBlwC,MAAvB,CAAxC;EACD,GAFD,MAEO;EACLowC,IAAAA,2BAA2B,CAAC1sB,YAAD,EAAewsB,MAAf,EAAuBlwC,MAAvB,CAA3B;EACD;EACF;;EAED,SAASmwC,wCAAT,CACE9xC,IADF,EAEE6xC,MAFF,EAGElwC,MAHF,EAIQ;EAAA,MACCpE,GADD,GACQyC,IADR,CACCzC,GADD;EAEN,MAAMy0C,MAAM,GAAGz0C,GAAG,KAAKhE,aAAR,IAAyBgE,GAAG,KAAK/D,QAAhD;;EACA,MAAIw4C,MAAM,IAAKtyC,oBAAoB,CAAnC,EAAsE;EACpE,QAAMmB,SAAS,GAAGmxC,MAAM,GAAGhyC,IAAI,CAACa,SAAR,GAAoBb,IAAI,CAACa,SAAL,CAAeD,QAA3D;;EACA,QAAIixC,MAAJ,EAAY;EACV9rC,MAAAA,uBAAuB,CAACpE,MAAD,EAASd,SAAT,EAAoBgxC,MAApB,CAAvB;EACD,KAFD,MAEO;EACL/rC,MAAAA,sBAAsB,CAACnE,MAAD,EAASd,SAAT,CAAtB;EACD;EACF,GAPD,MAOO,IAAItD,GAAG,KAAKjE,UAAZ,EAAwB,CAAxB,MAIA;EACL,QAAMiI,KAAK,GAAGvB,IAAI,CAACuB,KAAnB;;EACA,QAAIA,KAAK,KAAK,IAAd,EAAoB;EAClBuwC,MAAAA,wCAAwC,CAACvwC,KAAD,EAAQswC,MAAR,EAAgBlwC,MAAhB,CAAxC;EACA,UAAIH,OAAO,GAAGD,KAAK,CAACC,OAApB;;EACA,aAAOA,OAAO,KAAK,IAAnB,EAAyB;EACvBswC,QAAAA,wCAAwC,CAACtwC,OAAD,EAAUqwC,MAAV,EAAkBlwC,MAAlB,CAAxC;EACAH,QAAAA,OAAO,GAAGA,OAAO,CAACA,OAAlB;EACD;EACF;EACF;EACF;;EAED,SAASuwC,2BAAT,CACE/xC,IADF,EAEE6xC,MAFF,EAGElwC,MAHF,EAIQ;EAAA,MACCpE,GADD,GACQyC,IADR,CACCzC,GADD;EAEN,MAAMy0C,MAAM,GAAGz0C,GAAG,KAAKhE,aAAR,IAAyBgE,GAAG,KAAK/D,QAAhD;;EACA,MAAIw4C,MAAM,IAAKtyC,oBAAoB,CAAnC,EAAsE;EACpE,QAAMmB,SAAS,GAAGmxC,MAAM,GAAGhyC,IAAI,CAACa,SAAR,GAAoBb,IAAI,CAACa,SAAL,CAAeD,QAA3D;;EACA,QAAIixC,MAAJ,EAAY;EACVnuC,MAAAA,YAAY,CAAC/B,MAAD,EAASd,SAAT,EAAoBgxC,MAApB,CAAZ;EACD,KAFD,MAEO;EACL5uC,MAAAA,WAAW,CAACtB,MAAD,EAASd,SAAT,CAAX;EACD;EACF,GAPD,MAOO,IAAItD,GAAG,KAAKjE,UAAZ,EAAwB,CAAxB,MAIA;EACL,QAAMiI,KAAK,GAAGvB,IAAI,CAACuB,KAAnB;;EACA,QAAIA,KAAK,KAAK,IAAd,EAAoB;EAClBwwC,MAAAA,2BAA2B,CAACxwC,KAAD,EAAQswC,MAAR,EAAgBlwC,MAAhB,CAA3B;EACA,UAAIH,OAAO,GAAGD,KAAK,CAACC,OAApB;;EACA,aAAOA,OAAO,KAAK,IAAnB,EAAyB;EACvBuwC,QAAAA,2BAA2B,CAACvwC,OAAD,EAAUqwC,MAAV,EAAkBlwC,MAAlB,CAA3B;EACAH,QAAAA,OAAO,GAAGA,OAAO,CAACA,OAAlB;EACD;EACF;EACF;EACF;;EAED,SAAS2vC,qBAAT,CACEd,YADF,EAEE3vC,OAFF,EAGEwwC,mBAHF,EAIQ;EACN;EACA;EACA,MAAIlxC,IAAW,GAAGU,OAAlB,CAHM;EAMN;;EACA,MAAIuxC,oBAAoB,GAAG,KAA3B,CAPM;;EAUN,MAAIrwC,aAAJ;EACA,MAAIswC,wBAAJ;;EAEA,SAAO,IAAP,EAAa;EACX,QAAI,CAACD,oBAAL,EAA2B;EACzB,UAAItwC,MAAM,GAAG3B,IAAI,CAACK,MAAlB;;EACA8xC,MAAAA,UAAU,EAAE,OAAO,IAAP,EAAa;EAAA,cAErBxwC,MAAM,KAAK,IAFU;EAAA;EAAA;EAAA;EAAA;;EAMvB,YAAMiwC,eAAe,GAAGjwC,MAAM,CAACd,SAA/B;;EACA,gBAAQc,MAAM,CAACpE,GAAf;EACE,eAAKhE,aAAL;EACEqI,YAAAA,aAAa,GAAGgwC,eAAhB;EACAM,YAAAA,wBAAwB,GAAG,KAA3B;EACA,kBAAMC,UAAN;;EACF,eAAK94C,QAAL;EACEuI,YAAAA,aAAa,GAAGgwC,eAAe,CAACxtC,aAAhC;EACA8tC,YAAAA,wBAAwB,GAAG,IAA3B;EACA,kBAAMC,UAAN;;EACF,eAAK74C,UAAL;EACEsI,YAAAA,aAAa,GAAGgwC,eAAe,CAACxtC,aAAhC;EACA8tC,YAAAA,wBAAwB,GAAG,IAA3B;EACA,kBAAMC,UAAN;;EAZJ;;EAmBAxwC,QAAAA,MAAM,GAAGA,MAAM,CAACtB,MAAhB;EACD;;EACD4xC,MAAAA,oBAAoB,GAAG,IAAvB;EACD;;EAED,QAAIjyC,IAAI,CAACzC,GAAL,KAAahE,aAAb,IAA8ByG,IAAI,CAACzC,GAAL,KAAa/D,QAA/C,EAAyD;EACvD43C,MAAAA,oBAAoB,CAACf,YAAD,EAAerwC,IAAf,AAAA,CAApB,CADuD;EAGvD;;EACA,UAAIkyC,wBAAJ,EAA8B;EAC5BlsC,QAAAA,wBAAwB,CACpBpE,aADoB,EAErB5B,IAAI,CAACa,SAFgB,CAAxB;EAID,OALD,MAKO;EACLgD,QAAAA,WAAW,CACPjC,aADO,EAER5B,IAAI,CAACa,SAFG,CAAX;EAID,OAdsD;;EAgBxD,KAhBD,MAgBO,AA0CA,IAAIb,IAAI,CAACzC,GAAL,KAAajE,UAAjB,EAA6B;EAClC,UAAI0G,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;EACvB;EACA;EACAK,QAAAA,aAAa,GAAG5B,IAAI,CAACa,SAAL,CAAeuD,aAA/B;EACA8tC,QAAAA,wBAAwB,GAAG,IAA3B,CAJuB;;EAMvBlyC,QAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,QAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;EACA;EACD;EACF,KAXM,MAWA;EACL0vC,MAAAA,aAAa,CAACZ,YAAD,EAAerwC,IAAf,AAAA,CAAb,CADK;;EAGL,UAAIA,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;EACvBvB,QAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,QAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;EACA;EACD;EACF;;EACD,QAAIvB,IAAI,KAAKU,OAAb,EAAsB;EACpB;EACD;;EACD,WAAOV,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;EAC5B,UAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBK,OAA5C,EAAqD;EACnD;EACD;;EACDV,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;;EACA,UAAIL,IAAI,CAACzC,GAAL,KAAajE,UAAjB,EAA6B;EAC3B;EACA;EACA24C,QAAAA,oBAAoB,GAAG,KAAvB;EACD;EACF;;EACDjyC,IAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;EACAL,IAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;EACD;EACF;;EAED,SAAS4wC,cAAT,CACE/B,YADF,EAEE3vC,OAFF,EAGEwwC,mBAHF,EAIQ;EACN,EAAsB;EACpB;EACA;EACAC,IAAAA,qBAAqB,CAACd,YAAD,EAAe3vC,OAAf,AAAA,CAArB;EACD,GAJD;;EAQA,MAAMR,SAAS,GAAGQ,OAAO,CAACR,SAA1B;EACAmxC,EAAAA,mBAAmB,CAAC3wC,OAAD,CAAnB;;EACA,MAAIR,SAAS,KAAK,IAAlB,EAAwB;EACtBmxC,IAAAA,mBAAmB,CAACnxC,SAAD,CAAnB;EACD;EACF;;EAED,SAASmyC,UAAT,CAAoB3xC,OAApB,EAA2C2kB,YAA3C,EAAsE;AACpE;EAgEA,UAAQA,YAAY,CAAC9nB,GAArB;EACE,SAAKrE,iBAAL;EACA,SAAKW,UAAL;EACA,SAAKG,aAAL;EACA,SAAKC,mBAAL;EACA,SAAKO,KAAL;EAAY;EACV;EACA;EACA;EACA;EACA;EACA,QAWO;EACLs1C,UAAAA,2BAA2B,CAACtV,MAAU,GAAGT,SAAd,EAA6B1U,YAA7B,CAA3B;EACD;;EACD;EACD;;EACD,SAAKlsB,cAAL;EAAqB;EACnB;EACD;;EACD,SAAKI,aAAL;EAAoB;EAClB,YAAMqH,QAAkB,GAAGykB,YAAY,CAACxkB,SAAxC;;EACA,YAAID,QAAQ,IAAI,IAAhB,EAAsB;EACpB;EACA,cAAMkE,QAAQ,GAAGugB,YAAY,CAACmE,aAA9B,CAFoB;EAIpB;EACA;;EACA,cAAM3kB,QAAQ,GAAGnE,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAAC8oB,aAA3B,GAA2C1kB,QAA5D;EACA,cAAMzH,IAAI,GAAGgoB,YAAY,CAAChoB,IAA1B,CAPoB;;EASpB,cAAMmI,aAAmC,GAAI6f,YAAY,CAAC9B,WAA1D;EACA8B,UAAAA,YAAY,CAAC9B,WAAb,GAA2B,IAA3B;;EACA,cAAI/d,aAAa,KAAK,IAAtB,EAA4B;EAC1BD,YAAAA,YAAY,CACV3E,QADU,EAEV4E,aAFU,EAGVnI,IAHU,EAIVwH,QAJU,EAKVC,QALU,AAAA,CAAZ;EAQD;EACF;;EACD;EACD;;EACD,SAAKtL,QAAL;EAAe;EAAA,cAEX6rB,YAAY,CAACxkB,SAAb,KAA2B,IAFhB;EAAA;EAAA;EAAA;EAAA;;EAMb,YAAM6E,YAA0B,GAAG2f,YAAY,CAACxkB,SAAhD;EACA,YAAM+E,OAAe,GAAGyf,YAAY,CAACmE,aAArC,CAPa;EASb;EACA;;EACA,YAAM7jB,OAAe,GACnBjF,OAAO,KAAK,IAAZ,GAAmBA,OAAO,CAAC8oB,aAA3B,GAA2C5jB,OAD7C;EAEAH,QAAAA,gBAAgB,CAACC,YAAD,EAAeC,OAAf,EAAwBC,OAAxB,CAAhB;EACA;EACD;;EACD,SAAKvM,QAAL;EAAe;AACb;EAQA;EACD;;EACD,SAAKS,QAAL;EAAe;EACb;EACD;;EACD,SAAKC,iBAAL;EAAwB;EACtBu4C,QAAAA,uBAAuB,CAACjtB,YAAD,CAAvB;EACAktB,QAAAA,4BAA4B,CAACltB,YAAD,CAA5B;EACA;EACD;;EACD,SAAKhrB,qBAAL;EAA4B;EAC1Bk4C,QAAAA,4BAA4B,CAACltB,YAAD,CAA5B;EACA;EACD;;EACD,SAAKlrB,wBAAL;EAA+B;EAC7B;EACD;;EACD,SAAKG,oBAAL;EAA2B;AACzB;EAKA;EACD;;EACD,SAAKC,cAAL;EAAqB;AACnB;EAKA;EACD;;EACD,SAAKE,kBAAL;EACA,SAAKC,qBAAL;EAA4B;EAC1B,YAAMgqB,QAA+B,GAAGW,YAAY,CAACpC,aAArD;EACA,YAAMxe,QAAQ,GAAGigB,QAAQ,KAAK,IAA9B;EACAksB,QAAAA,uBAAuB,CAACvrB,YAAD,EAAe5gB,QAAf,CAAvB;EACA;EACD;EAxHH;;EAjEoE;EAAA;EAAA;EAAA;EAAA;EAgMrE;;EAED,SAAS6tC,uBAAT,CAAiCjtB,YAAjC,EAAsD;EACpD,MAAMX,QAA8B,GAAGW,YAAY,CAACpC,aAApD;;EAEA,MAAIyB,QAAQ,KAAK,IAAjB,EAAuB;EACrB8tB,IAAAA,wBAAwB;;EAExB,IAAsB;EACpB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,UAAMC,kBAAyB,GAAIptB,YAAY,CAAC9jB,KAAhD;EACAqvC,MAAAA,uBAAuB,CAAC6B,kBAAD,EAAqB,IAArB,CAAvB;EACD;EACF;EAeF;;EAiCD,SAASF,4BAAT,CAAsCltB,YAAtC,EAA2D;EACzD;EACA;EACA;EACA,MAAMinB,SAA+B,GAAIjnB,YAAY,CAAC9B,WAAtD;;EACA,MAAI+oB,SAAS,KAAK,IAAlB,EAAwB;EACtBjnB,IAAAA,YAAY,CAAC9B,WAAb,GAA2B,IAA3B;EACA,QAAImvB,UAAU,GAAGrtB,YAAY,CAACxkB,SAA9B;;EACA,QAAI6xC,UAAU,KAAK,IAAnB,EAAyB;EACvBA,MAAAA,UAAU,GAAGrtB,YAAY,CAACxkB,SAAb,GAAyB,IAAIouC,eAAJ,EAAtC;EACD;;EACD3C,IAAAA,SAAS,CAACjvB,OAAV,CAAkB,UAAAsuB,QAAQ,EAAI;EAC5B;EACA,UAAIgH,KAAK,GAAGC,oBAAoB,CAACtnC,IAArB,CAA0B,IAA1B,EAAgC+Z,YAAhC,EAA8CsmB,QAA9C,CAAZ;;EACA,UAAI,CAAC+G,UAAU,CAACrnC,GAAX,CAAesgC,QAAf,CAAL,EAA+B;EAC7B,QAA4B;EAC1B,cAAIA,QAAQ,CAACkH,6BAAT,KAA2C,IAA/C,EAAqD;EACnDF,YAAAA,KAAK,GAAGG,aAAqB,CAACH,KAAD,CAA7B;EACD;EACF;;EACDD,QAAAA,UAAU,CAACl0B,GAAX,CAAemtB,QAAf;EACAA,QAAAA,QAAQ,CAACK,IAAT,CAAc2G,KAAd,EAAqBA,KAArB;EACD;EACF,KAZD;EAaD;EACF;EAGD;EACA;;;AACA,EAAO,SAASI,6BAAT,CACLryC,OADK,EAEL2kB,YAFK,EAGI;EACT,MAAI3kB,OAAO,KAAK,IAAhB,EAAsB;EACpB,QAAMumB,QAA8B,GAAGvmB,OAAO,CAACuiB,aAA/C;;EACA,QAAIgE,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,CAACqK,UAAT,KAAwB,IAAjD,EAAuD;EACrD,UAAM5M,QAA8B,GAAGW,YAAY,CAACpC,aAApD;EACA,aAAOyB,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,CAAC4M,UAAT,KAAwB,IAApD;EACD;EACF;;EACD,SAAO,KAAP;EACD;;EAED,SAAS0hB,sBAAT,CAAgCtyC,OAAhC,EAAgD;AAC9C;EAGAmF,EAAAA,gBAAgB,CAACnF,OAAO,CAACG,SAAT,CAAhB;EACD;;ECnrDD,IAAIoyC,cAAc,GAAG,CAArB;EACA,IAAIC,qBAAqB,GAAG,CAA5B;EACA,IAAIC,SAAS,GAAG,CAAhB;EACA,IAAIC,cAAc,GAAG,CAArB;EACA,IAAIC,SAAS,GAAG,CAAhB;;EAEA,IAAI,OAAOj3C,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA3C,EAAgD;EAC9C,MAAMC,WAAS,GAAGF,MAAM,CAACC,GAAzB;EACA42C,EAAAA,cAAc,GAAG32C,WAAS,CAAC,oBAAD,CAA1B;EACA42C,EAAAA,qBAAqB,GAAG52C,WAAS,CAAC,2BAAD,CAAjC;EACA62C,EAAAA,SAAS,GAAG72C,WAAS,CAAC,eAAD,CAArB;EACA82C,EAAAA,cAAc,GAAG92C,WAAS,CAAC,kBAAD,CAA1B;EACA+2C,EAAAA,SAAS,GAAG/2C,WAAS,CAAC,eAAD,CAArB;EACD;;EC/BD,IAAIg3C,0BAA0B,GAAG,KAAjC;EACA,IAAIC,eAAe,GAAG,IAAtB;AAEA,EAAe,SAASC,WAAT,CAAqBC,IAArB,EAAuC;EACpD,MAAIF,eAAe,KAAK,IAAxB,EAA8B;EAC5B,QAAI;EACF;EACA;EACA,UAAMG,aAAa,GAAG,CAAC,YAAYp7B,IAAI,CAACq7B,MAAL,EAAb,EAA4Bl5B,KAA5B,CAAkC,CAAlC,EAAqC,CAArC,CAAtB;EACA,UAAMm5B,WAAW,GAAGC,MAAM,IAAIA,MAAM,CAACH,aAAD,CAApC,CAJE;EAMF;;EACAH,MAAAA,eAAe,GAAGK,WAAW,CAAC96C,IAAZ,CAAiB+6C,MAAjB,EAAyB,QAAzB,EAAmCC,YAArD;EACD,KARD,CAQE,OAAOC,IAAP,EAAa;EACb;EACA;EACA;EACAR,MAAAA,eAAe,GAAG,UAASv5B,QAAT,EAA+B;EAC/C,QAAa;EACX,cAAIs5B,0BAA0B,KAAK,KAAnC,EAA0C;EACxCA,YAAAA,0BAA0B,GAAG,IAA7B;;EACA,gBAAI,OAAOU,cAAP,KAA0B,WAA9B,EAA2C;EACzC,oBACE,iEACE,+DADF,GAEE,mEAFF,GAGE,gCAJJ;EAMD;EACF;EACF;;EACD,YAAMC,OAAO,GAAG,IAAID,cAAJ,EAAhB;EACAC,QAAAA,OAAO,CAACC,KAAR,CAAcC,SAAd,GAA0Bn6B,QAA1B;EACAi6B,QAAAA,OAAO,CAACG,KAAR,CAAcC,WAAd,CAA0B9rC,SAA1B;EACD,OAjBD;EAkBD;EACF;;EACD,SAAOgrC,eAAe,CAACE,IAAD,CAAtB;EACD;;EC+LD,IAAMa,IAAI,GAAGh8B,IAAI,CAACg8B,IAAlB;MAGEpsC,2BAGEvQ,qBAHFuQ;MACArI,sBAEElI,qBAFFkI;MACA00C,uBACE58C,qBADF48C;AAKF,EAAO,IAAMC,SAAS;EAAG;EAAkB,CAApC;EACP,IAAMC,cAAc;EAAG;EAAoB,CAA3C;AACA,EACA,IAAMC,oBAAoB;EAAG;EAAc,CAA3C;EACA,IAAMC,sBAAsB;EAAG;EAAY,CAA3C;EACA,IAAMC,aAAa;EAAG;EAAqB,EAA3C;EACA,IAAMC,aAAa;EAAG;EAAqB,EAA3C;AACA,EAAO,IAAMC,eAAe;EAAG;EAAY,EAApC;EAGP,IAAMC,cAAc,GAAG,CAAvB;EACA,IAAMC,gBAAgB,GAAG,CAAzB;EACA,IAAMC,WAAW,GAAG,CAApB;EACA,IAAMC,aAAa,GAAG,CAAtB;EACA,IAAMC,sBAAsB,GAAG,CAA/B;EACA,IAAMC,aAAa,GAAG,CAAtB;;EAGA,IAAIC,gBAAkC,GAAGb,SAAzC;;EAEA,IAAIc,kBAAoC,GAAG,IAA3C;;EAEA,IAAI9oC,cAA4B,GAAG,IAAnC;;EAEA,IAAI+oC,6BAAoC,GAAGxjC,OAA3C;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,IAAImvB,kBAAyB,GAAGnvB,OAAhC;EACA,IAAMyjC,wBAA4C,GAAG1pC,YAAY,CAACiG,OAAD,CAAjE;;EAGA,IAAI0jC,4BAA4C,GAAGV,cAAnD;;EAEA,IAAIW,4BAAmC,GAAG,IAA1C;EAEA;EACA;EACA;;EACA,IAAIC,+BAAsC,GAAG5jC,OAA7C;EAEA;;EACA,IAAI6jC,8BAAqC,GAAG7jC,OAA5C;;EAEA,IAAI8jC,8BAAqC,GAAG9jC,OAA5C;;EAEA,IAAI+jC,6BAAoC,GAAG/jC,OAA3C;EAEA,IAAIgkC,uBAAyC,GAAG,IAAhD;EAGA;;EACA,IAAIC,4BAAoC,GAAG,CAA3C;EACA,IAAMC,oBAA4B,GAAG,GAArC;EAGA;;EACA,IAAIC,kCAA0C,GAAGC,QAAjD;EAEA;;EACA,IAAMC,iBAAiB,GAAG,GAA1B;;EAEA,SAASC,gBAAT,GAA4B;EAC1BH,EAAAA,kCAAkC,GAAGx8B,GAAG,KAAK08B,iBAA7C;EACD;;AAED,EAAO,SAASrM,mBAAT,GAAuC;EAC5C,SAAOmM,kCAAP;EACD;EAED,IAAIxqB,UAAwB,GAAG,IAA/B;EACA,IAAI4qB,gBAAgB,GAAG,KAAvB;EACA,IAAIC,kBAAkB,GAAG,IAAzB;EACA,IAAIC,sCAAyD,GAAG,IAAhE;EAEA,IAAIC,0BAAmC,GAAG,KAA1C;EACA,IAAIC,6BAA+C,GAAG,IAAtD;EACA,IAAIC,mCAAuD,GAAGtiC,YAA9D;EACA,IAAIuiC,0BAAiC,GAAG7kC,OAAxC;EACA,IAAI8kC,8BAAyD,GAAG,EAAhE;EACA,IAAIC,gCAA2D,GAAG,EAAlE;AACA,EAEA,IAAIC,+BAAsD,GAAG,IAA7D;;EAGA,IAAMC,mBAAmB,GAAG,EAA5B;EACA,IAAIC,iBAAyB,GAAG,CAAhC;EACA,IAAIC,qBAAuC,GAAG,IAA9C;EAEA,IAAMC,2BAA2B,GAAG,EAApC;EACA,IAAIC,wBAAgC,GAAG,CAAvC;EAGA;EACA;EACA;EACA;;EACA,IAAIC,uBAAmD,GAAG,IAA1D;EAGA;EACA;;EACA,IAAIC,gBAAwB,GAAGpkC,WAA/B;EACA,IAAIqkC,oBAA2B,GAAGxlC,OAAlC;EACA,IAAIylC,wBAA+B,GAAGzlC,OAAtC;EAGA;;EACA,IAAI0lC,wBAAwB,GAAG,KAA/B;EAEA,IAAIC,qBAAmC,GAAG,IAA1C;EACA,IAAIC,iCAA0C,GAAG,KAAjD;AAEA,EAAO,SAAS7f,qBAAT,GAAmD;EACxD,SAAOwd,kBAAP;EACD;AAED,EAAO,SAAS3uB,gBAAT,GAA4B;EACjC,MAAI,CAAC0uB,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDL,SAA7D,EAAwE;EACtE;EACA,WAAO96B,GAAG,EAAV;EACD,GAJgC;;;EAMjC,MAAI49B,gBAAgB,KAAKpkC,WAAzB,EAAsC;EACpC;EACA,WAAOokC,gBAAP;EACD,GATgC;;;EAWjCA,EAAAA,gBAAgB,GAAG59B,GAAG,EAAtB;EACA,SAAO49B,gBAAP;EACD;AAED,EAIO,SAAS1wB,iBAAT,CAA2B7mB,KAA3B,EAA+C;EACpD;EACA,MAAMmd,IAAI,GAAGnd,KAAK,CAACmd,IAAnB;;EACA,MAAI,CAACA,IAAI,GAAGtC,YAAR,MAA0BF,MAA9B,EAAsC;EACpC,WAAQzI,QAAR;EACD,GAFD,MAEO,IAAI,CAACiL,IAAI,GAAGrC,cAAR,MAA4BH,MAAhC,EAAwC;EAC7C,WAAOf,uBAAuB,OAAO7F,mBAA9B,GACF7B,QADE,GAEFC,eAFL;EAGD,GAJM,AAL6C;EA2BpD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,MAAIqlC,oBAAoB,KAAKxlC,OAA7B,EAAsC;EACpCwlC,IAAAA,oBAAoB,GAAG5B,+BAAvB;EACD;;EAED,MAAMiC,YAAY,GAAG18B,wBAAwB,OAAOD,YAApD;;EACA,MAAI28B,YAAJ,EAAkB;EAChB,QAAIJ,wBAAwB,KAAKzlC,OAAjC,EAA0C;EACxCylC,MAAAA,wBAAwB,GACtBzB,uBAAuB,KAAK,IAA5B,GACIA,uBAAuB,CAACvhC,YAD5B,GAEIzC,OAHN;EAID;;EACD,WAAO2E,kBAAkB,CAAC6gC,oBAAD,EAAuBC,wBAAvB,CAAzB;EACD,GArDmD;EAwDpD;;;EACA,MAAMK,iBAAiB,GAAGl+B,uBAAuB,EAAjD,CAzDoD;EA4DpD;EACA;EACA;EACA;EACA;;EACA,MAAIpE,IAAJ;;EACA;EAEE,GAAC8/B,gBAAgB,GAAGX,oBAApB,MAA8CF,SAA9C,IACAqD,iBAAiB,KAAK9jC,sBAHxB,EAIE;EACAwB,IAAAA,IAAI,GAAGiB,cAAc,CAACvF,yBAAD,EAA4BsmC,oBAA5B,CAArB;EACD,GAND,MAMO;EACL,QAAMO,qBAAqB,GAAGlkC,+BAA+B,CAC3DikC,iBAD2D,CAA7D;;EAwBAtiC,IAAAA,IAAI,GAAGiB,cAAc,CAACshC,qBAAD,EAAwBP,oBAAxB,CAArB;EACD;;EAED,SAAOhiC,IAAP;EACD;;EAED,SAASwiC,gBAAT,CAA0Bh4C,KAA1B,EAAwC;EACtC;EACA;EACA;EAEA;EACA,MAAMmd,IAAI,GAAGnd,KAAK,CAACmd,IAAnB;;EACA,MAAI,CAACA,IAAI,GAAGtC,YAAR,MAA0BF,MAA9B,EAAsC;EACpC,WAAQzI,QAAR;EACD,GAFD,MAEO,IAAI,CAACiL,IAAI,GAAGrC,cAAR,MAA4BH,MAAhC,EAAwC;EAC7C,WAAOf,uBAAuB,OAAO7F,mBAA9B,GACF7B,QADE,GAEFC,eAFL;EAGD,GAbqC;;;EAgBtC,MAAIqlC,oBAAoB,KAAKxlC,OAA7B,EAAsC;EACpCwlC,IAAAA,oBAAoB,GAAG5B,+BAAvB;EACD;;EACD,SAAOh/B,aAAa,CAAC4gC,oBAAD,CAApB;EACD;;AAED,EAAO,SAAS1wB,qBAAT,CACL9mB,KADK,EAELwV,IAFK,EAGLI,SAHK,EAIL;EACAqiC,EAAAA,qBAAqB;EACrBC,EAAAA,gCAAgC,CAACl4C,KAAD,CAAhC;EAEA,MAAMmP,IAAI,GAAGgpC,6BAA6B,CAACn4C,KAAD,EAAQwV,IAAR,CAA1C;;EACA,MAAIrG,IAAI,KAAK,IAAb,EAAmB;EACjBipC,IAAAA,oCAAoC,CAACp4C,KAAD,CAApC;EACA,WAAO,IAAP;EACD,GARD;;;EAWA2X,EAAAA,eAAe,CAACxI,IAAD,EAAOqG,IAAP,EAAaI,SAAb,CAAf;;EAEA,MAAIzG,IAAI,KAAKomC,kBAAb,EAAiC;EAC/B;EACA;EACA;EACA;EACA;EACA,IAGE;EACAO,MAAAA,8BAA8B,GAAG1+B,UAAU,CACzC0+B,8BADyC,EAEzCtgC,IAFyC,CAA3C;EAID;;EACD,QAAIkgC,4BAA4B,KAAKN,sBAArC,EAA6D;EAC3D;EACA;EACA;EACA;EACA;EACA;EACAt9B,MAAAA,mBAAiB,CAAC3I,IAAD,EAAOqmC,6BAAP,CAAjB;EACD;EACF,GArCD;EAwCA;;;EACA,MAAMjmC,aAAa,GAAGqK,uBAAuB,EAA7C;;EAEA,MAAIpE,IAAI,KAAKtD,QAAb,EAAuB;EACrB;EAEE,KAACojC,gBAAgB,GAAGV,sBAApB,MAAgDH,SAAhD;EAEA,KAACa,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDL,SAJ3D,EAKE;EACA;EACA4D,MAAAA,2BAA2B,CAAClpC,IAAD,EAAOqG,IAAP,CAA3B,CAFA;EAKA;EACA;;EACA8iC,MAAAA,qBAAqB,CAACnpC,IAAD,CAArB;EACD,KAbD,MAaO;EACLopC,MAAAA,qBAAqB,CAACppC,IAAD,EAAOyG,SAAP,CAArB;EACAyiC,MAAAA,2BAA2B,CAAClpC,IAAD,EAAOqG,IAAP,CAA3B;;EACA,UAAI8/B,gBAAgB,KAAKb,SAAzB,EAAoC;EAClC;EACA;EACA;EACA;EACA;EACA6B,QAAAA,gBAAgB;EAChB/7B,QAAAA,sBAAsB;EACvB;EACF;EACF,GA3BD,MA2BO;EACL;EACA,QACE,CAAC+6B,gBAAgB,GAAGX,oBAApB,MAA8CF,SAA9C;EAEA;EACCllC,IAAAA,aAAa,KAAKyE,sBAAlB,IACCzE,aAAa,KAAKwE,mBAJpB,CADF,EAME;EACA;EACA;EACA,UAAIijC,+BAA+B,KAAK,IAAxC,EAA8C;EAC5CA,QAAAA,+BAA+B,GAAG,IAAIh5B,GAAJ,CAAQ,CAAC7O,IAAD,CAAR,CAAlC;EACD,OAFD,MAEO;EACL6nC,QAAAA,+BAA+B,CAACv4B,GAAhC,CAAoCtP,IAApC;EACD;EACF,KAhBI;;;EAkBLopC,IAAAA,qBAAqB,CAACppC,IAAD,EAAOyG,SAAP,CAArB;EACAyiC,IAAAA,2BAA2B,CAAClpC,IAAD,EAAOqG,IAAP,CAA3B;EACD,GA1FD;EA6FA;EACA;EACA;EACA;;;EACAwgC,EAAAA,uBAAuB,GAAG7mC,IAA1B;EACD;EAGD;EACA;EACA;;EACA,SAASgpC,6BAAT,CACEhM,WADF,EAEE32B,IAFF,EAGoB;EAClB;EACA22B,EAAAA,WAAW,CAAC74B,KAAZ,GAAoB8D,UAAU,CAAC+0B,WAAW,CAAC74B,KAAb,EAAoBkC,IAApB,CAA9B;EACA,MAAIrV,SAAS,GAAGgsC,WAAW,CAAChsC,SAA5B;;EACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;EACtBA,IAAAA,SAAS,CAACmT,KAAV,GAAkB8D,UAAU,CAACjX,SAAS,CAACmT,KAAX,EAAkBkC,IAAlB,CAA5B;EACD;;EACD,EAAa;EACX,QACErV,SAAS,KAAK,IAAd,IACA,CAACgsC,WAAW,CAAC9rC,KAAZ,IAAqB9B,SAAS,GAAGW,SAAjC,CAAD,MAAkDb,OAFpD,EAGE;EACAm6C,MAAAA,wCAAwC,CAACrM,WAAD,CAAxC;EACD;EACF,GAdiB;;;EAgBlB,MAAIlsC,IAAI,GAAGksC,WAAX;EACA,MAAIvqC,MAAM,GAAGuqC,WAAW,CAAC7rC,MAAzB;;EACA,SAAOsB,MAAM,KAAK,IAAlB,EAAwB;EACtBA,IAAAA,MAAM,CAAC0f,UAAP,GAAoBlK,UAAU,CAACxV,MAAM,CAAC0f,UAAR,EAAoB9L,IAApB,CAA9B;EACArV,IAAAA,SAAS,GAAGyB,MAAM,CAACzB,SAAnB;;EACA,QAAIA,SAAS,KAAK,IAAlB,EAAwB;EACtBA,MAAAA,SAAS,CAACmhB,UAAV,GAAuBlK,UAAU,CAACjX,SAAS,CAACmhB,UAAX,EAAuB9L,IAAvB,CAAjC;EACD,KAFD,MAEO;EACL,MAAa;EACX,YAAI,CAAC5T,MAAM,CAACvB,KAAP,IAAgB9B,SAAS,GAAGW,SAA5B,CAAD,MAA6Cb,OAAjD,EAA0D;EACxDm6C,UAAAA,wCAAwC,CAACrM,WAAD,CAAxC;EACD;EACF;EACF;;EACDlsC,IAAAA,IAAI,GAAG2B,MAAP;EACAA,IAAAA,MAAM,GAAGA,MAAM,CAACtB,MAAhB;EACD;;EACD,MAAIL,IAAI,CAACzC,GAAL,KAAalE,QAAjB,EAA2B;EACzB,QAAM6V,IAAe,GAAGlP,IAAI,CAACa,SAA7B;EACA,WAAOqO,IAAP;EACD,GAHD,MAGO;EACL,WAAO,IAAP;EACD;EACF;EAGD;EACA;EACA;EACA;;;EACA,SAASopC,qBAAT,CAA+BppC,IAA/B,EAAgD2G,WAAhD,EAAqE;EACnE,MAAM2iC,oBAAoB,GAAGtpC,IAAI,CAACmL,YAAlC,CADmE;EAInE;;EACAtE,EAAAA,yBAAyB,CAAC7G,IAAD,EAAO2G,WAAP,CAAzB,CALmE;;EAQnE,MAAMpB,SAAS,GAAGH,YAAY,CAC5BpF,IAD4B,EAE5BA,IAAI,KAAKomC,kBAAT,GAA8BC,6BAA9B,GAA8DxjC,OAFlC,CAA9B,CARmE;;EAanE,MAAM0mC,mBAAmB,GAAGriC,uBAAuB,EAAnD;;EAEA,MAAI3B,SAAS,KAAK1C,OAAlB,EAA2B;EACzB;EACA,QAAIymC,oBAAoB,KAAK,IAA7B,EAAmC;EACjCp+B,MAAAA,cAAc,CAACo+B,oBAAD,CAAd;EACAtpC,MAAAA,IAAI,CAACmL,YAAL,GAAoB,IAApB;EACAnL,MAAAA,IAAI,CAACwpC,gBAAL,GAAwB7mC,cAAxB;EACD;;EACD;EACD,GAvBkE;;;EA0BnE,MAAI2mC,oBAAoB,KAAK,IAA7B,EAAmC;EACjC,QAAMG,wBAAwB,GAAGzpC,IAAI,CAACwpC,gBAAtC;;EACA,QAAIC,wBAAwB,KAAKF,mBAAjC,EAAsD;EACpD;EACA;EACD,KALgC;EAOjC;;;EACAr+B,IAAAA,cAAc,CAACo+B,oBAAD,CAAd;EACD,GAnCkE;;;EAsCnE,MAAII,eAAJ;;EACA,MAAIH,mBAAmB,KAAK3nC,gBAA5B,EAA8C;EAC5C;EACA;EACA8nC,IAAAA,eAAe,GAAG1+B,oBAAoB,CACpCm+B,qBAAqB,CAAC/sC,IAAtB,CAA2B,IAA3B,EAAiC4D,IAAjC,CADoC,CAAtC;EAGD,GAND,MAMO,IAAIupC,mBAAmB,KAAK1nC,uBAA5B,EAAqD;EAC1D6nC,IAAAA,eAAe,GAAG7+B,gBAAgB,CAChCjG,mBADgC,EAEhCukC,qBAAqB,CAAC/sC,IAAtB,CAA2B,IAA3B,EAAiC4D,IAAjC,CAFgC,CAAlC;EAID,GALM,MAKA;EACL,QAAM2E,sBAAsB,GAAGM,+BAA+B,CAC5DskC,mBAD4D,CAA9D;EAGAG,IAAAA,eAAe,GAAG7+B,gBAAgB,CAChClG,sBADgC,EAEhCglC,2BAA2B,CAACvtC,IAA5B,CAAiC,IAAjC,EAAuC4D,IAAvC,CAFgC,CAAlC;EAID;;EAEDA,EAAAA,IAAI,CAACwpC,gBAAL,GAAwBD,mBAAxB;EACAvpC,EAAAA,IAAI,CAACmL,YAAL,GAAoBu+B,eAApB;EACD;EAGD;;;EACA,SAASC,2BAAT,CAAqC3pC,IAArC,EAA2C;EACzC;EACA;EACAooC,EAAAA,gBAAgB,GAAGpkC,WAAnB;EACAqkC,EAAAA,oBAAoB,GAAGxlC,OAAvB;EACAylC,EAAAA,wBAAwB,GAAGzlC,OAA3B;;EALyC,QAQvC,CAACsjC,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDL,SARlB;EAAA;EAAA;EAAA;EAAA;EAazC;;;EACA,MAAMsE,oBAAoB,GAAG5pC,IAAI,CAACmL,YAAlC;EACA,MAAM0+B,sBAAsB,GAAGC,mBAAmB,EAAlD;;EACA,MAAID,sBAAJ,EAA4B;EAC1B;EACA;EACA,QAAI7pC,IAAI,CAACmL,YAAL,KAAsBy+B,oBAA1B,EAAgD;EAC9C;EACA;EACA;EACA,aAAO,IAAP;EACD,KALD;EAQD,GA3BwC;EA8BzC;;;EACA,MAAIzlC,KAAK,GAAGiB,YAAY,CACtBpF,IADsB,EAEtBA,IAAI,KAAKomC,kBAAT,GAA8BC,6BAA9B,GAA8DxjC,OAFxC,CAAxB;;EAIA,MAAIsB,KAAK,KAAKtB,OAAd,EAAuB;EACrB;EACA,WAAO,IAAP;EACD;;EAED,MAAIknC,UAAU,GAAGC,oBAAoB,CAAChqC,IAAD,EAAOmE,KAAP,CAArC;;EAEA,MACE2D,gBAAgB,CACd2+B,+BADc,EAEdE,8BAFc,CADlB,EAKE;EACA;EACA;EACA;EACA;EACA;EACA;EACAsD,IAAAA,iBAAiB,CAACjqC,IAAD,EAAO6C,OAAP,CAAjB;EACD,GAbD,MAaO,IAAIknC,UAAU,KAAKlE,cAAnB,EAAmC;EACxC,QAAIkE,UAAU,KAAKhE,WAAnB,EAAgC;EAC9BI,MAAAA,gBAAgB,IAAIP,eAApB,CAD8B;EAI9B;;EACA,UAAI5lC,IAAI,CAACmzB,OAAT,EAAkB;EAChBnzB,QAAAA,IAAI,CAACmzB,OAAL,GAAe,KAAf;EACAv+B,QAAAA,cAAc,CAACoL,IAAI,CAAC9K,aAAN,CAAd;EACD,OAR6B;EAW9B;EACA;EACA;;;EACAiP,MAAAA,KAAK,GAAG6C,mCAAmC,CAAChH,IAAD,CAA3C;;EACA,UAAImE,KAAK,KAAKtB,OAAd,EAAuB;EACrBknC,QAAAA,UAAU,GAAGG,cAAc,CAAClqC,IAAD,EAAOmE,KAAP,CAA3B;EACD;EACF;;EAED,QAAI4lC,UAAU,KAAKjE,gBAAnB,EAAqC;EACnC,UAAMqE,UAAU,GAAG3D,4BAAnB;EACAyD,MAAAA,iBAAiB,CAACjqC,IAAD,EAAO6C,OAAP,CAAjB;EACA8F,MAAAA,mBAAiB,CAAC3I,IAAD,EAAOmE,KAAP,CAAjB;EACAilC,MAAAA,qBAAqB,CAACppC,IAAD,EAAOwK,GAAG,EAAV,CAArB;EACA,YAAM2/B,UAAN;EACD,KA3BuC;EA8BxC;;;EACA,QAAMh0B,YAAmB,GAAInW,IAAI,CAACxO,OAAL,CAAaR,SAA1C;EACAgP,IAAAA,IAAI,CAACmW,YAAL,GAAoBA,YAApB;EACAnW,IAAAA,IAAI,CAACoqC,aAAL,GAAqBjmC,KAArB;EACAkmC,IAAAA,sBAAsB,CAACrqC,IAAD,EAAO+pC,UAAP,EAAmB5lC,KAAnB,CAAtB;EACD;;EAEDilC,EAAAA,qBAAqB,CAACppC,IAAD,EAAOwK,GAAG,EAAV,CAArB;;EACA,MAAIxK,IAAI,CAACmL,YAAL,KAAsBy+B,oBAA1B,EAAgD;EAC9C;EACA;EACA,WAAOD,2BAA2B,CAACvtC,IAA5B,CAAiC,IAAjC,EAAuC4D,IAAvC,CAAP;EACD;;EACD,SAAO,IAAP;EACD;;EAED,SAASqqC,sBAAT,CAAgCrqC,IAAhC,EAAsC+pC,UAAtC,EAAkD5lC,KAAlD,EAAyD;EACvD,UAAQ4lC,UAAR;EACE,SAAKlE,cAAL;EACA,SAAKC,gBAAL;EAAuB;EAAA;EAAA;EAAA;EAAA;EAAA;EAEtB;EACD;EACA;EACA;;EACA,SAAKC,WAAL;EAAkB;EAChB;EACA;EACAuE,QAAAA,UAAU,CAACtqC,IAAD,CAAV;EACA;EACD;;EACD,SAAKgmC,aAAL;EAAoB;EAClBr9B,QAAAA,mBAAiB,CAAC3I,IAAD,EAAOmE,KAAP,CAAjB,CADkB;EAIlB;;EAEA,YACEiD,mBAAmB,CAACjD,KAAD,CAAnB;EAEA,SAAComC,8BAA8B,EAHjC,EAIE;EACA;EACA;EACA,cAAMC,cAAc,GAClB1D,4BAA4B,GAAGC,oBAA/B,GAAsDv8B,GAAG,EAD3D,CAHA;;EAMA,cAAIggC,cAAc,GAAG,EAArB,EAAyB;EACvB,gBAAMjlC,SAAS,GAAGH,YAAY,CAACpF,IAAD,EAAO6C,OAAP,CAA9B;;EACA,gBAAI0C,SAAS,KAAK1C,OAAlB,EAA2B;EACzB;EACA;EACD;;EACD,gBAAM6C,cAAc,GAAG1F,IAAI,CAAC0F,cAA5B;;EACA,gBAAI,CAACqC,eAAe,CAACrC,cAAD,EAAiBvB,KAAjB,CAApB,EAA6C;EAC3C;EACA;EACA;EACA;EACA,kBAAMsC,SAAS,GAAGgR,gBAAgB,EAAlC;EACA7O,cAAAA,cAAc,CAAC5I,IAAD,EAAO0F,cAAP,AAAA,CAAd;EACA;EACD,aAfsB;EAkBvB;EACA;;;EACA1F,YAAAA,IAAI,CAACyqC,aAAL,GAAqBz0C,eAAe,CAClCs0C,UAAU,CAACluC,IAAX,CAAgB,IAAhB,EAAsB4D,IAAtB,CADkC,EAElCwqC,cAFkC,CAApC;EAIA;EACD;EACF,SA1CiB;;;EA4ClBF,QAAAA,UAAU,CAACtqC,IAAD,CAAV;EACA;EACD;;EACD,SAAKimC,sBAAL;EAA6B;EAC3Bt9B,QAAAA,mBAAiB,CAAC3I,IAAD,EAAOmE,KAAP,CAAjB;;EAEA,YAAIkD,uBAAuB,CAAClD,KAAD,CAA3B,EAAoC;EAClC;EACA;EACA;EACA;EACD;;EAED,YAAI,CAAComC,8BAA8B,EAAnC,EAAuC;EACrC;EACA;EACA;EACA;EACA;EACA;EAEA,cAAM/jC,mBAAmB,GAAGF,sBAAsB,CAACtG,IAAD,EAAOmE,KAAP,CAAlD;EACA,cAAMumC,WAAW,GAAGlkC,mBAApB;EACA,cAAMmkC,aAAa,GAAGngC,GAAG,KAAKkgC,WAA9B;;EACA,cAAMF,eAAc,GAAGI,GAAG,CAACD,aAAD,CAAH,GAAqBA,aAA5C,CAXqC;;;EAcrC,cAAIH,eAAc,GAAG,EAArB,EAAyB;EACvB;EACA;EACAxqC,YAAAA,IAAI,CAACyqC,aAAL,GAAqBz0C,eAAe,CAClCs0C,UAAU,CAACluC,IAAX,CAAgB,IAAhB,EAAsB4D,IAAtB,CADkC,EAElCwqC,eAFkC,CAApC;EAIA;EACD;EACF,SAjC0B;;;EAoC3BF,QAAAA,UAAU,CAACtqC,IAAD,CAAV;EACA;EACD;;EACD,SAAKkmC,aAAL;EAAoB;EAClB;EACAoE,QAAAA,UAAU,CAACtqC,IAAD,CAAV;EACA;EACD;;EACD;EAAS;EAAA;EAAA;EAAA;EAAA;EAAA;EAER;EA3GH;EA6GD;;EAED,SAAS2I,mBAAT,CAA2B3I,IAA3B,EAAiC0F,cAAjC,EAAiD;EAC/C;EACA;EACA;EACA;EACAA,EAAAA,cAAc,GAAGwC,WAAW,CAACxC,cAAD,EAAiBkhC,6BAAjB,CAA5B;EACAlhC,EAAAA,cAAc,GAAGwC,WAAW,CAACxC,cAAD,EAAiBihC,8BAAjB,CAA5B;EACAkE,EAAAA,iBAAyC,CAAC7qC,IAAD,EAAO0F,cAAP,CAAzC;EACD;EAGD;;;EACA,SAASyjC,qBAAT,CAA+BnpC,IAA/B,EAAqC;EAAA,QAEjC,CAACmmC,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDL,SAFxB;EAAA;EAAA;EAAA;EAAA;;EAMnCwE,EAAAA,mBAAmB;EAEnB,MAAI3lC,KAAJ;EACA,MAAI4lC,UAAJ;;EACA,MACE/pC,IAAI,KAAKomC,kBAAT,IACAt+B,gBAAgB,CAAC9H,IAAI,CAACyF,YAAN,EAAoB4gC,6BAApB,CAFlB,EAGE;EACA;EACA;EACAliC,IAAAA,KAAK,GAAGkiC,6BAAR;EACA0D,IAAAA,UAAU,GAAGG,cAAc,CAAClqC,IAAD,EAAOmE,KAAP,CAA3B;;EACA,QACE2D,gBAAgB,CACd2+B,+BADc,EAEdE,8BAFc,CADlB,EAKE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAxiC,MAAAA,KAAK,GAAGiB,YAAY,CAACpF,IAAD,EAAOmE,KAAP,CAApB;EACA4lC,MAAAA,UAAU,GAAGG,cAAc,CAAClqC,IAAD,EAAOmE,KAAP,CAA3B;EACD;EACF,GAzBD,MAyBO;EACLA,IAAAA,KAAK,GAAGiB,YAAY,CAACpF,IAAD,EAAO6C,OAAP,CAApB;EACAknC,IAAAA,UAAU,GAAGG,cAAc,CAAClqC,IAAD,EAAOmE,KAAP,CAA3B;EACD;;EAED,MAAInE,IAAI,CAAC3R,GAAL,KAAa4Q,UAAb,IAA2B8qC,UAAU,KAAKhE,WAA9C,EAA2D;EACzDI,IAAAA,gBAAgB,IAAIP,eAApB,CADyD;EAIzD;;EACA,QAAI5lC,IAAI,CAACmzB,OAAT,EAAkB;EAChBnzB,MAAAA,IAAI,CAACmzB,OAAL,GAAe,KAAf;EACAv+B,MAAAA,cAAc,CAACoL,IAAI,CAAC9K,aAAN,CAAd;EACD,KARwD;EAWzD;EACA;EACA;;;EACAiP,IAAAA,KAAK,GAAG6C,mCAAmC,CAAChH,IAAD,CAA3C;;EACA,QAAImE,KAAK,KAAKtB,OAAd,EAAuB;EACrBknC,MAAAA,UAAU,GAAGG,cAAc,CAAClqC,IAAD,EAAOmE,KAAP,CAA3B;EACD;EACF;;EAED,MAAI4lC,UAAU,KAAKjE,gBAAnB,EAAqC;EACnC,QAAMqE,UAAU,GAAG3D,4BAAnB;EACAyD,IAAAA,iBAAiB,CAACjqC,IAAD,EAAO6C,OAAP,CAAjB;EACA8F,IAAAA,mBAAiB,CAAC3I,IAAD,EAAOmE,KAAP,CAAjB;EACAilC,IAAAA,qBAAqB,CAACppC,IAAD,EAAOwK,GAAG,EAAV,CAArB;EACA,UAAM2/B,UAAN;EACD,GAlEkC;EAqEnC;;;EACA,MAAMh0B,YAAmB,GAAInW,IAAI,CAACxO,OAAL,CAAaR,SAA1C;EACAgP,EAAAA,IAAI,CAACmW,YAAL,GAAoBA,YAApB;EACAnW,EAAAA,IAAI,CAACoqC,aAAL,GAAqBjmC,KAArB;EACAmmC,EAAAA,UAAU,CAACtqC,IAAD,CAAV,CAzEmC;EA4EnC;;EACAopC,EAAAA,qBAAqB,CAACppC,IAAD,EAAOwK,GAAG,EAAV,CAArB;EAEA,SAAO,IAAP;EACD;;AAwED,EAAO,SAASsgC,cAAT,CAA8BhxC,EAA9B,EAA0C9H,CAA1C,EAAmD;EACxD,MAAM+4C,oBAAoB,GAAG5E,gBAA7B;EACAA,EAAAA,gBAAgB,IAAIZ,cAApB;;EACA,MAAI;EACF,WAAOzrC,EAAE,CAAC9H,CAAD,CAAT;EACD,GAFD,SAEU;EACRm0C,IAAAA,gBAAgB,GAAG4E,oBAAnB;;EACA,QAAI5E,gBAAgB,KAAKb,SAAzB,EAAoC;EAClC;EACA6B,MAAAA,gBAAgB;EAChB/7B,MAAAA,sBAAsB;EACvB;EACF;EACF;AAED,EA2EO,SAAS4/B,SAAT,CAAyBlxC,EAAzB,EAAqC9H,CAArC,EAA8C;EACnD,MAAM+4C,oBAAoB,GAAG5E,gBAA7B;;EACA,MAAI,CAAC4E,oBAAoB,IAAIrF,aAAa,GAAGC,aAApB,CAArB,MAA6DL,SAAjE,EAA4E;EAC1E,IAAa;EACX,YACE,uEACE,sEADF,GAEE,iCAHJ;EAKD;;EACD,WAAOxrC,EAAE,CAAC9H,CAAD,CAAT;EACD;;EACDm0C,EAAAA,gBAAgB,IAAIZ,cAApB;;EAEA,EAiBO;EACL,QAAI;EACF,UAAIzrC,EAAJ,EAAQ;EACN,eAAO8Q,eAAe,CAAChG,mBAAD,EAA6B9K,EAAE,CAACsC,IAAH,CAAQ,IAAR,EAAcpK,CAAd,CAA7B,CAAtB;EACD,OAFD,MAEO;EACL,eAAQqH,SAAR;EACD;EACF,KAND,SAMU;EACR8sC,MAAAA,gBAAgB,GAAG4E,oBAAnB,CADQ;EAGR;EACA;;EACA3/B,MAAAA,sBAAsB;EACvB;EACF;EACF;AAED,EAgCO,SAASwmB,eAAT,CAAyB/gC,KAAzB,EAAuCsT,KAAvC,EAAqD;EAC1D8mC,EAAAA,IAAW,CAAC3E,wBAAD,EAA2BtU,kBAA3B,EAA+CnhC,KAA/C,CAAX;EACAmhC,EAAAA,kBAAkB,GAAG/pB,UAAU,CAAC+pB,kBAAD,EAAqB7tB,KAArB,CAA/B;EACAsiC,EAAAA,+BAA+B,GAAGx+B,UAAU,CAC1Cw+B,+BAD0C,EAE1CtiC,KAF0C,CAA5C;EAID;AAED,EAAO,SAAS42B,cAAT,CAAwBlqC,KAAxB,EAAsC;EAC3CmhC,EAAAA,kBAAkB,GAAGsU,wBAAwB,CAAC90C,OAA9C;EACA05C,EAAAA,GAAY,CAAC5E,wBAAD,EAA2Bz1C,KAA3B,CAAZ;EACD;;EAED,SAASo5C,iBAAT,CAA2BjqC,IAA3B,EAA4CmE,KAA5C,EAA0D;EACxDnE,EAAAA,IAAI,CAACmW,YAAL,GAAoB,IAApB;EACAnW,EAAAA,IAAI,CAACoqC,aAAL,GAAqBvnC,OAArB;EAEA,MAAM4nC,aAAa,GAAGzqC,IAAI,CAACyqC,aAA3B;;EACA,MAAIA,aAAa,KAAKr0C,SAAtB,EAAiC;EAC/B;EACA;EACA4J,IAAAA,IAAI,CAACyqC,aAAL,GAAqBr0C,SAArB,CAH+B;;EAK/BF,IAAAA,aAAa,CAACu0C,aAAD,CAAb;EACD;;EAED,MAAIntC,cAAc,KAAK,IAAvB,EAA6B;EAC3B,QAAI89B,eAAe,GAAG99B,cAAc,CAACnM,MAArC;;EACA,WAAOiqC,eAAe,KAAK,IAA3B,EAAiC;EAC/BD,MAAAA,qBAAqB,CAACC,eAAD,CAArB;EACAA,MAAAA,eAAe,GAAGA,eAAe,CAACjqC,MAAlC;EACD;EACF;;EACDi1C,EAAAA,kBAAkB,GAAGpmC,IAArB;EACA1C,EAAAA,cAAc,GAAG0f,oBAAoB,CAAChd,IAAI,CAACxO,OAAN,EAAe,IAAf,CAArC;EACA60C,EAAAA,6BAA6B,GAAGrU,kBAAkB,GAAGyU,+BAA+B,GAAGtiC,KAAvF;EACAoiC,EAAAA,4BAA4B,GAAGV,cAA/B;EACAW,EAAAA,4BAA4B,GAAG,IAA/B;EACAE,EAAAA,8BAA8B,GAAG7jC,OAAjC;EACA8jC,EAAAA,8BAA8B,GAAG9jC,OAAjC;EACA+jC,EAAAA,6BAA6B,GAAG/jC,OAAhC;;EAEA,EAA4B;EAC1BslC,IAAAA,uBAAuB,GAAG,IAA1B;EACD;;EAED,EAAa;EACX36B,IAAAA,uBAAuB,CAACK,sBAAxB;EACD;EACF;;EAED,SAASs9B,WAAT,CAAqBnrC,IAArB,EAA2BorC,WAA3B,EAA8C;EAC5C,KAAG;EACD,QAAIC,WAAW,GAAG/tC,cAAlB;;EACA,QAAI;EACF;EACA4T,MAAAA,wBAAwB;EACxBmV,MAAAA,oBAAoB;EACpB/V,MAAAA,iBAA2B,GAJzB;EAMF;;EACA3f,MAAAA,mBAAiB,CAACa,OAAlB,GAA4B,IAA5B;;EAEA,UAAI65C,WAAW,KAAK,IAAhB,IAAwBA,WAAW,CAACl6C,MAAZ,KAAuB,IAAnD,EAAyD;EACvD;EACA;EACA;EACA;EACAo1C,QAAAA,4BAA4B,GAAGT,gBAA/B;EACAU,QAAAA,4BAA4B,GAAG4E,WAA/B,CANuD;EAQvD;EACA;EACA;EACA;EACA;;EACA9tC,QAAAA,cAAc,GAAG,IAAjB;EACA;EACD;;EAED,UAAIhN,mBAAmB,IAAI+6C,WAAW,CAACr9B,IAAZ,GAAmBpC,WAA9C,EAA2D;EACzD;EACA;EACA;EACA2jB,QAAAA,wCAAwC,CAAC8b,WAAD,EAAc,IAAd,CAAxC;EACD;;EAEDtO,MAAAA,cAAc,CACZ/8B,IADY,EAEZqrC,WAAW,CAACl6C,MAFA,EAGZk6C,WAHY,EAIZD,WAJY,EAKZ/E,6BALY,CAAd;EAOAiF,MAAAA,kBAAkB,CAACD,WAAD,CAAlB;EACD,KAzCD,CAyCE,OAAOE,qBAAP,EAA8B;EAC9B;EACAH,MAAAA,WAAW,GAAGG,qBAAd;;EACA,UAAIjuC,cAAc,KAAK+tC,WAAnB,IAAkCA,WAAW,KAAK,IAAtD,EAA4D;EAC1D;EACA;EACAA,QAAAA,WAAW,GAAGA,WAAW,CAACl6C,MAA1B;EACAmM,QAAAA,cAAc,GAAG+tC,WAAjB;EACD,OALD,MAKO;EACLA,QAAAA,WAAW,GAAG/tC,cAAd;EACD;;EACD;EACD,KAvDA;;;EAyDD;EACD,GA1DD,QA0DS,IA1DT;EA2DD;;EAED,SAASkuC,cAAT,GAA0B;EACxB,MAAM7d,cAAc,GAAG30B,wBAAsB,CAACxH,OAA9C;EACAwH,EAAAA,wBAAsB,CAACxH,OAAvB,GAAiCw0B,qBAAjC;;EACA,MAAI2H,cAAc,KAAK,IAAvB,EAA6B;EAC3B;EACA;EACA;EACA,WAAO3H,qBAAP;EACD,GALD,MAKO;EACL,WAAO2H,cAAP;EACD;EACF;;EAED,SAAS8d,aAAT,CAAuB9d,cAAvB,EAAuC;EACrC30B,EAAAA,wBAAsB,CAACxH,OAAvB,GAAiCm8B,cAAjC;EACD;;EAED,SAAS+d,gBAAT,CAA0B1rC,IAA1B,EAAgC;EAC9B,EAA4B;EAC1B,QAAM2rC,gBAAyC,GAAGjrC,iBAAiB,CAAClP,OAApE;EACAkP,IAAAA,iBAAiB,CAAClP,OAAlB,GAA4BwO,IAAI,CAACwhC,oBAAjC;EACA,WAAOmK,gBAAP;EACD;EAEF;;EAED,SAASC,eAAT,CAAyBD,gBAAzB,EAA2C;EACzC,EAA4B;EAC1BjrC,IAAAA,iBAAiB,CAAClP,OAAlB,GAA4Bm6C,gBAA5B;EACD;EACF;;AAED,EAAO,SAASrI,wBAAT,GAAoC;EACzCwD,EAAAA,4BAA4B,GAAGt8B,GAAG,EAAlC;EACD;AAED,EAAO,SAASsL,sBAAT,CAAgCzP,IAAhC,EAA0D;EAC/DqgC,EAAAA,8BAA8B,GAAGz+B,UAAU,CACzC5B,IADyC,EAEzCqgC,8BAFyC,CAA3C;EAID;AAED,EAAO,SAASrM,gBAAT,GAAkC;EACvC,MAAIkM,4BAA4B,KAAKV,cAArC,EAAqD;EACnDU,IAAAA,4BAA4B,GAAGP,aAA/B;EACD;EACF;AAED,EAAO,SAAS1L,+BAAT,GAAiD;EACtD,MACEiM,4BAA4B,KAAKV,cAAjC,IACAU,4BAA4B,KAAKP,aAFnC,EAGE;EACAO,IAAAA,4BAA4B,GAAGN,sBAA/B;EACD,GANqD;EAStD;;;EACA,MACEG,kBAAkB,KAAK,IAAvB,KACCj/B,mBAAmB,CAACu/B,8BAAD,CAAnB,IACCv/B,mBAAmB,CAACw/B,8BAAD,CAFrB,CADF,EAIE;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAh+B,IAAAA,mBAAiB,CAACy9B,kBAAD,EAAqBC,6BAArB,CAAjB;EACD;EACF;AAED,EAAO,SAAS/I,cAAT,GAA0B;EAC/B,MAAIiJ,4BAA4B,KAAKL,aAArC,EAAoD;EAClDK,IAAAA,4BAA4B,GAAGR,WAA/B;EACD;EACF;EAGD;;AACA,EAAO,SAASrL,wBAAT,GAA6C;EAClD;EACA;EACA,SAAO6L,4BAA4B,KAAKV,cAAxC;EACD;;EAED,SAASqE,cAAT,CAAwBlqC,IAAxB,EAAyCmE,KAAzC,EAAuD;EACrD,MAAM4mC,oBAAoB,GAAG5E,gBAA7B;EACAA,EAAAA,gBAAgB,IAAIT,aAApB;EACA,MAAM/X,cAAc,GAAG6d,cAAc,EAArC,CAHqD;EAMrD;;EACA,MAAIpF,kBAAkB,KAAKpmC,IAAvB,IAA+BqmC,6BAA6B,KAAKliC,KAArE,EAA4E;EAC1E8lC,IAAAA,iBAAiB,CAACjqC,IAAD,EAAOmE,KAAP,CAAjB;EACA0nC,IAAAA,8BAA8B,CAAC7rC,IAAD,EAAOmE,KAAP,CAA9B;EACD;;EAED,MAAMwnC,gBAAgB,GAAGD,gBAAgB,CAAC1rC,IAAD,CAAzC;;EAYA,KAAG;EACD,QAAI;EACF8rC,MAAAA,YAAY;EACZ;EACD,KAHD,CAGE,OAAOV,WAAP,EAAoB;EACpBD,MAAAA,WAAW,CAACnrC,IAAD,EAAOorC,WAAP,CAAX;EACD;EACF,GAPD,QAOS,IAPT;;EAQAl6B,EAAAA,wBAAwB;;EACxB,EAA4B;EAC1B06B,IAAAA,eAAe,CAAGD,gBAAH,CAAf;EACD;;EAEDxF,EAAAA,gBAAgB,GAAG4E,oBAAnB;EACAU,EAAAA,aAAa,CAAC9d,cAAD,CAAb;;EAEA,MAAIrwB,cAAc,KAAK,IAAvB,EAA6B;EAC3B;EAD2B;EAAA;EAAA;EAAA;EAAA;EAO5B;;;EAaD8oC,EAAAA,kBAAkB,GAAG,IAArB;EACAC,EAAAA,6BAA6B,GAAGxjC,OAAhC;EAEA,SAAO0jC,4BAAP;EACD;;EAGD;;;EACA,SAASuF,YAAT,GAAwB;EACtB;EACA,SAAOxuC,cAAc,KAAK,IAA1B,EAAgC;EAC9ByuC,IAAAA,iBAAiB,CAACzuC,cAAD,CAAjB;EACD;EACF;;EAED,SAAS0sC,oBAAT,CAA8BhqC,IAA9B,EAA+CmE,KAA/C,EAA6D;EAC3D,MAAM4mC,oBAAoB,GAAG5E,gBAA7B;EACAA,EAAAA,gBAAgB,IAAIT,aAApB;EACA,MAAM/X,cAAc,GAAG6d,cAAc,EAArC,CAH2D;EAM3D;;EACA,MAAIpF,kBAAkB,KAAKpmC,IAAvB,IAA+BqmC,6BAA6B,KAAKliC,KAArE,EAA4E;EAC1EgjC,IAAAA,gBAAgB;EAChB8C,IAAAA,iBAAiB,CAACjqC,IAAD,EAAOmE,KAAP,CAAjB;EACA0nC,IAAAA,8BAA8B,CAAC7rC,IAAD,EAAOmE,KAAP,CAA9B;EACD;;EAED,MAAMwnC,gBAAgB,GAAGD,gBAAgB,CAAC1rC,IAAD,CAAzC;;EAYA,KAAG;EACD,QAAI;EACFgsC,MAAAA,kBAAkB;EAClB;EACD,KAHD,CAGE,OAAOZ,WAAP,EAAoB;EACpBD,MAAAA,WAAW,CAACnrC,IAAD,EAAOorC,WAAP,CAAX;EACD;EACF,GAPD,QAOS,IAPT;;EAQAl6B,EAAAA,wBAAwB;;EACxB,EAA4B;EAC1B06B,IAAAA,eAAe,CAAGD,gBAAH,CAAf;EACD;;EAEDF,EAAAA,aAAa,CAAC9d,cAAD,CAAb;EACAwY,EAAAA,gBAAgB,GAAG4E,oBAAnB;;;EASA,MAAIztC,cAAc,KAAK,IAAvB,EAA6B;AAC3B;EAIA,WAAOuoC,cAAP;EACD,GAND,MAMO;AACL;;EAMAO,IAAAA,kBAAkB,GAAG,IAArB;EACAC,IAAAA,6BAA6B,GAAGxjC,OAAhC,CARK;;EAWL,WAAO0jC,4BAAP;EACD;EACF;EAED;;;EACA,SAASyF,kBAAT,GAA8B;EAC5B;EACA,SAAO1uC,cAAc,KAAK,IAAnB,IAA2B,CAAC6M,WAAW,EAA9C,EAAkD;EAChD4hC,IAAAA,iBAAiB,CAACzuC,cAAD,CAAjB;EACD;EACF;;EAED,SAASyuC,iBAAT,CAA2BE,UAA3B,EAAoD;EAClD;EACA;EACA;EACA,MAAMz6C,OAAO,GAAGy6C,UAAU,CAACj7C,SAA3B;EACAqf,EAAAA,eAAyB,CAAC47B,UAAD,CAAzB;EAEA,MAAIl5B,IAAJ;;EACA,MAAIziB,CAAuB,CAAC27C,UAAU,CAACj+B,IAAX,GAAkBpC,WAAnB,MAAoCJ,MAA/D,EAAuE;EACrE4jB,IAAAA,kBAAkB,CAAC6c,UAAD,CAAlB;EACAl5B,IAAAA,IAAI,GAAG+lB,WAAS,CAACtnC,OAAD,EAAUy6C,UAAV,EAAsBja,kBAAtB,CAAhB;EACAzC,IAAAA,wCAAwC,CAAC0c,UAAD,EAAa,IAAb,CAAxC;EACD,GAJD,MAIO;EACLl5B,IAAAA,IAAI,GAAG+lB,WAAS,CAACtnC,OAAD,EAAUy6C,UAAV,EAAsBja,kBAAtB,CAAhB;EACD;;EAED1hB,EAAAA,iBAA2B;EAC3B27B,EAAAA,UAAU,CAAC3xB,aAAX,GAA2B2xB,UAAU,CAACnxB,YAAtC;;EACA,MAAI/H,IAAI,KAAK,IAAb,EAAmB;EACjB;EACAu4B,IAAAA,kBAAkB,CAACW,UAAD,CAAlB;EACD,GAHD,MAGO;EACL3uC,IAAAA,cAAc,GAAGyV,IAAjB;EACD;;EAEDpiB,EAAAA,mBAAiB,CAACa,OAAlB,GAA4B,IAA5B;EACD;;EAED,SAAS85C,kBAAT,CAA4BW,UAA5B,EAAqD;EACnD;EACA;EACA,MAAIC,aAAa,GAAGD,UAApB;;EACA,KAAG;EACD;EACA;EACA;EACA,QAAMz6C,OAAO,GAAG06C,aAAa,CAACl7C,SAA9B;EACA,QAAMsqB,WAAW,GAAG4wB,aAAa,CAAC/6C,MAAlC,CALC;;EAQD,QAAI,CAAC+6C,aAAa,CAACh7C,KAAd,GAAsBf,UAAvB,MAAuCjB,OAA3C,EAAoD;EAClDmhB,MAAAA,eAAyB,CAAC67B,aAAD,CAAzB;EACA,UAAIn5B,IAAI,SAAR;;EACA,UACE,CACA,CAACm5B,aAAa,CAACl+B,IAAd,GAAqBpC,WAAtB,MAAuCJ,MAFzC,EAGE;EACAuH,QAAAA,IAAI,GAAG6mB,YAAY,CAACpoC,OAAD,EAAU06C,aAAV,EAAyBla,kBAAzB,CAAnB;EACD,OALD,MAKO;EACL5C,QAAAA,kBAAkB,CAAC8c,aAAD,CAAlB;EACAn5B,QAAAA,IAAI,GAAG6mB,YAAY,CAACpoC,OAAD,EAAU06C,aAAV,EAAyBla,kBAAzB,CAAnB,CAFK;;EAILzC,QAAAA,wCAAwC,CAAC2c,aAAD,EAAgB,KAAhB,CAAxC;EACD;;EACD57B,MAAAA,iBAA2B;;EAE3B,UAAIyC,IAAI,KAAK,IAAb,EAAmB;EACjB;EACAzV,QAAAA,cAAc,GAAGyV,IAAjB;EACA;EACD;;EAEDo5B,MAAAA,eAAe,CAACD,aAAD,CAAf;;EAEA,UACE5wB,WAAW,KAAK,IAAhB;EAEA,OAACA,WAAW,CAACpqB,KAAZ,GAAoBf,UAArB,MAAqCjB,OAHvC,EAIE;EACA;EACA;EACA;EACA,YAAIosB,WAAW,CAACmB,WAAZ,KAA4B,IAAhC,EAAsC;EACpCnB,UAAAA,WAAW,CAACmB,WAAZ,GAA0ByvB,aAAa,CAACzvB,WAAxC;EACD;;EACD,YAAIyvB,aAAa,CAAC3vB,UAAd,KAA6B,IAAjC,EAAuC;EACrC,cAAIjB,WAAW,CAACiB,UAAZ,KAA2B,IAA/B,EAAqC;EACnCjB,YAAAA,WAAW,CAACiB,UAAZ,CAAuBC,UAAvB,GAAoC0vB,aAAa,CAACzvB,WAAlD;EACD;;EACDnB,UAAAA,WAAW,CAACiB,UAAZ,GAAyB2vB,aAAa,CAAC3vB,UAAvC;EACD,SAZD;EAeA;EACA;EACA;EACA;EACA;;;EACA,YAAMrrB,KAAK,GAAGg7C,aAAa,CAACh7C,KAA5B,CApBA;EAuBA;EACA;;EACA,YAAIA,KAAK,GAAG/B,aAAZ,EAA2B;EACzB,cAAImsB,WAAW,CAACiB,UAAZ,KAA2B,IAA/B,EAAqC;EACnCjB,YAAAA,WAAW,CAACiB,UAAZ,CAAuBC,UAAvB,GAAoC0vB,aAApC;EACD,WAFD,MAEO;EACL5wB,YAAAA,WAAW,CAACmB,WAAZ,GAA0ByvB,aAA1B;EACD;;EACD5wB,UAAAA,WAAW,CAACiB,UAAZ,GAAyB2vB,aAAzB;EACD;EACF;EACF,KA9DD,MA8DO;EACL;EACA;EACA;EACA,UAAMn5B,KAAI,GAAGmoB,UAAU,CAACgR,aAAD,AAAA,CAAvB,CAJK;;;EAQL,UAAIn5B,KAAI,KAAK,IAAb,EAAmB;EACjB;EACA;EACA;EACA;EACAA,QAAAA,KAAI,CAAC7hB,KAAL,IAAchB,cAAd;EACAoN,QAAAA,cAAc,GAAGyV,KAAjB;EACA;EACD;;EAED,UACEziB,CACA,CAAC47C,aAAa,CAACl+B,IAAd,GAAqBpC,WAAtB,MAAuCJ,MAFzC,EAGE;EACA;EACA+jB,QAAAA,wCAAwC,CAAC2c,aAAD,EAAgB,KAAhB,CAAxC,CAFA;;EAKA,YAAIxc,cAAc,GAAGwc,aAAa,CAACxc,cAAnC;EACA,YAAIr9B,KAAK,GAAG65C,aAAa,CAAC75C,KAA1B;;EACA,eAAOA,KAAK,KAAK,IAAjB,EAAuB;EACrBq9B,UAAAA,cAAc,IAAIr9B,KAAK,CAACq9B,cAAxB;EACAr9B,UAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;EACD;;EACD45C,QAAAA,aAAa,CAACxc,cAAd,GAA+BA,cAA/B;EACD;;EAED,UAAIpU,WAAW,KAAK,IAApB,EAA0B;EACxB;EACAA,QAAAA,WAAW,CAACmB,WAAZ,GAA0BnB,WAAW,CAACiB,UAAZ,GAAyB,IAAnD;EACAjB,QAAAA,WAAW,CAACpqB,KAAZ,IAAqBf,UAArB;EACD;EACF;;EAED,QAAMi8C,YAAY,GAAGF,aAAa,CAAC55C,OAAnC;;EACA,QAAI85C,YAAY,KAAK,IAArB,EAA2B;EACzB;EACA9uC,MAAAA,cAAc,GAAG8uC,YAAjB;EACA;EACD,KArHA;;;EAuHDF,IAAAA,aAAa,GAAG5wB,WAAhB,CAvHC;;EAyHDhe,IAAAA,cAAc,GAAG4uC,aAAjB;EACD,GA1HD,QA0HSA,aAAa,KAAK,IA1H3B,EAJmD;;;EAiInD,MAAI3F,4BAA4B,KAAKV,cAArC,EAAqD;EACnDU,IAAAA,4BAA4B,GAAGL,aAA/B;EACD;EACF;;EAED,SAASiG,eAAT,CAAyBD,aAAzB,EAA+C;EAC7C;EAEE;EACA,GAACA,aAAa,CAAC79C,GAAd,KAAsB7C,qBAAtB,IACC0gD,aAAa,CAAC79C,GAAd,KAAsB9C,kBADxB,KAEA2gD,aAAa,CAACn4B,aAAd,KAAgC,IAFhC,IAGA,CAACjM,gBAAgB,CAACkqB,kBAAD,EAAsBjuB,aAAtB,CAHjB,IAIA,CAACmoC,aAAa,CAACl+B,IAAd,GAAqBrC,cAAtB,MAA0C9I,OAP5C,EAQE;EACA;EACA;EACA;EACD;;EAED,MAAIwpC,aAAa,GAAGxpC,OAApB,CAf6C;;EAkB7C,MAAIvS,CAAuB,CAAC47C,aAAa,CAACl+B,IAAd,GAAqBpC,WAAtB,MAAuCJ,MAAlE,EAA0E;EACxE;EACA;EACA,QAAIkkB,cAAc,GAAGwc,aAAa,CAACxc,cAAnC;EACA,QAAIuG,gBAAgB,GAAKiW,aAAa,CAACvc,gBAAvC,CAJwE;EAOxE;EACA;EACA;EACA;EACA;EACA;;EACA,QAAM2c,2BAA2B,GAC/BJ,aAAa,CAACl7C,SAAd,KAA4B,IAA5B,IACAk7C,aAAa,CAAC75C,KAAd,KAAwB65C,aAAa,CAACl7C,SAAd,CAAwBqB,KAFlD;EAIA,QAAIA,KAAK,GAAG65C,aAAa,CAAC75C,KAA1B;;EACA,WAAOA,KAAK,KAAK,IAAjB,EAAuB;EACrBg6C,MAAAA,aAAa,GAAGpkC,UAAU,CACxBokC,aADwB,EAExBpkC,UAAU,CAAC5V,KAAK,CAAC8R,KAAP,EAAc9R,KAAK,CAAC8f,UAApB,CAFc,CAA1B;;EAIA,UAAIm6B,2BAAJ,EAAiC;EAC/B5c,QAAAA,cAAc,IAAIr9B,KAAK,CAACq9B,cAAxB;EACD;;EACDuG,MAAAA,gBAAgB,IAAI5jC,KAAK,CAAC4jC,gBAA1B;EACA5jC,MAAAA,KAAK,GAAGA,KAAK,CAACC,OAAd;EACD;;EAED,QAAMi6C,kBAAkB,GACtBL,aAAa,CAAC79C,GAAd,KAAsBxD,iBAAtB,IACAqhD,aAAa,CAACn4B,aAAd,KAAgC,IAFlC;;EAGA,QAAIw4B,kBAAJ,EAAwB;EACtB;EACA,UAAMjX,oBAAoB,GAAG4W,aAAa,CAAC75C,KAA3C;;EACA,UAAIijC,oBAAoB,KAAK,IAA7B,EAAmC;EACjCW,QAAAA,gBAAgB,IAAMX,oBAAoB,CAACW,gBAA3C;EACD;EACF;;EAEDiW,IAAAA,aAAa,CAACxc,cAAd,GAA+BA,cAA/B;EACAwc,IAAAA,aAAa,CAACjW,gBAAd,GAAiCA,gBAAjC;EACD,GA3CD,MA2CO;EACL,QAAI5jC,MAAK,GAAG65C,aAAa,CAAC75C,KAA1B;;EACA,WAAOA,MAAK,KAAK,IAAjB,EAAuB;EACrBg6C,MAAAA,aAAa,GAAGpkC,UAAU,CACxBokC,aADwB,EAExBpkC,UAAU,CAAC5V,MAAK,CAAC8R,KAAP,EAAc9R,MAAK,CAAC8f,UAApB,CAFc,CAA1B;EAIA9f,MAAAA,MAAK,GAAGA,MAAK,CAACC,OAAd;EACD;EACF;;EAED45C,EAAAA,aAAa,CAAC/5B,UAAd,GAA2Bk6B,aAA3B;EACD;;EAED,SAAS/B,UAAT,CAAoBtqC,IAApB,EAA0B;EACxB,MAAMgiC,mBAAmB,GAAGv3B,uBAAuB,EAAnD;EACAG,EAAAA,eAAe,CACbhG,mBADa,EAEb4nC,cAAc,CAACpwC,IAAf,CAAoB,IAApB,EAA0B4D,IAA1B,EAAgCgiC,mBAAhC,CAFa,CAAf;EAIA,SAAO,IAAP;EACD;;EAED,SAASwK,cAAT,CAAwBxsC,IAAxB,EAA8BgiC,mBAA9B,EAAmD;EACjD,KAAG;EACD;EACA;EACA;EACA;EACA;EACA;EACA8H,IAAAA,mBAAmB;EACpB,GARD,QAQStC,6BAA6B,KAAK,IAR3C;;EASAiF,EAAAA,uCAAuC;;EAVU,QAa/C,CAACtG,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDL,SAbV;EAAA;EAAA;EAAA;EAAA;;EAiBjD,MAAMnvB,YAAY,GAAGnW,IAAI,CAACmW,YAA1B;EACA,MAAMhS,KAAK,GAAGnE,IAAI,CAACoqC,aAAnB;;EAYA,MAAIj0B,YAAY,KAAK,IAArB,EAA2B;AACzB;EAUA,WAAO,IAAP;EACD;;EACDnW,EAAAA,IAAI,CAACmW,YAAL,GAAoB,IAApB;EACAnW,EAAAA,IAAI,CAACoqC,aAAL,GAAqBvnC,OAArB;;EA5CiD,QA+C/CsT,YAAY,KAAKnW,IAAI,CAACxO,OA/CyB;EAAA;EAAA;EAAA;EAAA;EAqDjD;;;EACAwO,EAAAA,IAAI,CAACmL,YAAL,GAAoB,IAApB,CAtDiD;EAyDjD;;EACA,MAAIlC,cAAc,GAAGhB,UAAU,CAACkO,YAAY,CAAChS,KAAd,EAAqBgS,YAAY,CAAChE,UAAlC,CAA/B;EACAnJ,EAAAA,gBAAgB,CAAChJ,IAAD,EAAOiJ,cAAP,CAAhB,CA3DiD;EA8DjD;EACA;;EACA,MAAI4+B,+BAA+B,KAAK,IAAxC,EAA8C;EAC5C,QACE,CAACh/B,gBAAgB,CAACI,cAAD,CAAjB,IACA4+B,+BAA+B,CAAC1rC,GAAhC,CAAoC6D,IAApC,CAFF,EAGE;EACA6nC,MAAAA,+BAA+B,CAAC1oB,MAAhC,CAAuCnf,IAAvC;EACD;EACF;;EAED,MAAIA,IAAI,KAAKomC,kBAAb,EAAiC;EAC/B;EACAA,IAAAA,kBAAkB,GAAG,IAArB;EACA9oC,IAAAA,cAAc,GAAG,IAAjB;EACA+oC,IAAAA,6BAA6B,GAAGxjC,OAAhC;EACD,GALD,AAzEiD;;;EAqFjD,MAAI4Z,WAAJ;;EACA,MAAItG,YAAY,CAACjlB,KAAb,GAAqB/B,aAAzB,EAAwC;EACtC;EACA;EACA;EACA;EACA,QAAIgnB,YAAY,CAACoG,UAAb,KAA4B,IAAhC,EAAsC;EACpCpG,MAAAA,YAAY,CAACoG,UAAb,CAAwBC,UAAxB,GAAqCrG,YAArC;EACAsG,MAAAA,WAAW,GAAGtG,YAAY,CAACsG,WAA3B;EACD,KAHD,MAGO;EACLA,MAAAA,WAAW,GAAGtG,YAAd;EACD;EACF,GAXD,MAWO;EACL;EACAsG,IAAAA,WAAW,GAAGtG,YAAY,CAACsG,WAA3B;EACD;;EAED,MAAIA,WAAW,KAAK,IAApB,EAA0B;AACxB;EAMA,QAAMsuB,oBAAoB,GAAG5E,gBAA7B;EACAA,IAAAA,gBAAgB,IAAIR,aAApB;EACA,QAAMgG,gBAAgB,GAAGD,gBAAgB,CAAC1rC,IAAD,CAAzC,CATwB;;EAYxBrP,IAAAA,mBAAiB,CAACa,OAAlB,GAA4B,IAA5B,CAZwB;EAexB;EACA;EAEA;EACA;EACA;;EACAg3C,IAAAA,qBAAqB,GAAGvzC,gBAAgB,CAAC+K,IAAI,CAAC9K,aAAN,CAAxC;EACAuzC,IAAAA,iCAAiC,GAAG,KAApC;EAEAjsB,IAAAA,UAAU,GAAGC,WAAb;;EACA,OAAG;EACD,MAAa;EACXkjB,QAAAA,qBAAqB,CAAC,IAAD,EAAO+M,2BAAP,EAAoC,IAApC,CAArB;;EACA,YAAI9M,cAAc,EAAlB,EAAsB;EAAA,gBACVpjB,UAAU,KAAK,IADL;EAAA;EAAA;EAAA;EAAA;;EAEpB,cAAMzzB,KAAK,GAAG82C,gBAAgB,EAA9B;EACAQ,UAAAA,uBAAuB,CAAC7jB,UAAD,EAAazzB,KAAb,CAAvB;EACAyzB,UAAAA,UAAU,GAAGA,UAAU,CAACA,UAAxB;EACD;EACF,OARD;EAiBD,KAlBD,QAkBSA,UAAU,KAAK,IAlBxB,EAzBwB;;;EA8CxBgsB,IAAAA,qBAAqB,GAAG,IAAxB;;EAEA,IAAyB;EACvB;EACA;EACArZ,MAAAA,gBAAgB;EACjB,KApDuB;;;EAuDxB3S,IAAAA,UAAU,GAAGC,WAAb;;EACA,OAAG;EACD,MAAa;EACXkjB,QAAAA,qBAAqB,CACnB,IADmB,EAEnBgN,qBAFmB,EAGnB,IAHmB,EAInB3sC,IAJmB,EAKnBgiC,mBALmB,CAArB;;EAOA,YAAIpC,cAAc,EAAlB,EAAsB;EAAA,gBACVpjB,UAAU,KAAK,IADL;EAAA;EAAA;EAAA;EAAA;;EAEpB,cAAMzzB,MAAK,GAAG82C,gBAAgB,EAA9B;;EACAQ,UAAAA,uBAAuB,CAAC7jB,UAAD,EAAazzB,MAAb,CAAvB;EACAyzB,UAAAA,UAAU,GAAGA,UAAU,CAACA,UAAxB;EACD;EACF,OAdD;EAuBD,KAxBD,QAwBSA,UAAU,KAAK,IAxBxB;;EA6BArnB,IAAAA,gBAAgB,CAAC6K,IAAI,CAAC9K,aAAN,CAAhB,CArFwB;EAwFxB;EACA;EACA;;EACA8K,IAAAA,IAAI,CAACxO,OAAL,GAAe2kB,YAAf,CA3FwB;EA8FxB;EACA;;EACAqG,IAAAA,UAAU,GAAGC,WAAb;;EACA,OAAG;EACD,MAAa;EACXkjB,QAAAA,qBAAqB,CAAC,IAAD,EAAOiN,mBAAP,EAA4B,IAA5B,EAAkC5sC,IAAlC,EAAwCmE,KAAxC,CAArB;;EACA,YAAIy7B,cAAc,EAAlB,EAAsB;EAAA,gBACVpjB,UAAU,KAAK,IADL;EAAA;EAAA;EAAA;EAAA;;EAEpB,cAAMzzB,OAAK,GAAG82C,gBAAgB,EAA9B;;EACAQ,UAAAA,uBAAuB,CAAC7jB,UAAD,EAAazzB,OAAb,CAAvB;EACAyzB,UAAAA,UAAU,GAAGA,UAAU,CAACA,UAAxB;EACD;EACF,OARD;EAiBD,KAlBD,QAkBSA,UAAU,KAAK,IAlBxB;;EAoBAA,IAAAA,UAAU,GAAG,IAAb,CArHwB;EAwHxB;;EACApS,IAAAA,YAAY;;EAEZ,IAA4B;EAC1BwhC,MAAAA,eAAe,CAAGD,gBAAH,CAAf;EACD;;EACDxF,IAAAA,gBAAgB,GAAG4E,oBAAnB;EAMD,GApID,MAoIO;EACL;EACA/qC,IAAAA,IAAI,CAACxO,OAAL,GAAe2kB,YAAf,CAFK;EAIL;EACA;;EACA,IAAyB;EACvBgZ,MAAAA,gBAAgB;EACjB;EACF;;EAED,MAAM0d,yBAAyB,GAAGtF,0BAAlC;;EAEA,MAAIA,0BAAJ,EAAgC;EAC9B;EACA;EACAA,IAAAA,0BAA0B,GAAG,KAA7B;EACAC,IAAAA,6BAA6B,GAAGxnC,IAAhC;EACA0nC,IAAAA,0BAA0B,GAAGvjC,KAA7B;EACAsjC,IAAAA,mCAAmC,GAAGzF,mBAAtC;EACD,GAPD,MAOO;EACL;EACA;EACA;EACAxlB,IAAAA,UAAU,GAAGC,WAAb;;EACA,WAAOD,UAAU,KAAK,IAAtB,EAA4B;EAC1B,UAAMswB,cAAc,GAAGtwB,UAAU,CAACA,UAAlC;EACAA,MAAAA,UAAU,CAACA,UAAX,GAAwB,IAAxB;;EACA,UAAIA,UAAU,CAACtrB,KAAX,GAAmB3B,QAAvB,EAAiC;EAC/Bw9C,QAAAA,uBAAuB,CAACvwB,UAAD,CAAvB;EACD;;EACDA,MAAAA,UAAU,GAAGswB,cAAb;EACD;EACF,GA3QgD;;;EA8QjD7jC,EAAAA,cAAc,GAAGjJ,IAAI,CAACsF,YAAtB,CA9QiD;;EAiRjD,MAAI2D,cAAc,KAAKpG,OAAvB,EAAgC;EAC9B,IAA4B;EAC1B,UAAIslC,uBAAuB,KAAK,IAAhC,EAAsC;EACpC,YAAMrhC,eAAe,GAAGqhC,uBAAxB;EACAA,QAAAA,uBAAuB,GAAG,IAA1B;;EACA,aAAK,IAAI5/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,eAAe,CAACjM,MAApC,EAA4C0N,CAAC,EAA7C,EAAiD;EAC/CykC,UAAAA,oBAAoB,CAClBhtC,IADkB,EAElB8G,eAAe,CAACyB,CAAD,CAFG,EAGlBvI,IAAI,CAACwhC,oBAHa,CAApB;EAKD;EACF;;EACD0H,MAAAA,2BAA2B,CAAClpC,IAAD,EAAOiJ,cAAP,CAA3B;EACD;EACF,GAfD,MAeO;EACL;EACA;EACAq+B,IAAAA,sCAAsC,GAAG,IAAzC;EACD;;EAED,EAA4B;EAC1B,QAAI,CAACuF,yBAAL,EAAgC;EAC9B;EACA;EACA;EACA;EACAI,MAAAA,yBAAyB,CAACjtC,IAAD,EAAOmE,KAAP,CAAzB;EACD;EACF;;EAED,MAAI8E,cAAc,KAAKlG,QAAvB,EAAiC;EAC/B;EACA;EACA,QAAI/C,IAAI,KAAKgoC,qBAAb,EAAoC;EAClCD,MAAAA,iBAAiB;EAClB,KAFD,MAEO;EACLA,MAAAA,iBAAiB,GAAG,CAApB;EACAC,MAAAA,qBAAqB,GAAGhoC,IAAxB;EACD;EACF,GATD,MASO;EACL+nC,IAAAA,iBAAiB,GAAG,CAApB;EACD;;EAEDmF,EAAAA,YAAoB,CAAC/2B,YAAY,CAACxkB,SAAd,EAAyBqwC,mBAAzB,CAApB;EAOA;;;EACAoH,EAAAA,qBAAqB,CAACppC,IAAD,EAAOwK,GAAG,EAAV,CAArB;;EAEA,MAAI48B,gBAAJ,EAAsB;EACpBA,IAAAA,gBAAgB,GAAG,KAAnB;EACA,QAAMr+C,OAAK,GAAGs+C,kBAAd;EACAA,IAAAA,kBAAkB,GAAG,IAArB;EACA,UAAMt+C,OAAN;EACD;;EAED,MAAI,CAACo9C,gBAAgB,GAAGV,sBAApB,MAAgDH,SAApD,EAA+D;AAC7D,EAWA;EACA;EACA;;;EACA,WAAO,IAAP;EACD,GA9VgD;;;EAiWjDl6B,EAAAA,sBAAsB;;EAYtB,SAAO,IAAP;EACD;;EAED,SAASshC,2BAAT,GAAuC;EACrC,SAAOlwB,UAAU,KAAK,IAAtB,EAA4B;EAC1B,QAAMhrB,OAAO,GAAGgrB,UAAU,CAACxrB,SAA3B;;EAEA,QAAI,CAACy3C,iCAAD,IAAsCD,qBAAqB,KAAK,IAApE,EAA0E;EACxE,UAAI,CAAChsB,UAAU,CAACtrB,KAAX,GAAmB3B,QAApB,MAAkCL,OAAtC,EAA+C;EAC7C,YAAIyD,gBAAgB,CAAC6pB,UAAD,EAAagsB,qBAAb,CAApB,EAAyD;EACvDC,UAAAA,iCAAiC,GAAG,IAApC;AACA0E,EACD;EACF,OALD,MAKO;EACL;EACA,YACE3wB,UAAU,CAACnuB,GAAX,KAAmBxD,iBAAnB,IACAg5C,6BAA6B,CAACryC,OAAD,EAAUgrB,UAAV,CAD7B,IAEA7pB,gBAAgB,CAAC6pB,UAAD,EAAagsB,qBAAb,CAHlB,EAIE;EACAC,UAAAA,iCAAiC,GAAG,IAApC;AACA0E,EACD;EACF;EACF;;EAED,QAAMj8C,KAAK,GAAGsrB,UAAU,CAACtrB,KAAzB;;EACA,QAAI,CAACA,KAAK,GAAGtB,QAAT,MAAuBV,OAA3B,EAAoC;EAClCmhB,MAAAA,eAAyB,CAACmM,UAAD,CAAzB;EAEA4wB,MAAAA,8BAAiC,CAAC57C,OAAD,EAAUgrB,UAAV,CAAjC;EAEAlM,MAAAA,iBAA2B;EAC5B;;EACD,QAAI,CAACpf,KAAK,GAAGrB,OAAT,MAAsBX,OAA1B,EAAmC;EACjC;EACA;EACA,UAAI,CAACq4C,0BAAL,EAAiC;EAC/BA,QAAAA,0BAA0B,GAAG,IAA7B;EACA18B,QAAAA,gBAAgB,CAAC/F,gBAAD,EAA0B,YAAM;EAC9CglC,UAAAA,mBAAmB;EACnB,iBAAO,IAAP;EACD,SAHe,CAAhB;EAID;EACF;;EACDttB,IAAAA,UAAU,GAAGA,UAAU,CAACA,UAAxB;EACD;EACF;;EAED,SAASmwB,qBAAT,CACE3sC,IADF,EAEEgiC,mBAFF,EAGE;EACA;EACA,SAAOxlB,UAAU,KAAK,IAAtB,EAA4B;EAC1BnM,IAAAA,eAAyB,CAACmM,UAAD,CAAzB;EAEA,QAAMtrB,KAAK,GAAGsrB,UAAU,CAACtrB,KAAzB;;EAEA,QAAIA,KAAK,GAAG1B,YAAZ,EAA0B;EACxBs0C,MAAAA,sBAAsB,CAACtnB,UAAD,CAAtB;EACD;;EAED,QAAItrB,KAAK,GAAGvB,GAAZ,EAAiB;EACf,UAAM6B,OAAO,GAAGgrB,UAAU,CAACxrB,SAA3B;;EACA,UAAIQ,OAAO,KAAK,IAAhB,EAAsB;EACpBqwC,QAAAA,eAAe,CAACrwC,OAAD,CAAf;EACD;EAQF,KArByB;EAwB1B;EACA;EACA;;;EACA,QAAM67C,YAAY,GAAGn8C,KAAK,IAAI9B,SAAS,GAAGC,MAAZ,GAAqBE,QAArB,GAAgCQ,SAApC,CAA1B;;EACA,YAAQs9C,YAAR;EACE,WAAKj+C,SAAL;EAAgB;EACdozC,UAAAA,eAAe,CAAChmB,UAAD,CAAf,CADc;EAGd;EACA;EACA;;EACAA,UAAAA,UAAU,CAACtrB,KAAX,IAAoB,CAAC9B,SAArB;EACA;EACD;;EACD,WAAKE,kBAAL;EAAyB;EACvB;EACAkzC,UAAAA,eAAe,CAAChmB,UAAD,CAAf,CAFuB;EAIvB;;EACAA,UAAAA,UAAU,CAACtrB,KAAX,IAAoB,CAAC9B,SAArB,CALuB;;EAQvB,cAAMoC,QAAO,GAAGgrB,UAAU,CAACxrB,SAA3B;EACAmyC,UAAAA,UAAU,CAAC3xC,QAAD,EAAUgrB,UAAV,CAAV;EACA;EACD;;EACD,WAAKzsB,SAAL;EAAgB;EACdysB,UAAAA,UAAU,CAACtrB,KAAX,IAAoB,CAACnB,SAArB;EACA;EACD;;EACD,WAAKC,kBAAL;EAAyB;EACvBwsB,UAAAA,UAAU,CAACtrB,KAAX,IAAoB,CAACnB,SAArB,CADuB;;EAIvB,cAAMyB,SAAO,GAAGgrB,UAAU,CAACxrB,SAA3B;EACAmyC,UAAAA,UAAU,CAAC3xC,SAAD,EAAUgrB,UAAV,CAAV;EACA;EACD;;EACD,WAAKntB,MAAL;EAAa;EACX,cAAMmC,SAAO,GAAGgrB,UAAU,CAACxrB,SAA3B;EACAmyC,UAAAA,UAAU,CAAC3xC,SAAD,EAAUgrB,UAAV,CAAV;EACA;EACD;;EACD,WAAKjtB,QAAL;EAAe;EACb2zC,UAAAA,cAAc,CAACljC,IAAD,EAAOwc,UAAP,AAAA,CAAd;EACA;EACD;EA1CH;;EA6CAlM,IAAAA,iBAA2B;EAC3BkM,IAAAA,UAAU,GAAGA,UAAU,CAACA,UAAxB;EACD;EACF;;EAED,SAASowB,mBAAT,CAA6B5sC,IAA7B,EAA8CohC,cAA9C,EAAqE;AACnE;;EAWA,SAAO5kB,UAAU,KAAK,IAAtB,EAA4B;EAC1BnM,IAAAA,eAAyB,CAACmM,UAAD,CAAzB;EAEA,QAAMtrB,KAAK,GAAGsrB,UAAU,CAACtrB,KAAzB;;EAEA,QAAIA,KAAK,IAAI7B,MAAM,GAAGI,QAAb,CAAT,EAAiC;EAC/B,UAAM+B,OAAO,GAAGgrB,UAAU,CAACxrB,SAA3B;EACAs8C,MAAAA,gBAAyB,CAACttC,IAAD,EAAOxO,OAAP,EAAgBgrB,UAAhB,AAAA,CAAzB;EACD;;EAED,IAMO;EACL,UAAItrB,KAAK,GAAGvB,GAAZ,EAAiB;EACfgyC,QAAAA,eAAe,CAACnlB,UAAD,CAAf;EACD;EACF;;EAEDlM,IAAAA,iBAA2B;EAC3BkM,IAAAA,UAAU,GAAGA,UAAU,CAACA,UAAxB;EACD;EAWF;;AAED,EAAO,SAASstB,mBAAT,GAAwC;EAC7C;EACA,MAAIrC,mCAAmC,KAAKtiC,YAA5C,EAAiE;EAC/D,QAAM/E,aAAa,GACjBqnC,mCAAmC,GAAG3iC,gBAAtC,GACIA,gBADJ,GAEI2iC,mCAHN;EAIAA,IAAAA,mCAAmC,GAAGtiC,YAAtC;;EACA,IAUO;EACL,aAAOyF,eAAe,CAACxK,aAAD,EAAgBmtC,uBAAhB,CAAtB;EACD;EACF;;EACD,SAAO,KAAP;EACD;AAED,EAaO,SAAStM,oCAAT,CACLpwC,KADK,EAELwlB,MAFK,EAGC;EACNsxB,EAAAA,8BAA8B,CAACpzC,IAA/B,CAAoC8hB,MAApC,EAA4CxlB,KAA5C;;EACA,MAAI,CAAC02C,0BAAL,EAAiC;EAC/BA,IAAAA,0BAA0B,GAAG,IAA7B;EACA18B,IAAAA,gBAAgB,CAAC/F,gBAAD,EAA0B,YAAM;EAC9CglC,MAAAA,mBAAmB;EACnB,aAAO,IAAP;EACD,KAHe,CAAhB;EAID;EACF;AAED,EAAO,SAAS9I,sCAAT,CACLnwC,KADK,EAELwlB,MAFK,EAGC;EACNuxB,EAAAA,gCAAgC,CAACrzC,IAAjC,CAAsC8hB,MAAtC,EAA8CxlB,KAA9C;;EACA,EAAa;EACXA,IAAAA,KAAK,CAACK,KAAN,IAAepB,wBAAf;EACA,QAAMkB,SAAS,GAAGH,KAAK,CAACG,SAAxB;;EACA,QAAIA,SAAS,KAAK,IAAlB,EAAwB;EACtBA,MAAAA,SAAS,CAACE,KAAV,IAAmBpB,wBAAnB;EACD;EACF;;EACD,MAAI,CAACy3C,0BAAL,EAAiC;EAC/BA,IAAAA,0BAA0B,GAAG,IAA7B;EACA18B,IAAAA,gBAAgB,CAAC/F,gBAAD,EAA0B,YAAM;EAC9CglC,MAAAA,mBAAmB;EACnB,aAAO,IAAP;EACD,KAHe,CAAhB;EAID;EACF;;EAED,SAAS0D,yBAAT,CAAmCn3B,MAAnC,EAA6D;EAC3D,MAAM8T,MAAM,GAAG9T,MAAM,CAAC8T,MAAtB;EACA9T,EAAAA,MAAM,CAAC+T,OAAP,GAAiBD,MAAM,EAAvB;EACD;;EAED,SAASojB,uBAAT,GAAmC;EACjC,MAAI/F,6BAA6B,KAAK,IAAtC,EAA4C;EAC1C,WAAO,KAAP;EACD;;EAED,MAAMxnC,IAAI,GAAGwnC,6BAAb;EACA,MAAMrjC,KAAK,GAAGujC,0BAAd;EACAF,EAAAA,6BAA6B,GAAG,IAAhC;EACAE,EAAAA,0BAA0B,GAAG7kC,OAA7B;;EARiC,QAW/B,CAACsjC,gBAAgB,IAAIT,aAAa,GAAGC,aAApB,CAAjB,MAAyDL,SAX1B;EAAA;EAAA;EAAA;EAAA;;EAyBjC,EAAa;EACXiD,IAAAA,wBAAwB,GAAG,IAA3B;EACD;;EAED,MAAMwC,oBAAoB,GAAG5E,gBAA7B;EACAA,EAAAA,gBAAgB,IAAIR,aAApB;EACA,MAAMgG,gBAAgB,GAAGD,gBAAgB,CAAC1rC,IAAD,CAAzC,CA/BiC;EAkCjC;EACA;EACA;EACA;EACA;EAEA;;EACA,MAAMytC,cAAc,GAAG7F,gCAAvB;EACAA,EAAAA,gCAAgC,GAAG,EAAnC;;EACA,OAAK,IAAIr/B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGklC,cAAc,CAAC5yC,MAAnC,EAA2C0N,CAAC,IAAI,CAAhD,EAAmD;EACjD,QAAM8N,OAAM,GAAKo3B,cAAc,CAACllC,CAAD,CAA/B;EACA,QAAM1X,KAAK,GAAK48C,cAAc,CAACllC,CAAC,GAAG,CAAL,CAA9B;EACA,QAAM6hB,OAAO,GAAG/T,OAAM,CAAC+T,OAAvB;EACA/T,IAAAA,OAAM,CAAC+T,OAAP,GAAiB/wB,SAAjB;;EAEA,IAAa;EACXxI,MAAAA,KAAK,CAACK,KAAN,IAAe,CAACpB,wBAAhB;EACA,UAAMkB,SAAS,GAAGH,KAAK,CAACG,SAAxB;;EACA,UAAIA,SAAS,KAAK,IAAlB,EAAwB;EACtBA,QAAAA,SAAS,CAACE,KAAV,IAAmB,CAACpB,wBAApB;EACD;EACF;;EAED,QAAI,OAAOs6B,OAAP,KAAmB,UAAvB,EAAmC;EACjC,MAAa;EACX/Z,QAAAA,eAAyB,CAACxf,KAAD,CAAzB;;EACA,QAQO;EACL8uC,UAAAA,qBAAqB,CAAC,IAAD,EAAOvV,OAAP,EAAgB,IAAhB,CAArB;EACD;;EACD,YAAIwV,cAAc,EAAlB,EAAsB;EAAA,gBACV/uC,KAAK,KAAK,IADA;EAAA;EAAA;EAAA;EAAA;;EAEpB,cAAM9H,KAAK,GAAG82C,gBAAgB,EAA9B;EACAQ,UAAAA,uBAAuB,CAACxvC,KAAD,EAAQ9H,KAAR,CAAvB;EACD;;EACDunB,QAAAA,iBAA2B;EAC5B,OAnBD;EAwCD;EACF,GAnGgC;;;EAqGjC,MAAMo9B,YAAY,GAAG/F,8BAArB;EACAA,EAAAA,8BAA8B,GAAG,EAAjC;;EACA,OAAK,IAAIp/B,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGmlC,YAAY,CAAC7yC,MAAjC,EAAyC0N,EAAC,IAAI,CAA9C,EAAiD;EAC/C,QAAM8N,QAAM,GAAKq3B,YAAY,CAACnlC,EAAD,CAA7B;EACA,QAAM1X,MAAK,GAAK68C,YAAY,CAACnlC,EAAC,GAAG,CAAL,CAA5B;;EACA,IAAa;EACX8H,MAAAA,eAAyB,CAACxf,MAAD,CAAzB;;EACA,MAQO;EACL8uC,QAAAA,qBAAqB,CAAC,IAAD,EAAO6N,yBAAP,EAAkC,IAAlC,EAAwCn3B,QAAxC,CAArB;EACD;;EACD,UAAIupB,cAAc,EAAlB,EAAsB;EAAA,cACV/uC,MAAK,KAAK,IADA;EAAA;EAAA;EAAA;EAAA;;EAEpB,YAAM9H,OAAK,GAAG82C,gBAAgB,EAA9B;;EACAQ,QAAAA,uBAAuB,CAACxvC,MAAD,EAAQ9H,OAAR,CAAvB;EACD;;EACDunB,MAAAA,iBAA2B;EAC5B,KAnBD;EAyCD,GAnJgC;EAsJjC;EACA;;;EACA,MAAI+F,MAAM,GAAGrW,IAAI,CAACxO,OAAL,CAAairB,WAA1B;;EACA,SAAOpG,MAAM,KAAK,IAAlB,EAAwB;EACtB,QAAMy2B,cAAc,GAAGz2B,MAAM,CAACmG,UAA9B,CADsB;;EAGtBnG,IAAAA,MAAM,CAACmG,UAAP,GAAoB,IAApB;;EACA,QAAInG,MAAM,CAACnlB,KAAP,GAAe3B,QAAnB,EAA6B;EAC3Bw9C,MAAAA,uBAAuB,CAAC12B,MAAD,CAAvB;EACD;;EACDA,IAAAA,MAAM,GAAGy2B,cAAT;EACD;;EAWD,EAA4B;EAC1BlB,IAAAA,eAAe,CAAGD,gBAAH,CAAf;EACAsB,IAAAA,yBAAyB,CAACjtC,IAAD,EAAOmE,KAAP,CAAzB;EACD;;EAED,EAAa;EACXokC,IAAAA,wBAAwB,GAAG,KAA3B;EACD;;EAYDpC,EAAAA,gBAAgB,GAAG4E,oBAAnB;EAEA3/B,EAAAA,sBAAsB,GAjMW;EAoMjC;;EACA88B,EAAAA,wBAAwB,GACtBV,6BAA6B,KAAK,IAAlC,GAAyC,CAAzC,GAA6CU,wBAAwB,GAAG,CAD1E;EAGA,SAAO,IAAP;EACD;;AAED,EAAO,SAAS3K,kCAAT,CAA4C7rC,QAA5C,EAAsE;EAC3E,SACE41C,sCAAsC,KAAK,IAA3C,IACAA,sCAAsC,CAACnrC,GAAvC,CAA2CzK,QAA3C,CAFF;EAID;AAED,EAAO,SAAS6qC,+BAAT,CAAyC7qC,QAAzC,EAA0D;EAC/D,MAAI41C,sCAAsC,KAAK,IAA/C,EAAqD;EACnDA,IAAAA,sCAAsC,GAAG,IAAIz4B,GAAJ,CAAQ,CAACnd,QAAD,CAAR,CAAzC;EACD,GAFD,MAEO;EACL41C,IAAAA,sCAAsC,CAACh4B,GAAvC,CAA2C5d,QAA3C;EACD;EACF;;EAED,SAASi8C,2BAAT,CAAqC5kD,KAArC,EAAmD;EACjD,MAAI,CAACq+C,gBAAL,EAAuB;EACrBA,IAAAA,gBAAgB,GAAG,IAAnB;EACAC,IAAAA,kBAAkB,GAAGt+C,KAArB;EACD;EACF;;AACD,EAAO,IAAMozC,eAAe,GAAGwR,2BAAxB;;EAEP,SAASC,6BAAT,CACEC,SADF,EAEE7Q,WAFF,EAGEj0C,KAHF,EAIE;EACA,MAAMyyC,SAAS,GAAGH,mBAAmB,CAACtyC,KAAD,EAAQi0C,WAAR,CAArC;EACA,MAAMrqB,MAAM,GAAGupB,qBAAqB,CAAC2R,SAAD,EAAYrS,SAAZ,EAAwBz4B,QAAxB,CAApC;EACA+P,EAAAA,aAAa,CAAC+6B,SAAD,EAAYl7B,MAAZ,CAAb;EACA,MAAMlM,SAAS,GAAGgR,gBAAgB,EAAlC;EACA,MAAMzX,IAAI,GAAGgpC,6BAA6B,CAAC6E,SAAD,EAAa9qC,QAAb,CAA1C;;EACA,MAAI/C,IAAI,KAAK,IAAb,EAAmB;EACjBwI,IAAAA,eAAe,CAACxI,IAAD,EAAO+C,QAAP,EAAiB0D,SAAjB,CAAf;EACA2iC,IAAAA,qBAAqB,CAACppC,IAAD,EAAOyG,SAAP,CAArB;EACAyiC,IAAAA,2BAA2B,CAAClpC,IAAD,EAAO+C,QAAP,CAA3B;EACD;EACF;;AAED,EAAO,SAASs9B,uBAAT,CAAiCrD,WAAjC,EAAqDj0C,KAArD,EAAmE;EACxE,MAAIi0C,WAAW,CAAC3uC,GAAZ,KAAoBlE,QAAxB,EAAkC;EAChC;EACA;EACAyjD,IAAAA,6BAA6B,CAAC5Q,WAAD,EAAcA,WAAd,EAA2Bj0C,KAA3B,CAA7B;EACA;EACD;;EAED,MAAI8H,KAAK,GAAGmsC,WAAW,CAAC7rC,MAAxB;;EAEA,SAAON,KAAK,KAAK,IAAjB,EAAuB;EACrB,QAAIA,KAAK,CAACxC,GAAN,KAAclE,QAAlB,EAA4B;EAC1ByjD,MAAAA,6BAA6B,CAAC/8C,KAAD,EAAQmsC,WAAR,EAAqBj0C,KAArB,CAA7B;EACA;EACD,KAHD,MAGO,IAAI8H,KAAK,CAACxC,GAAN,KAAcpE,cAAlB,EAAkC;EACvC,UAAMiR,IAAI,GAAGrK,KAAK,CAAC1C,IAAnB;EACA,UAAMuD,QAAQ,GAAGb,KAAK,CAACc,SAAvB;;EACA,UACE,OAAOuJ,IAAI,CAACke,wBAAZ,KAAyC,UAAzC,IACC,OAAO1nB,QAAQ,CAAC2qC,iBAAhB,KAAsC,UAAtC,IACC,CAACkB,kCAAkC,CAAC7rC,QAAD,CAHvC,EAIE;EACA,YAAM8pC,SAAS,GAAGH,mBAAmB,CAACtyC,KAAD,EAAQi0C,WAAR,CAArC;EACA,YAAMrqB,MAAM,GAAGypB,sBAAsB,CACnCvrC,KADmC,EAEnC2qC,SAFmC,EAGlCz4B,QAHkC,CAArC;EAKA+P,QAAAA,aAAa,CAACjiB,KAAD,EAAQ8hB,MAAR,CAAb;EACA,YAAMlM,SAAS,GAAGgR,gBAAgB,EAAlC;EACA,YAAMzX,IAAI,GAAGgpC,6BAA6B,CAACn4C,KAAD,EAASkS,QAAT,CAA1C;;EACA,YAAI/C,IAAI,KAAK,IAAb,EAAmB;EACjBwI,UAAAA,eAAe,CAACxI,IAAD,EAAO+C,QAAP,EAAiB0D,SAAjB,CAAf;EACA2iC,UAAAA,qBAAqB,CAACppC,IAAD,EAAOyG,SAAP,CAArB;EACAyiC,UAAAA,2BAA2B,CAAClpC,IAAD,EAAO+C,QAAP,CAA3B;EACD,SAJD,MAIO;EACL;EACA;EACA;EACA;EACA;EACA;EACA,cACE,OAAOrR,QAAQ,CAAC2qC,iBAAhB,KAAsC,UAAtC,IACA,CAACkB,kCAAkC,CAAC7rC,QAAD,CAFrC,EAGE;EACA,gBAAI;EACFA,cAAAA,QAAQ,CAAC2qC,iBAAT,CAA2BtzC,KAA3B,EAAkCyyC,SAAlC;EACD,aAFD,CAEE,OAAOsS,aAAP,EAAsB;EAEtB;EACD;EACF;EACF;;EACD;EACD;EACF;;EACDj9C,IAAAA,KAAK,GAAGA,KAAK,CAACM,MAAd;EACD;EACF;AAED,EAAO,SAAS0rC,iBAAT,CACL78B,IADK,EAELy8B,QAFK,EAGL92B,WAHK,EAIL;EACA,MAAM+2B,SAAS,GAAG18B,IAAI,CAAC08B,SAAvB;;EACA,MAAIA,SAAS,KAAK,IAAlB,EAAwB;EACtB;EACA;EACAA,IAAAA,SAAS,CAACvd,MAAV,CAAiBsd,QAAjB;EACD;;EAED,MAAMh2B,SAAS,GAAGgR,gBAAgB,EAAlC;EACA7O,EAAAA,cAAc,CAAC5I,IAAD,EAAO2F,WAAP,AAAA,CAAd;;EAEA,MACEygC,kBAAkB,KAAKpmC,IAAvB,IACA+H,eAAe,CAACs+B,6BAAD,EAAgC1gC,WAAhC,CAFjB,EAGE;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA,QACE4gC,4BAA4B,KAAKN,sBAAjC,IACCM,4BAA4B,KAAKP,aAAjC,IACC5+B,mBAAmB,CAACi/B,6BAAD,CADpB,IAEC77B,GAAG,KAAKs8B,4BAAR,GAAuCC,oBAJ3C,EAKE;EACA;EACAkD,MAAAA,iBAAiB,CAACjqC,IAAD,EAAO6C,OAAP,CAAjB;EACD,KARD,MAQO;EACL;EACA;EACA+jC,MAAAA,6BAA6B,GAAG3+B,UAAU,CACxC2+B,6BADwC,EAExCjhC,WAFwC,CAA1C;EAID;EACF;;EAEDyjC,EAAAA,qBAAqB,CAACppC,IAAD,EAAOyG,SAAP,CAArB;EACAyiC,EAAAA,2BAA2B,CAAClpC,IAAD,EAAO2F,WAAP,CAA3B;EACD;;EAED,SAASooC,qBAAT,CAA+BC,aAA/B,EAAqDzZ,SAArD,EAAsE;EACpE;EACA;EACA;EACA;EACA,MAAIA,SAAS,KAAKzxB,MAAlB,EAA0B;EACxByxB,IAAAA,SAAS,GAAGsU,gBAAgB,CAACmF,aAAD,CAA5B;EACD,GAPmE;;;EASpE,MAAMvnC,SAAS,GAAGgR,gBAAgB,EAAlC;EACA,MAAMzX,IAAI,GAAGgpC,6BAA6B,CAACgF,aAAD,EAAgBzZ,SAAhB,CAA1C;;EACA,MAAIv0B,IAAI,KAAK,IAAb,EAAmB;EACjBwI,IAAAA,eAAe,CAACxI,IAAD,EAAOu0B,SAAP,EAAkB9tB,SAAlB,CAAf;EACA2iC,IAAAA,qBAAqB,CAACppC,IAAD,EAAOyG,SAAP,CAArB;EACAyiC,IAAAA,2BAA2B,CAAClpC,IAAD,EAAOu0B,SAAP,CAA3B;EACD;EACF;EAWM,SAASmP,oBAAT,CAA8BsK,aAA9B,EAAoDvR,QAApD,EAAwE;EAC7E,MAAIlI,SAAS,GAAGzxB,MAAhB,CAD6E;;EAE7E,MAAI0gC,UAAJ;;EACA,EAmBO;EACLA,IAAAA,UAAU,GAAGwK,aAAa,CAACr8C,SAA3B;EACD;;EAED,MAAI6xC,UAAU,KAAK,IAAnB,EAAyB;EACvB;EACA;EACAA,IAAAA,UAAU,CAACrkB,MAAX,CAAkBsd,QAAlB;EACD;;EAEDsR,EAAAA,qBAAqB,CAACC,aAAD,EAAgBzZ,SAAhB,CAArB;EACD;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,SAASqW,GAAT,CAAaqD,WAAb,EAAkC;EAChC,SAAOA,WAAW,GAAG,GAAd,GACH,GADG,GAEHA,WAAW,GAAG,GAAd,GACA,GADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEAA,WAAW,GAAG,IAAd,GACA,IADA,GAEA7I,IAAI,CAAC6I,WAAW,GAAG,IAAf,CAAJ,GAA2B,IAZ/B;EAaD;;EAED,SAASnF,qBAAT,GAAiC;EAC/B,MAAIf,iBAAiB,GAAGD,mBAAxB,EAA6C;EAC3CC,IAAAA,iBAAiB,GAAG,CAApB;EACAC,IAAAA,qBAAqB,GAAG,IAAxB;;EAF2C;EAAA;EAAA;EAAA;EAAA;EAU5C;;EAED,EAAa;EACX,QAAIE,wBAAwB,GAAGD,2BAA/B,EAA4D;EAC1DC,MAAAA,wBAAwB,GAAG,CAA3B;;EACA,YACE,qEACE,gEADF,GAEE,iEAFF,GAGE,eAJJ;EAMD;EACF;EACF;;EAED,SAASuE,uCAAT,GAAmD;EACjD,EAAa;EACXj/B,IAAAA,uBAAuB,CAACI,yBAAxB;;EAEA,IAAmC;EACjCJ,MAAAA,uBAAuB,CAACE,mCAAxB;EACD;EACF;EACF;;EAED,IAAIwgC,2CAA+D,GAAG,IAAtE;;EACA,SAAS7E,wCAAT,CAAkDx4C,KAAlD,EAAyD;EACvD,EAAa;EACX,QAAI,CAACs1C,gBAAgB,GAAGT,aAApB,MAAuCJ,SAA3C,EAAsD;EACpD;EACA;EACD;;EAED,QAAI,EAAEz0C,KAAK,CAACmd,IAAN,IAActC,YAAY,GAAGC,cAA7B,CAAF,CAAJ,EAAqD;EACnD;EACD;;EAED,QAAMtd,GAAG,GAAGwC,KAAK,CAACxC,GAAlB;;EACA,QACEA,GAAG,KAAKnE,sBAAR,IACAmE,GAAG,KAAKlE,QADR,IAEAkE,GAAG,KAAKpE,cAFR,IAGAoE,GAAG,KAAKrE,iBAHR,IAIAqE,GAAG,KAAK1D,UAJR,IAKA0D,GAAG,KAAKvD,aALR,IAMAuD,GAAG,KAAKtD,mBANR,IAOAsD,GAAG,KAAK/C,KARV,EASE;EACA;EACA;EACD,KAvBU;EA0BX;;;EACA,QAAM4Q,aAAa,GAAG9N,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,gBAAtD;;EACA,QAAI+/C,2CAA2C,KAAK,IAApD,EAA0D;EACxD,UAAIA,2CAA2C,CAAC/xC,GAA5C,CAAgDD,aAAhD,CAAJ,EAAoE;EAClE;EACD;;EACDgyC,MAAAA,2CAA2C,CAAC5+B,GAA5C,CAAgDpT,aAAhD;EACD,KALD,MAKO;EACLgyC,MAAAA,2CAA2C,GAAG,IAAIr/B,GAAJ,CAAQ,CAAC3S,aAAD,CAAR,CAA9C;EACD;;EAED,QAAMiyC,aAAa,GAAGC,OAAtB;;EACA,QAAI;EACF/9B,MAAAA,eAAyB,CAACxf,KAAD,CAAzB;;EACA,YACE,gFACE,0EADF,GAEE,8EAFF,GAGE,oBAJJ;EAMD,KARD,SAQU;EACR,UAAIs9C,aAAJ,EAAmB;EACjB99B,QAAAA,eAAyB,CAACxf,KAAD,CAAzB;EACD,OAFD,MAEO;EACLyf,QAAAA,iBAA2B;EAC5B;EACF;EACF;EACF;;EAED,IAAI+9B,uCAA2D,GAAG,IAAlE;;EACA,SAASpF,oCAAT,CAA8Cp4C,KAA9C,EAAqD;EACnD,EAAa;EACX,QAAMxC,GAAG,GAAGwC,KAAK,CAACxC,GAAlB;;EACA,QACEA,GAAG,KAAKlE,QAAR,IACAkE,GAAG,KAAKpE,cADR,IAEAoE,GAAG,KAAKrE,iBAFR,IAGAqE,GAAG,KAAK1D,UAHR,IAIA0D,GAAG,KAAKvD,aAJR,IAKAuD,GAAG,KAAKtD,mBALR,IAMAsD,GAAG,KAAK/C,KAPV,EAQE;EACA;EACA;EACD,KAbU;EAgBX;;;EACA,QAAI,CAACuF,KAAK,CAACK,KAAN,GAAcpB,wBAAf,MAA6CZ,OAAjD,EAA0D;EACxD;EACD,KAnBU;EAsBX;;;EACA,QAAMgN,aAAa,GAAG9N,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,gBAAtD;;EACA,QAAIkgD,uCAAuC,KAAK,IAAhD,EAAsD;EACpD,UAAIA,uCAAuC,CAAClyC,GAAxC,CAA4CD,aAA5C,CAAJ,EAAgE;EAC9D;EACD;;EACDmyC,MAAAA,uCAAuC,CAAC/+B,GAAxC,CAA4CpT,aAA5C;EACD,KALD,MAKO;EACLmyC,MAAAA,uCAAuC,GAAG,IAAIx/B,GAAJ,CAAQ,CAAC3S,aAAD,CAAR,CAA1C;EACD;;EAED,QAAIqsC,wBAAJ,EAA8B,CAA9B,MAcO;EACL,UAAM4F,aAAa,GAAGC,OAAtB;;EACA,UAAI;EACF/9B,QAAAA,eAAyB,CAACxf,KAAD,CAAzB;;EACA,cACE,wEACE,qEADF,GAEE,6DAHJ,EAIExC,GAAG,KAAKpE,cAAR,GACI,iCADJ,GAEI,8BANN;EAQD,OAVD,SAUU;EACR,YAAIkkD,aAAJ,EAAmB;EACjB99B,UAAAA,eAAyB,CAACxf,KAAD,CAAzB;EACD,SAFD,MAEO;EACLyf,UAAAA,iBAA2B;EAC5B;EACF;EACF;EACF;EACF;;EAED,IAAIwoB,WAAJ;;AACA,EAgEO;EACLA,EAAAA,WAAS,GAAGwV,SAAZ;EACD;;EAED,IAAIC,0BAA0B,GAAG,KAAjC;EACA,IAAIC,6CAAJ;;AACA,EAAa;EACXA,EAAAA,6CAA6C,GAAG,IAAI3/B,GAAJ,EAAhD;EACD;;EAED,SAASk6B,gCAAT,CAA0Cl4C,KAA1C,EAAiD;EAC/C,EAAa;EACX,QACE49C,WAAsC,IACtC,CAACtI,gBAAgB,GAAGT,aAApB,MAAuCJ,SADvC,IAEA,CAAClY,0CAA0C,EAH7C,EAIE;EACA,cAAQv8B,KAAK,CAACxC,GAAd;EACE,aAAKrE,iBAAL;EACA,aAAKW,UAAL;EACA,aAAKI,mBAAL;EAA0B;EACxB,gBAAM2jD,sBAAsB,GACzBpxC,cAAc,IAAIlP,gBAAgB,CAACkP,cAAc,CAACnP,IAAhB,CAAnC,IACA,SAFF,CADwB;;EAKxB,gBAAMwgD,SAAS,GAAGD,sBAAlB;;EACA,gBAAI,CAACF,6CAA6C,CAACryC,GAA9C,CAAkDwyC,SAAlD,CAAL,EAAmE;EACjEH,cAAAA,6CAA6C,CAACl/B,GAA9C,CAAkDq/B,SAAlD;EACA,kBAAMC,qBAAqB,GACzBxgD,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAAhB,IAAgC,SADlC;;EAEA,oBACE,wDACE,6EADF,GAEE,oFAHJ,EAIEygD,qBAJF,EAKEF,sBALF,EAMEA,sBANF;EAQD;;EACD;EACD;;EACD,aAAKzkD,cAAL;EAAqB;EACnB,gBAAI,CAACskD,0BAAL,EAAiC;EAC/B,oBACE,gEACE,oDADF,GAEE,8BAHJ;;EAKAA,cAAAA,0BAA0B,GAAG,IAA7B;EACD;;EACD;EACD;EAlCH;EAoCD;EACF;EACF;;;AAGD,EAAO,IAAMM,oBAAoB,GAAG;EAACr9C,EAAAA,OAAO,EAAG;EAAX,CAA7B;AAEP,EAAO,SAASs8B,8BAAT,CAAwCj9B,KAAxC,EAA4D;EACjE,EAAa;EACX,QACEi+C,CACAzJ,oBAAoB,CAAC7zC,OAArB,KAAiC,IADjC,IAEAq9C,oBAAoB,CAACr9C,OAArB,KAAiC,IAHnC,EAIE;EACA,UAAM28C,aAAa,GAAGC,OAAtB;;EACA,UAAI;EACF/9B,QAAAA,eAAyB,CAACxf,KAAD,CAAzB;;EACA,cACE,gFACE,kFADF,GAEE,qBAFF;EAIE,yBAJF,GAKE,8BALF,GAME,UANF,GAOE,qBAPF,GAQE,+BARF;EAUE,gCAVF,GAWE,4BAXF,GAYE,+BAZF,GAaE,UAbF,GAcE,iBAfJ;EAiBD,OAnBD,SAmBU;EACR,YAAIs9C,aAAJ,EAAmB;EACjB99B,UAAAA,eAAyB,CAACxf,KAAD,CAAzB;EACD,SAFD,MAEO;EACLyf,UAAAA,iBAA2B;EAC5B;EACF;EACF;EACF;EACF;AAED,EAAO,SAAS4a,oCAAT,CAA8Cr6B,KAA9C,EAAkE;EACvE,EAAa;EACX,QACEi+C,CACA,CAACj+C,KAAK,CAACmd,IAAN,GAAavC,UAAd,MAA8BD,MAD9B,IAEA65B,oBAAoB,CAAC7zC,OAArB,KAAiC,KAFjC,IAGAq9C,oBAAoB,CAACr9C,OAArB,KAAiC,KAJnC,EAKE;EACA,YACE,wEACE,+DADF,GAEE,4BAFF,GAGE,eAHF,GAIE,yCAJF,GAKE,OALF,GAME,gCANF,GAOE,mEAPF,GAQE,iBARF,GASE,6DAVJ,EAWEpD,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAXlB;EAaD;EACF;EACF;;EAED,SAAS4gD,oCAAT,CAA8Cl+C,KAA9C,EAAkE;EAChE,EAAa;EACX,QACEi+C,CACA3I,gBAAgB,KAAKb,SADrB,IAEAD,oBAAoB,CAAC7zC,OAArB,KAAiC,KAFjC,IAGAq9C,oBAAoB,CAACr9C,OAArB,KAAiC,KAJnC,EAKE;EACA,UAAM28C,aAAa,GAAGC,OAAtB;;EACA,UAAI;EACF/9B,QAAAA,eAAyB,CAACxf,KAAD,CAAzB;;EACA,cACE,mEACE,+DADF,GAEE,4BAFF,GAGE,eAHF,GAIE,yCAJF,GAKE,OALF,GAME,gCANF,GAOE,mEAPF,GAQE,iBARF,GASE,6DAVJ,EAWEzC,gBAAgB,CAACyC,KAAK,CAAC1C,IAAP,CAXlB;EAaD,OAfD,SAeU;EACR,YAAIggD,aAAJ,EAAmB;EACjB99B,UAAAA,eAAyB,CAACxf,KAAD,CAAzB;EACD,SAFD,MAEO;EACLyf,UAAAA,iBAA2B;EAC5B;EACF;EACF;EACF;EACF;;AAED,EAAO,IAAMyd,oCAAoC,GAAGghB,oCAA7C;;EAGP,IAAIC,6BAA6B,GAAG,KAApC;EAEA;EACA;EACA;;AAEA,EAAO,SAASC,uBAAT,CAAiCp+C,KAAjC,EAA+C;EACpD,EAAa;EACX,QACEm+C,6BAA6B,KAAK,KAAlC,IACA5tC,6CAAA,KAAgD/H,SAFlD,EAGE;EACA,UAAIxI,KAAK,CAACmd,IAAN,GAAatC,YAAb,IAA6B7a,KAAK,CAACmd,IAAN,GAAarC,cAA9C,EAA8D;EAC5DqjC,QAAAA,6BAA6B,GAAG,IAAhC;;EACA,cACE,4EACE,+DADF,GAEE,4BAFF;EAIE,8CAJF,GAKE,mCALF,GAME,8DAPJ;EASD,OAXD;EAuBD;EACF;EACF;;EAED,SAASE,eAAT,CAAyBlvC,IAAzB,EAA0CqG,IAA1C,EAA8D;EAC5D;EACA;EACA;EACA;EACA,SAAQA,IAAD,GAAc,IAAd,GAAqBrG,IAAI,CAACmvC,mBAAjC;EACD;;AAED,EAAO,SAASpd,eAAT,CAAyB1rB,IAAzB,EAA6C;AAClD;EAGA,MAAI8hC,uBAAuB,KAAK,IAAhC,EAAsC;EACpCA,IAAAA,uBAAuB,GAAG,CAAC9hC,IAAD,CAA1B;EACD,GAFD,MAEO;EACL8hC,IAAAA,uBAAuB,CAAC5zC,IAAxB,CAA6B8R,IAA7B;EACD;EACF;;EAED,SAAS2mC,oBAAT,CACEhtC,IADF,EAEEqG,IAFF,EAGE+oC,YAHF,EAIE;AACA;EAIA,MAAIA,YAAY,CAACx/B,IAAb,GAAoB,CAAxB,EAA2B;EACzB,QAAMy/B,qBAAqB,GAAGrvC,IAAI,CAACqvC,qBAAnC;EACA,QAAMC,mBAAmB,GAAGD,qBAAqB,CAAC5jD,GAAtB,CAA0B4a,IAA1B,CAA5B;;EACA,QAAIipC,mBAAmB,IAAI,IAA3B,EAAiC;EAC/BF,MAAAA,YAAY,CAACjhC,OAAb,CAAqB,UAAAohC,WAAW,EAAI;EAClC,YAAI,CAACD,mBAAmB,CAACnzC,GAApB,CAAwBozC,WAAxB,CAAL,EAA2C;EACzC;EACAA,UAAAA,WAAW,CAACC,OAAZ;EACD;;EAEDF,QAAAA,mBAAmB,CAAChgC,GAApB,CAAwBigC,WAAxB;EACD,OAPD;EAQD,KATD,MASO;EACLF,MAAAA,qBAAqB,CAACzjD,GAAtB,CAA0Bya,IAA1B,EAAgC,IAAIwI,GAAJ,CAAQugC,YAAR,CAAhC,EADK;;EAILA,MAAAA,YAAY,CAACjhC,OAAb,CAAqB,UAAAohC,WAAW,EAAI;EAClCA,QAAAA,WAAW,CAACC,OAAZ;EACD,OAFD;EAGD;;EAED,QAAMC,UAAU,GAAG9uC,eAAe,CAACnP,OAAnC;;EACA,QAAIi+C,UAAU,KAAK,IAAnB,EAAyB;EACvB,UAAMC,QAAQ,GAAGR,eAAe,CAAClvC,IAAD,EAAOqG,IAAP,CAAhC;EACAopC,MAAAA,UAAU,CAACE,eAAX,CAA2BP,YAA3B,EAAyCM,QAAzC;EACD;EACF;EACF;;EAED,SAASxG,2BAAT,CAAqClpC,IAArC,EAAsDqG,IAAtD,EAA0E;AACxE;EAOA2mC,EAAAA,oBAAoB,CAAChtC,IAAD,EAAOqG,IAAP,EAAa3F,iBAAiB,CAAClP,OAA/B,CAApB;EACD;;EAED,SAASq6C,8BAAT,CAAwC7rC,IAAxC,EAAyDmE,KAAzD,EAAuE;AACrE,EAMA;EACA;;;EACA,MAAMirC,YAA8B,GAAG,IAAIvgC,GAAJ,EAAvC;EACA7O,EAAAA,IAAI,CAACqvC,qBAAL,CAA2BlhC,OAA3B,CAAmC,UAACyhC,qBAAD,EAAwBC,aAAxB,EAA0C;EAC3E,QAAI/nC,gBAAgB,CAAC3D,KAAD,EAAQ0rC,aAAR,CAApB,EAA4C;EAC1CD,MAAAA,qBAAqB,CAACzhC,OAAtB,CAA8B,UAAAohC,WAAW;EAAA,eACvCH,YAAY,CAAC9/B,GAAb,CAAiBigC,WAAjB,CADuC;EAAA,OAAzC;EAGD;EACF,GAND,EAVqE;EAmBrE;EACA;EACA;EACA;;EACAvvC,EAAAA,IAAI,CAACwhC,oBAAL,GAA4B4N,YAA5B;;EAEA,MAAIA,YAAY,CAACx/B,IAAb,GAAoB,CAAxB,EAA2B;EACzB,QAAM6/B,UAAU,GAAG9uC,eAAe,CAACnP,OAAnC;;EACA,QAAIi+C,UAAU,KAAK,IAAnB,EAAyB;EACvB,UAAMC,QAAQ,GAAGR,eAAe,CAAClvC,IAAD,EAAOmE,KAAP,CAAhC;;EACA,UAAI;EACFsrC,QAAAA,UAAU,CAACK,aAAX,CAAyBV,YAAzB,EAAuCM,QAAvC;EACD,OAFD,CAEE,OAAO3mD,KAAP,EAAc;EACd;EACA8hB,QAAAA,gBAAgB,CAACjG,mBAAD,EAA6B,YAAM;EACjD,gBAAM7b,KAAN;EACD,SAFe,CAAhB;EAGD;EACF;EACF;EACF;;EAED,SAASkkD,yBAAT,CAAmCjtC,IAAnC,EAAyCohC,cAAzC,EAAyD;AACvD;EAIA,MAAM2O,yBAAyB,GAAG/vC,IAAI,CAACsF,YAAvC;EAEA,MAAImqC,UAAJ;;EAEA,MAAI;EACFA,IAAAA,UAAU,GAAG9uC,eAAe,CAACnP,OAA7B;;EACA,QAAIi+C,UAAU,KAAK,IAAf,IAAuBzvC,IAAI,CAACwhC,oBAAL,CAA0B5xB,IAA1B,GAAiC,CAA5D,EAA+D;EAC7D;EACA,UAAM8/B,QAAQ,GAAGR,eAAe,CAAClvC,IAAD,EAAOohC,cAAP,CAAhC;EACAqO,MAAAA,UAAU,CAACO,aAAX,CAAyBhwC,IAAI,CAACwhC,oBAA9B,EAAoDkO,QAApD;EACD;EACF,GAPD,CAOE,OAAO3mD,KAAP,EAAc;EACd;EACA8hB,IAAAA,gBAAgB,CAACjG,mBAAD,EAA6B,YAAM;EACjD,YAAM7b,KAAN;EACD,KAFe,CAAhB;EAGD,GAZD,SAYU;EACR;EACA;EACA;EACA,QAAMsmD,qBAAqB,GAAGrvC,IAAI,CAACqvC,qBAAnC;EACAA,IAAAA,qBAAqB,CAAClhC,OAAtB,CAA8B,UAACyhC,qBAAD,EAAwBvpC,IAAxB,EAAiC;EAC7D;EACA;EACA;EACA,UAAI,CAACyB,gBAAgB,CAACioC,yBAAD,EAA4B1pC,IAA5B,CAArB,EAAwD;EACtDgpC,QAAAA,qBAAqB,CAAClwB,MAAtB,CAA6B9Y,IAA7B;EAEAupC,QAAAA,qBAAqB,CAACzhC,OAAtB,CAA8B,UAAAohC,WAAW,EAAI;EAC3CA,UAAAA,WAAW,CAACC,OAAZ;;EAEA,cAAIC,UAAU,KAAK,IAAf,IAAuBF,WAAW,CAACC,OAAZ,KAAwB,CAAnD,EAAsD;EACpD,gBAAI;EACFC,cAAAA,UAAU,CAACQ,mCAAX,CAA+CV,WAA/C;EACD,aAFD,CAEE,OAAOxmD,KAAP,EAAc;EACd;EACA8hB,cAAAA,gBAAgB,CAACjG,mBAAD,EAA6B,YAAM;EACjD,sBAAM7b,KAAN;EACD,eAFe,CAAhB;EAGD;EACF;EACF,SAbD;EAcD;EACF,KAtBD;EAuBD;EACF;AAGD;EAQA,SAASwhD,8BAAT,GAA0C;EACxC;EACA,SAAOrqC,CAAWgwC,uBAAuB,GAAG,CAA5C;EACD;;EAED,IAAMC,kBAAkB,GAAG/uC,6CAA3B;EACA,IAAMgvC,iBAAiB,GAAG,OAAOD,kBAAP,KAA8B,UAAxD;EAGA;;EACA,SAASE,YAAT,GAAiC;EAC/B,MAAIF,kBAAkB,KAAK92C,SAA3B,EAAsC;AACpC;EAEA,QAAI;EACF,aAAO82C,kBAAkB,EAAzB;EACD,KAFD,SAEU;AACRG,EACD;EACF,GARD,MAQO;AACL;EAIA,QAAI;EACF,UAAIC,YAAY,GAAG,KAAnB;;EACA,aAAOzG,mBAAmB,EAA1B,EAA8B;EAC5ByG,QAAAA,YAAY,GAAG,IAAf;EACD;;EACD,aAAOA,YAAP;EACD,KAND,SAMU;AACRD,EACD;EACF;EACF;;EAED,SAASE,sBAAT,CAAgCC,MAAhC,EAA+D;EAC7D,MAAI;EACFJ,IAAAA,YAAY;EACZ/L,IAAAA,WAAW,CAAC,YAAM;EAChB,UAAI+L,YAAY,EAAhB,EAAoB;EAClBG,QAAAA,sBAAsB,CAACC,MAAD,CAAtB;EACD,OAFD,MAEO;EACLA,QAAAA,MAAM;EACP;EACF,KANU,CAAX;EAOD,GATD,CASE,OAAOl0C,GAAP,EAAY;EACZk0C,IAAAA,MAAM,CAACl0C,GAAD,CAAN;EACD;EACF;EAGD;;;EAEA,IAAI2zC,uBAAuB,GAAG,CAA9B;AACA,EAEO,SAASQ,GAAT,CAAa5lC,QAAb,EAA8D;AACnE;EAUA,MAAM6lC,+BAA+B,GAAGT,uBAAxC;EACAA,EAAAA,uBAAuB;EAEvB,MAAMU,4BAA4B,GAAGvL,oBAAoB,CAAC7zC,OAA1D;EACA,MAAMq/C,4BAA4B,GAAGhC,oBAAoB,CAACr9C,OAA1D;AACA,EACA6zC,EAAAA,oBAAoB,CAAC7zC,OAArB,GAA+B,IAA/B;EACAq9C,EAAAA,oBAAoB,CAACr9C,OAArB,GAA+B,IAA/B;AACAs/C;EAEA,WAASL,MAAT,GAAkB;EAChBP,IAAAA,uBAAuB;EACvB7K,IAAAA,oBAAoB,CAAC7zC,OAArB,GAA+Bo/C,4BAA/B;EACA/B,IAAAA,oBAAoB,CAACr9C,OAArB,GAA+Bq/C,4BAA/B;AACAC;EACA,IAAa;EACX,UAAIZ,uBAAuB,GAAGS,+BAA9B,EAA+D;EAC7D;EACA,cACE,sEACE,iEAFJ;EAID;EACF;EACF;;EAED,MAAII,MAAJ;;EACA,MAAI;EACFA,IAAAA,MAAM,GAAGjG,cAAc,CAAChgC,QAAD,CAAvB;EACD,GAFD,CAEE,OAAO/hB,KAAP,EAAc;EACd;EACA0nD,IAAAA,MAAM;EACN,UAAM1nD,KAAN;EACD;;EAED,MACEgoD,MAAM,KAAK,IAAX,IACA,OAAOA,MAAP,KAAkB,QADlB,IAEA,OAAOA,MAAM,CAACjU,IAAd,KAAuB,UAHzB,EAIE;EACA;EACA;EACA,QAAIkU,MAAM,GAAG,KAAb;;EACA,IAAa;EACX,UAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;EAClC;EACAA,QAAAA,OAAO,CAACC,OAAR,GACGpU,IADH,CACQ,YAAM,EADd,EAEGA,IAFH,CAEQ,YAAM;EACV,cAAIkU,MAAM,KAAK,KAAf,EAAsB;EACpB,kBACE,oDACE,6EADF,GAEE,yEAHJ;EAKD;EACF,SAVH;EAWD;EACF,KAnBD;EAsBA;EACA;;;EACA,WAAO;EACLlU,MAAAA,IADK,YACAoU,OADA,EACSC,MADT,EACiB;EACpBH,QAAAA,MAAM,GAAG,IAAT;EACAD,QAAAA,MAAM,CAACjU,IAAP,CACE,YAAM;EACJ,cACEoT,uBAAuB,GAAG,CAA1B,IACCE,iBAAiB,KAAK,IAAtB,IACCQ,4BAA4B,KAAK,IAHrC,EAIE;EACAH,YAAAA,MAAM;EACNS,YAAAA,OAAO;EACP;EACD,WATG;EAWJ;;;EACAV,UAAAA,sBAAsB,CAAC,UAACj0C,GAAD,EAAiB;EACtCk0C,YAAAA,MAAM;;EACN,gBAAIl0C,GAAJ,EAAS;EACP40C,cAAAA,MAAM,CAAC50C,GAAD,CAAN;EACD,aAFD,MAEO;EACL20C,cAAAA,OAAO;EACR;EACF,WAPqB,CAAtB;EAQD,SArBH,EAsBE,UAAA30C,GAAG,EAAI;EACLk0C,UAAAA,MAAM;EACNU,UAAAA,MAAM,CAAC50C,GAAD,CAAN;EACD,SAzBH;EA2BD;EA9BI,KAAP;EAgCD,GA5DD,MA4DO;EACL,IAAa;EACX,UAAIw0C,MAAM,KAAK13C,SAAf,EAA0B;EACxB,cACE,8CACE,sDAFJ,EAGE03C,MAHF;EAKD;EACF,KATI;;;EAYL,QAAI;EACF,UACEb,uBAAuB,KAAK,CAA5B,KACCE,iBAAiB,KAAK,KAAtB,IAA+BQ,4BAA4B,KAAK,KADjE,CADF,EAGE;EACA;EACA;EACAP,QAAAA,YAAY;EACb;;EACDI,MAAAA,MAAM;EACP,KAVD,CAUE,OAAOl0C,GAAP,EAAY;EACZk0C,MAAAA,MAAM;EACN,YAAMl0C,GAAN;EACD,KAzBI;;;EA4BL,WAAO;EACLugC,MAAAA,IADK,YACAoU,OADA,EACS;EACZ,QAAa;EACX,gBACE,mFADF;EAGD;;EACDA,QAAAA,OAAO;EACR;EARI,KAAP;EAUD;EACF;;EAED,SAASnE,uBAAT,CAAiCl8C,KAAjC,EAAqD;EACnDA,EAAAA,KAAK,CAACyB,OAAN,GAAgB,IAAhB;EACAzB,EAAAA,KAAK,CAACc,SAAN,GAAkB,IAAlB;EACD;;ECpnHD,IAAIy/C,aAAoC,GAAG,IAA3C;;EAEA,IAAIC,gBAAuC,GAAG,IAA9C;AAEA,EAAO,IAAMC,iBAAiB,GAAG,UAACC,OAAD,EAA0C;EACzE,EAAa;EACXH,IAAAA,aAAa,GAAGG,OAAhB;EACD;EACF,CAJM;AAMP,EAAO,SAASrgB,8BAAT,CAAwC/iC,IAAxC,EAAwD;EAC7D,EAAa;EACX,QAAIijD,aAAa,KAAK,IAAtB,EAA4B;EAC1B;EACA,aAAOjjD,IAAP;EACD;;EACD,QAAMqjD,MAAM,GAAGJ,aAAa,CAACjjD,IAAD,CAA5B;;EACA,QAAIqjD,MAAM,KAAKn4C,SAAf,EAA0B;EACxB,aAAOlL,IAAP;EACD,KARU;;;EAUX,WAAOqjD,MAAM,CAAChgD,OAAd;EACD,GAXD;EAcD;AAED,EAAO,SAASmiC,2BAAT,CAAqCxlC,IAArC,EAAqD;EAC1D;EACA,SAAO+iC,8BAA8B,CAAC/iC,IAAD,CAArC;EACD;AAED,EAAO,SAASylC,gCAAT,CAA0CzlC,IAA1C,EAA0D;EAC/D,EAAa;EACX,QAAIijD,aAAa,KAAK,IAAtB,EAA4B;EAC1B;EACA,aAAOjjD,IAAP;EACD;;EACD,QAAMqjD,MAAM,GAAGJ,aAAa,CAACjjD,IAAD,CAA5B;;EACA,QAAIqjD,MAAM,KAAKn4C,SAAf,EAA0B;EACxB;EACA,UACElL,IAAI,KAAK,IAAT,IACAA,IAAI,KAAKkL,SADT,IAEA,OAAOlL,IAAI,CAACO,MAAZ,KAAuB,UAHzB,EAIE;EACA;EACA;EACA;EACA,YAAM+iD,aAAa,GAAGvgB,8BAA8B,CAAC/iC,IAAI,CAACO,MAAN,CAApD;;EACA,YAAIP,IAAI,CAACO,MAAL,KAAgB+iD,aAApB,EAAmC;EACjC,cAAMC,aAAa,GAAG;EACpBpjD,YAAAA,QAAQ,EAAEjC,sBADU;EAEpBqC,YAAAA,MAAM,EAAE+iD;EAFY,WAAtB;;EAIA,cAAItjD,IAAI,CAACH,WAAL,KAAqBqL,SAAzB,EAAoC;EACjCq4C,YAAAA,aAAD,CAAqB1jD,WAArB,GAAmCG,IAAI,CAACH,WAAxC;EACD;;EACD,iBAAO0jD,aAAP;EACD;EACF;;EACD,aAAOvjD,IAAP;EACD,KA7BU;;;EA+BX,WAAOqjD,MAAM,CAAChgD,OAAd;EACD,GAhCD;EAmCD;AAED,EAAO,SAASqsB,iCAAT,CACLhtB,KADK,EAEL6K,OAFK,EAGI;EACT,EAAa;EACX,QAAI01C,aAAa,KAAK,IAAtB,EAA4B;EAC1B;EACA,aAAO,KAAP;EACD;;EAED,QAAMO,QAAQ,GAAG9gD,KAAK,CAAC+pB,WAAvB;EACA,QAAMg3B,QAAQ,GAAGl2C,OAAO,CAACvN,IAAzB,CAPW;;EAUX,QAAI0jD,oBAAoB,GAAG,KAA3B;EAEA,QAAMC,gBAAgB,GACpB,OAAOF,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,KAAK,IAA7C,GACIA,QAAQ,CAACtjD,QADb,GAEI,IAHN;;EAKA,YAAQuC,KAAK,CAACxC,GAAd;EACE,WAAKpE,cAAL;EAAqB;EACnB,cAAI,OAAO2nD,QAAP,KAAoB,UAAxB,EAAoC;EAClCC,YAAAA,oBAAoB,GAAG,IAAvB;EACD;;EACD;EACD;;EACD,WAAK7nD,iBAAL;EAAwB;EACtB,cAAI,OAAO4nD,QAAP,KAAoB,UAAxB,EAAoC;EAClCC,YAAAA,oBAAoB,GAAG,IAAvB;EACD,WAFD,MAEO,IAAIC,gBAAgB,KAAKrlD,eAAzB,EAA0C;EAC/C;EACA;EACA;EACA;EACAolD,YAAAA,oBAAoB,GAAG,IAAvB;EACD;;EACD;EACD;;EACD,WAAKlnD,UAAL;EAAiB;EACf,cAAImnD,gBAAgB,KAAKzlD,sBAAzB,EAAiD;EAC/CwlD,YAAAA,oBAAoB,GAAG,IAAvB;EACD,WAFD,MAEO,IAAIC,gBAAgB,KAAKrlD,eAAzB,EAA0C;EAC/ColD,YAAAA,oBAAoB,GAAG,IAAvB;EACD;;EACD;EACD;;EACD,WAAK/mD,aAAL;EACA,WAAKC,mBAAL;EAA0B;EACxB,cAAI+mD,gBAAgB,KAAKtlD,eAAzB,EAA0C;EACxC;EACA;EACAqlD,YAAAA,oBAAoB,GAAG,IAAvB;EACD,WAJD,MAIO,IAAIC,gBAAgB,KAAKrlD,eAAzB,EAA0C;EAC/ColD,YAAAA,oBAAoB,GAAG,IAAvB;EACD;;EACD;EACD;;EACD;EACE,eAAO,KAAP;EAvCJ,KAjBW;;;EA4DX,QAAIA,oBAAJ,EAA0B;EACxB;EACA;EACA;EACA;EACA;EACA,UAAME,UAAU,GAAGX,aAAa,CAACO,QAAD,CAAhC;;EACA,UAAII,UAAU,KAAK14C,SAAf,IAA4B04C,UAAU,KAAKX,aAAa,CAACQ,QAAD,CAA5D,EAAwE;EACtE,eAAO,IAAP;EACD;EACF;;EACD,WAAO,KAAP;EACD,GAxED;EA2ED;AAED,EAAO,SAAStV,sCAAT,CAAgDzrC,KAAhD,EAA8D;EACnE,EAAa;EACX,QAAIugD,aAAa,KAAK,IAAtB,EAA4B;EAC1B;EACA;EACD;;EACD,QAAI,OAAOpR,OAAP,KAAmB,UAAvB,EAAmC;EACjC;EACD;;EACD,QAAIqR,gBAAgB,KAAK,IAAzB,EAA+B;EAC7BA,MAAAA,gBAAgB,GAAG,IAAIrR,OAAJ,EAAnB;EACD;;EACDqR,IAAAA,gBAAgB,CAAC/hC,GAAjB,CAAqBze,KAArB;EACD;EACF;AAED,EAAO,IAAMmhD,eAAgC,GAAG,UAC9ChyC,IAD8C,EAE9C2S,MAF8C,EAGrC;EACT,EAAa;EACX,QAAIy+B,aAAa,KAAK,IAAtB,EAA4B;EAC1B;EACA;EACD;;EAJU,QAKJa,aALI,GAK8Bt/B,MAL9B,CAKJs/B,aALI;EAAA,QAKWC,eALX,GAK8Bv/B,MAL9B,CAKWu/B,eALX;EAMXpI,IAAAA,mBAAmB;EACnBkB,IAAAA,SAAS,CAAC,YAAM;EACdmH,MAAAA,qCAAqC,CACnCnyC,IAAI,CAACxO,OAD8B,EAEnC0gD,eAFmC,EAGnCD,aAHmC,CAArC;EAKD,KANQ,CAAT;EAOD;EACF,CAnBM;AAqBP,EAAO,IAAMG,YAA0B,GAAG,UACxCpyC,IADwC,EAExCtE,OAFwC,EAG/B;EACT,EAAa;EACX,QAAIsE,IAAI,CAACzR,OAAL,KAAiB0O,kBAArB,EAAyC;EACvC;EACA;EACA;EACA;EACD;;EACD6sC,IAAAA,mBAAmB;EACnBkB,IAAAA,SAAS,CAAC,YAAM;EACdqH,MAAAA,eAAe,CAAC32C,OAAD,EAAUsE,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,CAAf;EACD,KAFQ,CAAT;EAGD;EACF,CAhBM;;EAkBP,SAASmyC,qCAAT,CACEthD,KADF,EAEEqhD,eAFF,EAGED,aAHF,EAIE;EACA,EAAa;EAAA,QACJjhD,SADI,GACoCH,KADpC,CACJG,SADI;EAAA,QACOqB,KADP,GACoCxB,KADpC,CACOwB,KADP;EAAA,QACcC,OADd,GACoCzB,KADpC,CACcyB,OADd;EAAA,QACuBjE,GADvB,GACoCwC,KADpC,CACuBxC,GADvB;EAAA,QAC4BF,IAD5B,GACoC0C,KADpC,CAC4B1C,IAD5B;EAGX,QAAImkD,aAAa,GAAG,IAApB;;EACA,YAAQjkD,GAAR;EACE,WAAKrE,iBAAL;EACA,WAAKe,mBAAL;EACA,WAAKd,cAAL;EACEqoD,QAAAA,aAAa,GAAGnkD,IAAhB;EACA;;EACF,WAAKxD,UAAL;EACE2nD,QAAAA,aAAa,GAAGnkD,IAAI,CAACO,MAArB;EACA;EARJ;;EAaA,QAAI0iD,aAAa,KAAK,IAAtB,EAA4B;EAC1B,YAAM,IAAI93C,KAAJ,CAAU,qDAAV,CAAN;EACD;;EAED,QAAIi5C,WAAW,GAAG,KAAlB;EACA,QAAIC,YAAY,GAAG,KAAnB;;EACA,QAAIF,aAAa,KAAK,IAAtB,EAA4B;EAC1B,UAAMd,MAAM,GAAGJ,aAAa,CAACkB,aAAD,CAA5B;;EACA,UAAId,MAAM,KAAKn4C,SAAf,EAA0B;EACxB,YAAI44C,aAAa,CAAC91C,GAAd,CAAkBq1C,MAAlB,CAAJ,EAA+B;EAC7BgB,UAAAA,YAAY,GAAG,IAAf;EACD,SAFD,MAEO,IAAIN,eAAe,CAAC/1C,GAAhB,CAAoBq1C,MAApB,CAAJ,EAAiC;EACtC,cAAInjD,GAAG,KAAKpE,cAAZ,EAA4B;EAC1BuoD,YAAAA,YAAY,GAAG,IAAf;EACD,WAFD,MAEO;EACLD,YAAAA,WAAW,GAAG,IAAd;EACD;EACF;EACF;EACF;;EACD,QAAIlB,gBAAgB,KAAK,IAAzB,EAA+B;EAC7B,UACEA,gBAAgB,CAACl1C,GAAjB,CAAqBtL,KAArB,KACCG,SAAS,KAAK,IAAd,IAAsBqgD,gBAAgB,CAACl1C,GAAjB,CAAqBnL,SAArB,CAFzB,EAGE;EACAwhD,QAAAA,YAAY,GAAG,IAAf;EACD;EACF;;EAED,QAAIA,YAAJ,EAAkB;EAChB3hD,MAAAA,KAAK,CAACkoC,kBAAN,GAA2B,IAA3B;EACD;;EACD,QAAIyZ,YAAY,IAAID,WAApB,EAAiC;EAC/B56B,MAAAA,qBAAqB,CAAC9mB,KAAD,EAAQkS,QAAR,EAAkBiB,WAAlB,CAArB;EACD;;EACD,QAAI3R,KAAK,KAAK,IAAV,IAAkB,CAACmgD,YAAvB,EAAqC;EACnCL,MAAAA,qCAAqC,CACnC9/C,KADmC,EAEnC6/C,eAFmC,EAGnCD,aAHmC,CAArC;EAKD;;EACD,QAAI3/C,OAAO,KAAK,IAAhB,EAAsB;EACpB6/C,MAAAA,qCAAqC,CACnC7/C,OADmC,EAEnC4/C,eAFmC,EAGnCD,aAHmC,CAArC;EAKD;EACF;EACF;;AAED,EAAO,IAAMQ,2BAAwD,GAAG,UACtEzyC,IADsE,EAEtE0yC,QAFsE,EAGpD;EAClB,EAAa;EACX,QAAMC,aAAa,GAAG,IAAI9jC,GAAJ,EAAtB;EACA,QAAM+jC,KAAK,GAAG,IAAI/jC,GAAJ,CAAQ6jC,QAAQ,CAACppD,GAAT,CAAa,UAAAkoD,MAAM;EAAA,aAAIA,MAAM,CAAChgD,OAAX;EAAA,KAAnB,CAAR,CAAd;EACAqhD,IAAAA,6CAA6C,CAC3C7yC,IAAI,CAACxO,OADsC,EAE3CohD,KAF2C,EAG3CD,aAH2C,CAA7C;EAKA,WAAOA,aAAP;EACD,GATD;EAcD,CAlBM;;EAoBP,SAASE,6CAAT,CACEhiD,KADF,EAEE+hD,KAFF,EAGED,aAHF,EAIE;EACA,EAAa;EAAA,QACJtgD,KADI,GACyBxB,KADzB,CACJwB,KADI;EAAA,QACGC,OADH,GACyBzB,KADzB,CACGyB,OADH;EAAA,QACYjE,GADZ,GACyBwC,KADzB,CACYxC,GADZ;EAAA,QACiBF,IADjB,GACyB0C,KADzB,CACiB1C,IADjB;EAGX,QAAImkD,aAAa,GAAG,IAApB;;EACA,YAAQjkD,GAAR;EACE,WAAKrE,iBAAL;EACA,WAAKe,mBAAL;EACA,WAAKd,cAAL;EACEqoD,QAAAA,aAAa,GAAGnkD,IAAhB;EACA;;EACF,WAAKxD,UAAL;EACE2nD,QAAAA,aAAa,GAAGnkD,IAAI,CAACO,MAArB;EACA;EARJ;;EAaA,QAAIokD,QAAQ,GAAG,KAAf;;EACA,QAAIR,aAAa,KAAK,IAAtB,EAA4B;EAC1B,UAAIM,KAAK,CAACz2C,GAAN,CAAUm2C,aAAV,CAAJ,EAA8B;EAC5BQ,QAAAA,QAAQ,GAAG,IAAX;EACD;EACF;;EAED,QAAIA,QAAJ,EAAc;EACZ;EACA;EACA;EACAC,MAAAA,kCAAkC,CAACliD,KAAD,EAAQ8hD,aAAR,CAAlC;EACD,KALD,MAKO;EACL;EACA,UAAItgD,KAAK,KAAK,IAAd,EAAoB;EAClBwgD,QAAAA,6CAA6C,CAC3CxgD,KAD2C,EAE3CugD,KAF2C,EAG3CD,aAH2C,CAA7C;EAKD;EACF;;EAED,QAAIrgD,OAAO,KAAK,IAAhB,EAAsB;EACpBugD,MAAAA,6CAA6C,CAC3CvgD,OAD2C,EAE3CsgD,KAF2C,EAG3CD,aAH2C,CAA7C;EAKD;EACF;EACF;;EAED,SAASI,kCAAT,CACEliD,KADF,EAEE8hD,aAFF,EAGQ;EACN,EAAa;EACX,QAAMK,kBAAkB,GAAGC,uCAAuC,CAChEpiD,KADgE,EAEhE8hD,aAFgE,CAAlE;;EAIA,QAAIK,kBAAJ,EAAwB;EACtB;EACD,KAPU;;;EASX,QAAIliD,IAAI,GAAGD,KAAX;;EACA,WAAO,IAAP,EAAa;EACX,cAAQC,IAAI,CAACzC,GAAb;EACE,aAAKhE,aAAL;EACEsoD,UAAAA,aAAa,CAACrjC,GAAd,CAAkBxe,IAAI,CAACa,SAAvB;EACA;;EACF,aAAKvH,UAAL;EACEuoD,UAAAA,aAAa,CAACrjC,GAAd,CAAkBxe,IAAI,CAACa,SAAL,CAAeuD,aAAjC;EACA;;EACF,aAAK/K,QAAL;EACEwoD,UAAAA,aAAa,CAACrjC,GAAd,CAAkBxe,IAAI,CAACa,SAAL,CAAeuD,aAAjC;EACA;EATJ;;EAWA,UAAIpE,IAAI,CAACK,MAAL,KAAgB,IAApB,EAA0B;EACxB,cAAM,IAAImI,KAAJ,CAAU,+BAAV,CAAN;EACD;;EACDxI,MAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;EACF;EACF;;EAED,SAAS8hD,uCAAT,CACEpiD,KADF,EAEE8hD,aAFF,EAGW;EACT,EAAa;EACX,QAAI7hD,IAAW,GAAGD,KAAlB;EACA,QAAImiD,kBAAkB,GAAG,KAAzB;;EACA,WAAO,IAAP,EAAa;EACX,UAAIliD,IAAI,CAACzC,GAAL,KAAahE,aAAjB,EAAgC;EAC9B;EACA2oD,QAAAA,kBAAkB,GAAG,IAArB;EACAL,QAAAA,aAAa,CAACrjC,GAAd,CAAkBxe,IAAI,CAACa,SAAvB,EAH8B;EAK/B,OALD,MAKO,IAAIb,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;EAC9BvB,QAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,QAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;EACA;EACD;;EACD,UAAIvB,IAAI,KAAKD,KAAb,EAAoB;EAClB,eAAOmiD,kBAAP;EACD;;EACD,aAAOliD,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;EAC5B,YAAIxB,IAAI,CAACK,MAAL,KAAgB,IAAhB,IAAwBL,IAAI,CAACK,MAAL,KAAgBN,KAA5C,EAAmD;EACjD,iBAAOmiD,kBAAP;EACD;;EACDliD,QAAAA,IAAI,GAAGA,IAAI,CAACK,MAAZ;EACD;;EACDL,MAAAA,IAAI,CAACwB,OAAL,CAAanB,MAAb,GAAsBL,IAAI,CAACK,MAA3B;EACAL,MAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;EACD;EACF;;EACD,SAAO,KAAP;EACD;;EChYD,IAAI4gD,iBAAJ;;AAEA,EAAa;EACXA,EAAAA,iBAAiB,GAAG,KAApB;;EACA,MAAI;EACF,QAAMC,mBAAmB,GAAG5/C,MAAM,CAAC6/C,iBAAP,CAAyB,EAAzB,CAA5B;EACA;;EACA,QAAIx5C,GAAJ,CAAQ,CAAC,CAACu5C,mBAAD,EAAsB,IAAtB,CAAD,CAAR;EACA,QAAItkC,GAAJ,CAAQ,CAACskC,mBAAD,CAAR;EACA;EACD,GAND,CAME,OAAOlX,CAAP,EAAU;EACV;EACAiX,IAAAA,iBAAiB,GAAG,IAApB;EACD;EACF;;EAED,IAAIG,YAAY,GAAG,CAAnB;;EAEA,SAASC,SAAT,CACEjlD,GADF,EAEEysB,YAFF,EAGEpvB,GAHF,EAIEsiB,IAJF,EAKE;EACA;EACA,OAAK3f,GAAL,GAAWA,GAAX;EACA,OAAK3C,GAAL,GAAWA,GAAX;EACA,OAAKkvB,WAAL,GAAmB,IAAnB;EACA,OAAKzsB,IAAL,GAAY,IAAZ;EACA,OAAKwD,SAAL,GAAiB,IAAjB,CANA;;EASA,OAAKR,MAAL,GAAc,IAAd;EACA,OAAKkB,KAAL,GAAa,IAAb;EACA,OAAKC,OAAL,GAAe,IAAf;EACA,OAAK8B,KAAL,GAAa,CAAb;EAEA,OAAKunB,GAAL,GAAW,IAAX;EAEA,OAAKb,YAAL,GAAoBA,YAApB;EACA,OAAKR,aAAL,GAAqB,IAArB;EACA,OAAKjG,WAAL,GAAmB,IAAnB;EACA,OAAKN,aAAL,GAAqB,IAArB;EACA,OAAKxB,YAAL,GAAoB,IAApB;EAEA,OAAKvE,IAAL,GAAYA,IAAZ,CAtBA;;EAyBA,OAAK9c,KAAL,GAAahC,OAAb;EACA,OAAKstB,UAAL,GAAkB,IAAlB;EAEA,OAAKC,WAAL,GAAmB,IAAnB;EACA,OAAKF,UAAL,GAAkB,IAAlB;EAEA,OAAKpY,KAAL,GAAatB,OAAb;EACA,OAAKsP,UAAL,GAAkBtP,OAAlB;EAEA,OAAK7R,SAAL,GAAiB,IAAjB;;EAEA,EAAyB;EACvB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAAK0+B,cAAL,GAAsB6jB,MAAM,CAACC,GAA7B;EACA,SAAKnkB,eAAL,GAAuBkkB,MAAM,CAACC,GAA9B;EACA,SAAK7jB,gBAAL,GAAwB4jB,MAAM,CAACC,GAA/B;EACA,SAAKvd,gBAAL,GAAwBsd,MAAM,CAACC,GAA/B,CAhBuB;EAmBvB;EACA;;EACA,SAAK9jB,cAAL,GAAsB,CAAtB;EACA,SAAKL,eAAL,GAAuB,CAAC,CAAxB;EACA,SAAKM,gBAAL,GAAwB,CAAxB;EACA,SAAKsG,gBAAL,GAAwB,CAAxB;EACD;;EAED,EAAa;EACX;EACA,SAAK/B,QAAL,GAAgBmf,YAAY,EAA5B;EACA,SAAKxmC,YAAL,GAAoB,IAApB;EACA,SAAKD,WAAL,GAAmB,IAAnB;EACA,SAAKmsB,kBAAL,GAA0B,KAA1B;EACA,SAAKrT,eAAL,GAAuB,IAAvB;;EACA,QAAI,CAACwtB,iBAAD,IAAsB,OAAO3/C,MAAM,CAAC6/C,iBAAd,KAAoC,UAA9D,EAA0E;EACxE7/C,MAAAA,MAAM,CAAC6/C,iBAAP,CAAyB,IAAzB;EACD;EACF;EACF;EAGD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;EACA,IAAMK,WAAW,GAAG,UAClBplD,GADkB,EAElBysB,YAFkB,EAGlBpvB,GAHkB,EAIlBsiB,IAJkB,EAKX;EACP;EACA,SAAO,IAAIslC,SAAJ,CAAcjlD,GAAd,EAAmBysB,YAAnB,EAAiCpvB,GAAjC,EAAsCsiB,IAAtC,CAAP;EACD,CARD;;EAUA,SAAS5S,iBAAT,CAAyBC,SAAzB,EAA8C;EAC5C,MAAM3R,SAAS,GAAG2R,SAAS,CAAC3R,SAA5B;EACA,SAAO,CAAC,EAAEA,SAAS,IAAIA,SAAS,CAAC4R,gBAAzB,CAAR;EACD;;AAED,EAAO,SAASy1B,yBAAT,CAAmC5iC,IAAnC,EAA8C;EACnD,SACE,OAAOA,IAAP,KAAgB,UAAhB,IACA,CAACiN,iBAAe,CAACjN,IAAD,CADhB,IAEAA,IAAI,CAACsiB,YAAL,KAAsBpX,SAHxB;EAKD;AAED,EAAO,SAASo6B,uBAAT,CAAiCp4B,SAAjC,EAA+D;EACpE,MAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;EACnC,WAAOD,iBAAe,CAACC,SAAD,CAAf,GAA6BpR,cAA7B,GAA8CD,iBAArD;EACD,GAFD,MAEO,IAAIqR,SAAS,KAAKhC,SAAd,IAA2BgC,SAAS,KAAK,IAA7C,EAAmD;EACxD,QAAM/M,QAAQ,GAAG+M,SAAS,CAAC/M,QAA3B;;EACA,QAAIA,QAAQ,KAAKjC,sBAAjB,EAAyC;EACvC,aAAO1B,UAAP;EACD;;EACD,QAAI2D,QAAQ,KAAK9B,eAAjB,EAAkC;EAChC,aAAO1B,aAAP;EACD;EAMF;;EACD,SAAOZ,sBAAP;EACD;;AAGD,EAAO,SAAS8yB,oBAAT,CAA8BxrB,OAA9B,EAA8CspB,YAA9C,EAAwE;EAC7E,MAAIxd,cAAc,GAAG9L,OAAO,CAACR,SAA7B;;EACA,MAAIsM,cAAc,KAAK,IAAvB,EAA6B;EAC3B;EACA;EACA;EACA;EACA;EACAA,IAAAA,cAAc,GAAGm2C,WAAW,CAC1BjiD,OAAO,CAACnD,GADkB,EAE1BysB,YAF0B,EAG1BtpB,OAAO,CAAC9F,GAHkB,EAI1B8F,OAAO,CAACwc,IAJkB,CAA5B;EAMA1Q,IAAAA,cAAc,CAACsd,WAAf,GAA6BppB,OAAO,CAACopB,WAArC;EACAtd,IAAAA,cAAc,CAACnP,IAAf,GAAsBqD,OAAO,CAACrD,IAA9B;EACAmP,IAAAA,cAAc,CAAC3L,SAAf,GAA2BH,OAAO,CAACG,SAAnC;;EAEA,IAAa;EACX;EACA2L,MAAAA,cAAc,CAAC42B,QAAf,GAA0B1iC,OAAO,CAAC0iC,QAAlC;EACA52B,MAAAA,cAAc,CAACuP,YAAf,GAA8Brb,OAAO,CAACqb,YAAtC;EACAvP,MAAAA,cAAc,CAACsP,WAAf,GAA6Bpb,OAAO,CAACob,WAArC;EACAtP,MAAAA,cAAc,CAACooB,eAAf,GAAiCl0B,OAAO,CAACk0B,eAAzC;EACD;;EAEDpoB,IAAAA,cAAc,CAACtM,SAAf,GAA2BQ,OAA3B;EACAA,IAAAA,OAAO,CAACR,SAAR,GAAoBsM,cAApB;EACD,GA1BD,MA0BO;EACLA,IAAAA,cAAc,CAACwd,YAAf,GAA8BA,YAA9B,CADK;;EAGLxd,IAAAA,cAAc,CAACnP,IAAf,GAAsBqD,OAAO,CAACrD,IAA9B,CAHK;EAML;;EACAmP,IAAAA,cAAc,CAACpM,KAAf,GAAuBhC,OAAvB,CAPK;;EAULoO,IAAAA,cAAc,CAACkf,UAAf,GAA4B,IAA5B;EACAlf,IAAAA,cAAc,CAACmf,WAAf,GAA6B,IAA7B;EACAnf,IAAAA,cAAc,CAACif,UAAf,GAA4B,IAA5B;;EAEA,IAAyB;EACvB;EACA;EACA;EACA;EACAjf,MAAAA,cAAc,CAACoyB,cAAf,GAAgC,CAAhC;EACApyB,MAAAA,cAAc,CAAC+xB,eAAf,GAAiC,CAAC,CAAlC;EACD;EACF;;EAED/xB,EAAAA,cAAc,CAAC6U,UAAf,GAA4B3gB,OAAO,CAAC2gB,UAApC;EACA7U,EAAAA,cAAc,CAAC6G,KAAf,GAAuB3S,OAAO,CAAC2S,KAA/B;EAEA7G,EAAAA,cAAc,CAACjL,KAAf,GAAuBb,OAAO,CAACa,KAA/B;EACAiL,EAAAA,cAAc,CAACgd,aAAf,GAA+B9oB,OAAO,CAAC8oB,aAAvC;EACAhd,EAAAA,cAAc,CAACyW,aAAf,GAA+BviB,OAAO,CAACuiB,aAAvC;EACAzW,EAAAA,cAAc,CAAC+W,WAAf,GAA6B7iB,OAAO,CAAC6iB,WAArC,CA1D6E;EA6D7E;;EACA,MAAMq/B,mBAAmB,GAAGliD,OAAO,CAAC+gB,YAApC;EACAjV,EAAAA,cAAc,CAACiV,YAAf,GACEmhC,mBAAmB,KAAK,IAAxB,GACI,IADJ,GAEI;EACEvvC,IAAAA,KAAK,EAAEuvC,mBAAmB,CAACvvC,KAD7B;EAEEsO,IAAAA,YAAY,EAAEihC,mBAAmB,CAACjhC;EAFpC,GAHN,CA/D6E;;EAwE7EnV,EAAAA,cAAc,CAAChL,OAAf,GAAyBd,OAAO,CAACc,OAAjC;EACAgL,EAAAA,cAAc,CAAClJ,KAAf,GAAuB5C,OAAO,CAAC4C,KAA/B;EACAkJ,EAAAA,cAAc,CAACqe,GAAf,GAAqBnqB,OAAO,CAACmqB,GAA7B;;EAEA,EAAyB;EACvBre,IAAAA,cAAc,CAACqyB,gBAAf,GAAkCn+B,OAAO,CAACm+B,gBAA1C;EACAryB,IAAAA,cAAc,CAAC24B,gBAAf,GAAkCzkC,OAAO,CAACykC,gBAA1C;EACD;;EAED,EAAa;EACX34B,IAAAA,cAAc,CAACy7B,kBAAf,GAAoCvnC,OAAO,CAACunC,kBAA5C;;EACA,YAAQz7B,cAAc,CAACjP,GAAvB;EACE,WAAKnE,sBAAL;EACA,WAAKF,iBAAL;EACA,WAAKe,mBAAL;EACEuS,QAAAA,cAAc,CAACnP,IAAf,GAAsB+iC,8BAA8B,CAAC1/B,OAAO,CAACrD,IAAT,CAApD;EACA;;EACF,WAAKlE,cAAL;EACEqT,QAAAA,cAAc,CAACnP,IAAf,GAAsBwlC,2BAA2B,CAACniC,OAAO,CAACrD,IAAT,CAAjD;EACA;;EACF,WAAKxD,UAAL;EACE2S,QAAAA,cAAc,CAACnP,IAAf,GAAsBylC,gCAAgC,CAACpiC,OAAO,CAACrD,IAAT,CAAtD;EACA;EAXJ;EAeD;;EAED,SAAOmP,cAAP;EACD;;AAGD,EAAO,SAASgjB,mBAAT,CAA6BhjB,cAA7B,EAAoD4U,WAApD,EAAwE;EAC7E;EACA;EACA;EACA;EAEA;EACA;EAEA;EACA;EACA5U,EAAAA,cAAc,CAACpM,KAAf,IAAwB9B,SAAxB,CAX6E;;EAc7EkO,EAAAA,cAAc,CAACkf,UAAf,GAA4B,IAA5B;EACAlf,EAAAA,cAAc,CAACmf,WAAf,GAA6B,IAA7B;EACAnf,EAAAA,cAAc,CAACif,UAAf,GAA4B,IAA5B;EAEA,MAAM/qB,OAAO,GAAG8L,cAAc,CAACtM,SAA/B;;EACA,MAAIQ,OAAO,KAAK,IAAhB,EAAsB;EACpB;EACA8L,IAAAA,cAAc,CAAC6U,UAAf,GAA4BtP,OAA5B;EACAvF,IAAAA,cAAc,CAAC6G,KAAf,GAAuB+N,WAAvB;EAEA5U,IAAAA,cAAc,CAACjL,KAAf,GAAuB,IAAvB;EACAiL,IAAAA,cAAc,CAACgd,aAAf,GAA+B,IAA/B;EACAhd,IAAAA,cAAc,CAACyW,aAAf,GAA+B,IAA/B;EACAzW,IAAAA,cAAc,CAAC+W,WAAf,GAA6B,IAA7B;EAEA/W,IAAAA,cAAc,CAACiV,YAAf,GAA8B,IAA9B;EAEAjV,IAAAA,cAAc,CAAC3L,SAAf,GAA2B,IAA3B;;EAEA,IAAyB;EACvB;EACA;EACA2L,MAAAA,cAAc,CAACqyB,gBAAf,GAAkC,CAAlC;EACAryB,MAAAA,cAAc,CAAC24B,gBAAf,GAAkC,CAAlC;EACD;EACF,GApBD,MAoBO;EACL;EACA34B,IAAAA,cAAc,CAAC6U,UAAf,GAA4B3gB,OAAO,CAAC2gB,UAApC;EACA7U,IAAAA,cAAc,CAAC6G,KAAf,GAAuB3S,OAAO,CAAC2S,KAA/B;EAEA7G,IAAAA,cAAc,CAACjL,KAAf,GAAuBb,OAAO,CAACa,KAA/B;EACAiL,IAAAA,cAAc,CAACgd,aAAf,GAA+B9oB,OAAO,CAAC8oB,aAAvC;EACAhd,IAAAA,cAAc,CAACyW,aAAf,GAA+BviB,OAAO,CAACuiB,aAAvC;EACAzW,IAAAA,cAAc,CAAC+W,WAAf,GAA6B7iB,OAAO,CAAC6iB,WAArC,CARK;;EAUL/W,IAAAA,cAAc,CAACnP,IAAf,GAAsBqD,OAAO,CAACrD,IAA9B,CAVK;EAaL;;EACA,QAAMulD,mBAAmB,GAAGliD,OAAO,CAAC+gB,YAApC;EACAjV,IAAAA,cAAc,CAACiV,YAAf,GACEmhC,mBAAmB,KAAK,IAAxB,GACI,IADJ,GAEI;EACEvvC,MAAAA,KAAK,EAAEuvC,mBAAmB,CAACvvC,KAD7B;EAEEsO,MAAAA,YAAY,EAAEihC,mBAAmB,CAACjhC;EAFpC,KAHN;;EAQA,IAAyB;EACvB;EACA;EACAnV,MAAAA,cAAc,CAACqyB,gBAAf,GAAkCn+B,OAAO,CAACm+B,gBAA1C;EACAryB,MAAAA,cAAc,CAAC24B,gBAAf,GAAkCzkC,OAAO,CAACykC,gBAA1C;EACD;EACF;;EAED,SAAO34B,cAAP;EACD;AAED,EAAO,SAASq2C,mBAAT,CAA6BtlD,GAA7B,EAAkD;EACvD,MAAI2f,IAAJ;;EACA,MAAI3f,GAAG,KAAK8Q,cAAZ,EAA4B;EAC1B6O,IAAAA,IAAI,GAAGrC,cAAc,GAAGD,YAAjB,GAAgCD,UAAvC;EACD,GAFD,MAEO,IAAIpd,GAAG,KAAK6Q,YAAZ,EAA0B;EAC/B8O,IAAAA,IAAI,GAAGtC,YAAY,GAAGD,UAAtB;EACD,GAFM,MAEA;EACLuC,IAAAA,IAAI,GAAGxC,MAAP;EACD;;EAED,MAAIlb,CAAuBiP,iBAA3B,EAA8C;EAC5C;EACA;EACA;EACAyO,IAAAA,IAAI,IAAIpC,WAAR;EACD;;EAED,SAAO6nC,WAAW,CAACtpD,QAAD,EAAW,IAAX,EAAiB,IAAjB,EAAuB6jB,IAAvB,CAAlB;EACD;AAED,EAAO,SAASqjB,2BAAT,CACLljC,IADK;EAELzC,GAFK,EAGLovB,YAHK,EAILvpB,KAJK,EAKLyc,IALK,EAML7J,KANK,EAOE;EACP,MAAIyvC,QAAQ,GAAG1pD,sBAAf,CADO;;EAGP,MAAI+mC,YAAY,GAAG9iC,IAAnB;;EACA,MAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;EAC9B,QAAIiN,iBAAe,CAACjN,IAAD,CAAnB,EAA2B;EACzBylD,MAAAA,QAAQ,GAAG3pD,cAAX;;EACA,MAAa;EACXgnC,QAAAA,YAAY,GAAG0C,2BAA2B,CAAC1C,YAAD,CAA1C;EACD;EACF,KALD,MAKO;EACL,MAAa;EACXA,QAAAA,YAAY,GAAGC,8BAA8B,CAACD,YAAD,CAA7C;EACD;EACF;EACF,GAXD,MAWO,IAAI,OAAO9iC,IAAP,KAAgB,QAApB,EAA8B;EACnCylD,IAAAA,QAAQ,GAAGvpD,aAAX;EACD,GAFM,MAEA;EACLwpD,IAAAA,MAAM,EAAE,QAAQ1lD,IAAR;EACN,WAAKnC,mBAAL;EACE,eAAOqyB,uBAAuB,CAACvD,YAAY,CAAC3mB,QAAd,EAAwB6Z,IAAxB,EAA8B7J,KAA9B,EAAqCzY,GAArC,CAA9B;;EACF,WAAKqB,6BAAL;EACE6mD,QAAAA,QAAQ,GAAGppD,IAAX;EACAwjB,QAAAA,IAAI,IAAInC,gBAAR;EACA;;EACF,WAAK5f,sBAAL;EACE2nD,QAAAA,QAAQ,GAAGppD,IAAX;EACAwjB,QAAAA,IAAI,IAAIvC,UAAR;EACA;;EACF,WAAKvf,mBAAL;EACE,eAAO4nD,uBAAuB,CAACh5B,YAAD,EAAe9M,IAAf,EAAqB7J,KAArB,EAA4BzY,GAA5B,CAA9B;;EACF,WAAKY,mBAAL;EACE,eAAOynD,uBAAuB,CAACj5B,YAAD,EAAe9M,IAAf,EAAqB7J,KAArB,EAA4BzY,GAA5B,CAA9B;;EACF,WAAKa,wBAAL;EACE,eAAOynD,2BAA2B,CAACl5B,YAAD,EAAe9M,IAAf,EAAqB7J,KAArB,EAA4BzY,GAA5B,CAAlC;;EACF,WAAKsB,oBAAL;EACE,eAAO8oC,wBAAwB,CAAChb,YAAD,EAAe9M,IAAf,EAAqB7J,KAArB,EAA4BzY,GAA5B,CAA/B;;EACF,WAAKuB,wBAAL;EACE,eAAOgnD,2BAA2B,CAACn5B,YAAD,EAAe9M,IAAf,EAAqB7J,KAArB,EAA4BzY,GAA5B,CAAlC;;EACF,WAAKmB,gBAAL;AACE;EAGF;;EACA;EAAS;EACP,cAAI,OAAOsB,IAAP,KAAgB,QAAhB,IAA4BA,IAAI,KAAK,IAAzC,EAA+C;EAC7C,oBAAQA,IAAI,CAACG,QAAb;EACE,mBAAKnC,mBAAL;EACEynD,gBAAAA,QAAQ,GAAGlpD,eAAX;EACA,sBAAMmpD,MAAN;;EACF,mBAAKznD,kBAAL;EACE;EACAwnD,gBAAAA,QAAQ,GAAGnpD,eAAX;EACA,sBAAMopD,MAAN;;EACF,mBAAKxnD,sBAAL;EACEunD,gBAAAA,QAAQ,GAAGjpD,UAAX;;EACA,gBAAa;EACXsmC,kBAAAA,YAAY,GAAG2C,gCAAgC,CAAC3C,YAAD,CAA/C;EACD;;EACD,sBAAM4iB,MAAN;;EACF,mBAAKrnD,eAAL;EACEonD,gBAAAA,QAAQ,GAAG9oD,aAAX;EACA,sBAAM+oD,MAAN;;EACF,mBAAKpnD,eAAL;EACEmnD,gBAAAA,QAAQ,GAAG5oD,aAAX;EACAimC,gBAAAA,YAAY,GAAG,IAAf;EACA,sBAAM4iB,MAAN;;EACF,mBAAKnnD,gBAAL;EACEknD,gBAAAA,QAAQ,GAAGtoD,KAAX;EACA,sBAAMuoD,MAAN;EAvBJ;EAoCD;;EACD,cAAIt7C,IAAI,GAAG,EAAX;;EACA,UAAa;EACX,gBACEpK,IAAI,KAAKkL,SAAT,IACC,OAAOlL,IAAP,KAAgB,QAAhB,IACCA,IAAI,KAAK,IADV,IAECoF,MAAM,CAACkZ,IAAP,CAAYte,IAAZ,EAAkB0M,MAAlB,KAA6B,CAJjC,EAKE;EACAtC,cAAAA,IAAI,IACF,+DACA,0DADA,GAEA,gBAHF;EAID;;EACD,gBAAMy7B,SAAS,GAAGziC,KAAK,GAAGnD,gBAAgB,CAACmD,KAAK,CAACpD,IAAP,CAAnB,GAAkC,IAAzD;;EACA,gBAAI6lC,SAAJ,EAAe;EACbz7B,cAAAA,IAAI,IAAI,qCAAqCy7B,SAArC,GAAiD,IAAzD;EACD;EACF;;EAxDM;EAAA;EAAA,8JA8DL7lC,IAAI,IAAI,IAAR,GAAeA,IAAf,GAAsB,OAAOA,IA9DxB,UA+DLoK,IA/DK;EAAA;EAAA;EAiER;EA3FK;EA6FT;;EAED,MAAM1H,KAAK,GAAG4iD,WAAW,CAACG,QAAD,EAAW94B,YAAX,EAAyBpvB,GAAzB,EAA8BsiB,IAA9B,CAAzB;EACAnd,EAAAA,KAAK,CAAC+pB,WAAN,GAAoBzsB,IAApB;EACA0C,EAAAA,KAAK,CAAC1C,IAAN,GAAa8iC,YAAb;EACApgC,EAAAA,KAAK,CAACsT,KAAN,GAAcA,KAAd;;EAEA,EAAa;EACXtT,IAAAA,KAAK,CAAC+b,WAAN,GAAoBrb,KAApB;EACD;;EAED,SAAOV,KAAP;EACD;AAED,EAAO,SAASitB,sBAAT,CACLpiB,OADK,EAELsS,IAFK,EAGL7J,KAHK,EAIE;EACP,MAAI5S,KAAK,GAAG,IAAZ;;EACA,EAAa;EACXA,IAAAA,KAAK,GAAGmK,OAAO,CAACC,MAAhB;EACD;;EACD,MAAMxN,IAAI,GAAGuN,OAAO,CAACvN,IAArB;EACA,MAAMzC,GAAG,GAAGgQ,OAAO,CAAChQ,GAApB;EACA,MAAMovB,YAAY,GAAGpf,OAAO,CAAC5H,KAA7B;EACA,MAAMjD,KAAK,GAAGwgC,2BAA2B,CACvCljC,IADuC,EAEvCzC,GAFuC,EAGvCovB,YAHuC,EAIvCvpB,KAJuC,EAKvCyc,IALuC,EAMvC7J,KANuC,CAAzC;;EAQA,EAAa;EACXtT,IAAAA,KAAK,CAACgc,YAAN,GAAqBnR,OAAO,CAACE,OAA7B;EACA/K,IAAAA,KAAK,CAAC+b,WAAN,GAAoBlR,OAAO,CAACC,MAA5B;EACD;;EACD,SAAO9K,KAAP;EACD;AAED,EAAO,SAASwtB,uBAAT,CACL61B,QADK,EAELlmC,IAFK,EAGL7J,KAHK,EAILzY,GAJK,EAKE;EACP,MAAMmF,KAAK,GAAG4iD,WAAW,CAAClpD,QAAD,EAAW2pD,QAAX,EAAqBxoD,GAArB,EAA0BsiB,IAA1B,CAAzB;EACAnd,EAAAA,KAAK,CAACsT,KAAN,GAAcA,KAAd;EACA,SAAOtT,KAAP;EACD;AAED;EA4BA,SAASijD,uBAAT,CACEh5B,YADF,EAEE9M,IAFF,EAGE7J,KAHF,EAIEzY,GAJF,EAKS;EACP,EAAa;EACX,QAAI,OAAOovB,YAAY,CAACxjB,EAApB,KAA2B,QAA/B,EAAyC;EACvC,YAAc,yCAAd;EACD;EACF;;EAED,MAAMzG,KAAK,GAAG4iD,WAAW,CAAC7oD,QAAD,EAAWkwB,YAAX,EAAyBpvB,GAAzB,EAA8BsiB,IAAI,GAAGpC,WAArC,CAAzB,CAPO;;EASP/a,EAAAA,KAAK,CAAC+pB,WAAN,GAAoB1uB,mBAApB;EACA2E,EAAAA,KAAK,CAAC1C,IAAN,GAAajC,mBAAb;EACA2E,EAAAA,KAAK,CAACsT,KAAN,GAAcA,KAAd;;EAEA,EAAyB;EACvBtT,IAAAA,KAAK,CAACc,SAAN,GAAkB;EAChBygC,MAAAA,cAAc,EAAE,CADA;EAEhBC,MAAAA,qBAAqB,EAAE;EAFP,KAAlB;EAID;;EAED,SAAOxhC,KAAP;EACD;;AAED,EAAO,SAASkjD,uBAAT,CACLj5B,YADK,EAEL9M,IAFK,EAGL7J,KAHK,EAILzY,GAJK,EAKL;EACA,MAAMmF,KAAK,GAAG4iD,WAAW,CAAC5oD,iBAAD,EAAoBiwB,YAApB,EAAkCpvB,GAAlC,EAAuCsiB,IAAvC,CAAzB,CADA;EAIA;EACA;;EACAnd,EAAAA,KAAK,CAAC1C,IAAN,GAAa7B,mBAAb;EACAuE,EAAAA,KAAK,CAAC+pB,WAAN,GAAoBtuB,mBAApB;EAEAuE,EAAAA,KAAK,CAACsT,KAAN,GAAcA,KAAd;EACA,SAAOtT,KAAP;EACD;AAED,EAAO,SAASmjD,2BAAT,CACLl5B,YADK,EAEL9M,IAFK,EAGL7J,KAHK,EAILzY,GAJK,EAKL;EACA,MAAMmF,KAAK,GAAG4iD,WAAW,CAACtoD,qBAAD,EAAwB2vB,YAAxB,EAAsCpvB,GAAtC,EAA2CsiB,IAA3C,CAAzB;;EACA,EAAa;EACX;EACA;EACA;EACAnd,IAAAA,KAAK,CAAC1C,IAAN,GAAa5B,wBAAb;EACD;;EACDsE,EAAAA,KAAK,CAAC+pB,WAAN,GAAoBruB,wBAApB;EACAsE,EAAAA,KAAK,CAACsT,KAAN,GAAcA,KAAd;EACA,SAAOtT,KAAP;EACD;AAED,EAAO,SAASilC,wBAAT,CACLhb,YADK,EAEL9M,IAFK,EAGL7J,KAHK,EAILzY,GAJK,EAKL;EACA,MAAMmF,KAAK,GAAG4iD,WAAW,CAACloD,kBAAD,EAAqBuvB,YAArB,EAAmCpvB,GAAnC,EAAwCsiB,IAAxC,CAAzB,CADA;EAGA;EACA;;EACA,EAAa;EACXnd,IAAAA,KAAK,CAAC1C,IAAN,GAAanB,oBAAb;EACD;;EACD6D,EAAAA,KAAK,CAAC+pB,WAAN,GAAoB5tB,oBAApB;EACA6D,EAAAA,KAAK,CAACsT,KAAN,GAAcA,KAAd;EACA,SAAOtT,KAAP;EACD;AAED,EAAO,SAASojD,2BAAT,CACLn5B,YADK,EAEL9M,IAFK,EAGL7J,KAHK,EAILzY,GAJK,EAKL;EACA,MAAMmF,KAAK,GAAG4iD,WAAW,CAACjoD,qBAAD,EAAwBsvB,YAAxB,EAAsCpvB,GAAtC,EAA2CsiB,IAA3C,CAAzB,CADA;EAGA;EACA;;EACA,EAAa;EACXnd,IAAAA,KAAK,CAAC1C,IAAN,GAAalB,wBAAb;EACD;;EACD4D,EAAAA,KAAK,CAAC+pB,WAAN,GAAoB3tB,wBAApB;EACA4D,EAAAA,KAAK,CAACsT,KAAN,GAAcA,KAAd;EACA,SAAOtT,KAAP;EACD;AAED,EAAO,SAAS6sB,mBAAT,CACLy2B,OADK,EAELnmC,IAFK,EAGL7J,KAHK,EAIE;EACP,MAAMtT,KAAK,GAAG4iD,WAAW,CAACnpD,QAAD,EAAW6pD,OAAX,EAAoB,IAApB,EAA0BnmC,IAA1B,CAAzB;EACAnd,EAAAA,KAAK,CAACsT,KAAN,GAAcA,KAAd;EACA,SAAOtT,KAAP;EACD;AAED,EAgBO,SAASqtB,qBAAT,CACLF,MADK,EAELhQ,IAFK,EAGL7J,KAHK,EAIE;EACP,MAAM2W,YAAY,GAAGkD,MAAM,CAAC7pB,QAAP,KAAoB,IAApB,GAA2B6pB,MAAM,CAAC7pB,QAAlC,GAA6C,EAAlE;EACA,MAAMtD,KAAK,GAAG4iD,WAAW,CAACrpD,UAAD,EAAa0wB,YAAb,EAA2BkD,MAAM,CAACtyB,GAAlC,EAAuCsiB,IAAvC,CAAzB;EACAnd,EAAAA,KAAK,CAACsT,KAAN,GAAcA,KAAd;EACAtT,EAAAA,KAAK,CAACc,SAAN,GAAkB;EAChBuD,IAAAA,aAAa,EAAE8oB,MAAM,CAAC9oB,aADN;EAEhBk/C,IAAAA,eAAe,EAAE,IAFD;EAEO;EACvBn2B,IAAAA,cAAc,EAAED,MAAM,CAACC;EAHP,GAAlB;EAKA,SAAOptB,KAAP;EACD;;ECxvBD,SAASwjD,aAAT,CAAuBn/C,aAAvB,EAAsC7G,GAAtC,EAA2C8kC,OAA3C,EAAoD;EAClD,OAAK9kC,GAAL,GAAWA,GAAX;EACA,OAAK6G,aAAL,GAAqBA,aAArB;EACA,OAAKk/C,eAAL,GAAuB,IAAvB;EACA,OAAK5iD,OAAL,GAAe,IAAf;EACA,OAAKkrC,SAAL,GAAiB,IAAjB;EACA,OAAKvmB,YAAL,GAAoB,IAApB;EACA,OAAKs0B,aAAL,GAAqBr0C,SAArB;EACA,OAAK7H,OAAL,GAAe,IAAf;EACA,OAAKwkC,cAAL,GAAsB,IAAtB;EACA,OAAKI,OAAL,GAAeA,OAAf;EACA,OAAKhoB,YAAL,GAAoB,IAApB;EACA,OAAKq+B,gBAAL,GAAwB7mC,cAAxB;EACA,OAAK4D,UAAL,GAAkB6B,aAAa,CAACvF,OAAD,CAA/B;EACA,OAAKiE,eAAL,GAAuBsB,aAAa,CAACpE,WAAD,CAApC;EAEA,OAAKsB,YAAL,GAAoBzC,OAApB;EACA,OAAK6C,cAAL,GAAsB7C,OAAtB;EACA,OAAK8C,WAAL,GAAmB9C,OAAnB;EACA,OAAK4C,YAAL,GAAoB5C,OAApB;EACA,OAAKkG,gBAAL,GAAwBlG,OAAxB;EACA,OAAKunC,aAAL,GAAqBvnC,OAArB;EAEA,OAAKqD,cAAL,GAAsBrD,OAAtB;EACA,OAAKsD,aAAL,GAAqBiC,aAAa,CAACvF,OAAD,CAAlC;;EAMA,EAA4B;EAC1B,SAAKssC,mBAAL,GAA2BruC,oBAAoB,EAA/C;EACA,SAAK0gC,oBAAL,GAA4B,IAAI3yB,GAAJ,EAA5B;EACA,SAAKwgC,qBAAL,GAA6B,IAAIz1C,GAAJ,EAA7B;EACD;;EAKD,EAAa;EACX,YAAQvL,GAAR;EACE,WAAK6Q,YAAL;EACE,aAAKo1C,cAAL,GAAsB,sBAAtB;EACA;;EACF,WAAKn1C,cAAL;EACE,aAAKm1C,cAAL,GAAsB,cAAtB;EACA;;EACF,WAAKr1C,UAAL;EACE,aAAKq1C,cAAL,GAAsB,oBAAtB;EACA;EATJ;EAWD;EACF;;AAED,EAAO,SAASC,eAAT,CACLr/C,aADK,EAEL7G,GAFK,EAGL8kC,OAHK,EAILqhB,kBAJK,EAKM;EACX,MAAMx0C,IAAe,GAAI,IAAIq0C,aAAJ,CAAkBn/C,aAAlB,EAAiC7G,GAAjC,EAAsC8kC,OAAtC,CAAzB;EAMA;;;EACA,MAAMshB,kBAAkB,GAAGd,mBAAmB,CAACtlD,GAAD,CAA9C;EACA2R,EAAAA,IAAI,CAACxO,OAAL,GAAeijD,kBAAf;EACAA,EAAAA,kBAAkB,CAAC9iD,SAAnB,GAA+BqO,IAA/B;EAEA6T,EAAAA,qBAAqB,CAAC4gC,kBAAD,CAArB;EAEA,SAAOz0C,IAAP;EACD;;ECsBD,IAAI00C,yBAAJ;AACA;AAEA,EAAa;EACXA,EAAAA,yBAAyB,GAAG,KAA5B;AACAC,EACD;;EAED,SAASC,oBAAT,CACEC,eADF,EAEU;EACR,MAAI,CAACA,eAAL,EAAsB;EACpB,WAAO53C,kBAAP;EACD;;EAED,MAAMpM,KAAK,GAAGgB,GAAW,CAACgjD,eAAD,CAAzB;EACA,MAAMt2C,aAAa,GAAGS,0BAA0B,CAACnO,KAAD,CAAhD;;EAEA,MAAIA,KAAK,CAACxC,GAAN,KAAcpE,cAAlB,EAAkC;EAChC,QAAMoR,SAAS,GAAGxK,KAAK,CAAC1C,IAAxB;;EACA,QAAIskC,iBAAuB,CAACp3B,SAAD,CAA3B,EAAwC;EACtC,aAAOiD,mBAAmB,CAACzN,KAAD,EAAQwK,SAAR,EAAmBkD,aAAnB,CAA1B;EACD;EACF;;EAED,SAAOA,aAAP;EACD;;AA0FD,EAAO,SAASu2C,eAAT,CACL5/C,aADK,EAEL7G,GAFK,EAGL8kC,OAHK,EAILqhB,kBAJK,EAKO;EACZ,SAAOD,eAAe,CAACr/C,aAAD,EAAgB7G,GAAhB,EAAqB8kC,OAArB,AAAA,CAAtB;EACD;AAED,EAAO,SAASkf,eAAT,CACL32C,OADK,EAEL7G,SAFK,EAGLggD,eAHK,EAIL/pC,QAJK,EAKC;EACN,EAAa;EACX/K,IAAAA,cAAc,CAAClL,SAAD,EAAY6G,OAAZ,CAAd;EACD;;EACD,MAAMlK,SAAO,GAAGqD,SAAS,CAACrD,OAA1B;EACA,MAAMiV,SAAS,GAAGgR,gBAAgB,EAAlC;;EACA,EAAa;EACX;EACA,QAAI,gBAAgB,OAAOwT,IAA3B,EAAiC;EAC/BgkB,MAAAA,uBAAuB,CAACz9C,SAAD,CAAvB;EACAs8B,MAAAA,8BAA8B,CAACt8B,SAAD,CAA9B;EACD;EACF;;EACD,MAAM6U,IAAI,GAAGqR,iBAAiB,CAAClmB,SAAD,CAA9B;;EAMA,MAAMjD,OAAO,GAAGqmD,oBAAoB,CAACC,eAAD,CAApC;;EACA,MAAIhgD,SAAS,CAACtG,OAAV,KAAsB,IAA1B,EAAgC;EAC9BsG,IAAAA,SAAS,CAACtG,OAAV,GAAoBA,OAApB;EACD,GAFD,MAEO;EACLsG,IAAAA,SAAS,CAACk+B,cAAV,GAA2BxkC,OAA3B;EACD;;EAED,EAAa;EACX,QACEwmD,WAA4B,IAC5B3G,OAAwB,KAAK,IAD7B,IAEA,CAACsG,yBAHH,EAIE;EACAA,MAAAA,yBAAyB,GAAG,IAA5B;;EACA,YACE,kEACE,kEADF,GAEE,iEAFF,GAGE,gCAJJ,EAKEtmD,gBAAgB,CAACggD,OAAwB,CAACjgD,IAA1B,CAAhB,IAAmD,SALrD;EAOD;EACF;;EAED,MAAMwkB,MAAM,GAAGC,YAAY,CAACnM,SAAD,EAAYJ,IAAZ,CAA3B,CA3CM;EA6CN;;EACAsM,EAAAA,MAAM,CAAC9jB,OAAP,GAAiB;EAAC6M,IAAAA,OAAO,EAAPA;EAAD,GAAjB;EAEAoP,EAAAA,QAAQ,GAAGA,QAAQ,KAAKzR,SAAb,GAAyB,IAAzB,GAAgCyR,QAA3C;;EACA,MAAIA,QAAQ,KAAK,IAAjB,EAAuB;EACrB,IAAa;EACX,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;EAClC,cACE,yEACE,iCAFJ,EAGEA,QAHF;EAKD;EACF;;EACD6H,IAAAA,MAAM,CAAC7H,QAAP,GAAkBA,QAAlB;EACD;;EAEDgI,EAAAA,aAAa,CAACthB,SAAD,EAAUmhB,MAAV,CAAb;EACAgF,EAAAA,qBAAqB,CAACnmB,SAAD,EAAU6U,IAAV,EAAgBI,SAAhB,CAArB;EAEA,SAAOJ,IAAP;EACD;AAED,EAcO,SAAS2uC,qBAAT,CACLngD,SADK,EAE8C;EACnD,MAAMogD,cAAc,GAAGpgD,SAAS,CAACrD,OAAjC;;EACA,MAAI,CAACyjD,cAAc,CAAC5iD,KAApB,EAA2B;EACzB,WAAO,IAAP;EACD;;EACD,UAAQ4iD,cAAc,CAAC5iD,KAAf,CAAqBhE,GAA7B;EACE,SAAKhE,aAAL;EACE,aAAOoJ,iBAAiB,CAACwhD,cAAc,CAAC5iD,KAAf,CAAqBV,SAAtB,CAAxB;;EACF;EACE,aAAOsjD,cAAc,CAAC5iD,KAAf,CAAqBV,SAA5B;EAJJ;EAMD;AAED;EA8GA,IAAIujD,iBAAiB,GAAG,UAAArkD,KAAK;EAAA,SAAI,KAAJ;EAAA,CAA7B;;AAEA,EAAO,SAASmkC,aAAT,CAAuBnkC,KAAvB,EAA8C;EACnD,SAAOqkD,iBAAiB,CAACrkD,KAAD,CAAxB;EACD;EAED,IAAIskD,iBAAiB,GAAG,IAAxB;EACA,IAAIC,2BAA2B,GAAG,IAAlC;EACA,IAAIC,2BAA2B,GAAG,IAAlC;EACA,IAAIC,aAAa,GAAG,IAApB;EACA,IAAIC,uBAAuB,GAAG,IAA9B;EACA,IAAIC,uBAAuB,GAAG,IAA9B;EACA,IAAIC,cAAc,GAAG,IAArB;EACA,IAAIC,kBAAkB,GAAG,IAAzB;;AAEA,EAAa;EACX,MAAMC,kBAAkB,GAAG,UACzBC,GADyB,EAEzBC,IAFyB,EAGzBzhD,KAHyB,EAItB;EACH,QAAM1I,GAAG,GAAGmqD,IAAI,CAACzhD,KAAD,CAAhB;EACA,QAAM0hD,OAAO,GAAG7hD,KAAK,CAACC,OAAN,CAAc0hD,GAAd,IAAqBA,GAAG,CAACrqC,KAAJ,EAArB,eAAuCqqC,GAAvC,CAAhB;;EACA,QAAIxhD,KAAK,GAAG,CAAR,KAAcyhD,IAAI,CAACh7C,MAAvB,EAA+B;EAC7B,UAAI5G,KAAK,CAACC,OAAN,CAAc4hD,OAAd,CAAJ,EAA4B;EAC1BA,QAAAA,OAAO,CAACxhD,MAAR,CAAiB5I,GAAjB,EAAqC,CAArC;EACD,OAFD,MAEO;EACL,eAAOoqD,OAAO,CAACpqD,GAAD,CAAd;EACD;;EACD,aAAOoqD,OAAP;EACD,KAVE;;;EAYHA,IAAAA,OAAO,CAACpqD,GAAD,CAAP,GAAeiqD,kBAAkB,CAACC,GAAG,CAAClqD,GAAD,CAAJ,EAAWmqD,IAAX,EAAiBzhD,KAAK,GAAG,CAAzB,CAAjC;EACA,WAAO0hD,OAAP;EACD,GAlBD;;EAoBA,MAAMC,cAAc,GAAG,UACrBH,GADqB,EAErBC,IAFqB,EAGG;EACxB,WAAOF,kBAAkB,CAACC,GAAD,EAAMC,IAAN,EAAY,CAAZ,CAAzB;EACD,GALD;;EAOA,MAAMG,kBAAkB,GAAG,UACzBJ,GADyB,EAEzBK,OAFyB,EAGzBC,OAHyB,EAIzB9hD,KAJyB,EAKtB;EACH,QAAM+hD,MAAM,GAAGF,OAAO,CAAC7hD,KAAD,CAAtB;EACA,QAAM0hD,OAAO,GAAG7hD,KAAK,CAACC,OAAN,CAAc0hD,GAAd,IAAqBA,GAAG,CAACrqC,KAAJ,EAArB,eAAuCqqC,GAAvC,CAAhB;;EACA,QAAIxhD,KAAK,GAAG,CAAR,KAAc6hD,OAAO,CAACp7C,MAA1B,EAAkC;EAChC,UAAMu7C,MAAM,GAAGF,OAAO,CAAC9hD,KAAD,CAAtB,CADgC;;EAGhC0hD,MAAAA,OAAO,CAACM,MAAD,CAAP,GAAkBN,OAAO,CAACK,MAAD,CAAzB;;EACA,UAAIliD,KAAK,CAACC,OAAN,CAAc4hD,OAAd,CAAJ,EAA4B;EAC1BA,QAAAA,OAAO,CAACxhD,MAAR,CAAiB6hD,MAAjB,EAAwC,CAAxC;EACD,OAFD,MAEO;EACL,eAAOL,OAAO,CAACK,MAAD,CAAd;EACD;EACF,KATD,MASO;EACL;EACAL,MAAAA,OAAO,CAACK,MAAD,CAAP,GAAkBH,kBAAkB;EAElCJ,MAAAA,GAAG,CAACO,MAAD,CAF+B,EAGlCF,OAHkC,EAIlCC,OAJkC,EAKlC9hD,KAAK,GAAG,CAL0B,CAApC;EAOD;;EACD,WAAO0hD,OAAP;EACD,GA5BD;;EA8BA,MAAMO,cAAc,GAAG,UACrBT,GADqB,EAErBK,OAFqB,EAGrBC,OAHqB,EAIG;EACxB,QAAID,OAAO,CAACp7C,MAAR,KAAmBq7C,OAAO,CAACr7C,MAA/B,EAAuC;EACrC,WAAa,mDAAb;;EACA;EACD,KAHD,MAGO;EACL,WAAK,IAAI0N,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2tC,OAAO,CAACr7C,MAAR,GAAiB,CAArC,EAAwC0N,CAAC,EAAzC,EAA6C;EAC3C,YAAI0tC,OAAO,CAAC1tC,CAAD,CAAP,KAAe2tC,OAAO,CAAC3tC,CAAD,CAA1B,EAA+B;EAC7B,eACE,0EADF;;EAGA;EACD;EACF;EACF;;EACD,WAAOytC,kBAAkB,CAACJ,GAAD,EAAMK,OAAN,EAAeC,OAAf,EAAwB,CAAxB,CAAzB;EACD,GAnBD;;EAqBA,MAAMI,eAAe,GAAG,UACtBV,GADsB,EAEtBC,IAFsB,EAGtBzhD,KAHsB,EAItBvI,KAJsB,EAKnB;EACH,QAAIuI,KAAK,IAAIyhD,IAAI,CAACh7C,MAAlB,EAA0B;EACxB,aAAOhP,KAAP;EACD;;EACD,QAAMH,GAAG,GAAGmqD,IAAI,CAACzhD,KAAD,CAAhB;EACA,QAAM0hD,OAAO,GAAG7hD,KAAK,CAACC,OAAN,CAAc0hD,GAAd,IAAqBA,GAAG,CAACrqC,KAAJ,EAArB,eAAuCqqC,GAAvC,CAAhB,CALG;;EAOHE,IAAAA,OAAO,CAACpqD,GAAD,CAAP,GAAe4qD,eAAe,CAACV,GAAG,CAAClqD,GAAD,CAAJ,EAAWmqD,IAAX,EAAiBzhD,KAAK,GAAG,CAAzB,EAA4BvI,KAA5B,CAA9B;EACA,WAAOiqD,OAAP;EACD,GAdD;;EAgBA,MAAMS,WAAW,GAAG,UAClBX,GADkB,EAElBC,IAFkB,EAGlBhqD,KAHkB,EAIM;EACxB,WAAOyqD,eAAe,CAACV,GAAD,EAAMC,IAAN,EAAY,CAAZ,EAAehqD,KAAf,CAAtB;EACD,GAND;;EAQA,MAAM2qD,QAAQ,GAAG,UAAC3lD,KAAD,EAAeyG,EAAf,EAA8B;EAC7C;EACA;EACA,QAAIysB,WAAW,GAAGlzB,KAAK,CAACkjB,aAAxB;;EACA,WAAOgQ,WAAW,KAAK,IAAhB,IAAwBzsB,EAAE,GAAG,CAApC,EAAuC;EACrCysB,MAAAA,WAAW,GAAGA,WAAW,CAAChR,IAA1B;EACAzb,MAAAA,EAAE;EACH;;EACD,WAAOysB,WAAP;EACD,GATD,CAvGW;;;EAmHXoxB,EAAAA,iBAAiB,GAAG,UAClBtkD,KADkB,EAElByG,EAFkB,EAGlBu+C,IAHkB,EAIlBhqD,KAJkB,EAKf;EACH,QAAM8T,IAAI,GAAG62C,QAAQ,CAAC3lD,KAAD,EAAQyG,EAAR,CAArB;;EACA,QAAIqI,IAAI,KAAK,IAAb,EAAmB;EACjB,UAAM6V,QAAQ,GAAG+gC,WAAW,CAAC52C,IAAI,CAACoU,aAAN,EAAqB8hC,IAArB,EAA2BhqD,KAA3B,CAA5B;EACA8T,MAAAA,IAAI,CAACoU,aAAL,GAAqByB,QAArB;EACA7V,MAAAA,IAAI,CAACmU,SAAL,GAAiB0B,QAAjB,CAHiB;EAMjB;EACA;EACA;EACA;;EACA3kB,MAAAA,KAAK,CAACypB,aAAN,eAA0BzpB,KAAK,CAACypB,aAAhC;EAEA3C,MAAAA,qBAAqB,CAAC9mB,KAAD,EAAQkS,QAAR,EAAkBiB,WAAlB,CAArB;EACD;EACF,GArBD;;EAsBAoxC,EAAAA,2BAA2B,GAAG,UAC5BvkD,KAD4B,EAE5ByG,EAF4B,EAG5Bu+C,IAH4B,EAIzB;EACH,QAAMl2C,IAAI,GAAG62C,QAAQ,CAAC3lD,KAAD,EAAQyG,EAAR,CAArB;;EACA,QAAIqI,IAAI,KAAK,IAAb,EAAmB;EACjB,UAAM6V,QAAQ,GAAGugC,cAAc,CAACp2C,IAAI,CAACoU,aAAN,EAAqB8hC,IAArB,CAA/B;EACAl2C,MAAAA,IAAI,CAACoU,aAAL,GAAqByB,QAArB;EACA7V,MAAAA,IAAI,CAACmU,SAAL,GAAiB0B,QAAjB,CAHiB;EAMjB;EACA;EACA;EACA;;EACA3kB,MAAAA,KAAK,CAACypB,aAAN,eAA0BzpB,KAAK,CAACypB,aAAhC;EAEA3C,MAAAA,qBAAqB,CAAC9mB,KAAD,EAAQkS,QAAR,EAAkBiB,WAAlB,CAArB;EACD;EACF,GApBD;;EAqBAqxC,EAAAA,2BAA2B,GAAG,UAC5BxkD,KAD4B,EAE5ByG,EAF4B,EAG5B2+C,OAH4B,EAI5BC,OAJ4B,EAKzB;EACH,QAAMv2C,IAAI,GAAG62C,QAAQ,CAAC3lD,KAAD,EAAQyG,EAAR,CAArB;;EACA,QAAIqI,IAAI,KAAK,IAAb,EAAmB;EACjB,UAAM6V,QAAQ,GAAG6gC,cAAc,CAAC12C,IAAI,CAACoU,aAAN,EAAqBkiC,OAArB,EAA8BC,OAA9B,CAA/B;EACAv2C,MAAAA,IAAI,CAACoU,aAAL,GAAqByB,QAArB;EACA7V,MAAAA,IAAI,CAACmU,SAAL,GAAiB0B,QAAjB,CAHiB;EAMjB;EACA;EACA;EACA;;EACA3kB,MAAAA,KAAK,CAACypB,aAAN,eAA0BzpB,KAAK,CAACypB,aAAhC;EAEA3C,MAAAA,qBAAqB,CAAC9mB,KAAD,EAAQkS,QAAR,EAAkBiB,WAAlB,CAArB;EACD;EACF,GArBD,CA9JW;;;EAsLXsxC,EAAAA,aAAa,GAAG,UAACzkD,KAAD,EAAeglD,IAAf,EAA6ChqD,KAA7C,EAA4D;EAC1EgF,IAAAA,KAAK,CAACiqB,YAAN,GAAqBy7B,WAAW,CAAC1lD,KAAK,CAACypB,aAAP,EAAsBu7B,IAAtB,EAA4BhqD,KAA5B,CAAhC;;EACA,QAAIgF,KAAK,CAACG,SAAV,EAAqB;EACnBH,MAAAA,KAAK,CAACG,SAAN,CAAgB8pB,YAAhB,GAA+BjqB,KAAK,CAACiqB,YAArC;EACD;;EACDnD,IAAAA,qBAAqB,CAAC9mB,KAAD,EAAQkS,QAAR,EAAkBiB,WAAlB,CAArB;EACD,GAND;;EAOAuxC,EAAAA,uBAAuB,GAAG,UAAC1kD,KAAD,EAAeglD,IAAf,EAAgD;EACxEhlD,IAAAA,KAAK,CAACiqB,YAAN,GAAqBi7B,cAAc,CAACllD,KAAK,CAACypB,aAAP,EAAsBu7B,IAAtB,CAAnC;;EACA,QAAIhlD,KAAK,CAACG,SAAV,EAAqB;EACnBH,MAAAA,KAAK,CAACG,SAAN,CAAgB8pB,YAAhB,GAA+BjqB,KAAK,CAACiqB,YAArC;EACD;;EACDnD,IAAAA,qBAAqB,CAAC9mB,KAAD,EAAQkS,QAAR,EAAkBiB,WAAlB,CAArB;EACD,GAND;;EAOAwxC,EAAAA,uBAAuB,GAAG,UACxB3kD,KADwB,EAExBolD,OAFwB,EAGxBC,OAHwB,EAIrB;EACHrlD,IAAAA,KAAK,CAACiqB,YAAN,GAAqBu7B,cAAc,CAACxlD,KAAK,CAACypB,aAAP,EAAsB27B,OAAtB,EAA+BC,OAA/B,CAAnC;;EACA,QAAIrlD,KAAK,CAACG,SAAV,EAAqB;EACnBH,MAAAA,KAAK,CAACG,SAAN,CAAgB8pB,YAAhB,GAA+BjqB,KAAK,CAACiqB,YAArC;EACD;;EACDnD,IAAAA,qBAAqB,CAAC9mB,KAAD,EAAQkS,QAAR,EAAkBiB,WAAlB,CAArB;EACD,GAVD;;EAYAyxC,EAAAA,cAAc,GAAG,UAAC5kD,KAAD,EAAkB;EACjC8mB,IAAAA,qBAAqB,CAAC9mB,KAAD,EAAQkS,QAAR,EAAkBiB,WAAlB,CAArB;EACD,GAFD;;EAIA0xC,EAAAA,kBAAkB,GAAG,UAACe,oBAAD,EAA4C;EAC/DvB,IAAAA,iBAAiB,GAAGuB,oBAApB;EACD,GAFD;EAGD;;EAED,SAASC,uBAAT,CAAiC7lD,KAAjC,EAA+E;EAC7E,MAAM8lD,SAAS,GAAGnkD,oBAAoB,CAAC3B,KAAD,CAAtC;;EACA,MAAI8lD,SAAS,KAAK,IAAlB,EAAwB;EACtB,WAAO,IAAP;EACD;;EACD,SAAOA,SAAS,CAAChlD,SAAjB;EACD;;EAED,SAASilD,4BAAT,CACEllD,QADF,EAEgB;EACd,SAAO,IAAP;EACD;;EAED,SAASmlD,0BAAT,GAAsC;EACpC,SAAOzI,OAAP;EACD;;AAED,EAAO,SAAS0I,kBAAT,CAA4BC,cAA5B,EAAqE;EAAA,MACnEC,uBADmE,GACxCD,cADwC,CACnEC,uBADmE;EAAA,MAEnEh+C,sBAFmE,GAEzCvQ,oBAFyC,CAEnEuQ,sBAFmE;EAI1E,SAAOyG,eAAe,CAAC;EACrBw3C,IAAAA,UAAU,EAAEF,cAAc,CAACE,UADN;EAErBvzB,IAAAA,OAAO,EAAEqzB,cAAc,CAACrzB,OAFH;EAGrBwzB,IAAAA,mBAAmB,EAAEH,cAAc,CAACG,mBAHf;EAIrBC,IAAAA,cAAc,EAAEJ,cAAc,CAACI,cAJV;EAKrBhC,IAAAA,iBAAiB,EAAjBA,iBALqB;EAMrBC,IAAAA,2BAA2B,EAA3BA,2BANqB;EAOrBC,IAAAA,2BAA2B,EAA3BA,2BAPqB;EAQrBC,IAAAA,aAAa,EAAbA,aARqB;EASrBC,IAAAA,uBAAuB,EAAvBA,uBATqB;EAUrBC,IAAAA,uBAAuB,EAAvBA,uBAVqB;EAWrBE,IAAAA,kBAAkB,EAAlBA,kBAXqB;EAYrBD,IAAAA,cAAc,EAAdA,cAZqB;EAarB2B,IAAAA,oBAAoB,EAAEp+C,sBAbD;EAcrB09C,IAAAA,uBAAuB,EAAvBA,uBAdqB;EAerBM,IAAAA,uBAAuB,EACrBA,uBAAuB,IAAIJ,4BAhBR;EAiBrB;EACAnE,IAAAA,2BAA2B,EAAEvyC,CAAUuyC,2BAAH,CAlBf;EAmBrBT,IAAAA,eAAe,EAAE9xC,CAAU8xC,eAAH,CAnBH;EAoBrBI,IAAAA,YAAY,EAAElyC,CAAUkyC,YAAH,CApBA;EAqBrBd,IAAAA,iBAAiB,EAAEpxC,CAAUoxC,iBAAH,CArBL;EAsBrB;EACA+F,IAAAA,eAAe,EAAEn3C,CAAU22C,0BAAH;EAvBH,GAAD,CAAtB;EAyBD;;MC9qBMxR,yBAAwB58C,qBAAxB48C;EAyBP,IAAMiS,kBAAkB,GAAG;EACzB3jD,EAAAA,cAAc,EAAE,YAAW;EACzB,WAAO,IAAP;EACD;EAHwB,CAA3B;;EAMA,SAAS4jD,MAAT,CAAgB7jD,IAAhB,EAA6E;EAC3E,MAAIA,IAAI,CAAC6B,QAAT,EAAmB;EACjB;EACA;EACA;EACA,WAAO,IAAP;EACD;;EACD,UAAQ7B,IAAI,CAACrF,GAAb;EACE,SAAK,MAAL;EACE,aAAOqF,IAAI,CAACqC,IAAZ;;EACF,SAAK,UAAL;EAAiB;EACf;EACA;EACA;EAHe,0BAIcrC,IAAI,CAACI,KAJnB;EAAA,YAIRK,QAJQ,eAIRA,QAJQ;EAAA,YAIKL,KAJL;EAKf;;;EACA,YAAI0jD,gBAAgB,GAAG,IAAvB;;EACA,YAAI9jD,IAAI,CAACS,QAAL,IAAiBT,IAAI,CAACS,QAAL,CAAc0G,MAAnC,EAA2C;EACzC,eAAK,IAAI0N,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG7U,IAAI,CAACS,QAAL,CAAc0G,MAAlC,EAA0C0N,CAAC,EAA3C,EAA+C;EAC7C,gBAAMkvC,aAAa,GAAGF,MAAM,CAAC7jD,IAAI,CAACS,QAAL,CAAcoU,CAAd,CAAD,CAA5B;;EACA,gBAAIkvC,aAAa,KAAK,IAAtB,EAA4B;EAC1B,kBAAID,gBAAgB,KAAK,IAAzB,EAA+B;EAC7BA,gBAAAA,gBAAgB,GAAG,CAACC,aAAD,CAAnB;EACD,eAFD,MAEO;EACLD,gBAAAA,gBAAgB,CAACjjD,IAAjB,CAAsBkjD,aAAtB;EACD;EACF;EACF;EACF;;EACD,YAAMC,IAA2B,GAAG;EAClCvpD,UAAAA,IAAI,EAAEuF,IAAI,CAACvF,IADuB;EAElC2F,UAAAA,KAAK,EAAEA,KAF2B;EAGlCK,UAAAA,QAAQ,EAAEqjD;EAHwB,SAApC;EAKAjkD,QAAAA,MAAM,CAAC+G,cAAP,CAAsBo9C,IAAtB,EAA4B,UAA5B,EAAwC;EACtC7rD,UAAAA,KAAK,EAAEqB,MAAM,CAACC,GAAP,CAAW,iBAAX;EAD+B,SAAxC;EAGA,eAAOuqD,IAAP;EACD;;EACD;EACE,YAAM,IAAIp+C,KAAJ,sCAA6C5F,IAAI,CAACrF,GAAlD,CAAN;EAjCJ;EAmCD;;EAED,SAASspD,cAAT,CAAwB7mD,IAAxB,EAA8B;EAC5B,MAAI,CAACA,IAAL,EAAW;EACT,WAAO,IAAP;EACD;;EACD,MAAMqD,QAAQ,GAAGyjD,oBAAoB,CAAC9mD,IAAD,CAArC;;EACA,MAAIqD,QAAQ,CAAC0G,MAAT,KAAoB,CAAxB,EAA2B;EACzB,WAAO,IAAP;EACD,GAFD,MAEO,IAAI1G,QAAQ,CAAC0G,MAAT,KAAoB,CAAxB,EAA2B;EAChC,WAAOg9C,MAAM,CAAC1jD,QAAQ,CAAC,CAAD,CAAT,CAAb;EACD;;EACD,SAAO2jD,OAAO,CAAC3jD,QAAQ,CAAC7K,GAAT,CAAauuD,MAAb,CAAD,CAAd;EACD;;EAED,SAASD,oBAAT,CAA8BG,eAA9B,EAA+C;EAC7C,MAAM7pC,KAAK,GAAG,EAAd;EACA,MAAIpd,IAAI,GAAGinD,eAAX;;EACA,SAAOjnD,IAAI,IAAI,IAAf,EAAqB;EACnBod,IAAAA,KAAK,CAAC3Z,IAAN,CAAWzD,IAAX;EACAA,IAAAA,IAAI,GAAGA,IAAI,CAACwB,OAAZ;EACD;;EACD,SAAO4b,KAAP;EACD;;EAED,SAAS4pC,OAAT,CAAiBE,GAAjB,EAAsB;EACpB,MAAMjH,MAAM,GAAG,EAAf;EACA,MAAM7nD,KAAK,GAAG,CAAC;EAACqf,IAAAA,CAAC,EAAE,CAAJ;EAAO2F,IAAAA,KAAK,EAAE8pC;EAAd,GAAD,CAAd;;EACA,SAAO9uD,KAAK,CAAC2R,MAAb,EAAqB;EACnB,QAAMo9C,CAAC,GAAG/uD,KAAK,CAAC4T,GAAN,EAAV;;EACA,WAAOm7C,CAAC,CAAC1vC,CAAF,GAAM0vC,CAAC,CAAC/pC,KAAF,CAAQrT,MAArB,EAA6B;EAC3B,UAAMq9C,EAAE,GAAGD,CAAC,CAAC/pC,KAAF,CAAQ+pC,CAAC,CAAC1vC,CAAV,CAAX;EACA0vC,MAAAA,CAAC,CAAC1vC,CAAF,IAAO,CAAP;;EACA,UAAItU,KAAK,CAACC,OAAN,CAAcgkD,EAAd,CAAJ,EAAuB;EACrBhvD,QAAAA,KAAK,CAACqL,IAAN,CAAW0jD,CAAX;EACA/uD,QAAAA,KAAK,CAACqL,IAAN,CAAW;EAACgU,UAAAA,CAAC,EAAE,CAAJ;EAAO2F,UAAAA,KAAK,EAAEgqC;EAAd,SAAX;EACA;EACD;;EACDnH,MAAAA,MAAM,CAACx8C,IAAP,CAAY2jD,EAAZ;EACD;EACF;;EACD,SAAOnH,MAAP;EACD;;EAED,SAAS8G,MAAT,CAAgB/mD,IAAhB,EAA8B;EAC5B,MAAIA,IAAI,IAAI,IAAZ,EAAkB;EAChB,WAAO,IAAP;EACD;;EACD,UAAQA,IAAI,CAACzC,GAAb;EACE,SAAKlE,QAAL;EACE,aAAOwtD,cAAc,CAAC7mD,IAAI,CAACuB,KAAN,CAArB;;EACF,SAAKjI,UAAL;EACE,aAAOutD,cAAc,CAAC7mD,IAAI,CAACuB,KAAN,CAArB;;EACF,SAAKpI,cAAL;EACE,aAAO;EACLkuD,QAAAA,QAAQ,EAAE,WADL;EAELhqD,QAAAA,IAAI,EAAE2C,IAAI,CAAC3C,IAFN;EAGL2F,QAAAA,KAAK,cAAMhD,IAAI,CAACwpB,aAAX,CAHA;EAIL5oB,QAAAA,QAAQ,EAAEZ,IAAI,CAACa,SAJV;EAKLymD,QAAAA,QAAQ,EAAET,cAAc,CAAC7mD,IAAI,CAACuB,KAAN;EALnB,OAAP;;EAOF,SAAKrI,iBAAL;EACA,SAAKe,mBAAL;EACE,aAAO;EACLotD,QAAAA,QAAQ,EAAE,WADL;EAELhqD,QAAAA,IAAI,EAAE2C,IAAI,CAAC3C,IAFN;EAGL2F,QAAAA,KAAK,cAAMhD,IAAI,CAACwpB,aAAX,CAHA;EAIL5oB,QAAAA,QAAQ,EAAE,IAJL;EAKL0mD,QAAAA,QAAQ,EAAET,cAAc,CAAC7mD,IAAI,CAACuB,KAAN;EALnB,OAAP;;EAOF,SAAK/G,KAAL;EACE,aAAO;EACL6sD,QAAAA,QAAQ,EAAE,OADL;EAELhqD,QAAAA,IAAI,EAAE2C,IAAI,CAAC3C,IAFN;EAGL2F,QAAAA,KAAK,cAAMhD,IAAI,CAACwpB,aAAX,CAHA;EAIL5oB,QAAAA,QAAQ,EAAE,IAJL;EAKL0mD,QAAAA,QAAQ,EAAET,cAAc,CAAC7mD,IAAI,CAACuB,KAAN;EALnB,OAAP;;EAOF,SAAKhI,aAAL;EAAoB;EAClB,eAAO;EACL8tD,UAAAA,QAAQ,EAAE,MADL;EAELhqD,UAAAA,IAAI,EAAE2C,IAAI,CAAC3C,IAFN;EAGL2F,UAAAA,KAAK,cAAMhD,IAAI,CAACwpB,aAAX,CAHA;EAIL5oB,UAAAA,QAAQ,EAAE,IAJL;EAIW;EAChB0mD,UAAAA,QAAQ,EAAEN,OAAO,CAACF,oBAAoB,CAAC9mD,IAAI,CAACuB,KAAN,CAApB,CAAiC/I,GAAjC,CAAqCuuD,MAArC,CAAD;EALZ,SAAP;EAOD;;EACD,SAAKvtD,QAAL;EACE,aAAOwG,IAAI,CAACa,SAAL,CAAeoE,IAAtB;;EACF,SAAKxL,QAAL;EACA,SAAKG,eAAL;EACA,SAAKD,eAAL;EACA,SAAKD,IAAL;EACA,SAAKI,QAAL;EACA,SAAKD,UAAL;EACA,SAAKG,aAAL;EACA,SAAKG,wBAAL;EACA,SAAKI,cAAL;EACE,aAAOssD,cAAc,CAAC7mD,IAAI,CAACuB,KAAN,CAArB;;EACF;EAAA;EAAA;EAAA,oFAIIvB,IAAI,CAACzC,GAJT;EAAA;EAAA;;EAnDF;EA0DD;;EAED,IAAMgqD,iBAAiB,GAAG,IAAIxpC,GAAJ,CAAQ,CAChC7kB,iBADgC,EAEhCC,cAFgC,EAGhCI,aAHgC,EAIhCM,UAJgC,EAKhCG,aALgC,EAMhCC,mBANgC,EAOhCO,KAPgC;EAShCnB,QATgC,CAAR,CAA1B;;EAYA,SAASmuD,WAAT,CAAqB7lD,MAArB,EAAoC;EAClC,MAAM0B,QAAQ,GAAG,EAAjB;EACA,MAAMokD,YAAY,GAAG9lD,MAArB;EACA,MAAI3B,IAAW,GAAGynD,YAAlB;;EACA,MAAIznD,IAAI,CAACuB,KAAL,KAAe,IAAnB,EAAyB;EACvB,WAAO8B,QAAP;EACD;;EACDrD,EAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,EAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;;EACAmmD,EAAAA,KAAK,EAAE,OAAO,IAAP,EAAa;EAClB,QAAIC,OAAO,GAAG,KAAd;;EACA,QAAIJ,iBAAiB,CAACl8C,GAAlB,CAAsBrL,IAAI,CAACzC,GAA3B,CAAJ,EAAqC;EACnC8F,MAAAA,QAAQ,CAACI,IAAT,CAAcmkD,SAAS,CAAC5nD,IAAD,CAAvB;EACD,KAFD,MAEO,IAAIA,IAAI,CAACzC,GAAL,KAAa/D,QAAjB,EAA2B;EAChC6J,MAAAA,QAAQ,CAACI,IAAT,CAAc,KAAKzD,IAAI,CAACwpB,aAAxB;EACD,KAFM,MAEA;EACLm+B,MAAAA,OAAO,GAAG,IAAV;EACD;;EACD,QAAIA,OAAO,IAAI3nD,IAAI,CAACuB,KAAL,KAAe,IAA9B,EAAoC;EAClCvB,MAAAA,IAAI,CAACuB,KAAL,CAAWlB,MAAX,GAAoBL,IAApB;EACAA,MAAAA,IAAI,GAAGA,IAAI,CAACuB,KAAZ;EACA;EACD;;EACD,WAAOvB,IAAI,CAACwB,OAAL,KAAiB,IAAxB,EAA8B;EAC5B,UAAIxB,IAAI,CAACK,MAAL,KAAgBonD,YAApB,EAAkC;EAChC,cAAMC,KAAN;EACD;;EACD1nD,MAAAA,IAAI,GAAIA,IAAI,CAACK,MAAb;EACD;;EACAL,IAAAA,IAAI,CAACwB,OAAN,CAAoBnB,MAApB,GAA6BL,IAAI,CAACK,MAAlC;EACAL,IAAAA,IAAI,GAAIA,IAAI,CAACwB,OAAb;EACD;;EACD,SAAO6B,QAAP;EACD;;MAEKwkD;;;WAGJC,gBAAA,yBAAuB;EACrB;EACA,QAAM/nD,KAAK,GAAGkB,6BAA6B,CAAC,KAAK8mD,MAAN,CAA3C;;EAFqB,UAInBhoD,KAAK,KAAK,IAJS;EAAA;EAAA;EAAA;EAAA;;EAQrB,WAAOA,KAAP;EACD;;EAED,6BAAYA,KAAZ,EAA0B;EAAA,SAEtBwnD,iBAAiB,CAACl8C,GAAlB,CAAsBtL,KAAK,CAACxC,GAA5B,CAFsB;EAAA;EAAA,0FAKtBwC,KAAK,CAACxC,GALgB;EAAA;EAAA;;EAOxB,SAAKwqD,MAAL,GAAchoD,KAAd;EACD;;EAwCD;WACAioD,OAAA,cAAKC,SAAL,EAA8C;EAC5C,WAAOC,SAAS,CACd,KAAKC,OAAL,CAAaF,SAAb,EAAwB;EAACG,MAAAA,IAAI,EAAE;EAAP,KAAxB,CADc,kCAEgBH,SAAS,CAACxhD,QAAV,EAFhB,CAAhB;EAID;;WAED4hD,aAAA,oBAAWhrD,IAAX,EAAyC;EACvC,WAAO6qD,SAAS,CACd,KAAKI,aAAL,CAAmBjrD,IAAnB,EAAyB;EAAC+qD,MAAAA,IAAI,EAAE;EAAP,KAAzB,CADc,0BAEM9qD,gBAAgB,CAACD,IAAD,CAAhB,IAA0B,SAFhC,SAAhB;EAID;;WAEDkrD,cAAA,qBAAYvlD,KAAZ,EAA8C;EAC5C,WAAOklD,SAAS,CACd,KAAKM,cAAL,CAAoBxlD,KAApB,EAA2B;EAAColD,MAAAA,IAAI,EAAE;EAAP,KAA3B,CADc,mBAECK,IAAI,CAACC,SAAL,CAAe1lD,KAAf,CAFD,CAAhB;EAID;;WAEDmlD,UAAA,iBACEF,SADF,EAG4B;EAAA,QAD1BhuC,OAC0B,uEADF,IACE;EAC1B,WAAOkuC,QAAO,CAAC,IAAD,EAAOF,SAAP,EAAkBhuC,OAAlB,CAAd;EACD;;WAEDquC,gBAAA,uBACEjrD,IADF,EAG4B;EAAA,QAD1B4c,OAC0B,uEADF,IACE;EAC1B,WAAOkuC,QAAO,CAAC,IAAD,EAAO,UAAAnoD,IAAI;EAAA,aAAIA,IAAI,CAAC3C,IAAL,KAAcA,IAAlB;EAAA,KAAX,EAAmC4c,OAAnC,CAAd;EACD;;WAEDuuC,iBAAA,wBACExlD,KADF,EAG4B;EAAA,QAD1BiX,OAC0B,uEADF,IACE;EAC1B,WAAOkuC,QAAO,CACZ,IADY,EAEZ,UAAAnoD,IAAI;EAAA,aAAIA,IAAI,CAACgD,KAAL,IAAc2lD,UAAU,CAAC3oD,IAAI,CAACgD,KAAN,EAAaA,KAAb,CAA5B;EAAA,KAFQ,EAGZiX,OAHY,CAAd;EAKD;;;;uBAnFc;EACb,UAAI,KAAK8tC,MAAL,CAAYxqD,GAAZ,KAAoBhE,aAAxB,EAAuC;EACrC,eAAOoJ,iBAAiB,CAAC,KAAKolD,MAAL,CAAYlnD,SAAb,CAAxB;EACD,OAFD,MAEO;EACL,eAAO,KAAKknD,MAAL,CAAYlnD,SAAnB;EACD;EACF;;;uBAEU;EACT,aAAO,KAAKknD,MAAL,CAAY1qD,IAAnB;EACD;;;uBAEmB;EAClB,aAAO,KAAKyqD,aAAL,GAAqBt+B,aAA5B;EACD;;;uBAEgC;EAC/B,UAAI7nB,MAAM,GAAG,KAAKomD,MAAL,CAAY1nD,MAAzB;;EACA,aAAOsB,MAAM,KAAK,IAAlB,EAAwB;EACtB,YAAI4lD,iBAAiB,CAACl8C,GAAlB,CAAsB1J,MAAM,CAACpE,GAA7B,CAAJ,EAAuC;EACrC,cAAIoE,MAAM,CAACpE,GAAP,KAAelE,QAAnB,EAA6B;EAC3B;EACA;EACA,gBAAImuD,WAAW,CAAC7lD,MAAD,CAAX,CAAoBoI,MAApB,GAA6B,CAAjC,EAAoC;EAClC,qBAAO,IAAP;EACD;EACF;;EACD,iBAAO69C,SAAS,CAACjmD,MAAD,CAAhB;EACD;;EACDA,QAAAA,MAAM,GAAGA,MAAM,CAACtB,MAAhB;EACD;;EACD,aAAO,IAAP;EACD;;;uBAEiD;EAChD,aAAOmnD,WAAW,CAAC,KAAKM,aAAL,EAAD,CAAlB;EACD;;;;;;EAkDH,SAASK,QAAT,CACEj5C,IADF,EAEE+4C,SAFF,EAGEhuC,OAHF,EAI4B;EAC1B,MAAMmuC,IAAI,GAAGnuC,OAAO,GAAGA,OAAO,CAACmuC,IAAX,GAAkB,IAAtC;EACA,MAAMQ,OAAO,GAAG,EAAhB;;EAEA,MAAIX,SAAS,CAAC/4C,IAAD,CAAb,EAAqB;EACnB05C,IAAAA,OAAO,CAACnlD,IAAR,CAAayL,IAAb;;EACA,QAAI,CAACk5C,IAAL,EAAW;EACT,aAAOQ,OAAP;EACD;EACF;;EAED15C,EAAAA,IAAI,CAAC7L,QAAL,CAAcga,OAAd,CAAsB,UAAA9b,KAAK,EAAI;EAC7B,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;EAC7B;EACD;;EACDqnD,IAAAA,OAAO,CAACnlD,IAAR,OAAAmlD,OAAO,EAAST,QAAO,CAAC5mD,KAAD,EAAQ0mD,SAAR,EAAmBhuC,OAAnB,CAAhB,CAAP;EACD,GALD;EAOA,SAAO2uC,OAAP;EACD;;EAED,SAASV,SAAT,CACEW,GADF,EAEEl9C,OAFF,EAGqB;EACnB,MAAIk9C,GAAG,CAAC9+C,MAAJ,KAAe,CAAnB,EAAsB;EACpB,WAAO8+C,GAAG,CAAC,CAAD,CAAV;EACD;;EAED,MAAM1gD,MAAM,GACV0gD,GAAG,CAAC9+C,MAAJ,KAAe,CAAf,GACI,qBADJ,6BAE4B8+C,GAAG,CAAC9+C,MAFhC,gBADF;EAKA,QAAM,IAAIvB,KAAJ,CAAUL,MAAM,GAAGwD,OAAnB,CAAN;EACD;;EAED,SAASg9C,UAAT,CAAoB3lD,KAApB,EAAmC8lD,MAAnC,EAA4D;EAC1D,OAAK,IAAMluD,GAAX,IAAkBkuD,MAAlB,EAA0B;EACxB,QAAI9lD,KAAK,CAACpI,GAAD,CAAL,KAAekuD,MAAM,CAACluD,GAAD,CAAzB,EAAgC;EAC9B,aAAO,KAAP;EACD;EACF;;EACD,SAAO,IAAP;EACD;;EAED,SAASy+B,MAAT,CAAgBzuB,OAAhB,EAA6CqP,OAA7C,EAA2E;EACzE,MAAIpX,cAAc,GAAG2jD,kBAAkB,CAAC3jD,cAAxC;EACA,MAAIkmD,YAAY,GAAG,KAAnB;;EACA,MAAI,OAAO9uC,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;EACnD,QAAI,OAAOA,OAAO,CAACpX,cAAf,KAAkC,UAAtC,EAAkD;EAChDA,MAAAA,cAAc,GAAGoX,OAAO,CAACpX,cAAzB;EACD;;EACD,QAAIoX,OAAO,CAAC+uC,qBAAR,KAAkC,IAAtC,EAA4C;EAC1CD,MAAAA,YAAY,GAAG,IAAf;EACD;EACF;;EACD,MAAIhlD,SAAS,GAAG;EACdV,IAAAA,QAAQ,EAAE,EADI;EAEdR,IAAAA,cAAc,EAAdA,cAFc;EAGdtF,IAAAA,GAAG,EAAE;EAHS,GAAhB;EAKA,MAAI2R,IAAsB,GAAG80C,eAAe,CAC1CjgD,SAD0C,EAE1CglD,YAAY,GAAG16C,cAAH,GAAoBF,UAFU,EAG1C,KAH0C,AAAA,CAA5C;;EAhByE,QAsB/De,IAAI,IAAI,IAtBuD;EAAA;EAAA;EAAA;EAAA;;EAuBzEqyC,EAAAA,eAAe,CAAC32C,OAAD,EAAUsE,IAAV,EAAgB,IAAhB,EAAsB,IAAtB,CAAf;EAEA,MAAM+5C,KAAK,GAAG;EACZC,IAAAA,UAAU,EAAE54C,SADA;EAGZpB,IAAAA,IAAI,EAAE3G,SAHM;EAGK;EACjB;EACAk+C,IAAAA,MALY,cAK0D;EACpE,UAAIv3C,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACxO,OAAL,IAAgB,IAAhC,IAAwCqD,SAAS,IAAI,IAAzD,EAA+D;EAC7D,eAAO,IAAP;EACD;;EACD,UAAIA,SAAS,CAACV,QAAV,CAAmB0G,MAAnB,KAA8B,CAAlC,EAAqC;EACnC,eAAO,IAAP;EACD;;EACD,UAAIhG,SAAS,CAACV,QAAV,CAAmB0G,MAAnB,KAA8B,CAAlC,EAAqC;EACnC,eAAO08C,MAAM,CAAC1iD,SAAS,CAACV,QAAV,CAAmB,CAAnB,CAAD,CAAb;EACD;;EACD,UACEU,SAAS,CAACV,QAAV,CAAmB0G,MAAnB,KAA8B,CAA9B,IACAhG,SAAS,CAACV,QAAV,CAAmB,CAAnB,EAAsBoB,QAAtB,KAAmC,IADnC,IAEAV,SAAS,CAACV,QAAV,CAAmB,CAAnB,EAAsBoB,QAAtB,KAAmC,KAHrC,EAIE;EACA;EACA;EACA,eAAOgiD,MAAM,CAAC1iD,SAAS,CAACV,QAAV,CAAmB,CAAnB,CAAD,CAAb;EACD;;EACD,UAAIqjD,gBAAgB,GAAG,IAAvB;;EACA,UAAI3iD,SAAS,CAACV,QAAV,IAAsBU,SAAS,CAACV,QAAV,CAAmB0G,MAA7C,EAAqD;EACnD,aAAK,IAAI0N,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1T,SAAS,CAACV,QAAV,CAAmB0G,MAAvC,EAA+C0N,CAAC,EAAhD,EAAoD;EAClD,cAAMkvC,aAAa,GAAGF,MAAM,CAAC1iD,SAAS,CAACV,QAAV,CAAmBoU,CAAnB,CAAD,CAA5B;;EACA,cAAIkvC,aAAa,KAAK,IAAtB,EAA4B;EAC1B,gBAAID,gBAAgB,KAAK,IAAzB,EAA+B;EAC7BA,cAAAA,gBAAgB,GAAG,CAACC,aAAD,CAAnB;EACD,aAFD,MAEO;EACLD,cAAAA,gBAAgB,CAACjjD,IAAjB,CAAsBkjD,aAAtB;EACD;EACF;EACF;EACF;;EACD,aAAOD,gBAAP;EACD,KAtCW;EAuCZK,IAAAA,MAvCY,cAuCH;EACP,UAAI73C,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACxO,OAAL,IAAgB,IAApC,EAA0C;EACxC,eAAO,IAAP;EACD;;EACD,aAAOqmD,MAAM,CAAC73C,IAAI,CAACxO,OAAN,CAAb;EACD,KA5CW;EA6CZmhB,IAAAA,MA7CY,YA6CLsnC,UA7CK,EA6C2B;EACrC,UAAIj6C,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACxO,OAAL,IAAgB,IAApC,EAA0C;EACxC;EACD;;EACD6gD,MAAAA,eAAe,CAAC4H,UAAD,EAAaj6C,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,CAAf;EACD,KAlDW;EAmDZk6C,IAAAA,OAnDY,cAmDF;EACR,UAAIl6C,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACxO,OAAL,IAAgB,IAApC,EAA0C;EACxC;EACD;;EACD6gD,MAAAA,eAAe,CAAC,IAAD,EAAOryC,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAf;EACAnL,MAAAA,SAAS,GAAG,IAAZ;EACAmL,MAAAA,IAAI,GAAG,IAAP;EACD,KA1DW;EA2DZnO,IAAAA,WA3DY,cA2DE;EACZ,UAAImO,IAAI,IAAI,IAAR,IAAgBA,IAAI,CAACxO,OAAL,IAAgB,IAApC,EAA0C;EACxC,eAAO,IAAP;EACD;;EACD,aAAOwjD,qBAAqB,CAACh1C,IAAD,CAA5B;EACD,KAhEW;EAkEZm6C,IAAAA,kBAlEY,YAkEUrgD,EAlEV,EAkE0B;EACpC,aAAOkxC,SAAS,CAAClxC,EAAD,CAAhB;EACD;EApEW,GAAd;EAuEAvG,EAAAA,MAAM,CAAC+G,cAAP,CACEy/C,KADF,EAEE,MAFF,EAGG;EACCphD,IAAAA,YAAY,EAAE,IADf;EAECC,IAAAA,UAAU,EAAE,IAFb;EAGCnN,IAAAA,GAAG,EAAE,YAAW;EACd,UAAIuU,IAAI,KAAK,IAAb,EAAmB;EACjB,cAAM,IAAI1G,KAAJ,CAAU,+CAAV,CAAN;EACD;;EACD,UAAMnF,QAAQ,GAAGmkD,WAAW,CAACt4C,IAAI,CAACxO,OAAN,CAA5B;;EACA,UAAI2C,QAAQ,CAAC0G,MAAT,KAAoB,CAAxB,EAA2B;EACzB,cAAM,IAAIvB,KAAJ,CAAU,+CAAV,CAAN;EACD,OAFD,MAEO,IAAInF,QAAQ,CAAC0G,MAAT,KAAoB,CAAxB,EAA2B;EAChC;EACA,eAAO1G,QAAQ,CAAC,CAAD,CAAf;EACD,OAHM,MAGA;EACL;EACA;EACA,eAAOukD,SAAS,CAAC14C,IAAI,CAACxO,OAAN,CAAhB;EACD;EACF;EAlBF,GAHH;EAyBA,SAAOuoD,KAAP;EACD;;EAED,IAAMK,cAAc,GAAG,IAAI9mD,OAAJ,EAAvB;;EACA,SAASolD,SAAT,CAAmB7nD,KAAnB,EAAoD;EAClD,MAAIwpD,OAAO,GAAGD,cAAc,CAAC3uD,GAAf,CAAmBoF,KAAnB,CAAd;;EACA,MAAIwpD,OAAO,KAAKhhD,SAAZ,IAAyBxI,KAAK,CAACG,SAAN,KAAoB,IAAjD,EAAuD;EACrDqpD,IAAAA,OAAO,GAAGD,cAAc,CAAC3uD,GAAf,CAAmBoF,KAAK,CAACG,SAAzB,CAAV;EACD;;EACD,MAAIqpD,OAAO,KAAKhhD,SAAhB,EAA2B;EACzBghD,IAAAA,OAAO,GAAG,IAAI1B,iBAAJ,CAAsB9nD,KAAtB,CAAV;EACAupD,IAAAA,cAAc,CAACxuD,GAAf,CAAmBiF,KAAnB,EAA0BwpD,OAA1B;EACD;;EACD,SAAOA,OAAP;EACD;;;EAGDvD,kBAAkB,CAAC;EACjBE,EAAAA,uBAAuB,EAAG,YAAM;EAC9B,UAAM,IAAI19C,KAAJ,CAAU,yDAAV,CAAN;EACD,GAHgB;EAIjB29C,EAAAA,UAAU,EAAE/2C,CAAU,CAAH,CAJF;EAKjBwjB,EAAAA,OAAO,EAAE42B,YALQ;EAMjBpD,EAAAA,mBAAmB,EAAE;EANJ,CAAD,CAAlB;EASA,IAAIhH,yBAAuB,GAAG,CAA9B;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,SAASqK,sBAAT,CAAgCC,KAAhC,EAAqE;EACnE,MAAIp5C,2CAAA,KAAgD/H,SAApD,EAA+D;EAC7D,UAAMC,KAAK,CACT,mEADS,CAAX;EAGD;;EACD,MAAIrD,UAAU,CAACgqB,eAAX,KAA+B,IAAnC,EAAyC;EACvC,UAAM3mB,KAAK,CACT,uDACE,4BAFO,CAAX;EAID;;EAED,MAAMq3C,+BAA+B,GAAGT,yBAAxC;EACA,MAAMU,4BAA4B,GAAGvL,sBAAoB,CAAC7zC,OAA1D;EACA,MAAMq/C,4BAA4B,GAAGhC,oBAAoB,CAACr9C,OAA1D;EACA6zC,EAAAA,sBAAoB,CAAC7zC,OAArB,GAA+B,IAA/B;EACAq9C,EAAAA,oBAAoB,CAACr9C,OAArB,GAA+B,IAA/B;EACA0+C,EAAAA,yBAAuB;;EAEvB,MAAMuK,MAAM,GAAG,YAAM;EACnBvK,IAAAA,yBAAuB;EACvB7K,IAAAA,sBAAoB,CAAC7zC,OAArB,GAA+Bo/C,4BAA/B;EACA/B,IAAAA,oBAAoB,CAACr9C,OAArB,GAA+Bq/C,4BAA/B;;EACA,IAAa;EACX,UAAIX,yBAAuB,GAAGS,+BAA9B,EAA+D;EAC7D;EACA;EACA,cACE,sEACE,iEAFJ;EAID;EACF;EACF,GAdD,CApBmE;EAqCnE;EACA;;;EACA,MAAI;EACF,QAAM+J,QAAQ,GAAG5P,cAAc,CAAC0P,KAAD,CAA/B;;EACA,QACE,OAAOE,QAAP,KAAoB,QAApB,IACAA,QAAQ,KAAK,IADb,IAEA,OAAOA,QAAQ,CAAC5d,IAAhB,KAAyB,UAH3B,EAIE;EACA,aAAO;EACLA,QAAAA,IADK,YACAoU,OADA,EACqBC,MADrB,EACqD;EACxDuJ,UAAAA,QAAQ,CAAC5d,IAAT,CACE,YAAM;EACJuT,YAAAA,cAAY,CACV,YAAM;EACJoK,cAAAA,MAAM;EACNvJ,cAAAA,OAAO;EACR,aAJS,EAKV,UAAAnoD,KAAK,EAAI;EACP0xD,cAAAA,MAAM;EACNtJ,cAAAA,MAAM,CAACpoD,KAAD,CAAN;EACD,aARS,CAAZ;EAUD,WAZH,EAaE,UAAAA,KAAK,EAAI;EACP0xD,YAAAA,MAAM;EACNtJ,YAAAA,MAAM,CAACpoD,KAAD,CAAN;EACD,WAhBH;EAkBD;EApBI,OAAP;EAsBD,KA3BD,MA2BO;EACL,UAAI;EACF;EACA;EACA,YAAIwnD,YAAJ;;EACA,WAAG;EACDA,UAAAA,YAAY,GAAGnvC,2CAAA,EAAf;EACD,SAFD,QAESmvC,YAFT;EAGD,OAPD,SAOU;EACRkK,QAAAA,MAAM;EACP;EACF;EACF,GAzCD,CAyCE,OAAO1xD,KAAP,EAAc;EACd0xD,IAAAA,MAAM;EACN,UAAM1xD,KAAN;EACD;EACF;;EAED,SAASsnD,cAAT,CAAsBa,OAAtB,EAA+BC,MAA/B,EAAuC;EACrC;EACA;EACAlmB,EAAAA,IAAI,CAAC0vB,oBAAL;EACArW,EAAAA,WAAW,CAAC,YAAM;EAChB,QAAI;EACF,UAAMiM,YAAY,GAAGnvC,2CAAA,EAArB;;EACA,UAAImvC,YAAJ,EAAkB;EAChBF,QAAAA,cAAY,CAACa,OAAD,EAAUC,MAAV,CAAZ;EACD,OAFD,MAEO;EACLD,QAAAA,OAAO;EACR;EACF,KAPD,CAOE,OAAOnoD,KAAP,EAAc;EACdooD,MAAAA,MAAM,CAACpoD,KAAD,CAAN;EACD;EACF,GAXU,CAAX;EAYD;;;;;;;;;;;;"}