{"version":3,"file":"react-art.production.min.js","sources":["../../../../packages/shared/ReactVersion.js","../../../../packages/react-reconciler/src/ReactRootTags.js","../../../../packages/shared/formatProdErrorMessage.js","../../../../packages/react-reconciler/src/ReactWorkTags.js","../../../../packages/shared/ReactInstanceMap.js","../../../../packages/shared/ReactSharedInternals.js","../../../../packages/shared/ReactSymbols.js","../../../../packages/shared/getComponentName.js","../../../../packages/react-reconciler/src/ReactFiberFlags.js","../../../../packages/shared/ReactFeatureFlags.js","../../../../packages/react-reconciler/src/ReactFiberTreeReflection.js","../../../../packages/react-art/src/ReactARTInternals.js","../../../../packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js","../../../../packages/react-art/src/ReactARTHostConfig.js","../../../../packages/shared/ReactComponentStackFrame.js","../../../../packages/shared/checkPropTypes.js","../../../../packages/react-reconciler/src/ReactFiberStack.old.js","../../../../packages/react-reconciler/src/ReactFiberContext.old.js","../../../../packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","../../../../packages/react-reconciler/src/SchedulerWithReactIntegration.new.js","../../../../packages/react-reconciler/src/ReactFiberLane.js","../../../../packages/react-reconciler/src/SchedulerWithReactIntegration.old.js","../../../../packages/react-reconciler/src/ReactTypeOfMode.js","../../../../packages/react-reconciler/src/ReactFiberTransition.js","../../../../packages/shared/objectIs.js","../../../../packages/shared/shallowEqual.js","../../../../packages/react-reconciler/src/ReactFiberComponentStack.js","../../../../packages/react-reconciler/src/ReactCurrentFiber.js","../../../../packages/react-reconciler/src/ReactFiberLazyComponent.old.js","../../../../packages/react-reconciler/src/MaxInts.js","../../../../packages/react-reconciler/src/ReactFiberNewContext.old.js","../../../../packages/react-reconciler/src/ReactUpdateQueue.old.js","../../../../packages/react-reconciler/src/ReactFiberClassComponent.old.js","../../../../packages/react-reconciler/src/ReactChildFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberHostContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","../../../../packages/react-reconciler/src/ReactHookEffectTags.js","../../../../packages/react-reconciler/src/ReactFiberHydrationContext.old.js","../../../../packages/react-reconciler/src/ReactMutableSource.old.js","../../../../packages/react-reconciler/src/ReactFiberHooks.old.js","../../../../packages/react-reconciler/src/ReactProfilerTimer.old.js","../../../../packages/react-reconciler/src/ReactFiberBeginWork.old.js","../../../../packages/react-reconciler/src/ReactFiberCompleteWork.old.js","../../../../packages/react-reconciler/src/ReactFiberUnwindWork.old.js","../../../../packages/react-reconciler/src/ReactCapturedValue.js","../../../../packages/react-reconciler/src/ReactFiberErrorDialog.js","../../../../packages/react-reconciler/src/ReactFiberErrorLogger.js","../../../../packages/react-reconciler/src/ReactFiberThrow.old.js","../../../../packages/react-reconciler/src/ReactFiberCommitWork.old.js","../../../../packages/react-reconciler/src/ReactFiberWorkLoop.old.js","../../../../packages/react-reconciler/src/ReactFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberRoot.old.js","../../../../packages/react-reconciler/src/ReactFiberReconciler.old.js","../../../../packages/react-art/src/ReactART.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\nexport default '17.0.0';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1 | 2;\n\nexport const LegacyRoot = 0;\nexport const BlockingRoot = 1;\nexport const ConcurrentRoot = 2;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// Do not require this module directly! Use normal `invariant` calls with\n// template literal strings. The messages will be replaced with error codes\n// during build.\n\nfunction formatProdErrorMessage(code) {\n  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\n  for (let i = 1; i < arguments.length; i++) {\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\n  }\n  return (\n    `Minified React error #${code}; visit ${url} for the full message or ` +\n    'use the non-minified dev environment for full errors and additional ' +\n    'helpful warnings.'\n  );\n}\n\nexport default formatProdErrorMessage;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const FundamentalComponent = 20;\nexport const ScopeComponent = 21;\nexport const Block = 22;\nexport const OffscreenComponent = 23;\nexport const LegacyHiddenComponent = 24;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nexport let REACT_ELEMENT_TYPE = 0xeac7;\nexport let REACT_PORTAL_TYPE = 0xeaca;\nexport let REACT_FRAGMENT_TYPE = 0xeacb;\nexport let REACT_STRICT_MODE_TYPE = 0xeacc;\nexport let REACT_PROFILER_TYPE = 0xead2;\nexport let REACT_PROVIDER_TYPE = 0xeacd;\nexport let REACT_CONTEXT_TYPE = 0xeace;\nexport let REACT_FORWARD_REF_TYPE = 0xead0;\nexport let REACT_SUSPENSE_TYPE = 0xead1;\nexport let REACT_SUSPENSE_LIST_TYPE = 0xead8;\nexport let REACT_MEMO_TYPE = 0xead3;\nexport let REACT_LAZY_TYPE = 0xead4;\nexport let REACT_BLOCK_TYPE = 0xead9;\nexport let REACT_SERVER_BLOCK_TYPE = 0xeada;\nexport let REACT_FUNDAMENTAL_TYPE = 0xead5;\nexport let REACT_SCOPE_TYPE = 0xead7;\nexport let REACT_OPAQUE_ID_TYPE = 0xeae0;\nexport let REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nexport let REACT_OFFSCREEN_TYPE = 0xeae2;\nexport let REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nconst MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_BLOCK_TYPE,\n} from 'shared/ReactSymbols';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentName(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentName(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n    }\n  }\n  return null;\n}\n\nexport default getComponentName;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b000000000000000000;\nexport const PerformedWork = /*                */ 0b000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b000000000000000010;\nexport const Update = /*                       */ 0b000000000000000100;\nexport const PlacementAndUpdate = /*           */ 0b000000000000000110;\nexport const Deletion = /*                     */ 0b000000000000001000;\nexport const ContentReset = /*                 */ 0b000000000000010000;\nexport const Callback = /*                     */ 0b000000000000100000;\nexport const DidCapture = /*                   */ 0b000000000001000000;\nexport const Ref = /*                          */ 0b000000000010000000;\nexport const Snapshot = /*                     */ 0b000000000100000000;\nexport const Passive = /*                      */ 0b000000001000000000;\n// TODO (effects) Remove this bit once the new reconciler is synced to the old.\nexport const PassiveUnmountPendingDev = /*     */ 0b000010000000000000;\nexport const Hydrating = /*                    */ 0b000000010000000000;\nexport const HydratingAndUpdate = /*           */ 0b000000010000000100;\n\n// Passive & Update & Callback & Ref & Snapshot\nexport const LifecycleEffectMask = /*          */ 0b000000001110100100;\n\n// Union of all host effects\nexport const HostEffectMask = /*               */ 0b000000011111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b000000100000000000;\nexport const ShouldCapture = /*                */ 0b000001000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b000100000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const PassiveStatic = /*                */ 0b001000000000000000;\n\n// Union of side effect groupings as pertains to subtreeFlags\nexport const BeforeMutationMask = /*           */ 0b000000001100001010;\nexport const MutationMask = /*                 */ 0b000000010010011110;\nexport const LayoutMask = /*                   */ 0b000000000010100100;\nexport const PassiveMask = /*                  */ 0b000000001000001000;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculting them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = /*                   */ 0b001000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b010000000000000000;\nexport const MountPassiveDev = /*              */ 0b100000000000000000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n */\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n// This prevents e.g. <img src=\"\"> from making an unnecessary HTTP request for certain browsers.\nexport const enableFilterEmptyStringAttributesDOM = false;\n\n// Adds verbose console logging for e.g. state updates, suspense, and work loop stuff.\n// Intended to enable React core members to more easily debug scheduling issues in DEV builds.\nexport const enableDebugTracing = false;\n\n// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,\n// for an experimental scheduling profiler tool.\nexport const enableSchedulingProfiler = __PROFILE__ && __EXPERIMENTAL__;\n\n// Helps identify side effects in render-phase lifecycle hooks and setState\n// reducers by double invoking them in Strict Mode.\nexport const debugRenderPhaseSideEffectsForStrictMode = __DEV__;\n\n// To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = __DEV__;\n\n// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\nexport const warnAboutDeprecatedLifecycles = true;\n\n// Gather advanced timing metrics for Profiler subtrees.\nexport const enableProfilerTimer = __PROFILE__;\n\n// Record durations for commit and passive effects phases.\nexport const enableProfilerCommitHooks = false;\n\n// Trace which interactions trigger each commit.\nexport const enableSchedulerTracing = __PROFILE__;\n\n// SSR experiments\nexport const enableSuspenseServerRenderer = __EXPERIMENTAL__;\nexport const enableSelectiveHydration = __EXPERIMENTAL__;\n\n// Flight experiments\nexport const enableBlocksAPI = __EXPERIMENTAL__;\nexport const enableLazyElements = __EXPERIMENTAL__;\n\n// Only used in www builds.\nexport const enableSchedulerDebugging = false;\n\n// Disable javascript: URL strings in href for XSS protection.\nexport const disableJavaScriptURLs = false;\n\n// Experimental Host Component support.\nexport const enableFundamentalAPI = false;\n\n// Experimental Scope support.\nexport const enableScopeAPI = false;\n\n// Experimental Create Event Handle API.\nexport const enableCreateEventHandleAPI = false;\n\n// New API for JSX transforms to target - https://github.com/reactjs/rfcs/pull/107\n\n// We will enforce mocking scheduler with scheduler/unstable_mock at some point. (v18?)\n// Till then, we warn about the missing mock, but still fallback to a legacy mode compatible version\nexport const warnAboutUnmockedScheduler = false;\n\n// Add a callback property to suspense to notify which promises are currently\n// in the update queue. This allows reporting and tracing of what is causing\n// the user to see a loading state.\n// Also allows hydration callbacks to fire when a dehydrated boundary gets\n// hydrated or deleted.\nexport const enableSuspenseCallback = false;\n\n// Part of the simplification of React.createElement so we can eventually move\n// from React.createElement to React.jsx\n// https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\n\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\n\nexport const enableTrustedTypesIntegration = false;\n\n// Enables a warning when trying to spread a 'key' to an element;\n// a deprecated pattern we want to get rid of in the future\nexport const warnAboutSpreadingKeyToJSX = false;\n\nexport const enableComponentStackLocations = true;\n\nexport const enableNewReconciler = false;\n\n// Errors that are thrown while unmounting (or after in the case of passive effects)\n// should bypass any error boundaries that are also unmounting (or have unmounted)\n// and be handled by the nearest still-mounted boundary.\n// If there are no still-mounted boundaries, the errors should be rethrown.\nexport const skipUnmountedBoundaries = false;\n\n// --------------------------\n// Future APIs to be deprecated\n// --------------------------\n\n// Prevent the value and checked attributes from syncing\n// with their related DOM properties\nexport const disableInputAttributeSyncing = false;\n\nexport const warnAboutStringRefs = false;\n\nexport const disableLegacyContext = false;\n\n// Disables children for <textarea> elements\nexport const disableTextareaChildren = false;\n\nexport const disableModulePatternComponents = false;\n\n// We should remove this flag once the above flag becomes enabled\nexport const warnUnstableRenderSubtreeIntoContainer = false;\n\n// Support legacy Primer support on internal FB www\nexport const enableLegacyFBSupport = false;\n\n// Updates that occur in the render phase are not officially supported. But when\n// they do occur, we defer them to a subsequent render by picking a lane that's\n// not currently rendering. We treat them the same as if they came from an\n// interleaved event. Remove this flag once we have migrated to the\n// new behavior.\nexport const deferRenderPhaseUpdateToNextBatch = true;\n\n// Replacement for runWithPriority in React internals.\nexport const decoupleUpdatePriorityFromScheduler = false;\n\nexport const enableDiscreteEventFlushingChange = false;\n\nexport const enableEagerRootListeners = true;\n\nexport const enableDoubleInvokingEffects = false;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport invariant from 'shared/invariant';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentName from 'shared/getComponentName';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  FundamentalComponent,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\nimport {enableFundamentalAPI} from 'shared/ReactFeatureFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentName(ownerFiber.type) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  invariant(\n    getNearestMountedFiber(fiber) === fiber,\n    'Unable to find node on an unmounted component.',\n  );\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n    invariant(\n      nearestMounted !== null,\n      'Unable to find node on an unmounted component.',\n    );\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      invariant(false, 'Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n        invariant(\n          didFindChild,\n          'Child was not found in either parent set. This indicates a bug ' +\n            'in React related to the return pointer. Please file an issue.',\n        );\n      }\n    }\n\n    invariant(\n      a.alternate === b,\n      \"Return fibers should always be each others' alternates. \" +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  invariant(\n    a.tag === HostRoot,\n    'Unable to find node on an unmounted component.',\n  );\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  let node: Fiber = currentParent;\n  while (true) {\n    if (node.tag === HostComponent || node.tag === HostText) {\n      return node;\n    } else if (node.child) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  let node: Fiber = currentParent;\n  while (true) {\n    if (\n      node.tag === HostComponent ||\n      node.tag === HostText ||\n      (enableFundamentalAPI && node.tag === FundamentalComponent)\n    ) {\n      return node;\n    } else if (node.child && node.tag !== HostPortal) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport const TYPES = {\n  CLIPPING_RECTANGLE: 'ClippingRectangle',\n  GROUP: 'Group',\n  SHAPE: 'Shape',\n  TEXT: 'Text',\n};\n\nexport const EVENT_TYPES = {\n  onClick: 'click',\n  onMouseMove: 'mousemove',\n  onMouseOver: 'mouseover',\n  onMouseOut: 'mouseout',\n  onMouseUp: 'mouseup',\n  onMouseDown: 'mousedown',\n};\n\nexport function childrenAsString(children) {\n  if (!children) {\n    return '';\n  } else if (typeof children === 'string') {\n    return children;\n  } else if (children.length) {\n    return children.join('');\n  } else {\n    return '';\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  invariant(\n    false,\n    'The current renderer does not support hydration. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Hydration (when unsupported)\nexport type SuspenseInstance = mixed;\nexport const supportsHydration = false;\nexport const canHydrateInstance = shim;\nexport const canHydrateTextInstance = shim;\nexport const canHydrateSuspenseInstance = shim;\nexport const isSuspenseInstancePending = shim;\nexport const isSuspenseInstanceFallback = shim;\nexport const registerSuspenseInstanceRetry = shim;\nexport const getNextHydratableSibling = shim;\nexport const getFirstHydratableChild = shim;\nexport const hydrateInstance = shim;\nexport const hydrateTextInstance = shim;\nexport const hydrateSuspenseInstance = shim;\nexport const getNextHydratableInstanceAfterSuspenseInstance = shim;\nexport const commitHydratedContainer = shim;\nexport const commitHydratedSuspenseInstance = shim;\nexport const clearSuspenseBoundary = shim;\nexport const clearSuspenseBoundaryFromContainer = shim;\nexport const didNotMatchHydratedContainerTextInstance = shim;\nexport const didNotMatchHydratedTextInstance = shim;\nexport const didNotHydrateContainerInstance = shim;\nexport const didNotHydrateInstance = shim;\nexport const didNotFindHydratableContainerInstance = shim;\nexport const didNotFindHydratableContainerTextInstance = shim;\nexport const didNotFindHydratableContainerSuspenseInstance = shim;\nexport const didNotFindHydratableInstance = shim;\nexport const didNotFindHydratableTextInstance = shim;\nexport const didNotFindHydratableSuspenseInstance = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport Transform from 'art/core/transform';\nimport Mode from 'art/modes/current';\nimport invariant from 'shared/invariant';\n\nimport {TYPES, EVENT_TYPES, childrenAsString} from './ReactARTInternals';\n\nconst pooledTransform = new Transform();\n\nconst NO_CONTEXT = {};\nconst UPDATE_SIGNAL = {};\nif (__DEV__) {\n  Object.freeze(NO_CONTEXT);\n  Object.freeze(UPDATE_SIGNAL);\n}\n\n/** Helper Methods */\n\nfunction addEventListeners(instance, type, listener) {\n  // We need to explicitly unregister before unmount.\n  // For this reason we need to track subscriptions.\n  if (!instance._listeners) {\n    instance._listeners = {};\n    instance._subscriptions = {};\n  }\n\n  instance._listeners[type] = listener;\n\n  if (listener) {\n    if (!instance._subscriptions[type]) {\n      instance._subscriptions[type] = instance.subscribe(\n        type,\n        createEventHandler(instance),\n        instance,\n      );\n    }\n  } else {\n    if (instance._subscriptions[type]) {\n      instance._subscriptions[type]();\n      delete instance._subscriptions[type];\n    }\n  }\n}\n\nfunction createEventHandler(instance) {\n  return function handleEvent(event) {\n    const listener = instance._listeners[event.type];\n\n    if (!listener) {\n      // Noop\n    } else if (typeof listener === 'function') {\n      listener.call(instance, event);\n    } else if (listener.handleEvent) {\n      listener.handleEvent(event);\n    }\n  };\n}\n\nfunction destroyEventListeners(instance) {\n  if (instance._subscriptions) {\n    for (const type in instance._subscriptions) {\n      instance._subscriptions[type]();\n    }\n  }\n\n  instance._subscriptions = null;\n  instance._listeners = null;\n}\n\nfunction getScaleX(props) {\n  if (props.scaleX != null) {\n    return props.scaleX;\n  } else if (props.scale != null) {\n    return props.scale;\n  } else {\n    return 1;\n  }\n}\n\nfunction getScaleY(props) {\n  if (props.scaleY != null) {\n    return props.scaleY;\n  } else if (props.scale != null) {\n    return props.scale;\n  } else {\n    return 1;\n  }\n}\n\nfunction isSameFont(oldFont, newFont) {\n  if (oldFont === newFont) {\n    return true;\n  } else if (typeof newFont === 'string' || typeof oldFont === 'string') {\n    return false;\n  } else {\n    return (\n      newFont.fontSize === oldFont.fontSize &&\n      newFont.fontStyle === oldFont.fontStyle &&\n      newFont.fontVariant === oldFont.fontVariant &&\n      newFont.fontWeight === oldFont.fontWeight &&\n      newFont.fontFamily === oldFont.fontFamily\n    );\n  }\n}\n\n/** Render Methods */\n\nfunction applyClippingRectangleProps(instance, props, prevProps = {}) {\n  applyNodeProps(instance, props, prevProps);\n\n  instance.width = props.width;\n  instance.height = props.height;\n}\n\nfunction applyGroupProps(instance, props, prevProps = {}) {\n  applyNodeProps(instance, props, prevProps);\n\n  instance.width = props.width;\n  instance.height = props.height;\n}\n\nfunction applyNodeProps(instance, props, prevProps = {}) {\n  const scaleX = getScaleX(props);\n  const scaleY = getScaleY(props);\n\n  pooledTransform\n    .transformTo(1, 0, 0, 1, 0, 0)\n    .move(props.x || 0, props.y || 0)\n    .rotate(props.rotation || 0, props.originX, props.originY)\n    .scale(scaleX, scaleY, props.originX, props.originY);\n\n  if (props.transform != null) {\n    pooledTransform.transform(props.transform);\n  }\n\n  if (\n    instance.xx !== pooledTransform.xx ||\n    instance.yx !== pooledTransform.yx ||\n    instance.xy !== pooledTransform.xy ||\n    instance.yy !== pooledTransform.yy ||\n    instance.x !== pooledTransform.x ||\n    instance.y !== pooledTransform.y\n  ) {\n    instance.transformTo(pooledTransform);\n  }\n\n  if (props.cursor !== prevProps.cursor || props.title !== prevProps.title) {\n    instance.indicate(props.cursor, props.title);\n  }\n\n  if (instance.blend && props.opacity !== prevProps.opacity) {\n    instance.blend(props.opacity == null ? 1 : props.opacity);\n  }\n\n  if (props.visible !== prevProps.visible) {\n    if (props.visible == null || props.visible) {\n      instance.show();\n    } else {\n      instance.hide();\n    }\n  }\n\n  for (const type in EVENT_TYPES) {\n    addEventListeners(instance, EVENT_TYPES[type], props[type]);\n  }\n}\n\nfunction applyRenderableNodeProps(instance, props, prevProps = {}) {\n  applyNodeProps(instance, props, prevProps);\n\n  if (prevProps.fill !== props.fill) {\n    if (props.fill && props.fill.applyFill) {\n      props.fill.applyFill(instance);\n    } else {\n      instance.fill(props.fill);\n    }\n  }\n  if (\n    prevProps.stroke !== props.stroke ||\n    prevProps.strokeWidth !== props.strokeWidth ||\n    prevProps.strokeCap !== props.strokeCap ||\n    prevProps.strokeJoin !== props.strokeJoin ||\n    // TODO: Consider deep check of stokeDash; may benefit VML in IE.\n    prevProps.strokeDash !== props.strokeDash\n  ) {\n    instance.stroke(\n      props.stroke,\n      props.strokeWidth,\n      props.strokeCap,\n      props.strokeJoin,\n      props.strokeDash,\n    );\n  }\n}\n\nfunction applyShapeProps(instance, props, prevProps = {}) {\n  applyRenderableNodeProps(instance, props, prevProps);\n\n  const path = props.d || childrenAsString(props.children);\n\n  const prevDelta = instance._prevDelta;\n  const prevPath = instance._prevPath;\n\n  if (\n    path !== prevPath ||\n    path.delta !== prevDelta ||\n    prevProps.height !== props.height ||\n    prevProps.width !== props.width\n  ) {\n    instance.draw(path, props.width, props.height);\n\n    instance._prevDelta = path.delta;\n    instance._prevPath = path;\n  }\n}\n\nfunction applyTextProps(instance, props, prevProps = {}) {\n  applyRenderableNodeProps(instance, props, prevProps);\n\n  const string = props.children;\n\n  if (\n    instance._currentString !== string ||\n    !isSameFont(props.font, prevProps.font) ||\n    props.alignment !== prevProps.alignment ||\n    props.path !== prevProps.path\n  ) {\n    instance.draw(string, props.font, props.alignment, props.path);\n\n    instance._currentString = string;\n  }\n}\n\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoPersistence';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoHydration';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoScopes';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors';\n\nexport function appendInitialChild(parentInstance, child) {\n  if (typeof child === 'string') {\n    // Noop for string children of Text (eg <Text>{'foo'}{'bar'}</Text>)\n    invariant(false, 'Text children should already be flattened.');\n    return;\n  }\n\n  child.inject(parentInstance);\n}\n\nexport function createInstance(type, props, internalInstanceHandle) {\n  let instance;\n\n  switch (type) {\n    case TYPES.CLIPPING_RECTANGLE:\n      instance = Mode.ClippingRectangle();\n      instance._applyProps = applyClippingRectangleProps;\n      break;\n    case TYPES.GROUP:\n      instance = Mode.Group();\n      instance._applyProps = applyGroupProps;\n      break;\n    case TYPES.SHAPE:\n      instance = Mode.Shape();\n      instance._applyProps = applyShapeProps;\n      break;\n    case TYPES.TEXT:\n      instance = Mode.Text(\n        props.children,\n        props.font,\n        props.alignment,\n        props.path,\n      );\n      instance._applyProps = applyTextProps;\n      break;\n  }\n\n  invariant(instance, 'ReactART does not support the type \"%s\"', type);\n\n  instance._applyProps(instance, props);\n\n  return instance;\n}\n\nexport function createTextInstance(\n  text,\n  rootContainerInstance,\n  internalInstanceHandle,\n) {\n  return text;\n}\n\nexport function finalizeInitialChildren(domElement, type, props) {\n  return false;\n}\n\nexport function getPublicInstance(instance) {\n  return instance;\n}\n\nexport function prepareForCommit() {\n  // Noop\n  return null;\n}\n\nexport function prepareUpdate(domElement, type, oldProps, newProps) {\n  return UPDATE_SIGNAL;\n}\n\nexport function resetAfterCommit() {\n  // Noop\n}\n\nexport function resetTextContent(domElement) {\n  // Noop\n}\n\nexport function getRootHostContext() {\n  return NO_CONTEXT;\n}\n\nexport function getChildHostContext() {\n  return NO_CONTEXT;\n}\n\nexport const scheduleTimeout = setTimeout;\nexport const cancelTimeout = clearTimeout;\nexport const noTimeout = -1;\n\nexport function shouldSetTextContent(type, props) {\n  return (\n    typeof props.children === 'string' || typeof props.children === 'number'\n  );\n}\n\n// The ART renderer is secondary to the React DOM renderer.\nexport const isPrimaryRenderer = false;\n\n// The ART renderer shouldn't trigger missing act() warnings\nexport const warnsIfNotActing = false;\n\nexport const supportsMutation = true;\n\nexport function appendChild(parentInstance, child) {\n  if (child.parentNode === parentInstance) {\n    child.eject();\n  }\n  child.inject(parentInstance);\n}\n\nexport function appendChildToContainer(parentInstance, child) {\n  if (child.parentNode === parentInstance) {\n    child.eject();\n  }\n  child.inject(parentInstance);\n}\n\nexport function insertBefore(parentInstance, child, beforeChild) {\n  invariant(\n    child !== beforeChild,\n    'ReactART: Can not insert node before itself',\n  );\n  child.injectBefore(beforeChild);\n}\n\nexport function insertInContainerBefore(parentInstance, child, beforeChild) {\n  invariant(\n    child !== beforeChild,\n    'ReactART: Can not insert node before itself',\n  );\n  child.injectBefore(beforeChild);\n}\n\nexport function removeChild(parentInstance, child) {\n  destroyEventListeners(child);\n  child.eject();\n}\n\nexport function removeChildFromContainer(parentInstance, child) {\n  destroyEventListeners(child);\n  child.eject();\n}\n\nexport function commitTextUpdate(textInstance, oldText, newText) {\n  // Noop\n}\n\nexport function commitMount(instance, type, newProps) {\n  // Noop\n}\n\nexport function commitUpdate(\n  instance,\n  updatePayload,\n  type,\n  oldProps,\n  newProps,\n) {\n  instance._applyProps(instance, newProps, oldProps);\n}\n\nexport function hideInstance(instance) {\n  instance.hide();\n}\n\nexport function hideTextInstance(textInstance) {\n  // Noop\n}\n\nexport function unhideInstance(instance, props) {\n  if (props.visible == null || props.visible) {\n    instance.show();\n  }\n}\n\nexport function unhideTextInstance(textInstance, text): void {\n  // Noop\n}\n\nexport function clearContainer(container) {\n  // TODO Implement this\n}\n\nexport function getFundamentalComponentInstance(fundamentalInstance) {\n  throw new Error('Not yet implemented.');\n}\n\nexport function mountFundamentalComponent(fundamentalInstance) {\n  throw new Error('Not yet implemented.');\n}\n\nexport function shouldUpdateFundamentalComponent(fundamentalInstance) {\n  throw new Error('Not yet implemented.');\n}\n\nexport function updateFundamentalComponent(fundamentalInstance) {\n  throw new Error('Not yet implemented.');\n}\n\nexport function unmountFundamentalComponent(fundamentalInstance) {\n  throw new Error('Not yet implemented.');\n}\n\nexport function getInstanceFromNode(node) {\n  throw new Error('Not yet implemented.');\n}\n\nexport function isOpaqueHydratingObject(value: mixed): boolean {\n  throw new Error('Not yet implemented');\n}\n\nexport function makeOpaqueHydratingObject(\n  attemptToReadValue: () => void,\n): OpaqueIDType {\n  throw new Error('Not yet implemented.');\n}\n\nexport function makeClientId(): OpaqueIDType {\n  throw new Error('Not yet implemented');\n}\n\nexport function makeClientIdInDEV(warnOnAccessInDEV: () => void): OpaqueIDType {\n  throw new Error('Not yet implemented');\n}\n\nexport function beforeActiveInstanceBlur() {\n  // noop\n}\n\nexport function afterActiveInstanceBlur() {\n  // noop\n}\n\nexport function preparePortalMount(portalInstance: any): void {\n  // noop\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {enableComponentStackLocations} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_BLOCK_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                const frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(Object.prototype.hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentName(type) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    invariant(\n      contextStackCursor.current === emptyContextObject,\n      'Unexpected context found on stack. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentName(type) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      invariant(\n        contextKey in childContextTypes,\n        '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n        getComponentName(type) || 'Unknown',\n        contextKey,\n      );\n    }\n    if (__DEV__) {\n      const name = getComponentName(type) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    invariant(\n      instance,\n      'Expected to have an instance by this point. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    invariant(\n      isFiberMounted(fiber) && fiber.tag === ClassComponent,\n      'Expected subtree parent to be a mounted class component. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n    invariant(\n      false,\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableProfilerTimer} from 'shared/ReactFeatureFlags';\n\nimport type {Fiber, FiberRoot, ReactPriorityLevel} from './ReactInternalTypes';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport {DidCapture} from './ReactFiberFlags';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    rendererID = hook.inject(internals);\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  // DevTools exists\n  return true;\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(\n  root: FiberRoot,\n  priorityLevel: ReactPriorityLevel,\n) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          priorityLevel,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\nimport {__interactionsRef} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport {\n  SyncLanePriority,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\n\nconst {\n  unstable_runWithPriority: Scheduler_runWithPriority,\n  unstable_scheduleCallback: Scheduler_scheduleCallback,\n  unstable_cancelCallback: Scheduler_cancelCallback,\n  unstable_shouldYield: Scheduler_shouldYield,\n  unstable_requestPaint: Scheduler_requestPaint,\n  unstable_now: Scheduler_now,\n  unstable_getCurrentPriorityLevel: Scheduler_getCurrentPriorityLevel,\n  unstable_ImmediatePriority: Scheduler_ImmediatePriority,\n  unstable_UserBlockingPriority: Scheduler_UserBlockingPriority,\n  unstable_NormalPriority: Scheduler_NormalPriority,\n  unstable_LowPriority: Scheduler_LowPriority,\n  unstable_IdlePriority: Scheduler_IdlePriority,\n} = Scheduler;\n\nif (enableSchedulerTracing) {\n  // Provide explicit error message when production+profiling bundle of e.g.\n  // react-dom is used with production (non-profiling) bundle of\n  // scheduler/tracing\n  invariant(\n    __interactionsRef != null && __interactionsRef.current != null,\n    'It is not supported to run the profiling version of a renderer (for ' +\n      'example, `react-dom/profiling`) without also replacing the ' +\n      '`scheduler/tracing` module with `scheduler/tracing-profiling`. Your ' +\n      'bundler might have a setting for aliasing both modules. Learn more at ' +\n      'https://reactjs.org/link/profiling',\n  );\n}\n\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\ntype SchedulerCallbackOptions = {timeout?: number, ...};\n\nconst fakeCallbackNode = {};\n\n// Except for NoPriority, these correspond to Scheduler priorities. We use\n// ascending numbers so we can compare them like numbers. They start at 90 to\n// avoid clashing with Scheduler's priorities.\nexport const ImmediatePriority: ReactPriorityLevel = 99;\nexport const UserBlockingPriority: ReactPriorityLevel = 98;\nexport const NormalPriority: ReactPriorityLevel = 97;\nexport const LowPriority: ReactPriorityLevel = 96;\nexport const IdlePriority: ReactPriorityLevel = 95;\n// NoPriority is the absence of priority. Also React-only.\nexport const NoPriority: ReactPriorityLevel = 90;\n\nexport const shouldYield = Scheduler_shouldYield;\nexport const requestPaint =\n  // Fall back gracefully if we're running an older version of Scheduler.\n  Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : () => {};\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet immediateQueueCallbackNode: mixed | null = null;\nlet isFlushingSyncQueue: boolean = false;\nconst initialTimeMs: number = Scheduler_now();\n\n// If the initial timestamp is reasonably small, use Scheduler's `now` directly.\n// This will be the case for modern browsers that support `performance.now`. In\n// older browsers, Scheduler falls back to `Date.now`, which returns a Unix\n// timestamp. In that case, subtract the module initialization time to simulate\n// the behavior of performance.now and keep our times small enough to fit\n// within 32 bits.\n// TODO: Consider lifting this into Scheduler.\nexport const now =\n  initialTimeMs < 10000 ? Scheduler_now : () => Scheduler_now() - initialTimeMs;\n\nexport function getCurrentPriorityLevel(): ReactPriorityLevel {\n  switch (Scheduler_getCurrentPriorityLevel()) {\n    case Scheduler_ImmediatePriority:\n      return ImmediatePriority;\n    case Scheduler_UserBlockingPriority:\n      return UserBlockingPriority;\n    case Scheduler_NormalPriority:\n      return NormalPriority;\n    case Scheduler_LowPriority:\n      return LowPriority;\n    case Scheduler_IdlePriority:\n      return IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nfunction reactPriorityToSchedulerPriority(reactPriorityLevel) {\n  switch (reactPriorityLevel) {\n    case ImmediatePriority:\n      return Scheduler_ImmediatePriority;\n    case UserBlockingPriority:\n      return Scheduler_UserBlockingPriority;\n    case NormalPriority:\n      return Scheduler_NormalPriority;\n    case LowPriority:\n      return Scheduler_LowPriority;\n    case IdlePriority:\n      return Scheduler_IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nexport function runWithPriority<T>(\n  reactPriorityLevel: ReactPriorityLevel,\n  fn: () => T,\n): T {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_runWithPriority(priorityLevel, fn);\n}\n\nexport function scheduleCallback(\n  reactPriorityLevel: ReactPriorityLevel,\n  callback: SchedulerCallback,\n  options: SchedulerCallbackOptions | void | null,\n) {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_scheduleCallback(priorityLevel, callback, options);\n}\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n    // Flush the queue in the next tick, at the earliest.\n    immediateQueueCallbackNode = Scheduler_scheduleCallback(\n      Scheduler_ImmediatePriority,\n      flushSyncCallbackQueueImpl,\n    );\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n  return fakeCallbackNode;\n}\n\nexport function cancelCallback(callbackNode: mixed) {\n  if (callbackNode !== fakeCallbackNode) {\n    Scheduler_cancelCallback(callbackNode);\n  }\n}\n\nexport function flushSyncCallbackQueue(): boolean {\n  if (immediateQueueCallbackNode !== null) {\n    const node = immediateQueueCallbackNode;\n    immediateQueueCallbackNode = null;\n    Scheduler_cancelCallback(node);\n  }\n  return flushSyncCallbackQueueImpl();\n}\n\nfunction flushSyncCallbackQueueImpl() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrancy.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        setCurrentUpdateLanePriority(SyncLanePriority);\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n        isFlushingSyncQueue = false;\n      }\n    } else {\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        isFlushingSyncQueue = false;\n      }\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, ReactPriorityLevel} from './ReactInternalTypes';\n\nexport opaque type LanePriority =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17;\nexport opaque type Lanes = number;\nexport opaque type Lane = number;\nexport opaque type LaneMap<T> = Array<T>;\n\nimport invariant from 'shared/invariant';\n\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  LowPriority as LowSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n  NoPriority as NoSchedulerPriority,\n} from './SchedulerWithReactIntegration.new';\n\nexport const SyncLanePriority: LanePriority = 15;\nexport const SyncBatchedLanePriority: LanePriority = 14;\n\nconst InputDiscreteHydrationLanePriority: LanePriority = 13;\nexport const InputDiscreteLanePriority: LanePriority = 12;\n\nconst InputContinuousHydrationLanePriority: LanePriority = 11;\nexport const InputContinuousLanePriority: LanePriority = 10;\n\nconst DefaultHydrationLanePriority: LanePriority = 9;\nexport const DefaultLanePriority: LanePriority = 8;\n\nconst TransitionHydrationPriority: LanePriority = 7;\nexport const TransitionPriority: LanePriority = 6;\n\nconst RetryLanePriority: LanePriority = 5;\n\nconst SelectiveHydrationLanePriority: LanePriority = 4;\n\nconst IdleHydrationLanePriority: LanePriority = 3;\nconst IdleLanePriority: LanePriority = 2;\n\nconst OffscreenLanePriority: LanePriority = 1;\n\nexport const NoLanePriority: LanePriority = 0;\n\nconst TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\nexport const SyncBatchedLane: Lane = /*                 */ 0b0000000000000000000000000000010;\n\nexport const InputDiscreteHydrationLane: Lane = /*      */ 0b0000000000000000000000000000100;\nconst InputDiscreteLanes: Lanes = /*                    */ 0b0000000000000000000000000011000;\n\nconst InputContinuousHydrationLane: Lane = /*           */ 0b0000000000000000000000000100000;\nconst InputContinuousLanes: Lanes = /*                  */ 0b0000000000000000000000011000000;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000100000000;\nexport const DefaultLanes: Lanes = /*                   */ 0b0000000000000000000111000000000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000001000000000000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111110000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000011110000000000000000000000;\n\nexport const SomeRetryLane: Lanes = /*                  */ 0b0000010000000000000000000000000;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0000100000000000000000000000000;\n\nconst NonIdleLanes = /*                                 */ 0b0000111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0001000000000000000000000000000;\nconst IdleLanes: Lanes = /*                             */ 0b0110000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\nexport const NoTimestamp = -1;\n\nlet currentUpdateLanePriority: LanePriority = NoLanePriority;\n\nexport function getCurrentUpdateLanePriority(): LanePriority {\n  return currentUpdateLanePriority;\n}\n\nexport function setCurrentUpdateLanePriority(newLanePriority: LanePriority) {\n  currentUpdateLanePriority = newLanePriority;\n}\n\n// \"Registers\" used to \"return\" multiple values\n// Used by getHighestPriorityLanes and getNextLanes:\nlet return_highestLanePriority: LanePriority = DefaultLanePriority;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  if ((SyncLane & lanes) !== NoLanes) {\n    return_highestLanePriority = SyncLanePriority;\n    return SyncLane;\n  }\n  if ((SyncBatchedLane & lanes) !== NoLanes) {\n    return_highestLanePriority = SyncBatchedLanePriority;\n    return SyncBatchedLane;\n  }\n  if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {\n    return_highestLanePriority = InputDiscreteHydrationLanePriority;\n    return InputDiscreteHydrationLane;\n  }\n  const inputDiscreteLanes = InputDiscreteLanes & lanes;\n  if (inputDiscreteLanes !== NoLanes) {\n    return_highestLanePriority = InputDiscreteLanePriority;\n    return inputDiscreteLanes;\n  }\n  if ((lanes & InputContinuousHydrationLane) !== NoLanes) {\n    return_highestLanePriority = InputContinuousHydrationLanePriority;\n    return InputContinuousHydrationLane;\n  }\n  const inputContinuousLanes = InputContinuousLanes & lanes;\n  if (inputContinuousLanes !== NoLanes) {\n    return_highestLanePriority = InputContinuousLanePriority;\n    return inputContinuousLanes;\n  }\n  if ((lanes & DefaultHydrationLane) !== NoLanes) {\n    return_highestLanePriority = DefaultHydrationLanePriority;\n    return DefaultHydrationLane;\n  }\n  const defaultLanes = DefaultLanes & lanes;\n  if (defaultLanes !== NoLanes) {\n    return_highestLanePriority = DefaultLanePriority;\n    return defaultLanes;\n  }\n  if ((lanes & TransitionHydrationLane) !== NoLanes) {\n    return_highestLanePriority = TransitionHydrationPriority;\n    return TransitionHydrationLane;\n  }\n  const transitionLanes = TransitionLanes & lanes;\n  if (transitionLanes !== NoLanes) {\n    return_highestLanePriority = TransitionPriority;\n    return transitionLanes;\n  }\n  const retryLanes = RetryLanes & lanes;\n  if (retryLanes !== NoLanes) {\n    return_highestLanePriority = RetryLanePriority;\n    return retryLanes;\n  }\n  if (lanes & SelectiveHydrationLane) {\n    return_highestLanePriority = SelectiveHydrationLanePriority;\n    return SelectiveHydrationLane;\n  }\n  if ((lanes & IdleHydrationLane) !== NoLanes) {\n    return_highestLanePriority = IdleHydrationLanePriority;\n    return IdleHydrationLane;\n  }\n  const idleLanes = IdleLanes & lanes;\n  if (idleLanes !== NoLanes) {\n    return_highestLanePriority = IdleLanePriority;\n    return idleLanes;\n  }\n  if ((OffscreenLane & lanes) !== NoLanes) {\n    return_highestLanePriority = OffscreenLanePriority;\n    return OffscreenLane;\n  }\n  if (__DEV__) {\n    console.error('Should have found matching lanes. This is a bug in React.');\n  }\n  // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n  return_highestLanePriority = DefaultLanePriority;\n  return lanes;\n}\n\nexport function schedulerPriorityToLanePriority(\n  schedulerPriorityLevel: ReactPriorityLevel,\n): LanePriority {\n  switch (schedulerPriorityLevel) {\n    case ImmediateSchedulerPriority:\n      return SyncLanePriority;\n    case UserBlockingSchedulerPriority:\n      return InputContinuousLanePriority;\n    case NormalSchedulerPriority:\n    case LowSchedulerPriority:\n      // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.\n      return DefaultLanePriority;\n    case IdleSchedulerPriority:\n      return IdleLanePriority;\n    default:\n      return NoLanePriority;\n  }\n}\n\nexport function lanePriorityToSchedulerPriority(\n  lanePriority: LanePriority,\n): ReactPriorityLevel {\n  switch (lanePriority) {\n    case SyncLanePriority:\n    case SyncBatchedLanePriority:\n      return ImmediateSchedulerPriority;\n    case InputDiscreteHydrationLanePriority:\n    case InputDiscreteLanePriority:\n    case InputContinuousHydrationLanePriority:\n    case InputContinuousLanePriority:\n      return UserBlockingSchedulerPriority;\n    case DefaultHydrationLanePriority:\n    case DefaultLanePriority:\n    case TransitionHydrationPriority:\n    case TransitionPriority:\n    case SelectiveHydrationLanePriority:\n    case RetryLanePriority:\n      return NormalSchedulerPriority;\n    case IdleHydrationLanePriority:\n    case IdleLanePriority:\n    case OffscreenLanePriority:\n      return IdleSchedulerPriority;\n    case NoLanePriority:\n      return NoSchedulerPriority;\n    default:\n      invariant(\n        false,\n        'Invalid update priority: %s. This is a bug in React.',\n        lanePriority,\n      );\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return_highestLanePriority = NoLanePriority;\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n  let nextLanePriority = NoLanePriority;\n\n  const expiredLanes = root.expiredLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Check if any work has expired.\n  if (expiredLanes !== NoLanes) {\n    nextLanes = expiredLanes;\n    nextLanePriority = return_highestLanePriority = SyncLanePriority;\n  } else {\n    // Do not work on any idle work until all the non-idle work has finished,\n    // even if the work is suspended.\n    const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n    if (nonIdlePendingLanes !== NoLanes) {\n      const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n      if (nonIdleUnblockedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        nextLanePriority = return_highestLanePriority;\n      } else {\n        const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n        if (nonIdlePingedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          nextLanePriority = return_highestLanePriority;\n        }\n      }\n    } else {\n      // The only remaining work is Idle.\n      const unblockedLanes = pendingLanes & ~suspendedLanes;\n      if (unblockedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(unblockedLanes);\n        nextLanePriority = return_highestLanePriority;\n      } else {\n        if (pingedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(pingedLanes);\n          nextLanePriority = return_highestLanePriority;\n        }\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If there are higher priority lanes, we'll include them even if they\n  // are suspended.\n  nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    getHighestPriorityLanes(wipLanes);\n    const wipLanePriority = return_highestLanePriority;\n    if (nextLanePriority <= wipLanePriority) {\n      return wipLanes;\n    } else {\n      return_highestLanePriority = nextLanePriority;\n    }\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  // TODO: Expiration heuristic is constant per lane, so could use a map.\n  getHighestPriorityLanes(lane);\n  const priority = return_highestLanePriority;\n  if (priority >= InputContinuousLanePriority) {\n    // User interactions should expire slightly more quickly.\n    //\n    // NOTE: This is set to the corresponding constant as in Scheduler.js. When\n    // we made it larger, a product metric in www regressed, suggesting there's\n    // a user interaction that's being starved by a series of synchronous\n    // updates. If that theory is correct, the proper solution is to fix the\n    // starvation. However, this scenario supports the idea that expiration\n    // times are an important safeguard when starvation does happen.\n    //\n    // Also note that, in the case of user input specifically, this will soon no\n    // longer be an issue because we plan to make user input synchronous by\n    // default (until you enter `startTransition`, of course.)\n    //\n    // If weren't planning to make these updates synchronous soon anyway, I\n    // would probably make this number a configurable parameter.\n    return currentTime + 250;\n  } else if (priority >= TransitionPriority) {\n    return currentTime + 5000;\n  } else {\n    // Anything idle priority or lower should never expire.\n    return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function returnNextLanesPriority() {\n  return return_highestLanePriority;\n}\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be a pure function, so that it always returns the same lane for given inputs.\nexport function findUpdateLane(\n  lanePriority: LanePriority,\n  wipLanes: Lanes,\n): Lane {\n  switch (lanePriority) {\n    case NoLanePriority:\n      break;\n    case SyncLanePriority:\n      return SyncLane;\n    case SyncBatchedLanePriority:\n      return SyncBatchedLane;\n    case InputDiscreteLanePriority: {\n      const lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // Shift to the next priority level\n        return findUpdateLane(InputContinuousLanePriority, wipLanes);\n      }\n      return lane;\n    }\n    case InputContinuousLanePriority: {\n      const lane = pickArbitraryLane(InputContinuousLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // Shift to the next priority level\n        return findUpdateLane(DefaultLanePriority, wipLanes);\n      }\n      return lane;\n    }\n    case DefaultLanePriority: {\n      let lane = pickArbitraryLane(DefaultLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // If all the default lanes are already being worked on, look for a\n        // lane in the transition range.\n        lane = pickArbitraryLane(TransitionLanes & ~wipLanes);\n        if (lane === NoLane) {\n          // All the transition lanes are taken, too. This should be very\n          // rare, but as a last resort, pick a default lane. This will have\n          // the effect of interrupting the current work-in-progress render.\n          lane = pickArbitraryLane(DefaultLanes);\n        }\n      }\n      return lane;\n    }\n    case TransitionPriority: // Should be handled by findTransitionLane instead\n    case RetryLanePriority: // Should be handled by findRetryLane instead\n      break;\n    case IdleLanePriority:\n      let lane = pickArbitraryLane(IdleLanes & ~wipLanes);\n      if (lane === NoLane) {\n        lane = pickArbitraryLane(IdleLanes);\n      }\n      return lane;\n    default:\n      // The remaining priorities are not valid for updates\n      break;\n  }\n  invariant(\n    false,\n    'Invalid update priority: %s. This is a bug in React.',\n    lanePriority,\n  );\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be pure function, so that it always returns the same lane for given inputs.\nexport function findTransitionLane(wipLanes: Lanes, pendingLanes: Lanes): Lane {\n  // First look for lanes that are completely unclaimed, i.e. have no\n  // pending work.\n  let lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);\n  if (lane === NoLane) {\n    // If all lanes have pending work, look for a lane that isn't currently\n    // being worked on.\n    lane = pickArbitraryLane(TransitionLanes & ~wipLanes);\n    if (lane === NoLane) {\n      // If everything is being worked on, pick any lane. This has the\n      // effect of interrupting the current work-in-progress.\n      lane = pickArbitraryLane(TransitionLanes);\n    }\n  }\n  return lane;\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be pure function, so that it always returns the same lane for given inputs.\nexport function findRetryLane(wipLanes: Lanes): Lane {\n  // This is a fork of `findUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  let lane = pickArbitraryLane(RetryLanes & ~wipLanes);\n  if (lane === NoLane) {\n    lane = pickArbitraryLane(RetryLanes);\n  }\n  return lane;\n}\n\nfunction getHighestPriorityLane(lanes: Lanes) {\n  return lanes & -lanes;\n}\n\nfunction getLowestPriorityLane(lanes: Lanes): Lane {\n  // This finds the most significant non-zero bit.\n  const index = 31 - clz32(lanes);\n  return index < 0 ? NoLanes : 1 << index;\n}\n\nfunction getEqualOrHigherPriorityLanes(lanes: Lanes | Lane): Lanes {\n  return (getLowestPriorityLane(lanes) << 1) - 1;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function higherLanePriority(\n  a: LanePriority,\n  b: LanePriority,\n): LanePriority {\n  return a !== NoLanePriority && a > b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  // Intentionally pushing one by one.\n  // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n  const laneMap = [];\n  for (let i = 0; i < TotalLanes; i++) {\n    laneMap.push(initial);\n  }\n  return laneMap;\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // TODO: Theoretically, any update to any lane can unblock any other lane. But\n  // it's not practical to try every single possible combination. We need a\n  // heuristic to decide which lanes to attempt to render, and in which batches.\n  // For now, we use the same heuristic as in the old ExpirationTimes model:\n  // retry any lane at equal or lower priority, but don't try updates at higher\n  // priority without also including the lower priority updates. This works well\n  // when considering updates across different priority levels, but isn't\n  // sufficient for updates within the same priority, since we want to treat\n  // those updates as parallel.\n\n  // Unsuspend any update at equal or lower priority.\n  const higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111\n\n  root.suspendedLanes &= higherPriorityLanes;\n  root.pingedLanes &= higherPriorityLanes;\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootExpired(root: FiberRoot, expiredLanes: Lanes) {\n  root.expiredLanes |= expiredLanes & root.pendingLanes;\n}\n\nexport function markDiscreteUpdatesExpired(root: FiberRoot) {\n  root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;\n}\n\nexport function hasDiscreteLanes(lanes: Lanes) {\n  return (lanes & InputDiscreteLanes) !== NoLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = 0;\n  root.pingedLanes = 0;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  root.entangledLanes |= entangledLanes;\n\n  const entanglements = root.entanglements;\n  let lanes = entangledLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] |= entangledLanes;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  getHighestPriorityLanes(renderLanes);\n  const highestLanePriority = return_highestLanePriority;\n\n  let lane;\n  switch (highestLanePriority) {\n    case SyncLanePriority:\n    case SyncBatchedLanePriority:\n      lane = NoLane;\n      break;\n    case InputDiscreteHydrationLanePriority:\n    case InputDiscreteLanePriority:\n      lane = InputDiscreteHydrationLane;\n      break;\n    case InputContinuousHydrationLanePriority:\n    case InputContinuousLanePriority:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultHydrationLanePriority:\n    case DefaultLanePriority:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionHydrationPriority:\n    case TransitionPriority:\n      lane = TransitionHydrationLane;\n      break;\n    case RetryLanePriority:\n      // Shouldn't be reachable under normal circumstances, so there's no\n      // dedicated lane for retry priority. Use the one for long transitions.\n      lane = TransitionHydrationLane;\n      break;\n    case SelectiveHydrationLanePriority:\n      lane = SelectiveHydrationLane;\n      break;\n    case IdleHydrationLanePriority:\n    case IdleLanePriority:\n      lane = IdleHydrationLane;\n      break;\n    case OffscreenLanePriority:\n    case NoLanePriority:\n      lane = NoLane;\n      break;\n    default:\n      invariant(false, 'Invalid lane: %s. This is a bug in React.', lane);\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nconst clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros. Only used on lanes, so assume input is an integer.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(lanes: Lanes | Lane) {\n  if (lanes === 0) {\n    return 32;\n  }\n  return (31 - ((log(lanes) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\nimport {__interactionsRef} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport {\n  SyncLanePriority,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\n\nconst {\n  unstable_runWithPriority: Scheduler_runWithPriority,\n  unstable_scheduleCallback: Scheduler_scheduleCallback,\n  unstable_cancelCallback: Scheduler_cancelCallback,\n  unstable_shouldYield: Scheduler_shouldYield,\n  unstable_requestPaint: Scheduler_requestPaint,\n  unstable_now: Scheduler_now,\n  unstable_getCurrentPriorityLevel: Scheduler_getCurrentPriorityLevel,\n  unstable_ImmediatePriority: Scheduler_ImmediatePriority,\n  unstable_UserBlockingPriority: Scheduler_UserBlockingPriority,\n  unstable_NormalPriority: Scheduler_NormalPriority,\n  unstable_LowPriority: Scheduler_LowPriority,\n  unstable_IdlePriority: Scheduler_IdlePriority,\n} = Scheduler;\n\nif (enableSchedulerTracing) {\n  // Provide explicit error message when production+profiling bundle of e.g.\n  // react-dom is used with production (non-profiling) bundle of\n  // scheduler/tracing\n  invariant(\n    __interactionsRef != null && __interactionsRef.current != null,\n    'It is not supported to run the profiling version of a renderer (for ' +\n      'example, `react-dom/profiling`) without also replacing the ' +\n      '`scheduler/tracing` module with `scheduler/tracing-profiling`. Your ' +\n      'bundler might have a setting for aliasing both modules. Learn more at ' +\n      'https://reactjs.org/link/profiling',\n  );\n}\n\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\ntype SchedulerCallbackOptions = {timeout?: number, ...};\n\nconst fakeCallbackNode = {};\n\n// Except for NoPriority, these correspond to Scheduler priorities. We use\n// ascending numbers so we can compare them like numbers. They start at 90 to\n// avoid clashing with Scheduler's priorities.\nexport const ImmediatePriority: ReactPriorityLevel = 99;\nexport const UserBlockingPriority: ReactPriorityLevel = 98;\nexport const NormalPriority: ReactPriorityLevel = 97;\nexport const LowPriority: ReactPriorityLevel = 96;\nexport const IdlePriority: ReactPriorityLevel = 95;\n// NoPriority is the absence of priority. Also React-only.\nexport const NoPriority: ReactPriorityLevel = 90;\n\nexport const shouldYield = Scheduler_shouldYield;\nexport const requestPaint =\n  // Fall back gracefully if we're running an older version of Scheduler.\n  Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : () => {};\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet immediateQueueCallbackNode: mixed | null = null;\nlet isFlushingSyncQueue: boolean = false;\nconst initialTimeMs: number = Scheduler_now();\n\n// If the initial timestamp is reasonably small, use Scheduler's `now` directly.\n// This will be the case for modern browsers that support `performance.now`. In\n// older browsers, Scheduler falls back to `Date.now`, which returns a Unix\n// timestamp. In that case, subtract the module initialization time to simulate\n// the behavior of performance.now and keep our times small enough to fit\n// within 32 bits.\n// TODO: Consider lifting this into Scheduler.\nexport const now =\n  initialTimeMs < 10000 ? Scheduler_now : () => Scheduler_now() - initialTimeMs;\n\nexport function getCurrentPriorityLevel(): ReactPriorityLevel {\n  switch (Scheduler_getCurrentPriorityLevel()) {\n    case Scheduler_ImmediatePriority:\n      return ImmediatePriority;\n    case Scheduler_UserBlockingPriority:\n      return UserBlockingPriority;\n    case Scheduler_NormalPriority:\n      return NormalPriority;\n    case Scheduler_LowPriority:\n      return LowPriority;\n    case Scheduler_IdlePriority:\n      return IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nfunction reactPriorityToSchedulerPriority(reactPriorityLevel) {\n  switch (reactPriorityLevel) {\n    case ImmediatePriority:\n      return Scheduler_ImmediatePriority;\n    case UserBlockingPriority:\n      return Scheduler_UserBlockingPriority;\n    case NormalPriority:\n      return Scheduler_NormalPriority;\n    case LowPriority:\n      return Scheduler_LowPriority;\n    case IdlePriority:\n      return Scheduler_IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nexport function runWithPriority<T>(\n  reactPriorityLevel: ReactPriorityLevel,\n  fn: () => T,\n): T {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_runWithPriority(priorityLevel, fn);\n}\n\nexport function scheduleCallback(\n  reactPriorityLevel: ReactPriorityLevel,\n  callback: SchedulerCallback,\n  options: SchedulerCallbackOptions | void | null,\n) {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_scheduleCallback(priorityLevel, callback, options);\n}\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n    // Flush the queue in the next tick, at the earliest.\n    immediateQueueCallbackNode = Scheduler_scheduleCallback(\n      Scheduler_ImmediatePriority,\n      flushSyncCallbackQueueImpl,\n    );\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n  return fakeCallbackNode;\n}\n\nexport function cancelCallback(callbackNode: mixed) {\n  if (callbackNode !== fakeCallbackNode) {\n    Scheduler_cancelCallback(callbackNode);\n  }\n}\n\nexport function flushSyncCallbackQueue() {\n  if (immediateQueueCallbackNode !== null) {\n    const node = immediateQueueCallbackNode;\n    immediateQueueCallbackNode = null;\n    Scheduler_cancelCallback(node);\n  }\n  flushSyncCallbackQueueImpl();\n}\n\nfunction flushSyncCallbackQueueImpl() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrancy.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        setCurrentUpdateLanePriority(SyncLanePriority);\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n        isFlushingSyncQueue = false;\n      }\n    } else {\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        isFlushingSyncQueue = false;\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = 0b00000;\nexport const StrictMode = 0b00001;\n// TODO: Remove BlockingMode and ConcurrentMode by reading from the root\n// tag instead\nexport const BlockingMode = 0b00010;\nexport const ConcurrentMode = 0b00100;\nexport const ProfileMode = 0b01000;\nexport const DebugTracingMode = 0b10000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = 0;\n\nexport function requestCurrentTransition(): number {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !hasOwnProperty.call(objB, keysA[i]) ||\n      !is(objA[keysA[i]], objB[keysA[i]])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  Block,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case Block:\n      return describeFunctionComponentFrame(fiber.type._render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentName from 'shared/getComponentName';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentName(owner.type);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = Object.assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nexport const MAX_SIGNED_31_BIT_INT = 1073741823;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, ContextDependency} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {MAX_SIGNED_31_BIT_INT} from './MaxInts';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane';\n\nimport invariant from 'shared/invariant';\nimport is from 'shared/objectIs';\nimport {createUpdate, enqueueUpdate, ForceUpdate} from './ReactUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastContextWithAllBitsObserved: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(providerFiber: Fiber, nextValue: T): void {\n  const context: ReactContext<T> = providerFiber.type._context;\n\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(providerFiber: Fiber): void {\n  const currentValue = valueCursor.current;\n\n  pop(valueCursor, providerFiber);\n\n  const context: ReactContext<any> = providerFiber.type._context;\n  if (isPrimaryRenderer) {\n    context._currentValue = currentValue;\n  } else {\n    context._currentValue2 = currentValue;\n  }\n}\n\nexport function calculateChangedBits<T>(\n  context: ReactContext<T>,\n  newValue: T,\n  oldValue: T,\n) {\n  if (is(oldValue, newValue)) {\n    // No change\n    return 0;\n  } else {\n    const changedBits =\n      typeof context._calculateChangedBits === 'function'\n        ? context._calculateChangedBits(oldValue, newValue)\n        : MAX_SIGNED_31_BIT_INT;\n\n    if (__DEV__) {\n      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {\n        console.error(\n          'calculateChangedBits: Expected the return value to be a ' +\n            '31-bit integer. Instead received: %s',\n          changedBits,\n        );\n      }\n    }\n    return changedBits | 0;\n  }\n}\n\nexport function scheduleWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated, which means the rest of the\n      // ancestor path already has sufficient priority.\n      break;\n    }\n    node = node.return;\n  }\n}\n\nexport function propagateContextChange(\n  workInProgress: Fiber,\n  context: ReactContext<mixed>,\n  changedBits: number,\n  renderLanes: Lanes,\n): void {\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (\n          dependency.context === context &&\n          (dependency.observedBits & changedBits) !== 0\n        ) {\n          // Match! Schedule an update on this fiber.\n\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const update = createUpdate(\n              NoTimestamp,\n              pickArbitraryLane(renderLanes),\n            );\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            enqueueUpdate(fiber, update);\n          }\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleWorkOnParentPath(fiber.return, renderLanes);\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (\n      enableSuspenseServerRenderer &&\n      fiber.tag === DehydratedFragment\n    ) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n      invariant(\n        parentSuspense !== null,\n        'We just came from a parent so we must have had a parent. This is a bug in React.',\n      );\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleWorkOnParentPath(parentSuspense, renderLanes);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    const firstContext = dependencies.firstContext;\n    if (firstContext !== null) {\n      if (includesSomeLane(dependencies.lanes, renderLanes)) {\n        // Context list has a pending update. Mark that this fiber performed work.\n        markWorkInProgressReceivedUpdate();\n      }\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    }\n  }\n}\n\nexport function readContext<T>(\n  context: ReactContext<T>,\n  observedBits: void | number | boolean,\n): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  if (lastContextWithAllBitsObserved === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else if (observedBits === false || observedBits === 0) {\n    // Do not observe any updates.\n  } else {\n    let resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.\n    if (\n      typeof observedBits !== 'number' ||\n      observedBits === MAX_SIGNED_31_BIT_INT\n    ) {\n      // Observe all updates.\n      lastContextWithAllBitsObserved = ((context: any): ReactContext<mixed>);\n      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;\n    } else {\n      resolvedObservedBits = observedBits;\n    }\n\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      observedBits: resolvedObservedBits,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      invariant(\n        currentlyRenderingFiber !== null,\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n        responders: null,\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return isPrimaryRenderer ? context._currentValue : context._currentValue2;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\n\nimport {NoLane, NoLanes, isSubsetOfLanes, mergeLanes} from './ReactFiberLane';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {Callback, ShouldCapture, DidCapture} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictMode} from './ReactTypeOfMode';\nimport {markSkippedUpdateLanes} from './ReactFiberWorkLoop.old';\n\nimport invariant from 'shared/invariant';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\ntype SharedQueue<State> = {|\n  pending: Update<State> | null,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  effects: Array<Update<State>> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n    },\n    effects: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(fiber: Fiber, update: Update<State>) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n  const pending = sharedQueue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  sharedQueue.pending = update;\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictMode\n          ) {\n            disableLogs();\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              reenableLogs();\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictMode\n          ) {\n            disableLogs();\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              reenableLogs();\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return Object.assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      const updateLane = update.lane;\n      const updateEventTime = update.eventTime;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (callback !== null) {\n          workInProgress.flags |= Callback;\n          const effects = queue.effects;\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  invariant(\n    typeof callback === 'function',\n    'Invalid argument passed as callback. Expected a function. Instead ' +\n      'received: %s',\n    callback,\n  );\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function commitUpdateQueue<State>(\n  finishedWork: Fiber,\n  finishedQueue: UpdateQueue<State>,\n  instance: any,\n): void {\n  // Commit the effects\n  const effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n  if (effects !== null) {\n    for (let i = 0; i < effects.length; i++) {\n      const effect = effects[i];\n      const callback = effect.callback;\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\n\nimport * as React from 'react';\nimport {Update, Snapshot} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {DebugTracingMode, StrictMode} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n} from './SchedulingProfiler';\n\nconst fakeInternalInstance = {};\nconst isArray = Array.isArray;\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentName(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      invariant(\n        false,\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nexport function applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        reenableLogs();\n      }\n    }\n  }\n\n  const partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  if (__DEV__) {\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : Object.assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          instance.shouldComponentUpdate(newProps, newState, nextContext);\n        } finally {\n          reenableLogs();\n        }\n      }\n    }\n    const shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n\n    if (__DEV__) {\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentName(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentName(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentName(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentName(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentName(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        reenableLogs();\n      }\n    }\n  }\n\n  const instance = new ctor(props, context);\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentName(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentName(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentName(workInProgress.type) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentName(workInProgress.type) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentName(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    workInProgress.flags |= Update;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {BlockComponent} from 'react/src/ReactBlock';\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\n\nimport getComponentName from 'shared/getComponentName';\nimport {Placement, Deletion} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_BLOCK_TYPE,\n} from 'shared/ReactSymbols';\nimport {\n  FunctionComponent,\n  ClassComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  SimpleMemoComponent,\n  Block,\n} from './ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport {\n  warnAboutStringRefs,\n  enableBlocksAPI,\n  enableLazyElements,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictMode} from './ReactTypeOfMode';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n    invariant(\n      typeof child._store === 'object',\n      'React Component in warnForMissingKey should have a _store. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n    child._store.validated = true;\n\n    const componentName = getComponentName(returnFiber.type) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nconst isArray = Array.isArray;\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName = getComponentName(returnFiber.type) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n        invariant(\n          ownerFiber.tag === ClassComponent,\n          'Function components cannot have string refs. ' +\n            'We recommend using useRef() instead. ' +\n            'Learn more about using refs safely here: ' +\n            'https://reactjs.org/link/strict-mode-string-ref',\n        );\n        inst = ownerFiber.stateNode;\n      }\n      invariant(\n        inst,\n        'Missing owner for string ref %s. This error is likely caused by a ' +\n          'bug in React. Please file an issue.',\n        mixedRef,\n      );\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = inst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = inst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      invariant(\n        typeof mixedRef === 'string',\n        'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n      );\n      invariant(\n        element._owner,\n        'Element ref was specified as a string (%s) but no owner was set. This could happen for one of' +\n          ' the following reasons:\\n' +\n          '1. You may be adding a ref to a function component\\n' +\n          \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n          '3. You have multiple copies of React loaded\\n' +\n          'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        mixedRef,\n      );\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  if (returnFiber.type !== 'textarea') {\n    invariant(\n      false,\n      'Objects are not valid as a React child (found: %s). ' +\n        'If you meant to render a collection of children, use an array ' +\n        'instead.',\n      Object.prototype.toString.call(newChild) === '[object Object]'\n        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n        : newChild,\n    );\n  }\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentName(returnFiber.type) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\n// We avoid inlining this to avoid potential deopts from using try/catch.\n/** @noinline */\nfunction resolveLazyType<T, P>(\n  lazyComponent: LazyComponent<T, P>,\n): LazyComponent<T, P> | T {\n  try {\n    // If we can, let's peek at the resulting type.\n    const payload = lazyComponent._payload;\n    const init = lazyComponent._init;\n    return init(payload);\n  } catch (x) {\n    // Leave it in place and let it throw again in the begin phase.\n    return lazyComponent;\n  }\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    // Deletions are added in reversed order so we add it to the front.\n    // At this point, the return fiber's effect list is empty except for\n    // deletions, so we can just append the deletion to the list. The remaining\n    // effects aren't added until the complete phase. Once we implement\n    // resuming, this may not be true.\n    const last = returnFiber.lastEffect;\n    if (last !== null) {\n      last.nextEffect = childToDelete;\n      returnFiber.lastEffect = childToDelete;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n    }\n    childToDelete.nextEffect = null;\n    childToDelete.flags = Deletion;\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags = Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags = Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags = Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    if (current !== null) {\n      if (\n        current.elementType === element.type ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__ ? isCompatibleFamilyForHotReloading(current, element) : false)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      } else if (enableBlocksAPI && current.tag === Block) {\n        // The new Block might not be initialized yet. We need to initialize\n        // it in case initializing it turns out it would match.\n        let type = element.type;\n        if (type.$$typeof === REACT_LAZY_TYPE) {\n          type = resolveLazyType(type);\n        }\n        if (\n          type.$$typeof === REACT_BLOCK_TYPE &&\n          ((type: any): BlockComponent<any, any>)._render ===\n            (current.type: BlockComponent<any, any>)._render\n        ) {\n          // Same as above but also update the .type field.\n          const existing = useFiber(current, element.props);\n          existing.return = returnFiber;\n          existing.type = type;\n          if (__DEV__) {\n            existing._debugSource = element._source;\n            existing._debugOwner = element._owner;\n          }\n          return existing;\n        }\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return createChild(returnFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            if (newChild.type === REACT_FRAGMENT_TYPE) {\n              return updateFragment(\n                returnFiber,\n                oldFiber,\n                newChild.props.children,\n                lanes,\n                key,\n              );\n            }\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          if (newChild.type === REACT_FRAGMENT_TYPE) {\n            return updateFragment(\n              returnFiber,\n              matchedFiber,\n              newChild.props.children,\n              lanes,\n              newChild.key,\n            );\n          }\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = child._payload;\n            const init = (child._init: any);\n            warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n            break;\n          }\n        // We intentionally fallthrough here if enableLazyElements is not on.\n        // eslint-disable-next-lined no-fallthrough\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n    invariant(\n      typeof iteratorFn === 'function',\n      'An object is not an iterable. This error is likely caused by a bug in ' +\n        'React. Please file an issue.',\n    );\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n    invariant(newChildren != null, 'An iterable object provided no iterator.');\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        switch (child.tag) {\n          case Fragment: {\n            if (element.type === REACT_FRAGMENT_TYPE) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              const existing = useFiber(child, element.props.children);\n              existing.return = returnFiber;\n              if (__DEV__) {\n                existing._debugSource = element._source;\n                existing._debugOwner = element._owner;\n              }\n              return existing;\n            }\n            break;\n          }\n          case Block:\n            if (enableBlocksAPI) {\n              let type = element.type;\n              if (type.$$typeof === REACT_LAZY_TYPE) {\n                type = resolveLazyType(type);\n              }\n              if (type.$$typeof === REACT_BLOCK_TYPE) {\n                // The new Block might not be initialized yet. We need to initialize\n                // it in case initializing it turns out it would match.\n                if (\n                  ((type: any): BlockComponent<any, any>)._render ===\n                  (child.type: BlockComponent<any, any>)._render\n                ) {\n                  deleteRemainingChildren(returnFiber, child.sibling);\n                  const existing = useFiber(child, element.props);\n                  existing.type = type;\n                  existing.return = returnFiber;\n                  if (__DEV__) {\n                    existing._debugSource = element._source;\n                    existing._debugOwner = element._owner;\n                  }\n                  return existing;\n                }\n              }\n            }\n          // We intentionally fallthrough here if enableBlocksAPI is not on.\n          // eslint-disable-next-lined no-fallthrough\n          default: {\n            if (\n              child.elementType === element.type ||\n              // Keep this check inline so it only runs on the false path:\n              (__DEV__\n                ? isCompatibleFamilyForHotReloading(child, element)\n                : false)\n            ) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              const existing = useFiber(child, element.props);\n              existing.ref = coerceRef(returnFiber, child, element);\n              existing.return = returnFiber;\n              if (__DEV__) {\n                existing._debugSource = element._source;\n                existing._debugOwner = element._owner;\n              }\n              return existing;\n            }\n            break;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    const isObject = typeof newChild === 'object' && newChild !== null;\n\n    if (isObject) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            // TODO: This function is supposed to be non-recursive.\n            return reconcileChildFibers(\n              returnFiber,\n              currentFirstChild,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n    }\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (isArray(newChild)) {\n      return reconcileChildrenArray(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes,\n      );\n    }\n\n    if (getIteratorFn(newChild)) {\n      return reconcileChildrenIterator(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes,\n      );\n    }\n\n    if (isObject) {\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {\n      // If the new child is undefined, and the return fiber is a composite\n      // component, throw an error. If Fiber return types are disabled,\n      // we already threw above.\n      switch (returnFiber.tag) {\n        case ClassComponent: {\n          if (__DEV__) {\n            const instance = returnFiber.stateNode;\n            if (instance.render._isMockFunction) {\n              // We allow auto-mocks to proceed as if they're returning null.\n              break;\n            }\n          }\n        }\n        // Intentionally fall through to the next case, which handles both\n        // functions and classes\n        // eslint-disable-next-lined no-fallthrough\n        case Block:\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          invariant(\n            false,\n            '%s(...): Nothing was returned from render. This usually means a ' +\n              'return statement is missing. Or, to render nothing, ' +\n              'return null.',\n            getComponentName(returnFiber.type) || 'Component',\n          );\n        }\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  invariant(\n    current === null || workInProgress.child === current.child,\n    'Resuming work not yet implemented.',\n  );\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  invariant(\n    c !== NO_CONTEXT,\n    'Expected host context to exist. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\n// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// Subtree Flags:\n\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\n\n// Shallow Flags:\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function addSubtreeSuspenseContext(\n  parentContext: SuspenseContext,\n  subtreeContext: SubtreeSuspenseContext,\n): SuspenseContext {\n  return parentContext | subtreeContext;\n}\n\nexport function pushSuspenseContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane';\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n  // Last Effect before we rendered the \"rendering\" item.\n  // Used to remove new effects added by the rendered item.\n  lastEffect: null | Fiber,\n|};\n\nexport function shouldCaptureSuspense(\n  workInProgress: Fiber,\n  hasInvisibleParent: boolean,\n): boolean {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  const nextState: SuspenseState | null = workInProgress.memoizedState;\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n    return false;\n  }\n  const props = workInProgress.memoizedProps;\n  // In order to capture, the Suspense component must have a fallback prop.\n  if (props.fallback === undefined) {\n    return false;\n  }\n  // Regular boundaries always capture.\n  if (props.unstable_avoidThisFallback !== true) {\n    return true;\n  }\n  // If it's a boundary we should avoid, then we prefer to bubble up to the\n  // parent boundary if it is currently invisible.\n  if (hasInvisibleParent) {\n    return false;\n  }\n  // If the parent is not able to handle it, we must handle it.\n  return true;\n}\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*  */ 0b000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Layout = /*    */ 0b010;\nexport const Passive = /*   */ 0b100;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {Deletion, Placement, Hydrating} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateContainerInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableContainerInstance,\n  didNotFindHydratableContainerTextInstance,\n  didNotFindHydratableContainerSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\nimport {OffscreenLane} from './ReactFiberLane';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChild(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);\n  popToNextHostParent(fiber);\n  isHydrating = true;\n  return true;\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        didNotHydrateContainerInstance(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      case HostComponent:\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n        );\n        break;\n    }\n  }\n\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n  childToDelete.flags = Deletion;\n\n  // This might seem like it belongs on progressedFirstDeletion. However,\n  // these children are not part of the reconciliation list of children.\n  // Even if we abort and rereconcile the children, that will try to hydrate\n  // again and the nodes are still in the host tree so these will be\n  // recreated.\n  if (returnFiber.lastEffect !== null) {\n    returnFiber.lastEffect.nextEffect = childToDelete;\n    returnFiber.lastEffect = childToDelete;\n  } else {\n    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableContainerInstance(parentContainer, type, props);\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableContainerTextInstance(parentContainer, text);\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableContainerSuspenseInstance(parentContainer);\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n        }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      if (enableSuspenseServerRenderer) {\n        const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n          nextInstance,\n        );\n        if (suspenseInstance !== null) {\n          const suspenseState: SuspenseState = {\n            dehydrated: suspenseInstance,\n            retryLane: OffscreenLane,\n          };\n          fiber.memoizedState = suspenseState;\n          // Store the dehydrated fragment as a child fiber.\n          // This simplifies the code for getHostSibling and deleting nodes,\n          // since it doesn't have to consider all Suspense boundaries and\n          // check if they're dehydrated ones or not.\n          const dehydratedFragment = createFiberFromDehydratedFragment(\n            suspenseInstance,\n          );\n          dehydratedFragment.return = fiber;\n          fiber.child = dehydratedFragment;\n          return true;\n        }\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(\n      (hydrationParentFiber: any),\n      firstAttemptedInstance,\n    );\n  }\n  hydrationParentFiber = fiber;\n  nextHydratableInstance = getFirstHydratableChild((nextInstance: any));\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n  if (__DEV__) {\n    if (shouldUpdate) {\n      // We assume that prepareToHydrateHostTextInstance is called in a context where the\n      // hydration parent is the parent host component of this host text.\n      const returnFiber = hydrationParentFiber;\n      if (returnFiber !== null) {\n        switch (returnFiber.tag) {\n          case HostRoot: {\n            const parentContainer = returnFiber.stateNode.containerInfo;\n            didNotMatchHydratedContainerTextInstance(\n              parentContainer,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n          case HostComponent: {\n            const parentType = returnFiber.type;\n            const parentProps = returnFiber.memoizedProps;\n            const parentInstance = returnFiber.stateNode;\n            didNotMatchHydratedTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  const type = fiber.type;\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them.\n  // TODO: Better heuristic.\n  if (\n    fiber.tag !== HostComponent ||\n    (type !== 'head' &&\n      type !== 'body' &&\n      !shouldSetTextContent(type, fiber.memoizedProps))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    while (nextInstance) {\n      deleteHydratableInstance(fiber, nextInstance);\n      nextInstance = getNextHydratableSibling(nextInstance);\n    }\n  }\n\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {OpaqueIDType} from './ReactFiberHostConfig';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\n\nimport {NoMode, BlockingMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  NoLanes,\n  InputContinuousLanePriority,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  markRootEntangled,\n  markRootMutableRead,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n  higherLanePriority,\n  DefaultLanePriority,\n} from './ReactFiberLane';\nimport {readContext} from './ReactFiberNewContext.old';\nimport {\n  Update as UpdateEffect,\n  Passive as PassiveEffect,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  warnIfNotCurrentlyActingEffectsInDEV,\n  warnIfNotCurrentlyActingUpdatesInDev,\n  warnIfNotScopedWithMatchingAct,\n  markSkippedUpdateLanes,\n} from './ReactFiberWorkLoop.old';\n\nimport invariant from 'shared/invariant';\nimport getComponentName from 'shared/getComponentName';\nimport is from 'shared/objectIs';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  UserBlockingPriority,\n  NormalPriority,\n  runWithPriority,\n  getCurrentPriorityLevel,\n} from './SchedulerWithReactIntegration.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  makeClientId,\n  makeClientIdInDEV,\n  makeOpaqueHydratingObject,\n} from './ReactFiberHostConfig';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {getIsRendering} from './ReactCurrentFiber';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './SchedulingProfiler';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\ntype Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  eagerReducer: ((S, A) => S) | null,\n  eagerState: S | null,\n  next: Update<S, A>,\n  priority?: ReactPriorityLevel,\n|};\n\ntype UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nexport type HookType =\n  | 'useState'\n  | 'useReducer'\n  | 'useContext'\n  | 'useRef'\n  | 'useEffect'\n  | 'useLayoutEffect'\n  | 'useCallback'\n  | 'useMemo'\n  | 'useImperativeHandle'\n  | 'useDebugValue'\n  | 'useDeferredValue'\n  | 'useTransition'\n  | 'useMutableSource'\n  | 'useOpaqueIdentifier';\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnAboutUseOpaqueIdentifier;\nif (__DEV__) {\n  didWarnAboutUseOpaqueIdentifier = {};\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: UpdateQueue<any, any> | null,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\nexport type FunctionComponentUpdateQueue = {|lastEffect: Effect | null|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentName(currentlyRenderingFiber.type);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  invariant(\n    false,\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      invariant(\n        numberOfReRenders < RE_RENDER_LIMIT,\n        'Too many re-renders. React limits the number of renders to prevent ' +\n          'an infinite loop.',\n      );\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrancy.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n\n  invariant(\n    !didRenderTooFewHooks,\n    'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n      'early return statement.',\n  );\n\n  return children;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrancy.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    invariant(\n      nextCurrentHook !== null,\n      'Rendered more hooks than during the previous render.',\n    );\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue = (hook.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  });\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          eagerReducer: update.eagerReducer,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            eagerReducer: update.eagerReducer,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.eagerReducer === reducer) {\n          // If this update was processed eagerly, and its reducer matches the\n          // current reducer, we can use the eagerly computed state.\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubcribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    invariant(\n      false,\n      'Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  invariant(\n    root !== null,\n    'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n  );\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubcribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue = {\n      pending: null,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchAction.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue = (hook.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  });\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  const ref = {current: initialValue};\n  if (__DEV__) {\n    Object.seal(ref);\n  }\n  hook.memoizedState = ref;\n  return ref;\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  return mountEffectImpl(\n    UpdateEffect | PassiveEffect,\n    HookPassive,\n    create,\n    deps,\n  );\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  return updateEffectImpl(\n    UpdateEffect | PassiveEffect,\n    HookPassive,\n    create,\n    deps,\n  );\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return mountEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return mountEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = mountState(value);\n  mountEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = updateState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = rerenderState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction startTransition(setPending, callback) {\n  const priorityLevel = getCurrentPriorityLevel();\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    setCurrentUpdateLanePriority(\n      higherLanePriority(previousLanePriority, InputContinuousLanePriority),\n    );\n\n    runWithPriority(\n      priorityLevel < UserBlockingPriority\n        ? UserBlockingPriority\n        : priorityLevel,\n      () => {\n        setPending(true);\n      },\n    );\n\n    // TODO: Can remove this. Was only necessary because we used to give\n    // different behavior to transitions without a config object. Now they are\n    // all treated the same.\n    setCurrentUpdateLanePriority(DefaultLanePriority);\n\n    runWithPriority(\n      priorityLevel > NormalPriority ? NormalPriority : priorityLevel,\n      () => {\n        const prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = 1;\n        try {\n          setPending(false);\n          callback();\n        } finally {\n          if (decoupleUpdatePriorityFromScheduler) {\n            setCurrentUpdateLanePriority(previousLanePriority);\n          }\n          ReactCurrentBatchConfig.transition = prevTransition;\n        }\n      },\n    );\n  } else {\n    runWithPriority(\n      priorityLevel < UserBlockingPriority\n        ? UserBlockingPriority\n        : priorityLevel,\n      () => {\n        setPending(true);\n      },\n    );\n\n    runWithPriority(\n      priorityLevel > NormalPriority ? NormalPriority : priorityLevel,\n      () => {\n        const prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = 1;\n        try {\n          setPending(false);\n          callback();\n        } finally {\n          ReactCurrentBatchConfig.transition = prevTransition;\n        }\n      },\n    );\n  }\n}\n\nfunction mountTransition(): [(() => void) => void, boolean] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method can be stored on a ref, since `setPending`\n  // never changes.\n  const start = startTransition.bind(null, setPending);\n  mountRef(start);\n  return [start, isPending];\n}\n\nfunction updateTransition(): [(() => void) => void, boolean] {\n  const [isPending] = updateState(false);\n  const startRef = updateRef();\n  const start: (() => void) => void = (startRef.current: any);\n  return [start, isPending];\n}\n\nfunction rerenderTransition(): [(() => void) => void, boolean] {\n  const [isPending] = rerenderState(false);\n  const startRef = updateRef();\n  const start: (() => void) => void = (startRef.current: any);\n  return [start, isPending];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction warnOnOpaqueIdentifierAccessInDEV(fiber) {\n  if (__DEV__) {\n    // TODO: Should warn in effects and callbacks, too\n    const name = getComponentName(fiber.type) || 'Unknown';\n    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {\n      console.error(\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the ' +\n          'value directly.',\n      );\n      didWarnAboutUseOpaqueIdentifier[name] = true;\n    }\n  }\n}\n\nfunction mountOpaqueIdentifier(): OpaqueIDType | void {\n  const makeId = __DEV__\n    ? makeClientIdInDEV.bind(\n        null,\n        warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber),\n      )\n    : makeClientId;\n\n  if (getIsHydrating()) {\n    let didUpgrade = false;\n    const fiber = currentlyRenderingFiber;\n    const readValue = () => {\n      if (!didUpgrade) {\n        // Only upgrade once. This works even inside the render phase because\n        // the update is added to a shared queue, which outlasts the\n        // in-progress render.\n        didUpgrade = true;\n        if (__DEV__) {\n          isUpdatingOpaqueValueInRenderPhase = true;\n          setId(makeId());\n          isUpdatingOpaqueValueInRenderPhase = false;\n          warnOnOpaqueIdentifierAccessInDEV(fiber);\n        } else {\n          setId(makeId());\n        }\n      }\n      invariant(\n        false,\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the value directly.',\n      );\n    };\n    const id = makeOpaqueHydratingObject(readValue);\n\n    const setId = mountState(id)[1];\n\n    if ((currentlyRenderingFiber.mode & BlockingMode) === NoMode) {\n      currentlyRenderingFiber.flags |= UpdateEffect | PassiveEffect;\n      pushEffect(\n        HookHasEffect | HookPassive,\n        () => {\n          setId(makeId());\n        },\n        undefined,\n        null,\n      );\n    }\n    return id;\n  } else {\n    const id = makeId();\n    mountState(id);\n    return id;\n  }\n}\n\nfunction updateOpaqueIdentifier(): OpaqueIDType | void {\n  const id = updateState(undefined)[0];\n  return id;\n}\n\nfunction rerenderOpaqueIdentifier(): OpaqueIDType | void {\n  const id = rerenderState(undefined)[0];\n  return id;\n}\n\nfunction dispatchAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    eagerReducer: null,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  // Append the update to the end of the list.\n  const pending = queue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  queue.pending = update;\n\n  const alternate = fiber.alternate;\n  if (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  ) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  } else {\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.eagerReducer = lastRenderedReducer;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n    if (__DEV__) {\n      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n      if ('undefined' !== typeof jest) {\n        warnIfNotScopedWithMatchingAct(fiber);\n        warnIfNotCurrentlyActingUpdatesInDev(fiber);\n      }\n    }\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentName(fiber.type) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useOpaqueIdentifier: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useOpaqueIdentifier: mountOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useOpaqueIdentifier: updateOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useOpaqueIdentifier: rerenderOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n} from 'shared/ReactFeatureFlags';\nimport {Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor.\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      if (parentFiber.tag === Profiler) {\n        const parentStateNode = parentFiber.stateNode;\n        parentStateNode.effectDuration += elapsedTime;\n        break;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor.\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      if (parentFiber.tag === Profiler) {\n        const parentStateNode = parentFiber.stateNode;\n        if (parentStateNode !== null) {\n          // Detached fibers have their state node cleared out.\n          // In this case, the return pointer is also cleared out,\n          // so we won't be able to report the time spent in this Profiler's subtree.\n          parentStateNode.passiveEffectDuration += elapsedTime;\n        }\n        break;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactProviderType, ReactContext} from 'shared/ReactTypes';\nimport type {BlockComponent} from 'react/src/ReactBlock';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n} from './ReactFiberOffscreenComponent';\n\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  Deletion,\n  ForceUpdateForLegacySuspense,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerTimer,\n  enableSchedulerTracing,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableBlocksAPI,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentName from 'shared/getComponentName';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n} from './ReactUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n} from './ReactFiberLane';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictMode,\n  BlockingMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {shouldSuspend} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseContext,\n  InvisibleParentSuspenseContext,\n  ForceSuspenseFallback,\n  hasSuspenseContext,\n  setDefaultShallowSuspenseContext,\n  addSubtreeSuspenseContext,\n  setShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  readContext,\n  prepareToReadContext,\n  calculateChangedBits,\n  scheduleWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {renderWithHooks, bailoutHooks} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  applyDerivedStateFromProps,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  markSpawnedWork,\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n  pushRenderLanes,\n  getExecutionContext,\n  RetryAfterError,\n  NoContext,\n} from './ReactFiberWorkLoop.old';\nimport {unstable_wrap as Schedule_tracing_wrap} from 'scheduler/tracing';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  updateLanes: Lanes,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentName(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  if (!includesSomeLane(updateLanes, renderLanes)) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  updateLanes: Lanes,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentName(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n      if (!includesSomeLane(renderLanes, updateLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumlated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    nextProps.mode === 'unstable-defer-without-hiding'\n  ) {\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Figure out what we should do in Blocking mode.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      let nextBaseLanes;\n      if (prevState !== null) {\n        const prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n      } else {\n        nextBaseLanes = renderLanes;\n      }\n\n      // Schedule this fiber to re-render at offscreen priority. Then bailout.\n      if (enableSchedulerTracing) {\n        markSpawnedWork((OffscreenLane: Lane));\n      }\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n      const nextState: OffscreenState = {\n        baseLanes: nextBaseLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      pushRenderLanes(workInProgress, nextBaseLanes);\n      return null;\n    } else {\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      // Push the lanes that were skipped when we bailed out.\n      const subtreeRenderLanes =\n        prevState !== null ? prevState.baseLanes : renderLanes;\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    let subtreeRenderLanes;\n    if (prevState !== null) {\n      subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      subtreeRenderLanes = renderLanes;\n    }\n    pushRenderLanes(workInProgress, subtreeRenderLanes);\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    // Reset effect durations for the next eventual effect phase.\n    // These are reset during render to allow the DevTools commit hook a chance to read them,\n    const stateNode = workInProgress.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateBlock<Props, Data>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  block: BlockComponent<Props, Data>,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  const render = block._render;\n  const data = block._data;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      data,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          data,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      data,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    if (current !== null) {\n      // A class component without an instance only mounts if it suspended\n      // inside a non-concurrent tree, in an inconsistent state. We want to\n      // treat it like a new mount, even though an empty version of it already\n      // committed. Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentName(workInProgress.type) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          instance.render();\n        } finally {\n          reenableLogs();\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n  const updateQueue = workInProgress.updateQueue;\n  invariant(\n    current !== null && updateQueue !== null,\n    'If the root does not have an updateQueue, we should have already ' +\n      'bailed out. This error is likely caused by a bug in React. Please ' +\n      'file an issue.',\n  );\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState !== null ? prevState.element : null;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  const nextState = workInProgress.memoizedState;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (nextChildren === prevChildren) {\n    resetHydrationState();\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n  const root: FiberRoot = workInProgress.stateNode;\n  if (root.hydrate && enterHydrationState(workInProgress)) {\n    // If we don't have any current children this might be the first pass.\n    // We always try to hydrate. If this isn't a hydration pass there won't\n    // be any children to hydrate which is effectively the same thing as\n    // not hydrating.\n\n    if (supportsHydration) {\n      const mutableSourceEagerHydrationData =\n        root.mutableSourceEagerHydrationData;\n      if (mutableSourceEagerHydrationData != null) {\n        for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n          const mutableSource = ((mutableSourceEagerHydrationData[\n            i\n          ]: any): MutableSource<any>);\n          const version = mutableSourceEagerHydrationData[i + 1];\n          setWorkInProgressVersion(mutableSource, version);\n        }\n      }\n    }\n\n    const child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n    workInProgress.child = child;\n\n    let node = child;\n    while (node) {\n      // Mark each child as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      node.flags = (node.flags & ~Placement) | Hydrating;\n      node = node.sibling;\n    }\n  } else {\n    // Otherwise reset hydration state in case we aborted and resumed another\n    // root.\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    resetHydrationState();\n  }\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  updateLanes,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // A lazy component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentName(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        updateLanes,\n        renderLanes,\n      );\n      return child;\n    }\n    case Block: {\n      if (enableBlocksAPI) {\n        // TODO: Resolve for Hot Reloading.\n        child = updateBlock(\n          null,\n          workInProgress,\n          Component,\n          props,\n          renderLanes,\n        );\n        return child;\n      }\n      break;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  invariant(\n    false,\n    'Element type is invalid. Received a promise that resolves to: %s. ' +\n      'Lazy element type must resolve to a class or function.%s',\n    Component,\n    hint,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An incomplete component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An indeterminate component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentName(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    const getDerivedStateFromProps = Component.getDerivedStateFromProps;\n    if (typeof getDerivedStateFromProps === 'function') {\n      applyDerivedStateFromProps(\n        workInProgress,\n        Component,\n        getDerivedStateFromProps,\n        props,\n      );\n    }\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentName(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n        } finally {\n          reenableLogs();\n        }\n      }\n    }\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || workInProgress._debugID || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  suspenseContext: SuspenseContext,\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallack\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  return hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(\n      suspenseContext,\n      current,\n      workInProgress,\n      renderLanes,\n    )\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (\n      current === null ||\n      (current.memoizedState: null | SuspenseState) !== null\n    ) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Boundaries without fallbacks or should be avoided are not considered since\n      // they cannot handle preferred fallback states.\n      if (\n        nextProps.fallback !== undefined &&\n        nextProps.unstable_avoidThisFallback !== true\n      ) {\n        suspenseContext = addSubtreeSuspenseContext(\n          suspenseContext,\n          InvisibleParentSuspenseContext,\n        );\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconcilation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n    // If we're currently hydrating, try to hydrate this boundary.\n    // But only if this has a fallback.\n    if (nextProps.fallback !== undefined) {\n      tryToClaimNextHydratableInstance(workInProgress);\n      // This could've been a dehydrated suspense component.\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null) {\n          const dehydrated = suspenseState.dehydrated;\n          if (dehydrated !== null) {\n            return mountDehydratedSuspenseComponent(\n              workInProgress,\n              dehydrated,\n              renderLanes,\n            );\n          }\n        }\n      }\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n    if (showFallback) {\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackFragment;\n    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      if (enableSchedulerTracing) {\n        markSpawnedWork(SomeRetryLane);\n      }\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // If the current fiber has a SuspenseState, that means it's already showing\n    // a fallback.\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      // The current tree is already showing a fallback\n\n      // Special path for hydration\n      if (enableSuspenseServerRenderer) {\n        const dehydrated = prevState.dehydrated;\n        if (dehydrated !== null) {\n          if (!didSuspend) {\n            return updateDehydratedSuspenseComponent(\n              current,\n              workInProgress,\n              dehydrated,\n              prevState,\n              renderLanes,\n            );\n          } else if (\n            (workInProgress.memoizedState: null | SuspenseState) !== null\n          ) {\n            // Something suspended and we should still be in dehydrated mode.\n            // Leave the existing child in place.\n            workInProgress.child = current.child;\n            // The dehydrated completion pass expects this flag to be there\n            // but the normal suspense pass doesn't.\n            workInProgress.flags |= DidCapture;\n            return null;\n          } else {\n            // Suspended but we should no longer be in dehydrated mode.\n            // Therefore we now have to render the fallback.\n            const nextPrimaryChildren = nextProps.children;\n            const nextFallbackChildren = nextProps.fallback;\n            const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n              current,\n              workInProgress,\n              nextPrimaryChildren,\n              nextFallbackChildren,\n              renderLanes,\n            );\n            const primaryChildFragment: Fiber = (workInProgress.child: any);\n            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n              renderLanes,\n            );\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return fallbackChildFragment;\n          }\n        }\n      }\n\n      if (showFallback) {\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    } else {\n      // The current tree is not already showing a fallback.\n      if (showFallback) {\n        // Timed out.\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        // Skip the primary children, and continue working on the\n        // fallback children.\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        // Still haven't timed out. Continue rendering the children, like we\n        // normally do.\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = createFiberFromOffscreen(\n    primaryChildProps,\n    mode,\n    renderLanes,\n    null,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = createFiberFromOffscreen(\n      primaryChildProps,\n      mode,\n      NoLanes,\n      null,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction createWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = createWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    currentFallbackChildFragment.nextEffect = null;\n    currentFallbackChildFragment.flags = Deletion;\n    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & BlockingMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    // The fallback fiber was added as a deletion effect during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it. So we need to remove it from the list. Deletions are stored\n    // on the same list as effects. We want to keep the effects from the primary\n    // tree. So we copy the primary child fragment's effect list, which does not\n    // include the fallback deletion effect.\n    const progressedLastEffect = primaryChildFragment.lastEffect;\n    if (progressedLastEffect !== null) {\n      workInProgress.firstEffect = primaryChildFragment.firstEffect;\n      workInProgress.lastEffect = progressedLastEffect;\n      progressedLastEffect.nextEffect = null;\n    } else {\n      // TODO: Reset this somewhere else? Lol legacy mode is so weird.\n      workInProgress.firstEffect = workInProgress.lastEffect = null;\n    }\n  } else {\n    primaryChildFragment = createWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildFragment = createFiberFromOffscreen(\n    primaryChildren,\n    mode,\n    NoLanes,\n    null,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    mode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & BlockingMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOM.createBlockingRoot(container, { hydrate: true })' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    if (enableSchedulerTracing) {\n      markSpawnedWork(DefaultHydrationLane);\n    }\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n    if (enableSchedulerTracing) {\n      markSpawnedWork(OffscreenLane);\n    }\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  // We should never be hydrating at this point because it is the first pass,\n  // but after we've already committed once.\n  warnIfHydrating();\n\n  if ((getExecutionContext() & RetryAfterError) !== NoContext) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This boundary is in a permanent fallback state. In this case, we'll never\n    // get an update and we'll never be able to hydrate the final content. Let's just try the\n    // client side render instead.\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n  // We use lanes to indicate that a child might depend on context, so if\n  // any context has changed, we need to treat is as if the input might have changed.\n  const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n  if (didReceiveUpdate || hasContextChanged) {\n    // This boundary has changed since the first render. This means that we are now unable to\n    // hydrate it. We might still be able to hydrate it using a higher priority lane.\n    const root = getWorkInProgressRoot();\n    if (root !== null) {\n      const attemptHydrationAtLane = getBumpedLaneForHydration(\n        root,\n        renderLanes,\n      );\n      if (\n        attemptHydrationAtLane !== NoLane &&\n        attemptHydrationAtLane !== suspenseState.retryLane\n      ) {\n        // Intentionally mutating since this render will get interrupted. This\n        // is one of the very rare times where we mutate the current tree\n        // during the render phase.\n        suspenseState.retryLane = attemptHydrationAtLane;\n        // TODO: Ideally this would inherit the event time of the current render\n        const eventTime = NoTimestamp;\n        scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);\n      } else {\n        // We have already tried to ping at a higher priority than we're rendering with\n        // so if we got here, we must have failed to hydrate at those levels. We must\n        // now give up. Instead, we're going to delete the whole subtree and instead inject\n        // a new real Suspense boundary to take its place, which may render content\n        // or fallback. This might suspend for a while and if it does we might still have\n        // an opportunity to hydrate before this pass commits.\n      }\n    }\n\n    // If we have scheduled higher pri work above, this will probably just abort the render\n    // since we now have higher priority work, but in case it doesn't, we need to prepare to\n    // render something, if we time out. Even if that requires us to delete everything and\n    // skip hydration.\n    // Delay having to do this as long as the suspense timeout allows us.\n    renderDidSuspendDelayIfPossible();\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  } else if (isSuspenseInstancePending(suspenseInstance)) {\n    // This component is still pending more data from the server, so we can't hydrate its\n    // content. We treat it as if this component suspended itself. It might seem as if\n    // we could just try to render it client-side instead. However, this will perform a\n    // lot of unnecessary work and is unlikely to complete since it often will suspend\n    // on missing data anyway. Additionally, the server might be able to render more\n    // than we can on the client yet. In that case we'd end up with more fallback states\n    // on the client than if we just leave it alone. If the server times out or errors\n    // these should update this boundary to the permanent Fallback state instead.\n    // Mark it as having captured (i.e. suspended).\n    workInProgress.flags |= DidCapture;\n    // Leave the child in place. I.e. the dehydrated fragment.\n    workInProgress.child = current.child;\n    // Register a callback to retry this boundary once the server has sent the result.\n    let retry = retryDehydratedSuspenseBoundary.bind(null, current);\n    if (enableSchedulerTracing) {\n      retry = Schedule_tracing_wrap(retry);\n    }\n    registerSuspenseInstanceRetry(suspenseInstance, retry);\n    return null;\n  } else {\n    // This is the first attempt.\n    reenterHydrationStateFromDehydratedSuspenseInstance(\n      workInProgress,\n      suspenseInstance,\n    );\n    const nextProps = workInProgress.pendingProps;\n    const primaryChildren = nextProps.children;\n    const primaryChildFragment = mountSuspensePrimaryChildren(\n      workInProgress,\n      primaryChildren,\n      renderLanes,\n    );\n    // Mark the children as hydrating. This is a fast path to know whether this\n    // tree is part of a hydrating tree. This is used to determine if a child\n    // node has fully mounted yet, and for scheduling event replaying.\n    // Conceptually this is similar to Placement in that a new subtree is\n    // inserted into the React tree here. It just happens to not need DOM\n    // mutations because it already exists.\n    primaryChildFragment.flags |= Hydrating;\n    return primaryChildFragment;\n  }\n}\n\nfunction scheduleWorkOnFiber(fiber: Fiber, renderLanes: Lanes) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleWorkOnParentPath(fiber.return, renderLanes);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleWorkOnFiber(node, renderLanes);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleWorkOnFiber(node, renderLanes);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isArray = Array.isArray(childSlot);\n    const isIterable =\n      !isArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isArray || isIterable) {\n      const type = isArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (Array.isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n  lastEffectBeforeRendering: null | Fiber,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n      lastEffect: lastEffectBeforeRendering,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n    renderState.lastEffect = lastEffectBeforeRendering;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, newValue);\n\n  if (oldProps !== null) {\n    const oldValue = oldProps.value;\n    const changedBits = calculateChangedBits(context, newValue, oldValue);\n    if (changedBits === 0) {\n      // No change. Bailout early if children are the same.\n      if (\n        oldProps.children === newProps.children &&\n        !hasLegacyContextChanged()\n      ) {\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n    } else {\n      // The context value changed. Search for matching consumers and schedule\n      // them to update.\n      propagateContextChange(workInProgress, context, changedBits, renderLanes);\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context, newProps.unstable_observedBits);\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFundamentalComponent(current, workInProgress, renderLanes) {\n  const fundamentalImpl = workInProgress.type.impl;\n  if (fundamentalImpl.reconcileChildren === false) {\n    return null;\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n    return null;\n  } else {\n    // This fiber doesn't have work, but its subtree does. Clone the child\n    // fibers and continue.\n    cloneChildFibers(current, workInProgress);\n    return workInProgress.child;\n  }\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const last = returnFiber.lastEffect;\n    if (last !== null) {\n      last.nextEffect = current;\n      returnFiber.lastEffect = current;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = current;\n    }\n    current.nextEffect = null;\n    current.flags = Deletion;\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const updateLanes = workInProgress.lanes;\n\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else if (!includesSomeLane(renderLanes, updateLanes)) {\n      didReceiveUpdate = false;\n      // This fiber does not have any pending work. Bailout without entering\n      // the begin phase. There's still some bookkeeping we that needs to be done\n      // in this optimized path, mostly pushing stuff onto the stack.\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          resetHydrationState();\n          break;\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n        case ClassComponent: {\n          const Component = workInProgress.type;\n          if (isLegacyContextProvider(Component)) {\n            pushLegacyContextProvider(workInProgress);\n          }\n          break;\n        }\n        case HostPortal:\n          pushHostContainer(\n            workInProgress,\n            workInProgress.stateNode.containerInfo,\n          );\n          break;\n        case ContextProvider: {\n          const newValue = workInProgress.memoizedProps.value;\n          pushProvider(workInProgress, newValue);\n          break;\n        }\n        case Profiler:\n          if (enableProfilerTimer) {\n            // Profiler should only call onRender when one of its descendants actually rendered.\n            const hasChildWork = includesSomeLane(\n              renderLanes,\n              workInProgress.childLanes,\n            );\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            }\n\n            // Reset effect durations for the next eventual effect phase.\n            // These are reset during render to allow the DevTools commit hook a chance to read them,\n            const stateNode = workInProgress.stateNode;\n            stateNode.effectDuration = 0;\n            stateNode.passiveEffectDuration = 0;\n          }\n          break;\n        case SuspenseComponent: {\n          const state: SuspenseState | null = workInProgress.memoizedState;\n          if (state !== null) {\n            if (enableSuspenseServerRenderer) {\n              if (state.dehydrated !== null) {\n                pushSuspenseContext(\n                  workInProgress,\n                  setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n                );\n                // We know that this component will suspend again because if it has\n                // been unsuspended it has committed as a resolved Suspense component.\n                // If it needs to be retried, it should have work scheduled on it.\n                workInProgress.flags |= DidCapture;\n                // We should never render the children of a dehydrated boundary until we\n                // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n                return null;\n              }\n            }\n\n            // If this boundary is currently timed out, we need to decide\n            // whether to retry the primary children, or to skip over it and\n            // go straight to the fallback. Check the priority of the primary\n            // child fragment.\n            const primaryChildFragment: Fiber = (workInProgress.child: any);\n            const primaryChildLanes = primaryChildFragment.childLanes;\n            if (includesSomeLane(renderLanes, primaryChildLanes)) {\n              // The primary children have pending work. Use the normal path\n              // to attempt to render the primary children again.\n              return updateSuspenseComponent(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n            } else {\n              // The primary child fragment does not have pending work marked\n              // on it\n              pushSuspenseContext(\n                workInProgress,\n                setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n              );\n              // The primary children do not have pending work with sufficient\n              // priority. Bailout.\n              const child = bailoutOnAlreadyFinishedWork(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n              if (child !== null) {\n                // The fallback children have pending work. Skip over the\n                // primary children and work on the fallback.\n                return child.sibling;\n              } else {\n                return null;\n              }\n            }\n          } else {\n            pushSuspenseContext(\n              workInProgress,\n              setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n            );\n          }\n          break;\n        }\n        case SuspenseListComponent: {\n          const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n          const hasChildWork = includesSomeLane(\n            renderLanes,\n            workInProgress.childLanes,\n          );\n\n          if (didSuspendBefore) {\n            if (hasChildWork) {\n              // If something was in fallback state last time, and we have all the\n              // same children then we're still in progressive loading state.\n              // Something might get unblocked by state updates or retries in the\n              // tree which will affect the tail. So we need to use the normal\n              // path to compute the correct tail.\n              return updateSuspenseListComponent(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n            }\n            // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n            workInProgress.flags |= DidCapture;\n          }\n\n          // If nothing suspended before and we're rendering the same children,\n          // then the tail doesn't matter. Anything new that suspends will work\n          // in the \"together\" mode, so we can continue from the state we had.\n          const renderState = workInProgress.memoizedState;\n          if (renderState !== null) {\n            // Reset to the \"together\" mode in case we've started a different\n            // update in the past but didn't complete it.\n            renderState.rendering = null;\n            renderState.tail = null;\n            renderState.lastEffect = null;\n          }\n          pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n          if (hasChildWork) {\n            break;\n          } else {\n            // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n            return null;\n          }\n        }\n        case OffscreenComponent:\n        case LegacyHiddenComponent: {\n          // Need to check if the tree still needs to be deferred. This is\n          // almost identical to the logic used in the normal update path,\n          // so we'll just enter that. The only difference is we'll bail out\n          // at the next level instead of this one, because the child props\n          // have not changed. Which is fine.\n          // TODO: Probably should refactor `beginWork` to split the bailout\n          // path from the normal path. I'm tempted to do a labeled break here\n          // but I won't :)\n          workInProgress.lanes = NoLanes;\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\n        }\n      }\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    } else {\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentName(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        return updateFundamentalComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case Block: {\n      if (enableBlocksAPI) {\n        const block = workInProgress.type;\n        const props = workInProgress.pendingProps;\n        return updateBlock(current, workInProgress, block, props, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      return updateLegacyHiddenComponent(current, workInProgress, renderLanes);\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {\n  ReactFundamentalComponentInstance,\n  ReactScopeInstance,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './SchedulerWithReactIntegration.old';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {NoMode, BlockingMode, ProfileMode} from './ReactTypeOfMode';\nimport {Ref, Update, NoFlags, DidCapture, Snapshot} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  getFundamentalComponentInstance,\n  mountFundamentalComponent,\n  cloneFundamentalInstance,\n  shouldUpdateFundamentalComponent,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n  popSuspenseContext,\n  pushSuspenseContext,\n  setShallowSuspenseContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSchedulerTracing,\n  enableSuspenseCallback,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  enableScopeAPI,\n  enableBlocksAPI,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {\n  markSpawnedWork,\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  popRenderLanes,\n  getRenderTargetTime,\n} from './ReactFiberWorkLoop.old';\nimport {createFundamentalStateInstance} from './ReactFiberFundamental.old';\nimport {OffscreenLane, SomeRetryLane} from './ReactFiberLane';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        appendInitialChild(parent, node.stateNode.instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        let instance = node.stateNode.instance;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.tag === SuspenseComponent) {\n        if ((node.flags & Update) !== NoFlags) {\n          // Need to toggle the visibility of the primary children.\n          const newIsHidden = node.memoizedState !== null;\n          if (newIsHidden) {\n            const primaryChildParent = node.child;\n            if (primaryChildParent !== null) {\n              if (primaryChildParent.child !== null) {\n                primaryChildParent.child.return = primaryChildParent;\n                appendAllChildren(\n                  parent,\n                  primaryChildParent,\n                  true,\n                  newIsHidden,\n                );\n              }\n              const fallbackChildParent = primaryChildParent.sibling;\n              if (fallbackChildParent !== null) {\n                fallbackChildParent.return = node;\n                node = fallbackChildParent;\n                continue;\n              }\n            }\n          }\n        }\n        if (node.child !== null) {\n          // Continue traversing like normal\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        let instance = node.stateNode.instance;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.tag === SuspenseComponent) {\n        if ((node.flags & Update) !== NoFlags) {\n          // Need to toggle the visibility of the primary children.\n          const newIsHidden = node.memoizedState !== null;\n          if (newIsHidden) {\n            const primaryChildParent = node.child;\n            if (primaryChildParent !== null) {\n              if (primaryChildParent.child !== null) {\n                primaryChildParent.child.return = primaryChildParent;\n                appendAllChildrenToContainer(\n                  containerChildSet,\n                  primaryChildParent,\n                  true,\n                  newIsHidden,\n                );\n              }\n              const fallbackChildParent = primaryChildParent.sibling;\n              if (fallbackChildParent !== null) {\n                fallbackChildParent.return = node;\n                node = fallbackChildParent;\n                continue;\n              }\n            }\n          }\n        }\n        if (node.child !== null) {\n          // Continue traversing like normal\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = workInProgress.firstEffect === null;\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = workInProgress.firstEffect === null;\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      return null;\n    }\n    case HostRoot: {\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else if (!fiberRoot.hydrate) {\n          // Schedule an effect to clear this container at the start of the next commit.\n          // This handles the case of React rendering into a container with previous children.\n          // It's also safe to do for updates too, because current.child would only be null\n          // if the previous render was null (so the the container would already be empty).\n          workInProgress.flags |= Snapshot;\n        }\n      }\n      updateHostContainer(workInProgress);\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      if (enableSuspenseServerRenderer) {\n        if (nextState !== null && nextState.dehydrated !== null) {\n          if (current === null) {\n            const wasHydrated = popHydrationState(workInProgress);\n            invariant(\n              wasHydrated,\n              'A dehydrated suspense component was completed without a hydrated node. ' +\n                'This is probably a bug in React.',\n            );\n            prepareToHydrateHostSuspenseInstance(workInProgress);\n            if (enableSchedulerTracing) {\n              markSpawnedWork(OffscreenLane);\n            }\n            return null;\n          } else {\n            // We should never have been in a hydration state if we didn't have a current.\n            // However, in some of those paths, we might have reentered a hydration state\n            // and then we might be inside a hydration state. In that case, we'll need to exit out of it.\n            resetHydrationState();\n            if ((workInProgress.flags & DidCapture) === NoFlags) {\n              // This boundary did not suspend so it's now hydrated and unsuspended.\n              workInProgress.memoizedState = null;\n            }\n            // If nothing suspended, we need to schedule an effect to mark this boundary\n            // as having hydrated so events know that they're free to be invoked.\n            // It's also a signal to replay events and the suspense callback.\n            // If something suspended, schedule an effect to attach retry listeners.\n            // So we might as well always mark this.\n            workInProgress.flags |= Update;\n            return null;\n          }\n        }\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      let prevDidTimeout = false;\n      if (current === null) {\n        if (workInProgress.memoizedProps.fallback !== undefined) {\n          popHydrationState(workInProgress);\n        }\n      } else {\n        const prevState: null | SuspenseState = current.memoizedState;\n        prevDidTimeout = prevState !== null;\n      }\n\n      if (nextDidTimeout && !prevDidTimeout) {\n        // If this subtreee is running in blocking mode we can suspend,\n        // otherwise we won't suspend.\n        // TODO: This will still suspend a synchronous tree if anything\n        // in the concurrent tree already suspended during this render.\n        // This is a known bug.\n        if ((workInProgress.mode & BlockingMode) !== NoMode) {\n          // TODO: Move this back to throwException because this is too late\n          // if this is a large tree which is common for initial loads. We\n          // don't know if we should restart a render or not until we get\n          // this marker, and this is too late.\n          // If this render already had a ping or lower pri updates,\n          // and this is the first time we know we're going to suspend we\n          // should be able to immediately restart from within throwException.\n          const hasInvisibleChildContext =\n            current === null &&\n            workInProgress.memoizedProps.unstable_avoidThisFallback !== true;\n          if (\n            hasInvisibleChildContext ||\n            hasSuspenseContext(\n              suspenseStackCursor.current,\n              (InvisibleParentSuspenseContext: SuspenseContext),\n            )\n          ) {\n            // If this was in an invisible tree or a new render, then showing\n            // this boundary is ok.\n            renderDidSuspend();\n          } else {\n            // Otherwise, we're going to have to hide content so we should\n            // suspend for longer if possible.\n            renderDidSuspendDelayIfPossible();\n          }\n        }\n      }\n\n      if (supportsPersistence) {\n        // TODO: Only schedule updates if not prevDidTimeout.\n        if (nextDidTimeout) {\n          // If this boundary just timed out, schedule an effect to attach a\n          // retry listener to the promise. This flag is also used to hide the\n          // primary children.\n          workInProgress.flags |= Update;\n        }\n      }\n      if (supportsMutation) {\n        // TODO: Only schedule updates if these values are non equal, i.e. it changed.\n        if (nextDidTimeout || prevDidTimeout) {\n          // If this boundary just timed out, schedule an effect to attach a\n          // retry listener to the promise. This flag is also used to hide the\n          // primary children. In mutation mode, we also need the flag to\n          // *unhide* children that were previously hidden, so check if this\n          // is currently timed out, too.\n          workInProgress.flags |= Update;\n        }\n      }\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        workInProgress.flags |= Update;\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      popProvider(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thennables. Instead, we'll transfer its thennables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThennables = suspended.updateQueue;\n                if (newThennables !== null) {\n                  workInProgress.updateQueue = newThennables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect list before doing the second pass since that's now invalid.\n                if (renderState.lastEffect === null) {\n                  workInProgress.firstEffect = null;\n                }\n                workInProgress.lastEffect = renderState.lastEffect;\n                // Reset the child fibers to their original state.\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense Context to force suspense and immediately\n                // rerender the children.\n                pushSuspenseContext(\n                  workInProgress,\n                  setShallowSuspenseContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n            if (enableSchedulerTracing) {\n              markSpawnedWork(SomeRetryLane);\n            }\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThennables = suspended.updateQueue;\n            if (newThennables !== null) {\n              workInProgress.updateQueue = newThennables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We need to delete the row we just rendered.\n              // Reset the effect list to what it was before we rendered this\n              // child. The nested children have already appended themselves.\n              const lastEffect = (workInProgress.lastEffect =\n                renderState.lastEffect);\n              // Remove any effects that were appended after this point.\n              if (lastEffect !== null) {\n                lastEffect.nextEffect = null;\n              }\n              // We're done.\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n            if (enableSchedulerTracing) {\n              markSpawnedWork(SomeRetryLane);\n            }\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.lastEffect = workInProgress.lastEffect;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        }\n        pushSuspenseContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        return next;\n      }\n      return null;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalImpl = workInProgress.type.impl;\n        let fundamentalInstance: ReactFundamentalComponentInstance<\n          any,\n          any,\n        > | null = workInProgress.stateNode;\n\n        if (fundamentalInstance === null) {\n          const getInitialState = fundamentalImpl.getInitialState;\n          let fundamentalState;\n          if (getInitialState !== undefined) {\n            fundamentalState = getInitialState(newProps);\n          }\n          fundamentalInstance = workInProgress.stateNode = createFundamentalStateInstance(\n            workInProgress,\n            newProps,\n            fundamentalImpl,\n            fundamentalState || {},\n          );\n          const instance = ((getFundamentalComponentInstance(\n            fundamentalInstance,\n          ): any): Instance);\n          fundamentalInstance.instance = instance;\n          if (fundamentalImpl.reconcileChildren === false) {\n            return null;\n          }\n          appendAllChildren(instance, workInProgress, false, false);\n          mountFundamentalComponent(fundamentalInstance);\n        } else {\n          // We fire update in commit phase\n          const prevProps = fundamentalInstance.props;\n          fundamentalInstance.prevProps = prevProps;\n          fundamentalInstance.props = newProps;\n          fundamentalInstance.currentFiber = workInProgress;\n          if (supportsPersistence) {\n            const instance = cloneFundamentalInstance(fundamentalInstance);\n            fundamentalInstance.instance = instance;\n            appendAllChildren(instance, workInProgress, false, false);\n          }\n          const shouldUpdate = shouldUpdateFundamentalComponent(\n            fundamentalInstance,\n          );\n          if (shouldUpdate) {\n            markUpdate(workInProgress);\n          }\n        }\n        return null;\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        return null;\n      }\n      break;\n    }\n    case Block:\n      if (enableBlocksAPI) {\n        return null;\n      }\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popRenderLanes(workInProgress);\n      if (current !== null) {\n        const nextState: OffscreenState | null = workInProgress.memoizedState;\n        const prevState: OffscreenState | null = current.memoizedState;\n\n        const prevIsHidden = prevState !== null;\n        const nextIsHidden = nextState !== null;\n        if (\n          prevIsHidden !== nextIsHidden &&\n          newProps.mode !== 'unstable-defer-without-hiding'\n        ) {\n          workInProgress.flags |= Update;\n        }\n      }\n      return null;\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  enableSuspenseServerRenderer,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {popSuspenseContext} from './ReactFiberSuspenseContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popRenderLanes} from './ReactFiberWorkLoop.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\n\nimport invariant from 'shared/invariant';\n\nfunction unwindWork(workInProgress: Fiber, renderLanes: Lanes) {\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      invariant(\n        (flags & DidCapture) === NoFlags,\n        'The root failed to unmount after an error. This is likely a bug in ' +\n          'React. Please file an issue.',\n      );\n      workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n      return workInProgress;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          invariant(\n            workInProgress.alternate !== null,\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n          resetHydrationState();\n        }\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      popProvider(workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(interruptedWork: Fiber) {\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case ContextProvider:\n      popProvider(interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n|};\n\nexport function createCapturedValue<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  return true;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentName(source.type) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      const errorBoundaryName = getComponentName(boundary.type);\n      if (errorBoundaryName) {\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      } else {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\n\nimport getComponentName from 'shared/getComponentName';\nimport {\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n  IncompleteClassComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n} from './ReactFiberFlags';\nimport {shouldCaptureSuspense} from './ReactFiberSuspenseComponent.old';\nimport {NoMode, BlockingMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n} from './ReactFiberWorkLoop.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {markComponentSuspended} from './SchedulingProfiler';\n\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      logCapturedError(fiber, errorInfo);\n      return getDerivedStateFromError(error);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n\n        // Only log here if componentDidCatch is the only error boundary method defined\n        logCapturedError(fiber, errorInfo);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentName(fiber.type) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  } else if (__DEV__) {\n    update.callback = () => {\n      markFailedErrorBoundaryForHotReloading(fiber);\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a listener to the promise to \"ping\" the root and retry. But only if\n  // one does not already exist for the lanes we're currently rendering (which\n  // acts like a \"thread ID\" here).\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n  // Its effect list is no longer valid.\n  sourceFiber.firstEffect = sourceFiber.lastEffect = null;\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    // This is a wakeable.\n    const wakeable: Wakeable = (value: any);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentName(sourceFiber.type) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markComponentSuspended(sourceFiber, wakeable);\n    }\n\n    if ((sourceFiber.mode & BlockingMode) === NoMode) {\n      // Reset the memoizedState to what it was before we attempted\n      // to render it.\n      const currentSource = sourceFiber.alternate;\n      if (currentSource) {\n        sourceFiber.updateQueue = currentSource.updateQueue;\n        sourceFiber.memoizedState = currentSource.memoizedState;\n        sourceFiber.lanes = currentSource.lanes;\n      } else {\n        sourceFiber.updateQueue = null;\n        sourceFiber.memoizedState = null;\n      }\n    }\n\n    const hasInvisibleParentBoundary = hasSuspenseContext(\n      suspenseStackCursor.current,\n      (InvisibleParentSuspenseContext: SuspenseContext),\n    );\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    let workInProgress = returnFiber;\n    do {\n      if (\n        workInProgress.tag === SuspenseComponent &&\n        shouldCaptureSuspense(workInProgress, hasInvisibleParentBoundary)\n      ) {\n        // Found the nearest boundary.\n\n        // Stash the promise on the boundary fiber. If the boundary times out, we'll\n        // attach another listener to flip the boundary back to its normal state.\n        const wakeables: Set<Wakeable> = (workInProgress.updateQueue: any);\n        if (wakeables === null) {\n          const updateQueue = (new Set(): any);\n          updateQueue.add(wakeable);\n          workInProgress.updateQueue = updateQueue;\n        } else {\n          wakeables.add(wakeable);\n        }\n\n        // If the boundary is outside of blocking mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. In the commit phase, we'll schedule a\n        // subsequent synchronous update to re-render the Suspense.\n        //\n        // Note: It doesn't matter whether the component that suspended was\n        // inside a blocking mode tree. If the Suspense is outside of it, we\n        // should *not* suspend the commit.\n        if ((workInProgress.mode & BlockingMode) === NoMode) {\n          workInProgress.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n          // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (sourceFiber.tag === ClassComponent) {\n            const currentSourceFiber = sourceFiber.alternate;\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              const update = createUpdate(NoTimestamp, SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update);\n            }\n          }\n\n          // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n\n          // Exit without suspending.\n          return;\n        }\n\n        // Confirmed that the boundary is in a concurrent mode tree. Continue\n        // with the normal suspend path.\n        //\n        // After this we'll use a set of heuristics to determine whether this\n        // render pass will run to completion or restart or \"suspend\" the commit.\n        // The actual logic for this is spread out in different places.\n        //\n        // This first principle is that if we're going to suspend when we complete\n        // a root, then we should also restart if we get an update or ping that\n        // might unsuspend it, and vice versa. The only reason to suspend is\n        // because you think you might want to restart before committing. However,\n        // it doesn't make sense to restart only while in the period we're suspended.\n        //\n        // Restarting too aggressively is also not good because it starves out any\n        // intermediate loading state. So we use heuristics to determine when.\n\n        // Suspense Heuristics\n        //\n        // If nothing threw a Promise or all the same fallbacks are already showing,\n        // then don't suspend/restart.\n        //\n        // If this is an initial render of a new tree of Suspense boundaries and\n        // those trigger a fallback, then don't suspend/restart. We want to ensure\n        // that we can show the initial loading state as quickly as possible.\n        //\n        // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n        // a fallback, then we should always suspend/restart. Transitions apply\n        // to this case. If none is defined, JND is used instead.\n        //\n        // If we're already showing a fallback and it gets \"retried\", allowing us to show\n        // another level, but there's still an inner boundary that would show a fallback,\n        // then we suspend/restart for 500ms since the last time we showed a fallback\n        // anywhere in the tree. This effectively throttles progressive loading into a\n        // consistent train of commits. This also gives us an opportunity to restart to\n        // get to the completed state slightly earlier.\n        //\n        // If there's ambiguity due to batching it's resolved in preference of:\n        // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n        //\n        // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n        // ensure that new initial loading states can commit as soon as possible.\n\n        attachPingListener(root, wakeable, rootRenderLanes);\n\n        workInProgress.flags |= ShouldCapture;\n        workInProgress.lanes = rootRenderLanes;\n\n        return;\n      }\n      // This boundary already captured during this render. Continue to the next\n      // boundary.\n      workInProgress = workInProgress.return;\n    } while (workInProgress !== null);\n    // No boundary was found. Fallthrough to error mode.\n    // TODO: Use invariant so the message is stripped in prod?\n    value = new Error(\n      (getComponentName(sourceFiber.type) || 'A React component') +\n        ' suspended while rendering, but no fallback UI was specified.\\n' +\n        '\\n' +\n        'Add a <Suspense fallback=...> component higher in the tree to ' +\n        'provide a loading indicator or placeholder to display.',\n    );\n  }\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  renderDidError();\n\n  value = createCapturedValue(value, sourceFiber);\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\n\nimport {unstable_wrap as Schedule_tracing_wrap} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  enableSuspenseCallback,\n  enableScopeAPI,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  Snapshot,\n  Update,\n} from './ReactFiberFlags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\n\nimport {onCommitUnmount} from './ReactFiberDevToolsHook.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ProfileMode} from './ReactTypeOfMode';\nimport {commitUpdateQueue} from './ReactUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  unmountFundamentalComponent,\n  updateFundamentalComponent,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveHookEffectMount,\n  enqueuePendingPassiveHookEffectUnmount,\n  enqueuePendingPassiveProfilerEffect,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(current: Fiber, instance: any) {\n  if (__DEV__) {\n    invokeGuardedCallback(\n      null,\n      callComponentWillUnmountWithTimer,\n      null,\n      current,\n      instance,\n    );\n    if (hasCaughtError()) {\n      const unmountError = clearCaughtError();\n      captureCommitPhaseError(current, unmountError);\n    }\n  } else {\n    try {\n      callComponentWillUnmountWithTimer(current, instance);\n    } catch (unmountError) {\n      captureCommitPhaseError(current, unmountError);\n    }\n  }\n}\n\nfunction safelyDetachRef(current: Fiber) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      if (__DEV__) {\n        invokeGuardedCallback(null, ref, null, null);\n        if (hasCaughtError()) {\n          const refError = clearCaughtError();\n          captureCommitPhaseError(current, refError);\n        }\n      } else {\n        try {\n          ref(null);\n        } catch (refError) {\n          captureCommitPhaseError(current, refError);\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(current: Fiber, destroy: () => void) {\n  if (__DEV__) {\n    invokeGuardedCallback(null, destroy, null);\n    if (hasCaughtError()) {\n      const error = clearCaughtError();\n      captureCommitPhaseError(current, error);\n    }\n  } else {\n    try {\n      destroy();\n    } catch (error) {\n      captureCommitPhaseError(current, error);\n    }\n  }\n}\n\nfunction commitBeforeMutationLifeCycles(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n    case Block: {\n      return;\n    }\n    case ClassComponent: {\n      if (finishedWork.flags & Snapshot) {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentName(finishedWork.type),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n      }\n      return;\n    }\n    case HostRoot: {\n      if (supportsMutation) {\n        if (finishedWork.flags & Snapshot) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n      }\n      return;\n    }\n    case HostComponent:\n    case HostText:\n    case HostPortal:\n    case IncompleteClassComponent:\n      // Nothing to do for these component types\n      return;\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction commitHookEffectListUnmount(tag: number, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          destroy();\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(tag: number, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Mount\n        const create = effect.create;\n        effect.destroy = create();\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                'useEffect(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              'An effect function must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction schedulePassiveEffects(finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      const {next, tag} = effect;\n      if (\n        (tag & HookPassive) !== NoHookEffect &&\n        (tag & HookHasEffect) !== NoHookEffect\n      ) {\n        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);\n        enqueuePendingPassiveHookEffectMount(finishedWork, effect);\n      }\n      effect = next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          if (typeof onPostCommit === 'function') {\n            if (enableSchedulerTracing) {\n              onPostCommit(\n                id,\n                finishedWork.alternate === null ? 'mount' : 'update',\n                passiveEffectDuration,\n                commitTime,\n                finishedRoot.memoizedInteractions,\n              );\n            } else {\n              onPostCommit(\n                id,\n                finishedWork.alternate === null ? 'mount' : 'update',\n                passiveEffectDuration,\n                commitTime,\n              );\n            }\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          while (parentFiber !== null) {\n            if (parentFiber.tag === Profiler) {\n              const parentStateNode = parentFiber.stateNode;\n              parentStateNode.passiveEffectDuration += passiveEffectDuration;\n              break;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitLifeCycles(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n    case Block: {\n      // At this point layout effects have already been destroyed (during mutation phase).\n      // This is done to prevent sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n      }\n\n      schedulePassiveEffects(finishedWork);\n      return;\n    }\n    case ClassComponent: {\n      const instance = finishedWork.stateNode;\n      if (finishedWork.flags & Update) {\n        if (current === null) {\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'componentDidMount. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'componentDidMount. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              instance.componentDidMount();\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            instance.componentDidMount();\n          }\n        } else {\n          const prevProps =\n            finishedWork.elementType === finishedWork.type\n              ? current.memoizedProps\n              : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n          const prevState = current.memoizedState;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'componentDidUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'componentDidUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              instance.componentDidUpdate(\n                prevProps,\n                prevState,\n                instance.__reactInternalSnapshotBeforeUpdate,\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            instance.componentDidUpdate(\n              prevProps,\n              prevState,\n              instance.__reactInternalSnapshotBeforeUpdate,\n            );\n          }\n        }\n      }\n\n      // TODO: I think this is now always non-null by the time it reaches the\n      // commit phase. Consider removing the type check.\n      const updateQueue: UpdateQueue<\n        *,\n      > | null = (finishedWork.updateQueue: any);\n      if (updateQueue !== null) {\n        if (__DEV__) {\n          if (\n            finishedWork.type === finishedWork.elementType &&\n            !didWarnAboutReassigningProps\n          ) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              console.error(\n                'Expected %s props to match memoized props before ' +\n                  'processing the update queue. ' +\n                  'This might either be because of a bug in React, or because ' +\n                  'a component reassigns its own `this.props`. ' +\n                  'Please file an issue.',\n                getComponentName(finishedWork.type) || 'instance',\n              );\n            }\n            if (instance.state !== finishedWork.memoizedState) {\n              console.error(\n                'Expected %s state to match memoized state before ' +\n                  'processing the update queue. ' +\n                  'This might either be because of a bug in React, or because ' +\n                  'a component reassigns its own `this.state`. ' +\n                  'Please file an issue.',\n                getComponentName(finishedWork.type) || 'instance',\n              );\n            }\n          }\n        }\n        // We could update instance props and state here,\n        // but instead we rely on them being set during last render.\n        // TODO: revisit this when we implement resuming.\n        commitUpdateQueue(finishedWork, updateQueue, instance);\n      }\n      return;\n    }\n    case HostRoot: {\n      // TODO: I think this is now always non-null by the time it reaches the\n      // commit phase. Consider removing the type check.\n      const updateQueue: UpdateQueue<\n        *,\n      > | null = (finishedWork.updateQueue: any);\n      if (updateQueue !== null) {\n        let instance = null;\n        if (finishedWork.child !== null) {\n          switch (finishedWork.child.tag) {\n            case HostComponent:\n              instance = getPublicInstance(finishedWork.child.stateNode);\n              break;\n            case ClassComponent:\n              instance = finishedWork.child.stateNode;\n              break;\n          }\n        }\n        commitUpdateQueue(finishedWork, updateQueue, instance);\n      }\n      return;\n    }\n    case HostComponent: {\n      const instance: Instance = finishedWork.stateNode;\n\n      // Renderers may schedule work to be done after host components are mounted\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n      // These effects should only be committed when components are first mounted,\n      // aka when there is no current/alternate.\n      if (current === null && finishedWork.flags & Update) {\n        const type = finishedWork.type;\n        const props = finishedWork.memoizedProps;\n        commitMount(instance, type, props, finishedWork);\n      }\n\n      return;\n    }\n    case HostText: {\n      // We have no life-cycles associated with text.\n      return;\n    }\n    case HostPortal: {\n      // We have no life-cycles associated with portals.\n      return;\n    }\n    case Profiler: {\n      if (enableProfilerTimer) {\n        const {onCommit, onRender} = finishedWork.memoizedProps;\n        const {effectDuration} = finishedWork.stateNode;\n\n        const commitTime = getCommitTime();\n\n        if (typeof onRender === 'function') {\n          if (enableSchedulerTracing) {\n            onRender(\n              finishedWork.memoizedProps.id,\n              current === null ? 'mount' : 'update',\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n              finishedRoot.memoizedInteractions,\n            );\n          } else {\n            onRender(\n              finishedWork.memoizedProps.id,\n              current === null ? 'mount' : 'update',\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n            );\n          }\n        }\n\n        if (enableProfilerCommitHooks) {\n          if (typeof onCommit === 'function') {\n            if (enableSchedulerTracing) {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                current === null ? 'mount' : 'update',\n                effectDuration,\n                commitTime,\n                finishedRoot.memoizedInteractions,\n              );\n            } else {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                current === null ? 'mount' : 'update',\n                effectDuration,\n                commitTime,\n              );\n            }\n          }\n\n          // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n          // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n          // because the effect is also where times bubble to parent Profilers.\n          enqueuePendingPassiveProfilerEffect(finishedWork);\n\n          // Propagate layout effect durations to the next nearest Profiler ancestor.\n          // Do not reset these values until the next render so DevTools has a chance to read them first.\n          let parentFiber = finishedWork.return;\n          while (parentFiber !== null) {\n            if (parentFiber.tag === Profiler) {\n              const parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += effectDuration;\n              break;\n            }\n            parentFiber = parentFiber.return;\n          }\n        }\n      }\n      return;\n    }\n    case SuspenseComponent: {\n      commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n      return;\n    }\n    case SuspenseListComponent:\n    case IncompleteClassComponent:\n    case FundamentalComponent:\n    case ScopeComponent:\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      return;\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        const instance = node.stateNode;\n        if (isHidden) {\n          hideInstance(instance);\n        } else {\n          unhideInstance(node.stateNode, node.memoizedProps);\n        }\n      } else if (node.tag === HostText) {\n        const instance = node.stateNode;\n        if (isHidden) {\n          hideTextInstance(instance);\n        } else {\n          unhideTextInstance(instance, node.memoizedProps);\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden. Don't search\n        // any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      ref(instanceToUse);\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentName(finishedWork.type),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      currentRef(null);\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\n// User-originating errors (lifecycles and refs) should not interrupt\n// deletion, so don't let them throw. Host-originating errors should\n// interrupt deletion, so it's okay\nfunction commitUnmount(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  onCommitUnmount(current);\n\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n    case Block: {\n      const updateQueue: FunctionComponentUpdateQueue | null = (current.updateQueue: any);\n      if (updateQueue !== null) {\n        const lastEffect = updateQueue.lastEffect;\n        if (lastEffect !== null) {\n          const firstEffect = lastEffect.next;\n\n          let effect = firstEffect;\n          do {\n            const {destroy, tag} = effect;\n            if (destroy !== undefined) {\n              if ((tag & HookPassive) !== NoHookEffect) {\n                enqueuePendingPassiveHookEffectUnmount(current, effect);\n              } else {\n                if (\n                  enableProfilerTimer &&\n                  enableProfilerCommitHooks &&\n                  current.mode & ProfileMode\n                ) {\n                  startLayoutEffectTimer();\n                  safelyCallDestroy(current, destroy);\n                  recordLayoutEffectDuration(current);\n                } else {\n                  safelyCallDestroy(current, destroy);\n                }\n              }\n            }\n            effect = effect.next;\n          } while (effect !== firstEffect);\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      safelyDetachRef(current);\n      const instance = current.stateNode;\n      if (typeof instance.componentWillUnmount === 'function') {\n        safelyCallComponentWillUnmount(current, instance);\n      }\n      return;\n    }\n    case HostComponent: {\n      safelyDetachRef(current);\n      return;\n    }\n    case HostPortal: {\n      // TODO: this is recursive.\n      // We are also not using this parent because\n      // the portal will get pushed immediately.\n      if (supportsMutation) {\n        unmountHostComponents(finishedRoot, current, renderPriorityLevel);\n      } else if (supportsPersistence) {\n        emptyPortalContainer(current);\n      }\n      return;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalInstance = current.stateNode;\n        if (fundamentalInstance !== null) {\n          unmountFundamentalComponent(fundamentalInstance);\n          current.stateNode = null;\n        }\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((current.stateNode: SuspenseInstance));\n          }\n        }\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(current);\n      }\n      return;\n    }\n  }\n}\n\nfunction commitNestedUnmounts(\n  finishedRoot: FiberRoot,\n  root: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  // While we're inside a removed host node we don't want to call\n  // removeChild on the inner nodes because they're removed by the top\n  // call anyway. We also want to call componentWillUnmount on all\n  // composites before this host node is removed from the tree. Therefore\n  // we do an inner loop while we're still inside the host node.\n  let node: Fiber = root;\n  while (true) {\n    commitUnmount(finishedRoot, node, renderPriorityLevel);\n    // Visit children because they may contain more composite or host nodes.\n    // Skip portals because commitUnmount() currently visits them recursively.\n    if (\n      node.child !== null &&\n      // If we use mutation we drill down into portals using commitUnmount above.\n      // If we don't use mutation we drill down into portals here instead.\n      (!supportsMutation || node.tag !== HostPortal)\n    ) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === root) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === root) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointers to disconnect it from the tree. Ideally, we\n  // should clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child. This child\n  // itself will be GC:ed when the parent updates the next time.\n  // Note: we cannot null out sibling here, otherwise it can cause issues\n  // with findDOMNode and how it requires the sibling field to carry out\n  // traversal in a later effect. See PR #16820. We now clear the sibling\n  // field after effects, see: detachFiberAfterEffects.\n  //\n  // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.\n  // It may be required if the current component is an error boundary,\n  // and one of its descendants throws while unmounting a passive effect.\n  fiber.alternate = null;\n  fiber.child = null;\n  fiber.dependencies = null;\n  fiber.firstEffect = null;\n  fiber.lastEffect = null;\n  fiber.memoizedProps = null;\n  fiber.memoizedState = null;\n  fiber.pendingProps = null;\n  fiber.return = null;\n  fiber.updateQueue = null;\n  if (__DEV__) {\n    fiber._debugOwner = null;\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction commitContainer(finishedWork: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case ClassComponent:\n    case HostComponent:\n    case HostText:\n    case FundamentalComponent: {\n      return;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const portalOrRoot: {\n        containerInfo: Container,\n        pendingChildren: ChildSet,\n        ...\n      } = finishedWork.stateNode;\n      const {containerInfo, pendingChildren} = portalOrRoot;\n      replaceContainerChildren(containerInfo, pendingChildren);\n      return;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n  invariant(\n    false,\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  let parent;\n  let isContainer;\n  const parentStateNode = parentFiber.stateNode;\n  switch (parentFiber.tag) {\n    case HostComponent:\n      parent = parentStateNode;\n      isContainer = false;\n      break;\n    case HostRoot:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    case HostPortal:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    case FundamentalComponent:\n      if (enableFundamentalAPI) {\n        parent = parentStateNode.instance;\n        isContainer = false;\n      }\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      invariant(\n        false,\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n  if (parentFiber.flags & ContentReset) {\n    // Reset the text content of the parent before doing any insertions\n    resetTextContent(parent);\n    // Clear ContentReset from the effect tag\n    parentFiber.flags &= ~ContentReset;\n  }\n\n  const before = getHostSibling(finishedWork);\n  // We only have the top Fiber that was inserted but we need to recurse down its\n  // children to find all the terminal nodes.\n  if (isContainer) {\n    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n  } else {\n    insertOrAppendPlacementNode(finishedWork, before, parent);\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost || (enableFundamentalAPI && tag === FundamentalComponent)) {\n    const stateNode = isHost ? node.stateNode : node.stateNode.instance;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost || (enableFundamentalAPI && tag === FundamentalComponent)) {\n    const stateNode = isHost ? node.stateNode : node.stateNode.instance;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction unmountHostComponents(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  // We only have the top Fiber that was deleted but we need to recurse down its\n  // children to find all the terminal nodes.\n  let node: Fiber = current;\n\n  // Each iteration, currentParent is populated with node's host parent if not\n  // currentParentIsValid.\n  let currentParentIsValid = false;\n\n  // Note: these two variables *must* always be updated together.\n  let currentParent;\n  let currentParentIsContainer;\n\n  while (true) {\n    if (!currentParentIsValid) {\n      let parent = node.return;\n      findParent: while (true) {\n        invariant(\n          parent !== null,\n          'Expected to find a host parent. This error is likely caused by ' +\n            'a bug in React. Please file an issue.',\n        );\n        const parentStateNode = parent.stateNode;\n        switch (parent.tag) {\n          case HostComponent:\n            currentParent = parentStateNode;\n            currentParentIsContainer = false;\n            break findParent;\n          case HostRoot:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n          case HostPortal:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n          case FundamentalComponent:\n            if (enableFundamentalAPI) {\n              currentParent = parentStateNode.instance;\n              currentParentIsContainer = false;\n            }\n        }\n        parent = parent.return;\n      }\n      currentParentIsValid = true;\n    }\n\n    if (node.tag === HostComponent || node.tag === HostText) {\n      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);\n      // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n      if (currentParentIsContainer) {\n        removeChildFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: Instance | TextInstance),\n        );\n      } else {\n        removeChild(\n          ((currentParent: any): Instance),\n          (node.stateNode: Instance | TextInstance),\n        );\n      }\n      // Don't visit children because we already visited them.\n    } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n      const fundamentalNode = node.stateNode.instance;\n      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);\n      // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n      if (currentParentIsContainer) {\n        removeChildFromContainer(\n          ((currentParent: any): Container),\n          (fundamentalNode: Instance),\n        );\n      } else {\n        removeChild(\n          ((currentParent: any): Instance),\n          (fundamentalNode: Instance),\n        );\n      }\n    } else if (\n      enableSuspenseServerRenderer &&\n      node.tag === DehydratedFragment\n    ) {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((node.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (currentParentIsContainer) {\n        clearSuspenseBoundaryFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: SuspenseInstance),\n        );\n      } else {\n        clearSuspenseBoundary(\n          ((currentParent: any): Instance),\n          (node.stateNode: SuspenseInstance),\n        );\n      }\n    } else if (node.tag === HostPortal) {\n      if (node.child !== null) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        currentParentIsContainer = true;\n        // Visit children because portals might contain host components.\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    } else {\n      commitUnmount(finishedRoot, node, renderPriorityLevel);\n      // Visit children because we may find more host components below.\n      if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    }\n    if (node === current) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === current) {\n        return;\n      }\n      node = node.return;\n      if (node.tag === HostPortal) {\n        // When we go out of the portal, we need to restore the parent.\n        // Since we don't keep a stack of them, we will search for it.\n        currentParentIsValid = false;\n      }\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction commitDeletion(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  if (supportsMutation) {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(finishedRoot, current, renderPriorityLevel);\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitNestedUnmounts(finishedRoot, current, renderPriorityLevel);\n  }\n  const alternate = current.alternate;\n  detachFiberMutation(current);\n  if (alternate !== null) {\n    detachFiberMutation(alternate);\n  }\n}\n\nfunction commitWork(current: Fiber | null, finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent:\n      case Block: {\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n            );\n          } finally {\n            recordLayoutEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n        }\n        return;\n      }\n      case Profiler: {\n        return;\n      }\n      case SuspenseComponent: {\n        commitSuspenseComponent(finishedWork);\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case SuspenseListComponent: {\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case HostRoot: {\n        if (supportsHydration) {\n          const root: FiberRoot = finishedWork.stateNode;\n          if (root.hydrate) {\n            // We've just hydrated. No need to hydrate again.\n            root.hydrate = false;\n            commitHydratedContainer(root.containerInfo);\n          }\n        }\n        break;\n      }\n      case OffscreenComponent:\n      case LegacyHiddenComponent: {\n        return;\n      }\n    }\n\n    commitContainer(finishedWork);\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n    case Block: {\n      // Layout effects are destroyed during the mutation phase so that all\n      // destroy functions for all fibers are called before any create functions.\n      // This prevents sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n      }\n      return;\n    }\n    case ClassComponent: {\n      return;\n    }\n    case HostComponent: {\n      const instance: Instance = finishedWork.stateNode;\n      if (instance != null) {\n        // Commit the work prepared earlier.\n        const newProps = finishedWork.memoizedProps;\n        // For hydration we reuse the update path but we treat the oldProps\n        // as the newProps. The updatePayload will contain the real change in\n        // this case.\n        const oldProps = current !== null ? current.memoizedProps : newProps;\n        const type = finishedWork.type;\n        // TODO: Type the updateQueue to be specific to host components.\n        const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n        finishedWork.updateQueue = null;\n        if (updatePayload !== null) {\n          commitUpdate(\n            instance,\n            updatePayload,\n            type,\n            oldProps,\n            newProps,\n            finishedWork,\n          );\n        }\n      }\n      return;\n    }\n    case HostText: {\n      invariant(\n        finishedWork.stateNode !== null,\n        'This should have a text node initialized. This error is likely ' +\n          'caused by a bug in React. Please file an issue.',\n      );\n      const textInstance: TextInstance = finishedWork.stateNode;\n      const newText: string = finishedWork.memoizedProps;\n      // For hydration we reuse the update path but we treat the oldProps\n      // as the newProps. The updatePayload will contain the real change in\n      // this case.\n      const oldText: string =\n        current !== null ? current.memoizedProps : newText;\n      commitTextUpdate(textInstance, oldText, newText);\n      return;\n    }\n    case HostRoot: {\n      if (supportsHydration) {\n        const root: FiberRoot = finishedWork.stateNode;\n        if (root.hydrate) {\n          // We've just hydrated. No need to hydrate again.\n          root.hydrate = false;\n          commitHydratedContainer(root.containerInfo);\n        }\n      }\n      return;\n    }\n    case Profiler: {\n      return;\n    }\n    case SuspenseComponent: {\n      commitSuspenseComponent(finishedWork);\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case SuspenseListComponent: {\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case IncompleteClassComponent: {\n      return;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalInstance = finishedWork.stateNode;\n        updateFundamentalComponent(fundamentalInstance);\n        return;\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        const scopeInstance = finishedWork.stateNode;\n        prepareScopeUpdate(scopeInstance, finishedWork);\n        return;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      const newState: OffscreenState | null = finishedWork.memoizedState;\n      const isHidden = newState !== null;\n      hideOrUnhideAllChildren(finishedWork, isHidden);\n      return;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction commitSuspenseComponent(finishedWork: Fiber) {\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n\n  if (newState !== null) {\n    markCommitTimeOfFallback();\n\n    if (supportsMutation) {\n      // Hide the Offscreen component that contains the primary children. TODO:\n      // Ideally, this effect would have been scheduled on the Offscreen fiber\n      // itself. That's how unhiding works: the Offscreen component schedules an\n      // effect on itself. However, in this case, the component didn't complete,\n      // so the fiber was never added to the effect list in the normal path. We\n      // could have appended it to the effect list in the Suspense component's\n      // second pass, but doing it this way is less complicated. This would be\n      // simpler if we got rid of the effect list and traversed the tree, like\n      // we're planning to do.\n      const primaryChildParent: Fiber = (finishedWork.child: any);\n      hideOrUnhideAllChildren(primaryChildParent, true);\n    }\n  }\n\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n          if (enableSuspenseCallback) {\n            const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n            if (hydrationCallbacks !== null) {\n              const onHydrated = hydrationCallbacks.onHydrated;\n              if (onHydrated) {\n                onHydrated(suspenseInstance);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork: Fiber) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    let retryCache = finishedWork.stateNode;\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n    wakeables.forEach(wakeable => {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      let retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n      if (!retryCache.has(wakeable)) {\n        if (enableSchedulerTracing) {\n          if (wakeable.__reactDoNotTraceInteractions !== true) {\n            retry = Schedule_tracing_wrap(retry);\n          }\n        }\n        retryCache.add(wakeable);\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nfunction commitResetTextContent(current: Fiber) {\n  if (!supportsMutation) {\n    return;\n  }\n  resetTextContent(current.stateNode);\n}\n\nexport {\n  commitBeforeMutationLifeCycles,\n  commitResetTextContent,\n  commitPlacement,\n  commitDeletion,\n  commitWork,\n  commitLifeCycles,\n  commitAttachRef,\n  commitDetachRef,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Thenable, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {Interaction} from 'scheduler/src/Tracing';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Effect as HookEffect} from './ReactFiberHooks.old';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  enableSuspenseServerRenderer,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableSchedulerTracing,\n  warnAboutUnmockedScheduler,\n  deferRenderPhaseUpdateToNextBatch,\n  decoupleUpdatePriorityFromScheduler,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableScopeAPI,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport invariant from 'shared/invariant';\n\nimport {\n  scheduleCallback,\n  cancelCallback,\n  getCurrentPriorityLevel,\n  runWithPriority,\n  shouldYield,\n  requestPaint,\n  now,\n  NoPriority as NoSchedulerPriority,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  flushSyncCallbackQueue,\n  scheduleSyncCallback,\n} from './SchedulerWithReactIntegration.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\nimport {\n  markCommitStarted,\n  markCommitStopped,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n} from './SchedulingProfiler';\n\n// The scheduler is imported here *only* to detect whether it's been mocked\nimport * as Scheduler from 'scheduler';\n\nimport {__interactionsRef, __subscriberRef} from 'scheduler/tracing';\n\nimport {\n  prepareForCommit,\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  warnsIfNotActing,\n  beforeActiveInstanceBlur,\n  afterActiveInstanceBlur,\n  clearContainer,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {\n  NoMode,\n  StrictMode,\n  ProfileMode,\n  BlockingMode,\n  ConcurrentMode,\n} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  ScopeComponent,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Update,\n  PlacementAndUpdate,\n  Deletion,\n  Ref,\n  ContentReset,\n  Snapshot,\n  Callback,\n  Passive,\n  PassiveUnmountPendingDev,\n  Incomplete,\n  HostEffectMask,\n  Hydrating,\n  HydratingAndUpdate,\n} from './ReactFiberFlags';\nimport {\n  NoLanePriority,\n  SyncLanePriority,\n  SyncBatchedLanePriority,\n  InputDiscreteLanePriority,\n  DefaultLanePriority,\n  NoLanes,\n  NoLane,\n  SyncLane,\n  SyncBatchedLane,\n  OffscreenLane,\n  NoTimestamp,\n  findUpdateLane,\n  findTransitionLane,\n  findRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  hasDiscreteLanes,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  getNextLanes,\n  returnNextLanesPriority,\n  setCurrentUpdateLanePriority,\n  getCurrentUpdateLanePriority,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootExpired,\n  markDiscreteUpdatesExpired,\n  markRootFinished,\n  schedulerPriorityToLanePriority,\n  lanePriorityToSchedulerPriority,\n} from './ReactFiberLane';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationLifeCycles as commitBeforeMutationEffectOnFiber,\n  commitLifeCycles as commitLayoutEffectOnFiber,\n  commitPlacement,\n  commitWork,\n  commitDeletion,\n  commitDetachRef,\n  commitAttachRef,\n  commitPassiveEffectDurations,\n  commitResetTextContent,\n  isSuspenseBoundaryBeingHidden,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  push as pushToStack,\n  pop as popFromStack,\n  createCursor,\n} from './ReactFiberStack.old';\n\nimport {\n  recordCommitTime,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentName from 'shared/getComponentName';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {onCommitRoot as onCommitRootDevTools} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\n\n// Used by `act`\nimport enqueueTask from 'shared/enqueueTask';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  IsSomeRendererActing,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b0000000;\nconst BatchedContext = /*               */ 0b0000001;\nconst EventContext = /*                 */ 0b0000010;\nconst DiscreteEventContext = /*         */ 0b0000100;\nconst LegacyUnbatchedContext = /*       */ 0b0001000;\nconst RenderContext = /*                */ 0b0010000;\nconst CommitContext = /*                */ 0b0100000;\nexport const RetryAfterError = /*       */ 0b1000000;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5;\nconst RootIncomplete = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\nlet subtreeRenderLanes: Lanes = NoLanes;\nconst subtreeRenderLanesCursor: StackCursor<Lanes> = createCursor(NoLanes);\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootIncomplete;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\nlet workInProgressRootIncludedLanes: Lanes = NoLanes;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n\nlet mostRecentlyUpdatedRoot: FiberRoot | null = null;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet nextEffect: Fiber | null = null;\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsRenderPriority: ReactPriorityLevel = NoSchedulerPriority;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveHookEffectsMount: Array<HookEffect | Fiber> = [];\nlet pendingPassiveHookEffectsUnmount: Array<HookEffect | Fiber> = [];\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\n\nlet rootsWithPendingDiscreteUpdates: Set<FiberRoot> | null = null;\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\n\n// Marks the need to reschedule pending interactions at these lanes\n// during the commit phase. This enables them to be traced across components\n// that spawn new work during render. E.g. hidden boundaries, suspended SSR\n// hydration or SuspenseList.\n// TODO: Can use a bitmask instead of an array\nlet spawnedWorkDuringRender: null | Array<Lane | Lanes> = null;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventWipLanes: Lanes = NoLanes;\nlet currentEventPendingLanes: Lanes = NoLanes;\n\n// Dev only flag that tracks if passive effects are currently being flushed.\n// We warn about state updates for unmounted components differently in this case.\nlet isFlushingPassiveEffects = false;\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & BlockingMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if ((mode & ConcurrentMode) === NoMode) {\n    return getCurrentPriorityLevel() === ImmediateSchedulerPriority\n      ? (SyncLane: Lane)\n      : (SyncBatchedLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (expiration time) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  // The algorithm for assigning an update to a lane should be stable for all\n  // updates at the same priority within the same event. To do this, the inputs\n  // to the algorithm must be the same. For example, we use the `renderLanes`\n  // to avoid choosing a lane that is already in the middle of rendering.\n  //\n  // However, the \"included\" lanes could be mutated in between updates in the\n  // same event, like if you perform an update inside `flushSync`. Or any other\n  // code path that might call `prepareFreshStack`.\n  //\n  // The trick we use is to cache the first of each of these inputs within an\n  // event. Then reset the cached values once we can be sure the event is over.\n  // Our heuristic for that is whenever we enter a concurrent work loop.\n  //\n  // We'll do the same for `currentEventPendingLanes` below.\n  if (currentEventWipLanes === NoLanes) {\n    currentEventWipLanes = workInProgressRootIncludedLanes;\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (currentEventPendingLanes !== NoLanes) {\n      currentEventPendingLanes =\n        mostRecentlyUpdatedRoot !== null\n          ? mostRecentlyUpdatedRoot.pendingLanes\n          : NoLanes;\n    }\n    return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);\n  }\n\n  // TODO: Remove this dependency on the Scheduler priority.\n  // To do that, we're replacing it with an update lane priority.\n  const schedulerPriority = getCurrentPriorityLevel();\n\n  // The old behavior was using the priority level of the Scheduler.\n  // This couples React to the Scheduler internals, so we're replacing it\n  // with the currentUpdateLanePriority above. As an example of how this\n  // could be problematic, if we're not inside `Scheduler.runWithPriority`,\n  // then we'll get the priority of the current running Scheduler task,\n  // which is probably not what we want.\n  let lane;\n  if (\n    // TODO: Temporary. We're removing the concept of discrete updates.\n    (executionContext & DiscreteEventContext) !== NoContext &&\n    schedulerPriority === UserBlockingSchedulerPriority\n  ) {\n    lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);\n  } else {\n    const schedulerLanePriority = schedulerPriorityToLanePriority(\n      schedulerPriority,\n    );\n\n    if (decoupleUpdatePriorityFromScheduler) {\n      // In the new strategy, we will track the current update lane priority\n      // inside React and use that priority to select a lane for this update.\n      // For now, we're just logging when they're different so we can assess.\n      const currentUpdateLanePriority = getCurrentUpdateLanePriority();\n\n      if (\n        schedulerLanePriority !== currentUpdateLanePriority &&\n        currentUpdateLanePriority !== NoLanePriority\n      ) {\n        if (__DEV__) {\n          console.error(\n            'Expected current scheduler lane priority %s to match current update lane priority %s',\n            schedulerLanePriority,\n            currentUpdateLanePriority,\n          );\n        }\n      }\n    }\n\n    lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);\n  }\n\n  return lane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & BlockingMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if ((mode & ConcurrentMode) === NoMode) {\n    return getCurrentPriorityLevel() === ImmediateSchedulerPriority\n      ? (SyncLane: Lane)\n      : (SyncBatchedLane: Lane);\n  }\n\n  // See `requestUpdateLane` for explanation of `currentEventWipLanes`\n  if (currentEventWipLanes === NoLanes) {\n    currentEventWipLanes = workInProgressRootIncludedLanes;\n  }\n  return findRetryLane(currentEventWipLanes);\n}\n\nexport function scheduleUpdateOnFiber(\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n) {\n  checkForNestedUpdates();\n  warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n  const root = markUpdateLaneFromFiberToRoot(fiber, lane);\n  if (root === null) {\n    warnAboutUpdateOnUnmountedFiberInDEV(fiber);\n    return null;\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (root === workInProgressRoot) {\n    // Received an update to a tree that's in the middle of rendering. Mark\n    // that there was an interleaved update work on this root. Unless the\n    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n    // phase update. In that case, we don't treat render phase updates as if\n    // they were interleaved, for backwards compat reasons.\n    if (\n      deferRenderPhaseUpdateToNextBatch ||\n      (executionContext & RenderContext) === NoContext\n    ) {\n      workInProgressRootUpdatedLanes = mergeLanes(\n        workInProgressRootUpdatedLanes,\n        lane,\n      );\n    }\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n      // The root already suspended with a delay, which means this render\n      // definitely won't finish. Since we have a new update, let's mark it as\n      // suspended now, right before marking the incoming update. This has the\n      // effect of interrupting the current render and switching to the update.\n      // TODO: Make sure this doesn't override pings that happen while we've\n      // already started rendering.\n      markRootSuspended(root, workInProgressRootRenderLanes);\n    }\n  }\n\n  // TODO: requestUpdateLanePriority also reads the priority. Pass the\n  // priority as an argument to that function and this one.\n  const priorityLevel = getCurrentPriorityLevel();\n\n  if (lane === SyncLane) {\n    if (\n      // Check if we're inside unbatchedUpdates\n      (executionContext & LegacyUnbatchedContext) !== NoContext &&\n      // Check if we're not already rendering\n      (executionContext & (RenderContext | CommitContext)) === NoContext\n    ) {\n      // Register pending interactions on the root to avoid losing traced interaction data.\n      schedulePendingInteractions(root, lane);\n\n      // This is a legacy edge case. The initial mount of a ReactDOM.render-ed\n      // root inside of batchedUpdates should be synchronous, but layout updates\n      // should be deferred until the end of the batch.\n      performSyncWorkOnRoot(root);\n    } else {\n      ensureRootIsScheduled(root, eventTime);\n      schedulePendingInteractions(root, lane);\n      if (executionContext === NoContext) {\n        // Flush the synchronous work now, unless we're already working or inside\n        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n        // scheduleCallbackForFiber to preserve the ability to schedule a callback\n        // without immediately flushing it. We only do this for user-initiated\n        // updates, to preserve historical behavior of legacy mode.\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    // Schedule a discrete update but only if it's not Sync.\n    if (\n      (executionContext & DiscreteEventContext) !== NoContext &&\n      // Only updates at user-blocking priority or greater are considered\n      // discrete, even inside a discrete event.\n      (priorityLevel === UserBlockingSchedulerPriority ||\n        priorityLevel === ImmediateSchedulerPriority)\n    ) {\n      // This is the result of a discrete event. Track the lowest priority\n      // discrete update per root so we can flush them early, if needed.\n      if (rootsWithPendingDiscreteUpdates === null) {\n        rootsWithPendingDiscreteUpdates = new Set([root]);\n      } else {\n        rootsWithPendingDiscreteUpdates.add(root);\n      }\n    }\n    // Schedule other updates after in case the callback is sync.\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, lane);\n  }\n\n  // We use this when assigning a lane for a transition inside\n  // `requestUpdateLane`. We assume it's the same as the root being updated,\n  // since in the common case of a single root app it probably is. If it's not\n  // the same root, then it's not a huge deal, we just might batch more stuff\n  // together more than necessary.\n  mostRecentlyUpdatedRoot = root;\n}\n\n// This is split into a separate function so we can mark a fiber with pending\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  if (__DEV__) {\n    if (\n      alternate === null &&\n      (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n  // Walk the parent path to the root and update the child expiration time.\n  let node = sourceFiber;\n  let parent = sourceFiber.return;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      if (__DEV__) {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    node = parent;\n    parent = parent.return;\n  }\n  if (node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  // This returns the priority level computed during the `getNextLanes` call.\n  const newCallbackPriority = returnNextLanesPriority();\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n      root.callbackNode = null;\n      root.callbackPriority = NoLanePriority;\n    }\n    return;\n  }\n\n  // Check if there's an existing task. We may be able to reuse it.\n  if (existingCallbackNode !== null) {\n    const existingCallbackPriority = root.callbackPriority;\n    if (existingCallbackPriority === newCallbackPriority) {\n      // The priority hasn't changed. We can reuse the existing task. Exit.\n      return;\n    }\n    // The priority changed. Cancel the existing callback. We'll schedule a new\n    // one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLanePriority) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    newCallbackNode = scheduleSyncCallback(\n      performSyncWorkOnRoot.bind(null, root),\n    );\n  } else if (newCallbackPriority === SyncBatchedLanePriority) {\n    newCallbackNode = scheduleCallback(\n      ImmediateSchedulerPriority,\n      performSyncWorkOnRoot.bind(null, root),\n    );\n  } else {\n    const schedulerPriorityLevel = lanePriorityToSchedulerPriority(\n      newCallbackPriority,\n    );\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root) {\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventWipLanes = NoLanes;\n  currentEventPendingLanes = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next expiration time to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  let exitStatus = renderRootConcurrent(root, lanes);\n\n  if (\n    includesSomeLane(\n      workInProgressRootIncludedLanes,\n      workInProgressRootUpdatedLanes,\n    )\n  ) {\n    // The render included lanes that were updated during the render phase.\n    // For example, when unhiding a hidden tree, we include all the lanes\n    // that were previously skipped when the tree was hidden. That set of\n    // lanes is a superset of the lanes we started rendering with.\n    //\n    // So we'll throw out the current work and restart.\n    prepareFreshStack(root, NoLanes);\n  } else if (exitStatus !== RootIncomplete) {\n    if (exitStatus === RootErrored) {\n      executionContext |= RetryAfterError;\n\n      // If an error occurred during hydration,\n      // discard server response and fall back to client side render.\n      if (root.hydrate) {\n        root.hydrate = false;\n        clearContainer(root.containerInfo);\n      }\n\n      // If something threw an error, try rendering one more time. We'll render\n      // synchronously to block concurrent data mutations, and we'll includes\n      // all pending updates are included. If it still fails after the second\n      // attempt, we'll give up and commit the resulting tree.\n      lanes = getLanesToRetrySynchronouslyOnError(root);\n      if (lanes !== NoLanes) {\n        exitStatus = renderRootSync(root, lanes);\n      }\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    // We now have a consistent tree. The next step is either to commit it,\n    // or, if something suspended, wait to commit it after a timeout.\n    const finishedWork: Fiber = (root.current.alternate: any);\n    root.finishedWork = finishedWork;\n    root.finishedLanes = lanes;\n    finishConcurrentRender(root, exitStatus, lanes);\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootIncomplete:\n    case RootFatalErrored: {\n      invariant(false, 'Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(root);\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(root);\n      break;\n    }\n    default: {\n      invariant(false, 'Unknown root exit status.');\n    }\n  }\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  flushPassiveEffects();\n\n  let lanes;\n  let exitStatus;\n  if (\n    root === workInProgressRoot &&\n    includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)\n  ) {\n    // There's a partial tree, and at least one of its lanes has expired. Finish\n    // rendering it before rendering the rest of the expired work.\n    lanes = workInProgressRootRenderLanes;\n    exitStatus = renderRootSync(root, lanes);\n    if (\n      includesSomeLane(\n        workInProgressRootIncludedLanes,\n        workInProgressRootUpdatedLanes,\n      )\n    ) {\n      // The render included lanes that were updated during the render phase.\n      // For example, when unhiding a hidden tree, we include all the lanes\n      // that were previously skipped when the tree was hidden. That set of\n      // lanes is a superset of the lanes we started rendering with.\n      //\n      // Note that this only happens when part of the tree is rendered\n      // concurrently. If the whole tree is rendered synchronously, then there\n      // are no interleaved events.\n      lanes = getNextLanes(root, lanes);\n      exitStatus = renderRootSync(root, lanes);\n    }\n  } else {\n    lanes = getNextLanes(root, NoLanes);\n    exitStatus = renderRootSync(root, lanes);\n  }\n\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    executionContext |= RetryAfterError;\n\n    // If an error occurred during hydration,\n    // discard server response and fall back to client side render.\n    if (root.hydrate) {\n      root.hydrate = false;\n      clearContainer(root.containerInfo);\n    }\n\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    lanes = getLanesToRetrySynchronouslyOnError(root);\n    if (lanes !== NoLanes) {\n      exitStatus = renderRootSync(root, lanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root);\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  markRootExpired(root, lanes);\n  ensureRootIsScheduled(root, now());\n  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n    resetRenderTimer();\n    flushSyncCallbackQueue();\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function flushDiscreteUpdates() {\n  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.\n  // However, `act` uses `batchedUpdates`, so there's no way to distinguish\n  // those two cases. Need to fix this before exposing flushDiscreteUpdates\n  // as a public API.\n  if (\n    (executionContext & (BatchedContext | RenderContext | CommitContext)) !==\n    NoContext\n  ) {\n    if (__DEV__) {\n      if ((executionContext & RenderContext) !== NoContext) {\n        console.error(\n          'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' +\n            'already rendering.',\n        );\n      }\n    }\n    // We're already rendering, so we can't synchronously flush pending work.\n    // This is probably a nested event dispatch triggered by a lifecycle/effect,\n    // like `el.focus()`. Exit.\n    return;\n  }\n  flushPendingDiscreteUpdates();\n  // If the discrete updates scheduled passive effects, flush them now so that\n  // they fire before the next serial event.\n  flushPassiveEffects();\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(DefaultLanePriority);\n      return runWithPriority(NormalSchedulerPriority, fn);\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n    }\n  } else {\n    return runWithPriority(NormalSchedulerPriority, fn);\n  }\n}\n\nfunction flushPendingDiscreteUpdates() {\n  if (rootsWithPendingDiscreteUpdates !== null) {\n    // For each root with pending discrete updates, schedule a callback to\n    // immediately flush them.\n    const roots = rootsWithPendingDiscreteUpdates;\n    rootsWithPendingDiscreteUpdates = null;\n    roots.forEach(root => {\n      markDiscreteUpdatesExpired(root);\n      ensureRootIsScheduled(root, now());\n    });\n  }\n  // Now flush the immediate queue.\n  flushSyncCallbackQueue();\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function batchedEventUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= EventContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= DiscreteEventContext;\n\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(InputDiscreteLanePriority);\n      return runWithPriority(\n        UserBlockingSchedulerPriority,\n        fn.bind(null, a, b, c, d),\n      );\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    try {\n      return runWithPriority(\n        UserBlockingSchedulerPriority,\n        fn.bind(null, a, b, c, d),\n      );\n    } finally {\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  }\n}\n\nexport function unbatchedUpdates<A, R>(fn: (a: A) => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext &= ~BatchedContext;\n  executionContext |= LegacyUnbatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function flushSync<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {\n    if (__DEV__) {\n      console.error(\n        'flushSync was called from inside a lifecycle method. React cannot ' +\n          'flush when React is already rendering. Consider moving this call to ' +\n          'a scheduler task or micro task.',\n      );\n    }\n    return fn(a);\n  }\n  executionContext |= BatchedContext;\n\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(SyncLanePriority);\n      if (fn) {\n        return runWithPriority(ImmediateSchedulerPriority, fn.bind(null, a));\n      } else {\n        return (undefined: $FlowFixMe);\n      }\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n      executionContext = prevExecutionContext;\n      // Flush the immediate callbacks that were scheduled during this batch.\n      // Note that this will happen even if batchedUpdates is higher up\n      // the stack.\n      flushSyncCallbackQueue();\n    }\n  } else {\n    try {\n      if (fn) {\n        return runWithPriority(ImmediateSchedulerPriority, fn.bind(null, a));\n      } else {\n        return (undefined: $FlowFixMe);\n      }\n    } finally {\n      executionContext = prevExecutionContext;\n      // Flush the immediate callbacks that were scheduled during this batch.\n      // Note that this will happen even if batchedUpdates is higher up\n      // the stack.\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(SyncLanePriority);\n      runWithPriority(ImmediateSchedulerPriority, fn);\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    try {\n      runWithPriority(ImmediateSchedulerPriority, fn);\n    } finally {\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  }\n}\n\nexport function pushRenderLanes(fiber: Fiber, lanes: Lanes) {\n  pushToStack(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(\n    workInProgressRootIncludedLanes,\n    lanes,\n  );\n}\n\nexport function popRenderLanes(fiber: Fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  popFromStack(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      unwindInterruptedWork(interruptedWork);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  workInProgress = createWorkInProgress(root.current, null);\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootIncomplete;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n\n  if (enableSchedulerTracing) {\n    spawnedWorkDuringRender = null;\n  }\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nfunction pushInteractions(root) {\n  if (enableSchedulerTracing) {\n    const prevInteractions: Set<Interaction> | null = __interactionsRef.current;\n    __interactionsRef.current = root.memoizedInteractions;\n    return prevInteractions;\n  }\n  return null;\n}\n\nfunction popInteractions(prevInteractions) {\n  if (enableSchedulerTracing) {\n    __interactionsRef.current = prevInteractions;\n  }\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootIncomplete ||\n    workInProgressRootExitStatus === RootSuspended\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError() {\n  if (workInProgressRootExitStatus !== RootCompleted) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootIncomplete;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    prepareFreshStack(root, lanes);\n    startWorkOnPendingInteractions(root, lanes);\n  }\n\n  const prevInteractions = pushInteractions(root);\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n  }\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    invariant(\n      false,\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n    startWorkOnPendingInteractions(root, lanes);\n  }\n\n  const prevInteractions = pushInteractions(root);\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n  }\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootIncomplete;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n\n      resetChildLanes(completedWork);\n\n      if (\n        returnFiber !== null &&\n        // Do not append effects to parents if a sibling failed to complete\n        (returnFiber.flags & Incomplete) === NoFlags\n      ) {\n        // Append all the effects of the subtree and this fiber onto the effect\n        // list of the parent. The completion order of the children affects the\n        // side-effect order.\n        if (returnFiber.firstEffect === null) {\n          returnFiber.firstEffect = completedWork.firstEffect;\n        }\n        if (completedWork.lastEffect !== null) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = completedWork.firstEffect;\n          }\n          returnFiber.lastEffect = completedWork.lastEffect;\n        }\n\n        // If this fiber had side-effects, we append it AFTER the children's\n        // side-effects. We can perform certain side-effects earlier if needed,\n        // by doing multiple passes over the effect list. We don't want to\n        // schedule our own side-effect on our own list because if end up\n        // reusing children we'll schedule this effect onto itself since we're\n        // at the end.\n        const flags = completedWork.flags;\n\n        // Skip both NoWork and PerformedWork tags when creating the effect\n        // list. PerformedWork effect is read by React DevTools but shouldn't be\n        // committed.\n        if (flags > PerformedWork) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = completedWork;\n          } else {\n            returnFiber.firstEffect = completedWork;\n          }\n          returnFiber.lastEffect = completedWork;\n        }\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(completedWork, subtreeRenderLanes);\n\n      // Because this fiber did not complete, don't reset its expiration time.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its effect list.\n        returnFiber.firstEffect = returnFiber.lastEffect = null;\n        returnFiber.flags |= Incomplete;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction resetChildLanes(completedWork: Fiber) {\n  if (\n    // TODO: Move this check out of the hot path by moving `resetChildLanes`\n    // to switch statement in `completeWork`.\n    (completedWork.tag === LegacyHiddenComponent ||\n      completedWork.tag === OffscreenComponent) &&\n    completedWork.memoizedState !== null &&\n    !includesSomeLane(subtreeRenderLanes, (OffscreenLane: Lane)) &&\n    (completedWork.mode & ConcurrentMode) !== NoLanes\n  ) {\n    // The children of this component are hidden. Don't bubble their\n    // expiration times.\n    return;\n  }\n\n  let newChildLanes = NoLanes;\n\n  // Bubble up the earliest expiration time.\n  if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n    // In profiling mode, resetChildExpirationTime is also used to reset\n    // profiler durations.\n    let actualDuration = completedWork.actualDuration;\n    let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n    // When a fiber is cloned, its actualDuration is reset to 0. This value will\n    // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n    // When work is done, it should bubble to the parent's actualDuration. If\n    // the fiber has not been cloned though, (meaning no work was done), then\n    // this value will reflect the amount of time spent working on a previous\n    // render. In that case it should not bubble. We determine whether it was\n    // cloned by comparing the child pointer.\n    const shouldBubbleActualDurations =\n      completedWork.alternate === null ||\n      completedWork.child !== completedWork.alternate.child;\n\n    let child = completedWork.child;\n    while (child !== null) {\n      newChildLanes = mergeLanes(\n        newChildLanes,\n        mergeLanes(child.lanes, child.childLanes),\n      );\n      if (shouldBubbleActualDurations) {\n        actualDuration += child.actualDuration;\n      }\n      treeBaseDuration += child.treeBaseDuration;\n      child = child.sibling;\n    }\n\n    const isTimedOutSuspense =\n      completedWork.tag === SuspenseComponent &&\n      completedWork.memoizedState !== null;\n    if (isTimedOutSuspense) {\n      // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n      const primaryChildFragment = completedWork.child;\n      if (primaryChildFragment !== null) {\n        treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n      }\n    }\n\n    completedWork.actualDuration = actualDuration;\n    completedWork.treeBaseDuration = treeBaseDuration;\n  } else {\n    let child = completedWork.child;\n    while (child !== null) {\n      newChildLanes = mergeLanes(\n        newChildLanes,\n        mergeLanes(child.lanes, child.childLanes),\n      );\n      child = child.sibling;\n    }\n  }\n\n  completedWork.childLanes = newChildLanes;\n}\n\nfunction commitRoot(root) {\n  const renderPriorityLevel = getCurrentPriorityLevel();\n  runWithPriority(\n    ImmediateSchedulerPriority,\n    commitRootImpl.bind(null, root, renderPriorityLevel),\n  );\n  return null;\n}\n\nfunction commitRootImpl(root, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  invariant(\n    finishedWork !== root.current,\n    'Cannot commit the same tree as before. This error is likely caused by ' +\n      'a bug in React. Please file an issue.',\n  );\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n\n  // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  // Clear already finished discrete updates in case that a later call of\n  // `flushDiscreteUpdates` starts a useless render pass which may cancels\n  // a scheduled timeout.\n  if (rootsWithPendingDiscreteUpdates !== null) {\n    if (\n      !hasDiscreteLanes(remainingLanes) &&\n      rootsWithPendingDiscreteUpdates.has(root)\n    ) {\n      rootsWithPendingDiscreteUpdates.delete(root);\n    }\n  }\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // Get the list of effects.\n  let firstEffect;\n  if (finishedWork.flags > PerformedWork) {\n    // A fiber's effect list consists only of its children, not itself. So if\n    // the root has an effect, we need to add it to the end of the list. The\n    // resulting list is the set that would belong to the root's parent, if it\n    // had one; that is, all the effects in the tree including the root.\n    if (finishedWork.lastEffect !== null) {\n      finishedWork.lastEffect.nextEffect = finishedWork;\n      firstEffect = finishedWork.firstEffect;\n    } else {\n      firstEffect = finishedWork;\n    }\n  } else {\n    // There is no effect on the root.\n    firstEffect = finishedWork.firstEffect;\n  }\n\n  if (firstEffect !== null) {\n    let previousLanePriority;\n    if (decoupleUpdatePriorityFromScheduler) {\n      previousLanePriority = getCurrentUpdateLanePriority();\n      setCurrentUpdateLanePriority(SyncLanePriority);\n    }\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n    const prevInteractions = pushInteractions(root);\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    focusedInstanceHandle = prepareForCommit(root.containerInfo);\n    shouldFireAfterActiveInstanceBlur = false;\n\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(null, commitBeforeMutationEffects, null);\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitBeforeMutationEffects();\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    // We no longer need to track the active instance fiber\n    focusedInstanceHandle = null;\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(\n          null,\n          commitMutationEffects,\n          null,\n          root,\n          renderPriorityLevel,\n        );\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitMutationEffects(root, renderPriorityLevel);\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    if (shouldFireAfterActiveInstanceBlur) {\n      afterActiveInstanceBlur();\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitLayoutEffects(root, lanes);\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    nextEffect = null;\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    if (enableSchedulerTracing) {\n      popInteractions(((prevInteractions: any): Set<Interaction>));\n    }\n    executionContext = prevExecutionContext;\n\n    if (decoupleUpdatePriorityFromScheduler && previousLanePriority != null) {\n      // Reset the priority to the previous non-sync value.\n      setCurrentUpdateLanePriority(previousLanePriority);\n    }\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n    pendingPassiveEffectsRenderPriority = renderPriorityLevel;\n  } else {\n    // We are done with the effect chain at this point so let's clear the\n    // nextEffect pointers to assist with GC. If we have passive effects, we'll\n    // clear this in flushPassiveEffects.\n    nextEffect = firstEffect;\n    while (nextEffect !== null) {\n      const nextNextEffect = nextEffect.nextEffect;\n      nextEffect.nextEffect = null;\n      if (nextEffect.flags & Deletion) {\n        detachFiberAfterEffects(nextEffect);\n      }\n      nextEffect = nextNextEffect;\n    }\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  if (remainingLanes !== NoLanes) {\n    if (enableSchedulerTracing) {\n      if (spawnedWorkDuringRender !== null) {\n        const expirationTimes = spawnedWorkDuringRender;\n        spawnedWorkDuringRender = null;\n        for (let i = 0; i < expirationTimes.length; i++) {\n          scheduleInteractions(\n            root,\n            expirationTimes[i],\n            root.memoizedInteractions,\n          );\n        }\n      }\n      schedulePendingInteractions(root, remainingLanes);\n    }\n  } else {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (enableSchedulerTracing) {\n    if (!rootDidHavePassiveEffects) {\n      // If there are no passive effects, then we can complete the pending interactions.\n      // Otherwise, we'll wait until after the passive effects are flushed.\n      // Wait to do this until after remaining work has been scheduled,\n      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.\n      finishPendingInteractions(root, lanes);\n    }\n  }\n\n  if (remainingLanes === SyncLane) {\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    // This is a legacy edge case. We just committed the initial mount of\n    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired\n    // synchronously, but layout updates should be deferred until the end\n    // of the batch.\n    return null;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbackQueue();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction commitBeforeMutationEffects() {\n  while (nextEffect !== null) {\n    const current = nextEffect.alternate;\n\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      if ((nextEffect.flags & Deletion) !== NoFlags) {\n        if (doesFiberContain(nextEffect, focusedInstanceHandle)) {\n          shouldFireAfterActiveInstanceBlur = true;\n          beforeActiveInstanceBlur();\n        }\n      } else {\n        // TODO: Move this out of the hot path using a dedicated effect tag.\n        if (\n          nextEffect.tag === SuspenseComponent &&\n          isSuspenseBoundaryBeingHidden(current, nextEffect) &&\n          doesFiberContain(nextEffect, focusedInstanceHandle)\n        ) {\n          shouldFireAfterActiveInstanceBlur = true;\n          beforeActiveInstanceBlur();\n        }\n      }\n    }\n\n    const flags = nextEffect.flags;\n    if ((flags & Snapshot) !== NoFlags) {\n      setCurrentDebugFiberInDEV(nextEffect);\n\n      commitBeforeMutationEffectOnFiber(current, nextEffect);\n\n      resetCurrentDebugFiberInDEV();\n    }\n    if ((flags & Passive) !== NoFlags) {\n      // If there are passive effects, schedule a callback to flush at\n      // the earliest opportunity.\n      if (!rootDoesHavePassiveEffects) {\n        rootDoesHavePassiveEffects = true;\n        scheduleCallback(NormalSchedulerPriority, () => {\n          flushPassiveEffects();\n          return null;\n        });\n      }\n    }\n    nextEffect = nextEffect.nextEffect;\n  }\n}\n\nfunction commitMutationEffects(\n  root: FiberRoot,\n  renderPriorityLevel: ReactPriorityLevel,\n) {\n  // TODO: Should probably move the bulk of this function to commitWork.\n  while (nextEffect !== null) {\n    setCurrentDebugFiberInDEV(nextEffect);\n\n    const flags = nextEffect.flags;\n\n    if (flags & ContentReset) {\n      commitResetTextContent(nextEffect);\n    }\n\n    if (flags & Ref) {\n      const current = nextEffect.alternate;\n      if (current !== null) {\n        commitDetachRef(current);\n      }\n      if (enableScopeAPI) {\n        // TODO: This is a temporary solution that allowed us to transition away\n        // from React Flare on www.\n        if (nextEffect.tag === ScopeComponent) {\n          commitAttachRef(nextEffect);\n        }\n      }\n    }\n\n    // The following switch statement is only concerned about placement,\n    // updates, and deletions. To avoid needing to add a case for every possible\n    // bitmap value, we remove the secondary effects from the effect tag and\n    // switch on that value.\n    const primaryFlags = flags & (Placement | Update | Deletion | Hydrating);\n    switch (primaryFlags) {\n      case Placement: {\n        commitPlacement(nextEffect);\n        // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        // TODO: findDOMNode doesn't rely on this any more but isMounted does\n        // and isMounted is deprecated anyway so we should be able to kill this.\n        nextEffect.flags &= ~Placement;\n        break;\n      }\n      case PlacementAndUpdate: {\n        // Placement\n        commitPlacement(nextEffect);\n        // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        nextEffect.flags &= ~Placement;\n\n        // Update\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Hydrating: {\n        nextEffect.flags &= ~Hydrating;\n        break;\n      }\n      case HydratingAndUpdate: {\n        nextEffect.flags &= ~Hydrating;\n\n        // Update\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Update: {\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Deletion: {\n        commitDeletion(root, nextEffect, renderPriorityLevel);\n        break;\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n    nextEffect = nextEffect.nextEffect;\n  }\n}\n\nfunction commitLayoutEffects(root: FiberRoot, committedLanes: Lanes) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logLayoutEffectsStarted(committedLanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markLayoutEffectsStarted(committedLanes);\n  }\n\n  // TODO: Should probably move the bulk of this function to commitWork.\n  while (nextEffect !== null) {\n    setCurrentDebugFiberInDEV(nextEffect);\n\n    const flags = nextEffect.flags;\n\n    if (flags & (Update | Callback)) {\n      const current = nextEffect.alternate;\n      commitLayoutEffectOnFiber(root, current, nextEffect, committedLanes);\n    }\n\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (flags & Ref && nextEffect.tag !== ScopeComponent) {\n        commitAttachRef(nextEffect);\n      }\n    } else {\n      if (flags & Ref) {\n        commitAttachRef(nextEffect);\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n    nextEffect = nextEffect.nextEffect;\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logLayoutEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markLayoutEffectsStopped();\n  }\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  if (pendingPassiveEffectsRenderPriority !== NoSchedulerPriority) {\n    const priorityLevel =\n      pendingPassiveEffectsRenderPriority > NormalSchedulerPriority\n        ? NormalSchedulerPriority\n        : pendingPassiveEffectsRenderPriority;\n    pendingPassiveEffectsRenderPriority = NoSchedulerPriority;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        setCurrentUpdateLanePriority(\n          schedulerPriorityToLanePriority(priorityLevel),\n        );\n        return runWithPriority(priorityLevel, flushPassiveEffectsImpl);\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n      }\n    } else {\n      return runWithPriority(priorityLevel, flushPassiveEffectsImpl);\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nexport function enqueuePendingPassiveHookEffectMount(\n  fiber: Fiber,\n  effect: HookEffect,\n): void {\n  pendingPassiveHookEffectsMount.push(effect, fiber);\n  if (!rootDoesHavePassiveEffects) {\n    rootDoesHavePassiveEffects = true;\n    scheduleCallback(NormalSchedulerPriority, () => {\n      flushPassiveEffects();\n      return null;\n    });\n  }\n}\n\nexport function enqueuePendingPassiveHookEffectUnmount(\n  fiber: Fiber,\n  effect: HookEffect,\n): void {\n  pendingPassiveHookEffectsUnmount.push(effect, fiber);\n  if (__DEV__) {\n    fiber.flags |= PassiveUnmountPendingDev;\n    const alternate = fiber.alternate;\n    if (alternate !== null) {\n      alternate.flags |= PassiveUnmountPendingDev;\n    }\n  }\n  if (!rootDoesHavePassiveEffects) {\n    rootDoesHavePassiveEffects = true;\n    scheduleCallback(NormalSchedulerPriority, () => {\n      flushPassiveEffects();\n      return null;\n    });\n  }\n}\n\nfunction invokePassiveEffectCreate(effect: HookEffect): void {\n  const create = effect.create;\n  effect.destroy = create();\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  pendingPassiveEffectsLanes = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Cannot flush passive effects while already rendering.',\n  );\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = true;\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  const prevInteractions = pushInteractions(root);\n\n  // It's important that ALL pending passive effect destroy functions are called\n  // before ANY passive effect create functions are called.\n  // Otherwise effects in sibling components might interfere with each other.\n  // e.g. a destroy function in one component may unintentionally override a ref\n  // value set by a create function in another component.\n  // Layout effects have the same constraint.\n\n  // First pass: Destroy stale passive effects.\n  const unmountEffects = pendingPassiveHookEffectsUnmount;\n  pendingPassiveHookEffectsUnmount = [];\n  for (let i = 0; i < unmountEffects.length; i += 2) {\n    const effect = ((unmountEffects[i]: any): HookEffect);\n    const fiber = ((unmountEffects[i + 1]: any): Fiber);\n    const destroy = effect.destroy;\n    effect.destroy = undefined;\n\n    if (__DEV__) {\n      fiber.flags &= ~PassiveUnmountPendingDev;\n      const alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.flags &= ~PassiveUnmountPendingDev;\n      }\n    }\n\n    if (typeof destroy === 'function') {\n      if (__DEV__) {\n        setCurrentDebugFiberInDEV(fiber);\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          startPassiveEffectTimer();\n          invokeGuardedCallback(null, destroy, null);\n          recordPassiveEffectDuration(fiber);\n        } else {\n          invokeGuardedCallback(null, destroy, null);\n        }\n        if (hasCaughtError()) {\n          invariant(fiber !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(fiber, error);\n        }\n        resetCurrentDebugFiberInDEV();\n      } else {\n        try {\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            fiber.mode & ProfileMode\n          ) {\n            try {\n              startPassiveEffectTimer();\n              destroy();\n            } finally {\n              recordPassiveEffectDuration(fiber);\n            }\n          } else {\n            destroy();\n          }\n        } catch (error) {\n          invariant(fiber !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(fiber, error);\n        }\n      }\n    }\n  }\n  // Second pass: Create new passive effects.\n  const mountEffects = pendingPassiveHookEffectsMount;\n  pendingPassiveHookEffectsMount = [];\n  for (let i = 0; i < mountEffects.length; i += 2) {\n    const effect = ((mountEffects[i]: any): HookEffect);\n    const fiber = ((mountEffects[i + 1]: any): Fiber);\n    if (__DEV__) {\n      setCurrentDebugFiberInDEV(fiber);\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        fiber.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        invokeGuardedCallback(null, invokePassiveEffectCreate, null, effect);\n        recordPassiveEffectDuration(fiber);\n      } else {\n        invokeGuardedCallback(null, invokePassiveEffectCreate, null, effect);\n      }\n      if (hasCaughtError()) {\n        invariant(fiber !== null, 'Should be working on an effect.');\n        const error = clearCaughtError();\n        captureCommitPhaseError(fiber, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    } else {\n      try {\n        const create = effect.create;\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          try {\n            startPassiveEffectTimer();\n            effect.destroy = create();\n          } finally {\n            recordPassiveEffectDuration(fiber);\n          }\n        } else {\n          effect.destroy = create();\n        }\n      } catch (error) {\n        invariant(fiber !== null, 'Should be working on an effect.');\n        captureCommitPhaseError(fiber, error);\n      }\n    }\n  }\n\n  // Note: This currently assumes there are no passive effects on the root fiber\n  // because the root is not part of its own effect list.\n  // This could change in the future.\n  let effect = root.current.firstEffect;\n  while (effect !== null) {\n    const nextNextEffect = effect.nextEffect;\n    // Remove nextEffect pointer to assist GC\n    effect.nextEffect = null;\n    if (effect.flags & Deletion) {\n      detachFiberAfterEffects(effect);\n    }\n    effect = nextNextEffect;\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n    finishPendingInteractions(root, lanes);\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = false;\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbackQueue();\n\n  // If additional passive effects were scheduled, increment a counter. If this\n  // exceeds the limit, we'll fire a warning.\n  nestedPassiveUpdateCount =\n    rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValue(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  enqueueUpdate(rootFiber, update);\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(rootFiber, (SyncLane: Lane));\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, SyncLane);\n  }\n}\n\nexport function captureCommitPhaseError(sourceFiber: Fiber, error: mixed) {\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = sourceFiber.return;\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValue(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        enqueueUpdate(fiber, update);\n        const eventTime = requestEventTime();\n        const root = markUpdateLaneFromFiberToRoot(fiber, (SyncLane: Lane));\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n          schedulePendingInteractions(root, SyncLane);\n        } else {\n          // This component has already been unmounted.\n          // We can't schedule any follow up work for the root because the fiber is already unmounted,\n          // but we can still call the log-only boundary so the error isn't swallowed.\n          //\n          // TODO This is only a temporary bandaid for the old reconciler fork.\n          // We can delete this special case once the new fork is merged.\n          if (\n            typeof instance.componentDidCatch === 'function' &&\n            !isAlreadyFailedLegacyErrorBoundary(instance)\n          ) {\n            try {\n              instance.componentDidCatch(error, errorInfo);\n            } catch (errorToIgnore) {\n              // TODO Ignore this error? Rethrow it?\n              // This is kind of an edge case.\n            }\n          }\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n  schedulePendingInteractions(root, pingedLanes);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new expiration time.\n  if (retryLane === NoLane) {\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, retryLane);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  if (enableSuspenseServerRenderer) {\n    switch (boundaryFiber.tag) {\n      case SuspenseComponent:\n        retryCache = boundaryFiber.stateNode;\n        const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n        if (suspenseState !== null) {\n          retryLane = suspenseState.retryLane;\n        }\n        break;\n      case SuspenseListComponent:\n        retryCache = boundaryFiber.stateNode;\n        break;\n      default:\n        invariant(\n          false,\n          'Pinged unknown suspense boundary type. ' +\n            'This is probably a bug in React.',\n        );\n    }\n  } else {\n    retryCache = boundaryFiber.stateNode;\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    invariant(\n      false,\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent &&\n      tag !== Block\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentName(fiber.type) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForUnmountedComponent: Set<string> | null = null;\nfunction warnAboutUpdateOnUnmountedFiberInDEV(fiber) {\n  if (__DEV__) {\n    const tag = fiber.tag;\n    if (\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent &&\n      tag !== Block\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // If there are pending passive effects unmounts for this Fiber,\n    // we can assume that they would have prevented this update.\n    if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentName(fiber.type) || 'ReactComponent';\n    if (didWarnStateUpdateForUnmountedComponent !== null) {\n      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForUnmountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);\n    }\n\n    if (isFlushingPassiveEffects) {\n      // Do not warn if we are currently flushing passive effects!\n      //\n      // React can't directly detect a memory leak, but there are some clues that warn about one.\n      // One of these clues is when an unmounted React component tries to update its state.\n      // For example, if a component forgets to remove an event listener when unmounting,\n      // that listener may be called later and try to update state,\n      // at which point React would warn about the potential leak.\n      //\n      // Warning signals are the most useful when they're strong.\n      // (So we should avoid false positive warnings.)\n      // Updating state from within an effect cleanup function is sometimes a necessary pattern, e.g.:\n      // 1. Updating an ancestor that a component had registered itself with on mount.\n      // 2. Resetting state when a component is hidden after going offscreen.\n    } else {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          \"Can't perform a React state update on an unmounted component. This \" +\n            'is a no-op, but it indicates a memory leak in your application. To ' +\n            'fix, cancel all subscriptions and asynchronous tasks in %s.',\n          tag === ClassComponent\n            ? 'the componentWillUnmount method'\n            : 'a useEffect cleanup function',\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        originalError !== null &&\n        typeof originalError === 'object' &&\n        typeof originalError.then === 'function'\n      ) {\n        // Don't replay promises. Treat everything else like an error.\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(unitOfWork);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.\n        // Rethrow this error instead of the original one.\n        throw replayError;\n      } else {\n        // This branch is reachable if the render phase is impure.\n        throw originalError;\n      }\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      (executionContext & RenderContext) !== NoContext &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentName(workInProgress.type)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentName(fiber.type) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\n// a 'shared' variable that changes when act() opens/closes in tests.\nexport const IsThisRendererActing = {current: (false: boolean)};\n\nexport function warnIfNotScopedWithMatchingAct(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      IsSomeRendererActing.current === true &&\n      IsThisRendererActing.current !== true\n    ) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          \"It looks like you're using the wrong act() around your test interactions.\\n\" +\n            'Be sure to use the matching version of act() corresponding to your renderer:\\n\\n' +\n            '// for react-dom:\\n' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'import {act} fr' +\n            \"om 'react-dom/test-utils';\\n\" +\n            '// ...\\n' +\n            'act(() => ...);\\n\\n' +\n            '// for react-test-renderer:\\n' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'import TestRenderer fr' +\n            \"om react-test-renderer';\\n\" +\n            'const {act} = TestRenderer;\\n' +\n            '// ...\\n' +\n            'act(() => ...);',\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nexport function warnIfNotCurrentlyActingEffectsInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      (fiber.mode & StrictMode) !== NoMode &&\n      IsSomeRendererActing.current === false &&\n      IsThisRendererActing.current === false\n    ) {\n      console.error(\n        'An update to %s ran an effect, but was not wrapped in act(...).\\n\\n' +\n          'When testing, code that causes React state updates should be ' +\n          'wrapped into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* fire events that update state */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n        getComponentName(fiber.type),\n      );\n    }\n  }\n}\n\nfunction warnIfNotCurrentlyActingUpdatesInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      executionContext === NoContext &&\n      IsSomeRendererActing.current === false &&\n      IsThisRendererActing.current === false\n    ) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentName(fiber.type),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nexport const warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;\n\n// In tests, we want to enforce a mocked scheduler.\nlet didWarnAboutUnmockedScheduler = false;\n// TODO Before we release concurrent mode, revisit this and decide whether a mocked\n// scheduler is the actual recommendation. The alternative could be a testing build,\n// a new lib, or whatever; we dunno just yet. This message is for early adopters\n// to get their tests right.\n\nexport function warnIfUnmockedScheduler(fiber: Fiber) {\n  if (__DEV__) {\n    if (\n      didWarnAboutUnmockedScheduler === false &&\n      Scheduler.unstable_flushAllWithoutAsserting === undefined\n    ) {\n      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {\n        didWarnAboutUnmockedScheduler = true;\n        console.error(\n          'In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked ' +\n            'to guarantee consistent behaviour across tests and browsers. ' +\n            'For example, with jest: \\n' +\n            // Break up requires to avoid accidentally parsing them as dependencies.\n            \"jest.mock('scheduler', () => require\" +\n            \"('scheduler/unstable_mock'));\\n\\n\" +\n            'For more info, visit https://reactjs.org/link/mock-scheduler',\n        );\n      } else if (warnAboutUnmockedScheduler === true) {\n        didWarnAboutUnmockedScheduler = true;\n        console.error(\n          'Starting from React v18, the \"scheduler\" module will need to be mocked ' +\n            'to guarantee consistent behaviour across tests and browsers. ' +\n            'For example, with jest: \\n' +\n            // Break up requires to avoid accidentally parsing them as dependencies.\n            \"jest.mock('scheduler', () => require\" +\n            \"('scheduler/unstable_mock'));\\n\\n\" +\n            'For more info, visit https://reactjs.org/link/mock-scheduler',\n        );\n      }\n    }\n  }\n}\n\nfunction computeThreadID(root: FiberRoot, lane: Lane | Lanes) {\n  // Interaction threads are unique per root and expiration time.\n  // NOTE: Intentionally unsound cast. All that matters is that it's a number\n  // and it represents a batch of work. Could make a helper function instead,\n  // but meh this is fine for now.\n  return (lane: any) * 1000 + root.interactionThreadID;\n}\n\nexport function markSpawnedWork(lane: Lane | Lanes) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n  if (spawnedWorkDuringRender === null) {\n    spawnedWorkDuringRender = [lane];\n  } else {\n    spawnedWorkDuringRender.push(lane);\n  }\n}\n\nfunction scheduleInteractions(\n  root: FiberRoot,\n  lane: Lane | Lanes,\n  interactions: Set<Interaction>,\n) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  if (interactions.size > 0) {\n    const pendingInteractionMap = root.pendingInteractionMap;\n    const pendingInteractions = pendingInteractionMap.get(lane);\n    if (pendingInteractions != null) {\n      interactions.forEach(interaction => {\n        if (!pendingInteractions.has(interaction)) {\n          // Update the pending async work count for previously unscheduled interaction.\n          interaction.__count++;\n        }\n\n        pendingInteractions.add(interaction);\n      });\n    } else {\n      pendingInteractionMap.set(lane, new Set(interactions));\n\n      // Update the pending async work count for the current interactions.\n      interactions.forEach(interaction => {\n        interaction.__count++;\n      });\n    }\n\n    const subscriber = __subscriberRef.current;\n    if (subscriber !== null) {\n      const threadID = computeThreadID(root, lane);\n      subscriber.onWorkScheduled(interactions, threadID);\n    }\n  }\n}\n\nfunction schedulePendingInteractions(root: FiberRoot, lane: Lane | Lanes) {\n  // This is called when work is scheduled on a root.\n  // It associates the current interactions with the newly-scheduled expiration.\n  // They will be restored when that expiration is later committed.\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  scheduleInteractions(root, lane, __interactionsRef.current);\n}\n\nfunction startWorkOnPendingInteractions(root: FiberRoot, lanes: Lanes) {\n  // This is called when new work is started on a root.\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  // Determine which interactions this batch of work currently includes, So that\n  // we can accurately attribute time spent working on it, And so that cascading\n  // work triggered during the render phase will be associated with it.\n  const interactions: Set<Interaction> = new Set();\n  root.pendingInteractionMap.forEach((scheduledInteractions, scheduledLane) => {\n    if (includesSomeLane(lanes, scheduledLane)) {\n      scheduledInteractions.forEach(interaction =>\n        interactions.add(interaction),\n      );\n    }\n  });\n\n  // Store the current set of interactions on the FiberRoot for a few reasons:\n  // We can re-use it in hot functions like performConcurrentWorkOnRoot()\n  // without having to recalculate it. We will also use it in commitWork() to\n  // pass to any Profiler onRender() hooks. This also provides DevTools with a\n  // way to access it when the onCommitRoot() hook is called.\n  root.memoizedInteractions = interactions;\n\n  if (interactions.size > 0) {\n    const subscriber = __subscriberRef.current;\n    if (subscriber !== null) {\n      const threadID = computeThreadID(root, lanes);\n      try {\n        subscriber.onWorkStarted(interactions, threadID);\n      } catch (error) {\n        // If the subscriber throws, rethrow it in a separate task\n        scheduleCallback(ImmediateSchedulerPriority, () => {\n          throw error;\n        });\n      }\n    }\n  }\n}\n\nfunction finishPendingInteractions(root, committedLanes) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  const remainingLanesAfterCommit = root.pendingLanes;\n\n  let subscriber;\n\n  try {\n    subscriber = __subscriberRef.current;\n    if (subscriber !== null && root.memoizedInteractions.size > 0) {\n      // FIXME: More than one lane can finish in a single commit.\n      const threadID = computeThreadID(root, committedLanes);\n      subscriber.onWorkStopped(root.memoizedInteractions, threadID);\n    }\n  } catch (error) {\n    // If the subscriber throws, rethrow it in a separate task\n    scheduleCallback(ImmediateSchedulerPriority, () => {\n      throw error;\n    });\n  } finally {\n    // Clear completed interactions from the pending Map.\n    // Unless the render was suspended or cascading work was scheduled,\n    // In which case– leave pending interactions until the subsequent render.\n    const pendingInteractionMap = root.pendingInteractionMap;\n    pendingInteractionMap.forEach((scheduledInteractions, lane) => {\n      // Only decrement the pending interaction count if we're done.\n      // If there's still work at the current priority,\n      // That indicates that we are waiting for suspense data.\n      if (!includesSomeLane(remainingLanesAfterCommit, lane)) {\n        pendingInteractionMap.delete(lane);\n\n        scheduledInteractions.forEach(interaction => {\n          interaction.__count--;\n\n          if (subscriber !== null && interaction.__count === 0) {\n            try {\n              subscriber.onInteractionScheduledWorkCompleted(interaction);\n            } catch (error) {\n              // If the subscriber throws, rethrow it in a separate task\n              scheduleCallback(ImmediateSchedulerPriority, () => {\n                throw error;\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n}\n\n// `act` testing API\n//\n// TODO: This is mostly a copy-paste from the legacy `act`, which does not have\n// access to the same internals that we do here. Some trade offs in the\n// implementation no longer make sense.\n\nlet isFlushingAct = false;\nlet isInsideThisAct = false;\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && actingUpdatesScopeDepth > 0;\n}\n\nconst flushMockScheduler = Scheduler.unstable_flushAllWithoutAsserting;\nconst isSchedulerMocked = typeof flushMockScheduler === 'function';\n\n// Returns whether additional work was scheduled. Caller should keep flushing\n// until there's no work left.\nfunction flushActWork(): boolean {\n  if (flushMockScheduler !== undefined) {\n    const prevIsFlushing = isFlushingAct;\n    isFlushingAct = true;\n    try {\n      return flushMockScheduler();\n    } finally {\n      isFlushingAct = prevIsFlushing;\n    }\n  } else {\n    // No mock scheduler available. However, the only type of pending work is\n    // passive effects, which we control. So we can flush that.\n    const prevIsFlushing = isFlushingAct;\n    isFlushingAct = true;\n    try {\n      let didFlushWork = false;\n      while (flushPassiveEffects()) {\n        didFlushWork = true;\n      }\n      return didFlushWork;\n    } finally {\n      isFlushingAct = prevIsFlushing;\n    }\n  }\n}\n\nfunction flushWorkAndMicroTasks(onDone: (err: ?Error) => void) {\n  try {\n    flushActWork();\n    enqueueTask(() => {\n      if (flushActWork()) {\n        flushWorkAndMicroTasks(onDone);\n      } else {\n        onDone();\n      }\n    });\n  } catch (err) {\n    onDone(err);\n  }\n}\n\n// we track the 'depth' of the act() calls with this counter,\n// so we can tell if any async act() calls try to run in parallel.\n\nlet actingUpdatesScopeDepth = 0;\nlet didWarnAboutUsingActInProd = false;\n\nexport function act(callback: () => Thenable<mixed>): Thenable<void> {\n  if (!__DEV__) {\n    if (didWarnAboutUsingActInProd === false) {\n      didWarnAboutUsingActInProd = true;\n      // eslint-disable-next-line react-internal/no-production-logging\n      console.error(\n        'act(...) is not supported in production builds of React, and might not behave as expected.',\n      );\n    }\n  }\n\n  const previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;\n  actingUpdatesScopeDepth++;\n\n  const previousIsSomeRendererActing = IsSomeRendererActing.current;\n  const previousIsThisRendererActing = IsThisRendererActing.current;\n  const previousIsInsideThisAct = isInsideThisAct;\n  IsSomeRendererActing.current = true;\n  IsThisRendererActing.current = true;\n  isInsideThisAct = true;\n\n  function onDone() {\n    actingUpdatesScopeDepth--;\n    IsSomeRendererActing.current = previousIsSomeRendererActing;\n    IsThisRendererActing.current = previousIsThisRendererActing;\n    isInsideThisAct = previousIsInsideThisAct;\n    if (__DEV__) {\n      if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {\n        // if it's _less than_ previousActingUpdatesScopeDepth, then we can assume the 'other' one has warned\n        console.error(\n          'You seem to have overlapping act() calls, this is not supported. ' +\n            'Be sure to await previous act() calls before making a new one. ',\n        );\n      }\n    }\n  }\n\n  let result;\n  try {\n    result = batchedUpdates(callback);\n  } catch (error) {\n    // on sync errors, we still want to 'cleanup' and decrement actingUpdatesScopeDepth\n    onDone();\n    throw error;\n  }\n\n  if (\n    result !== null &&\n    typeof result === 'object' &&\n    typeof result.then === 'function'\n  ) {\n    // setup a boolean that gets set to true only\n    // once this act() call is await-ed\n    let called = false;\n    if (__DEV__) {\n      if (typeof Promise !== 'undefined') {\n        //eslint-disable-next-line no-undef\n        Promise.resolve()\n          .then(() => {})\n          .then(() => {\n            if (called === false) {\n              console.error(\n                'You called act(async () => ...) without await. ' +\n                  'This could lead to unexpected testing behaviour, interleaving multiple act ' +\n                  'calls and mixing their scopes. You should - await act(async () => ...);',\n              );\n            }\n          });\n      }\n    }\n\n    // in the async case, the returned thenable runs the callback, flushes\n    // effects and  microtasks in a loop until flushPassiveEffects() === false,\n    // and cleans up\n    return {\n      then(resolve, reject) {\n        called = true;\n        result.then(\n          () => {\n            if (\n              actingUpdatesScopeDepth > 1 ||\n              (isSchedulerMocked === true &&\n                previousIsSomeRendererActing === true)\n            ) {\n              onDone();\n              resolve();\n              return;\n            }\n            // we're about to exit the act() scope,\n            // now's the time to flush tasks/effects\n            flushWorkAndMicroTasks((err: ?Error) => {\n              onDone();\n              if (err) {\n                reject(err);\n              } else {\n                resolve();\n              }\n            });\n          },\n          err => {\n            onDone();\n            reject(err);\n          },\n        );\n      },\n    };\n  } else {\n    if (__DEV__) {\n      if (result !== undefined) {\n        console.error(\n          'The callback passed to act(...) function ' +\n            'must return undefined, or a Promise. You returned %s',\n          result,\n        );\n      }\n    }\n\n    // flush effects until none remain, and cleanup\n    try {\n      if (\n        actingUpdatesScopeDepth === 1 &&\n        (isSchedulerMocked === false || previousIsSomeRendererActing === false)\n      ) {\n        // we're about to exit the act() scope,\n        // now's the time to flush effects\n        flushActWork();\n      }\n      onDone();\n    } catch (err) {\n      onDone();\n      throw err;\n    }\n\n    // in the sync case, the returned thenable only warns *if* await-ed\n    return {\n      then(resolve) {\n        if (__DEV__) {\n          console.error(\n            'Do not await the result of calling act(...) with sync logic, it is not a Promise.',\n          );\n        }\n        resolve();\n      },\n    };\n  }\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber): void {\n  fiber.sibling = null;\n  fiber.stateNode = null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {\n  ReactFragment,\n  ReactPortal,\n  ReactFundamentalComponent,\n  ReactScope,\n} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {OffscreenProps} from './ReactFiberOffscreenComponent';\n\nimport invariant from 'shared/invariant';\nimport {\n  enableProfilerTimer,\n  enableFundamentalAPI,\n  enableScopeAPI,\n  enableBlocksAPI,\n} from 'shared/ReactFeatureFlags';\nimport {NoFlags, Placement} from './ReactFiberFlags';\nimport {ConcurrentRoot, BlockingRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictMode,\n  BlockingMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_FUNDAMENTAL_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_BLOCK_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nlet debugCounter = 1;\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.nextEffect = null;\n\n  this.firstEffect = null;\n  this.lastEffect = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugID = debugCounter++;\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n    if (enableBlocksAPI) {\n      if ($$typeof === REACT_BLOCK_TYPE) {\n        return Block;\n      }\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n      workInProgress._debugID = current._debugID;\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effect list is no longer valid.\n    workInProgress.nextEffect = null;\n    workInProgress.firstEffect = null;\n    workInProgress.lastEffect = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect tag but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= Placement;\n\n  // The effect list is no longer valid.\n  workInProgress.nextEffect = null;\n  workInProgress.firstEffect = null;\n  workInProgress.lastEffect = null;\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(tag: RootTag): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode | BlockingMode | StrictMode;\n  } else if (tag === BlockingRoot) {\n    mode = BlockingMode | StrictMode;\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= DebugTracingMode;\n        break;\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictMode;\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n            case REACT_BLOCK_TYPE:\n              fiberTag = Block;\n              break getTag;\n            case REACT_FUNDAMENTAL_TYPE:\n              if (enableFundamentalAPI) {\n                return createFiberFromFundamental(\n                  type,\n                  pendingProps,\n                  mode,\n                  lanes,\n                  key,\n                );\n              }\n              break;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentName(owner.type) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n        invariant(\n          false,\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            'but got: %s.%s',\n          type == null ? type : typeof type,\n          info,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromFundamental(\n  fundamentalComponent: ReactFundamentalComponent<any, any>,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(FundamentalComponent, pendingProps, key, mode);\n  fiber.elementType = fundamentalComponent;\n  fiber.type = fundamentalComponent;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error('Profiler must specify an \"id\" as a prop');\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  // TODO: The Profiler fiber shouldn't have a type. It has a tag.\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.type = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n\n  // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  fiber.type = REACT_SUSPENSE_TYPE;\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  if (__DEV__) {\n    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.\n    // This needs to be fixed in getComponentName so that it relies on the tag\n    // instead.\n    fiber.type = REACT_SUSPENSE_LIST_TYPE;\n  }\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  if (__DEV__) {\n    fiber.type = REACT_OFFSCREEN_TYPE;\n  }\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  if (__DEV__) {\n    fiber.type = REACT_LEGACY_HIDDEN_TYPE;\n  }\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  // TODO: These should not need a type.\n  fiber.elementType = 'DELETED';\n  fiber.type = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.nextEffect = source.nextEffect;\n  target.firstEffect = source.firstEffect;\n  target.lastEffect = source.lastEffect;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n  target._debugID = source._debugID;\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLanes,\n  NoLanePriority,\n  NoTimestamp,\n  createLaneMap,\n} from './ReactFiberLane';\nimport {\n  enableSchedulerTracing,\n  enableSuspenseCallback,\n} from 'shared/ReactFeatureFlags';\nimport {unstable_getThreadID} from 'scheduler/tracing';\nimport {initializeUpdateQueue} from './ReactUpdateQueue.old';\nimport {LegacyRoot, BlockingRoot, ConcurrentRoot} from './ReactRootTags';\n\nfunction FiberRootNode(containerInfo, tag, hydrate) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.hydrate = hydrate;\n  this.callbackNode = null;\n  this.callbackPriority = NoLanePriority;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSchedulerTracing) {\n    this.interactionThreadID = unstable_getThreadID();\n    this.memoizedInteractions = new Set();\n    this.pendingInteractionMap = new Map();\n  }\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case BlockingRoot:\n        this._debugRootType = 'createBlockingRoot()';\n        break;\n      case ConcurrentRoot:\n        this._debugRootType = 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = 'createLegacyRoot()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(containerInfo, tag, hydrate): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(tag);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport {FundamentalComponent} from './ReactWorkTags';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane, LanePriority} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport {enableSchedulingProfiler} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {injectInternals, onScheduleRoot} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  flushRoot,\n  batchedEventUpdates,\n  batchedUpdates,\n  unbatchedUpdates,\n  flushSync,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushDiscreteUpdates,\n  flushPassiveEffects,\n  warnIfNotScopedWithMatchingAct,\n  warnIfUnmockedScheduler,\n  IsThisRendererActing,\n  act,\n} from './ReactFiberWorkLoop.old';\nimport {createUpdate, enqueueUpdate} from './ReactUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  InputDiscreteHydrationLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport {markRenderScheduled} from './SchedulingProfiler';\n\nexport {registerMutableSourceForHydration} from './ReactMutableSource.new';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPsuedoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      invariant(false, 'Unable to find node on an unmounted component.');\n    } else {\n      invariant(\n        false,\n        'Argument appears to not be a ReactComponent. Keys: %s',\n        Object.keys(component),\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        invariant(false, 'Unable to find node on an unmounted component.');\n      } else {\n        invariant(\n          false,\n          'Argument appears to not be a ReactComponent. Keys: %s',\n          Object.keys(component),\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictMode) {\n      const componentName = getComponentName(fiber.type) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n): OpaqueRoot {\n  return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks);\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfUnmockedScheduler(current);\n      warnIfNotScopedWithMatchingAct(current);\n    }\n  }\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentName(ReactCurrentFiberCurrent.type) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current, update);\n  scheduleUpdateOnFiber(current, lane, eventTime);\n\n  return lane;\n}\n\nexport {\n  batchedEventUpdates,\n  batchedUpdates,\n  unbatchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushDiscreteUpdates,\n  flushControlled,\n  flushSync,\n  flushPassiveEffects,\n  IsThisRendererActing,\n  act,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot:\n      const root: FiberRoot = fiber.stateNode;\n      if (root.hydrate) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    case SuspenseComponent:\n      const eventTime = requestEventTime();\n      flushSync(() => scheduleUpdateOnFiber(fiber, SyncLane, eventTime));\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = InputDiscreteHydrationLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thennables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptUserBlockingHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = InputDiscreteHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = SelectiveHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function runWithPriority<T>(priority: LanePriority, fn: () => T) {\n  const previousPriority = getCurrentUpdateLanePriority();\n  try {\n    setCurrentUpdateLanePriority(priority);\n    return fn();\n  } finally {\n    setCurrentUpdateLanePriority(previousPriority);\n  }\n}\n\nexport {getCurrentUpdateLanePriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  if (hostFiber.tag === FundamentalComponent) {\n    return hostFiber.stateNode.instance;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (Array.isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (Array.isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n  });\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as React from 'react';\nimport ReactVersion from 'shared/ReactVersion';\nimport {LegacyRoot} from 'react-reconciler/src/ReactRootTags';\nimport {\n  createContainer,\n  updateContainer,\n  injectIntoDevTools,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport Transform from 'art/core/transform';\nimport Mode from 'art/modes/current';\nimport FastNoSideEffects from 'art/modes/fast-noSideEffects';\n\nimport {TYPES, childrenAsString} from './ReactARTInternals';\n\nMode.setCurrent(\n  // Change to 'art/modes/dom' for easier debugging via SVG\n  FastNoSideEffects,\n);\n\n/** Declarative fill-type objects; API design not finalized */\n\nconst slice = Array.prototype.slice;\n\nclass LinearGradient {\n  constructor(stops, x1, y1, x2, y2) {\n    this._args = slice.call(arguments);\n  }\n\n  applyFill(node) {\n    node.fillLinear.apply(node, this._args);\n  }\n}\n\nclass RadialGradient {\n  constructor(stops, fx, fy, rx, ry, cx, cy) {\n    this._args = slice.call(arguments);\n  }\n\n  applyFill(node) {\n    node.fillRadial.apply(node, this._args);\n  }\n}\n\nclass Pattern {\n  constructor(url, width, height, left, top) {\n    this._args = slice.call(arguments);\n  }\n\n  applyFill(node) {\n    node.fillImage.apply(node, this._args);\n  }\n}\n\n/** React Components */\n\nclass Surface extends React.Component {\n  componentDidMount() {\n    const {height, width} = this.props;\n\n    this._surface = Mode.Surface(+width, +height, this._tagRef);\n\n    this._mountNode = createContainer(this._surface, LegacyRoot, false, null);\n    updateContainer(this.props.children, this._mountNode, this);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const props = this.props;\n\n    if (props.height !== prevProps.height || props.width !== prevProps.width) {\n      this._surface.resize(+props.width, +props.height);\n    }\n\n    updateContainer(this.props.children, this._mountNode, this);\n\n    if (this._surface.render) {\n      this._surface.render();\n    }\n  }\n\n  componentWillUnmount() {\n    updateContainer(null, this._mountNode, this);\n  }\n\n  render() {\n    // This is going to be a placeholder because we don't know what it will\n    // actually resolve to because ART may render canvas, vml or svg tags here.\n    // We only allow a subset of properties since others might conflict with\n    // ART's properties.\n    const props = this.props;\n\n    // TODO: ART's Canvas Mode overrides surface title and cursor\n    const Tag = Mode.Surface.tagName;\n\n    return (\n      <Tag\n        ref={ref => (this._tagRef = ref)}\n        accessKey={props.accessKey}\n        className={props.className}\n        draggable={props.draggable}\n        role={props.role}\n        style={props.style}\n        tabIndex={props.tabIndex}\n        title={props.title}\n      />\n    );\n  }\n}\n\nclass Text extends React.Component {\n  constructor(props) {\n    super(props);\n    // We allow reading these props. Ideally we could expose the Text node as\n    // ref directly.\n    ['height', 'width', 'x', 'y'].forEach(key => {\n      Object.defineProperty(this, key, {\n        get: function() {\n          return this._text ? this._text[key] : undefined;\n        },\n      });\n    });\n  }\n  render() {\n    // This means you can't have children that render into strings...\n    const T = TYPES.TEXT;\n    return (\n      <T {...this.props} ref={t => (this._text = t)}>\n        {childrenAsString(this.props.children)}\n      </T>\n    );\n  }\n}\n\ninjectIntoDevTools({\n  findFiberByHostInstance: () => null,\n  bundleType: __DEV__ ? 1 : 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-art',\n});\n\n/** API */\n\nexport const ClippingRectangle = TYPES.CLIPPING_RECTANGLE;\nexport const Group = TYPES.GROUP;\nexport const Shape = TYPES.SHAPE;\nexport const Path = Mode.Path;\nexport {LinearGradient, Pattern, RadialGradient, Surface, Text, Transform};\n"],"names":["LegacyRoot","BlockingRoot","ConcurrentRoot","formatProdErrorMessage","code","url","i","arguments","length","encodeURIComponent","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","FundamentalComponent","ScopeComponent","Block","OffscreenComponent","LegacyHiddenComponent","get","key","_reactInternals","set","value","ReactSharedInternals","React","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_BLOCK_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","Symbol","for","symbolFor","REACT_SERVER_BLOCK_TYPE","REACT_OPAQUE_ID_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","functionName","displayName","name","getContextName","type","getComponentName","$$typeof","context","provider","_context","render","_render","lazyComponent","payload","_payload","init","_init","x","NoFlags","PerformedWork","Placement","Update","PlacementAndUpdate","Deletion","ContentReset","Callback","DidCapture","Ref","Snapshot","Passive","Hydrating","HydratingAndUpdate","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","enableProfilerTimer","__PROFILE__","enableProfilerCommitHooks","enableFundamentalAPI","enableNewReconciler","ReactCurrentOwner","getNearestMountedFiber","fiber","node","nearestMounted","alternate","nextNode","flags","return","tag","isFiberMounted","isMounted","component","getInstance","assertIsMounted","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","stateNode","current","findCurrentHostFiber","parent","currentParent","doesFiberContain","parentFiber","childFiber","parentFiberAlternate","TYPES","CLIPPING_RECTANGLE","GROUP","SHAPE","TEXT","EVENT_TYPES","onClick","onMouseMove","onMouseOver","onMouseOut","onMouseUp","onMouseDown","childrenAsString","children","join","shim","isSuspenseInstancePending","isSuspenseInstanceFallback","registerSuspenseInstanceRetry","hydrateTextInstance","clearSuspenseBoundary","clearSuspenseBoundaryFromContainer","pooledTransform","Transform","NO_CONTEXT","UPDATE_SIGNAL","addEventListeners","instance","listener","_listeners","_subscriptions","subscribe","createEventHandler","handleEvent","event","call","destroyEventListeners","getScaleX","props","scaleX","scale","getScaleY","scaleY","isSameFont","oldFont","newFont","fontSize","fontStyle","fontVariant","fontWeight","fontFamily","applyClippingRectangleProps","prevProps","applyNodeProps","width","height","applyGroupProps","transformTo","move","y","rotate","rotation","originX","originY","transform","xx","yx","xy","yy","cursor","title","indicate","blend","opacity","visible","show","hide","applyRenderableNodeProps","fill","applyFill","stroke","strokeWidth","strokeCap","strokeJoin","strokeDash","applyShapeProps","path","d","prevDelta","_prevDelta","prevPath","_prevPath","delta","draw","applyTextProps","string","_currentString","font","alignment","appendInitialChild","parentInstance","inject","createInstance","internalInstanceHandle","ClippingRectangle","_applyProps","Group","Shape","Text","createTextInstance","text","rootContainerInstance","getPublicInstance","prepareForCommit","prepareUpdate","domElement","oldProps","newProps","resetAfterCommit","resetTextContent","getRootHostContext","getChildHostContext","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","shouldSetTextContent","appendChild","parentNode","eject","appendChildToContainer","insertBefore","beforeChild","injectBefore","insertInContainerBefore","removeChild","removeChildFromContainer","commitUpdate","updatePayload","hideInstance","unhideInstance","unhideTextInstance","textInstance","clearContainer","container","makeClientId","Error","preparePortalMount","portalInstance","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","source","ownerFn","undefined","match","stack","trim","reentry","describeNativeComponentFrame","fn","construct","control","previousPrepareStackTrace","prepareStackTrace","Fake","Object","defineProperty","prototype","Reflect","sample","sampleLines","split","controlLines","s","c","frame","replace","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","ReactDebugCurrentFrame","valueStack","index","createCursor","defaultValue","pop","push","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","Component","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","rendererID","injectedHook","injectInternals","internals","__REACT_DEVTOOLS_GLOBAL_HOOK__","hook","isDisabled","supportsFiber","err","onCommitRoot","root","priorityLevel","onCommitFiberRoot","didError","onCommitUnmount","onCommitFiberUnmount","Scheduler_now","Scheduler","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","NoPriority","initialTimeMs","SyncLanePriority","SyncBatchedLanePriority","InputDiscreteHydrationLanePriority","InputDiscreteLanePriority","InputContinuousHydrationLanePriority","InputContinuousLanePriority","DefaultHydrationLanePriority","DefaultLanePriority","TransitionHydrationPriority","TransitionPriority","RetryLanePriority","SelectiveHydrationLanePriority","IdleHydrationLanePriority","IdleLanePriority","OffscreenLanePriority","NoLanePriority","TotalLanes","NoLanes","NoLane","SyncLane","SyncBatchedLane","InputDiscreteHydrationLane","InputDiscreteLanes","InputContinuousHydrationLane","InputContinuousLanes","DefaultHydrationLane","DefaultLanes","TransitionHydrationLane","TransitionLanes","RetryLanes","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLanes","OffscreenLane","NoTimestamp","return_highestLanePriority","getHighestPriorityLanes","lanes","inputDiscreteLanes","inputContinuousLanes","defaultLanes","transitionLanes","retryLanes","idleLanes","schedulerPriorityToLanePriority","schedulerPriorityLevel","ImmediateSchedulerPriority","UserBlockingSchedulerPriority","NormalSchedulerPriority","LowSchedulerPriority","IdleSchedulerPriority","lanePriorityToSchedulerPriority","lanePriority","NoSchedulerPriority","getNextLanes","wipLanes","pendingLanes","nextLanes","nextLanePriority","expiredLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","getEqualOrHigherPriorityLanes","wipLanePriority","entangledLanes","entanglements","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","priority","markStarvedLanesAsExpired","expirationTimes","expirationTime","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","returnNextLanesPriority","includesNonIdleWork","includesOnlyRetries","includesOnlyTransitions","findUpdateLane","pickArbitraryLane","findTransitionLane","findRetryLane","getHighestPriorityLane","getLowestPriorityLane","clz32","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","laneToLanes","createLaneMap","initial","laneMap","markRootUpdated","updateLane","higherPriorityLanes","markRootSuspended","markRootPinged","hasDiscreteLanes","markRootMutableRead","mutableReadLanes","markRootFinished","remainingLanes","noLongerPendingLanes","markRootEntangled","getBumpedLaneForHydration","renderLanes","highestLanePriority","Math","clz32Fallback","log","LN2","Scheduler_runWithPriority","Scheduler_scheduleCallback","Scheduler_cancelCallback","Scheduler_shouldYield","Scheduler_requestPaint","Scheduler_getCurrentPriorityLevel","Scheduler_ImmediatePriority","Scheduler_UserBlockingPriority","Scheduler_NormalPriority","Scheduler_LowPriority","Scheduler_IdlePriority","fakeCallbackNode","shouldYield","requestPaint","syncQueue","immediateQueueCallbackNode","isFlushingSyncQueue","now","getCurrentPriorityLevel","reactPriorityToSchedulerPriority","reactPriorityLevel","runWithPriority","scheduleCallback","callback","options","scheduleSyncCallback","flushSyncCallbackQueueImpl","cancelCallback","callbackNode","flushSyncCallbackQueue","isSync","queue","error","slice","NoMode","StrictMode","BlockingMode","ConcurrentMode","ProfileMode","DebugTracingMode","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","is","objectIs","hasOwnProperty","shallowEqual","objA","objB","keysA","keys","keysB","describeFiber","getStackByFiberInDevAndProd","info","message","resetCurrentFiber","resolveDefaultProps","baseProps","defaultProps","propName","MAX_SIGNED_31_BIT_INT","valueCursor","currentlyRenderingFiber","lastContextDependency","lastContextWithAllBitsObserved","resetContextDependencies","pushProvider","providerFiber","nextValue","_currentValue2","popProvider","currentValue","calculateChangedBits","newValue","oldValue","changedBits","_calculateChangedBits","scheduleWorkOnParentPath","childLanes","propagateContextChange","nextFiber","list","dependencies","dependency","firstContext","observedBits","update","createUpdate","ForceUpdate","enqueueUpdate","next","enableSuspenseServerRenderer","parentSuspense","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","resolvedObservedBits","contextItem","responders","isPrimaryRenderer","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","initializeUpdateQueue","baseState","memoizedState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","updateQueue","cloneUpdateQueue","currentQueue","clone","sharedQueue","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","lastPendingUpdate","firstPendingUpdate","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","emptyRefsObject","refs","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","inst","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","shouldUpdate","isPureReactComponent","adoptClassInstance","updater","setInstance","constructClassInstance","isLegacyContextConsumer","contextType","state","callComponentWillMount","componentWillMount","UNSAFE_componentWillMount","callComponentWillReceiveProps","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","mountClassInstance","getSnapshotBeforeUpdate","componentDidMount","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","componentDidUpdate","UNSAFE_componentWillUpdate","componentWillUpdate","isArray","Array","coerceRef","returnFiber","element","mixedRef","ref","_owner","owner","ownerFiber","stringRef","_stringRef","throwOnInvalidObjectType","newChild","toString","resolveLazyType","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","last","lastEffect","nextEffect","firstEffect","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","Map","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","mode","existing","updateElement","__DEV__","enableBlocksAPI","createFiberFromElement","updatePortal","portal","containerInfo","implementation","createFiberFromPortal","updateFragment","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","forEach","reconcileChildrenIterator","newChildrenIterable","iteratorFn","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","isObject","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","dehydrated","fallback","unstable_avoidThisFallback","findFirstSuspended","row","revealOrder","didSuspend","HasEffect","Layout","isHydrating","enterHydrationState","prepareToHydrateHostInstance","hostContext","prepareToHydrateHostTextInstance","prepareToHydrateHostSuspenseInstance","popHydrationState","getIsHydrating","workInProgressSources","markSourceAsDirty","mutableSource","resetWorkInProgressVersions","_workInProgressVersionSecondary","getWorkInProgressVersion","setWorkInProgressVersion","version","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","RE_RENDER_LIMIT","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","HooksDispatcherOnMount","HooksDispatcherOnUpdate","numberOfReRenders","HooksDispatcherOnRerender","ContextOnlyDispatcher","didRenderTooFewHooks","bailoutHooks","PassiveEffect","UpdateEffect","resetHooksAfterThrow","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchAction","bind","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","eagerReducer","eagerState","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","readFromUnsubcribedMutableSource","getSnapshot","getVersion","_getVersion","_source","isSafeToReadFromSource","currentRenderVersion","snapshot","useMutableSource","getWorkInProgressRoot","dispatcher","useState","currentSnapshot","setSnapshot","stateHook","prevGetSnapshot","prevSource","prevSubscribe","useEffect","maybeNewVersion","maybeNewSnapshot","handleChange","latestGetSnapshot","latestSetSnapshot","unsubscribe","newQueue","mountMutableSource","updateMutableSource","mountState","updateState","rerenderState","pushEffect","create","destroy","deps","componentUpdateQueue","mountRef","initialValue","updateRef","mountEffectImpl","fiberFlags","hookFlags","HookHasEffect","updateEffectImpl","prevEffect","mountEffect","HookPassive","updateEffect","mountLayoutEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","concat","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","prevValue","setValue","prevTransition","updateDeferredValue","rerenderDeferredValue","startTransition","setPending","mountTransition","isPending","start","updateTransition","startRef","rerenderTransition","mountOpaqueIdentifier","makeId","id","updateOpaqueIdentifier","rerenderOpaqueIdentifier","currentState","useCallback","useContext","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useDebugValue","useDeferredValue","useTransition","useOpaqueIdentifier","unstable_isNewReconciler","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","recordPassiveEffectDuration","startPassiveEffectTimer","didReceiveUpdate","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","bailoutOnAlreadyFinishedWork","updateMemoComponent","updateLanes","isSimpleFunctionComponent","compare","resolvedType","updateSimpleMemoComponent","createFiberFromTypeAndProps","updateFunctionComponent","updateOffscreenComponent","baseLanes","pushRenderLanes","nextBaseLanes","prevBaseLanes","subtreeRenderLanes","updateLegacyHiddenComponent","updateMode","updateProfiler","markRef","updateBlock","block","data","_data","updateClassComponent","hasContext","isLegacyContextProvider","pushLegacyContextProvider","nextUnitOfWork","finishClassComponent","didCaptureError","getDerivedStateFromError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","resetHydrationState","hydrate","updateHostComponent","isDirectTextChild","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","hint","mountIncompleteClassComponent","mountIndeterminateComponent","SUSPENDED_MARKER","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseContext","suspenseState","getRemainingWorkInPrimaryTree","updateSuspenseComponent","showFallback","tryToClaimNextHydratableInstance","mountDehydratedSuspenseComponent","nextPrimaryChildren","nextFallbackChildren","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","unstable_expectedLoadTime","mountSuspensePrimaryChildren","updateDehydratedSuspenseComponent","fallbackChildFragment","mountSuspenseFallbackAfterRetryWithoutHydrating","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","createFiberFromOffscreen","fallbackChildren","progressedPrimaryFragment","createWorkInProgressOffscreenFiber","offscreenProps","currentPrimaryChildFragment","currentFallbackChildFragment","progressedLastEffect","retrySuspenseComponentWithoutHydrating","suspenseInstance","getExecutionContext","RetryAfterError","NoContext","attemptHydrationAtLane","renderDidSuspendDelayIfPossible","retry","retryDehydratedSuspenseBoundary","scheduleWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","initSuspenseListRenderState","isBackwards","tail","tailMode","lastEffectBeforeRendering","renderState","rendering","renderingStartTime","updateSuspenseListComponent","validateRevealOrder","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","updateContextProvider","providerType","hasLegacyContextChanged","updateContextConsumer","unstable_observedBits","beginWork","primaryChildLanes","hasChildWork","unresolvedProps","markUpdate","appendAllChildren","updateHostContainer","needsVisibilityToggle","isHidden","currentHostContext","oldText","newText","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","completeWork","popLegacyContext","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","fiberRoot","wasHydrated","nextDidTimeout","prevDidTimeout","hasInvisibleChildContext","renderDidSuspend","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThennables","getRenderTargetTime","previousSibling","popRenderLanes","prevIsHidden","nextIsHidden","unwindWork","unwindInterruptedWork","interruptedWork","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","console","componentName","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","e","PossiblyWeakMap","WeakMap","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","wakeable","pingCache","threadIDs","Set","has","add","ping","pingSuspendedRoot","then","throwException","sourceFiber","rootRenderLanes","currentSource","hasInvisibleParentBoundary","wakeables","currentSourceFiber","renderDidError","isAlreadyFailedLegacyErrorBoundary","PossiblyWeakSet","WeakSet","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","unmountError","captureCommitPhaseError","safelyDetachRef","refError","safelyCallDestroy","commitBeforeMutationLifeCycles","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitHookEffectListMount","schedulePassiveEffects","NoHookEffect","enqueuePendingPassiveHookEffectUnmount","enqueuePendingPassiveHookEffectMount","commitLifeCycles","finishedRoot","committedLanes","commitMount","commitSuspenseHydrationCallbacks","hideOrUnhideAllChildren","commitAttachRef","instanceToUse","commitDetachRef","currentRef","commitUnmount","renderPriorityLevel","unmountHostComponents","commitNestedUnmounts","detachFiberMutation","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","isContainer","parentStateNode","before","insertOrAppendPlacementNodeIntoContainer","insertOrAppendPlacementNode","isHost","currentParentIsValid","currentParentIsContainer","findParent","commitDeletion","commitWork","commitTextUpdate","commitSuspenseComponent","attachSuspenseRetryListeners","markCommitTimeOfFallback","primaryChildParent","retryCache","resolveRetryWakeable","isSuspenseBoundaryBeingHidden","commitResetTextContent","ceil","IsSomeRendererActing","DiscreteEventContext","LegacyUnbatchedContext","RenderContext","CommitContext","RootIncomplete","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootUpdatedLanes","workInProgressRootPingedLanes","mostRecentlyUpdatedRoot","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsRenderPriority","pendingPassiveHookEffectsMount","pendingPassiveHookEffectsUnmount","rootsWithPendingDiscreteUpdates","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","currentEventTime","currentEventWipLanes","currentEventPendingLanes","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","isTransition","schedulerPriority","schedulerLanePriority","requestRetryLane","checkForNestedUpdates","warnAboutRenderPhaseUpdatesInDEV","markUpdateLaneFromFiberToRoot","warnAboutUpdateOnUnmountedFiberInDEV","performSyncWorkOnRoot","ensureRootIsScheduled","schedulePendingInteractions","existingCallbackNode","newCallbackPriority","callbackPriority","existingCallbackPriority","newCallbackNode","performConcurrentWorkOnRoot","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","exitStatus","renderRootConcurrent","prepareFreshStack","renderRootSync","fatalError","finishedLanes","finishConcurrentRender","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","markRootSuspended_dontCallThisOneDirectly","pushToStack","popFromStack","handleError","thrownValue","erroredWork","resetCurrentDebugFiberInDEV","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","prevDispatcher","popDispatcher","prevExecutionContext","startWorkOnPendingInteractions","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","setCurrentDebugFiberInDEV","completedWork","resetChildLanes","siblingFiber","newChildLanes","commitRootImpl","commitBeforeMutationEffects","commitMutationEffects","commitLayoutEffects","pendingPassiveEffectsLanes","nextNextEffect","detachFiberAfterEffects","onCommitRootDevTools","beforeActiveInstanceBlur","commitBeforeMutationEffectOnFiber","primaryFlags","commitLayoutEffectOnFiber","flushPassiveEffectsImpl","unmountEffects","mountEffects","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","errorToIgnore","retryTimedOutBoundary","boundaryFiber","timeElapsed","originalBeginWork","FiberNode","createFiber","shouldConstruct","isReactComponent","currentDependencies","createHostRootFiber","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromLegacyHidden","elements","content","pendingChildren","FiberRootNode","createFiberRoot","hydrationCallbacks","uninitializedFiber","getContextForSubtree","parentComponent","createContainer","updateContainer","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setSuspenseHandler","findHostInstanceByFiber","hostFiber","emptyFindFiberByHostInstance","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","setCurrent","FastNoSideEffects","LinearGradient","stops","x1","y1","x2","y2","_args","fillLinear","apply","RadialGradient","fx","fy","rx","ry","cx","cy","fillRadial","Pattern","left","top","fillImage","Surface","_surface","_tagRef","_mountNode","resize","Tag","tagName","React.createElement","accessKey","className","draggable","role","style","tabIndex","_text","T","t","ReactVersion","Path"],"mappings":"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"}