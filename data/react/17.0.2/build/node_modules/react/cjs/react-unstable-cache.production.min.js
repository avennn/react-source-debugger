'use strict';

var react = require('react');

// Do not require this module directly! Use normal `invariant` calls with
// template literal strings. The messages will be replaced with error codes
// during build.
function formatProdErrorMessage(code) {
  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;

  for (let i = 1; i < arguments.length; i++) {
    url += '&args[]=' + encodeURIComponent(arguments[i]);
  }

  return "Minified React error #" + code + "; visit " + url + " for the full message or " + 'use the non-minified dev environment for full errors and additional ' + 'helpful warnings.';
}

// TODO: should there be a default cache?
const CacheContext = react.createContext(null);

function CacheImpl() {
  this.resources = new Map(); // TODO: cancellation token.
}

function createCache() {
  // $FlowFixMe
  return new CacheImpl();
}

function readCache() {
  // TODO: this doesn't subscribe.
  // But we really want load context anyway.
  const value = CacheContext._currentValue;

  if (value instanceof CacheImpl) {
    return value;
  }

  {
    {
      throw Error( formatProdErrorMessage(356));
    }
  }
}

const CacheProvider = CacheContext.Provider;

exports.CacheProvider = CacheProvider;
exports.createCache = createCache;
exports.readCache = readCache;
//# sourceMappingURL=react-unstable-cache.production.min.js.map
