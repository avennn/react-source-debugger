{"version":3,"file":"use-subscription.development.js","sources":["../../../../packages/use-subscription/src/useSubscription.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {useSyncExternalStore} from 'use-sync-external-store/shim';\n\n// Hook used for safely managing subscriptions in concurrent mode.\n//\n// In order to avoid removing and re-adding subscriptions each time this hook is called,\n// the parameters passed to this hook should be memoized in some wayâ€“\n// either by wrapping the entire params object with useMemo()\n// or by wrapping the individual callbacks with useCallback().\nexport function useSubscription<Value>({\n  // (Synchronously) returns the current value of our subscription.\n  getCurrentValue,\n\n  // This function is passed an event handler to attach to the subscription.\n  // It should return an unsubscribe function that removes the handler.\n  subscribe,\n}: {|\n  getCurrentValue: () => Value,\n  subscribe: (callback: Function) => () => void,\n|}): Value {\n  return useSyncExternalStore(subscribe, getCurrentValue);\n}\n"],"names":["useSubscription","getCurrentValue","subscribe","useSyncExternalStore"],"mappings":";;;;AAYA;AACA;AACA;AACA;AACA;;AACO,SAASA,eAAT,OAUI;AAAA,MARTC,eAQS,QARTA,eAQS;AAAA,MAJTC,SAIS,QAJTA,SAIS;AACT,SAAOC,yBAAoB,CAACD,SAAD,EAAYD,eAAZ,CAA3B;AACD;;;;"}