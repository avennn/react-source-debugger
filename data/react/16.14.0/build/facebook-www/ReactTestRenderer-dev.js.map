{"version":3,"file":"ReactTestRenderer-dev.js","sources":["../../packages/shared/forks/consoleWithStackDev.www.js","../../packages/react-reconciler/src/ReactWorkTags.js","../../packages/shared/ReactInstanceMap.js","../../packages/shared/ReactSharedInternals.js","../../packages/shared/ReactSymbols.js","../../packages/shared/getComponentName.js","../../packages/react-reconciler/src/ReactFiberFlags.js","../../packages/shared/forks/ReactFeatureFlags.test-renderer.www.js","../../packages/react-reconciler/src/ReactFiberTreeReflection.js","../../packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js","../../packages/react-test-renderer/src/ReactTestHostConfig.js","../../packages/shared/ConsolePatchingDev.js","../../packages/shared/ReactComponentStackFrame.js","../../packages/shared/checkPropTypes.js","../../packages/react-reconciler/src/ReactFiberStack.old.js","../../packages/react-reconciler/src/ReactFiberContext.old.js","../../packages/react-reconciler/src/ReactRootTags.js","../../packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","../../packages/react-reconciler/src/SchedulerWithReactIntegration.new.js","../../packages/react-reconciler/src/ReactFiberLane.js","../../packages/react-reconciler/src/SchedulerWithReactIntegration.old.js","../../packages/shared/ReactVersion.js","../../packages/react-reconciler/src/ReactTypeOfMode.js","../../packages/react-reconciler/src/ReactFiberTransition.js","../../packages/shared/objectIs.js","../../packages/shared/shallowEqual.js","../../packages/react-reconciler/src/ReactFiberComponentStack.js","../../packages/react-reconciler/src/ReactCurrentFiber.js","../../packages/react-reconciler/src/ReactStrictModeWarnings.old.js","../../packages/react-reconciler/src/ReactFiberLazyComponent.old.js","../../packages/react-reconciler/src/MaxInts.js","../../packages/react-reconciler/src/ReactFiberNewContext.old.js","../../packages/react-reconciler/src/ReactUpdateQueue.old.js","../../packages/react-reconciler/src/ReactFiberClassComponent.old.js","../../packages/react-reconciler/src/ReactChildFiber.old.js","../../packages/react-reconciler/src/ReactFiberHostContext.old.js","../../packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","../../packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","../../packages/react-reconciler/src/ReactHookEffectTags.js","../../packages/react-reconciler/src/ReactFiberHydrationContext.old.js","../../packages/react-reconciler/src/ReactMutableSource.old.js","../../packages/react-reconciler/src/ReactFiberHooks.old.js","../../packages/react-reconciler/src/ReactProfilerTimer.old.js","../../packages/react-reconciler/src/ReactFiberBeginWork.old.js","../../packages/react-reconciler/src/ReactFiberScope.old.js","../../packages/react-reconciler/src/ReactFiberCompleteWork.old.js","../../packages/react-reconciler/src/ReactFiberUnwindWork.old.js","../../packages/react-reconciler/src/ReactCapturedValue.js","../../packages/react-reconciler/src/forks/ReactFiberErrorDialog.www.js","../../packages/react-reconciler/src/ReactFiberErrorLogger.js","../../packages/react-reconciler/src/ReactFiberThrow.old.js","../../packages/shared/forks/invokeGuardedCallbackImpl.www.js","../../packages/shared/ReactErrorUtils.js","../../packages/react-reconciler/src/ReactFiberCommitWork.old.js","../../packages/react-reconciler/src/ReactTestSelectors.js","../../packages/shared/enqueueTask.js","../../packages/react-reconciler/src/ReactFiberWorkLoop.old.js","../../packages/react-reconciler/src/ReactFiberHotReloading.old.js","../../packages/react-reconciler/src/ReactFiber.old.js","../../packages/react-reconciler/src/ReactFiberRoot.old.js","../../packages/react-reconciler/src/ReactFiberReconciler.old.js","../../packages/react-test-renderer/src/ReactTestRenderer.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This refers to a WWW module.\nconst warningWWW = require('warning');\n\nexport function warn(format, ...args) {\n  if (__DEV__) {\n    printWarning('warn', format, args);\n  }\n}\n\nexport function error(format, ...args) {\n  if (__DEV__) {\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  if (__DEV__) {\n    const React = require('react');\n    const ReactSharedInternals =\n      React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    // Defensive in case this is fired before React is initialized.\n    if (ReactSharedInternals != null) {\n      const ReactDebugCurrentFrame =\n        ReactSharedInternals.ReactDebugCurrentFrame;\n      const stack = ReactDebugCurrentFrame.getStackAddendum();\n      if (stack !== '') {\n        format += '%s';\n        args.push(stack);\n      }\n    }\n    // TODO: don't ignore level and pass it down somewhere too.\n    args.unshift(format);\n    args.unshift(false);\n    warningWWW.apply(null, args);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const FundamentalComponent = 20;\nexport const ScopeComponent = 21;\nexport const Block = 22;\nexport const OffscreenComponent = 23;\nexport const LegacyHiddenComponent = 24;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nexport let REACT_ELEMENT_TYPE = 0xeac7;\nexport let REACT_PORTAL_TYPE = 0xeaca;\nexport let REACT_FRAGMENT_TYPE = 0xeacb;\nexport let REACT_STRICT_MODE_TYPE = 0xeacc;\nexport let REACT_PROFILER_TYPE = 0xead2;\nexport let REACT_PROVIDER_TYPE = 0xeacd;\nexport let REACT_CONTEXT_TYPE = 0xeace;\nexport let REACT_FORWARD_REF_TYPE = 0xead0;\nexport let REACT_SUSPENSE_TYPE = 0xead1;\nexport let REACT_SUSPENSE_LIST_TYPE = 0xead8;\nexport let REACT_MEMO_TYPE = 0xead3;\nexport let REACT_LAZY_TYPE = 0xead4;\nexport let REACT_BLOCK_TYPE = 0xead9;\nexport let REACT_SERVER_BLOCK_TYPE = 0xeada;\nexport let REACT_FUNDAMENTAL_TYPE = 0xead5;\nexport let REACT_SCOPE_TYPE = 0xead7;\nexport let REACT_OPAQUE_ID_TYPE = 0xeae0;\nexport let REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nexport let REACT_OFFSCREEN_TYPE = 0xeae2;\nexport let REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nconst MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_BLOCK_TYPE,\n} from 'shared/ReactSymbols';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentName(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentName(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n    }\n  }\n  return null;\n}\n\nexport default getComponentName;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b000000000000000000;\nexport const PerformedWork = /*                */ 0b000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b000000000000000010;\nexport const Update = /*                       */ 0b000000000000000100;\nexport const PlacementAndUpdate = /*           */ 0b000000000000000110;\nexport const Deletion = /*                     */ 0b000000000000001000;\nexport const ContentReset = /*                 */ 0b000000000000010000;\nexport const Callback = /*                     */ 0b000000000000100000;\nexport const DidCapture = /*                   */ 0b000000000001000000;\nexport const Ref = /*                          */ 0b000000000010000000;\nexport const Snapshot = /*                     */ 0b000000000100000000;\nexport const Passive = /*                      */ 0b000000001000000000;\n// TODO (effects) Remove this bit once the new reconciler is synced to the old.\nexport const PassiveUnmountPendingDev = /*     */ 0b000010000000000000;\nexport const Hydrating = /*                    */ 0b000000010000000000;\nexport const HydratingAndUpdate = /*           */ 0b000000010000000100;\n\n// Passive & Update & Callback & Ref & Snapshot\nexport const LifecycleEffectMask = /*          */ 0b000000001110100100;\n\n// Union of all host effects\nexport const HostEffectMask = /*               */ 0b000000011111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b000000100000000000;\nexport const ShouldCapture = /*                */ 0b000001000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b000100000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const PassiveStatic = /*                */ 0b001000000000000000;\n\n// Union of side effect groupings as pertains to subtreeFlags\nexport const BeforeMutationMask = /*           */ 0b000000001100001010;\nexport const MutationMask = /*                 */ 0b000000010010011110;\nexport const LayoutMask = /*                   */ 0b000000000010100100;\nexport const PassiveMask = /*                  */ 0b000000001000001000;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculting them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = /*                   */ 0b001000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b010000000000000000;\nexport const MountPassiveDev = /*              */ 0b100000000000000000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\nimport typeof * as ExportsType from './ReactFeatureFlags.test-renderer.www';\n\nexport const debugRenderPhaseSideEffectsForStrictMode = false;\nexport const enableDebugTracing = false;\nexport const enableSchedulingProfiler = false;\nexport const warnAboutDeprecatedLifecycles = true;\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = false;\nexport const enableProfilerTimer = __PROFILE__;\nexport const enableProfilerCommitHooks = false;\nexport const enableSchedulerTracing = __PROFILE__;\nexport const enableSuspenseServerRenderer = false;\nexport const enableSelectiveHydration = false;\nexport const enableBlocksAPI = false;\nexport const enableLazyElements = false;\nexport const enableSchedulerDebugging = false;\nexport const disableJavaScriptURLs = false;\nexport const disableInputAttributeSyncing = false;\nexport const enableFundamentalAPI = false;\nexport const enableScopeAPI = true;\nexport const enableCreateEventHandleAPI = false;\nexport const warnAboutUnmockedScheduler = true;\nexport const enableSuspenseCallback = true;\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\nexport const warnAboutStringRefs = false;\nexport const disableLegacyContext = false;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\nexport const enableTrustedTypesIntegration = false;\nexport const disableTextareaChildren = false;\nexport const disableModulePatternComponents = true;\nexport const warnUnstableRenderSubtreeIntoContainer = false;\nexport const warnAboutSpreadingKeyToJSX = false;\nexport const enableComponentStackLocations = true;\nexport const enableLegacyFBSupport = false;\nexport const enableFilterEmptyStringAttributesDOM = false;\nexport const skipUnmountedBoundaries = false;\n\nexport const enableNewReconciler = false;\nexport const deferRenderPhaseUpdateToNextBatch = true;\nexport const decoupleUpdatePriorityFromScheduler = false;\nexport const enableDiscreteEventFlushingChange = false;\n\nexport const enableDoubleInvokingEffects = false;\n\n// Flow magic to verify the exports of this file match the original version.\n// eslint-disable-next-line no-unused-vars\ntype Check<_X, Y: _X, X: Y = _X> = null;\n// eslint-disable-next-line no-unused-expressions\n(null: Check<ExportsType, FeatureFlagsType>);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport invariant from 'shared/invariant';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentName from 'shared/getComponentName';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  FundamentalComponent,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\nimport {enableFundamentalAPI} from 'shared/ReactFeatureFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentName(ownerFiber.type) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  invariant(\n    getNearestMountedFiber(fiber) === fiber,\n    'Unable to find node on an unmounted component.',\n  );\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n    invariant(\n      nearestMounted !== null,\n      'Unable to find node on an unmounted component.',\n    );\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      invariant(false, 'Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n        invariant(\n          didFindChild,\n          'Child was not found in either parent set. This indicates a bug ' +\n            'in React related to the return pointer. Please file an issue.',\n        );\n      }\n    }\n\n    invariant(\n      a.alternate === b,\n      \"Return fibers should always be each others' alternates. \" +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  invariant(\n    a.tag === HostRoot,\n    'Unable to find node on an unmounted component.',\n  );\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  let node: Fiber = currentParent;\n  while (true) {\n    if (node.tag === HostComponent || node.tag === HostText) {\n      return node;\n    } else if (node.child) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  let node: Fiber = currentParent;\n  while (true) {\n    if (\n      node.tag === HostComponent ||\n      node.tag === HostText ||\n      (enableFundamentalAPI && node.tag === FundamentalComponent)\n    ) {\n      return node;\n    } else if (node.child && node.tag !== HostPortal) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  invariant(\n    false,\n    'The current renderer does not support hydration. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Hydration (when unsupported)\nexport type SuspenseInstance = mixed;\nexport const supportsHydration = false;\nexport const canHydrateInstance = shim;\nexport const canHydrateTextInstance = shim;\nexport const canHydrateSuspenseInstance = shim;\nexport const isSuspenseInstancePending = shim;\nexport const isSuspenseInstanceFallback = shim;\nexport const registerSuspenseInstanceRetry = shim;\nexport const getNextHydratableSibling = shim;\nexport const getFirstHydratableChild = shim;\nexport const hydrateInstance = shim;\nexport const hydrateTextInstance = shim;\nexport const hydrateSuspenseInstance = shim;\nexport const getNextHydratableInstanceAfterSuspenseInstance = shim;\nexport const commitHydratedContainer = shim;\nexport const commitHydratedSuspenseInstance = shim;\nexport const clearSuspenseBoundary = shim;\nexport const clearSuspenseBoundaryFromContainer = shim;\nexport const didNotMatchHydratedContainerTextInstance = shim;\nexport const didNotMatchHydratedTextInstance = shim;\nexport const didNotHydrateContainerInstance = shim;\nexport const didNotHydrateInstance = shim;\nexport const didNotFindHydratableContainerInstance = shim;\nexport const didNotFindHydratableContainerTextInstance = shim;\nexport const didNotFindHydratableContainerSuspenseInstance = shim;\nexport const didNotFindHydratableInstance = shim;\nexport const didNotFindHydratableTextInstance = shim;\nexport const didNotFindHydratableSuspenseInstance = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactFundamentalComponentInstance} from 'shared/ReactTypes';\n\nimport {REACT_OPAQUE_ID_TYPE} from 'shared/ReactSymbols';\n\nexport type Type = string;\nexport type Props = Object;\nexport type Container = {|\n  children: Array<Instance | TextInstance>,\n  createNodeMock: Function,\n  tag: 'CONTAINER',\n|};\nexport type Instance = {|\n  type: string,\n  props: Object,\n  isHidden: boolean,\n  children: Array<Instance | TextInstance>,\n  internalInstanceHandle: Object,\n  rootContainerInstance: Container,\n  tag: 'INSTANCE',\n|};\nexport type TextInstance = {|\n  text: string,\n  isHidden: boolean,\n  tag: 'TEXT',\n|};\nexport type HydratableInstance = Instance | TextInstance;\nexport type PublicInstance = Instance | TextInstance;\nexport type HostContext = Object;\nexport type UpdatePayload = Object;\nexport type ChildSet = void; // Unused\nexport type TimeoutHandle = TimeoutID;\nexport type NoTimeout = -1;\nexport type EventResponder = any;\nexport opaque type OpaqueIDType =\n  | string\n  | {\n      toString: () => string | void,\n      valueOf: () => string | void,\n    };\n\nexport type RendererInspectionConfig = $ReadOnly<{||}>;\n\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoPersistence';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoHydration';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors';\n\nconst NO_CONTEXT = {};\nconst UPDATE_SIGNAL = {};\nconst nodeToInstanceMap = new WeakMap();\n\nif (__DEV__) {\n  Object.freeze(NO_CONTEXT);\n  Object.freeze(UPDATE_SIGNAL);\n}\n\nexport function getPublicInstance(inst: Instance | TextInstance): * {\n  switch (inst.tag) {\n    case 'INSTANCE':\n      const createNodeMock = inst.rootContainerInstance.createNodeMock;\n      const mockNode = createNodeMock({\n        type: inst.type,\n        props: inst.props,\n      });\n      if (typeof mockNode === 'object' && mockNode !== null) {\n        nodeToInstanceMap.set(mockNode, inst);\n      }\n      return mockNode;\n    default:\n      return inst;\n  }\n}\n\nexport function appendChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  if (__DEV__) {\n    if (!Array.isArray(parentInstance.children)) {\n      console.error(\n        'An invalid container has been provided. ' +\n          'This may indicate that another renderer is being used in addition to the test renderer. ' +\n          '(For example, ReactDOM.createPortal inside of a ReactTestRenderer tree.) ' +\n          'This is not supported.',\n      );\n    }\n  }\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function insertBefore(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n  beforeChild: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  const beforeIndex = parentInstance.children.indexOf(beforeChild);\n  parentInstance.children.splice(beforeIndex, 0, child);\n}\n\nexport function removeChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  parentInstance.children.splice(index, 1);\n}\n\nexport function clearContainer(container: Container): void {\n  container.children.splice(0);\n}\n\nexport function getRootHostContext(\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function getChildHostContext(\n  parentHostContext: HostContext,\n  type: string,\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function prepareForCommit(containerInfo: Container): null | Object {\n  // noop\n  return null;\n}\n\nexport function resetAfterCommit(containerInfo: Container): void {\n  // noop\n}\n\nexport function createInstance(\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): Instance {\n  return {\n    type,\n    props,\n    isHidden: false,\n    children: [],\n    internalInstanceHandle,\n    rootContainerInstance,\n    tag: 'INSTANCE',\n  };\n}\n\nexport function appendInitialChild(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function finalizeInitialChildren(\n  testElement: Instance,\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): boolean {\n  return false;\n}\n\nexport function prepareUpdate(\n  testElement: Instance,\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): null | {...} {\n  return UPDATE_SIGNAL;\n}\n\nexport function shouldSetTextContent(type: string, props: Props): boolean {\n  return false;\n}\n\nexport function createTextInstance(\n  text: string,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): TextInstance {\n  return {\n    text,\n    isHidden: false,\n    tag: 'TEXT',\n  };\n}\n\nexport const isPrimaryRenderer = false;\nexport const warnsIfNotActing = true;\n\nexport const scheduleTimeout = setTimeout;\nexport const cancelTimeout = clearTimeout;\nexport const noTimeout = -1;\n\n// -------------------\n//     Mutation\n// -------------------\n\nexport const supportsMutation = true;\n\nexport function commitUpdate(\n  instance: Instance,\n  updatePayload: {...},\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  instance.type = type;\n  instance.props = newProps;\n}\n\nexport function commitMount(\n  instance: Instance,\n  type: string,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  // noop\n}\n\nexport function commitTextUpdate(\n  textInstance: TextInstance,\n  oldText: string,\n  newText: string,\n): void {\n  textInstance.text = newText;\n}\n\nexport function resetTextContent(testElement: Instance): void {\n  // noop\n}\n\nexport const appendChildToContainer = appendChild;\nexport const insertInContainerBefore = insertBefore;\nexport const removeChildFromContainer = removeChild;\n\nexport function hideInstance(instance: Instance): void {\n  instance.isHidden = true;\n}\n\nexport function hideTextInstance(textInstance: TextInstance): void {\n  textInstance.isHidden = true;\n}\n\nexport function unhideInstance(instance: Instance, props: Props): void {\n  instance.isHidden = false;\n}\n\nexport function unhideTextInstance(\n  textInstance: TextInstance,\n  text: string,\n): void {\n  textInstance.isHidden = false;\n}\n\nexport function getFundamentalComponentInstance(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): Instance {\n  const {impl, props, state} = fundamentalInstance;\n  return impl.getInstance(null, props, state);\n}\n\nexport function mountFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): void {\n  const {impl, instance, props, state} = fundamentalInstance;\n  const onMount = impl.onMount;\n  if (onMount !== undefined) {\n    onMount(null, instance, props, state);\n  }\n}\n\nexport function shouldUpdateFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): boolean {\n  const {impl, prevProps, props, state} = fundamentalInstance;\n  const shouldUpdate = impl.shouldUpdate;\n  if (shouldUpdate !== undefined) {\n    return shouldUpdate(null, prevProps, props, state);\n  }\n  return true;\n}\n\nexport function updateFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): void {\n  const {impl, instance, prevProps, props, state} = fundamentalInstance;\n  const onUpdate = impl.onUpdate;\n  if (onUpdate !== undefined) {\n    onUpdate(null, instance, prevProps, props, state);\n  }\n}\n\nexport function unmountFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): void {\n  const {impl, instance, props, state} = fundamentalInstance;\n  const onUnmount = impl.onUnmount;\n  if (onUnmount !== undefined) {\n    onUnmount(null, instance, props, state);\n  }\n}\n\nexport function getInstanceFromNode(mockNode: Object) {\n  const instance = nodeToInstanceMap.get(mockNode);\n  if (instance !== undefined) {\n    return instance.internalInstanceHandle;\n  }\n  return null;\n}\n\nlet clientId: number = 0;\nexport function makeClientId(): OpaqueIDType {\n  return 'c_' + (clientId++).toString(36);\n}\n\nexport function makeClientIdInDEV(warnOnAccessInDEV: () => void): OpaqueIDType {\n  const id = 'c_' + (clientId++).toString(36);\n  return {\n    toString() {\n      warnOnAccessInDEV();\n      return id;\n    },\n    valueOf() {\n      warnOnAccessInDEV();\n      return id;\n    },\n  };\n}\n\nexport function isOpaqueHydratingObject(value: mixed): boolean {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    value.$$typeof === REACT_OPAQUE_ID_TYPE\n  );\n}\n\nexport function makeOpaqueHydratingObject(\n  attemptToReadValue: () => void,\n): OpaqueIDType {\n  return {\n    $$typeof: REACT_OPAQUE_ID_TYPE,\n    toString: attemptToReadValue,\n    valueOf: attemptToReadValue,\n  };\n}\n\nexport function beforeActiveInstanceBlur() {\n  // noop\n}\n\nexport function afterActiveInstanceBlur() {\n  // noop\n}\n\nexport function preparePortalMount(portalInstance: Instance): void {\n  // noop\n}\n\nexport function prepareScopeUpdate(scopeInstance: Object, inst: Object): void {\n  nodeToInstanceMap.set(scopeInstance, inst);\n}\n\nexport function getInstanceFromScope(scopeInstance: Object): null | Object {\n  return nodeToInstanceMap.get(scopeInstance) || null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\n\nlet disabledDepth = 0;\nlet prevLog;\nlet prevInfo;\nlet prevWarn;\nlet prevError;\nlet prevGroup;\nlet prevGroupCollapsed;\nlet prevGroupEnd;\n\nfunction disabledLog() {}\ndisabledLog.__reactDisabledLog = true;\n\nexport function disableLogs(): void {\n  if (__DEV__) {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd;\n      // https://github.com/facebook/react/issues/19099\n      const props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true,\n      };\n      // $FlowFixMe Flow thinks console is immutable.\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props,\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n    disabledDepth++;\n  }\n}\n\nexport function reenableLogs(): void {\n  if (__DEV__) {\n    disabledDepth--;\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      const props = {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n      };\n      // $FlowFixMe Flow thinks console is immutable.\n      Object.defineProperties(console, {\n        log: {...props, value: prevLog},\n        info: {...props, value: prevInfo},\n        warn: {...props, value: prevWarn},\n        error: {...props, value: prevError},\n        group: {...props, value: prevGroup},\n        groupCollapsed: {...props, value: prevGroupCollapsed},\n        groupEnd: {...props, value: prevGroupEnd},\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n    if (disabledDepth < 0) {\n      console.error(\n        'disabledDepth fell below zero. ' +\n          'This is a bug in React. Please file an issue.',\n      );\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {enableComponentStackLocations} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_BLOCK_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                const frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(Object.prototype.hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentName(type) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    invariant(\n      contextStackCursor.current === emptyContextObject,\n      'Unexpected context found on stack. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentName(type) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      invariant(\n        contextKey in childContextTypes,\n        '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n        getComponentName(type) || 'Unknown',\n        contextKey,\n      );\n    }\n    if (__DEV__) {\n      const name = getComponentName(type) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    invariant(\n      instance,\n      'Expected to have an instance by this point. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    invariant(\n      isFiberMounted(fiber) && fiber.tag === ClassComponent,\n      'Expected subtree parent to be a mounted class component. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n    invariant(\n      false,\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1 | 2;\n\nexport const LegacyRoot = 0;\nexport const BlockingRoot = 1;\nexport const ConcurrentRoot = 2;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableProfilerTimer} from 'shared/ReactFeatureFlags';\n\nimport type {Fiber, FiberRoot, ReactPriorityLevel} from './ReactInternalTypes';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport {DidCapture} from './ReactFiberFlags';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    rendererID = hook.inject(internals);\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  // DevTools exists\n  return true;\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(\n  root: FiberRoot,\n  priorityLevel: ReactPriorityLevel,\n) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          priorityLevel,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\nimport {__interactionsRef} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport {\n  SyncLanePriority,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\n\nconst {\n  unstable_runWithPriority: Scheduler_runWithPriority,\n  unstable_scheduleCallback: Scheduler_scheduleCallback,\n  unstable_cancelCallback: Scheduler_cancelCallback,\n  unstable_shouldYield: Scheduler_shouldYield,\n  unstable_requestPaint: Scheduler_requestPaint,\n  unstable_now: Scheduler_now,\n  unstable_getCurrentPriorityLevel: Scheduler_getCurrentPriorityLevel,\n  unstable_ImmediatePriority: Scheduler_ImmediatePriority,\n  unstable_UserBlockingPriority: Scheduler_UserBlockingPriority,\n  unstable_NormalPriority: Scheduler_NormalPriority,\n  unstable_LowPriority: Scheduler_LowPriority,\n  unstable_IdlePriority: Scheduler_IdlePriority,\n} = Scheduler;\n\nif (enableSchedulerTracing) {\n  // Provide explicit error message when production+profiling bundle of e.g.\n  // react-dom is used with production (non-profiling) bundle of\n  // scheduler/tracing\n  invariant(\n    __interactionsRef != null && __interactionsRef.current != null,\n    'It is not supported to run the profiling version of a renderer (for ' +\n      'example, `react-dom/profiling`) without also replacing the ' +\n      '`scheduler/tracing` module with `scheduler/tracing-profiling`. Your ' +\n      'bundler might have a setting for aliasing both modules. Learn more at ' +\n      'https://reactjs.org/link/profiling',\n  );\n}\n\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\ntype SchedulerCallbackOptions = {timeout?: number, ...};\n\nconst fakeCallbackNode = {};\n\n// Except for NoPriority, these correspond to Scheduler priorities. We use\n// ascending numbers so we can compare them like numbers. They start at 90 to\n// avoid clashing with Scheduler's priorities.\nexport const ImmediatePriority: ReactPriorityLevel = 99;\nexport const UserBlockingPriority: ReactPriorityLevel = 98;\nexport const NormalPriority: ReactPriorityLevel = 97;\nexport const LowPriority: ReactPriorityLevel = 96;\nexport const IdlePriority: ReactPriorityLevel = 95;\n// NoPriority is the absence of priority. Also React-only.\nexport const NoPriority: ReactPriorityLevel = 90;\n\nexport const shouldYield = Scheduler_shouldYield;\nexport const requestPaint =\n  // Fall back gracefully if we're running an older version of Scheduler.\n  Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : () => {};\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet immediateQueueCallbackNode: mixed | null = null;\nlet isFlushingSyncQueue: boolean = false;\nconst initialTimeMs: number = Scheduler_now();\n\n// If the initial timestamp is reasonably small, use Scheduler's `now` directly.\n// This will be the case for modern browsers that support `performance.now`. In\n// older browsers, Scheduler falls back to `Date.now`, which returns a Unix\n// timestamp. In that case, subtract the module initialization time to simulate\n// the behavior of performance.now and keep our times small enough to fit\n// within 32 bits.\n// TODO: Consider lifting this into Scheduler.\nexport const now =\n  initialTimeMs < 10000 ? Scheduler_now : () => Scheduler_now() - initialTimeMs;\n\nexport function getCurrentPriorityLevel(): ReactPriorityLevel {\n  switch (Scheduler_getCurrentPriorityLevel()) {\n    case Scheduler_ImmediatePriority:\n      return ImmediatePriority;\n    case Scheduler_UserBlockingPriority:\n      return UserBlockingPriority;\n    case Scheduler_NormalPriority:\n      return NormalPriority;\n    case Scheduler_LowPriority:\n      return LowPriority;\n    case Scheduler_IdlePriority:\n      return IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nfunction reactPriorityToSchedulerPriority(reactPriorityLevel) {\n  switch (reactPriorityLevel) {\n    case ImmediatePriority:\n      return Scheduler_ImmediatePriority;\n    case UserBlockingPriority:\n      return Scheduler_UserBlockingPriority;\n    case NormalPriority:\n      return Scheduler_NormalPriority;\n    case LowPriority:\n      return Scheduler_LowPriority;\n    case IdlePriority:\n      return Scheduler_IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nexport function runWithPriority<T>(\n  reactPriorityLevel: ReactPriorityLevel,\n  fn: () => T,\n): T {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_runWithPriority(priorityLevel, fn);\n}\n\nexport function scheduleCallback(\n  reactPriorityLevel: ReactPriorityLevel,\n  callback: SchedulerCallback,\n  options: SchedulerCallbackOptions | void | null,\n) {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_scheduleCallback(priorityLevel, callback, options);\n}\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n    // Flush the queue in the next tick, at the earliest.\n    immediateQueueCallbackNode = Scheduler_scheduleCallback(\n      Scheduler_ImmediatePriority,\n      flushSyncCallbackQueueImpl,\n    );\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n  return fakeCallbackNode;\n}\n\nexport function cancelCallback(callbackNode: mixed) {\n  if (callbackNode !== fakeCallbackNode) {\n    Scheduler_cancelCallback(callbackNode);\n  }\n}\n\nexport function flushSyncCallbackQueue(): boolean {\n  if (immediateQueueCallbackNode !== null) {\n    const node = immediateQueueCallbackNode;\n    immediateQueueCallbackNode = null;\n    Scheduler_cancelCallback(node);\n  }\n  return flushSyncCallbackQueueImpl();\n}\n\nfunction flushSyncCallbackQueueImpl() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrancy.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        setCurrentUpdateLanePriority(SyncLanePriority);\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n        isFlushingSyncQueue = false;\n      }\n    } else {\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        isFlushingSyncQueue = false;\n      }\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, ReactPriorityLevel} from './ReactInternalTypes';\n\nexport opaque type LanePriority =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17;\nexport opaque type Lanes = number;\nexport opaque type Lane = number;\nexport opaque type LaneMap<T> = Array<T>;\n\nimport invariant from 'shared/invariant';\n\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  LowPriority as LowSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n  NoPriority as NoSchedulerPriority,\n} from './SchedulerWithReactIntegration.new';\n\nexport const SyncLanePriority: LanePriority = 15;\nexport const SyncBatchedLanePriority: LanePriority = 14;\n\nconst InputDiscreteHydrationLanePriority: LanePriority = 13;\nexport const InputDiscreteLanePriority: LanePriority = 12;\n\nconst InputContinuousHydrationLanePriority: LanePriority = 11;\nexport const InputContinuousLanePriority: LanePriority = 10;\n\nconst DefaultHydrationLanePriority: LanePriority = 9;\nexport const DefaultLanePriority: LanePriority = 8;\n\nconst TransitionHydrationPriority: LanePriority = 7;\nexport const TransitionPriority: LanePriority = 6;\n\nconst RetryLanePriority: LanePriority = 5;\n\nconst SelectiveHydrationLanePriority: LanePriority = 4;\n\nconst IdleHydrationLanePriority: LanePriority = 3;\nconst IdleLanePriority: LanePriority = 2;\n\nconst OffscreenLanePriority: LanePriority = 1;\n\nexport const NoLanePriority: LanePriority = 0;\n\nconst TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\nexport const SyncBatchedLane: Lane = /*                 */ 0b0000000000000000000000000000010;\n\nexport const InputDiscreteHydrationLane: Lane = /*      */ 0b0000000000000000000000000000100;\nconst InputDiscreteLanes: Lanes = /*                    */ 0b0000000000000000000000000011000;\n\nconst InputContinuousHydrationLane: Lane = /*           */ 0b0000000000000000000000000100000;\nconst InputContinuousLanes: Lanes = /*                  */ 0b0000000000000000000000011000000;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000100000000;\nexport const DefaultLanes: Lanes = /*                   */ 0b0000000000000000000111000000000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000001000000000000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111110000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000011110000000000000000000000;\n\nexport const SomeRetryLane: Lanes = /*                  */ 0b0000010000000000000000000000000;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0000100000000000000000000000000;\n\nconst NonIdleLanes = /*                                 */ 0b0000111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0001000000000000000000000000000;\nconst IdleLanes: Lanes = /*                             */ 0b0110000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\nexport const NoTimestamp = -1;\n\nlet currentUpdateLanePriority: LanePriority = NoLanePriority;\n\nexport function getCurrentUpdateLanePriority(): LanePriority {\n  return currentUpdateLanePriority;\n}\n\nexport function setCurrentUpdateLanePriority(newLanePriority: LanePriority) {\n  currentUpdateLanePriority = newLanePriority;\n}\n\n// \"Registers\" used to \"return\" multiple values\n// Used by getHighestPriorityLanes and getNextLanes:\nlet return_highestLanePriority: LanePriority = DefaultLanePriority;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  if ((SyncLane & lanes) !== NoLanes) {\n    return_highestLanePriority = SyncLanePriority;\n    return SyncLane;\n  }\n  if ((SyncBatchedLane & lanes) !== NoLanes) {\n    return_highestLanePriority = SyncBatchedLanePriority;\n    return SyncBatchedLane;\n  }\n  if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {\n    return_highestLanePriority = InputDiscreteHydrationLanePriority;\n    return InputDiscreteHydrationLane;\n  }\n  const inputDiscreteLanes = InputDiscreteLanes & lanes;\n  if (inputDiscreteLanes !== NoLanes) {\n    return_highestLanePriority = InputDiscreteLanePriority;\n    return inputDiscreteLanes;\n  }\n  if ((lanes & InputContinuousHydrationLane) !== NoLanes) {\n    return_highestLanePriority = InputContinuousHydrationLanePriority;\n    return InputContinuousHydrationLane;\n  }\n  const inputContinuousLanes = InputContinuousLanes & lanes;\n  if (inputContinuousLanes !== NoLanes) {\n    return_highestLanePriority = InputContinuousLanePriority;\n    return inputContinuousLanes;\n  }\n  if ((lanes & DefaultHydrationLane) !== NoLanes) {\n    return_highestLanePriority = DefaultHydrationLanePriority;\n    return DefaultHydrationLane;\n  }\n  const defaultLanes = DefaultLanes & lanes;\n  if (defaultLanes !== NoLanes) {\n    return_highestLanePriority = DefaultLanePriority;\n    return defaultLanes;\n  }\n  if ((lanes & TransitionHydrationLane) !== NoLanes) {\n    return_highestLanePriority = TransitionHydrationPriority;\n    return TransitionHydrationLane;\n  }\n  const transitionLanes = TransitionLanes & lanes;\n  if (transitionLanes !== NoLanes) {\n    return_highestLanePriority = TransitionPriority;\n    return transitionLanes;\n  }\n  const retryLanes = RetryLanes & lanes;\n  if (retryLanes !== NoLanes) {\n    return_highestLanePriority = RetryLanePriority;\n    return retryLanes;\n  }\n  if (lanes & SelectiveHydrationLane) {\n    return_highestLanePriority = SelectiveHydrationLanePriority;\n    return SelectiveHydrationLane;\n  }\n  if ((lanes & IdleHydrationLane) !== NoLanes) {\n    return_highestLanePriority = IdleHydrationLanePriority;\n    return IdleHydrationLane;\n  }\n  const idleLanes = IdleLanes & lanes;\n  if (idleLanes !== NoLanes) {\n    return_highestLanePriority = IdleLanePriority;\n    return idleLanes;\n  }\n  if ((OffscreenLane & lanes) !== NoLanes) {\n    return_highestLanePriority = OffscreenLanePriority;\n    return OffscreenLane;\n  }\n  if (__DEV__) {\n    console.error('Should have found matching lanes. This is a bug in React.');\n  }\n  // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n  return_highestLanePriority = DefaultLanePriority;\n  return lanes;\n}\n\nexport function schedulerPriorityToLanePriority(\n  schedulerPriorityLevel: ReactPriorityLevel,\n): LanePriority {\n  switch (schedulerPriorityLevel) {\n    case ImmediateSchedulerPriority:\n      return SyncLanePriority;\n    case UserBlockingSchedulerPriority:\n      return InputContinuousLanePriority;\n    case NormalSchedulerPriority:\n    case LowSchedulerPriority:\n      // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.\n      return DefaultLanePriority;\n    case IdleSchedulerPriority:\n      return IdleLanePriority;\n    default:\n      return NoLanePriority;\n  }\n}\n\nexport function lanePriorityToSchedulerPriority(\n  lanePriority: LanePriority,\n): ReactPriorityLevel {\n  switch (lanePriority) {\n    case SyncLanePriority:\n    case SyncBatchedLanePriority:\n      return ImmediateSchedulerPriority;\n    case InputDiscreteHydrationLanePriority:\n    case InputDiscreteLanePriority:\n    case InputContinuousHydrationLanePriority:\n    case InputContinuousLanePriority:\n      return UserBlockingSchedulerPriority;\n    case DefaultHydrationLanePriority:\n    case DefaultLanePriority:\n    case TransitionHydrationPriority:\n    case TransitionPriority:\n    case SelectiveHydrationLanePriority:\n    case RetryLanePriority:\n      return NormalSchedulerPriority;\n    case IdleHydrationLanePriority:\n    case IdleLanePriority:\n    case OffscreenLanePriority:\n      return IdleSchedulerPriority;\n    case NoLanePriority:\n      return NoSchedulerPriority;\n    default:\n      invariant(\n        false,\n        'Invalid update priority: %s. This is a bug in React.',\n        lanePriority,\n      );\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return_highestLanePriority = NoLanePriority;\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n  let nextLanePriority = NoLanePriority;\n\n  const expiredLanes = root.expiredLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Check if any work has expired.\n  if (expiredLanes !== NoLanes) {\n    nextLanes = expiredLanes;\n    nextLanePriority = return_highestLanePriority = SyncLanePriority;\n  } else {\n    // Do not work on any idle work until all the non-idle work has finished,\n    // even if the work is suspended.\n    const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n    if (nonIdlePendingLanes !== NoLanes) {\n      const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n      if (nonIdleUnblockedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        nextLanePriority = return_highestLanePriority;\n      } else {\n        const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n        if (nonIdlePingedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          nextLanePriority = return_highestLanePriority;\n        }\n      }\n    } else {\n      // The only remaining work is Idle.\n      const unblockedLanes = pendingLanes & ~suspendedLanes;\n      if (unblockedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(unblockedLanes);\n        nextLanePriority = return_highestLanePriority;\n      } else {\n        if (pingedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(pingedLanes);\n          nextLanePriority = return_highestLanePriority;\n        }\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If there are higher priority lanes, we'll include them even if they\n  // are suspended.\n  nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    getHighestPriorityLanes(wipLanes);\n    const wipLanePriority = return_highestLanePriority;\n    if (nextLanePriority <= wipLanePriority) {\n      return wipLanes;\n    } else {\n      return_highestLanePriority = nextLanePriority;\n    }\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  // TODO: Expiration heuristic is constant per lane, so could use a map.\n  getHighestPriorityLanes(lane);\n  const priority = return_highestLanePriority;\n  if (priority >= InputContinuousLanePriority) {\n    // User interactions should expire slightly more quickly.\n    //\n    // NOTE: This is set to the corresponding constant as in Scheduler.js. When\n    // we made it larger, a product metric in www regressed, suggesting there's\n    // a user interaction that's being starved by a series of synchronous\n    // updates. If that theory is correct, the proper solution is to fix the\n    // starvation. However, this scenario supports the idea that expiration\n    // times are an important safeguard when starvation does happen.\n    //\n    // Also note that, in the case of user input specifically, this will soon no\n    // longer be an issue because we plan to make user input synchronous by\n    // default (until you enter `startTransition`, of course.)\n    //\n    // If weren't planning to make these updates synchronous soon anyway, I\n    // would probably make this number a configurable parameter.\n    return currentTime + 250;\n  } else if (priority >= TransitionPriority) {\n    return currentTime + 5000;\n  } else {\n    // Anything idle priority or lower should never expire.\n    return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function returnNextLanesPriority() {\n  return return_highestLanePriority;\n}\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be a pure function, so that it always returns the same lane for given inputs.\nexport function findUpdateLane(\n  lanePriority: LanePriority,\n  wipLanes: Lanes,\n): Lane {\n  switch (lanePriority) {\n    case NoLanePriority:\n      break;\n    case SyncLanePriority:\n      return SyncLane;\n    case SyncBatchedLanePriority:\n      return SyncBatchedLane;\n    case InputDiscreteLanePriority: {\n      const lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // Shift to the next priority level\n        return findUpdateLane(InputContinuousLanePriority, wipLanes);\n      }\n      return lane;\n    }\n    case InputContinuousLanePriority: {\n      const lane = pickArbitraryLane(InputContinuousLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // Shift to the next priority level\n        return findUpdateLane(DefaultLanePriority, wipLanes);\n      }\n      return lane;\n    }\n    case DefaultLanePriority: {\n      let lane = pickArbitraryLane(DefaultLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // If all the default lanes are already being worked on, look for a\n        // lane in the transition range.\n        lane = pickArbitraryLane(TransitionLanes & ~wipLanes);\n        if (lane === NoLane) {\n          // All the transition lanes are taken, too. This should be very\n          // rare, but as a last resort, pick a default lane. This will have\n          // the effect of interrupting the current work-in-progress render.\n          lane = pickArbitraryLane(DefaultLanes);\n        }\n      }\n      return lane;\n    }\n    case TransitionPriority: // Should be handled by findTransitionLane instead\n    case RetryLanePriority: // Should be handled by findRetryLane instead\n      break;\n    case IdleLanePriority:\n      let lane = pickArbitraryLane(IdleLanes & ~wipLanes);\n      if (lane === NoLane) {\n        lane = pickArbitraryLane(IdleLanes);\n      }\n      return lane;\n    default:\n      // The remaining priorities are not valid for updates\n      break;\n  }\n  invariant(\n    false,\n    'Invalid update priority: %s. This is a bug in React.',\n    lanePriority,\n  );\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be pure function, so that it always returns the same lane for given inputs.\nexport function findTransitionLane(wipLanes: Lanes, pendingLanes: Lanes): Lane {\n  // First look for lanes that are completely unclaimed, i.e. have no\n  // pending work.\n  let lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);\n  if (lane === NoLane) {\n    // If all lanes have pending work, look for a lane that isn't currently\n    // being worked on.\n    lane = pickArbitraryLane(TransitionLanes & ~wipLanes);\n    if (lane === NoLane) {\n      // If everything is being worked on, pick any lane. This has the\n      // effect of interrupting the current work-in-progress.\n      lane = pickArbitraryLane(TransitionLanes);\n    }\n  }\n  return lane;\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be pure function, so that it always returns the same lane for given inputs.\nexport function findRetryLane(wipLanes: Lanes): Lane {\n  // This is a fork of `findUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  let lane = pickArbitraryLane(RetryLanes & ~wipLanes);\n  if (lane === NoLane) {\n    lane = pickArbitraryLane(RetryLanes);\n  }\n  return lane;\n}\n\nfunction getHighestPriorityLane(lanes: Lanes) {\n  return lanes & -lanes;\n}\n\nfunction getLowestPriorityLane(lanes: Lanes): Lane {\n  // This finds the most significant non-zero bit.\n  const index = 31 - clz32(lanes);\n  return index < 0 ? NoLanes : 1 << index;\n}\n\nfunction getEqualOrHigherPriorityLanes(lanes: Lanes | Lane): Lanes {\n  return (getLowestPriorityLane(lanes) << 1) - 1;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function higherLanePriority(\n  a: LanePriority,\n  b: LanePriority,\n): LanePriority {\n  return a !== NoLanePriority && a > b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  return new Array(TotalLanes).fill(initial);\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // TODO: Theoretically, any update to any lane can unblock any other lane. But\n  // it's not practical to try every single possible combination. We need a\n  // heuristic to decide which lanes to attempt to render, and in which batches.\n  // For now, we use the same heuristic as in the old ExpirationTimes model:\n  // retry any lane at equal or lower priority, but don't try updates at higher\n  // priority without also including the lower priority updates. This works well\n  // when considering updates across different priority levels, but isn't\n  // sufficient for updates within the same priority, since we want to treat\n  // those updates as parallel.\n\n  // Unsuspend any update at equal or lower priority.\n  const higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111\n\n  root.suspendedLanes &= higherPriorityLanes;\n  root.pingedLanes &= higherPriorityLanes;\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootExpired(root: FiberRoot, expiredLanes: Lanes) {\n  root.expiredLanes |= expiredLanes & root.pendingLanes;\n}\n\nexport function markDiscreteUpdatesExpired(root: FiberRoot) {\n  root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;\n}\n\nexport function hasDiscreteLanes(lanes: Lanes) {\n  return (lanes & InputDiscreteLanes) !== NoLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = 0;\n  root.pingedLanes = 0;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  root.entangledLanes |= entangledLanes;\n\n  const entanglements = root.entanglements;\n  let lanes = entangledLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] |= entangledLanes;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  getHighestPriorityLanes(renderLanes);\n  const highestLanePriority = return_highestLanePriority;\n\n  let lane;\n  switch (highestLanePriority) {\n    case SyncLanePriority:\n    case SyncBatchedLanePriority:\n      lane = NoLane;\n      break;\n    case InputDiscreteHydrationLanePriority:\n    case InputDiscreteLanePriority:\n      lane = InputDiscreteHydrationLane;\n      break;\n    case InputContinuousHydrationLanePriority:\n    case InputContinuousLanePriority:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultHydrationLanePriority:\n    case DefaultLanePriority:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionHydrationPriority:\n    case TransitionPriority:\n      lane = TransitionHydrationLane;\n      break;\n    case RetryLanePriority:\n      // Shouldn't be reachable under normal circumstances, so there's no\n      // dedicated lane for retry priority. Use the one for long transitions.\n      lane = TransitionHydrationLane;\n      break;\n    case SelectiveHydrationLanePriority:\n      lane = SelectiveHydrationLane;\n      break;\n    case IdleHydrationLanePriority:\n    case IdleLanePriority:\n      lane = IdleHydrationLane;\n      break;\n    case OffscreenLanePriority:\n    case NoLanePriority:\n      lane = NoLane;\n      break;\n    default:\n      invariant(false, 'Invalid lane: %s. This is a bug in React.', lane);\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nconst clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros. Only used on lanes, so assume input is an integer.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(lanes: Lanes | Lane) {\n  if (lanes === 0) {\n    return 32;\n  }\n  return (31 - ((log(lanes) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\nimport {__interactionsRef} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport {\n  SyncLanePriority,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\n\nconst {\n  unstable_runWithPriority: Scheduler_runWithPriority,\n  unstable_scheduleCallback: Scheduler_scheduleCallback,\n  unstable_cancelCallback: Scheduler_cancelCallback,\n  unstable_shouldYield: Scheduler_shouldYield,\n  unstable_requestPaint: Scheduler_requestPaint,\n  unstable_now: Scheduler_now,\n  unstable_getCurrentPriorityLevel: Scheduler_getCurrentPriorityLevel,\n  unstable_ImmediatePriority: Scheduler_ImmediatePriority,\n  unstable_UserBlockingPriority: Scheduler_UserBlockingPriority,\n  unstable_NormalPriority: Scheduler_NormalPriority,\n  unstable_LowPriority: Scheduler_LowPriority,\n  unstable_IdlePriority: Scheduler_IdlePriority,\n} = Scheduler;\n\nif (enableSchedulerTracing) {\n  // Provide explicit error message when production+profiling bundle of e.g.\n  // react-dom is used with production (non-profiling) bundle of\n  // scheduler/tracing\n  invariant(\n    __interactionsRef != null && __interactionsRef.current != null,\n    'It is not supported to run the profiling version of a renderer (for ' +\n      'example, `react-dom/profiling`) without also replacing the ' +\n      '`scheduler/tracing` module with `scheduler/tracing-profiling`. Your ' +\n      'bundler might have a setting for aliasing both modules. Learn more at ' +\n      'https://reactjs.org/link/profiling',\n  );\n}\n\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\ntype SchedulerCallbackOptions = {timeout?: number, ...};\n\nconst fakeCallbackNode = {};\n\n// Except for NoPriority, these correspond to Scheduler priorities. We use\n// ascending numbers so we can compare them like numbers. They start at 90 to\n// avoid clashing with Scheduler's priorities.\nexport const ImmediatePriority: ReactPriorityLevel = 99;\nexport const UserBlockingPriority: ReactPriorityLevel = 98;\nexport const NormalPriority: ReactPriorityLevel = 97;\nexport const LowPriority: ReactPriorityLevel = 96;\nexport const IdlePriority: ReactPriorityLevel = 95;\n// NoPriority is the absence of priority. Also React-only.\nexport const NoPriority: ReactPriorityLevel = 90;\n\nexport const shouldYield = Scheduler_shouldYield;\nexport const requestPaint =\n  // Fall back gracefully if we're running an older version of Scheduler.\n  Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : () => {};\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet immediateQueueCallbackNode: mixed | null = null;\nlet isFlushingSyncQueue: boolean = false;\nconst initialTimeMs: number = Scheduler_now();\n\n// If the initial timestamp is reasonably small, use Scheduler's `now` directly.\n// This will be the case for modern browsers that support `performance.now`. In\n// older browsers, Scheduler falls back to `Date.now`, which returns a Unix\n// timestamp. In that case, subtract the module initialization time to simulate\n// the behavior of performance.now and keep our times small enough to fit\n// within 32 bits.\n// TODO: Consider lifting this into Scheduler.\nexport const now =\n  initialTimeMs < 10000 ? Scheduler_now : () => Scheduler_now() - initialTimeMs;\n\nexport function getCurrentPriorityLevel(): ReactPriorityLevel {\n  switch (Scheduler_getCurrentPriorityLevel()) {\n    case Scheduler_ImmediatePriority:\n      return ImmediatePriority;\n    case Scheduler_UserBlockingPriority:\n      return UserBlockingPriority;\n    case Scheduler_NormalPriority:\n      return NormalPriority;\n    case Scheduler_LowPriority:\n      return LowPriority;\n    case Scheduler_IdlePriority:\n      return IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nfunction reactPriorityToSchedulerPriority(reactPriorityLevel) {\n  switch (reactPriorityLevel) {\n    case ImmediatePriority:\n      return Scheduler_ImmediatePriority;\n    case UserBlockingPriority:\n      return Scheduler_UserBlockingPriority;\n    case NormalPriority:\n      return Scheduler_NormalPriority;\n    case LowPriority:\n      return Scheduler_LowPriority;\n    case IdlePriority:\n      return Scheduler_IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nexport function runWithPriority<T>(\n  reactPriorityLevel: ReactPriorityLevel,\n  fn: () => T,\n): T {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_runWithPriority(priorityLevel, fn);\n}\n\nexport function scheduleCallback(\n  reactPriorityLevel: ReactPriorityLevel,\n  callback: SchedulerCallback,\n  options: SchedulerCallbackOptions | void | null,\n) {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_scheduleCallback(priorityLevel, callback, options);\n}\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n    // Flush the queue in the next tick, at the earliest.\n    immediateQueueCallbackNode = Scheduler_scheduleCallback(\n      Scheduler_ImmediatePriority,\n      flushSyncCallbackQueueImpl,\n    );\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n  return fakeCallbackNode;\n}\n\nexport function cancelCallback(callbackNode: mixed) {\n  if (callbackNode !== fakeCallbackNode) {\n    Scheduler_cancelCallback(callbackNode);\n  }\n}\n\nexport function flushSyncCallbackQueue() {\n  if (immediateQueueCallbackNode !== null) {\n    const node = immediateQueueCallbackNode;\n    immediateQueueCallbackNode = null;\n    Scheduler_cancelCallback(node);\n  }\n  flushSyncCallbackQueueImpl();\n}\n\nfunction flushSyncCallbackQueueImpl() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrancy.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        setCurrentUpdateLanePriority(SyncLanePriority);\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n        isFlushingSyncQueue = false;\n      }\n    } else {\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        isFlushingSyncQueue = false;\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\nexport default '17.0.0-alpha.0';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = 0b00000;\nexport const StrictMode = 0b00001;\n// TODO: Remove BlockingMode and ConcurrentMode by reading from the root\n// tag instead\nexport const BlockingMode = 0b00010;\nexport const ConcurrentMode = 0b00100;\nexport const ProfileMode = 0b01000;\nexport const DebugTracingMode = 0b10000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = 0;\n\nexport function requestCurrentTransition(): number {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !hasOwnProperty.call(objB, keysA[i]) ||\n      !is(objA[keysA[i]], objB[keysA[i]])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  Block,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case Block:\n      return describeFunctionComponentFrame(fiber.type._render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentName from 'shared/getComponentName';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentName(owner.type);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport getComponentName from 'shared/getComponentName';\nimport {StrictMode} from './ReactTypeOfMode';\n\ntype FiberArray = Array<Fiber>;\ntype FiberToFiberComponentsMap = Map<Fiber, FiberArray>;\n\nconst ReactStrictModeWarnings = {\n  recordUnsafeLifecycleWarnings(fiber: Fiber, instance: any): void {},\n  flushPendingUnsafeLifecycleWarnings(): void {},\n  recordLegacyContextWarning(fiber: Fiber, instance: any): void {},\n  flushLegacyContextWarning(): void {},\n  discardPendingWarnings(): void {},\n};\n\nif (__DEV__) {\n  const findStrictRoot = (fiber: Fiber): Fiber | null => {\n    let maybeStrictRoot = null;\n\n    let node = fiber;\n    while (node !== null) {\n      if (node.mode & StrictMode) {\n        maybeStrictRoot = node;\n      }\n      node = node.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  const setToSortedString = set => {\n    const array = [];\n    set.forEach(value => {\n      array.push(value);\n    });\n    return array.sort().join(', ');\n  };\n\n  let pendingComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillMountWarnings: Array<Fiber> = [];\n  let pendingComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillReceivePropsWarnings: Array<Fiber> = [];\n  let pendingComponentWillUpdateWarnings: Array<Fiber> = [];\n  let pendingUNSAFE_ComponentWillUpdateWarnings: Array<Fiber> = [];\n\n  // Tracks components we have already warned about.\n  const didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    if (\n      typeof instance.componentWillMount === 'function' &&\n      // Don't warn about react-lifecycles-compat polyfilled components.\n      instance.componentWillMount.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictMode &&\n      typeof instance.UNSAFE_componentWillMount === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillReceiveProps === 'function' &&\n      instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictMode &&\n      typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n    }\n\n    if (\n      typeof instance.componentWillUpdate === 'function' &&\n      instance.componentWillUpdate.__suppressDeprecationWarning !== true\n    ) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n\n    if (\n      fiber.mode & StrictMode &&\n      typeof instance.UNSAFE_componentWillUpdate === 'function'\n    ) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = () => {\n    // We do an initial pass to gather component names\n    const componentWillMountUniqueNames = new Set();\n    if (pendingComponentWillMountWarnings.length > 0) {\n      pendingComponentWillMountWarnings.forEach(fiber => {\n        componentWillMountUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingComponentWillMountWarnings = [];\n    }\n\n    const UNSAFE_componentWillMountUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillMountWarnings.forEach(fiber => {\n        UNSAFE_componentWillMountUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n      pendingUNSAFE_ComponentWillMountWarnings = [];\n    }\n\n    const componentWillReceivePropsUniqueNames = new Set();\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      pendingComponentWillReceivePropsWarnings.forEach(fiber => {\n        componentWillReceivePropsUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    const UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(fiber => {\n        UNSAFE_componentWillReceivePropsUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    }\n\n    const componentWillUpdateUniqueNames = new Set();\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      pendingComponentWillUpdateWarnings.forEach(fiber => {\n        componentWillUpdateUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingComponentWillUpdateWarnings = [];\n    }\n\n    const UNSAFE_componentWillUpdateUniqueNames = new Set();\n    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(fiber => {\n        UNSAFE_componentWillUpdateUniqueNames.add(\n          getComponentName(fiber.type) || 'Component',\n        );\n        didWarnAboutUnsafeLifecycles.add(fiber.type);\n      });\n\n      pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    }\n\n    // Finally, we flush all the warnings\n    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n    if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillMountUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillReceivePropsUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, \" +\n          'refactor your code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        UNSAFE_componentWillUpdateUniqueNames,\n      );\n      console.error(\n        'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +\n          'and may indicate bugs in your code. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillMountUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillMountUniqueNames);\n\n      console.warn(\n        'componentWillMount has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n' +\n          '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillReceivePropsUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(\n        componentWillReceivePropsUniqueNames,\n      );\n\n      console.warn(\n        'componentWillReceiveProps has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          \"* If you're updating state whenever props change, refactor your \" +\n          'code to use memoization techniques or move it to ' +\n          'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n' +\n          '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n\n    if (componentWillUpdateUniqueNames.size > 0) {\n      const sortedNames = setToSortedString(componentWillUpdateUniqueNames);\n\n      console.warn(\n        'componentWillUpdate has been renamed, and is not recommended for use. ' +\n          'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' +\n          '* Move data fetching code or side effects to componentDidUpdate.\\n' +\n          '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +\n          'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +\n          'To rename all deprecated lifecycles to their new names, you can run ' +\n          '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n' +\n          '\\nPlease update the following components: %s',\n        sortedNames,\n      );\n    }\n  };\n\n  let pendingLegacyContextWarning: FiberToFiberComponentsMap = new Map();\n\n  // Tracks components we have already warned about.\n  const didWarnAboutLegacyContext = new Set();\n\n  ReactStrictModeWarnings.recordLegacyContextWarning = (\n    fiber: Fiber,\n    instance: any,\n  ) => {\n    const strictRoot = findStrictRoot(fiber);\n    if (strictRoot === null) {\n      console.error(\n        'Expected to find a StrictMode component in a strict mode tree. ' +\n          'This error is likely caused by a bug in React. Please file an issue.',\n      );\n      return;\n    }\n\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutLegacyContext.has(fiber.type)) {\n      return;\n    }\n\n    let warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n    if (\n      fiber.type.contextTypes != null ||\n      fiber.type.childContextTypes != null ||\n      (instance !== null && typeof instance.getChildContext === 'function')\n    ) {\n      if (warningsForRoot === undefined) {\n        warningsForRoot = [];\n        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n      }\n      warningsForRoot.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.flushLegacyContextWarning = () => {\n    ((pendingLegacyContextWarning: any): FiberToFiberComponentsMap).forEach(\n      (fiberArray: FiberArray, strictRoot) => {\n        if (fiberArray.length === 0) {\n          return;\n        }\n        const firstFiber = fiberArray[0];\n\n        const uniqueNames = new Set();\n        fiberArray.forEach(fiber => {\n          uniqueNames.add(getComponentName(fiber.type) || 'Component');\n          didWarnAboutLegacyContext.add(fiber.type);\n        });\n\n        const sortedNames = setToSortedString(uniqueNames);\n\n        try {\n          setCurrentDebugFiberInDEV(firstFiber);\n          console.error(\n            'Legacy context API has been detected within a strict-mode tree.' +\n              '\\n\\nThe old API will be supported in all 16.x releases, but applications ' +\n              'using it should migrate to the new version.' +\n              '\\n\\nPlease update the following components: %s' +\n              '\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context',\n            sortedNames,\n          );\n        } finally {\n          resetCurrentDebugFiberInDEV();\n        }\n      },\n    );\n  };\n\n  ReactStrictModeWarnings.discardPendingWarnings = () => {\n    pendingComponentWillMountWarnings = [];\n    pendingUNSAFE_ComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUNSAFE_ComponentWillUpdateWarnings = [];\n    pendingLegacyContextWarning = new Map();\n  };\n}\n\nexport default ReactStrictModeWarnings;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = Object.assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nexport const MAX_SIGNED_31_BIT_INT = 1073741823;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, ContextDependency} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {MAX_SIGNED_31_BIT_INT} from './MaxInts';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane';\n\nimport invariant from 'shared/invariant';\nimport is from 'shared/objectIs';\nimport {createUpdate, enqueueUpdate, ForceUpdate} from './ReactUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastContextWithAllBitsObserved: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(providerFiber: Fiber, nextValue: T): void {\n  const context: ReactContext<T> = providerFiber.type._context;\n\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(providerFiber: Fiber): void {\n  const currentValue = valueCursor.current;\n\n  pop(valueCursor, providerFiber);\n\n  const context: ReactContext<any> = providerFiber.type._context;\n  if (isPrimaryRenderer) {\n    context._currentValue = currentValue;\n  } else {\n    context._currentValue2 = currentValue;\n  }\n}\n\nexport function calculateChangedBits<T>(\n  context: ReactContext<T>,\n  newValue: T,\n  oldValue: T,\n) {\n  if (is(oldValue, newValue)) {\n    // No change\n    return 0;\n  } else {\n    const changedBits =\n      typeof context._calculateChangedBits === 'function'\n        ? context._calculateChangedBits(oldValue, newValue)\n        : MAX_SIGNED_31_BIT_INT;\n\n    if (__DEV__) {\n      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {\n        console.error(\n          'calculateChangedBits: Expected the return value to be a ' +\n            '31-bit integer. Instead received: %s',\n          changedBits,\n        );\n      }\n    }\n    return changedBits | 0;\n  }\n}\n\nexport function scheduleWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated, which means the rest of the\n      // ancestor path already has sufficient priority.\n      break;\n    }\n    node = node.return;\n  }\n}\n\nexport function propagateContextChange(\n  workInProgress: Fiber,\n  context: ReactContext<mixed>,\n  changedBits: number,\n  renderLanes: Lanes,\n): void {\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (\n          dependency.context === context &&\n          (dependency.observedBits & changedBits) !== 0\n        ) {\n          // Match! Schedule an update on this fiber.\n\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const update = createUpdate(\n              NoTimestamp,\n              pickArbitraryLane(renderLanes),\n            );\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            enqueueUpdate(fiber, update);\n          }\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleWorkOnParentPath(fiber.return, renderLanes);\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (\n      enableSuspenseServerRenderer &&\n      fiber.tag === DehydratedFragment\n    ) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n      invariant(\n        parentSuspense !== null,\n        'We just came from a parent so we must have had a parent. This is a bug in React.',\n      );\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleWorkOnParentPath(parentSuspense, renderLanes);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    const firstContext = dependencies.firstContext;\n    if (firstContext !== null) {\n      if (includesSomeLane(dependencies.lanes, renderLanes)) {\n        // Context list has a pending update. Mark that this fiber performed work.\n        markWorkInProgressReceivedUpdate();\n      }\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    }\n  }\n}\n\nexport function readContext<T>(\n  context: ReactContext<T>,\n  observedBits: void | number | boolean,\n): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  if (lastContextWithAllBitsObserved === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else if (observedBits === false || observedBits === 0) {\n    // Do not observe any updates.\n  } else {\n    let resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.\n    if (\n      typeof observedBits !== 'number' ||\n      observedBits === MAX_SIGNED_31_BIT_INT\n    ) {\n      // Observe all updates.\n      lastContextWithAllBitsObserved = ((context: any): ReactContext<mixed>);\n      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;\n    } else {\n      resolvedObservedBits = observedBits;\n    }\n\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      observedBits: resolvedObservedBits,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      invariant(\n        currentlyRenderingFiber !== null,\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n        responders: null,\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return isPrimaryRenderer ? context._currentValue : context._currentValue2;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\n\nimport {NoLane, NoLanes, isSubsetOfLanes, mergeLanes} from './ReactFiberLane';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {Callback, ShouldCapture, DidCapture} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictMode} from './ReactTypeOfMode';\nimport {markSkippedUpdateLanes} from './ReactFiberWorkLoop.old';\n\nimport invariant from 'shared/invariant';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\ntype SharedQueue<State> = {|\n  pending: Update<State> | null,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  effects: Array<Update<State>> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n    },\n    effects: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(fiber: Fiber, update: Update<State>) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n  const pending = sharedQueue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  sharedQueue.pending = update;\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictMode\n          ) {\n            disableLogs();\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              reenableLogs();\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictMode\n          ) {\n            disableLogs();\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              reenableLogs();\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return Object.assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      const updateLane = update.lane;\n      const updateEventTime = update.eventTime;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (callback !== null) {\n          workInProgress.flags |= Callback;\n          const effects = queue.effects;\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  invariant(\n    typeof callback === 'function',\n    'Invalid argument passed as callback. Expected a function. Instead ' +\n      'received: %s',\n    callback,\n  );\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function commitUpdateQueue<State>(\n  finishedWork: Fiber,\n  finishedQueue: UpdateQueue<State>,\n  instance: any,\n): void {\n  // Commit the effects\n  const effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n  if (effects !== null) {\n    for (let i = 0; i < effects.length; i++) {\n      const effect = effects[i];\n      const callback = effect.callback;\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\n\nimport * as React from 'react';\nimport {Update, Snapshot} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {DebugTracingMode, StrictMode} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n} from './SchedulingProfiler';\n\nconst fakeInternalInstance = {};\nconst isArray = Array.isArray;\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentName(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      invariant(\n        false,\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nexport function applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        reenableLogs();\n      }\n    }\n  }\n\n  const partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  if (__DEV__) {\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : Object.assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          instance.shouldComponentUpdate(newProps, newState, nextContext);\n        } finally {\n          reenableLogs();\n        }\n      }\n    }\n    const shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n\n    if (__DEV__) {\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentName(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentName(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentName(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentName(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentName(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        reenableLogs();\n      }\n    }\n  }\n\n  const instance = new ctor(props, context);\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentName(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentName(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentName(workInProgress.type) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentName(workInProgress.type) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentName(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    workInProgress.flags |= Update;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {BlockComponent} from 'react/src/ReactBlock';\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\n\nimport getComponentName from 'shared/getComponentName';\nimport {Placement, Deletion} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_BLOCK_TYPE,\n} from 'shared/ReactSymbols';\nimport {\n  FunctionComponent,\n  ClassComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  SimpleMemoComponent,\n  Block,\n} from './ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport {\n  warnAboutStringRefs,\n  enableBlocksAPI,\n  enableLazyElements,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictMode} from './ReactTypeOfMode';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n    invariant(\n      typeof child._store === 'object',\n      'React Component in warnForMissingKey should have a _store. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n    child._store.validated = true;\n\n    const componentName = getComponentName(returnFiber.type) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nconst isArray = Array.isArray;\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName = getComponentName(returnFiber.type) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n        invariant(\n          ownerFiber.tag === ClassComponent,\n          'Function components cannot have string refs. ' +\n            'We recommend using useRef() instead. ' +\n            'Learn more about using refs safely here: ' +\n            'https://reactjs.org/link/strict-mode-string-ref',\n        );\n        inst = ownerFiber.stateNode;\n      }\n      invariant(\n        inst,\n        'Missing owner for string ref %s. This error is likely caused by a ' +\n          'bug in React. Please file an issue.',\n        mixedRef,\n      );\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = inst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = inst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      invariant(\n        typeof mixedRef === 'string',\n        'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n      );\n      invariant(\n        element._owner,\n        'Element ref was specified as a string (%s) but no owner was set. This could happen for one of' +\n          ' the following reasons:\\n' +\n          '1. You may be adding a ref to a function component\\n' +\n          \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n          '3. You have multiple copies of React loaded\\n' +\n          'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        mixedRef,\n      );\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  if (returnFiber.type !== 'textarea') {\n    invariant(\n      false,\n      'Objects are not valid as a React child (found: %s). ' +\n        'If you meant to render a collection of children, use an array ' +\n        'instead.',\n      Object.prototype.toString.call(newChild) === '[object Object]'\n        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n        : newChild,\n    );\n  }\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentName(returnFiber.type) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\n// We avoid inlining this to avoid potential deopts from using try/catch.\n/** @noinline */\nfunction resolveLazyType<T, P>(\n  lazyComponent: LazyComponent<T, P>,\n): LazyComponent<T, P> | T {\n  try {\n    // If we can, let's peek at the resulting type.\n    const payload = lazyComponent._payload;\n    const init = lazyComponent._init;\n    return init(payload);\n  } catch (x) {\n    // Leave it in place and let it throw again in the begin phase.\n    return lazyComponent;\n  }\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    // Deletions are added in reversed order so we add it to the front.\n    // At this point, the return fiber's effect list is empty except for\n    // deletions, so we can just append the deletion to the list. The remaining\n    // effects aren't added until the complete phase. Once we implement\n    // resuming, this may not be true.\n    const last = returnFiber.lastEffect;\n    if (last !== null) {\n      last.nextEffect = childToDelete;\n      returnFiber.lastEffect = childToDelete;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n    }\n    childToDelete.nextEffect = null;\n    childToDelete.flags = Deletion;\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags = Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags = Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags = Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    if (current !== null) {\n      if (\n        current.elementType === element.type ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__ ? isCompatibleFamilyForHotReloading(current, element) : false)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      } else if (enableBlocksAPI && current.tag === Block) {\n        // The new Block might not be initialized yet. We need to initialize\n        // it in case initializing it turns out it would match.\n        let type = element.type;\n        if (type.$$typeof === REACT_LAZY_TYPE) {\n          type = resolveLazyType(type);\n        }\n        if (\n          type.$$typeof === REACT_BLOCK_TYPE &&\n          ((type: any): BlockComponent<any, any>)._render ===\n            (current.type: BlockComponent<any, any>)._render\n        ) {\n          // Same as above but also update the .type field.\n          const existing = useFiber(current, element.props);\n          existing.return = returnFiber;\n          existing.type = type;\n          if (__DEV__) {\n            existing._debugSource = element._source;\n            existing._debugOwner = element._owner;\n          }\n          return existing;\n        }\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return createChild(returnFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            if (newChild.type === REACT_FRAGMENT_TYPE) {\n              return updateFragment(\n                returnFiber,\n                oldFiber,\n                newChild.props.children,\n                lanes,\n                key,\n              );\n            }\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          if (newChild.type === REACT_FRAGMENT_TYPE) {\n            return updateFragment(\n              returnFiber,\n              matchedFiber,\n              newChild.props.children,\n              lanes,\n              newChild.key,\n            );\n          }\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = child._payload;\n            const init = (child._init: any);\n            warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n            break;\n          }\n        // We intentionally fallthrough here if enableLazyElements is not on.\n        // eslint-disable-next-lined no-fallthrough\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n    invariant(\n      typeof iteratorFn === 'function',\n      'An object is not an iterable. This error is likely caused by a bug in ' +\n        'React. Please file an issue.',\n    );\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n    invariant(newChildren != null, 'An iterable object provided no iterator.');\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        switch (child.tag) {\n          case Fragment: {\n            if (element.type === REACT_FRAGMENT_TYPE) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              const existing = useFiber(child, element.props.children);\n              existing.return = returnFiber;\n              if (__DEV__) {\n                existing._debugSource = element._source;\n                existing._debugOwner = element._owner;\n              }\n              return existing;\n            }\n            break;\n          }\n          case Block:\n            if (enableBlocksAPI) {\n              let type = element.type;\n              if (type.$$typeof === REACT_LAZY_TYPE) {\n                type = resolveLazyType(type);\n              }\n              if (type.$$typeof === REACT_BLOCK_TYPE) {\n                // The new Block might not be initialized yet. We need to initialize\n                // it in case initializing it turns out it would match.\n                if (\n                  ((type: any): BlockComponent<any, any>)._render ===\n                  (child.type: BlockComponent<any, any>)._render\n                ) {\n                  deleteRemainingChildren(returnFiber, child.sibling);\n                  const existing = useFiber(child, element.props);\n                  existing.type = type;\n                  existing.return = returnFiber;\n                  if (__DEV__) {\n                    existing._debugSource = element._source;\n                    existing._debugOwner = element._owner;\n                  }\n                  return existing;\n                }\n              }\n            }\n          // We intentionally fallthrough here if enableBlocksAPI is not on.\n          // eslint-disable-next-lined no-fallthrough\n          default: {\n            if (\n              child.elementType === element.type ||\n              // Keep this check inline so it only runs on the false path:\n              (__DEV__\n                ? isCompatibleFamilyForHotReloading(child, element)\n                : false)\n            ) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              const existing = useFiber(child, element.props);\n              existing.ref = coerceRef(returnFiber, child, element);\n              existing.return = returnFiber;\n              if (__DEV__) {\n                existing._debugSource = element._source;\n                existing._debugOwner = element._owner;\n              }\n              return existing;\n            }\n            break;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    const isObject = typeof newChild === 'object' && newChild !== null;\n\n    if (isObject) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            // TODO: This function is supposed to be non-recursive.\n            return reconcileChildFibers(\n              returnFiber,\n              currentFirstChild,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n    }\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (isArray(newChild)) {\n      return reconcileChildrenArray(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes,\n      );\n    }\n\n    if (getIteratorFn(newChild)) {\n      return reconcileChildrenIterator(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes,\n      );\n    }\n\n    if (isObject) {\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {\n      // If the new child is undefined, and the return fiber is a composite\n      // component, throw an error. If Fiber return types are disabled,\n      // we already threw above.\n      switch (returnFiber.tag) {\n        case ClassComponent: {\n          if (__DEV__) {\n            const instance = returnFiber.stateNode;\n            if (instance.render._isMockFunction) {\n              // We allow auto-mocks to proceed as if they're returning null.\n              break;\n            }\n          }\n        }\n        // Intentionally fall through to the next case, which handles both\n        // functions and classes\n        // eslint-disable-next-lined no-fallthrough\n        case Block:\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          invariant(\n            false,\n            '%s(...): Nothing was returned from render. This usually means a ' +\n              'return statement is missing. Or, to render nothing, ' +\n              'return null.',\n            getComponentName(returnFiber.type) || 'Component',\n          );\n        }\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  invariant(\n    current === null || workInProgress.child === current.child,\n    'Resuming work not yet implemented.',\n  );\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  invariant(\n    c !== NO_CONTEXT,\n    'Expected host context to exist. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\n// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// Subtree Flags:\n\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\n\n// Shallow Flags:\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function addSubtreeSuspenseContext(\n  parentContext: SuspenseContext,\n  subtreeContext: SubtreeSuspenseContext,\n): SuspenseContext {\n  return parentContext | subtreeContext;\n}\n\nexport function pushSuspenseContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane';\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n  // Last Effect before we rendered the \"rendering\" item.\n  // Used to remove new effects added by the rendered item.\n  lastEffect: null | Fiber,\n|};\n\nexport function shouldCaptureSuspense(\n  workInProgress: Fiber,\n  hasInvisibleParent: boolean,\n): boolean {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  const nextState: SuspenseState | null = workInProgress.memoizedState;\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n    return false;\n  }\n  const props = workInProgress.memoizedProps;\n  // In order to capture, the Suspense component must have a fallback prop.\n  if (props.fallback === undefined) {\n    return false;\n  }\n  // Regular boundaries always capture.\n  if (props.unstable_avoidThisFallback !== true) {\n    return true;\n  }\n  // If it's a boundary we should avoid, then we prefer to bubble up to the\n  // parent boundary if it is currently invisible.\n  if (hasInvisibleParent) {\n    return false;\n  }\n  // If the parent is not able to handle it, we must handle it.\n  return true;\n}\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*  */ 0b000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Layout = /*    */ 0b010;\nexport const Passive = /*   */ 0b100;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {Deletion, Placement, Hydrating} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateContainerInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableContainerInstance,\n  didNotFindHydratableContainerTextInstance,\n  didNotFindHydratableContainerSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\nimport {OffscreenLane} from './ReactFiberLane';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChild(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);\n  popToNextHostParent(fiber);\n  isHydrating = true;\n  return true;\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        didNotHydrateContainerInstance(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      case HostComponent:\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n        );\n        break;\n    }\n  }\n\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n  childToDelete.flags = Deletion;\n\n  // This might seem like it belongs on progressedFirstDeletion. However,\n  // these children are not part of the reconciliation list of children.\n  // Even if we abort and rereconcile the children, that will try to hydrate\n  // again and the nodes are still in the host tree so these will be\n  // recreated.\n  if (returnFiber.lastEffect !== null) {\n    returnFiber.lastEffect.nextEffect = childToDelete;\n    returnFiber.lastEffect = childToDelete;\n  } else {\n    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableContainerInstance(parentContainer, type, props);\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableContainerTextInstance(parentContainer, text);\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableContainerSuspenseInstance(parentContainer);\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n        }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      if (enableSuspenseServerRenderer) {\n        const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n          nextInstance,\n        );\n        if (suspenseInstance !== null) {\n          const suspenseState: SuspenseState = {\n            dehydrated: suspenseInstance,\n            retryLane: OffscreenLane,\n          };\n          fiber.memoizedState = suspenseState;\n          // Store the dehydrated fragment as a child fiber.\n          // This simplifies the code for getHostSibling and deleting nodes,\n          // since it doesn't have to consider all Suspense boundaries and\n          // check if they're dehydrated ones or not.\n          const dehydratedFragment = createFiberFromDehydratedFragment(\n            suspenseInstance,\n          );\n          dehydratedFragment.return = fiber;\n          fiber.child = dehydratedFragment;\n          return true;\n        }\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(\n      (hydrationParentFiber: any),\n      firstAttemptedInstance,\n    );\n  }\n  hydrationParentFiber = fiber;\n  nextHydratableInstance = getFirstHydratableChild((nextInstance: any));\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n  if (__DEV__) {\n    if (shouldUpdate) {\n      // We assume that prepareToHydrateHostTextInstance is called in a context where the\n      // hydration parent is the parent host component of this host text.\n      const returnFiber = hydrationParentFiber;\n      if (returnFiber !== null) {\n        switch (returnFiber.tag) {\n          case HostRoot: {\n            const parentContainer = returnFiber.stateNode.containerInfo;\n            didNotMatchHydratedContainerTextInstance(\n              parentContainer,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n          case HostComponent: {\n            const parentType = returnFiber.type;\n            const parentProps = returnFiber.memoizedProps;\n            const parentInstance = returnFiber.stateNode;\n            didNotMatchHydratedTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  const type = fiber.type;\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them.\n  // TODO: Better heuristic.\n  if (\n    fiber.tag !== HostComponent ||\n    (type !== 'head' &&\n      type !== 'body' &&\n      !shouldSetTextContent(type, fiber.memoizedProps))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    while (nextInstance) {\n      deleteHydratableInstance(fiber, nextInstance);\n      nextInstance = getNextHydratableSibling(nextInstance);\n    }\n  }\n\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {OpaqueIDType} from './ReactFiberHostConfig';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\n\nimport {NoMode, BlockingMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  NoLanes,\n  InputContinuousLanePriority,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  markRootEntangled,\n  markRootMutableRead,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n  higherLanePriority,\n  DefaultLanePriority,\n} from './ReactFiberLane';\nimport {readContext} from './ReactFiberNewContext.old';\nimport {\n  Update as UpdateEffect,\n  Passive as PassiveEffect,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  warnIfNotCurrentlyActingEffectsInDEV,\n  warnIfNotCurrentlyActingUpdatesInDev,\n  warnIfNotScopedWithMatchingAct,\n  markSkippedUpdateLanes,\n} from './ReactFiberWorkLoop.old';\n\nimport invariant from 'shared/invariant';\nimport getComponentName from 'shared/getComponentName';\nimport is from 'shared/objectIs';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  UserBlockingPriority,\n  NormalPriority,\n  runWithPriority,\n  getCurrentPriorityLevel,\n} from './SchedulerWithReactIntegration.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  makeClientId,\n  makeClientIdInDEV,\n  makeOpaqueHydratingObject,\n} from './ReactFiberHostConfig';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {getIsRendering} from './ReactCurrentFiber';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './SchedulingProfiler';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\ntype Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  eagerReducer: ((S, A) => S) | null,\n  eagerState: S | null,\n  next: Update<S, A>,\n  priority?: ReactPriorityLevel,\n|};\n\ntype UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nexport type HookType =\n  | 'useState'\n  | 'useReducer'\n  | 'useContext'\n  | 'useRef'\n  | 'useEffect'\n  | 'useLayoutEffect'\n  | 'useCallback'\n  | 'useMemo'\n  | 'useImperativeHandle'\n  | 'useDebugValue'\n  | 'useDeferredValue'\n  | 'useTransition'\n  | 'useMutableSource'\n  | 'useOpaqueIdentifier';\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnAboutUseOpaqueIdentifier;\nif (__DEV__) {\n  didWarnAboutUseOpaqueIdentifier = {};\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: UpdateQueue<any, any> | null,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\nexport type FunctionComponentUpdateQueue = {|lastEffect: Effect | null|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentName(currentlyRenderingFiber.type);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  invariant(\n    false,\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      invariant(\n        numberOfReRenders < RE_RENDER_LIMIT,\n        'Too many re-renders. React limits the number of renders to prevent ' +\n          'an infinite loop.',\n      );\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrancy.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n\n  invariant(\n    !didRenderTooFewHooks,\n    'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n      'early return statement.',\n  );\n\n  return children;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrancy.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    invariant(\n      nextCurrentHook !== null,\n      'Rendered more hooks than during the previous render.',\n    );\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue = (hook.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  });\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          eagerReducer: update.eagerReducer,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            eagerReducer: update.eagerReducer,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.eagerReducer === reducer) {\n          // If this update was processed eagerly, and its reducer matches the\n          // current reducer, we can use the eagerly computed state.\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubcribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    invariant(\n      false,\n      'Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  invariant(\n    root !== null,\n    'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n  );\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubcribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue = {\n      pending: null,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchAction.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue = (hook.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  });\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  const ref = {current: initialValue};\n  if (__DEV__) {\n    Object.seal(ref);\n  }\n  hook.memoizedState = ref;\n  return ref;\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  return mountEffectImpl(\n    UpdateEffect | PassiveEffect,\n    HookPassive,\n    create,\n    deps,\n  );\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  return updateEffectImpl(\n    UpdateEffect | PassiveEffect,\n    HookPassive,\n    create,\n    deps,\n  );\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return mountEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return mountEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = mountState(value);\n  mountEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = updateState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = rerenderState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction startTransition(setPending, callback) {\n  const priorityLevel = getCurrentPriorityLevel();\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    setCurrentUpdateLanePriority(\n      higherLanePriority(previousLanePriority, InputContinuousLanePriority),\n    );\n\n    runWithPriority(\n      priorityLevel < UserBlockingPriority\n        ? UserBlockingPriority\n        : priorityLevel,\n      () => {\n        setPending(true);\n      },\n    );\n\n    // TODO: Can remove this. Was only necessary because we used to give\n    // different behavior to transitions without a config object. Now they are\n    // all treated the same.\n    setCurrentUpdateLanePriority(DefaultLanePriority);\n\n    runWithPriority(\n      priorityLevel > NormalPriority ? NormalPriority : priorityLevel,\n      () => {\n        const prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = 1;\n        try {\n          setPending(false);\n          callback();\n        } finally {\n          if (decoupleUpdatePriorityFromScheduler) {\n            setCurrentUpdateLanePriority(previousLanePriority);\n          }\n          ReactCurrentBatchConfig.transition = prevTransition;\n        }\n      },\n    );\n  } else {\n    runWithPriority(\n      priorityLevel < UserBlockingPriority\n        ? UserBlockingPriority\n        : priorityLevel,\n      () => {\n        setPending(true);\n      },\n    );\n\n    runWithPriority(\n      priorityLevel > NormalPriority ? NormalPriority : priorityLevel,\n      () => {\n        const prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = 1;\n        try {\n          setPending(false);\n          callback();\n        } finally {\n          ReactCurrentBatchConfig.transition = prevTransition;\n        }\n      },\n    );\n  }\n}\n\nfunction mountTransition(): [(() => void) => void, boolean] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method can be stored on a ref, since `setPending`\n  // never changes.\n  const start = startTransition.bind(null, setPending);\n  mountRef(start);\n  return [start, isPending];\n}\n\nfunction updateTransition(): [(() => void) => void, boolean] {\n  const [isPending] = updateState(false);\n  const startRef = updateRef();\n  const start: (() => void) => void = (startRef.current: any);\n  return [start, isPending];\n}\n\nfunction rerenderTransition(): [(() => void) => void, boolean] {\n  const [isPending] = rerenderState(false);\n  const startRef = updateRef();\n  const start: (() => void) => void = (startRef.current: any);\n  return [start, isPending];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction warnOnOpaqueIdentifierAccessInDEV(fiber) {\n  if (__DEV__) {\n    // TODO: Should warn in effects and callbacks, too\n    const name = getComponentName(fiber.type) || 'Unknown';\n    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {\n      console.error(\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the ' +\n          'value directly.',\n      );\n      didWarnAboutUseOpaqueIdentifier[name] = true;\n    }\n  }\n}\n\nfunction mountOpaqueIdentifier(): OpaqueIDType | void {\n  const makeId = __DEV__\n    ? makeClientIdInDEV.bind(\n        null,\n        warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber),\n      )\n    : makeClientId;\n\n  if (getIsHydrating()) {\n    let didUpgrade = false;\n    const fiber = currentlyRenderingFiber;\n    const readValue = () => {\n      if (!didUpgrade) {\n        // Only upgrade once. This works even inside the render phase because\n        // the update is added to a shared queue, which outlasts the\n        // in-progress render.\n        didUpgrade = true;\n        if (__DEV__) {\n          isUpdatingOpaqueValueInRenderPhase = true;\n          setId(makeId());\n          isUpdatingOpaqueValueInRenderPhase = false;\n          warnOnOpaqueIdentifierAccessInDEV(fiber);\n        } else {\n          setId(makeId());\n        }\n      }\n      invariant(\n        false,\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the value directly.',\n      );\n    };\n    const id = makeOpaqueHydratingObject(readValue);\n\n    const setId = mountState(id)[1];\n\n    if ((currentlyRenderingFiber.mode & BlockingMode) === NoMode) {\n      currentlyRenderingFiber.flags |= UpdateEffect | PassiveEffect;\n      pushEffect(\n        HookHasEffect | HookPassive,\n        () => {\n          setId(makeId());\n        },\n        undefined,\n        null,\n      );\n    }\n    return id;\n  } else {\n    const id = makeId();\n    mountState(id);\n    return id;\n  }\n}\n\nfunction updateOpaqueIdentifier(): OpaqueIDType | void {\n  const id = updateState(undefined)[0];\n  return id;\n}\n\nfunction rerenderOpaqueIdentifier(): OpaqueIDType | void {\n  const id = rerenderState(undefined)[0];\n  return id;\n}\n\nfunction dispatchAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    eagerReducer: null,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  // Append the update to the end of the list.\n  const pending = queue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  queue.pending = update;\n\n  const alternate = fiber.alternate;\n  if (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  ) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  } else {\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.eagerReducer = lastRenderedReducer;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n    if (__DEV__) {\n      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n      if ('undefined' !== typeof jest) {\n        warnIfNotScopedWithMatchingAct(fiber);\n        warnIfNotCurrentlyActingUpdatesInDev(fiber);\n      }\n    }\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentName(fiber.type) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useOpaqueIdentifier: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useOpaqueIdentifier: mountOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useOpaqueIdentifier: updateOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useOpaqueIdentifier: rerenderOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n} from 'shared/ReactFeatureFlags';\nimport {Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor.\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      if (parentFiber.tag === Profiler) {\n        const parentStateNode = parentFiber.stateNode;\n        parentStateNode.effectDuration += elapsedTime;\n        break;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor.\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      if (parentFiber.tag === Profiler) {\n        const parentStateNode = parentFiber.stateNode;\n        if (parentStateNode !== null) {\n          // Detached fibers have their state node cleared out.\n          // In this case, the return pointer is also cleared out,\n          // so we won't be able to report the time spent in this Profiler's subtree.\n          parentStateNode.passiveEffectDuration += elapsedTime;\n        }\n        break;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactProviderType, ReactContext} from 'shared/ReactTypes';\nimport type {BlockComponent} from 'react/src/ReactBlock';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n} from './ReactFiberOffscreenComponent';\n\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  Deletion,\n  ForceUpdateForLegacySuspense,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerTimer,\n  enableSchedulerTracing,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableBlocksAPI,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentName from 'shared/getComponentName';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n} from './ReactUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n} from './ReactFiberLane';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictMode,\n  BlockingMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {shouldSuspend} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseContext,\n  InvisibleParentSuspenseContext,\n  ForceSuspenseFallback,\n  hasSuspenseContext,\n  setDefaultShallowSuspenseContext,\n  addSubtreeSuspenseContext,\n  setShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  readContext,\n  prepareToReadContext,\n  calculateChangedBits,\n  scheduleWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {renderWithHooks, bailoutHooks} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  applyDerivedStateFromProps,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  markSpawnedWork,\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n  pushRenderLanes,\n  getExecutionContext,\n  RetryAfterError,\n  NoContext,\n} from './ReactFiberWorkLoop.old';\nimport {unstable_wrap as Schedule_tracing_wrap} from 'scheduler/tracing';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  updateLanes: Lanes,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentName(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  if (!includesSomeLane(updateLanes, renderLanes)) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  updateLanes: Lanes,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentName(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n      if (!includesSomeLane(renderLanes, updateLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumlated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    nextProps.mode === 'unstable-defer-without-hiding'\n  ) {\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Figure out what we should do in Blocking mode.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      let nextBaseLanes;\n      if (prevState !== null) {\n        const prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n      } else {\n        nextBaseLanes = renderLanes;\n      }\n\n      // Schedule this fiber to re-render at offscreen priority. Then bailout.\n      if (enableSchedulerTracing) {\n        markSpawnedWork((OffscreenLane: Lane));\n      }\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n      const nextState: OffscreenState = {\n        baseLanes: nextBaseLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      pushRenderLanes(workInProgress, nextBaseLanes);\n      return null;\n    } else {\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      // Push the lanes that were skipped when we bailed out.\n      const subtreeRenderLanes =\n        prevState !== null ? prevState.baseLanes : renderLanes;\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    let subtreeRenderLanes;\n    if (prevState !== null) {\n      subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      subtreeRenderLanes = renderLanes;\n    }\n    pushRenderLanes(workInProgress, subtreeRenderLanes);\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    // Reset effect durations for the next eventual effect phase.\n    // These are reset during render to allow the DevTools commit hook a chance to read them,\n    const stateNode = workInProgress.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateBlock<Props, Data>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  block: BlockComponent<Props, Data>,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  const render = block._render;\n  const data = block._data;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      data,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          data,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      data,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    if (current !== null) {\n      // A class component without an instance only mounts if it suspended\n      // inside a non-concurrent tree, in an inconsistent state. We want to\n      // treat it like a new mount, even though an empty version of it already\n      // committed. Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentName(workInProgress.type) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          instance.render();\n        } finally {\n          reenableLogs();\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n  const updateQueue = workInProgress.updateQueue;\n  invariant(\n    current !== null && updateQueue !== null,\n    'If the root does not have an updateQueue, we should have already ' +\n      'bailed out. This error is likely caused by a bug in React. Please ' +\n      'file an issue.',\n  );\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState !== null ? prevState.element : null;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  const nextState = workInProgress.memoizedState;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (nextChildren === prevChildren) {\n    resetHydrationState();\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n  const root: FiberRoot = workInProgress.stateNode;\n  if (root.hydrate && enterHydrationState(workInProgress)) {\n    // If we don't have any current children this might be the first pass.\n    // We always try to hydrate. If this isn't a hydration pass there won't\n    // be any children to hydrate which is effectively the same thing as\n    // not hydrating.\n\n    if (supportsHydration) {\n      const mutableSourceEagerHydrationData =\n        root.mutableSourceEagerHydrationData;\n      if (mutableSourceEagerHydrationData != null) {\n        for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n          const mutableSource = ((mutableSourceEagerHydrationData[\n            i\n          ]: any): MutableSource<any>);\n          const version = mutableSourceEagerHydrationData[i + 1];\n          setWorkInProgressVersion(mutableSource, version);\n        }\n      }\n    }\n\n    const child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n    workInProgress.child = child;\n\n    let node = child;\n    while (node) {\n      // Mark each child as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      node.flags = (node.flags & ~Placement) | Hydrating;\n      node = node.sibling;\n    }\n  } else {\n    // Otherwise reset hydration state in case we aborted and resumed another\n    // root.\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    resetHydrationState();\n  }\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  updateLanes,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // A lazy component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentName(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        updateLanes,\n        renderLanes,\n      );\n      return child;\n    }\n    case Block: {\n      if (enableBlocksAPI) {\n        // TODO: Resolve for Hot Reloading.\n        child = updateBlock(\n          null,\n          workInProgress,\n          Component,\n          props,\n          renderLanes,\n        );\n        return child;\n      }\n      break;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  invariant(\n    false,\n    'Element type is invalid. Received a promise that resolves to: %s. ' +\n      'Lazy element type must resolve to a class or function.%s',\n    Component,\n    hint,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An incomplete component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An indeterminate component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentName(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    const getDerivedStateFromProps = Component.getDerivedStateFromProps;\n    if (typeof getDerivedStateFromProps === 'function') {\n      applyDerivedStateFromProps(\n        workInProgress,\n        Component,\n        getDerivedStateFromProps,\n        props,\n      );\n    }\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentName(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n        } finally {\n          reenableLogs();\n        }\n      }\n    }\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || workInProgress._debugID || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  suspenseContext: SuspenseContext,\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallack\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  return hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(\n      suspenseContext,\n      current,\n      workInProgress,\n      renderLanes,\n    )\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (\n      current === null ||\n      (current.memoizedState: null | SuspenseState) !== null\n    ) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Boundaries without fallbacks or should be avoided are not considered since\n      // they cannot handle preferred fallback states.\n      if (\n        nextProps.fallback !== undefined &&\n        nextProps.unstable_avoidThisFallback !== true\n      ) {\n        suspenseContext = addSubtreeSuspenseContext(\n          suspenseContext,\n          InvisibleParentSuspenseContext,\n        );\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconcilation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n    // If we're currently hydrating, try to hydrate this boundary.\n    // But only if this has a fallback.\n    if (nextProps.fallback !== undefined) {\n      tryToClaimNextHydratableInstance(workInProgress);\n      // This could've been a dehydrated suspense component.\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null) {\n          const dehydrated = suspenseState.dehydrated;\n          if (dehydrated !== null) {\n            return mountDehydratedSuspenseComponent(\n              workInProgress,\n              dehydrated,\n              renderLanes,\n            );\n          }\n        }\n      }\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n    if (showFallback) {\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackFragment;\n    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      if (enableSchedulerTracing) {\n        markSpawnedWork(SomeRetryLane);\n      }\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // If the current fiber has a SuspenseState, that means it's already showing\n    // a fallback.\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      // The current tree is already showing a fallback\n\n      // Special path for hydration\n      if (enableSuspenseServerRenderer) {\n        const dehydrated = prevState.dehydrated;\n        if (dehydrated !== null) {\n          if (!didSuspend) {\n            return updateDehydratedSuspenseComponent(\n              current,\n              workInProgress,\n              dehydrated,\n              prevState,\n              renderLanes,\n            );\n          } else if (\n            (workInProgress.memoizedState: null | SuspenseState) !== null\n          ) {\n            // Something suspended and we should still be in dehydrated mode.\n            // Leave the existing child in place.\n            workInProgress.child = current.child;\n            // The dehydrated completion pass expects this flag to be there\n            // but the normal suspense pass doesn't.\n            workInProgress.flags |= DidCapture;\n            return null;\n          } else {\n            // Suspended but we should no longer be in dehydrated mode.\n            // Therefore we now have to render the fallback.\n            const nextPrimaryChildren = nextProps.children;\n            const nextFallbackChildren = nextProps.fallback;\n            const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n              current,\n              workInProgress,\n              nextPrimaryChildren,\n              nextFallbackChildren,\n              renderLanes,\n            );\n            const primaryChildFragment: Fiber = (workInProgress.child: any);\n            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n              renderLanes,\n            );\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return fallbackChildFragment;\n          }\n        }\n      }\n\n      if (showFallback) {\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    } else {\n      // The current tree is not already showing a fallback.\n      if (showFallback) {\n        // Timed out.\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        // Skip the primary children, and continue working on the\n        // fallback children.\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        // Still haven't timed out. Continue rendering the children, like we\n        // normally do.\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = createFiberFromOffscreen(\n    primaryChildProps,\n    mode,\n    renderLanes,\n    null,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = createFiberFromOffscreen(\n      primaryChildProps,\n      mode,\n      NoLanes,\n      null,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction createWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = createWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    currentFallbackChildFragment.nextEffect = null;\n    currentFallbackChildFragment.flags = Deletion;\n    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & BlockingMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    // The fallback fiber was added as a deletion effect during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it. So we need to remove it from the list. Deletions are stored\n    // on the same list as effects. We want to keep the effects from the primary\n    // tree. So we copy the primary child fragment's effect list, which does not\n    // include the fallback deletion effect.\n    const progressedLastEffect = primaryChildFragment.lastEffect;\n    if (progressedLastEffect !== null) {\n      workInProgress.firstEffect = primaryChildFragment.firstEffect;\n      workInProgress.lastEffect = progressedLastEffect;\n      progressedLastEffect.nextEffect = null;\n    } else {\n      // TODO: Reset this somewhere else? Lol legacy mode is so weird.\n      workInProgress.firstEffect = workInProgress.lastEffect = null;\n    }\n  } else {\n    primaryChildFragment = createWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildFragment = createFiberFromOffscreen(\n    primaryChildren,\n    mode,\n    NoLanes,\n    null,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    mode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & BlockingMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOM.createBlockingRoot(container, { hydrate: true })' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    if (enableSchedulerTracing) {\n      markSpawnedWork(DefaultHydrationLane);\n    }\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n    if (enableSchedulerTracing) {\n      markSpawnedWork(OffscreenLane);\n    }\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  // We should never be hydrating at this point because it is the first pass,\n  // but after we've already committed once.\n  warnIfHydrating();\n\n  if ((getExecutionContext() & RetryAfterError) !== NoContext) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This boundary is in a permanent fallback state. In this case, we'll never\n    // get an update and we'll never be able to hydrate the final content. Let's just try the\n    // client side render instead.\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n  // We use lanes to indicate that a child might depend on context, so if\n  // any context has changed, we need to treat is as if the input might have changed.\n  const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n  if (didReceiveUpdate || hasContextChanged) {\n    // This boundary has changed since the first render. This means that we are now unable to\n    // hydrate it. We might still be able to hydrate it using a higher priority lane.\n    const root = getWorkInProgressRoot();\n    if (root !== null) {\n      const attemptHydrationAtLane = getBumpedLaneForHydration(\n        root,\n        renderLanes,\n      );\n      if (\n        attemptHydrationAtLane !== NoLane &&\n        attemptHydrationAtLane !== suspenseState.retryLane\n      ) {\n        // Intentionally mutating since this render will get interrupted. This\n        // is one of the very rare times where we mutate the current tree\n        // during the render phase.\n        suspenseState.retryLane = attemptHydrationAtLane;\n        // TODO: Ideally this would inherit the event time of the current render\n        const eventTime = NoTimestamp;\n        scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);\n      } else {\n        // We have already tried to ping at a higher priority than we're rendering with\n        // so if we got here, we must have failed to hydrate at those levels. We must\n        // now give up. Instead, we're going to delete the whole subtree and instead inject\n        // a new real Suspense boundary to take its place, which may render content\n        // or fallback. This might suspend for a while and if it does we might still have\n        // an opportunity to hydrate before this pass commits.\n      }\n    }\n\n    // If we have scheduled higher pri work above, this will probably just abort the render\n    // since we now have higher priority work, but in case it doesn't, we need to prepare to\n    // render something, if we time out. Even if that requires us to delete everything and\n    // skip hydration.\n    // Delay having to do this as long as the suspense timeout allows us.\n    renderDidSuspendDelayIfPossible();\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  } else if (isSuspenseInstancePending(suspenseInstance)) {\n    // This component is still pending more data from the server, so we can't hydrate its\n    // content. We treat it as if this component suspended itself. It might seem as if\n    // we could just try to render it client-side instead. However, this will perform a\n    // lot of unnecessary work and is unlikely to complete since it often will suspend\n    // on missing data anyway. Additionally, the server might be able to render more\n    // than we can on the client yet. In that case we'd end up with more fallback states\n    // on the client than if we just leave it alone. If the server times out or errors\n    // these should update this boundary to the permanent Fallback state instead.\n    // Mark it as having captured (i.e. suspended).\n    workInProgress.flags |= DidCapture;\n    // Leave the child in place. I.e. the dehydrated fragment.\n    workInProgress.child = current.child;\n    // Register a callback to retry this boundary once the server has sent the result.\n    let retry = retryDehydratedSuspenseBoundary.bind(null, current);\n    if (enableSchedulerTracing) {\n      retry = Schedule_tracing_wrap(retry);\n    }\n    registerSuspenseInstanceRetry(suspenseInstance, retry);\n    return null;\n  } else {\n    // This is the first attempt.\n    reenterHydrationStateFromDehydratedSuspenseInstance(\n      workInProgress,\n      suspenseInstance,\n    );\n    const nextProps = workInProgress.pendingProps;\n    const primaryChildren = nextProps.children;\n    const primaryChildFragment = mountSuspensePrimaryChildren(\n      workInProgress,\n      primaryChildren,\n      renderLanes,\n    );\n    // Mark the children as hydrating. This is a fast path to know whether this\n    // tree is part of a hydrating tree. This is used to determine if a child\n    // node has fully mounted yet, and for scheduling event replaying.\n    // Conceptually this is similar to Placement in that a new subtree is\n    // inserted into the React tree here. It just happens to not need DOM\n    // mutations because it already exists.\n    primaryChildFragment.flags |= Hydrating;\n    return primaryChildFragment;\n  }\n}\n\nfunction scheduleWorkOnFiber(fiber: Fiber, renderLanes: Lanes) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleWorkOnParentPath(fiber.return, renderLanes);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleWorkOnFiber(node, renderLanes);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleWorkOnFiber(node, renderLanes);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isArray = Array.isArray(childSlot);\n    const isIterable =\n      !isArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isArray || isIterable) {\n      const type = isArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (Array.isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n  lastEffectBeforeRendering: null | Fiber,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n      lastEffect: lastEffectBeforeRendering,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n    renderState.lastEffect = lastEffectBeforeRendering;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, newValue);\n\n  if (oldProps !== null) {\n    const oldValue = oldProps.value;\n    const changedBits = calculateChangedBits(context, newValue, oldValue);\n    if (changedBits === 0) {\n      // No change. Bailout early if children are the same.\n      if (\n        oldProps.children === newProps.children &&\n        !hasLegacyContextChanged()\n      ) {\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n    } else {\n      // The context value changed. Search for matching consumers and schedule\n      // them to update.\n      propagateContextChange(workInProgress, context, changedBits, renderLanes);\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context, newProps.unstable_observedBits);\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFundamentalComponent(current, workInProgress, renderLanes) {\n  const fundamentalImpl = workInProgress.type.impl;\n  if (fundamentalImpl.reconcileChildren === false) {\n    return null;\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n    return null;\n  } else {\n    // This fiber doesn't have work, but its subtree does. Clone the child\n    // fibers and continue.\n    cloneChildFibers(current, workInProgress);\n    return workInProgress.child;\n  }\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const last = returnFiber.lastEffect;\n    if (last !== null) {\n      last.nextEffect = current;\n      returnFiber.lastEffect = current;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = current;\n    }\n    current.nextEffect = null;\n    current.flags = Deletion;\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const updateLanes = workInProgress.lanes;\n\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else if (!includesSomeLane(renderLanes, updateLanes)) {\n      didReceiveUpdate = false;\n      // This fiber does not have any pending work. Bailout without entering\n      // the begin phase. There's still some bookkeeping we that needs to be done\n      // in this optimized path, mostly pushing stuff onto the stack.\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          resetHydrationState();\n          break;\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n        case ClassComponent: {\n          const Component = workInProgress.type;\n          if (isLegacyContextProvider(Component)) {\n            pushLegacyContextProvider(workInProgress);\n          }\n          break;\n        }\n        case HostPortal:\n          pushHostContainer(\n            workInProgress,\n            workInProgress.stateNode.containerInfo,\n          );\n          break;\n        case ContextProvider: {\n          const newValue = workInProgress.memoizedProps.value;\n          pushProvider(workInProgress, newValue);\n          break;\n        }\n        case Profiler:\n          if (enableProfilerTimer) {\n            // Profiler should only call onRender when one of its descendants actually rendered.\n            const hasChildWork = includesSomeLane(\n              renderLanes,\n              workInProgress.childLanes,\n            );\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            }\n\n            // Reset effect durations for the next eventual effect phase.\n            // These are reset during render to allow the DevTools commit hook a chance to read them,\n            const stateNode = workInProgress.stateNode;\n            stateNode.effectDuration = 0;\n            stateNode.passiveEffectDuration = 0;\n          }\n          break;\n        case SuspenseComponent: {\n          const state: SuspenseState | null = workInProgress.memoizedState;\n          if (state !== null) {\n            if (enableSuspenseServerRenderer) {\n              if (state.dehydrated !== null) {\n                pushSuspenseContext(\n                  workInProgress,\n                  setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n                );\n                // We know that this component will suspend again because if it has\n                // been unsuspended it has committed as a resolved Suspense component.\n                // If it needs to be retried, it should have work scheduled on it.\n                workInProgress.flags |= DidCapture;\n                // We should never render the children of a dehydrated boundary until we\n                // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n                return null;\n              }\n            }\n\n            // If this boundary is currently timed out, we need to decide\n            // whether to retry the primary children, or to skip over it and\n            // go straight to the fallback. Check the priority of the primary\n            // child fragment.\n            const primaryChildFragment: Fiber = (workInProgress.child: any);\n            const primaryChildLanes = primaryChildFragment.childLanes;\n            if (includesSomeLane(renderLanes, primaryChildLanes)) {\n              // The primary children have pending work. Use the normal path\n              // to attempt to render the primary children again.\n              return updateSuspenseComponent(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n            } else {\n              // The primary child fragment does not have pending work marked\n              // on it\n              pushSuspenseContext(\n                workInProgress,\n                setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n              );\n              // The primary children do not have pending work with sufficient\n              // priority. Bailout.\n              const child = bailoutOnAlreadyFinishedWork(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n              if (child !== null) {\n                // The fallback children have pending work. Skip over the\n                // primary children and work on the fallback.\n                return child.sibling;\n              } else {\n                return null;\n              }\n            }\n          } else {\n            pushSuspenseContext(\n              workInProgress,\n              setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n            );\n          }\n          break;\n        }\n        case SuspenseListComponent: {\n          const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n          const hasChildWork = includesSomeLane(\n            renderLanes,\n            workInProgress.childLanes,\n          );\n\n          if (didSuspendBefore) {\n            if (hasChildWork) {\n              // If something was in fallback state last time, and we have all the\n              // same children then we're still in progressive loading state.\n              // Something might get unblocked by state updates or retries in the\n              // tree which will affect the tail. So we need to use the normal\n              // path to compute the correct tail.\n              return updateSuspenseListComponent(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n            }\n            // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n            workInProgress.flags |= DidCapture;\n          }\n\n          // If nothing suspended before and we're rendering the same children,\n          // then the tail doesn't matter. Anything new that suspends will work\n          // in the \"together\" mode, so we can continue from the state we had.\n          const renderState = workInProgress.memoizedState;\n          if (renderState !== null) {\n            // Reset to the \"together\" mode in case we've started a different\n            // update in the past but didn't complete it.\n            renderState.rendering = null;\n            renderState.tail = null;\n            renderState.lastEffect = null;\n          }\n          pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n          if (hasChildWork) {\n            break;\n          } else {\n            // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n            return null;\n          }\n        }\n        case OffscreenComponent:\n        case LegacyHiddenComponent: {\n          // Need to check if the tree still needs to be deferred. This is\n          // almost identical to the logic used in the normal update path,\n          // so we'll just enter that. The only difference is we'll bail out\n          // at the next level instead of this one, because the child props\n          // have not changed. Which is fine.\n          // TODO: Probably should refactor `beginWork` to split the bailout\n          // path from the normal path. I'm tempted to do a labeled break here\n          // but I won't :)\n          workInProgress.lanes = NoLanes;\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\n        }\n      }\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    } else {\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentName(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        return updateFundamentalComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case Block: {\n      if (enableBlocksAPI) {\n        const block = workInProgress.type;\n        const props = workInProgress.pendingProps;\n        return updateBlock(current, workInProgress, block, props, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      return updateLegacyHiddenComponent(current, workInProgress, renderLanes);\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {\n  ReactScopeInstance,\n  ReactContext,\n  ReactScopeQuery,\n} from 'shared/ReactTypes';\n\nimport {\n  getPublicInstance,\n  getInstanceFromNode,\n  getInstanceFromScope,\n} from './ReactFiberHostConfig';\nimport {isFiberSuspenseAndTimedOut} from './ReactFiberTreeReflection';\n\nimport {HostComponent, ScopeComponent, ContextProvider} from './ReactWorkTags';\nimport {enableScopeAPI} from 'shared/ReactFeatureFlags';\n\nfunction getSuspenseFallbackChild(fiber: Fiber): Fiber | null {\n  return ((((fiber.child: any): Fiber).sibling: any): Fiber).child;\n}\n\nconst emptyObject = {};\n\nfunction collectScopedNodes(\n  node: Fiber,\n  fn: ReactScopeQuery,\n  scopedNodes: Array<any>,\n): void {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {type, memoizedProps, stateNode} = node;\n      const instance = getPublicInstance(stateNode);\n      if (\n        instance !== null &&\n        fn(type, memoizedProps || emptyObject, instance) === true\n      ) {\n        scopedNodes.push(instance);\n      }\n    }\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      collectScopedNodesFromChildren(child, fn, scopedNodes);\n    }\n  }\n}\n\nfunction collectFirstScopedNode(\n  node: Fiber,\n  fn: ReactScopeQuery,\n): null | Object {\n  if (enableScopeAPI) {\n    if (node.tag === HostComponent) {\n      const {type, memoizedProps, stateNode} = node;\n      const instance = getPublicInstance(stateNode);\n      if (instance !== null && fn(type, memoizedProps, instance) === true) {\n        return instance;\n      }\n    }\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      return collectFirstScopedNodeFromChildren(child, fn);\n    }\n  }\n  return null;\n}\n\nfunction collectScopedNodesFromChildren(\n  startingChild: Fiber,\n  fn: ReactScopeQuery,\n  scopedNodes: Array<any>,\n): void {\n  let child = startingChild;\n  while (child !== null) {\n    collectScopedNodes(child, fn, scopedNodes);\n    child = child.sibling;\n  }\n}\n\nfunction collectFirstScopedNodeFromChildren(\n  startingChild: Fiber,\n  fn: ReactScopeQuery,\n): Object | null {\n  let child = startingChild;\n  while (child !== null) {\n    const scopedNode = collectFirstScopedNode(child, fn);\n    if (scopedNode !== null) {\n      return scopedNode;\n    }\n    child = child.sibling;\n  }\n  return null;\n}\n\nfunction collectNearestContextValues<T>(\n  node: Fiber,\n  context: ReactContext<T>,\n  childContextValues: Array<T>,\n): void {\n  if (node.tag === ContextProvider && node.type._context === context) {\n    const contextValue = node.memoizedProps.value;\n    childContextValues.push(contextValue);\n  } else {\n    let child = node.child;\n\n    if (isFiberSuspenseAndTimedOut(node)) {\n      child = getSuspenseFallbackChild(node);\n    }\n    if (child !== null) {\n      collectNearestChildContextValues(child, context, childContextValues);\n    }\n  }\n}\n\nfunction collectNearestChildContextValues<T>(\n  startingChild: Fiber | null,\n  context: ReactContext<T>,\n  childContextValues: Array<T>,\n): void {\n  let child = startingChild;\n  while (child !== null) {\n    collectNearestContextValues(child, context, childContextValues);\n    child = child.sibling;\n  }\n}\n\nfunction DO_NOT_USE_queryAllNodes(fn: ReactScopeQuery): null | Array<Object> {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return null;\n  }\n  const child = currentFiber.child;\n  const scopedNodes = [];\n  if (child !== null) {\n    collectScopedNodesFromChildren(child, fn, scopedNodes);\n  }\n  return scopedNodes.length === 0 ? null : scopedNodes;\n}\n\nfunction DO_NOT_USE_queryFirstNode(fn: ReactScopeQuery): null | Object {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return null;\n  }\n  const child = currentFiber.child;\n  if (child !== null) {\n    return collectFirstScopedNodeFromChildren(child, fn);\n  }\n  return null;\n}\n\nfunction containsNode(node: Object): boolean {\n  let fiber = getInstanceFromNode(node);\n  while (fiber !== null) {\n    if (fiber.tag === ScopeComponent && fiber.stateNode === this) {\n      return true;\n    }\n    fiber = fiber.return;\n  }\n  return false;\n}\n\nfunction getChildContextValues<T>(context: ReactContext<T>): Array<T> {\n  const currentFiber = getInstanceFromScope(this);\n  if (currentFiber === null) {\n    return [];\n  }\n  const child = currentFiber.child;\n  const childContextValues = [];\n  if (child !== null) {\n    collectNearestChildContextValues(child, context, childContextValues);\n  }\n  return childContextValues;\n}\n\nexport function createScopeInstance(): ReactScopeInstance {\n  return {\n    DO_NOT_USE_queryAllNodes,\n    DO_NOT_USE_queryFirstNode,\n    containsNode,\n    getChildContextValues,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {\n  ReactFundamentalComponentInstance,\n  ReactScopeInstance,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './SchedulerWithReactIntegration.old';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {NoMode, BlockingMode, ProfileMode} from './ReactTypeOfMode';\nimport {Ref, Update, NoFlags, DidCapture, Snapshot} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  getFundamentalComponentInstance,\n  mountFundamentalComponent,\n  cloneFundamentalInstance,\n  shouldUpdateFundamentalComponent,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n  popSuspenseContext,\n  pushSuspenseContext,\n  setShallowSuspenseContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSchedulerTracing,\n  enableSuspenseCallback,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  enableScopeAPI,\n  enableBlocksAPI,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {\n  markSpawnedWork,\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  popRenderLanes,\n  getRenderTargetTime,\n} from './ReactFiberWorkLoop.old';\nimport {createFundamentalStateInstance} from './ReactFiberFundamental.old';\nimport {OffscreenLane, SomeRetryLane} from './ReactFiberLane';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        appendInitialChild(parent, node.stateNode.instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        let instance = node.stateNode.instance;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.tag === SuspenseComponent) {\n        if ((node.flags & Update) !== NoFlags) {\n          // Need to toggle the visibility of the primary children.\n          const newIsHidden = node.memoizedState !== null;\n          if (newIsHidden) {\n            const primaryChildParent = node.child;\n            if (primaryChildParent !== null) {\n              if (primaryChildParent.child !== null) {\n                primaryChildParent.child.return = primaryChildParent;\n                appendAllChildren(\n                  parent,\n                  primaryChildParent,\n                  true,\n                  newIsHidden,\n                );\n              }\n              const fallbackChildParent = primaryChildParent.sibling;\n              if (fallbackChildParent !== null) {\n                fallbackChildParent.return = node;\n                node = fallbackChildParent;\n                continue;\n              }\n            }\n          }\n        }\n        if (node.child !== null) {\n          // Continue traversing like normal\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        let instance = node.stateNode.instance;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.tag === SuspenseComponent) {\n        if ((node.flags & Update) !== NoFlags) {\n          // Need to toggle the visibility of the primary children.\n          const newIsHidden = node.memoizedState !== null;\n          if (newIsHidden) {\n            const primaryChildParent = node.child;\n            if (primaryChildParent !== null) {\n              if (primaryChildParent.child !== null) {\n                primaryChildParent.child.return = primaryChildParent;\n                appendAllChildrenToContainer(\n                  containerChildSet,\n                  primaryChildParent,\n                  true,\n                  newIsHidden,\n                );\n              }\n              const fallbackChildParent = primaryChildParent.sibling;\n              if (fallbackChildParent !== null) {\n                fallbackChildParent.return = node;\n                node = fallbackChildParent;\n                continue;\n              }\n            }\n          }\n        }\n        if (node.child !== null) {\n          // Continue traversing like normal\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = workInProgress.firstEffect === null;\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = workInProgress.firstEffect === null;\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      return null;\n    }\n    case HostRoot: {\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else if (!fiberRoot.hydrate) {\n          // Schedule an effect to clear this container at the start of the next commit.\n          // This handles the case of React rendering into a container with previous children.\n          // It's also safe to do for updates too, because current.child would only be null\n          // if the previous render was null (so the the container would already be empty).\n          workInProgress.flags |= Snapshot;\n        }\n      }\n      updateHostContainer(workInProgress);\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      if (enableSuspenseServerRenderer) {\n        if (nextState !== null && nextState.dehydrated !== null) {\n          if (current === null) {\n            const wasHydrated = popHydrationState(workInProgress);\n            invariant(\n              wasHydrated,\n              'A dehydrated suspense component was completed without a hydrated node. ' +\n                'This is probably a bug in React.',\n            );\n            prepareToHydrateHostSuspenseInstance(workInProgress);\n            if (enableSchedulerTracing) {\n              markSpawnedWork(OffscreenLane);\n            }\n            return null;\n          } else {\n            // We should never have been in a hydration state if we didn't have a current.\n            // However, in some of those paths, we might have reentered a hydration state\n            // and then we might be inside a hydration state. In that case, we'll need to exit out of it.\n            resetHydrationState();\n            if ((workInProgress.flags & DidCapture) === NoFlags) {\n              // This boundary did not suspend so it's now hydrated and unsuspended.\n              workInProgress.memoizedState = null;\n            }\n            // If nothing suspended, we need to schedule an effect to mark this boundary\n            // as having hydrated so events know that they're free to be invoked.\n            // It's also a signal to replay events and the suspense callback.\n            // If something suspended, schedule an effect to attach retry listeners.\n            // So we might as well always mark this.\n            workInProgress.flags |= Update;\n            return null;\n          }\n        }\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      let prevDidTimeout = false;\n      if (current === null) {\n        if (workInProgress.memoizedProps.fallback !== undefined) {\n          popHydrationState(workInProgress);\n        }\n      } else {\n        const prevState: null | SuspenseState = current.memoizedState;\n        prevDidTimeout = prevState !== null;\n      }\n\n      if (nextDidTimeout && !prevDidTimeout) {\n        // If this subtreee is running in blocking mode we can suspend,\n        // otherwise we won't suspend.\n        // TODO: This will still suspend a synchronous tree if anything\n        // in the concurrent tree already suspended during this render.\n        // This is a known bug.\n        if ((workInProgress.mode & BlockingMode) !== NoMode) {\n          // TODO: Move this back to throwException because this is too late\n          // if this is a large tree which is common for initial loads. We\n          // don't know if we should restart a render or not until we get\n          // this marker, and this is too late.\n          // If this render already had a ping or lower pri updates,\n          // and this is the first time we know we're going to suspend we\n          // should be able to immediately restart from within throwException.\n          const hasInvisibleChildContext =\n            current === null &&\n            workInProgress.memoizedProps.unstable_avoidThisFallback !== true;\n          if (\n            hasInvisibleChildContext ||\n            hasSuspenseContext(\n              suspenseStackCursor.current,\n              (InvisibleParentSuspenseContext: SuspenseContext),\n            )\n          ) {\n            // If this was in an invisible tree or a new render, then showing\n            // this boundary is ok.\n            renderDidSuspend();\n          } else {\n            // Otherwise, we're going to have to hide content so we should\n            // suspend for longer if possible.\n            renderDidSuspendDelayIfPossible();\n          }\n        }\n      }\n\n      if (supportsPersistence) {\n        // TODO: Only schedule updates if not prevDidTimeout.\n        if (nextDidTimeout) {\n          // If this boundary just timed out, schedule an effect to attach a\n          // retry listener to the promise. This flag is also used to hide the\n          // primary children.\n          workInProgress.flags |= Update;\n        }\n      }\n      if (supportsMutation) {\n        // TODO: Only schedule updates if these values are non equal, i.e. it changed.\n        if (nextDidTimeout || prevDidTimeout) {\n          // If this boundary just timed out, schedule an effect to attach a\n          // retry listener to the promise. This flag is also used to hide the\n          // primary children. In mutation mode, we also need the flag to\n          // *unhide* children that were previously hidden, so check if this\n          // is currently timed out, too.\n          workInProgress.flags |= Update;\n        }\n      }\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        workInProgress.flags |= Update;\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      popProvider(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thennables. Instead, we'll transfer its thennables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThennables = suspended.updateQueue;\n                if (newThennables !== null) {\n                  workInProgress.updateQueue = newThennables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect list before doing the second pass since that's now invalid.\n                if (renderState.lastEffect === null) {\n                  workInProgress.firstEffect = null;\n                }\n                workInProgress.lastEffect = renderState.lastEffect;\n                // Reset the child fibers to their original state.\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense Context to force suspense and immediately\n                // rerender the children.\n                pushSuspenseContext(\n                  workInProgress,\n                  setShallowSuspenseContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n            if (enableSchedulerTracing) {\n              markSpawnedWork(SomeRetryLane);\n            }\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThennables = suspended.updateQueue;\n            if (newThennables !== null) {\n              workInProgress.updateQueue = newThennables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We need to delete the row we just rendered.\n              // Reset the effect list to what it was before we rendered this\n              // child. The nested children have already appended themselves.\n              const lastEffect = (workInProgress.lastEffect =\n                renderState.lastEffect);\n              // Remove any effects that were appended after this point.\n              if (lastEffect !== null) {\n                lastEffect.nextEffect = null;\n              }\n              // We're done.\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n            if (enableSchedulerTracing) {\n              markSpawnedWork(SomeRetryLane);\n            }\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.lastEffect = workInProgress.lastEffect;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        }\n        pushSuspenseContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        return next;\n      }\n      return null;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalImpl = workInProgress.type.impl;\n        let fundamentalInstance: ReactFundamentalComponentInstance<\n          any,\n          any,\n        > | null = workInProgress.stateNode;\n\n        if (fundamentalInstance === null) {\n          const getInitialState = fundamentalImpl.getInitialState;\n          let fundamentalState;\n          if (getInitialState !== undefined) {\n            fundamentalState = getInitialState(newProps);\n          }\n          fundamentalInstance = workInProgress.stateNode = createFundamentalStateInstance(\n            workInProgress,\n            newProps,\n            fundamentalImpl,\n            fundamentalState || {},\n          );\n          const instance = ((getFundamentalComponentInstance(\n            fundamentalInstance,\n          ): any): Instance);\n          fundamentalInstance.instance = instance;\n          if (fundamentalImpl.reconcileChildren === false) {\n            return null;\n          }\n          appendAllChildren(instance, workInProgress, false, false);\n          mountFundamentalComponent(fundamentalInstance);\n        } else {\n          // We fire update in commit phase\n          const prevProps = fundamentalInstance.props;\n          fundamentalInstance.prevProps = prevProps;\n          fundamentalInstance.props = newProps;\n          fundamentalInstance.currentFiber = workInProgress;\n          if (supportsPersistence) {\n            const instance = cloneFundamentalInstance(fundamentalInstance);\n            fundamentalInstance.instance = instance;\n            appendAllChildren(instance, workInProgress, false, false);\n          }\n          const shouldUpdate = shouldUpdateFundamentalComponent(\n            fundamentalInstance,\n          );\n          if (shouldUpdate) {\n            markUpdate(workInProgress);\n          }\n        }\n        return null;\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        return null;\n      }\n      break;\n    }\n    case Block:\n      if (enableBlocksAPI) {\n        return null;\n      }\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popRenderLanes(workInProgress);\n      if (current !== null) {\n        const nextState: OffscreenState | null = workInProgress.memoizedState;\n        const prevState: OffscreenState | null = current.memoizedState;\n\n        const prevIsHidden = prevState !== null;\n        const nextIsHidden = nextState !== null;\n        if (\n          prevIsHidden !== nextIsHidden &&\n          newProps.mode !== 'unstable-defer-without-hiding'\n        ) {\n          workInProgress.flags |= Update;\n        }\n      }\n      return null;\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  enableSuspenseServerRenderer,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {popSuspenseContext} from './ReactFiberSuspenseContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popRenderLanes} from './ReactFiberWorkLoop.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\n\nimport invariant from 'shared/invariant';\n\nfunction unwindWork(workInProgress: Fiber, renderLanes: Lanes) {\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      invariant(\n        (flags & DidCapture) === NoFlags,\n        'The root failed to unmount after an error. This is likely a bug in ' +\n          'React. Please file an issue.',\n      );\n      workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n      return workInProgress;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          invariant(\n            workInProgress.alternate !== null,\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n          resetHydrationState();\n        }\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      popProvider(workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(interruptedWork: Fiber) {\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case ContextProvider:\n      popProvider(interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n|};\n\nexport function createCapturedValue<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from '../ReactFiber.old';\nimport type {CapturedValue} from '../ReactCapturedValue';\n\nimport {ClassComponent} from '../ReactWorkTags';\n\nimport invariant from 'shared/invariant';\n\n// Provided by www\nconst ReactFiberErrorDialogWWW = require('ReactFiberErrorDialog');\ninvariant(\n  typeof ReactFiberErrorDialogWWW.showErrorDialog === 'function',\n  'Expected ReactFiberErrorDialog.showErrorDialog to be a function.',\n);\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  const capturedError = {\n    componentStack: errorInfo.stack !== null ? errorInfo.stack : '',\n    error: errorInfo.value,\n    errorBoundary:\n      boundary !== null && boundary.tag === ClassComponent\n        ? boundary.stateNode\n        : null,\n  };\n  return ReactFiberErrorDialogWWW.showErrorDialog(capturedError);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentName(source.type) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      const errorBoundaryName = getComponentName(boundary.type);\n      if (errorBoundaryName) {\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      } else {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\n\nimport getComponentName from 'shared/getComponentName';\nimport {\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n  IncompleteClassComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n} from './ReactFiberFlags';\nimport {shouldCaptureSuspense} from './ReactFiberSuspenseComponent.old';\nimport {NoMode, BlockingMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n} from './ReactFiberWorkLoop.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {markComponentSuspended} from './SchedulingProfiler';\n\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      logCapturedError(fiber, errorInfo);\n      return getDerivedStateFromError(error);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n\n        // Only log here if componentDidCatch is the only error boundary method defined\n        logCapturedError(fiber, errorInfo);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentName(fiber.type) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  } else if (__DEV__) {\n    update.callback = () => {\n      markFailedErrorBoundaryForHotReloading(fiber);\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a listener to the promise to \"ping\" the root and retry. But only if\n  // one does not already exist for the lanes we're currently rendering (which\n  // acts like a \"thread ID\" here).\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n  // Its effect list is no longer valid.\n  sourceFiber.firstEffect = sourceFiber.lastEffect = null;\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    // This is a wakeable.\n    const wakeable: Wakeable = (value: any);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentName(sourceFiber.type) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markComponentSuspended(sourceFiber, wakeable);\n    }\n\n    if ((sourceFiber.mode & BlockingMode) === NoMode) {\n      // Reset the memoizedState to what it was before we attempted\n      // to render it.\n      const currentSource = sourceFiber.alternate;\n      if (currentSource) {\n        sourceFiber.updateQueue = currentSource.updateQueue;\n        sourceFiber.memoizedState = currentSource.memoizedState;\n        sourceFiber.lanes = currentSource.lanes;\n      } else {\n        sourceFiber.updateQueue = null;\n        sourceFiber.memoizedState = null;\n      }\n    }\n\n    const hasInvisibleParentBoundary = hasSuspenseContext(\n      suspenseStackCursor.current,\n      (InvisibleParentSuspenseContext: SuspenseContext),\n    );\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    let workInProgress = returnFiber;\n    do {\n      if (\n        workInProgress.tag === SuspenseComponent &&\n        shouldCaptureSuspense(workInProgress, hasInvisibleParentBoundary)\n      ) {\n        // Found the nearest boundary.\n\n        // Stash the promise on the boundary fiber. If the boundary times out, we'll\n        // attach another listener to flip the boundary back to its normal state.\n        const wakeables: Set<Wakeable> = (workInProgress.updateQueue: any);\n        if (wakeables === null) {\n          const updateQueue = (new Set(): any);\n          updateQueue.add(wakeable);\n          workInProgress.updateQueue = updateQueue;\n        } else {\n          wakeables.add(wakeable);\n        }\n\n        // If the boundary is outside of blocking mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. In the commit phase, we'll schedule a\n        // subsequent synchronous update to re-render the Suspense.\n        //\n        // Note: It doesn't matter whether the component that suspended was\n        // inside a blocking mode tree. If the Suspense is outside of it, we\n        // should *not* suspend the commit.\n        if ((workInProgress.mode & BlockingMode) === NoMode) {\n          workInProgress.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n          // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (sourceFiber.tag === ClassComponent) {\n            const currentSourceFiber = sourceFiber.alternate;\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              const update = createUpdate(NoTimestamp, SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update);\n            }\n          }\n\n          // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n\n          // Exit without suspending.\n          return;\n        }\n\n        // Confirmed that the boundary is in a concurrent mode tree. Continue\n        // with the normal suspend path.\n        //\n        // After this we'll use a set of heuristics to determine whether this\n        // render pass will run to completion or restart or \"suspend\" the commit.\n        // The actual logic for this is spread out in different places.\n        //\n        // This first principle is that if we're going to suspend when we complete\n        // a root, then we should also restart if we get an update or ping that\n        // might unsuspend it, and vice versa. The only reason to suspend is\n        // because you think you might want to restart before committing. However,\n        // it doesn't make sense to restart only while in the period we're suspended.\n        //\n        // Restarting too aggressively is also not good because it starves out any\n        // intermediate loading state. So we use heuristics to determine when.\n\n        // Suspense Heuristics\n        //\n        // If nothing threw a Promise or all the same fallbacks are already showing,\n        // then don't suspend/restart.\n        //\n        // If this is an initial render of a new tree of Suspense boundaries and\n        // those trigger a fallback, then don't suspend/restart. We want to ensure\n        // that we can show the initial loading state as quickly as possible.\n        //\n        // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n        // a fallback, then we should always suspend/restart. Transitions apply\n        // to this case. If none is defined, JND is used instead.\n        //\n        // If we're already showing a fallback and it gets \"retried\", allowing us to show\n        // another level, but there's still an inner boundary that would show a fallback,\n        // then we suspend/restart for 500ms since the last time we showed a fallback\n        // anywhere in the tree. This effectively throttles progressive loading into a\n        // consistent train of commits. This also gives us an opportunity to restart to\n        // get to the completed state slightly earlier.\n        //\n        // If there's ambiguity due to batching it's resolved in preference of:\n        // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n        //\n        // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n        // ensure that new initial loading states can commit as soon as possible.\n\n        attachPingListener(root, wakeable, rootRenderLanes);\n\n        workInProgress.flags |= ShouldCapture;\n        workInProgress.lanes = rootRenderLanes;\n\n        return;\n      }\n      // This boundary already captured during this render. Continue to the next\n      // boundary.\n      workInProgress = workInProgress.return;\n    } while (workInProgress !== null);\n    // No boundary was found. Fallthrough to error mode.\n    // TODO: Use invariant so the message is stripped in prod?\n    value = new Error(\n      (getComponentName(sourceFiber.type) || 'A React component') +\n        ' suspended while rendering, but no fallback UI was specified.\\n' +\n        '\\n' +\n        'Add a <Suspense fallback=...> component higher in the tree to ' +\n        'provide a loading indicator or placeholder to display.',\n    );\n  }\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  renderDidError();\n\n  value = createCapturedValue(value, sourceFiber);\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport invariant from 'shared/invariant';\n\n// Provided by www\nconst ReactFbErrorUtils = require('ReactFbErrorUtils');\ninvariant(\n  typeof ReactFbErrorUtils.invokeGuardedCallback === 'function',\n  'Expected ReactFbErrorUtils.invokeGuardedCallback to be a function.',\n);\n\nconst invokeGuardedCallbackImpl = function<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n) {\n  // This will call `this.onError(err)` if an error was caught.\n  ReactFbErrorUtils.invokeGuardedCallback.apply(this, arguments);\n};\n\nexport default invokeGuardedCallbackImpl;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\nimport invokeGuardedCallbackImpl from './invokeGuardedCallbackImpl';\n\n// Used by Fiber to simulate a try-catch.\nlet hasError: boolean = false;\nlet caughtError: mixed = null;\n\n// Used by event system to capture/rethrow the first error.\nlet hasRethrowError: boolean = false;\nlet rethrowError: mixed = null;\n\nconst reporter = {\n  onError(error: mixed) {\n    hasError = true;\n    caughtError = error;\n  },\n};\n\n/**\n * Call a function while guarding against errors that happens within it.\n * Returns an error if it throws, otherwise null.\n *\n * In production, this is implemented using a try-catch. The reason we don't\n * use a try-catch directly is so that we can swap out a different\n * implementation in DEV mode.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallback<A, B, C, D, E, F, Context>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => mixed,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  hasError = false;\n  caughtError = null;\n  invokeGuardedCallbackImpl.apply(reporter, arguments);\n}\n\n/**\n * Same as invokeGuardedCallback, but instead of returning an error, it stores\n * it in a global so it can be rethrown by `rethrowCaughtError` later.\n * TODO: See if caughtError and rethrowError can be unified.\n *\n * @param {String} name of the guard to use for logging or debugging\n * @param {Function} func The function to invoke\n * @param {*} context The context to use when calling the function\n * @param {...*} args Arguments for function\n */\nexport function invokeGuardedCallbackAndCatchFirstError<\n  A,\n  B,\n  C,\n  D,\n  E,\n  F,\n  Context,\n>(\n  name: string | null,\n  func: (a: A, b: B, c: C, d: D, e: E, f: F) => void,\n  context: Context,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n  e: E,\n  f: F,\n): void {\n  invokeGuardedCallback.apply(this, arguments);\n  if (hasError) {\n    const error = clearCaughtError();\n    if (!hasRethrowError) {\n      hasRethrowError = true;\n      rethrowError = error;\n    }\n  }\n}\n\n/**\n * During execution of guarded functions we will capture the first error which\n * we will rethrow to be handled by the top level error handler.\n */\nexport function rethrowCaughtError() {\n  if (hasRethrowError) {\n    const error = rethrowError;\n    hasRethrowError = false;\n    rethrowError = null;\n    throw error;\n  }\n}\n\nexport function hasCaughtError() {\n  return hasError;\n}\n\nexport function clearCaughtError() {\n  if (hasError) {\n    const error = caughtError;\n    hasError = false;\n    caughtError = null;\n    return error;\n  } else {\n    invariant(\n      false,\n      'clearCaughtError was called but no error was captured. This error ' +\n        'is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\n\nimport {unstable_wrap as Schedule_tracing_wrap} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  enableSuspenseCallback,\n  enableScopeAPI,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  Snapshot,\n  Update,\n} from './ReactFiberFlags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\n\nimport {onCommitUnmount} from './ReactFiberDevToolsHook.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ProfileMode} from './ReactTypeOfMode';\nimport {commitUpdateQueue} from './ReactUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  unmountFundamentalComponent,\n  updateFundamentalComponent,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveHookEffectMount,\n  enqueuePendingPassiveHookEffectUnmount,\n  enqueuePendingPassiveProfilerEffect,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(current: Fiber, instance: any) {\n  if (__DEV__) {\n    invokeGuardedCallback(\n      null,\n      callComponentWillUnmountWithTimer,\n      null,\n      current,\n      instance,\n    );\n    if (hasCaughtError()) {\n      const unmountError = clearCaughtError();\n      captureCommitPhaseError(current, unmountError);\n    }\n  } else {\n    try {\n      callComponentWillUnmountWithTimer(current, instance);\n    } catch (unmountError) {\n      captureCommitPhaseError(current, unmountError);\n    }\n  }\n}\n\nfunction safelyDetachRef(current: Fiber) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      if (__DEV__) {\n        invokeGuardedCallback(null, ref, null, null);\n        if (hasCaughtError()) {\n          const refError = clearCaughtError();\n          captureCommitPhaseError(current, refError);\n        }\n      } else {\n        try {\n          ref(null);\n        } catch (refError) {\n          captureCommitPhaseError(current, refError);\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(current: Fiber, destroy: () => void) {\n  if (__DEV__) {\n    invokeGuardedCallback(null, destroy, null);\n    if (hasCaughtError()) {\n      const error = clearCaughtError();\n      captureCommitPhaseError(current, error);\n    }\n  } else {\n    try {\n      destroy();\n    } catch (error) {\n      captureCommitPhaseError(current, error);\n    }\n  }\n}\n\nfunction commitBeforeMutationLifeCycles(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n    case Block: {\n      return;\n    }\n    case ClassComponent: {\n      if (finishedWork.flags & Snapshot) {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentName(finishedWork.type),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n      }\n      return;\n    }\n    case HostRoot: {\n      if (supportsMutation) {\n        if (finishedWork.flags & Snapshot) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n      }\n      return;\n    }\n    case HostComponent:\n    case HostText:\n    case HostPortal:\n    case IncompleteClassComponent:\n      // Nothing to do for these component types\n      return;\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction commitHookEffectListUnmount(tag: number, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          destroy();\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(tag: number, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Mount\n        const create = effect.create;\n        effect.destroy = create();\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                'useEffect(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              'An effect function must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction schedulePassiveEffects(finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      const {next, tag} = effect;\n      if (\n        (tag & HookPassive) !== NoHookEffect &&\n        (tag & HookHasEffect) !== NoHookEffect\n      ) {\n        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);\n        enqueuePendingPassiveHookEffectMount(finishedWork, effect);\n      }\n      effect = next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          if (typeof onPostCommit === 'function') {\n            if (enableSchedulerTracing) {\n              onPostCommit(\n                id,\n                finishedWork.alternate === null ? 'mount' : 'update',\n                passiveEffectDuration,\n                commitTime,\n                finishedRoot.memoizedInteractions,\n              );\n            } else {\n              onPostCommit(\n                id,\n                finishedWork.alternate === null ? 'mount' : 'update',\n                passiveEffectDuration,\n                commitTime,\n              );\n            }\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          while (parentFiber !== null) {\n            if (parentFiber.tag === Profiler) {\n              const parentStateNode = parentFiber.stateNode;\n              parentStateNode.passiveEffectDuration += passiveEffectDuration;\n              break;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitLifeCycles(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n    case Block: {\n      // At this point layout effects have already been destroyed (during mutation phase).\n      // This is done to prevent sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n      }\n\n      schedulePassiveEffects(finishedWork);\n      return;\n    }\n    case ClassComponent: {\n      const instance = finishedWork.stateNode;\n      if (finishedWork.flags & Update) {\n        if (current === null) {\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'componentDidMount. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'componentDidMount. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              instance.componentDidMount();\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            instance.componentDidMount();\n          }\n        } else {\n          const prevProps =\n            finishedWork.elementType === finishedWork.type\n              ? current.memoizedProps\n              : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n          const prevState = current.memoizedState;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'componentDidUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'componentDidUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              instance.componentDidUpdate(\n                prevProps,\n                prevState,\n                instance.__reactInternalSnapshotBeforeUpdate,\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            instance.componentDidUpdate(\n              prevProps,\n              prevState,\n              instance.__reactInternalSnapshotBeforeUpdate,\n            );\n          }\n        }\n      }\n\n      // TODO: I think this is now always non-null by the time it reaches the\n      // commit phase. Consider removing the type check.\n      const updateQueue: UpdateQueue<\n        *,\n      > | null = (finishedWork.updateQueue: any);\n      if (updateQueue !== null) {\n        if (__DEV__) {\n          if (\n            finishedWork.type === finishedWork.elementType &&\n            !didWarnAboutReassigningProps\n          ) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              console.error(\n                'Expected %s props to match memoized props before ' +\n                  'processing the update queue. ' +\n                  'This might either be because of a bug in React, or because ' +\n                  'a component reassigns its own `this.props`. ' +\n                  'Please file an issue.',\n                getComponentName(finishedWork.type) || 'instance',\n              );\n            }\n            if (instance.state !== finishedWork.memoizedState) {\n              console.error(\n                'Expected %s state to match memoized state before ' +\n                  'processing the update queue. ' +\n                  'This might either be because of a bug in React, or because ' +\n                  'a component reassigns its own `this.state`. ' +\n                  'Please file an issue.',\n                getComponentName(finishedWork.type) || 'instance',\n              );\n            }\n          }\n        }\n        // We could update instance props and state here,\n        // but instead we rely on them being set during last render.\n        // TODO: revisit this when we implement resuming.\n        commitUpdateQueue(finishedWork, updateQueue, instance);\n      }\n      return;\n    }\n    case HostRoot: {\n      // TODO: I think this is now always non-null by the time it reaches the\n      // commit phase. Consider removing the type check.\n      const updateQueue: UpdateQueue<\n        *,\n      > | null = (finishedWork.updateQueue: any);\n      if (updateQueue !== null) {\n        let instance = null;\n        if (finishedWork.child !== null) {\n          switch (finishedWork.child.tag) {\n            case HostComponent:\n              instance = getPublicInstance(finishedWork.child.stateNode);\n              break;\n            case ClassComponent:\n              instance = finishedWork.child.stateNode;\n              break;\n          }\n        }\n        commitUpdateQueue(finishedWork, updateQueue, instance);\n      }\n      return;\n    }\n    case HostComponent: {\n      const instance: Instance = finishedWork.stateNode;\n\n      // Renderers may schedule work to be done after host components are mounted\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n      // These effects should only be committed when components are first mounted,\n      // aka when there is no current/alternate.\n      if (current === null && finishedWork.flags & Update) {\n        const type = finishedWork.type;\n        const props = finishedWork.memoizedProps;\n        commitMount(instance, type, props, finishedWork);\n      }\n\n      return;\n    }\n    case HostText: {\n      // We have no life-cycles associated with text.\n      return;\n    }\n    case HostPortal: {\n      // We have no life-cycles associated with portals.\n      return;\n    }\n    case Profiler: {\n      if (enableProfilerTimer) {\n        const {onCommit, onRender} = finishedWork.memoizedProps;\n        const {effectDuration} = finishedWork.stateNode;\n\n        const commitTime = getCommitTime();\n\n        if (typeof onRender === 'function') {\n          if (enableSchedulerTracing) {\n            onRender(\n              finishedWork.memoizedProps.id,\n              current === null ? 'mount' : 'update',\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n              finishedRoot.memoizedInteractions,\n            );\n          } else {\n            onRender(\n              finishedWork.memoizedProps.id,\n              current === null ? 'mount' : 'update',\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n            );\n          }\n        }\n\n        if (enableProfilerCommitHooks) {\n          if (typeof onCommit === 'function') {\n            if (enableSchedulerTracing) {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                current === null ? 'mount' : 'update',\n                effectDuration,\n                commitTime,\n                finishedRoot.memoizedInteractions,\n              );\n            } else {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                current === null ? 'mount' : 'update',\n                effectDuration,\n                commitTime,\n              );\n            }\n          }\n\n          // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n          // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n          // because the effect is also where times bubble to parent Profilers.\n          enqueuePendingPassiveProfilerEffect(finishedWork);\n\n          // Propagate layout effect durations to the next nearest Profiler ancestor.\n          // Do not reset these values until the next render so DevTools has a chance to read them first.\n          let parentFiber = finishedWork.return;\n          while (parentFiber !== null) {\n            if (parentFiber.tag === Profiler) {\n              const parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += effectDuration;\n              break;\n            }\n            parentFiber = parentFiber.return;\n          }\n        }\n      }\n      return;\n    }\n    case SuspenseComponent: {\n      commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n      return;\n    }\n    case SuspenseListComponent:\n    case IncompleteClassComponent:\n    case FundamentalComponent:\n    case ScopeComponent:\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      return;\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        const instance = node.stateNode;\n        if (isHidden) {\n          hideInstance(instance);\n        } else {\n          unhideInstance(node.stateNode, node.memoizedProps);\n        }\n      } else if (node.tag === HostText) {\n        const instance = node.stateNode;\n        if (isHidden) {\n          hideTextInstance(instance);\n        } else {\n          unhideTextInstance(instance, node.memoizedProps);\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden. Don't search\n        // any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      ref(instanceToUse);\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentName(finishedWork.type),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      currentRef(null);\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\n// User-originating errors (lifecycles and refs) should not interrupt\n// deletion, so don't let them throw. Host-originating errors should\n// interrupt deletion, so it's okay\nfunction commitUnmount(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  onCommitUnmount(current);\n\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n    case Block: {\n      const updateQueue: FunctionComponentUpdateQueue | null = (current.updateQueue: any);\n      if (updateQueue !== null) {\n        const lastEffect = updateQueue.lastEffect;\n        if (lastEffect !== null) {\n          const firstEffect = lastEffect.next;\n\n          let effect = firstEffect;\n          do {\n            const {destroy, tag} = effect;\n            if (destroy !== undefined) {\n              if ((tag & HookPassive) !== NoHookEffect) {\n                enqueuePendingPassiveHookEffectUnmount(current, effect);\n              } else {\n                if (\n                  enableProfilerTimer &&\n                  enableProfilerCommitHooks &&\n                  current.mode & ProfileMode\n                ) {\n                  startLayoutEffectTimer();\n                  safelyCallDestroy(current, destroy);\n                  recordLayoutEffectDuration(current);\n                } else {\n                  safelyCallDestroy(current, destroy);\n                }\n              }\n            }\n            effect = effect.next;\n          } while (effect !== firstEffect);\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      safelyDetachRef(current);\n      const instance = current.stateNode;\n      if (typeof instance.componentWillUnmount === 'function') {\n        safelyCallComponentWillUnmount(current, instance);\n      }\n      return;\n    }\n    case HostComponent: {\n      safelyDetachRef(current);\n      return;\n    }\n    case HostPortal: {\n      // TODO: this is recursive.\n      // We are also not using this parent because\n      // the portal will get pushed immediately.\n      if (supportsMutation) {\n        unmountHostComponents(finishedRoot, current, renderPriorityLevel);\n      } else if (supportsPersistence) {\n        emptyPortalContainer(current);\n      }\n      return;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalInstance = current.stateNode;\n        if (fundamentalInstance !== null) {\n          unmountFundamentalComponent(fundamentalInstance);\n          current.stateNode = null;\n        }\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((current.stateNode: SuspenseInstance));\n          }\n        }\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(current);\n      }\n      return;\n    }\n  }\n}\n\nfunction commitNestedUnmounts(\n  finishedRoot: FiberRoot,\n  root: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  // While we're inside a removed host node we don't want to call\n  // removeChild on the inner nodes because they're removed by the top\n  // call anyway. We also want to call componentWillUnmount on all\n  // composites before this host node is removed from the tree. Therefore\n  // we do an inner loop while we're still inside the host node.\n  let node: Fiber = root;\n  while (true) {\n    commitUnmount(finishedRoot, node, renderPriorityLevel);\n    // Visit children because they may contain more composite or host nodes.\n    // Skip portals because commitUnmount() currently visits them recursively.\n    if (\n      node.child !== null &&\n      // If we use mutation we drill down into portals using commitUnmount above.\n      // If we don't use mutation we drill down into portals here instead.\n      (!supportsMutation || node.tag !== HostPortal)\n    ) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === root) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === root) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointers to disconnect it from the tree. Ideally, we\n  // should clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child. This child\n  // itself will be GC:ed when the parent updates the next time.\n  // Note: we cannot null out sibling here, otherwise it can cause issues\n  // with findDOMNode and how it requires the sibling field to carry out\n  // traversal in a later effect. See PR #16820. We now clear the sibling\n  // field after effects, see: detachFiberAfterEffects.\n  //\n  // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.\n  // It may be required if the current component is an error boundary,\n  // and one of its descendants throws while unmounting a passive effect.\n  fiber.alternate = null;\n  fiber.child = null;\n  fiber.dependencies = null;\n  fiber.firstEffect = null;\n  fiber.lastEffect = null;\n  fiber.memoizedProps = null;\n  fiber.memoizedState = null;\n  fiber.pendingProps = null;\n  fiber.return = null;\n  fiber.updateQueue = null;\n  if (__DEV__) {\n    fiber._debugOwner = null;\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction commitContainer(finishedWork: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case ClassComponent:\n    case HostComponent:\n    case HostText:\n    case FundamentalComponent: {\n      return;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const portalOrRoot: {\n        containerInfo: Container,\n        pendingChildren: ChildSet,\n        ...\n      } = finishedWork.stateNode;\n      const {containerInfo, pendingChildren} = portalOrRoot;\n      replaceContainerChildren(containerInfo, pendingChildren);\n      return;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n  invariant(\n    false,\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  let parent;\n  let isContainer;\n  const parentStateNode = parentFiber.stateNode;\n  switch (parentFiber.tag) {\n    case HostComponent:\n      parent = parentStateNode;\n      isContainer = false;\n      break;\n    case HostRoot:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    case HostPortal:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    case FundamentalComponent:\n      if (enableFundamentalAPI) {\n        parent = parentStateNode.instance;\n        isContainer = false;\n      }\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      invariant(\n        false,\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n  if (parentFiber.flags & ContentReset) {\n    // Reset the text content of the parent before doing any insertions\n    resetTextContent(parent);\n    // Clear ContentReset from the effect tag\n    parentFiber.flags &= ~ContentReset;\n  }\n\n  const before = getHostSibling(finishedWork);\n  // We only have the top Fiber that was inserted but we need to recurse down its\n  // children to find all the terminal nodes.\n  if (isContainer) {\n    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n  } else {\n    insertOrAppendPlacementNode(finishedWork, before, parent);\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost || (enableFundamentalAPI && tag === FundamentalComponent)) {\n    const stateNode = isHost ? node.stateNode : node.stateNode.instance;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost || (enableFundamentalAPI && tag === FundamentalComponent)) {\n    const stateNode = isHost ? node.stateNode : node.stateNode.instance;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction unmountHostComponents(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  // We only have the top Fiber that was deleted but we need to recurse down its\n  // children to find all the terminal nodes.\n  let node: Fiber = current;\n\n  // Each iteration, currentParent is populated with node's host parent if not\n  // currentParentIsValid.\n  let currentParentIsValid = false;\n\n  // Note: these two variables *must* always be updated together.\n  let currentParent;\n  let currentParentIsContainer;\n\n  while (true) {\n    if (!currentParentIsValid) {\n      let parent = node.return;\n      findParent: while (true) {\n        invariant(\n          parent !== null,\n          'Expected to find a host parent. This error is likely caused by ' +\n            'a bug in React. Please file an issue.',\n        );\n        const parentStateNode = parent.stateNode;\n        switch (parent.tag) {\n          case HostComponent:\n            currentParent = parentStateNode;\n            currentParentIsContainer = false;\n            break findParent;\n          case HostRoot:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n          case HostPortal:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n          case FundamentalComponent:\n            if (enableFundamentalAPI) {\n              currentParent = parentStateNode.instance;\n              currentParentIsContainer = false;\n            }\n        }\n        parent = parent.return;\n      }\n      currentParentIsValid = true;\n    }\n\n    if (node.tag === HostComponent || node.tag === HostText) {\n      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);\n      // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n      if (currentParentIsContainer) {\n        removeChildFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: Instance | TextInstance),\n        );\n      } else {\n        removeChild(\n          ((currentParent: any): Instance),\n          (node.stateNode: Instance | TextInstance),\n        );\n      }\n      // Don't visit children because we already visited them.\n    } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n      const fundamentalNode = node.stateNode.instance;\n      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);\n      // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n      if (currentParentIsContainer) {\n        removeChildFromContainer(\n          ((currentParent: any): Container),\n          (fundamentalNode: Instance),\n        );\n      } else {\n        removeChild(\n          ((currentParent: any): Instance),\n          (fundamentalNode: Instance),\n        );\n      }\n    } else if (\n      enableSuspenseServerRenderer &&\n      node.tag === DehydratedFragment\n    ) {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((node.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (currentParentIsContainer) {\n        clearSuspenseBoundaryFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: SuspenseInstance),\n        );\n      } else {\n        clearSuspenseBoundary(\n          ((currentParent: any): Instance),\n          (node.stateNode: SuspenseInstance),\n        );\n      }\n    } else if (node.tag === HostPortal) {\n      if (node.child !== null) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        currentParentIsContainer = true;\n        // Visit children because portals might contain host components.\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    } else {\n      commitUnmount(finishedRoot, node, renderPriorityLevel);\n      // Visit children because we may find more host components below.\n      if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    }\n    if (node === current) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === current) {\n        return;\n      }\n      node = node.return;\n      if (node.tag === HostPortal) {\n        // When we go out of the portal, we need to restore the parent.\n        // Since we don't keep a stack of them, we will search for it.\n        currentParentIsValid = false;\n      }\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction commitDeletion(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  if (supportsMutation) {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(finishedRoot, current, renderPriorityLevel);\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitNestedUnmounts(finishedRoot, current, renderPriorityLevel);\n  }\n  const alternate = current.alternate;\n  detachFiberMutation(current);\n  if (alternate !== null) {\n    detachFiberMutation(alternate);\n  }\n}\n\nfunction commitWork(current: Fiber | null, finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent:\n      case Block: {\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n            );\n          } finally {\n            recordLayoutEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n        }\n        return;\n      }\n      case Profiler: {\n        return;\n      }\n      case SuspenseComponent: {\n        commitSuspenseComponent(finishedWork);\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case SuspenseListComponent: {\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case HostRoot: {\n        if (supportsHydration) {\n          const root: FiberRoot = finishedWork.stateNode;\n          if (root.hydrate) {\n            // We've just hydrated. No need to hydrate again.\n            root.hydrate = false;\n            commitHydratedContainer(root.containerInfo);\n          }\n        }\n        break;\n      }\n      case OffscreenComponent:\n      case LegacyHiddenComponent: {\n        return;\n      }\n    }\n\n    commitContainer(finishedWork);\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n    case Block: {\n      // Layout effects are destroyed during the mutation phase so that all\n      // destroy functions for all fibers are called before any create functions.\n      // This prevents sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n      }\n      return;\n    }\n    case ClassComponent: {\n      return;\n    }\n    case HostComponent: {\n      const instance: Instance = finishedWork.stateNode;\n      if (instance != null) {\n        // Commit the work prepared earlier.\n        const newProps = finishedWork.memoizedProps;\n        // For hydration we reuse the update path but we treat the oldProps\n        // as the newProps. The updatePayload will contain the real change in\n        // this case.\n        const oldProps = current !== null ? current.memoizedProps : newProps;\n        const type = finishedWork.type;\n        // TODO: Type the updateQueue to be specific to host components.\n        const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n        finishedWork.updateQueue = null;\n        if (updatePayload !== null) {\n          commitUpdate(\n            instance,\n            updatePayload,\n            type,\n            oldProps,\n            newProps,\n            finishedWork,\n          );\n        }\n      }\n      return;\n    }\n    case HostText: {\n      invariant(\n        finishedWork.stateNode !== null,\n        'This should have a text node initialized. This error is likely ' +\n          'caused by a bug in React. Please file an issue.',\n      );\n      const textInstance: TextInstance = finishedWork.stateNode;\n      const newText: string = finishedWork.memoizedProps;\n      // For hydration we reuse the update path but we treat the oldProps\n      // as the newProps. The updatePayload will contain the real change in\n      // this case.\n      const oldText: string =\n        current !== null ? current.memoizedProps : newText;\n      commitTextUpdate(textInstance, oldText, newText);\n      return;\n    }\n    case HostRoot: {\n      if (supportsHydration) {\n        const root: FiberRoot = finishedWork.stateNode;\n        if (root.hydrate) {\n          // We've just hydrated. No need to hydrate again.\n          root.hydrate = false;\n          commitHydratedContainer(root.containerInfo);\n        }\n      }\n      return;\n    }\n    case Profiler: {\n      return;\n    }\n    case SuspenseComponent: {\n      commitSuspenseComponent(finishedWork);\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case SuspenseListComponent: {\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case IncompleteClassComponent: {\n      return;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalInstance = finishedWork.stateNode;\n        updateFundamentalComponent(fundamentalInstance);\n        return;\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        const scopeInstance = finishedWork.stateNode;\n        prepareScopeUpdate(scopeInstance, finishedWork);\n        return;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      const newState: OffscreenState | null = finishedWork.memoizedState;\n      const isHidden = newState !== null;\n      hideOrUnhideAllChildren(finishedWork, isHidden);\n      return;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction commitSuspenseComponent(finishedWork: Fiber) {\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n\n  if (newState !== null) {\n    markCommitTimeOfFallback();\n\n    if (supportsMutation) {\n      // Hide the Offscreen component that contains the primary children. TODO:\n      // Ideally, this effect would have been scheduled on the Offscreen fiber\n      // itself. That's how unhiding works: the Offscreen component schedules an\n      // effect on itself. However, in this case, the component didn't complete,\n      // so the fiber was never added to the effect list in the normal path. We\n      // could have appended it to the effect list in the Suspense component's\n      // second pass, but doing it this way is less complicated. This would be\n      // simpler if we got rid of the effect list and traversed the tree, like\n      // we're planning to do.\n      const primaryChildParent: Fiber = (finishedWork.child: any);\n      hideOrUnhideAllChildren(primaryChildParent, true);\n    }\n  }\n\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n          if (enableSuspenseCallback) {\n            const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n            if (hydrationCallbacks !== null) {\n              const onHydrated = hydrationCallbacks.onHydrated;\n              if (onHydrated) {\n                onHydrated(suspenseInstance);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork: Fiber) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    let retryCache = finishedWork.stateNode;\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n    wakeables.forEach(wakeable => {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      let retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n      if (!retryCache.has(wakeable)) {\n        if (enableSchedulerTracing) {\n          if (wakeable.__reactDoNotTraceInteractions !== true) {\n            retry = Schedule_tracing_wrap(retry);\n          }\n        }\n        retryCache.add(wakeable);\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nfunction commitResetTextContent(current: Fiber) {\n  if (!supportsMutation) {\n    return;\n  }\n  resetTextContent(current.stateNode);\n}\n\nexport {\n  commitBeforeMutationLifeCycles,\n  commitResetTextContent,\n  commitPlacement,\n  commitDeletion,\n  commitWork,\n  commitLifeCycles,\n  commitAttachRef,\n  commitDetachRef,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\nimport {HostComponent, HostText} from 'react-reconciler/src/ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport {\n  findFiberRoot,\n  getBoundingRect,\n  getInstanceFromNode,\n  getTextContent,\n  isHiddenSubtree,\n  matchAccessibilityRole,\n  setFocusIfFocusable,\n  setupIntersectionObserver,\n  supportsTestSelectors,\n} from './ReactFiberHostConfig';\n\nlet COMPONENT_TYPE = 0b000;\nlet HAS_PSEUDO_CLASS_TYPE = 0b001;\nlet ROLE_TYPE = 0b010;\nlet TEST_NAME_TYPE = 0b011;\nlet TEXT_TYPE = 0b100;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  COMPONENT_TYPE = symbolFor('selector.component');\n  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');\n  ROLE_TYPE = symbolFor('selector.role');\n  TEST_NAME_TYPE = symbolFor('selector.test_id');\n  TEXT_TYPE = symbolFor('selector.text');\n}\n\ntype Type = Symbol | number;\n\ntype ComponentSelector = {|\n  $$typeof: Type,\n  value: React$AbstractComponent<empty, mixed>,\n|};\n\ntype HasPsuedoClassSelector = {|\n  $$typeof: Type,\n  value: Array<Selector>,\n|};\n\ntype RoleSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TextSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype TestNameSelector = {|\n  $$typeof: Type,\n  value: string,\n|};\n\ntype Selector =\n  | ComponentSelector\n  | HasPsuedoClassSelector\n  | RoleSelector\n  | TextSelector\n  | TestNameSelector;\n\nexport function createComponentSelector(\n  component: React$AbstractComponent<empty, mixed>,\n): ComponentSelector {\n  return {\n    $$typeof: COMPONENT_TYPE,\n    value: component,\n  };\n}\n\nexport function createHasPsuedoClassSelector(\n  selectors: Array<Selector>,\n): HasPsuedoClassSelector {\n  return {\n    $$typeof: HAS_PSEUDO_CLASS_TYPE,\n    value: selectors,\n  };\n}\n\nexport function createRoleSelector(role: string): RoleSelector {\n  return {\n    $$typeof: ROLE_TYPE,\n    value: role,\n  };\n}\n\nexport function createTextSelector(text: string): TextSelector {\n  return {\n    $$typeof: TEXT_TYPE,\n    value: text,\n  };\n}\n\nexport function createTestNameSelector(id: string): TestNameSelector {\n  return {\n    $$typeof: TEST_NAME_TYPE,\n    value: id,\n  };\n}\n\nfunction findFiberRootForHostRoot(hostRoot: Instance): Fiber {\n  const maybeFiber = getInstanceFromNode((hostRoot: any));\n  if (maybeFiber != null) {\n    invariant(\n      typeof maybeFiber.memoizedProps['data-testname'] === 'string',\n      'Invalid host root specified. Should be either a React container or a node with a testname attribute.',\n    );\n    return ((maybeFiber: any): Fiber);\n  } else {\n    const fiberRoot = findFiberRoot(hostRoot);\n    invariant(\n      fiberRoot !== null,\n      'Could not find React container within specified host subtree.',\n    );\n    // The Flow type for FiberRoot is a little funky.\n    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.\n    return ((fiberRoot: any).stateNode.current: Fiber);\n  }\n}\n\nfunction matchSelector(fiber: Fiber, selector: Selector): boolean {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      if (fiber.type === selector.value) {\n        return true;\n      }\n      break;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return hasMatchingPaths(\n        fiber,\n        ((selector: any): HasPsuedoClassSelector).value,\n      );\n    case ROLE_TYPE:\n      if (fiber.tag === HostComponent) {\n        const node = fiber.stateNode;\n        if (\n          matchAccessibilityRole(node, ((selector: any): RoleSelector).value)\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEXT_TYPE:\n      if (fiber.tag === HostComponent || fiber.tag === HostText) {\n        const textContent = getTextContent(fiber);\n        if (\n          textContent !== null &&\n          textContent.indexOf(((selector: any): TextSelector).value) >= 0\n        ) {\n          return true;\n        }\n      }\n      break;\n    case TEST_NAME_TYPE:\n      if (fiber.tag === HostComponent) {\n        const dataTestID = fiber.memoizedProps['data-testname'];\n        if (\n          typeof dataTestID === 'string' &&\n          dataTestID.toLowerCase() ===\n            ((selector: any): TestNameSelector).value.toLowerCase()\n        ) {\n          return true;\n        }\n      }\n      break;\n    default:\n      invariant(null, 'Invalid selector type %s specified.', selector);\n      break;\n  }\n\n  return false;\n}\n\nfunction selectorToString(selector: Selector): string | null {\n  switch (selector.$$typeof) {\n    case COMPONENT_TYPE:\n      const displayName = getComponentName(selector.value) || 'Unknown';\n      return `<${displayName}>`;\n    case HAS_PSEUDO_CLASS_TYPE:\n      return `:has(${selectorToString(selector) || ''})`;\n    case ROLE_TYPE:\n      return `[role=\"${((selector: any): RoleSelector).value}\"]`;\n    case TEXT_TYPE:\n      return `\"${((selector: any): TextSelector).value}\"`;\n    case TEST_NAME_TYPE:\n      return `[data-testname=\"${((selector: any): TestNameSelector).value}\"]`;\n    default:\n      invariant(null, 'Invalid selector type %s specified.', selector);\n      break;\n  }\n\n  return null;\n}\n\nfunction findPaths(root: Fiber, selectors: Array<Selector>): Array<Fiber> {\n  const matchingFibers: Array<Fiber> = [];\n\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      matchingFibers.push(fiber);\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return matchingFibers;\n}\n\n// Same as findPaths but with eager bailout on first match\nfunction hasMatchingPaths(root: Fiber, selectors: Array<Selector>): boolean {\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    let selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else {\n      while (selector != null && matchSelector(fiber, selector)) {\n        selectorIndex++;\n        selector = selectors[selectorIndex];\n      }\n    }\n\n    if (selectorIndex === selectors.length) {\n      return true;\n    } else {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return false;\n}\n\nexport function findAllNodes(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<Instance> {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const instanceRoots: Array<Instance> = [];\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const node = ((stack[index++]: any): Fiber);\n    if (node.tag === HostComponent) {\n      if (isHiddenSubtree(node)) {\n        continue;\n      }\n      instanceRoots.push(node.stateNode);\n    } else {\n      let child = node.child;\n      while (child !== null) {\n        stack.push(child);\n        child = child.sibling;\n      }\n    }\n  }\n\n  return instanceRoots;\n}\n\nexport function getFindAllNodesFailureDescription(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): string | null {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n\n  let maxSelectorIndex: number = 0;\n  const matchedNames = [];\n\n  // The logic of this loop should be kept in sync with findPaths()\n  const stack = [root, 0];\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    let selectorIndex = ((stack[index++]: any): number);\n    const selector = selectors[selectorIndex];\n\n    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {\n      continue;\n    } else if (matchSelector(fiber, selector)) {\n      matchedNames.push(selectorToString(selector));\n      selectorIndex++;\n\n      if (selectorIndex > maxSelectorIndex) {\n        maxSelectorIndex = selectorIndex;\n      }\n    }\n\n    if (selectorIndex < selectors.length) {\n      let child = fiber.child;\n      while (child !== null) {\n        stack.push(child, selectorIndex);\n        child = child.sibling;\n      }\n    }\n  }\n\n  if (maxSelectorIndex < selectors.length) {\n    const unmatchedNames = [];\n    for (let i = maxSelectorIndex; i < selectors.length; i++) {\n      unmatchedNames.push(selectorToString(selectors[i]));\n    }\n\n    return (\n      'findAllNodes was able to match part of the selector:\\n' +\n      `  ${matchedNames.join(' > ')}\\n\\n` +\n      'No matching component was found for:\\n' +\n      `  ${unmatchedNames.join(' > ')}`\n    );\n  }\n\n  return null;\n}\n\nexport type BoundingRect = {|\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n|};\n\nexport function findBoundingRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): Array<BoundingRect> {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const boundingRects: Array<BoundingRect> = [];\n  for (let i = 0; i < instanceRoots.length; i++) {\n    boundingRects.push(getBoundingRect(instanceRoots[i]));\n  }\n\n  for (let i = boundingRects.length - 1; i > 0; i--) {\n    const targetRect = boundingRects[i];\n    const targetLeft = targetRect.x;\n    const targetRight = targetLeft + targetRect.width;\n    const targetTop = targetRect.y;\n    const targetBottom = targetTop + targetRect.height;\n\n    for (let j = i - 1; j >= 0; j--) {\n      if (i !== j) {\n        const otherRect = boundingRects[j];\n        const otherLeft = otherRect.x;\n        const otherRight = otherLeft + otherRect.width;\n        const otherTop = otherRect.y;\n        const otherBottom = otherTop + otherRect.height;\n\n        // Merging all rects to the minimums set would be complicated,\n        // but we can handle the most common cases:\n        // 1. completely overlapping rects\n        // 2. adjacent rects that are the same width or height (e.g. items in a list)\n        //\n        // Even given the above constraints,\n        // we still won't end up with the fewest possible rects without doing multiple passes,\n        // but it's good enough for this purpose.\n\n        if (\n          targetLeft >= otherLeft &&\n          targetTop >= otherTop &&\n          targetRight <= otherRight &&\n          targetBottom <= otherBottom\n        ) {\n          // Complete overlapping rects; remove the inner one.\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetLeft === otherLeft &&\n          targetRect.width === otherRect.width &&\n          !(otherBottom < targetTop) &&\n          !(otherTop > targetBottom)\n        ) {\n          // Adjacent vertical rects; merge them.\n          if (otherTop > targetTop) {\n            otherRect.height += otherTop - targetTop;\n            otherRect.y = targetTop;\n          }\n          if (otherBottom < targetBottom) {\n            otherRect.height = targetBottom - otherTop;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        } else if (\n          targetTop === otherTop &&\n          targetRect.height === otherRect.height &&\n          !(otherRight < targetLeft) &&\n          !(otherLeft > targetRight)\n        ) {\n          // Adjacent horizontal rects; merge them.\n          if (otherLeft > targetLeft) {\n            otherRect.width += otherLeft - targetLeft;\n            otherRect.x = targetLeft;\n          }\n          if (otherRight < targetRight) {\n            otherRect.width = targetRight - otherLeft;\n          }\n\n          boundingRects.splice(i, 1);\n          break;\n        }\n      }\n    }\n  }\n\n  return boundingRects;\n}\n\nexport function focusWithin(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n): boolean {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const root = findFiberRootForHostRoot(hostRoot);\n  const matchingFibers = findPaths(root, selectors);\n\n  const stack = Array.from(matchingFibers);\n  let index = 0;\n  while (index < stack.length) {\n    const fiber = ((stack[index++]: any): Fiber);\n    if (isHiddenSubtree(fiber)) {\n      continue;\n    }\n    if (fiber.tag === HostComponent) {\n      const node = fiber.stateNode;\n      if (setFocusIfFocusable(node)) {\n        return true;\n      }\n    }\n    let child = fiber.child;\n    while (child !== null) {\n      stack.push(child);\n      child = child.sibling;\n    }\n  }\n\n  return false;\n}\n\nconst commitHooks: Array<Function> = [];\n\nexport function onCommitRoot(): void {\n  if (supportsTestSelectors) {\n    commitHooks.forEach(commitHook => commitHook());\n  }\n}\n\nexport type IntersectionObserverOptions = Object;\n\nexport type ObserveVisibleRectsCallback = (\n  intersections: Array<{ratio: number, rect: BoundingRect}>,\n) => void;\n\nexport function observeVisibleRects(\n  hostRoot: Instance,\n  selectors: Array<Selector>,\n  callback: (intersections: Array<{ratio: number, rect: BoundingRect}>) => void,\n  options?: IntersectionObserverOptions,\n): {|disconnect: () => void|} {\n  if (!supportsTestSelectors) {\n    invariant(false, 'Test selector API is not supported by this renderer.');\n  }\n\n  const instanceRoots = findAllNodes(hostRoot, selectors);\n\n  const {disconnect, observe, unobserve} = setupIntersectionObserver(\n    instanceRoots,\n    callback,\n    options,\n  );\n\n  // When React mutates the host environment, we may need to change what we're listening to.\n  const commitHook = () => {\n    const nextInstanceRoots = findAllNodes(hostRoot, selectors);\n\n    instanceRoots.forEach(target => {\n      if (nextInstanceRoots.indexOf(target) < 0) {\n        unobserve(target);\n      }\n    });\n\n    nextInstanceRoots.forEach(target => {\n      if (instanceRoots.indexOf(target) < 0) {\n        observe(target);\n      }\n    });\n  };\n\n  commitHooks.push(commitHook);\n\n  return {\n    disconnect: () => {\n      // Stop listening for React mutations:\n      const index = commitHooks.indexOf(commitHook);\n      if (index >= 0) {\n        commitHooks.splice(index, 1);\n      }\n\n      // Disconnect the host observer:\n      disconnect();\n    },\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nlet didWarnAboutMessageChannel = false;\nlet enqueueTaskImpl = null;\n\nexport default function enqueueTask(task: () => void) {\n  if (enqueueTaskImpl === null) {\n    try {\n      // read require off the module object to get around the bundlers.\n      // we don't want them to detect a require and bundle a Node polyfill.\n      const requireString = ('require' + Math.random()).slice(0, 7);\n      const nodeRequire = module && module[requireString];\n      // assuming we're in node, let's try to get node's\n      // version of setImmediate, bypassing fake timers if any.\n      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n    } catch (_err) {\n      // we're in a browser\n      // we can't use regular timers because they may still be faked\n      // so we try MessageChannel+postMessage instead\n      enqueueTaskImpl = function(callback: () => void) {\n        if (__DEV__) {\n          if (didWarnAboutMessageChannel === false) {\n            didWarnAboutMessageChannel = true;\n            if (typeof MessageChannel === 'undefined') {\n              console.error(\n                'This browser does not have a MessageChannel implementation, ' +\n                  'so enqueuing tasks via await act(async () => ...) will fail. ' +\n                  'Please file an issue at https://github.com/facebook/react/issues ' +\n                  'if you encounter this warning.',\n              );\n            }\n          }\n        }\n        const channel = new MessageChannel();\n        channel.port1.onmessage = callback;\n        channel.port2.postMessage(undefined);\n      };\n    }\n  }\n  return enqueueTaskImpl(task);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Thenable, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {Interaction} from 'scheduler/src/Tracing';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Effect as HookEffect} from './ReactFiberHooks.old';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  enableSuspenseServerRenderer,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableSchedulerTracing,\n  warnAboutUnmockedScheduler,\n  deferRenderPhaseUpdateToNextBatch,\n  decoupleUpdatePriorityFromScheduler,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableScopeAPI,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport invariant from 'shared/invariant';\n\nimport {\n  scheduleCallback,\n  cancelCallback,\n  getCurrentPriorityLevel,\n  runWithPriority,\n  shouldYield,\n  requestPaint,\n  now,\n  NoPriority as NoSchedulerPriority,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  flushSyncCallbackQueue,\n  scheduleSyncCallback,\n} from './SchedulerWithReactIntegration.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\nimport {\n  markCommitStarted,\n  markCommitStopped,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n} from './SchedulingProfiler';\n\n// The scheduler is imported here *only* to detect whether it's been mocked\nimport * as Scheduler from 'scheduler';\n\nimport {__interactionsRef, __subscriberRef} from 'scheduler/tracing';\n\nimport {\n  prepareForCommit,\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  warnsIfNotActing,\n  beforeActiveInstanceBlur,\n  afterActiveInstanceBlur,\n  clearContainer,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {\n  NoMode,\n  StrictMode,\n  ProfileMode,\n  BlockingMode,\n  ConcurrentMode,\n} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  ScopeComponent,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Update,\n  PlacementAndUpdate,\n  Deletion,\n  Ref,\n  ContentReset,\n  Snapshot,\n  Callback,\n  Passive,\n  PassiveUnmountPendingDev,\n  Incomplete,\n  HostEffectMask,\n  Hydrating,\n  HydratingAndUpdate,\n} from './ReactFiberFlags';\nimport {\n  NoLanePriority,\n  SyncLanePriority,\n  SyncBatchedLanePriority,\n  InputDiscreteLanePriority,\n  DefaultLanePriority,\n  NoLanes,\n  NoLane,\n  SyncLane,\n  SyncBatchedLane,\n  OffscreenLane,\n  NoTimestamp,\n  findUpdateLane,\n  findTransitionLane,\n  findRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  hasDiscreteLanes,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  getNextLanes,\n  returnNextLanesPriority,\n  setCurrentUpdateLanePriority,\n  getCurrentUpdateLanePriority,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootExpired,\n  markDiscreteUpdatesExpired,\n  markRootFinished,\n  schedulerPriorityToLanePriority,\n  lanePriorityToSchedulerPriority,\n} from './ReactFiberLane';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationLifeCycles as commitBeforeMutationEffectOnFiber,\n  commitLifeCycles as commitLayoutEffectOnFiber,\n  commitPlacement,\n  commitWork,\n  commitDeletion,\n  commitDetachRef,\n  commitAttachRef,\n  commitPassiveEffectDurations,\n  commitResetTextContent,\n  isSuspenseBoundaryBeingHidden,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  push as pushToStack,\n  pop as popFromStack,\n  createCursor,\n} from './ReactFiberStack.old';\n\nimport {\n  recordCommitTime,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentName from 'shared/getComponentName';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {onCommitRoot as onCommitRootDevTools} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\n\n// Used by `act`\nimport enqueueTask from 'shared/enqueueTask';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  IsSomeRendererActing,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b0000000;\nconst BatchedContext = /*               */ 0b0000001;\nconst EventContext = /*                 */ 0b0000010;\nconst DiscreteEventContext = /*         */ 0b0000100;\nconst LegacyUnbatchedContext = /*       */ 0b0001000;\nconst RenderContext = /*                */ 0b0010000;\nconst CommitContext = /*                */ 0b0100000;\nexport const RetryAfterError = /*       */ 0b1000000;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5;\nconst RootIncomplete = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\nlet subtreeRenderLanes: Lanes = NoLanes;\nconst subtreeRenderLanesCursor: StackCursor<Lanes> = createCursor(NoLanes);\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootIncomplete;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\nlet workInProgressRootIncludedLanes: Lanes = NoLanes;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n\nlet mostRecentlyUpdatedRoot: FiberRoot | null = null;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet nextEffect: Fiber | null = null;\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsRenderPriority: ReactPriorityLevel = NoSchedulerPriority;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveHookEffectsMount: Array<HookEffect | Fiber> = [];\nlet pendingPassiveHookEffectsUnmount: Array<HookEffect | Fiber> = [];\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\n\nlet rootsWithPendingDiscreteUpdates: Set<FiberRoot> | null = null;\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\n\n// Marks the need to reschedule pending interactions at these lanes\n// during the commit phase. This enables them to be traced across components\n// that spawn new work during render. E.g. hidden boundaries, suspended SSR\n// hydration or SuspenseList.\n// TODO: Can use a bitmask instead of an array\nlet spawnedWorkDuringRender: null | Array<Lane | Lanes> = null;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventWipLanes: Lanes = NoLanes;\nlet currentEventPendingLanes: Lanes = NoLanes;\n\n// Dev only flag that tracks if passive effects are currently being flushed.\n// We warn about state updates for unmounted components differently in this case.\nlet isFlushingPassiveEffects = false;\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & BlockingMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if ((mode & ConcurrentMode) === NoMode) {\n    return getCurrentPriorityLevel() === ImmediateSchedulerPriority\n      ? (SyncLane: Lane)\n      : (SyncBatchedLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (expiration time) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  // The algorithm for assigning an update to a lane should be stable for all\n  // updates at the same priority within the same event. To do this, the inputs\n  // to the algorithm must be the same. For example, we use the `renderLanes`\n  // to avoid choosing a lane that is already in the middle of rendering.\n  //\n  // However, the \"included\" lanes could be mutated in between updates in the\n  // same event, like if you perform an update inside `flushSync`. Or any other\n  // code path that might call `prepareFreshStack`.\n  //\n  // The trick we use is to cache the first of each of these inputs within an\n  // event. Then reset the cached values once we can be sure the event is over.\n  // Our heuristic for that is whenever we enter a concurrent work loop.\n  //\n  // We'll do the same for `currentEventPendingLanes` below.\n  if (currentEventWipLanes === NoLanes) {\n    currentEventWipLanes = workInProgressRootIncludedLanes;\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (currentEventPendingLanes !== NoLanes) {\n      currentEventPendingLanes =\n        mostRecentlyUpdatedRoot !== null\n          ? mostRecentlyUpdatedRoot.pendingLanes\n          : NoLanes;\n    }\n    return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);\n  }\n\n  // TODO: Remove this dependency on the Scheduler priority.\n  // To do that, we're replacing it with an update lane priority.\n  const schedulerPriority = getCurrentPriorityLevel();\n\n  // The old behavior was using the priority level of the Scheduler.\n  // This couples React to the Scheduler internals, so we're replacing it\n  // with the currentUpdateLanePriority above. As an example of how this\n  // could be problematic, if we're not inside `Scheduler.runWithPriority`,\n  // then we'll get the priority of the current running Scheduler task,\n  // which is probably not what we want.\n  let lane;\n  if (\n    // TODO: Temporary. We're removing the concept of discrete updates.\n    (executionContext & DiscreteEventContext) !== NoContext &&\n    schedulerPriority === UserBlockingSchedulerPriority\n  ) {\n    lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);\n  } else {\n    const schedulerLanePriority = schedulerPriorityToLanePriority(\n      schedulerPriority,\n    );\n\n    if (decoupleUpdatePriorityFromScheduler) {\n      // In the new strategy, we will track the current update lane priority\n      // inside React and use that priority to select a lane for this update.\n      // For now, we're just logging when they're different so we can assess.\n      const currentUpdateLanePriority = getCurrentUpdateLanePriority();\n\n      if (\n        schedulerLanePriority !== currentUpdateLanePriority &&\n        currentUpdateLanePriority !== NoLanePriority\n      ) {\n        if (__DEV__) {\n          console.error(\n            'Expected current scheduler lane priority %s to match current update lane priority %s',\n            schedulerLanePriority,\n            currentUpdateLanePriority,\n          );\n        }\n      }\n    }\n\n    lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);\n  }\n\n  return lane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & BlockingMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if ((mode & ConcurrentMode) === NoMode) {\n    return getCurrentPriorityLevel() === ImmediateSchedulerPriority\n      ? (SyncLane: Lane)\n      : (SyncBatchedLane: Lane);\n  }\n\n  // See `requestUpdateLane` for explanation of `currentEventWipLanes`\n  if (currentEventWipLanes === NoLanes) {\n    currentEventWipLanes = workInProgressRootIncludedLanes;\n  }\n  return findRetryLane(currentEventWipLanes);\n}\n\nexport function scheduleUpdateOnFiber(\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n) {\n  checkForNestedUpdates();\n  warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n  const root = markUpdateLaneFromFiberToRoot(fiber, lane);\n  if (root === null) {\n    warnAboutUpdateOnUnmountedFiberInDEV(fiber);\n    return null;\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (root === workInProgressRoot) {\n    // Received an update to a tree that's in the middle of rendering. Mark\n    // that there was an interleaved update work on this root. Unless the\n    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n    // phase update. In that case, we don't treat render phase updates as if\n    // they were interleaved, for backwards compat reasons.\n    if (\n      deferRenderPhaseUpdateToNextBatch ||\n      (executionContext & RenderContext) === NoContext\n    ) {\n      workInProgressRootUpdatedLanes = mergeLanes(\n        workInProgressRootUpdatedLanes,\n        lane,\n      );\n    }\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n      // The root already suspended with a delay, which means this render\n      // definitely won't finish. Since we have a new update, let's mark it as\n      // suspended now, right before marking the incoming update. This has the\n      // effect of interrupting the current render and switching to the update.\n      // TODO: Make sure this doesn't override pings that happen while we've\n      // already started rendering.\n      markRootSuspended(root, workInProgressRootRenderLanes);\n    }\n  }\n\n  // TODO: requestUpdateLanePriority also reads the priority. Pass the\n  // priority as an argument to that function and this one.\n  const priorityLevel = getCurrentPriorityLevel();\n\n  if (lane === SyncLane) {\n    if (\n      // Check if we're inside unbatchedUpdates\n      (executionContext & LegacyUnbatchedContext) !== NoContext &&\n      // Check if we're not already rendering\n      (executionContext & (RenderContext | CommitContext)) === NoContext\n    ) {\n      // Register pending interactions on the root to avoid losing traced interaction data.\n      schedulePendingInteractions(root, lane);\n\n      // This is a legacy edge case. The initial mount of a ReactDOM.render-ed\n      // root inside of batchedUpdates should be synchronous, but layout updates\n      // should be deferred until the end of the batch.\n      performSyncWorkOnRoot(root);\n    } else {\n      ensureRootIsScheduled(root, eventTime);\n      schedulePendingInteractions(root, lane);\n      if (executionContext === NoContext) {\n        // Flush the synchronous work now, unless we're already working or inside\n        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n        // scheduleCallbackForFiber to preserve the ability to schedule a callback\n        // without immediately flushing it. We only do this for user-initiated\n        // updates, to preserve historical behavior of legacy mode.\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    // Schedule a discrete update but only if it's not Sync.\n    if (\n      (executionContext & DiscreteEventContext) !== NoContext &&\n      // Only updates at user-blocking priority or greater are considered\n      // discrete, even inside a discrete event.\n      (priorityLevel === UserBlockingSchedulerPriority ||\n        priorityLevel === ImmediateSchedulerPriority)\n    ) {\n      // This is the result of a discrete event. Track the lowest priority\n      // discrete update per root so we can flush them early, if needed.\n      if (rootsWithPendingDiscreteUpdates === null) {\n        rootsWithPendingDiscreteUpdates = new Set([root]);\n      } else {\n        rootsWithPendingDiscreteUpdates.add(root);\n      }\n    }\n    // Schedule other updates after in case the callback is sync.\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, lane);\n  }\n\n  // We use this when assigning a lane for a transition inside\n  // `requestUpdateLane`. We assume it's the same as the root being updated,\n  // since in the common case of a single root app it probably is. If it's not\n  // the same root, then it's not a huge deal, we just might batch more stuff\n  // together more than necessary.\n  mostRecentlyUpdatedRoot = root;\n}\n\n// This is split into a separate function so we can mark a fiber with pending\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  if (__DEV__) {\n    if (\n      alternate === null &&\n      (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n  // Walk the parent path to the root and update the child expiration time.\n  let node = sourceFiber;\n  let parent = sourceFiber.return;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      if (__DEV__) {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    node = parent;\n    parent = parent.return;\n  }\n  if (node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  // This returns the priority level computed during the `getNextLanes` call.\n  const newCallbackPriority = returnNextLanesPriority();\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n      root.callbackNode = null;\n      root.callbackPriority = NoLanePriority;\n    }\n    return;\n  }\n\n  // Check if there's an existing task. We may be able to reuse it.\n  if (existingCallbackNode !== null) {\n    const existingCallbackPriority = root.callbackPriority;\n    if (existingCallbackPriority === newCallbackPriority) {\n      // The priority hasn't changed. We can reuse the existing task. Exit.\n      return;\n    }\n    // The priority changed. Cancel the existing callback. We'll schedule a new\n    // one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLanePriority) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    newCallbackNode = scheduleSyncCallback(\n      performSyncWorkOnRoot.bind(null, root),\n    );\n  } else if (newCallbackPriority === SyncBatchedLanePriority) {\n    newCallbackNode = scheduleCallback(\n      ImmediateSchedulerPriority,\n      performSyncWorkOnRoot.bind(null, root),\n    );\n  } else {\n    const schedulerPriorityLevel = lanePriorityToSchedulerPriority(\n      newCallbackPriority,\n    );\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root) {\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventWipLanes = NoLanes;\n  currentEventPendingLanes = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next expiration time to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  let exitStatus = renderRootConcurrent(root, lanes);\n\n  if (\n    includesSomeLane(\n      workInProgressRootIncludedLanes,\n      workInProgressRootUpdatedLanes,\n    )\n  ) {\n    // The render included lanes that were updated during the render phase.\n    // For example, when unhiding a hidden tree, we include all the lanes\n    // that were previously skipped when the tree was hidden. That set of\n    // lanes is a superset of the lanes we started rendering with.\n    //\n    // So we'll throw out the current work and restart.\n    prepareFreshStack(root, NoLanes);\n  } else if (exitStatus !== RootIncomplete) {\n    if (exitStatus === RootErrored) {\n      executionContext |= RetryAfterError;\n\n      // If an error occurred during hydration,\n      // discard server response and fall back to client side render.\n      if (root.hydrate) {\n        root.hydrate = false;\n        clearContainer(root.containerInfo);\n      }\n\n      // If something threw an error, try rendering one more time. We'll render\n      // synchronously to block concurrent data mutations, and we'll includes\n      // all pending updates are included. If it still fails after the second\n      // attempt, we'll give up and commit the resulting tree.\n      lanes = getLanesToRetrySynchronouslyOnError(root);\n      if (lanes !== NoLanes) {\n        exitStatus = renderRootSync(root, lanes);\n      }\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    // We now have a consistent tree. The next step is either to commit it,\n    // or, if something suspended, wait to commit it after a timeout.\n    const finishedWork: Fiber = (root.current.alternate: any);\n    root.finishedWork = finishedWork;\n    root.finishedLanes = lanes;\n    finishConcurrentRender(root, exitStatus, lanes);\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootIncomplete:\n    case RootFatalErrored: {\n      invariant(false, 'Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(root);\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(root);\n      break;\n    }\n    default: {\n      invariant(false, 'Unknown root exit status.');\n    }\n  }\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  flushPassiveEffects();\n\n  let lanes;\n  let exitStatus;\n  if (\n    root === workInProgressRoot &&\n    includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)\n  ) {\n    // There's a partial tree, and at least one of its lanes has expired. Finish\n    // rendering it before rendering the rest of the expired work.\n    lanes = workInProgressRootRenderLanes;\n    exitStatus = renderRootSync(root, lanes);\n    if (\n      includesSomeLane(\n        workInProgressRootIncludedLanes,\n        workInProgressRootUpdatedLanes,\n      )\n    ) {\n      // The render included lanes that were updated during the render phase.\n      // For example, when unhiding a hidden tree, we include all the lanes\n      // that were previously skipped when the tree was hidden. That set of\n      // lanes is a superset of the lanes we started rendering with.\n      //\n      // Note that this only happens when part of the tree is rendered\n      // concurrently. If the whole tree is rendered synchronously, then there\n      // are no interleaved events.\n      lanes = getNextLanes(root, lanes);\n      exitStatus = renderRootSync(root, lanes);\n    }\n  } else {\n    lanes = getNextLanes(root, NoLanes);\n    exitStatus = renderRootSync(root, lanes);\n  }\n\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    executionContext |= RetryAfterError;\n\n    // If an error occurred during hydration,\n    // discard server response and fall back to client side render.\n    if (root.hydrate) {\n      root.hydrate = false;\n      clearContainer(root.containerInfo);\n    }\n\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    lanes = getLanesToRetrySynchronouslyOnError(root);\n    if (lanes !== NoLanes) {\n      exitStatus = renderRootSync(root, lanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root);\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  markRootExpired(root, lanes);\n  ensureRootIsScheduled(root, now());\n  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n    resetRenderTimer();\n    flushSyncCallbackQueue();\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function flushDiscreteUpdates() {\n  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.\n  // However, `act` uses `batchedUpdates`, so there's no way to distinguish\n  // those two cases. Need to fix this before exposing flushDiscreteUpdates\n  // as a public API.\n  if (\n    (executionContext & (BatchedContext | RenderContext | CommitContext)) !==\n    NoContext\n  ) {\n    if (__DEV__) {\n      if ((executionContext & RenderContext) !== NoContext) {\n        console.error(\n          'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' +\n            'already rendering.',\n        );\n      }\n    }\n    // We're already rendering, so we can't synchronously flush pending work.\n    // This is probably a nested event dispatch triggered by a lifecycle/effect,\n    // like `el.focus()`. Exit.\n    return;\n  }\n  flushPendingDiscreteUpdates();\n  // If the discrete updates scheduled passive effects, flush them now so that\n  // they fire before the next serial event.\n  flushPassiveEffects();\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(DefaultLanePriority);\n      return runWithPriority(NormalSchedulerPriority, fn);\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n    }\n  } else {\n    return runWithPriority(NormalSchedulerPriority, fn);\n  }\n}\n\nfunction flushPendingDiscreteUpdates() {\n  if (rootsWithPendingDiscreteUpdates !== null) {\n    // For each root with pending discrete updates, schedule a callback to\n    // immediately flush them.\n    const roots = rootsWithPendingDiscreteUpdates;\n    rootsWithPendingDiscreteUpdates = null;\n    roots.forEach(root => {\n      markDiscreteUpdatesExpired(root);\n      ensureRootIsScheduled(root, now());\n    });\n  }\n  // Now flush the immediate queue.\n  flushSyncCallbackQueue();\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function batchedEventUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= EventContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= DiscreteEventContext;\n\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(InputDiscreteLanePriority);\n      return runWithPriority(\n        UserBlockingSchedulerPriority,\n        fn.bind(null, a, b, c, d),\n      );\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    try {\n      return runWithPriority(\n        UserBlockingSchedulerPriority,\n        fn.bind(null, a, b, c, d),\n      );\n    } finally {\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  }\n}\n\nexport function unbatchedUpdates<A, R>(fn: (a: A) => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext &= ~BatchedContext;\n  executionContext |= LegacyUnbatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function flushSync<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {\n    if (__DEV__) {\n      console.error(\n        'flushSync was called from inside a lifecycle method. React cannot ' +\n          'flush when React is already rendering. Consider moving this call to ' +\n          'a scheduler task or micro task.',\n      );\n    }\n    return fn(a);\n  }\n  executionContext |= BatchedContext;\n\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(SyncLanePriority);\n      if (fn) {\n        return runWithPriority(ImmediateSchedulerPriority, fn.bind(null, a));\n      } else {\n        return (undefined: $FlowFixMe);\n      }\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n      executionContext = prevExecutionContext;\n      // Flush the immediate callbacks that were scheduled during this batch.\n      // Note that this will happen even if batchedUpdates is higher up\n      // the stack.\n      flushSyncCallbackQueue();\n    }\n  } else {\n    try {\n      if (fn) {\n        return runWithPriority(ImmediateSchedulerPriority, fn.bind(null, a));\n      } else {\n        return (undefined: $FlowFixMe);\n      }\n    } finally {\n      executionContext = prevExecutionContext;\n      // Flush the immediate callbacks that were scheduled during this batch.\n      // Note that this will happen even if batchedUpdates is higher up\n      // the stack.\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(SyncLanePriority);\n      runWithPriority(ImmediateSchedulerPriority, fn);\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    try {\n      runWithPriority(ImmediateSchedulerPriority, fn);\n    } finally {\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  }\n}\n\nexport function pushRenderLanes(fiber: Fiber, lanes: Lanes) {\n  pushToStack(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(\n    workInProgressRootIncludedLanes,\n    lanes,\n  );\n}\n\nexport function popRenderLanes(fiber: Fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  popFromStack(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      unwindInterruptedWork(interruptedWork);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  workInProgress = createWorkInProgress(root.current, null);\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootIncomplete;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n\n  if (enableSchedulerTracing) {\n    spawnedWorkDuringRender = null;\n  }\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nfunction pushInteractions(root) {\n  if (enableSchedulerTracing) {\n    const prevInteractions: Set<Interaction> | null = __interactionsRef.current;\n    __interactionsRef.current = root.memoizedInteractions;\n    return prevInteractions;\n  }\n  return null;\n}\n\nfunction popInteractions(prevInteractions) {\n  if (enableSchedulerTracing) {\n    __interactionsRef.current = prevInteractions;\n  }\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootIncomplete ||\n    workInProgressRootExitStatus === RootSuspended\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError() {\n  if (workInProgressRootExitStatus !== RootCompleted) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootIncomplete;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    prepareFreshStack(root, lanes);\n    startWorkOnPendingInteractions(root, lanes);\n  }\n\n  const prevInteractions = pushInteractions(root);\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n  }\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    invariant(\n      false,\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n    startWorkOnPendingInteractions(root, lanes);\n  }\n\n  const prevInteractions = pushInteractions(root);\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n  }\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootIncomplete;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n\n      resetChildLanes(completedWork);\n\n      if (\n        returnFiber !== null &&\n        // Do not append effects to parents if a sibling failed to complete\n        (returnFiber.flags & Incomplete) === NoFlags\n      ) {\n        // Append all the effects of the subtree and this fiber onto the effect\n        // list of the parent. The completion order of the children affects the\n        // side-effect order.\n        if (returnFiber.firstEffect === null) {\n          returnFiber.firstEffect = completedWork.firstEffect;\n        }\n        if (completedWork.lastEffect !== null) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = completedWork.firstEffect;\n          }\n          returnFiber.lastEffect = completedWork.lastEffect;\n        }\n\n        // If this fiber had side-effects, we append it AFTER the children's\n        // side-effects. We can perform certain side-effects earlier if needed,\n        // by doing multiple passes over the effect list. We don't want to\n        // schedule our own side-effect on our own list because if end up\n        // reusing children we'll schedule this effect onto itself since we're\n        // at the end.\n        const flags = completedWork.flags;\n\n        // Skip both NoWork and PerformedWork tags when creating the effect\n        // list. PerformedWork effect is read by React DevTools but shouldn't be\n        // committed.\n        if (flags > PerformedWork) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = completedWork;\n          } else {\n            returnFiber.firstEffect = completedWork;\n          }\n          returnFiber.lastEffect = completedWork;\n        }\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(completedWork, subtreeRenderLanes);\n\n      // Because this fiber did not complete, don't reset its expiration time.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its effect list.\n        returnFiber.firstEffect = returnFiber.lastEffect = null;\n        returnFiber.flags |= Incomplete;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction resetChildLanes(completedWork: Fiber) {\n  if (\n    // TODO: Move this check out of the hot path by moving `resetChildLanes`\n    // to switch statement in `completeWork`.\n    (completedWork.tag === LegacyHiddenComponent ||\n      completedWork.tag === OffscreenComponent) &&\n    completedWork.memoizedState !== null &&\n    !includesSomeLane(subtreeRenderLanes, (OffscreenLane: Lane)) &&\n    (completedWork.mode & ConcurrentMode) !== NoLanes\n  ) {\n    // The children of this component are hidden. Don't bubble their\n    // expiration times.\n    return;\n  }\n\n  let newChildLanes = NoLanes;\n\n  // Bubble up the earliest expiration time.\n  if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n    // In profiling mode, resetChildExpirationTime is also used to reset\n    // profiler durations.\n    let actualDuration = completedWork.actualDuration;\n    let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n    // When a fiber is cloned, its actualDuration is reset to 0. This value will\n    // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n    // When work is done, it should bubble to the parent's actualDuration. If\n    // the fiber has not been cloned though, (meaning no work was done), then\n    // this value will reflect the amount of time spent working on a previous\n    // render. In that case it should not bubble. We determine whether it was\n    // cloned by comparing the child pointer.\n    const shouldBubbleActualDurations =\n      completedWork.alternate === null ||\n      completedWork.child !== completedWork.alternate.child;\n\n    let child = completedWork.child;\n    while (child !== null) {\n      newChildLanes = mergeLanes(\n        newChildLanes,\n        mergeLanes(child.lanes, child.childLanes),\n      );\n      if (shouldBubbleActualDurations) {\n        actualDuration += child.actualDuration;\n      }\n      treeBaseDuration += child.treeBaseDuration;\n      child = child.sibling;\n    }\n\n    const isTimedOutSuspense =\n      completedWork.tag === SuspenseComponent &&\n      completedWork.memoizedState !== null;\n    if (isTimedOutSuspense) {\n      // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n      const primaryChildFragment = completedWork.child;\n      if (primaryChildFragment !== null) {\n        treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n      }\n    }\n\n    completedWork.actualDuration = actualDuration;\n    completedWork.treeBaseDuration = treeBaseDuration;\n  } else {\n    let child = completedWork.child;\n    while (child !== null) {\n      newChildLanes = mergeLanes(\n        newChildLanes,\n        mergeLanes(child.lanes, child.childLanes),\n      );\n      child = child.sibling;\n    }\n  }\n\n  completedWork.childLanes = newChildLanes;\n}\n\nfunction commitRoot(root) {\n  const renderPriorityLevel = getCurrentPriorityLevel();\n  runWithPriority(\n    ImmediateSchedulerPriority,\n    commitRootImpl.bind(null, root, renderPriorityLevel),\n  );\n  return null;\n}\n\nfunction commitRootImpl(root, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  invariant(\n    finishedWork !== root.current,\n    'Cannot commit the same tree as before. This error is likely caused by ' +\n      'a bug in React. Please file an issue.',\n  );\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n\n  // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  // Clear already finished discrete updates in case that a later call of\n  // `flushDiscreteUpdates` starts a useless render pass which may cancels\n  // a scheduled timeout.\n  if (rootsWithPendingDiscreteUpdates !== null) {\n    if (\n      !hasDiscreteLanes(remainingLanes) &&\n      rootsWithPendingDiscreteUpdates.has(root)\n    ) {\n      rootsWithPendingDiscreteUpdates.delete(root);\n    }\n  }\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // Get the list of effects.\n  let firstEffect;\n  if (finishedWork.flags > PerformedWork) {\n    // A fiber's effect list consists only of its children, not itself. So if\n    // the root has an effect, we need to add it to the end of the list. The\n    // resulting list is the set that would belong to the root's parent, if it\n    // had one; that is, all the effects in the tree including the root.\n    if (finishedWork.lastEffect !== null) {\n      finishedWork.lastEffect.nextEffect = finishedWork;\n      firstEffect = finishedWork.firstEffect;\n    } else {\n      firstEffect = finishedWork;\n    }\n  } else {\n    // There is no effect on the root.\n    firstEffect = finishedWork.firstEffect;\n  }\n\n  if (firstEffect !== null) {\n    let previousLanePriority;\n    if (decoupleUpdatePriorityFromScheduler) {\n      previousLanePriority = getCurrentUpdateLanePriority();\n      setCurrentUpdateLanePriority(SyncLanePriority);\n    }\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n    const prevInteractions = pushInteractions(root);\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    focusedInstanceHandle = prepareForCommit(root.containerInfo);\n    shouldFireAfterActiveInstanceBlur = false;\n\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(null, commitBeforeMutationEffects, null);\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitBeforeMutationEffects();\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    // We no longer need to track the active instance fiber\n    focusedInstanceHandle = null;\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(\n          null,\n          commitMutationEffects,\n          null,\n          root,\n          renderPriorityLevel,\n        );\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitMutationEffects(root, renderPriorityLevel);\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    if (shouldFireAfterActiveInstanceBlur) {\n      afterActiveInstanceBlur();\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitLayoutEffects(root, lanes);\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    nextEffect = null;\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    if (enableSchedulerTracing) {\n      popInteractions(((prevInteractions: any): Set<Interaction>));\n    }\n    executionContext = prevExecutionContext;\n\n    if (decoupleUpdatePriorityFromScheduler && previousLanePriority != null) {\n      // Reset the priority to the previous non-sync value.\n      setCurrentUpdateLanePriority(previousLanePriority);\n    }\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n    pendingPassiveEffectsRenderPriority = renderPriorityLevel;\n  } else {\n    // We are done with the effect chain at this point so let's clear the\n    // nextEffect pointers to assist with GC. If we have passive effects, we'll\n    // clear this in flushPassiveEffects.\n    nextEffect = firstEffect;\n    while (nextEffect !== null) {\n      const nextNextEffect = nextEffect.nextEffect;\n      nextEffect.nextEffect = null;\n      if (nextEffect.flags & Deletion) {\n        detachFiberAfterEffects(nextEffect);\n      }\n      nextEffect = nextNextEffect;\n    }\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  if (remainingLanes !== NoLanes) {\n    if (enableSchedulerTracing) {\n      if (spawnedWorkDuringRender !== null) {\n        const expirationTimes = spawnedWorkDuringRender;\n        spawnedWorkDuringRender = null;\n        for (let i = 0; i < expirationTimes.length; i++) {\n          scheduleInteractions(\n            root,\n            expirationTimes[i],\n            root.memoizedInteractions,\n          );\n        }\n      }\n      schedulePendingInteractions(root, remainingLanes);\n    }\n  } else {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (enableSchedulerTracing) {\n    if (!rootDidHavePassiveEffects) {\n      // If there are no passive effects, then we can complete the pending interactions.\n      // Otherwise, we'll wait until after the passive effects are flushed.\n      // Wait to do this until after remaining work has been scheduled,\n      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.\n      finishPendingInteractions(root, lanes);\n    }\n  }\n\n  if (remainingLanes === SyncLane) {\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    // This is a legacy edge case. We just committed the initial mount of\n    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired\n    // synchronously, but layout updates should be deferred until the end\n    // of the batch.\n    return null;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbackQueue();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction commitBeforeMutationEffects() {\n  while (nextEffect !== null) {\n    const current = nextEffect.alternate;\n\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      if ((nextEffect.flags & Deletion) !== NoFlags) {\n        if (doesFiberContain(nextEffect, focusedInstanceHandle)) {\n          shouldFireAfterActiveInstanceBlur = true;\n          beforeActiveInstanceBlur();\n        }\n      } else {\n        // TODO: Move this out of the hot path using a dedicated effect tag.\n        if (\n          nextEffect.tag === SuspenseComponent &&\n          isSuspenseBoundaryBeingHidden(current, nextEffect) &&\n          doesFiberContain(nextEffect, focusedInstanceHandle)\n        ) {\n          shouldFireAfterActiveInstanceBlur = true;\n          beforeActiveInstanceBlur();\n        }\n      }\n    }\n\n    const flags = nextEffect.flags;\n    if ((flags & Snapshot) !== NoFlags) {\n      setCurrentDebugFiberInDEV(nextEffect);\n\n      commitBeforeMutationEffectOnFiber(current, nextEffect);\n\n      resetCurrentDebugFiberInDEV();\n    }\n    if ((flags & Passive) !== NoFlags) {\n      // If there are passive effects, schedule a callback to flush at\n      // the earliest opportunity.\n      if (!rootDoesHavePassiveEffects) {\n        rootDoesHavePassiveEffects = true;\n        scheduleCallback(NormalSchedulerPriority, () => {\n          flushPassiveEffects();\n          return null;\n        });\n      }\n    }\n    nextEffect = nextEffect.nextEffect;\n  }\n}\n\nfunction commitMutationEffects(\n  root: FiberRoot,\n  renderPriorityLevel: ReactPriorityLevel,\n) {\n  // TODO: Should probably move the bulk of this function to commitWork.\n  while (nextEffect !== null) {\n    setCurrentDebugFiberInDEV(nextEffect);\n\n    const flags = nextEffect.flags;\n\n    if (flags & ContentReset) {\n      commitResetTextContent(nextEffect);\n    }\n\n    if (flags & Ref) {\n      const current = nextEffect.alternate;\n      if (current !== null) {\n        commitDetachRef(current);\n      }\n      if (enableScopeAPI) {\n        // TODO: This is a temporary solution that allowed us to transition away\n        // from React Flare on www.\n        if (nextEffect.tag === ScopeComponent) {\n          commitAttachRef(nextEffect);\n        }\n      }\n    }\n\n    // The following switch statement is only concerned about placement,\n    // updates, and deletions. To avoid needing to add a case for every possible\n    // bitmap value, we remove the secondary effects from the effect tag and\n    // switch on that value.\n    const primaryFlags = flags & (Placement | Update | Deletion | Hydrating);\n    switch (primaryFlags) {\n      case Placement: {\n        commitPlacement(nextEffect);\n        // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        // TODO: findDOMNode doesn't rely on this any more but isMounted does\n        // and isMounted is deprecated anyway so we should be able to kill this.\n        nextEffect.flags &= ~Placement;\n        break;\n      }\n      case PlacementAndUpdate: {\n        // Placement\n        commitPlacement(nextEffect);\n        // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        nextEffect.flags &= ~Placement;\n\n        // Update\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Hydrating: {\n        nextEffect.flags &= ~Hydrating;\n        break;\n      }\n      case HydratingAndUpdate: {\n        nextEffect.flags &= ~Hydrating;\n\n        // Update\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Update: {\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Deletion: {\n        commitDeletion(root, nextEffect, renderPriorityLevel);\n        break;\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n    nextEffect = nextEffect.nextEffect;\n  }\n}\n\nfunction commitLayoutEffects(root: FiberRoot, committedLanes: Lanes) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logLayoutEffectsStarted(committedLanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markLayoutEffectsStarted(committedLanes);\n  }\n\n  // TODO: Should probably move the bulk of this function to commitWork.\n  while (nextEffect !== null) {\n    setCurrentDebugFiberInDEV(nextEffect);\n\n    const flags = nextEffect.flags;\n\n    if (flags & (Update | Callback)) {\n      const current = nextEffect.alternate;\n      commitLayoutEffectOnFiber(root, current, nextEffect, committedLanes);\n    }\n\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (flags & Ref && nextEffect.tag !== ScopeComponent) {\n        commitAttachRef(nextEffect);\n      }\n    } else {\n      if (flags & Ref) {\n        commitAttachRef(nextEffect);\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n    nextEffect = nextEffect.nextEffect;\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logLayoutEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markLayoutEffectsStopped();\n  }\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  if (pendingPassiveEffectsRenderPriority !== NoSchedulerPriority) {\n    const priorityLevel =\n      pendingPassiveEffectsRenderPriority > NormalSchedulerPriority\n        ? NormalSchedulerPriority\n        : pendingPassiveEffectsRenderPriority;\n    pendingPassiveEffectsRenderPriority = NoSchedulerPriority;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        setCurrentUpdateLanePriority(\n          schedulerPriorityToLanePriority(priorityLevel),\n        );\n        return runWithPriority(priorityLevel, flushPassiveEffectsImpl);\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n      }\n    } else {\n      return runWithPriority(priorityLevel, flushPassiveEffectsImpl);\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nexport function enqueuePendingPassiveHookEffectMount(\n  fiber: Fiber,\n  effect: HookEffect,\n): void {\n  pendingPassiveHookEffectsMount.push(effect, fiber);\n  if (!rootDoesHavePassiveEffects) {\n    rootDoesHavePassiveEffects = true;\n    scheduleCallback(NormalSchedulerPriority, () => {\n      flushPassiveEffects();\n      return null;\n    });\n  }\n}\n\nexport function enqueuePendingPassiveHookEffectUnmount(\n  fiber: Fiber,\n  effect: HookEffect,\n): void {\n  pendingPassiveHookEffectsUnmount.push(effect, fiber);\n  if (__DEV__) {\n    fiber.flags |= PassiveUnmountPendingDev;\n    const alternate = fiber.alternate;\n    if (alternate !== null) {\n      alternate.flags |= PassiveUnmountPendingDev;\n    }\n  }\n  if (!rootDoesHavePassiveEffects) {\n    rootDoesHavePassiveEffects = true;\n    scheduleCallback(NormalSchedulerPriority, () => {\n      flushPassiveEffects();\n      return null;\n    });\n  }\n}\n\nfunction invokePassiveEffectCreate(effect: HookEffect): void {\n  const create = effect.create;\n  effect.destroy = create();\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  pendingPassiveEffectsLanes = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Cannot flush passive effects while already rendering.',\n  );\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = true;\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  const prevInteractions = pushInteractions(root);\n\n  // It's important that ALL pending passive effect destroy functions are called\n  // before ANY passive effect create functions are called.\n  // Otherwise effects in sibling components might interfere with each other.\n  // e.g. a destroy function in one component may unintentionally override a ref\n  // value set by a create function in another component.\n  // Layout effects have the same constraint.\n\n  // First pass: Destroy stale passive effects.\n  const unmountEffects = pendingPassiveHookEffectsUnmount;\n  pendingPassiveHookEffectsUnmount = [];\n  for (let i = 0; i < unmountEffects.length; i += 2) {\n    const effect = ((unmountEffects[i]: any): HookEffect);\n    const fiber = ((unmountEffects[i + 1]: any): Fiber);\n    const destroy = effect.destroy;\n    effect.destroy = undefined;\n\n    if (__DEV__) {\n      fiber.flags &= ~PassiveUnmountPendingDev;\n      const alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.flags &= ~PassiveUnmountPendingDev;\n      }\n    }\n\n    if (typeof destroy === 'function') {\n      if (__DEV__) {\n        setCurrentDebugFiberInDEV(fiber);\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          startPassiveEffectTimer();\n          invokeGuardedCallback(null, destroy, null);\n          recordPassiveEffectDuration(fiber);\n        } else {\n          invokeGuardedCallback(null, destroy, null);\n        }\n        if (hasCaughtError()) {\n          invariant(fiber !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(fiber, error);\n        }\n        resetCurrentDebugFiberInDEV();\n      } else {\n        try {\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            fiber.mode & ProfileMode\n          ) {\n            try {\n              startPassiveEffectTimer();\n              destroy();\n            } finally {\n              recordPassiveEffectDuration(fiber);\n            }\n          } else {\n            destroy();\n          }\n        } catch (error) {\n          invariant(fiber !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(fiber, error);\n        }\n      }\n    }\n  }\n  // Second pass: Create new passive effects.\n  const mountEffects = pendingPassiveHookEffectsMount;\n  pendingPassiveHookEffectsMount = [];\n  for (let i = 0; i < mountEffects.length; i += 2) {\n    const effect = ((mountEffects[i]: any): HookEffect);\n    const fiber = ((mountEffects[i + 1]: any): Fiber);\n    if (__DEV__) {\n      setCurrentDebugFiberInDEV(fiber);\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        fiber.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        invokeGuardedCallback(null, invokePassiveEffectCreate, null, effect);\n        recordPassiveEffectDuration(fiber);\n      } else {\n        invokeGuardedCallback(null, invokePassiveEffectCreate, null, effect);\n      }\n      if (hasCaughtError()) {\n        invariant(fiber !== null, 'Should be working on an effect.');\n        const error = clearCaughtError();\n        captureCommitPhaseError(fiber, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    } else {\n      try {\n        const create = effect.create;\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          try {\n            startPassiveEffectTimer();\n            effect.destroy = create();\n          } finally {\n            recordPassiveEffectDuration(fiber);\n          }\n        } else {\n          effect.destroy = create();\n        }\n      } catch (error) {\n        invariant(fiber !== null, 'Should be working on an effect.');\n        captureCommitPhaseError(fiber, error);\n      }\n    }\n  }\n\n  // Note: This currently assumes there are no passive effects on the root fiber\n  // because the root is not part of its own effect list.\n  // This could change in the future.\n  let effect = root.current.firstEffect;\n  while (effect !== null) {\n    const nextNextEffect = effect.nextEffect;\n    // Remove nextEffect pointer to assist GC\n    effect.nextEffect = null;\n    if (effect.flags & Deletion) {\n      detachFiberAfterEffects(effect);\n    }\n    effect = nextNextEffect;\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n    finishPendingInteractions(root, lanes);\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = false;\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbackQueue();\n\n  // If additional passive effects were scheduled, increment a counter. If this\n  // exceeds the limit, we'll fire a warning.\n  nestedPassiveUpdateCount =\n    rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValue(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  enqueueUpdate(rootFiber, update);\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(rootFiber, (SyncLane: Lane));\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, SyncLane);\n  }\n}\n\nexport function captureCommitPhaseError(sourceFiber: Fiber, error: mixed) {\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = sourceFiber.return;\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValue(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        enqueueUpdate(fiber, update);\n        const eventTime = requestEventTime();\n        const root = markUpdateLaneFromFiberToRoot(fiber, (SyncLane: Lane));\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n          schedulePendingInteractions(root, SyncLane);\n        } else {\n          // This component has already been unmounted.\n          // We can't schedule any follow up work for the root because the fiber is already unmounted,\n          // but we can still call the log-only boundary so the error isn't swallowed.\n          //\n          // TODO This is only a temporary bandaid for the old reconciler fork.\n          // We can delete this special case once the new fork is merged.\n          if (\n            typeof instance.componentDidCatch === 'function' &&\n            !isAlreadyFailedLegacyErrorBoundary(instance)\n          ) {\n            try {\n              instance.componentDidCatch(error, errorInfo);\n            } catch (errorToIgnore) {\n              // TODO Ignore this error? Rethrow it?\n              // This is kind of an edge case.\n            }\n          }\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n  schedulePendingInteractions(root, pingedLanes);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new expiration time.\n  if (retryLane === NoLane) {\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, retryLane);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  if (enableSuspenseServerRenderer) {\n    switch (boundaryFiber.tag) {\n      case SuspenseComponent:\n        retryCache = boundaryFiber.stateNode;\n        const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n        if (suspenseState !== null) {\n          retryLane = suspenseState.retryLane;\n        }\n        break;\n      case SuspenseListComponent:\n        retryCache = boundaryFiber.stateNode;\n        break;\n      default:\n        invariant(\n          false,\n          'Pinged unknown suspense boundary type. ' +\n            'This is probably a bug in React.',\n        );\n    }\n  } else {\n    retryCache = boundaryFiber.stateNode;\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    invariant(\n      false,\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent &&\n      tag !== Block\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentName(fiber.type) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForUnmountedComponent: Set<string> | null = null;\nfunction warnAboutUpdateOnUnmountedFiberInDEV(fiber) {\n  if (__DEV__) {\n    const tag = fiber.tag;\n    if (\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent &&\n      tag !== Block\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // If there are pending passive effects unmounts for this Fiber,\n    // we can assume that they would have prevented this update.\n    if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentName(fiber.type) || 'ReactComponent';\n    if (didWarnStateUpdateForUnmountedComponent !== null) {\n      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForUnmountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);\n    }\n\n    if (isFlushingPassiveEffects) {\n      // Do not warn if we are currently flushing passive effects!\n      //\n      // React can't directly detect a memory leak, but there are some clues that warn about one.\n      // One of these clues is when an unmounted React component tries to update its state.\n      // For example, if a component forgets to remove an event listener when unmounting,\n      // that listener may be called later and try to update state,\n      // at which point React would warn about the potential leak.\n      //\n      // Warning signals are the most useful when they're strong.\n      // (So we should avoid false positive warnings.)\n      // Updating state from within an effect cleanup function is sometimes a necessary pattern, e.g.:\n      // 1. Updating an ancestor that a component had registered itself with on mount.\n      // 2. Resetting state when a component is hidden after going offscreen.\n    } else {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          \"Can't perform a React state update on an unmounted component. This \" +\n            'is a no-op, but it indicates a memory leak in your application. To ' +\n            'fix, cancel all subscriptions and asynchronous tasks in %s.',\n          tag === ClassComponent\n            ? 'the componentWillUnmount method'\n            : 'a useEffect cleanup function',\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        originalError !== null &&\n        typeof originalError === 'object' &&\n        typeof originalError.then === 'function'\n      ) {\n        // Don't replay promises. Treat everything else like an error.\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(unitOfWork);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.\n        // Rethrow this error instead of the original one.\n        throw replayError;\n      } else {\n        // This branch is reachable if the render phase is impure.\n        throw originalError;\n      }\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      (executionContext & RenderContext) !== NoContext &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentName(workInProgress.type)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentName(fiber.type) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\n// a 'shared' variable that changes when act() opens/closes in tests.\nexport const IsThisRendererActing = {current: (false: boolean)};\n\nexport function warnIfNotScopedWithMatchingAct(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      IsSomeRendererActing.current === true &&\n      IsThisRendererActing.current !== true\n    ) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          \"It looks like you're using the wrong act() around your test interactions.\\n\" +\n            'Be sure to use the matching version of act() corresponding to your renderer:\\n\\n' +\n            '// for react-dom:\\n' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'import {act} fr' +\n            \"om 'react-dom/test-utils';\\n\" +\n            '// ...\\n' +\n            'act(() => ...);\\n\\n' +\n            '// for react-test-renderer:\\n' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'import TestRenderer fr' +\n            \"om react-test-renderer';\\n\" +\n            'const {act} = TestRenderer;\\n' +\n            '// ...\\n' +\n            'act(() => ...);',\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nexport function warnIfNotCurrentlyActingEffectsInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      (fiber.mode & StrictMode) !== NoMode &&\n      IsSomeRendererActing.current === false &&\n      IsThisRendererActing.current === false\n    ) {\n      console.error(\n        'An update to %s ran an effect, but was not wrapped in act(...).\\n\\n' +\n          'When testing, code that causes React state updates should be ' +\n          'wrapped into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* fire events that update state */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n        getComponentName(fiber.type),\n      );\n    }\n  }\n}\n\nfunction warnIfNotCurrentlyActingUpdatesInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      executionContext === NoContext &&\n      IsSomeRendererActing.current === false &&\n      IsThisRendererActing.current === false\n    ) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentName(fiber.type),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nexport const warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;\n\n// In tests, we want to enforce a mocked scheduler.\nlet didWarnAboutUnmockedScheduler = false;\n// TODO Before we release concurrent mode, revisit this and decide whether a mocked\n// scheduler is the actual recommendation. The alternative could be a testing build,\n// a new lib, or whatever; we dunno just yet. This message is for early adopters\n// to get their tests right.\n\nexport function warnIfUnmockedScheduler(fiber: Fiber) {\n  if (__DEV__) {\n    if (\n      didWarnAboutUnmockedScheduler === false &&\n      Scheduler.unstable_flushAllWithoutAsserting === undefined\n    ) {\n      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {\n        didWarnAboutUnmockedScheduler = true;\n        console.error(\n          'In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked ' +\n            'to guarantee consistent behaviour across tests and browsers. ' +\n            'For example, with jest: \\n' +\n            // Break up requires to avoid accidentally parsing them as dependencies.\n            \"jest.mock('scheduler', () => require\" +\n            \"('scheduler/unstable_mock'));\\n\\n\" +\n            'For more info, visit https://reactjs.org/link/mock-scheduler',\n        );\n      } else if (warnAboutUnmockedScheduler === true) {\n        didWarnAboutUnmockedScheduler = true;\n        console.error(\n          'Starting from React v18, the \"scheduler\" module will need to be mocked ' +\n            'to guarantee consistent behaviour across tests and browsers. ' +\n            'For example, with jest: \\n' +\n            // Break up requires to avoid accidentally parsing them as dependencies.\n            \"jest.mock('scheduler', () => require\" +\n            \"('scheduler/unstable_mock'));\\n\\n\" +\n            'For more info, visit https://reactjs.org/link/mock-scheduler',\n        );\n      }\n    }\n  }\n}\n\nfunction computeThreadID(root: FiberRoot, lane: Lane | Lanes) {\n  // Interaction threads are unique per root and expiration time.\n  // NOTE: Intentionally unsound cast. All that matters is that it's a number\n  // and it represents a batch of work. Could make a helper function instead,\n  // but meh this is fine for now.\n  return (lane: any) * 1000 + root.interactionThreadID;\n}\n\nexport function markSpawnedWork(lane: Lane | Lanes) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n  if (spawnedWorkDuringRender === null) {\n    spawnedWorkDuringRender = [lane];\n  } else {\n    spawnedWorkDuringRender.push(lane);\n  }\n}\n\nfunction scheduleInteractions(\n  root: FiberRoot,\n  lane: Lane | Lanes,\n  interactions: Set<Interaction>,\n) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  if (interactions.size > 0) {\n    const pendingInteractionMap = root.pendingInteractionMap;\n    const pendingInteractions = pendingInteractionMap.get(lane);\n    if (pendingInteractions != null) {\n      interactions.forEach(interaction => {\n        if (!pendingInteractions.has(interaction)) {\n          // Update the pending async work count for previously unscheduled interaction.\n          interaction.__count++;\n        }\n\n        pendingInteractions.add(interaction);\n      });\n    } else {\n      pendingInteractionMap.set(lane, new Set(interactions));\n\n      // Update the pending async work count for the current interactions.\n      interactions.forEach(interaction => {\n        interaction.__count++;\n      });\n    }\n\n    const subscriber = __subscriberRef.current;\n    if (subscriber !== null) {\n      const threadID = computeThreadID(root, lane);\n      subscriber.onWorkScheduled(interactions, threadID);\n    }\n  }\n}\n\nfunction schedulePendingInteractions(root: FiberRoot, lane: Lane | Lanes) {\n  // This is called when work is scheduled on a root.\n  // It associates the current interactions with the newly-scheduled expiration.\n  // They will be restored when that expiration is later committed.\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  scheduleInteractions(root, lane, __interactionsRef.current);\n}\n\nfunction startWorkOnPendingInteractions(root: FiberRoot, lanes: Lanes) {\n  // This is called when new work is started on a root.\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  // Determine which interactions this batch of work currently includes, So that\n  // we can accurately attribute time spent working on it, And so that cascading\n  // work triggered during the render phase will be associated with it.\n  const interactions: Set<Interaction> = new Set();\n  root.pendingInteractionMap.forEach((scheduledInteractions, scheduledLane) => {\n    if (includesSomeLane(lanes, scheduledLane)) {\n      scheduledInteractions.forEach(interaction =>\n        interactions.add(interaction),\n      );\n    }\n  });\n\n  // Store the current set of interactions on the FiberRoot for a few reasons:\n  // We can re-use it in hot functions like performConcurrentWorkOnRoot()\n  // without having to recalculate it. We will also use it in commitWork() to\n  // pass to any Profiler onRender() hooks. This also provides DevTools with a\n  // way to access it when the onCommitRoot() hook is called.\n  root.memoizedInteractions = interactions;\n\n  if (interactions.size > 0) {\n    const subscriber = __subscriberRef.current;\n    if (subscriber !== null) {\n      const threadID = computeThreadID(root, lanes);\n      try {\n        subscriber.onWorkStarted(interactions, threadID);\n      } catch (error) {\n        // If the subscriber throws, rethrow it in a separate task\n        scheduleCallback(ImmediateSchedulerPriority, () => {\n          throw error;\n        });\n      }\n    }\n  }\n}\n\nfunction finishPendingInteractions(root, committedLanes) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  const remainingLanesAfterCommit = root.pendingLanes;\n\n  let subscriber;\n\n  try {\n    subscriber = __subscriberRef.current;\n    if (subscriber !== null && root.memoizedInteractions.size > 0) {\n      // FIXME: More than one lane can finish in a single commit.\n      const threadID = computeThreadID(root, committedLanes);\n      subscriber.onWorkStopped(root.memoizedInteractions, threadID);\n    }\n  } catch (error) {\n    // If the subscriber throws, rethrow it in a separate task\n    scheduleCallback(ImmediateSchedulerPriority, () => {\n      throw error;\n    });\n  } finally {\n    // Clear completed interactions from the pending Map.\n    // Unless the render was suspended or cascading work was scheduled,\n    // In which case– leave pending interactions until the subsequent render.\n    const pendingInteractionMap = root.pendingInteractionMap;\n    pendingInteractionMap.forEach((scheduledInteractions, lane) => {\n      // Only decrement the pending interaction count if we're done.\n      // If there's still work at the current priority,\n      // That indicates that we are waiting for suspense data.\n      if (!includesSomeLane(remainingLanesAfterCommit, lane)) {\n        pendingInteractionMap.delete(lane);\n\n        scheduledInteractions.forEach(interaction => {\n          interaction.__count--;\n\n          if (subscriber !== null && interaction.__count === 0) {\n            try {\n              subscriber.onInteractionScheduledWorkCompleted(interaction);\n            } catch (error) {\n              // If the subscriber throws, rethrow it in a separate task\n              scheduleCallback(ImmediateSchedulerPriority, () => {\n                throw error;\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n}\n\n// `act` testing API\n//\n// TODO: This is mostly a copy-paste from the legacy `act`, which does not have\n// access to the same internals that we do here. Some trade offs in the\n// implementation no longer make sense.\n\nlet isFlushingAct = false;\nlet isInsideThisAct = false;\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && actingUpdatesScopeDepth > 0;\n}\n\nconst flushMockScheduler = Scheduler.unstable_flushAllWithoutAsserting;\nconst isSchedulerMocked = typeof flushMockScheduler === 'function';\n\n// Returns whether additional work was scheduled. Caller should keep flushing\n// until there's no work left.\nfunction flushActWork(): boolean {\n  if (flushMockScheduler !== undefined) {\n    const prevIsFlushing = isFlushingAct;\n    isFlushingAct = true;\n    try {\n      return flushMockScheduler();\n    } finally {\n      isFlushingAct = prevIsFlushing;\n    }\n  } else {\n    // No mock scheduler available. However, the only type of pending work is\n    // passive effects, which we control. So we can flush that.\n    const prevIsFlushing = isFlushingAct;\n    isFlushingAct = true;\n    try {\n      let didFlushWork = false;\n      while (flushPassiveEffects()) {\n        didFlushWork = true;\n      }\n      return didFlushWork;\n    } finally {\n      isFlushingAct = prevIsFlushing;\n    }\n  }\n}\n\nfunction flushWorkAndMicroTasks(onDone: (err: ?Error) => void) {\n  try {\n    flushActWork();\n    enqueueTask(() => {\n      if (flushActWork()) {\n        flushWorkAndMicroTasks(onDone);\n      } else {\n        onDone();\n      }\n    });\n  } catch (err) {\n    onDone(err);\n  }\n}\n\n// we track the 'depth' of the act() calls with this counter,\n// so we can tell if any async act() calls try to run in parallel.\n\nlet actingUpdatesScopeDepth = 0;\nlet didWarnAboutUsingActInProd = false;\n\nexport function act(callback: () => Thenable<mixed>): Thenable<void> {\n  if (!__DEV__) {\n    if (didWarnAboutUsingActInProd === false) {\n      didWarnAboutUsingActInProd = true;\n      // eslint-disable-next-line react-internal/no-production-logging\n      console.error(\n        'act(...) is not supported in production builds of React, and might not behave as expected.',\n      );\n    }\n  }\n\n  const previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;\n  actingUpdatesScopeDepth++;\n\n  const previousIsSomeRendererActing = IsSomeRendererActing.current;\n  const previousIsThisRendererActing = IsThisRendererActing.current;\n  const previousIsInsideThisAct = isInsideThisAct;\n  IsSomeRendererActing.current = true;\n  IsThisRendererActing.current = true;\n  isInsideThisAct = true;\n\n  function onDone() {\n    actingUpdatesScopeDepth--;\n    IsSomeRendererActing.current = previousIsSomeRendererActing;\n    IsThisRendererActing.current = previousIsThisRendererActing;\n    isInsideThisAct = previousIsInsideThisAct;\n    if (__DEV__) {\n      if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {\n        // if it's _less than_ previousActingUpdatesScopeDepth, then we can assume the 'other' one has warned\n        console.error(\n          'You seem to have overlapping act() calls, this is not supported. ' +\n            'Be sure to await previous act() calls before making a new one. ',\n        );\n      }\n    }\n  }\n\n  let result;\n  try {\n    result = batchedUpdates(callback);\n  } catch (error) {\n    // on sync errors, we still want to 'cleanup' and decrement actingUpdatesScopeDepth\n    onDone();\n    throw error;\n  }\n\n  if (\n    result !== null &&\n    typeof result === 'object' &&\n    typeof result.then === 'function'\n  ) {\n    // setup a boolean that gets set to true only\n    // once this act() call is await-ed\n    let called = false;\n    if (__DEV__) {\n      if (typeof Promise !== 'undefined') {\n        //eslint-disable-next-line no-undef\n        Promise.resolve()\n          .then(() => {})\n          .then(() => {\n            if (called === false) {\n              console.error(\n                'You called act(async () => ...) without await. ' +\n                  'This could lead to unexpected testing behaviour, interleaving multiple act ' +\n                  'calls and mixing their scopes. You should - await act(async () => ...);',\n              );\n            }\n          });\n      }\n    }\n\n    // in the async case, the returned thenable runs the callback, flushes\n    // effects and  microtasks in a loop until flushPassiveEffects() === false,\n    // and cleans up\n    return {\n      then(resolve, reject) {\n        called = true;\n        result.then(\n          () => {\n            if (\n              actingUpdatesScopeDepth > 1 ||\n              (isSchedulerMocked === true &&\n                previousIsSomeRendererActing === true)\n            ) {\n              onDone();\n              resolve();\n              return;\n            }\n            // we're about to exit the act() scope,\n            // now's the time to flush tasks/effects\n            flushWorkAndMicroTasks((err: ?Error) => {\n              onDone();\n              if (err) {\n                reject(err);\n              } else {\n                resolve();\n              }\n            });\n          },\n          err => {\n            onDone();\n            reject(err);\n          },\n        );\n      },\n    };\n  } else {\n    if (__DEV__) {\n      if (result !== undefined) {\n        console.error(\n          'The callback passed to act(...) function ' +\n            'must return undefined, or a Promise. You returned %s',\n          result,\n        );\n      }\n    }\n\n    // flush effects until none remain, and cleanup\n    try {\n      if (\n        actingUpdatesScopeDepth === 1 &&\n        (isSchedulerMocked === false || previousIsSomeRendererActing === false)\n      ) {\n        // we're about to exit the act() scope,\n        // now's the time to flush effects\n        flushActWork();\n      }\n      onDone();\n    } catch (err) {\n      onDone();\n      throw err;\n    }\n\n    // in the sync case, the returned thenable only warns *if* await-ed\n    return {\n      then(resolve) {\n        if (__DEV__) {\n          console.error(\n            'Do not await the result of calling act(...) with sync logic, it is not a Promise.',\n          );\n        }\n        resolve();\n      },\n    };\n  }\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber): void {\n  fiber.sibling = null;\n  fiber.stateNode = null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Instance} from './ReactFiberHostConfig';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport {\n  flushSync,\n  scheduleUpdateOnFiber,\n  flushPassiveEffects,\n} from './ReactFiberWorkLoop.old';\nimport {updateContainer} from './ReactFiberReconciler.old';\nimport {emptyContextObject} from './ReactFiberContext.old';\nimport {SyncLane, NoTimestamp} from './ReactFiberLane';\nimport {\n  ClassComponent,\n  FunctionComponent,\n  ForwardRef,\n  HostComponent,\n  HostPortal,\n  HostRoot,\n  MemoComponent,\n  SimpleMemoComponent,\n} from './ReactWorkTags';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type Family = {|\n  current: any,\n|};\n\nexport type RefreshUpdate = {|\n  staleFamilies: Set<Family>,\n  updatedFamilies: Set<Family>,\n|};\n\n// Resolves type to a family.\ntype RefreshHandler = any => Family | void;\n\n// Used by React Refresh runtime through DevTools Global Hook.\nexport type SetRefreshHandler = (handler: RefreshHandler | null) => void;\nexport type ScheduleRefresh = (root: FiberRoot, update: RefreshUpdate) => void;\nexport type ScheduleRoot = (root: FiberRoot, element: ReactNodeList) => void;\nexport type FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n) => Set<Instance>;\n\nlet resolveFamily: RefreshHandler | null = null;\n// $FlowFixMe Flow gets confused by a WeakSet feature check below.\nlet failedBoundaries: WeakSet<Fiber> | null = null;\n\nexport const setRefreshHandler = (handler: RefreshHandler | null): void => {\n  if (__DEV__) {\n    resolveFamily = handler;\n  }\n};\n\nexport function resolveFunctionForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function resolveClassForHotReloading(type: any): any {\n  // No implementation differences.\n  return resolveFunctionForHotReloading(type);\n}\n\nexport function resolveForwardRefForHotReloading(type: any): any {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return type;\n    }\n    const family = resolveFamily(type);\n    if (family === undefined) {\n      // Check if we're dealing with a real forwardRef. Don't want to crash early.\n      if (\n        type !== null &&\n        type !== undefined &&\n        typeof type.render === 'function'\n      ) {\n        // ForwardRef is special because its resolved .type is an object,\n        // but it's possible that we only have its inner render function in the map.\n        // If that inner render function is different, we'll build a new forwardRef type.\n        const currentRender = resolveFunctionForHotReloading(type.render);\n        if (type.render !== currentRender) {\n          const syntheticType = {\n            $$typeof: REACT_FORWARD_REF_TYPE,\n            render: currentRender,\n          };\n          if (type.displayName !== undefined) {\n            (syntheticType: any).displayName = type.displayName;\n          }\n          return syntheticType;\n        }\n      }\n      return type;\n    }\n    // Use the latest known implementation.\n    return family.current;\n  } else {\n    return type;\n  }\n}\n\nexport function isCompatibleFamilyForHotReloading(\n  fiber: Fiber,\n  element: ReactElement,\n): boolean {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return false;\n    }\n\n    const prevType = fiber.elementType;\n    const nextType = element.type;\n\n    // If we got here, we know types aren't === equal.\n    let needsCompareFamilies = false;\n\n    const $$typeofNextType =\n      typeof nextType === 'object' && nextType !== null\n        ? nextType.$$typeof\n        : null;\n\n    switch (fiber.tag) {\n      case ClassComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case FunctionComponent: {\n        if (typeof nextType === 'function') {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          // We don't know the inner type yet.\n          // We're going to assume that the lazy inner type is stable,\n          // and so it is sufficient to avoid reconciling it away.\n          // We're not going to unwrap or actually use the new lazy type.\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case ForwardRef: {\n        if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      case MemoComponent:\n      case SimpleMemoComponent: {\n        if ($$typeofNextType === REACT_MEMO_TYPE) {\n          // TODO: if it was but can no longer be simple,\n          // we shouldn't set this.\n          needsCompareFamilies = true;\n        } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n          needsCompareFamilies = true;\n        }\n        break;\n      }\n      default:\n        return false;\n    }\n\n    // Check if both types have a family and it's the same one.\n    if (needsCompareFamilies) {\n      // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n      // This means both of them need to be registered to preserve state.\n      // If we unwrapped and compared the inner types for wrappers instead,\n      // then we would risk falsely saying two separate memo(Foo)\n      // calls are equivalent because they wrap the same Foo function.\n      const prevFamily = resolveFamily(prevType);\n      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return false;\n  }\n}\n\nexport function markFailedErrorBoundaryForHotReloading(fiber: Fiber) {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    if (typeof WeakSet !== 'function') {\n      return;\n    }\n    if (failedBoundaries === null) {\n      failedBoundaries = new WeakSet();\n    }\n    failedBoundaries.add(fiber);\n  }\n}\n\nexport const scheduleRefresh: ScheduleRefresh = (\n  root: FiberRoot,\n  update: RefreshUpdate,\n): void => {\n  if (__DEV__) {\n    if (resolveFamily === null) {\n      // Hot reloading is disabled.\n      return;\n    }\n    const {staleFamilies, updatedFamilies} = update;\n    flushPassiveEffects();\n    flushSync(() => {\n      scheduleFibersWithFamiliesRecursively(\n        root.current,\n        updatedFamilies,\n        staleFamilies,\n      );\n    });\n  }\n};\n\nexport const scheduleRoot: ScheduleRoot = (\n  root: FiberRoot,\n  element: ReactNodeList,\n): void => {\n  if (__DEV__) {\n    if (root.context !== emptyContextObject) {\n      // Super edge case: root has a legacy _renderSubtree context\n      // but we don't know the parentComponent so we can't pass it.\n      // Just ignore. We'll delete this with _renderSubtree code path later.\n      return;\n    }\n    flushPassiveEffects();\n    flushSync(() => {\n      updateContainer(element, root, null, null);\n    });\n  }\n};\n\nfunction scheduleFibersWithFamiliesRecursively(\n  fiber: Fiber,\n  updatedFamilies: Set<Family>,\n  staleFamilies: Set<Family>,\n) {\n  if (__DEV__) {\n    const {alternate, child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    if (resolveFamily === null) {\n      throw new Error('Expected resolveFamily to be set during hot reload.');\n    }\n\n    let needsRender = false;\n    let needsRemount = false;\n    if (candidateType !== null) {\n      const family = resolveFamily(candidateType);\n      if (family !== undefined) {\n        if (staleFamilies.has(family)) {\n          needsRemount = true;\n        } else if (updatedFamilies.has(family)) {\n          if (tag === ClassComponent) {\n            needsRemount = true;\n          } else {\n            needsRender = true;\n          }\n        }\n      }\n    }\n    if (failedBoundaries !== null) {\n      if (\n        failedBoundaries.has(fiber) ||\n        (alternate !== null && failedBoundaries.has(alternate))\n      ) {\n        needsRemount = true;\n      }\n    }\n\n    if (needsRemount) {\n      fiber._debugNeedsRemount = true;\n    }\n    if (needsRemount || needsRender) {\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n    if (child !== null && !needsRemount) {\n      scheduleFibersWithFamiliesRecursively(\n        child,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n    if (sibling !== null) {\n      scheduleFibersWithFamiliesRecursively(\n        sibling,\n        updatedFamilies,\n        staleFamilies,\n      );\n    }\n  }\n}\n\nexport const findHostInstancesForRefresh: FindHostInstancesForRefresh = (\n  root: FiberRoot,\n  families: Array<Family>,\n): Set<Instance> => {\n  if (__DEV__) {\n    const hostInstances = new Set();\n    const types = new Set(families.map(family => family.current));\n    findHostInstancesForMatchingFibersRecursively(\n      root.current,\n      types,\n      hostInstances,\n    );\n    return hostInstances;\n  } else {\n    throw new Error(\n      'Did not expect findHostInstancesForRefresh to be called in production.',\n    );\n  }\n};\n\nfunction findHostInstancesForMatchingFibersRecursively(\n  fiber: Fiber,\n  types: Set<any>,\n  hostInstances: Set<Instance>,\n) {\n  if (__DEV__) {\n    const {child, sibling, tag, type} = fiber;\n\n    let candidateType = null;\n    switch (tag) {\n      case FunctionComponent:\n      case SimpleMemoComponent:\n      case ClassComponent:\n        candidateType = type;\n        break;\n      case ForwardRef:\n        candidateType = type.render;\n        break;\n      default:\n        break;\n    }\n\n    let didMatch = false;\n    if (candidateType !== null) {\n      if (types.has(candidateType)) {\n        didMatch = true;\n      }\n    }\n\n    if (didMatch) {\n      // We have a match. This only drills down to the closest host components.\n      // There's no need to search deeper because for the purpose of giving\n      // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n      findHostInstancesForFiberShallowly(fiber, hostInstances);\n    } else {\n      // If there's no match, maybe there will be one further down in the child tree.\n      if (child !== null) {\n        findHostInstancesForMatchingFibersRecursively(\n          child,\n          types,\n          hostInstances,\n        );\n      }\n    }\n\n    if (sibling !== null) {\n      findHostInstancesForMatchingFibersRecursively(\n        sibling,\n        types,\n        hostInstances,\n      );\n    }\n  }\n}\n\nfunction findHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): void {\n  if (__DEV__) {\n    const foundHostInstances = findChildHostInstancesForFiberShallowly(\n      fiber,\n      hostInstances,\n    );\n    if (foundHostInstances) {\n      return;\n    }\n    // If we didn't find any host children, fallback to closest host parent.\n    let node = fiber;\n    while (true) {\n      switch (node.tag) {\n        case HostComponent:\n          hostInstances.add(node.stateNode);\n          return;\n        case HostPortal:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n        case HostRoot:\n          hostInstances.add(node.stateNode.containerInfo);\n          return;\n      }\n      if (node.return === null) {\n        throw new Error('Expected to reach root first.');\n      }\n      node = node.return;\n    }\n  }\n}\n\nfunction findChildHostInstancesForFiberShallowly(\n  fiber: Fiber,\n  hostInstances: Set<Instance>,\n): boolean {\n  if (__DEV__) {\n    let node: Fiber = fiber;\n    let foundHostInstances = false;\n    while (true) {\n      if (node.tag === HostComponent) {\n        // We got a match.\n        foundHostInstances = true;\n        hostInstances.add(node.stateNode);\n        // There may still be more, so keep searching.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === fiber) {\n        return foundHostInstances;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === fiber) {\n          return foundHostInstances;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {\n  ReactFragment,\n  ReactPortal,\n  ReactFundamentalComponent,\n  ReactScope,\n} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {OffscreenProps} from './ReactFiberOffscreenComponent';\n\nimport invariant from 'shared/invariant';\nimport {\n  enableProfilerTimer,\n  enableFundamentalAPI,\n  enableScopeAPI,\n  enableBlocksAPI,\n} from 'shared/ReactFeatureFlags';\nimport {NoFlags, Placement} from './ReactFiberFlags';\nimport {ConcurrentRoot, BlockingRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictMode,\n  BlockingMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_FUNDAMENTAL_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_BLOCK_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nlet debugCounter = 1;\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.nextEffect = null;\n\n  this.firstEffect = null;\n  this.lastEffect = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugID = debugCounter++;\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n    if (enableBlocksAPI) {\n      if ($$typeof === REACT_BLOCK_TYPE) {\n        return Block;\n      }\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n      workInProgress._debugID = current._debugID;\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effect list is no longer valid.\n    workInProgress.nextEffect = null;\n    workInProgress.firstEffect = null;\n    workInProgress.lastEffect = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect tag but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= Placement;\n\n  // The effect list is no longer valid.\n  workInProgress.nextEffect = null;\n  workInProgress.firstEffect = null;\n  workInProgress.lastEffect = null;\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(tag: RootTag): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode | BlockingMode | StrictMode;\n  } else if (tag === BlockingRoot) {\n    mode = BlockingMode | StrictMode;\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= DebugTracingMode;\n        break;\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictMode;\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n            case REACT_BLOCK_TYPE:\n              fiberTag = Block;\n              break getTag;\n            case REACT_FUNDAMENTAL_TYPE:\n              if (enableFundamentalAPI) {\n                return createFiberFromFundamental(\n                  type,\n                  pendingProps,\n                  mode,\n                  lanes,\n                  key,\n                );\n              }\n              break;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentName(owner.type) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n        invariant(\n          false,\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            'but got: %s.%s',\n          type == null ? type : typeof type,\n          info,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromFundamental(\n  fundamentalComponent: ReactFundamentalComponent<any, any>,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(FundamentalComponent, pendingProps, key, mode);\n  fiber.elementType = fundamentalComponent;\n  fiber.type = fundamentalComponent;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error('Profiler must specify an \"id\" as a prop');\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  // TODO: The Profiler fiber shouldn't have a type. It has a tag.\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.type = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n\n  // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  fiber.type = REACT_SUSPENSE_TYPE;\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  if (__DEV__) {\n    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.\n    // This needs to be fixed in getComponentName so that it relies on the tag\n    // instead.\n    fiber.type = REACT_SUSPENSE_LIST_TYPE;\n  }\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  if (__DEV__) {\n    fiber.type = REACT_OFFSCREEN_TYPE;\n  }\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  if (__DEV__) {\n    fiber.type = REACT_LEGACY_HIDDEN_TYPE;\n  }\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  // TODO: These should not need a type.\n  fiber.elementType = 'DELETED';\n  fiber.type = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.nextEffect = source.nextEffect;\n  target.firstEffect = source.firstEffect;\n  target.lastEffect = source.lastEffect;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n  target._debugID = source._debugID;\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLanes,\n  NoLanePriority,\n  NoTimestamp,\n  createLaneMap,\n} from './ReactFiberLane';\nimport {\n  enableSchedulerTracing,\n  enableSuspenseCallback,\n} from 'shared/ReactFeatureFlags';\nimport {unstable_getThreadID} from 'scheduler/tracing';\nimport {initializeUpdateQueue} from './ReactUpdateQueue.old';\nimport {LegacyRoot, BlockingRoot, ConcurrentRoot} from './ReactRootTags';\n\nfunction FiberRootNode(containerInfo, tag, hydrate) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.hydrate = hydrate;\n  this.callbackNode = null;\n  this.callbackPriority = NoLanePriority;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSchedulerTracing) {\n    this.interactionThreadID = unstable_getThreadID();\n    this.memoizedInteractions = new Set();\n    this.pendingInteractionMap = new Map();\n  }\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case BlockingRoot:\n        this._debugRootType = 'createBlockingRoot()';\n        break;\n      case ConcurrentRoot:\n        this._debugRootType = 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = 'createLegacyRoot()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(containerInfo, tag, hydrate): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(tag);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport {FundamentalComponent} from './ReactWorkTags';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane, LanePriority} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport {enableSchedulingProfiler} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {injectInternals, onScheduleRoot} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  flushRoot,\n  batchedEventUpdates,\n  batchedUpdates,\n  unbatchedUpdates,\n  flushSync,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushDiscreteUpdates,\n  flushPassiveEffects,\n  warnIfNotScopedWithMatchingAct,\n  warnIfUnmockedScheduler,\n  IsThisRendererActing,\n  act,\n} from './ReactFiberWorkLoop.old';\nimport {createUpdate, enqueueUpdate} from './ReactUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  InputDiscreteHydrationLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport {markRenderScheduled} from './SchedulingProfiler';\n\nexport {registerMutableSourceForHydration} from './ReactMutableSource.new';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPsuedoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      invariant(false, 'Unable to find node on an unmounted component.');\n    } else {\n      invariant(\n        false,\n        'Argument appears to not be a ReactComponent. Keys: %s',\n        Object.keys(component),\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        invariant(false, 'Unable to find node on an unmounted component.');\n      } else {\n        invariant(\n          false,\n          'Argument appears to not be a ReactComponent. Keys: %s',\n          Object.keys(component),\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictMode) {\n      const componentName = getComponentName(fiber.type) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n): OpaqueRoot {\n  return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks);\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfUnmockedScheduler(current);\n      warnIfNotScopedWithMatchingAct(current);\n    }\n  }\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentName(ReactCurrentFiberCurrent.type) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current, update);\n  scheduleUpdateOnFiber(current, lane, eventTime);\n\n  return lane;\n}\n\nexport {\n  batchedEventUpdates,\n  batchedUpdates,\n  unbatchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushDiscreteUpdates,\n  flushControlled,\n  flushSync,\n  flushPassiveEffects,\n  IsThisRendererActing,\n  act,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot:\n      const root: FiberRoot = fiber.stateNode;\n      if (root.hydrate) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    case SuspenseComponent:\n      const eventTime = requestEventTime();\n      flushSync(() => scheduleUpdateOnFiber(fiber, SyncLane, eventTime));\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = InputDiscreteHydrationLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thennables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptUserBlockingHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = InputDiscreteHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = SelectiveHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function runWithPriority<T>(priority: LanePriority, fn: () => T) {\n  const previousPriority = getCurrentUpdateLanePriority();\n  try {\n    setCurrentUpdateLanePriority(priority);\n    return fn();\n  } finally {\n    setCurrentUpdateLanePriority(previousPriority);\n  }\n}\n\nexport {getCurrentUpdateLanePriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  if (hostFiber.tag === FundamentalComponent) {\n    return hostFiber.stateNode.instance;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (Array.isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (Array.isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n  });\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Thenable} from 'shared/ReactTypes';\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {FiberRoot} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance, TextInstance} from './ReactTestHostConfig';\n\nimport * as Scheduler from 'scheduler/unstable_mock';\nimport {\n  getPublicRootInstance,\n  createContainer,\n  updateContainer,\n  flushSync,\n  injectIntoDevTools,\n  batchedUpdates,\n  act,\n  IsThisRendererActing,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport {findCurrentFiberUsingSlowPath} from 'react-reconciler/src/ReactFiberTreeReflection';\nimport {\n  Fragment,\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  HostPortal,\n  HostText,\n  HostRoot,\n  ContextConsumer,\n  ContextProvider,\n  Mode,\n  ForwardRef,\n  Profiler,\n  MemoComponent,\n  SimpleMemoComponent,\n  Block,\n  IncompleteClassComponent,\n  ScopeComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport getComponentName from 'shared/getComponentName';\nimport ReactVersion from 'shared/ReactVersion';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport enqueueTask from 'shared/enqueueTask';\n\nimport {getPublicInstance} from './ReactTestHostConfig';\nimport {ConcurrentRoot, LegacyRoot} from 'react-reconciler/src/ReactRootTags';\n\nconst {IsSomeRendererActing} = ReactSharedInternals;\n\ntype TestRendererOptions = {\n  createNodeMock: (element: React$Element<any>) => any,\n  unstable_isConcurrent: boolean,\n  ...\n};\n\ntype ReactTestRendererJSON = {|\n  type: string,\n  props: {[propName: string]: any, ...},\n  children: null | Array<ReactTestRendererNode>,\n  $$typeof?: Symbol, // Optional because we add it with defineProperty().\n|};\ntype ReactTestRendererNode = ReactTestRendererJSON | string;\n\ntype FindOptions = $Shape<{\n  // performs a \"greedy\" search: if a matching node is found, will continue\n  // to search within the matching node's children. (default: true)\n  deep: boolean,\n  ...\n}>;\n\nexport type Predicate = (node: ReactTestInstance) => ?boolean;\n\nconst defaultTestOptions = {\n  createNodeMock: function() {\n    return null;\n  },\n};\n\nfunction toJSON(inst: Instance | TextInstance): ReactTestRendererNode | null {\n  if (inst.isHidden) {\n    // Omit timed out children from output entirely. This seems like the least\n    // surprising behavior. We could perhaps add a separate API that includes\n    // them, if it turns out people need it.\n    return null;\n  }\n  switch (inst.tag) {\n    case 'TEXT':\n      return inst.text;\n    case 'INSTANCE': {\n      /* eslint-disable no-unused-vars */\n      // We don't include the `children` prop in JSON.\n      // Instead, we will include the actual rendered children.\n      const {children, ...props} = inst.props;\n      /* eslint-enable */\n      let renderedChildren = null;\n      if (inst.children && inst.children.length) {\n        for (let i = 0; i < inst.children.length; i++) {\n          const renderedChild = toJSON(inst.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      const json: ReactTestRendererJSON = {\n        type: inst.type,\n        props: props,\n        children: renderedChildren,\n      };\n      Object.defineProperty(json, '$$typeof', {\n        value: Symbol.for('react.test.json'),\n      });\n      return json;\n    }\n    default:\n      throw new Error(`Unexpected node type in toJSON: ${inst.tag}`);\n  }\n}\n\nfunction childrenToTree(node) {\n  if (!node) {\n    return null;\n  }\n  const children = nodeAndSiblingsArray(node);\n  if (children.length === 0) {\n    return null;\n  } else if (children.length === 1) {\n    return toTree(children[0]);\n  }\n  return flatten(children.map(toTree));\n}\n\nfunction nodeAndSiblingsArray(nodeWithSibling) {\n  const array = [];\n  let node = nodeWithSibling;\n  while (node != null) {\n    array.push(node);\n    node = node.sibling;\n  }\n  return array;\n}\n\nfunction flatten(arr) {\n  const result = [];\n  const stack = [{i: 0, array: arr}];\n  while (stack.length) {\n    const n = stack.pop();\n    while (n.i < n.array.length) {\n      const el = n.array[n.i];\n      n.i += 1;\n      if (Array.isArray(el)) {\n        stack.push(n);\n        stack.push({i: 0, array: el});\n        break;\n      }\n      result.push(el);\n    }\n  }\n  return result;\n}\n\nfunction toTree(node: ?Fiber) {\n  if (node == null) {\n    return null;\n  }\n  switch (node.tag) {\n    case HostRoot:\n      return childrenToTree(node.child);\n    case HostPortal:\n      return childrenToTree(node.child);\n    case ClassComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: node.stateNode,\n        rendered: childrenToTree(node.child),\n      };\n    case FunctionComponent:\n    case SimpleMemoComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null,\n        rendered: childrenToTree(node.child),\n      };\n    case Block:\n      return {\n        nodeType: 'block',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null,\n        rendered: childrenToTree(node.child),\n      };\n    case HostComponent: {\n      return {\n        nodeType: 'host',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null, // TODO: use createNodeMock here somehow?\n        rendered: flatten(nodeAndSiblingsArray(node.child).map(toTree)),\n      };\n    }\n    case HostText:\n      return node.stateNode.text;\n    case Fragment:\n    case ContextProvider:\n    case ContextConsumer:\n    case Mode:\n    case Profiler:\n    case ForwardRef:\n    case MemoComponent:\n    case IncompleteClassComponent:\n    case ScopeComponent:\n      return childrenToTree(node.child);\n    default:\n      invariant(\n        false,\n        'toTree() does not yet know how to handle nodes with tag=%s',\n        node.tag,\n      );\n  }\n}\n\nconst validWrapperTypes = new Set([\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Block,\n  // Normally skipped, but used when there's more than one root child.\n  HostRoot,\n]);\n\nfunction getChildren(parent: Fiber) {\n  const children = [];\n  const startingNode = parent;\n  let node: Fiber = startingNode;\n  if (node.child === null) {\n    return children;\n  }\n  node.child.return = node;\n  node = node.child;\n  outer: while (true) {\n    let descend = false;\n    if (validWrapperTypes.has(node.tag)) {\n      children.push(wrapFiber(node));\n    } else if (node.tag === HostText) {\n      children.push('' + node.memoizedProps);\n    } else {\n      descend = true;\n    }\n    if (descend && node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    while (node.sibling === null) {\n      if (node.return === startingNode) {\n        break outer;\n      }\n      node = (node.return: any);\n    }\n    (node.sibling: any).return = node.return;\n    node = (node.sibling: any);\n  }\n  return children;\n}\n\nclass ReactTestInstance {\n  _fiber: Fiber;\n\n  _currentFiber(): Fiber {\n    // Throws if this component has been unmounted.\n    const fiber = findCurrentFiberUsingSlowPath(this._fiber);\n    invariant(\n      fiber !== null,\n      \"Can't read from currently-mounting component. This error is likely \" +\n        'caused by a bug in React. Please file an issue.',\n    );\n    return fiber;\n  }\n\n  constructor(fiber: Fiber) {\n    invariant(\n      validWrapperTypes.has(fiber.tag),\n      'Unexpected object passed to ReactTestInstance constructor (tag: %s). ' +\n        'This is probably a bug in React.',\n      fiber.tag,\n    );\n    this._fiber = fiber;\n  }\n\n  get instance() {\n    if (this._fiber.tag === HostComponent) {\n      return getPublicInstance(this._fiber.stateNode);\n    } else {\n      return this._fiber.stateNode;\n    }\n  }\n\n  get type() {\n    return this._fiber.type;\n  }\n\n  get props(): Object {\n    return this._currentFiber().memoizedProps;\n  }\n\n  get parent(): ?ReactTestInstance {\n    let parent = this._fiber.return;\n    while (parent !== null) {\n      if (validWrapperTypes.has(parent.tag)) {\n        if (parent.tag === HostRoot) {\n          // Special case: we only \"materialize\" instances for roots\n          // if they have more than a single child. So we'll check that now.\n          if (getChildren(parent).length < 2) {\n            return null;\n          }\n        }\n        return wrapFiber(parent);\n      }\n      parent = parent.return;\n    }\n    return null;\n  }\n\n  get children(): Array<ReactTestInstance | string> {\n    return getChildren(this._currentFiber());\n  }\n\n  // Custom search functions\n  find(predicate: Predicate): ReactTestInstance {\n    return expectOne(\n      this.findAll(predicate, {deep: false}),\n      `matching custom predicate: ${predicate.toString()}`,\n    );\n  }\n\n  findByType(type: any): ReactTestInstance {\n    return expectOne(\n      this.findAllByType(type, {deep: false}),\n      `with node type: \"${getComponentName(type) || 'Unknown'}\"`,\n    );\n  }\n\n  findByProps(props: Object): ReactTestInstance {\n    return expectOne(\n      this.findAllByProps(props, {deep: false}),\n      `with props: ${JSON.stringify(props)}`,\n    );\n  }\n\n  findAll(\n    predicate: Predicate,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, predicate, options);\n  }\n\n  findAllByType(\n    type: any,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, node => node.type === type, options);\n  }\n\n  findAllByProps(\n    props: Object,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(\n      this,\n      node => node.props && propsMatch(node.props, props),\n      options,\n    );\n  }\n}\n\nfunction findAll(\n  root: ReactTestInstance,\n  predicate: Predicate,\n  options: ?FindOptions,\n): Array<ReactTestInstance> {\n  const deep = options ? options.deep : true;\n  const results = [];\n\n  if (predicate(root)) {\n    results.push(root);\n    if (!deep) {\n      return results;\n    }\n  }\n\n  root.children.forEach(child => {\n    if (typeof child === 'string') {\n      return;\n    }\n    results.push(...findAll(child, predicate, options));\n  });\n\n  return results;\n}\n\nfunction expectOne(\n  all: Array<ReactTestInstance>,\n  message: string,\n): ReactTestInstance {\n  if (all.length === 1) {\n    return all[0];\n  }\n\n  const prefix =\n    all.length === 0\n      ? 'No instances found '\n      : `Expected 1 but found ${all.length} instances `;\n\n  throw new Error(prefix + message);\n}\n\nfunction propsMatch(props: Object, filter: Object): boolean {\n  for (const key in filter) {\n    if (props[key] !== filter[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction create(element: React$Element<any>, options: TestRendererOptions) {\n  let createNodeMock = defaultTestOptions.createNodeMock;\n  let isConcurrent = false;\n  if (typeof options === 'object' && options !== null) {\n    if (typeof options.createNodeMock === 'function') {\n      createNodeMock = options.createNodeMock;\n    }\n    if (options.unstable_isConcurrent === true) {\n      isConcurrent = true;\n    }\n  }\n  let container = {\n    children: [],\n    createNodeMock,\n    tag: 'CONTAINER',\n  };\n  let root: FiberRoot | null = createContainer(\n    container,\n    isConcurrent ? ConcurrentRoot : LegacyRoot,\n    false,\n    null,\n  );\n  invariant(root != null, 'something went wrong');\n  updateContainer(element, root, null, null);\n\n  const entry = {\n    _Scheduler: Scheduler,\n\n    root: undefined, // makes flow happy\n    // we define a 'getter' for 'root' below using 'Object.defineProperty'\n    toJSON(): Array<ReactTestRendererNode> | ReactTestRendererNode | null {\n      if (root == null || root.current == null || container == null) {\n        return null;\n      }\n      if (container.children.length === 0) {\n        return null;\n      }\n      if (container.children.length === 1) {\n        return toJSON(container.children[0]);\n      }\n      if (\n        container.children.length === 2 &&\n        container.children[0].isHidden === true &&\n        container.children[1].isHidden === false\n      ) {\n        // Omit timed out children from output entirely, including the fact that we\n        // temporarily wrap fallback and timed out children in an array.\n        return toJSON(container.children[1]);\n      }\n      let renderedChildren = null;\n      if (container.children && container.children.length) {\n        for (let i = 0; i < container.children.length; i++) {\n          const renderedChild = toJSON(container.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      return renderedChildren;\n    },\n    toTree() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return toTree(root.current);\n    },\n    update(newElement: React$Element<any>) {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(newElement, root, null, null);\n    },\n    unmount() {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(null, root, null, null);\n      container = null;\n      root = null;\n    },\n    getInstance() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return getPublicRootInstance(root);\n    },\n\n    unstable_flushSync<T>(fn: () => T): T {\n      return flushSync(fn);\n    },\n  };\n\n  Object.defineProperty(\n    entry,\n    'root',\n    ({\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (root === null) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        }\n        const children = getChildren(root.current);\n        if (children.length === 0) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        } else if (children.length === 1) {\n          // Normally, we skip the root and just give you the child.\n          return children[0];\n        } else {\n          // However, we give you the root if there's more than one root child.\n          // We could make this the behavior for all cases but it would be a breaking change.\n          return wrapFiber(root.current);\n        }\n      },\n    }: Object),\n  );\n\n  return entry;\n}\n\nconst fiberToWrapper = new WeakMap();\nfunction wrapFiber(fiber: Fiber): ReactTestInstance {\n  let wrapper = fiberToWrapper.get(fiber);\n  if (wrapper === undefined && fiber.alternate !== null) {\n    wrapper = fiberToWrapper.get(fiber.alternate);\n  }\n  if (wrapper === undefined) {\n    wrapper = new ReactTestInstance(fiber);\n    fiberToWrapper.set(fiber, wrapper);\n  }\n  return wrapper;\n}\n\n// Enable ReactTestRenderer to be used to test DevTools integration.\ninjectIntoDevTools({\n  findFiberByHostInstance: (() => {\n    throw new Error('TestRenderer does not support findFiberByHostInstance()');\n  }: any),\n  bundleType: __DEV__ ? 1 : 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-test-renderer',\n});\n\nlet actingUpdatesScopeDepth = 0;\n\n// This version of `act` is only used by our tests. Unlike the public version\n// of `act`, it's designed to work identically in both production and\n// development. It may have slightly different behavior from the public\n// version, too, since our constraints in our test suite are not the same as\n// those of developers using React — we're testing React itself, as opposed to\n// building an app with React.\n// TODO: Migrate our tests to use ReactNoop. Although we would need to figure\n// out a solution for Relay, which has some Concurrent Mode tests.\nfunction unstable_concurrentAct(scope: () => Thenable<mixed> | void) {\n  if (Scheduler.unstable_flushAllWithoutAsserting === undefined) {\n    throw Error(\n      'This version of `act` requires a special mock build of Scheduler.',\n    );\n  }\n  if (setTimeout._isMockFunction !== true) {\n    throw Error(\n      \"This version of `act` requires Jest's timer mocks \" +\n        '(i.e. jest.useFakeTimers).',\n    );\n  }\n\n  const previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;\n  const previousIsSomeRendererActing = IsSomeRendererActing.current;\n  const previousIsThisRendererActing = IsThisRendererActing.current;\n  IsSomeRendererActing.current = true;\n  IsThisRendererActing.current = true;\n  actingUpdatesScopeDepth++;\n\n  const unwind = () => {\n    actingUpdatesScopeDepth--;\n    IsSomeRendererActing.current = previousIsSomeRendererActing;\n    IsThisRendererActing.current = previousIsThisRendererActing;\n    if (__DEV__) {\n      if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {\n        // if it's _less than_ previousActingUpdatesScopeDepth, then we can\n        // assume the 'other' one has warned\n        console.error(\n          'You seem to have overlapping act() calls, this is not supported. ' +\n            'Be sure to await previous act() calls before making a new one. ',\n        );\n      }\n    }\n  };\n\n  // TODO: This would be way simpler if 1) we required a promise to be\n  // returned and 2) we could use async/await. Since it's only our used in\n  // our test suite, we should be able to.\n  try {\n    const thenable = batchedUpdates(scope);\n    if (\n      typeof thenable === 'object' &&\n      thenable !== null &&\n      typeof thenable.then === 'function'\n    ) {\n      return {\n        then(resolve: () => void, reject: (error: mixed) => void) {\n          thenable.then(\n            () => {\n              flushActWork(\n                () => {\n                  unwind();\n                  resolve();\n                },\n                error => {\n                  unwind();\n                  reject(error);\n                },\n              );\n            },\n            error => {\n              unwind();\n              reject(error);\n            },\n          );\n        },\n      };\n    } else {\n      try {\n        // TODO: Let's not support non-async scopes at all in our tests. Need to\n        // migrate existing tests.\n        let didFlushWork;\n        do {\n          didFlushWork = Scheduler.unstable_flushAllWithoutAsserting();\n        } while (didFlushWork);\n      } finally {\n        unwind();\n      }\n    }\n  } catch (error) {\n    unwind();\n    throw error;\n  }\n}\n\nfunction flushActWork(resolve, reject) {\n  // Flush suspended fallbacks\n  // $FlowFixMe: Flow doesn't know about global Jest object\n  jest.runOnlyPendingTimers();\n  enqueueTask(() => {\n    try {\n      const didFlushWork = Scheduler.unstable_flushAllWithoutAsserting();\n      if (didFlushWork) {\n        flushActWork(resolve, reject);\n      } else {\n        resolve();\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nexport {\n  Scheduler as _Scheduler,\n  create,\n  /* eslint-disable-next-line camelcase */\n  batchedUpdates as unstable_batchedUpdates,\n  act,\n  unstable_concurrentAct,\n};\n"],"names":["warningWWW","require","warn","format","args","printWarning","error","level","React","ReactSharedInternals","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactDebugCurrentFrame","stack","getStackAddendum","push","unshift","apply","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","FundamentalComponent","ScopeComponent","Block","OffscreenComponent","LegacyHiddenComponent","get","key","_reactInternals","set","value","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_BLOCK_TYPE","REACT_SERVER_BLOCK_TYPE","REACT_FUNDAMENTAL_TYPE","REACT_SCOPE_TYPE","REACT_OPAQUE_ID_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","Symbol","for","symbolFor","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","functionName","displayName","name","getContextName","type","getComponentName","tag","$$typeof","context","provider","_context","render","_render","lazyComponent","payload","_payload","init","_init","x","NoFlags","PerformedWork","Placement","Update","PlacementAndUpdate","Deletion","ContentReset","Callback","DidCapture","Ref","Snapshot","Passive","PassiveUnmountPendingDev","Hydrating","HydratingAndUpdate","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","enableProfilerTimer","__PROFILE__","enableFundamentalAPI","warnAboutStringRefs","enableNewReconciler","ReactCurrentOwner","getNearestMountedFiber","fiber","node","nearestMounted","alternate","nextNode","flags","return","isFiberMounted","isMounted","component","owner","current","ownerFiber","instance","stateNode","_warnedAboutRefsInRender","getInstance","assertIsMounted","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","findCurrentHostFiber","parent","currentParent","isFiberSuspenseAndTimedOut","memoizedState","dehydrated","doesFiberContain","parentFiber","childFiber","parentFiberAlternate","shim","isSuspenseInstancePending","isSuspenseInstanceFallback","hydrateTextInstance","NO_CONTEXT","UPDATE_SIGNAL","nodeToInstanceMap","WeakMap","Object","freeze","getPublicInstance","inst","createNodeMock","rootContainerInstance","mockNode","props","appendChild","parentInstance","Array","isArray","children","index","indexOf","splice","insertBefore","beforeChild","beforeIndex","removeChild","clearContainer","container","getRootHostContext","getChildHostContext","parentHostContext","prepareForCommit","containerInfo","resetAfterCommit","createInstance","hostContext","internalInstanceHandle","isHidden","appendInitialChild","prepareUpdate","testElement","oldProps","newProps","shouldSetTextContent","createTextInstance","text","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","commitUpdate","updatePayload","commitTextUpdate","textInstance","oldText","newText","resetTextContent","appendChildToContainer","insertInContainerBefore","removeChildFromContainer","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","getInstanceFromNode","undefined","clientId","makeClientIdInDEV","warnOnAccessInDEV","id","toString","valueOf","preparePortalMount","portalInstance","prepareScopeUpdate","scopeInstance","getInstanceFromScope","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledLog","__reactDisabledLog","disableLogs","console","log","info","group","groupCollapsed","groupEnd","configurable","enumerable","writable","defineProperties","reenableLogs","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","source","ownerFn","Error","match","trim","reentry","componentFrameCache","PossiblyWeakMap","Map","describeNativeComponentFrame","fn","construct","frame","control","previousPrepareStackTrace","prepareStackTrace","previousDispatcher","Fake","defineProperty","prototype","Reflect","call","sample","sampleLines","split","controlLines","s","length","c","replace","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","shouldConstruct","Component","isReactComponent","describeUnknownElementTypeFrameInDEV","loggedTypeFailures","setCurrentlyValidatingElement","element","_owner","_source","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","has","Function","bind","hasOwnProperty","typeSpecName","err","ex","message","valueStack","fiberStack","createCursor","defaultValue","pop","cursor","warnedAboutMissingGetChildContext","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","BlockingRoot","ConcurrentRoot","rendererID","injectedHook","hasLoggedError","isDevToolsPresent","__REACT_DEVTOOLS_GLOBAL_HOOK__","injectInternals","internals","hook","isDisabled","supportsFiber","inject","onScheduleRoot","root","onScheduleFiberRoot","__DEV__","onCommitRoot","priorityLevel","onCommitFiberRoot","didError","onCommitUnmount","onCommitFiberUnmount","Scheduler_now","Scheduler","__interactionsRef","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","NoPriority","initialTimeMs","SyncLanePriority","SyncBatchedLanePriority","InputDiscreteHydrationLanePriority","InputDiscreteLanePriority","InputContinuousHydrationLanePriority","InputContinuousLanePriority","DefaultHydrationLanePriority","DefaultLanePriority","TransitionHydrationPriority","TransitionPriority","RetryLanePriority","SelectiveHydrationLanePriority","IdleHydrationLanePriority","IdleLanePriority","OffscreenLanePriority","NoLanePriority","TotalLanes","NoLanes","NoLane","SyncLane","SyncBatchedLane","InputDiscreteHydrationLane","InputDiscreteLanes","InputContinuousHydrationLane","InputContinuousLanes","DefaultHydrationLane","DefaultLanes","TransitionHydrationLane","TransitionLanes","RetryLanes","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLanes","OffscreenLane","NoTimestamp","return_highestLanePriority","getHighestPriorityLanes","lanes","inputDiscreteLanes","inputContinuousLanes","defaultLanes","transitionLanes","retryLanes","idleLanes","schedulerPriorityToLanePriority","schedulerPriorityLevel","ImmediateSchedulerPriority","UserBlockingSchedulerPriority","NormalSchedulerPriority","LowSchedulerPriority","IdleSchedulerPriority","lanePriorityToSchedulerPriority","lanePriority","NoSchedulerPriority","getNextLanes","wipLanes","pendingLanes","nextLanes","nextLanePriority","expiredLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","getEqualOrHigherPriorityLanes","wipLanePriority","entangledLanes","entanglements","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","priority","markStarvedLanesAsExpired","expirationTimes","expirationTime","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","returnNextLanesPriority","includesNonIdleWork","includesOnlyRetries","includesOnlyTransitions","findUpdateLane","pickArbitraryLane","findTransitionLane","findRetryLane","getHighestPriorityLane","getLowestPriorityLane","clz32","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","laneToLanes","createLaneMap","initial","fill","markRootUpdated","updateLane","higherPriorityLanes","markRootSuspended","markRootPinged","hasDiscreteLanes","markRootMutableRead","mutableReadLanes","markRootFinished","remainingLanes","noLongerPendingLanes","markRootEntangled","Math","clz32Fallback","LN2","Scheduler_runWithPriority","Scheduler_scheduleCallback","Scheduler_cancelCallback","Scheduler_shouldYield","Scheduler_requestPaint","Scheduler_getCurrentPriorityLevel","Scheduler_ImmediatePriority","Scheduler_UserBlockingPriority","Scheduler_NormalPriority","Scheduler_LowPriority","Scheduler_IdlePriority","fakeCallbackNode","shouldYield","requestPaint","syncQueue","immediateQueueCallbackNode","isFlushingSyncQueue","now","getCurrentPriorityLevel","reactPriorityToSchedulerPriority","reactPriorityLevel","runWithPriority","scheduleCallback","callback","options","scheduleSyncCallback","flushSyncCallbackQueueImpl","cancelCallback","callbackNode","flushSyncCallbackQueue","i","isSync","queue","slice","NoMode","StrictMode","BlockingMode","ConcurrentMode","ProfileMode","DebugTracingMode","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","is","y","objectIs","shallowEqual","objA","objB","keysA","keys","keysB","describeFiber","_debugOwner","_debugSource","getStackByFiberInDevAndProd","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","setIsRendering","rendering","getIsRendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","mode","setToSortedString","array","forEach","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","add","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","size","sortedNames","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","fiberArray","firstFiber","uniqueNames","setCurrentDebugFiberInDEV","resetCurrentDebugFiberInDEV","resolveDefaultProps","baseProps","defaultProps","assign","propName","MAX_SIGNED_31_BIT_INT","valueCursor","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastContextWithAllBitsObserved","isDisallowedContextReadInDEV","resetContextDependencies","enterDisallowedContextReadInDEV","exitDisallowedContextReadInDEV","pushProvider","providerFiber","nextValue","_currentValue2","_currentRenderer2","popProvider","currentValue","calculateChangedBits","newValue","oldValue","changedBits","_calculateChangedBits","scheduleWorkOnParentPath","renderLanes","childLanes","propagateContextChange","nextFiber","list","dependencies","dependency","firstContext","observedBits","update","createUpdate","ForceUpdate","enqueueUpdate","next","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","resolvedObservedBits","contextItem","responders","isPrimaryRenderer","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","updateQueue","cloneUpdateQueue","currentQueue","clone","sharedQueue","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","lastPendingUpdate","firstPendingUpdate","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","fakeInternalInstance","emptyRefsObject","refs","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","warnOnUndefinedDerivedState","warnOnInvalidCallback","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutContextTypeAndContextTypes","didWarnAboutInvalidateContextType","didWarnOnInvalidCallback","callerName","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","shouldUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","state","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","adoptClassInstance","updater","setInstance","_reactInternalInstance","constructClassInstance","isLegacyContextConsumer","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","warnForMissingKey","returnFiber","_store","validated","coerceRef","mixedRef","ref","_self","stringRef","_stringRef","throwOnInvalidObjectType","newChild","warnOnFunctionType","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","last","lastEffect","nextEffect","firstEffect","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","existing","updateElement","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","updateFragment","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","warnOnInvalidKey","knownKeys","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","reconcileChildrenIterator","newChildrenIterable","iteratorFn","toStringTag","entries","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","isObject","_isMockFunction","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","fallback","unstable_avoidThisFallback","findFirstSuspended","row","revealOrder","didSuspend","HasEffect","Layout","isHydrating","enterHydrationState","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","popHydrationState","getIsHydrating","workInProgressSources","markSourceAsDirty","mutableSource","resetWorkInProgressVersions","_workInProgressVersionSecondary","getWorkInProgressVersion","setWorkInProgressVersion","version","warnAboutMultipleRenderersDEV","_currentSecondaryRenderer","didWarnAboutMismatchedHooksForComponent","didWarnAboutUseOpaqueIdentifier","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","numberOfReRenders","HooksDispatcherOnRerenderInDEV","ContextOnlyDispatcher","didRenderTooFewHooks","bailoutHooks","PassiveEffect","UpdateEffect","resetHooksAfterThrow","isUpdatingOpaqueValueInRenderPhase","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchAction","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","eagerReducer","eagerState","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","readFromUnsubcribedMutableSource","getSnapshot","getVersion","_getVersion","isSafeToReadFromSource","currentRenderVersion","snapshot","useMutableSource","subscribe","getWorkInProgressRoot","dispatcher","useState","currentSnapshot","setSnapshot","stateHook","prevGetSnapshot","prevSource","prevSubscribe","useEffect","maybeNewVersion","maybeNewSnapshot","handleChange","latestGetSnapshot","latestSetSnapshot","unsubscribe","newQueue","mountMutableSource","updateMutableSource","mountState","updateState","rerenderState","pushEffect","create","destroy","componentUpdateQueue","mountRef","initialValue","seal","updateRef","mountEffectImpl","fiberFlags","hookFlags","HookHasEffect","updateEffectImpl","prevEffect","mountEffect","jest","warnIfNotCurrentlyActingEffectsInDEV","HookPassive","updateEffect","mountLayoutEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","concat","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","prevValue","setValue","prevTransition","updateDeferredValue","rerenderDeferredValue","startTransition","setPending","mountTransition","isPending","start","updateTransition","startRef","rerenderTransition","getIsUpdatingOpaqueValueInRenderPhaseInDEV","warnOnOpaqueIdentifierAccessInDEV","mountOpaqueIdentifier","makeId","updateOpaqueIdentifier","rerenderOpaqueIdentifier","arguments","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","currentState","warnIfNotScopedWithMatchingAct","warnIfNotCurrentlyActingUpdatesInDev","useCallback","useContext","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useDebugValue","useDeferredValue","useTransition","useOpaqueIdentifier","unstable_isNewReconciler","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","commitTime","profilerStartTime","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","transferActualDuration","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","didWarnAboutDefaultPropsOnFunctionComponent","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","innerPropTypes","bailoutOnAlreadyFinishedWork","updateMemoComponent","updateLanes","isSimpleFunctionComponent","compare","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","prevProps","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","baseLanes","pushRenderLanes","nextBaseLanes","prevBaseLanes","markSpawnedWork","subtreeRenderLanes","updateLegacyHiddenComponent","updateMode","updateProfiler","effectDuration","passiveEffectDuration","markRef","updateClassComponent","hasContext","isLegacyContextProvider","pushLegacyContextProvider","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","resetHydrationState","hydrate","updateHostComponent","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","mountIncompleteClassComponent","mountIndeterminateComponent","ownerName","warningKey","_debugID","debugSource","fileName","lineNumber","SUSPENDED_MARKER","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseContext","suspenseState","getRemainingWorkInPrimaryTree","updateSuspenseComponent","shouldSuspend","showFallback","nextPrimaryChildren","nextFallbackChildren","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","unstable_expectedLoadTime","mountSuspensePrimaryChildren","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","createFiberFromOffscreen","fallbackChildren","progressedPrimaryFragment","treeBaseDuration","createWorkInProgressOffscreenFiber","offscreenProps","currentPrimaryChildFragment","currentFallbackChildFragment","progressedLastEffect","scheduleWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","toLowerCase","validateTailOptions","tailMode","validateSuspenseListNestedChild","childSlot","isIterable","validateSuspenseListChildren","childrenIterator","initSuspenseListRenderState","isBackwards","tail","lastEffectBeforeRendering","renderState","renderingStartTime","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","providerType","providerPropTypes","hasLegacyContextChanged","hasWarnedAboutUsingContextAsConsumer","updateContextConsumer","Consumer","unstable_observedBits","updateScopeComponent","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","beginWork","_debugNeedsRemount","hasChildWork","primaryChildLanes","unresolvedProps","getSuspenseFallbackChild","emptyObject","collectScopedNodes","scopedNodes","collectScopedNodesFromChildren","collectFirstScopedNode","collectFirstScopedNodeFromChildren","startingChild","scopedNode","collectNearestContextValues","childContextValues","contextValue","collectNearestChildContextValues","DO_NOT_USE_queryAllNodes","currentFiber","DO_NOT_USE_queryFirstNode","containsNode","getChildContextValues","createScopeInstance","markUpdate","appendAllChildren","updateHostContainer","needsVisibilityToggle","currentHostContext","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","completeWork","popLegacyContext","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","fiberRoot","wasHydrated","nextDidTimeout","prevDidTimeout","hasInvisibleChildContext","renderDidSuspend","renderDidSuspendDelayIfPossible","enableSuspenseCallback","suspenseCallback","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThennables","getRenderTargetTime","previousSibling","popRenderLanes","prevIsHidden","nextIsHidden","unwindWork","unwindInterruptedWork","interruptedWork","createCapturedValue","ReactFiberErrorDialogWWW","showErrorDialog","boundary","errorInfo","capturedError","componentStack","errorBoundary","logCapturedError","logError","_suppressLogging","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","e","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","componentDidCatch","markFailedErrorBoundaryForHotReloading","markLegacyErrorBoundaryAsFailed","attachPingListener","wakeable","pingCache","threadIDs","ping","pingSuspendedRoot","then","throwException","sourceFiber","rootRenderLanes","currentSource","hasInvisibleParentBoundary","wakeables","currentSourceFiber","renderDidError","isAlreadyFailedLegacyErrorBoundary","ReactFbErrorUtils","invokeGuardedCallback","invokeGuardedCallbackImpl","func","d","f","hasError","caughtError","reporter","onError","hasCaughtError","clearCaughtError","didWarnAboutUndefinedSnapshotBeforeUpdate","PossiblyWeakSet","WeakSet","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","unmountError","captureCommitPhaseError","safelyDetachRef","refError","safelyCallDestroy","commitBeforeMutationLifeCycles","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitHookEffectListMount","schedulePassiveEffects","NoHookEffect","enqueuePendingPassiveHookEffectUnmount","enqueuePendingPassiveHookEffectMount","commitLifeCycles","finishedRoot","committedLanes","commitMount","onCommit","onRender","memoizedInteractions","commitSuspenseHydrationCallbacks","hideOrUnhideAllChildren","commitAttachRef","instanceToUse","enableScopeAPI","commitDetachRef","currentRef","commitUnmount","renderPriorityLevel","unmountHostComponents","hydrationCallbacks","onDeleted","commitNestedUnmounts","detachFiberMutation","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","isContainer","parentStateNode","before","insertOrAppendPlacementNodeIntoContainer","insertOrAppendPlacementNode","isHost","currentParentIsValid","currentParentIsContainer","findParent","commitDeletion","commitWork","commitSuspenseComponent","attachSuspenseRetryListeners","markCommitTimeOfFallback","primaryChildParent","retryCache","retry","resolveRetryWakeable","__reactDoNotTraceInteractions","Schedule_tracing_wrap","isSuspenseBoundaryBeingHidden","commitResetTextContent","COMPONENT_TYPE","HAS_PSEUDO_CLASS_TYPE","ROLE_TYPE","TEST_NAME_TYPE","TEXT_TYPE","didWarnAboutMessageChannel","enqueueTaskImpl","enqueueTask","task","requireString","random","nodeRequire","module","setImmediate","_err","MessageChannel","channel","port1","onmessage","port2","postMessage","ceil","IsSomeRendererActing","NoContext","BatchedContext","DiscreteEventContext","LegacyUnbatchedContext","RenderContext","CommitContext","RetryAfterError","RootIncomplete","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootUpdatedLanes","workInProgressRootPingedLanes","mostRecentlyUpdatedRoot","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsRenderPriority","pendingPassiveEffectsLanes","pendingPassiveHookEffectsMount","pendingPassiveHookEffectsUnmount","rootsWithPendingDiscreteUpdates","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","spawnedWorkDuringRender","currentEventTime","currentEventWipLanes","currentEventPendingLanes","isFlushingPassiveEffects","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","isTransition","schedulerPriority","schedulerLanePriority","requestRetryLane","checkForNestedUpdates","warnAboutRenderPhaseUpdatesInDEV","markUpdateLaneFromFiberToRoot","warnAboutUpdateOnUnmountedFiberInDEV","schedulePendingInteractions","performSyncWorkOnRoot","ensureRootIsScheduled","warnAboutUpdateOnNotYetMountedFiberInDEV","existingCallbackNode","newCallbackPriority","callbackPriority","existingCallbackPriority","newCallbackNode","performConcurrentWorkOnRoot","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","exitStatus","renderRootConcurrent","prepareFreshStack","renderRootSync","fatalError","finishedLanes","finishConcurrentRender","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","markRootSuspended_dontCallThisOneDirectly","batchedUpdates","prevExecutionContext","flushSync","pushToStack","popFromStack","handleError","thrownValue","erroredWork","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","popDispatcher","pushInteractions","prevInteractions","popInteractions","startWorkOnPendingInteractions","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","completedWork","resetChildLanes","siblingFiber","newChildLanes","shouldBubbleActualDurations","isTimedOutSuspense","commitRootImpl","flushRenderPhaseStrictModeWarningsInDEV","commitBeforeMutationEffects","commitMutationEffects","commitLayoutEffects","rootDidHavePassiveEffects","nextNextEffect","detachFiberAfterEffects","scheduleInteractions","finishPendingInteractions","onCommitRootDevTools","beforeActiveInstanceBlur","commitBeforeMutationEffectOnFiber","primaryFlags","commitLayoutEffectOnFiber","flushPassiveEffectsImpl","invokePassiveEffectCreate","unmountEffects","mountEffects","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","errorToIgnore","retryTimedOutBoundary","boundaryFiber","timeElapsed","didWarnStateUpdateForNotYetMountedComponent","previousFiber","ReactCurrentFiberCurrent","didWarnStateUpdateForUnmountedComponent","originalBeginWork","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","ReactCurrentDebugFiberIsRenderingInDEV","renderingComponentName","dedupeKey","setStateComponentName","IsThisRendererActing","warnsIfNotActing","warnIfNotCurrentlyActingUpdatesInDEV","didWarnAboutUnmockedScheduler","warnIfUnmockedScheduler","computeThreadID","interactionThreadID","interactions","pendingInteractionMap","pendingInteractions","interaction","__count","subscriber","__subscriberRef","threadID","onWorkScheduled","scheduledInteractions","scheduledLane","onWorkStarted","remainingLanesAfterCommit","onWorkStopped","onInteractionScheduledWorkCompleted","actingUpdatesScopeDepth","flushMockScheduler","isSchedulerMocked","flushActWork","isFlushingAct","didFlushWork","flushWorkAndMicroTasks","onDone","act","previousActingUpdatesScopeDepth","previousIsSomeRendererActing","previousIsThisRendererActing","isInsideThisAct","result","called","Promise","resolve","reject","resolveFamily","failedBoundaries","setRefreshHandler","handler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","findHostInstancesForRefresh","families","hostInstances","types","map","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","debugCounter","FiberNode","Number","NaN","createFiber","currentDependencies","createHostRootFiber","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromLegacyHidden","createFiberFromScope","elements","scope","content","pendingChildren","FiberRootNode","unstable_getThreadID","_debugRootType","createFiberRoot","uninitializedFiber","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","createContainer","ReactCurrentFiberIsRendering","getPublicRootInstance","containerFiber","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setSuspenseHandler","copyWithDeleteImpl","obj","path","updated","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldSuspendImpl","findHostInstanceByFiber","hostFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","getCurrentFiber","defaultTestOptions","toJSON","renderedChildren","renderedChild","json","childrenToTree","nodeAndSiblingsArray","toTree","flatten","nodeWithSibling","arr","n","el","nodeType","rendered","validWrapperTypes","getChildren","startingNode","outer","descend","wrapFiber","ReactTestInstance","_currentFiber","_fiber","find","predicate","expectOne","findAll","deep","findByType","findAllByType","findByProps","findAllByProps","JSON","stringify","propsMatch","results","all","filter","isConcurrent","unstable_isConcurrent","entry","_Scheduler","newElement","unmount","unstable_flushSync","fiberToWrapper","wrapper","ReactVersion","unstable_concurrentAct","unwind","thenable","runOnlyPendingTimers"],"mappings":"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"}