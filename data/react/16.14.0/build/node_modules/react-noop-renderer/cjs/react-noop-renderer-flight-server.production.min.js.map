{"version":3,"file":"react-noop-renderer-flight-server.production.min.js","sources":["../../../../packages/react-noop-renderer/src/ReactNoopFlightServer.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * This is a renderer of React that doesn't have a render target output.\n * It is useful to demonstrate the internals of the reconciler in isolation\n * and for testing semantics of reconciliation separate from the host\n * environment.\n */\n\nimport type {ReactModel} from 'react-server/src/ReactFlightServer';\n\nimport {saveModule} from 'react-noop-renderer/flight-modules';\n\nimport ReactFlightServer from 'react-server/flight';\n\ntype Destination = Array<string>;\n\nconst ReactNoopFlightServer = ReactFlightServer({\n  scheduleWork(callback: () => void) {\n    callback();\n  },\n  beginWriting(destination: Destination): void {},\n  writeChunk(destination: Destination, buffer: Uint8Array): void {\n    destination.push(Buffer.from((buffer: any)).toString('utf8'));\n  },\n  completeWriting(destination: Destination): void {},\n  close(destination: Destination): void {},\n  flushBuffered(destination: Destination): void {},\n  convertStringToBuffer(content: string): Uint8Array {\n    return Buffer.from(content, 'utf8');\n  },\n  formatChunkAsString(type: string, props: Object): string {\n    return JSON.stringify({type, props});\n  },\n  formatChunk(type: string, props: Object): Uint8Array {\n    return Buffer.from(JSON.stringify({type, props}), 'utf8');\n  },\n  resolveModuleMetaData(config: void, renderFn: Function) {\n    return saveModule(renderFn);\n  },\n});\n\nfunction render(model: ReactModel): Destination {\n  const destination: Destination = [];\n  const bundlerConfig = undefined;\n  const request = ReactNoopFlightServer.createRequest(\n    model,\n    destination,\n    bundlerConfig,\n  );\n  ReactNoopFlightServer.startWork(request);\n  return destination;\n}\n\nexport {render};\n"],"names":["ReactNoopFlightServer","ReactFlightServer","scheduleWork","callback","beginWriting","destination","writeChunk","buffer","push","Buffer","from","toString","completeWriting","close","flushBuffered","convertStringToBuffer","content","formatChunkAsString","type","props","JSON","stringify","formatChunk","resolveModuleMetaData","config","renderFn","saveModule","render","model","bundlerConfig","undefined","request","createRequest","startWork"],"mappings":";;;;;AASA;;;;;;AAeA,MAAMA,qBAAqB,GAAGC,iBAAiB,CAAC;AAC9CC,EAAAA,YAAY,CAACC,QAAD,EAAuB;AACjCA,IAAAA,QAAQ;AACT,GAH6C;;AAI9CC,EAAAA,YAAY,CAACC,WAAD,EAAiC,EAJC;;AAK9CC,EAAAA,UAAU,CAACD,WAAD,EAA2BE,MAA3B,EAAqD;AAC7DF,IAAAA,WAAW,CAACG,IAAZ,CAAiBC,MAAM,CAACC,IAAP,CAAaH,MAAb,EAA2BI,QAA3B,CAAoC,MAApC,CAAjB;AACD,GAP6C;;AAQ9CC,EAAAA,eAAe,CAACP,WAAD,EAAiC,EARF;;AAS9CQ,EAAAA,KAAK,CAACR,WAAD,EAAiC,EATQ;;AAU9CS,EAAAA,aAAa,CAACT,WAAD,EAAiC,EAVA;;AAW9CU,EAAAA,qBAAqB,CAACC,OAAD,EAA8B;AACjD,WAAOP,MAAM,CAACC,IAAP,CAAYM,OAAZ,EAAqB,MAArB,CAAP;AACD,GAb6C;;AAc9CC,EAAAA,mBAAmB,CAACC,IAAD,EAAeC,KAAf,EAAsC;AACvD,WAAOC,IAAI,CAACC,SAAL,CAAe;AAACH,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAf,CAAP;AACD,GAhB6C;;AAiB9CG,EAAAA,WAAW,CAACJ,IAAD,EAAeC,KAAf,EAA0C;AACnD,WAAOV,MAAM,CAACC,IAAP,CAAYU,IAAI,CAACC,SAAL,CAAe;AAACH,MAAAA,IAAD;AAAOC,MAAAA;AAAP,KAAf,CAAZ,EAA2C,MAA3C,CAAP;AACD,GAnB6C;;AAoB9CI,EAAAA,qBAAqB,CAACC,MAAD,EAAeC,QAAf,EAAmC;AACtD,WAAOC,wBAAU,CAACD,QAAD,CAAjB;AACD;;AAtB6C,CAAD,CAA/C;;AAyBA,SAASE,MAAT,CAAgBC,KAAhB,EAAgD;AAC9C,QAAMvB,WAAwB,GAAG,EAAjC;AACA,QAAMwB,aAAa,GAAGC,SAAtB;AACA,QAAMC,OAAO,GAAG/B,qBAAqB,CAACgC,aAAtB,CACdJ,KADc,EAEdvB,WAFc,EAGdwB,aAHc,CAAhB;AAKA7B,EAAAA,qBAAqB,CAACiC,SAAtB,CAAgCF,OAAhC;AACA,SAAO1B,WAAP;AACD;;;;"}