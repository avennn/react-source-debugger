{"version":3,"file":"react-test-renderer.production.min.js","sources":["../../../../packages/shared/formatProdErrorMessage.js","../../../../packages/shared/forks/object-assign.umd.js","../../../../packages/react-reconciler/src/ReactWorkTags.js","../../../../packages/shared/ReactInstanceMap.js","../../../../packages/shared/ReactSharedInternals.js","../../../../packages/shared/ReactSymbols.js","../../../../packages/shared/getComponentName.js","../../../../packages/react-reconciler/src/ReactFiberFlags.js","../../../../packages/shared/forks/ReactFeatureFlags.test-renderer.js","../../../../packages/react-reconciler/src/ReactFiberTreeReflection.js","../../../../packages/react-reconciler/src/ReactFiberHostConfigWithNoHydration.js","../../../../packages/react-test-renderer/src/ReactTestHostConfig.js","../../../../packages/shared/ReactComponentStackFrame.js","../../../../packages/shared/checkPropTypes.js","../../../../packages/react-reconciler/src/ReactFiberStack.old.js","../../../../packages/react-reconciler/src/ReactFiberContext.old.js","../../../../packages/react-reconciler/src/ReactRootTags.js","../../../../packages/react-reconciler/src/ReactFiberDevToolsHook.old.js","../../../../packages/shared/forks/SchedulerTracing.umd.js","../../../../packages/react-reconciler/src/SchedulerWithReactIntegration.new.js","../../../../packages/react-reconciler/src/ReactFiberLane.js","../../../../packages/react-reconciler/src/SchedulerWithReactIntegration.old.js","../../../../packages/shared/ReactVersion.js","../../../../packages/react-reconciler/src/ReactTypeOfMode.js","../../../../packages/react-reconciler/src/ReactFiberTransition.js","../../../../packages/shared/objectIs.js","../../../../packages/shared/shallowEqual.js","../../../../packages/react-reconciler/src/ReactFiberComponentStack.js","../../../../packages/react-reconciler/src/ReactCurrentFiber.js","../../../../packages/react-reconciler/src/ReactFiberLazyComponent.old.js","../../../../packages/react-reconciler/src/MaxInts.js","../../../../packages/react-reconciler/src/ReactFiberNewContext.old.js","../../../../packages/react-reconciler/src/ReactUpdateQueue.old.js","../../../../packages/react-reconciler/src/ReactFiberClassComponent.old.js","../../../../packages/react-reconciler/src/ReactChildFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberHostContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseContext.old.js","../../../../packages/react-reconciler/src/ReactFiberSuspenseComponent.old.js","../../../../packages/react-reconciler/src/ReactHookEffectTags.js","../../../../packages/react-reconciler/src/ReactFiberHydrationContext.old.js","../../../../packages/react-reconciler/src/ReactMutableSource.old.js","../../../../packages/react-reconciler/src/ReactFiberHooks.old.js","../../../../packages/react-reconciler/src/ReactProfilerTimer.old.js","../../../../packages/react-reconciler/src/ReactFiberBeginWork.old.js","../../../../packages/react-reconciler/src/ReactFiberCompleteWork.old.js","../../../../packages/react-reconciler/src/ReactFiberUnwindWork.old.js","../../../../packages/react-reconciler/src/ReactCapturedValue.js","../../../../packages/react-reconciler/src/ReactFiberErrorDialog.js","../../../../packages/react-reconciler/src/ReactFiberErrorLogger.js","../../../../packages/react-reconciler/src/ReactFiberThrow.old.js","../../../../packages/react-reconciler/src/ReactFiberCommitWork.old.js","../../../../packages/shared/enqueueTask.js","../../../../packages/react-reconciler/src/ReactFiberWorkLoop.old.js","../../../../packages/react-reconciler/src/ReactFiber.old.js","../../../../packages/react-reconciler/src/ReactFiberRoot.old.js","../../../../packages/react-reconciler/src/ReactFiberReconciler.old.js","../../../../packages/react-test-renderer/src/ReactTestRenderer.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// Do not require this module directly! Use normal `invariant` calls with\n// template literal strings. The messages will be replaced with error codes\n// during build.\n\nfunction formatProdErrorMessage(code) {\n  let url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\n  for (let i = 1; i < arguments.length; i++) {\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\n  }\n  return (\n    `Minified React error #${code}; visit ${url} for the full message or ` +\n    'use the non-minified dev environment for full errors and additional ' +\n    'helpful warnings.'\n  );\n}\n\nexport default formatProdErrorMessage;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactInternals.assign;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type WorkTag =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17\n  | 18\n  | 19\n  | 20\n  | 21\n  | 22\n  | 23\n  | 24;\n\nexport const FunctionComponent = 0;\nexport const ClassComponent = 1;\nexport const IndeterminateComponent = 2; // Before we know whether it is function or class\nexport const HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nexport const HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nexport const HostComponent = 5;\nexport const HostText = 6;\nexport const Fragment = 7;\nexport const Mode = 8;\nexport const ContextConsumer = 9;\nexport const ContextProvider = 10;\nexport const ForwardRef = 11;\nexport const Profiler = 12;\nexport const SuspenseComponent = 13;\nexport const MemoComponent = 14;\nexport const SimpleMemoComponent = 15;\nexport const LazyComponent = 16;\nexport const IncompleteClassComponent = 17;\nexport const DehydratedFragment = 18;\nexport const SuspenseListComponent = 19;\nexport const FundamentalComponent = 20;\nexport const ScopeComponent = 21;\nexport const Block = 22;\nexport const OffscreenComponent = 23;\nexport const LegacyHiddenComponent = 24;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nexport function remove(key) {\n  key._reactInternals = undefined;\n}\n\nexport function get(key) {\n  return key._reactInternals;\n}\n\nexport function has(key) {\n  return key._reactInternals !== undefined;\n}\n\nexport function set(key, value) {\n  key._reactInternals = value;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactSharedInternals =\n  React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nexport default ReactSharedInternals;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nexport let REACT_ELEMENT_TYPE = 0xeac7;\nexport let REACT_PORTAL_TYPE = 0xeaca;\nexport let REACT_FRAGMENT_TYPE = 0xeacb;\nexport let REACT_STRICT_MODE_TYPE = 0xeacc;\nexport let REACT_PROFILER_TYPE = 0xead2;\nexport let REACT_PROVIDER_TYPE = 0xeacd;\nexport let REACT_CONTEXT_TYPE = 0xeace;\nexport let REACT_FORWARD_REF_TYPE = 0xead0;\nexport let REACT_SUSPENSE_TYPE = 0xead1;\nexport let REACT_SUSPENSE_LIST_TYPE = 0xead8;\nexport let REACT_MEMO_TYPE = 0xead3;\nexport let REACT_LAZY_TYPE = 0xead4;\nexport let REACT_BLOCK_TYPE = 0xead9;\nexport let REACT_SERVER_BLOCK_TYPE = 0xeada;\nexport let REACT_FUNDAMENTAL_TYPE = 0xead5;\nexport let REACT_SCOPE_TYPE = 0xead7;\nexport let REACT_OPAQUE_ID_TYPE = 0xeae0;\nexport let REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nexport let REACT_OFFSCREEN_TYPE = 0xeae2;\nexport let REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  const symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nconst MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nconst FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nexport function getIteratorFn(maybeIterable: ?any): ?() => ?Iterator<*> {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n  const maybeIterator =\n    (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n    maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {\n  REACT_CONTEXT_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_BLOCK_TYPE,\n} from 'shared/ReactSymbols';\nimport type {ReactContext, ReactProviderType} from 'shared/ReactTypes';\n\nfunction getWrappedName(\n  outerType: mixed,\n  innerType: any,\n  wrapperName: string,\n): string {\n  const functionName = innerType.displayName || innerType.name || '';\n  return (\n    (outerType: any).displayName ||\n    (functionName !== '' ? `${wrapperName}(${functionName})` : wrapperName)\n  );\n}\n\nfunction getContextName(type: ReactContext<any>) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type: mixed): string | null {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n  if (__DEV__) {\n    if (typeof (type: any).tag === 'number') {\n      console.error(\n        'Received an unexpected object in getComponentName(). ' +\n          'This is likely a bug in React. Please file an issue.',\n      );\n    }\n  }\n  if (typeof type === 'function') {\n    return (type: any).displayName || type.name || null;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        const context: ReactContext<any> = (type: any);\n        return getContextName(context) + '.Consumer';\n      case REACT_PROVIDER_TYPE:\n        const provider: ReactProviderType<any> = (type: any);\n        return getContextName(provider._context) + '.Provider';\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          return getComponentName(init(payload));\n        } catch (x) {\n          return null;\n        }\n      }\n    }\n  }\n  return null;\n}\n\nexport default getComponentName;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type Flags = number;\n\n// Don't change these two values. They're used by React Dev Tools.\nexport const NoFlags = /*                      */ 0b000000000000000000;\nexport const PerformedWork = /*                */ 0b000000000000000001;\n\n// You can change the rest (and add more).\nexport const Placement = /*                    */ 0b000000000000000010;\nexport const Update = /*                       */ 0b000000000000000100;\nexport const PlacementAndUpdate = /*           */ 0b000000000000000110;\nexport const Deletion = /*                     */ 0b000000000000001000;\nexport const ContentReset = /*                 */ 0b000000000000010000;\nexport const Callback = /*                     */ 0b000000000000100000;\nexport const DidCapture = /*                   */ 0b000000000001000000;\nexport const Ref = /*                          */ 0b000000000010000000;\nexport const Snapshot = /*                     */ 0b000000000100000000;\nexport const Passive = /*                      */ 0b000000001000000000;\n// TODO (effects) Remove this bit once the new reconciler is synced to the old.\nexport const PassiveUnmountPendingDev = /*     */ 0b000010000000000000;\nexport const Hydrating = /*                    */ 0b000000010000000000;\nexport const HydratingAndUpdate = /*           */ 0b000000010000000100;\n\n// Passive & Update & Callback & Ref & Snapshot\nexport const LifecycleEffectMask = /*          */ 0b000000001110100100;\n\n// Union of all host effects\nexport const HostEffectMask = /*               */ 0b000000011111111111;\n\n// These are not really side effects, but we still reuse this field.\nexport const Incomplete = /*                   */ 0b000000100000000000;\nexport const ShouldCapture = /*                */ 0b000001000000000000;\nexport const ForceUpdateForLegacySuspense = /* */ 0b000100000000000000;\n\n// Static tags describe aspects of a fiber that are not specific to a render,\n// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n// This enables us to defer more work in the unmount case,\n// since we can defer traversing the tree during layout to look for Passive effects,\n// and instead rely on the static flag as a signal that there may be cleanup work.\nexport const PassiveStatic = /*                */ 0b001000000000000000;\n\n// Union of side effect groupings as pertains to subtreeFlags\nexport const BeforeMutationMask = /*           */ 0b000000001100001010;\nexport const MutationMask = /*                 */ 0b000000010010011110;\nexport const LayoutMask = /*                   */ 0b000000000010100100;\nexport const PassiveMask = /*                  */ 0b000000001000001000;\n\n// Union of tags that don't get reset on clones.\n// This allows certain concepts to persist without recalculting them,\n// e.g. whether a subtree contains passive effects or portals.\nexport const StaticMask = /*                   */ 0b001000000000000000;\n\n// These flags allow us to traverse to fibers that have effects on mount\n// without traversing the entire tree after every commit for\n// double invoking\nexport const MountLayoutDev = /*               */ 0b010000000000000000;\nexport const MountPassiveDev = /*              */ 0b100000000000000000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport typeof * as FeatureFlagsType from 'shared/ReactFeatureFlags';\nimport typeof * as ExportsType from './ReactFeatureFlags.test-renderer';\n\nexport const debugRenderPhaseSideEffectsForStrictMode = false;\nexport const enableDebugTracing = false;\nexport const enableSchedulingProfiler = false;\nexport const warnAboutDeprecatedLifecycles = true;\nexport const replayFailedUnitOfWorkWithInvokeGuardedCallback = false;\nexport const enableProfilerTimer = __PROFILE__;\nexport const enableProfilerCommitHooks = false;\nexport const enableSchedulerTracing = __PROFILE__;\nexport const enableSuspenseServerRenderer = false;\nexport const enableSelectiveHydration = false;\nexport const enableBlocksAPI = false;\nexport const enableLazyElements = false;\nexport const disableJavaScriptURLs = false;\nexport const disableInputAttributeSyncing = false;\nexport const enableSchedulerDebugging = false;\nexport const enableFundamentalAPI = false;\nexport const enableScopeAPI = false;\nexport const enableCreateEventHandleAPI = false;\nexport const warnAboutUnmockedScheduler = false;\nexport const enableSuspenseCallback = false;\nexport const warnAboutDefaultPropsOnFunctionComponents = false;\nexport const warnAboutStringRefs = false;\nexport const disableLegacyContext = false;\nexport const disableSchedulerTimeoutBasedOnReactExpirationTime = false;\nexport const enableTrustedTypesIntegration = false;\nexport const disableTextareaChildren = false;\nexport const disableModulePatternComponents = false;\nexport const warnUnstableRenderSubtreeIntoContainer = false;\nexport const warnAboutSpreadingKeyToJSX = false;\nexport const enableComponentStackLocations = true;\nexport const enableLegacyFBSupport = false;\nexport const enableFilterEmptyStringAttributesDOM = false;\nexport const skipUnmountedBoundaries = false;\n\nexport const enableNewReconciler = false;\nexport const deferRenderPhaseUpdateToNextBatch = true;\nexport const decoupleUpdatePriorityFromScheduler = false;\nexport const enableDiscreteEventFlushingChange = false;\n\nexport const enableDoubleInvokingEffects = false;\n\n// Flow magic to verify the exports of this file match the original version.\n// eslint-disable-next-line no-unused-vars\ntype Check<_X, Y: _X, X: Y = _X> = null;\n// eslint-disable-next-line no-unused-expressions\n(null: Check<ExportsType, FeatureFlagsType>);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Container, SuspenseInstance} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport invariant from 'shared/invariant';\n\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport getComponentName from 'shared/getComponentName';\nimport {\n  ClassComponent,\n  HostComponent,\n  HostRoot,\n  HostPortal,\n  HostText,\n  FundamentalComponent,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {NoFlags, Placement, Hydrating} from './ReactFiberFlags';\nimport {enableFundamentalAPI} from 'shared/ReactFeatureFlags';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nexport function getNearestMountedFiber(fiber: Fiber): null | Fiber {\n  let node = fiber;\n  let nearestMounted = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    let nextNode = node;\n    do {\n      node = nextNode;\n      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {\n        // This is an insertion or in-progress hydration. The nearest possible\n        // mounted fiber is the parent but we need to continue to figure out\n        // if that one is still mounted.\n        nearestMounted = node.return;\n      }\n      nextNode = node.return;\n    } while (nextNode);\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return nearestMounted;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return null;\n}\n\nexport function getSuspenseInstanceFromFiber(\n  fiber: Fiber,\n): null | SuspenseInstance {\n  if (fiber.tag === SuspenseComponent) {\n    let suspenseState: SuspenseState | null = fiber.memoizedState;\n    if (suspenseState === null) {\n      const current = fiber.alternate;\n      if (current !== null) {\n        suspenseState = current.memoizedState;\n      }\n    }\n    if (suspenseState !== null) {\n      return suspenseState.dehydrated;\n    }\n  }\n  return null;\n}\n\nexport function getContainerFromFiber(fiber: Fiber): null | Container {\n  return fiber.tag === HostRoot\n    ? (fiber.stateNode.containerInfo: Container)\n    : null;\n}\n\nexport function isFiberMounted(fiber: Fiber): boolean {\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nexport function isMounted(component: React$Component<any, any>): boolean {\n  if (__DEV__) {\n    const owner = (ReactCurrentOwner.current: any);\n    if (owner !== null && owner.tag === ClassComponent) {\n      const ownerFiber: Fiber = owner;\n      const instance = ownerFiber.stateNode;\n      if (!instance._warnedAboutRefsInRender) {\n        console.error(\n          '%s is accessing isMounted inside its render() function. ' +\n            'render() should be a pure function of props and state. It should ' +\n            'never access something that requires stale data from the previous ' +\n            'render, such as refs. Move this logic to componentDidMount and ' +\n            'componentDidUpdate instead.',\n          getComponentName(ownerFiber.type) || 'A component',\n        );\n      }\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  const fiber: ?Fiber = getInstance(component);\n  if (!fiber) {\n    return false;\n  }\n  return getNearestMountedFiber(fiber) === fiber;\n}\n\nfunction assertIsMounted(fiber) {\n  invariant(\n    getNearestMountedFiber(fiber) === fiber,\n    'Unable to find node on an unmounted component.',\n  );\n}\n\nexport function findCurrentFiberUsingSlowPath(fiber: Fiber): Fiber | null {\n  const alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    const nearestMounted = getNearestMountedFiber(fiber);\n    invariant(\n      nearestMounted !== null,\n      'Unable to find node on an unmounted component.',\n    );\n    if (nearestMounted !== fiber) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  let a: Fiber = fiber;\n  let b: Fiber = alternate;\n  while (true) {\n    const parentA = a.return;\n    if (parentA === null) {\n      // We're at the root.\n      break;\n    }\n    const parentB = parentA.alternate;\n    if (parentB === null) {\n      // There is no alternate. This is an unusual case. Currently, it only\n      // happens when a Suspense component is hidden. An extra fragment fiber\n      // is inserted in between the Suspense fiber and its children. Skip\n      // over this extra fragment fiber and proceed to the next parent.\n      const nextParent = parentA.return;\n      if (nextParent !== null) {\n        a = b = nextParent;\n        continue;\n      }\n      // If there's no parent, we're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      invariant(false, 'Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      let didFindChild = false;\n      let child = parentA.child;\n      while (child) {\n        if (child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        child = child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        child = parentB.child;\n        while (child) {\n          if (child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          child = child.sibling;\n        }\n        invariant(\n          didFindChild,\n          'Child was not found in either parent set. This indicates a bug ' +\n            'in React related to the return pointer. Please file an issue.',\n        );\n      }\n    }\n\n    invariant(\n      a.alternate === b,\n      \"Return fibers should always be each others' alternates. \" +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  invariant(\n    a.tag === HostRoot,\n    'Unable to find node on an unmounted component.',\n  );\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nexport function findCurrentHostFiber(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  let node: Fiber = currentParent;\n  while (true) {\n    if (node.tag === HostComponent || node.tag === HostText) {\n      return node;\n    } else if (node.child) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nexport function findCurrentHostFiberWithNoPortals(parent: Fiber): Fiber | null {\n  const currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  let node: Fiber = currentParent;\n  while (true) {\n    if (\n      node.tag === HostComponent ||\n      node.tag === HostText ||\n      (enableFundamentalAPI && node.tag === FundamentalComponent)\n    ) {\n      return node;\n    } else if (node.child && node.tag !== HostPortal) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nexport function isFiberSuspenseAndTimedOut(fiber: Fiber): boolean {\n  const memoizedState = fiber.memoizedState;\n  return (\n    fiber.tag === SuspenseComponent &&\n    memoizedState !== null &&\n    memoizedState.dehydrated === null\n  );\n}\n\nexport function doesFiberContain(\n  parentFiber: Fiber,\n  childFiber: Fiber,\n): boolean {\n  let node = childFiber;\n  const parentFiberAlternate = parentFiber.alternate;\n  while (node !== null) {\n    if (node === parentFiber || node === parentFiberAlternate) {\n      return true;\n    }\n    node = node.return;\n  }\n  return false;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport invariant from 'shared/invariant';\n\n// Renderers that don't support hydration\n// can re-export everything from this module.\n\nfunction shim(...args: any) {\n  invariant(\n    false,\n    'The current renderer does not support hydration. ' +\n      'This error is likely caused by a bug in React. ' +\n      'Please file an issue.',\n  );\n}\n\n// Hydration (when unsupported)\nexport type SuspenseInstance = mixed;\nexport const supportsHydration = false;\nexport const canHydrateInstance = shim;\nexport const canHydrateTextInstance = shim;\nexport const canHydrateSuspenseInstance = shim;\nexport const isSuspenseInstancePending = shim;\nexport const isSuspenseInstanceFallback = shim;\nexport const registerSuspenseInstanceRetry = shim;\nexport const getNextHydratableSibling = shim;\nexport const getFirstHydratableChild = shim;\nexport const hydrateInstance = shim;\nexport const hydrateTextInstance = shim;\nexport const hydrateSuspenseInstance = shim;\nexport const getNextHydratableInstanceAfterSuspenseInstance = shim;\nexport const commitHydratedContainer = shim;\nexport const commitHydratedSuspenseInstance = shim;\nexport const clearSuspenseBoundary = shim;\nexport const clearSuspenseBoundaryFromContainer = shim;\nexport const didNotMatchHydratedContainerTextInstance = shim;\nexport const didNotMatchHydratedTextInstance = shim;\nexport const didNotHydrateContainerInstance = shim;\nexport const didNotHydrateInstance = shim;\nexport const didNotFindHydratableContainerInstance = shim;\nexport const didNotFindHydratableContainerTextInstance = shim;\nexport const didNotFindHydratableContainerSuspenseInstance = shim;\nexport const didNotFindHydratableInstance = shim;\nexport const didNotFindHydratableTextInstance = shim;\nexport const didNotFindHydratableSuspenseInstance = shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactFundamentalComponentInstance} from 'shared/ReactTypes';\n\nimport {REACT_OPAQUE_ID_TYPE} from 'shared/ReactSymbols';\n\nexport type Type = string;\nexport type Props = Object;\nexport type Container = {|\n  children: Array<Instance | TextInstance>,\n  createNodeMock: Function,\n  tag: 'CONTAINER',\n|};\nexport type Instance = {|\n  type: string,\n  props: Object,\n  isHidden: boolean,\n  children: Array<Instance | TextInstance>,\n  internalInstanceHandle: Object,\n  rootContainerInstance: Container,\n  tag: 'INSTANCE',\n|};\nexport type TextInstance = {|\n  text: string,\n  isHidden: boolean,\n  tag: 'TEXT',\n|};\nexport type HydratableInstance = Instance | TextInstance;\nexport type PublicInstance = Instance | TextInstance;\nexport type HostContext = Object;\nexport type UpdatePayload = Object;\nexport type ChildSet = void; // Unused\nexport type TimeoutHandle = TimeoutID;\nexport type NoTimeout = -1;\nexport type EventResponder = any;\nexport opaque type OpaqueIDType =\n  | string\n  | {\n      toString: () => string | void,\n      valueOf: () => string | void,\n    };\n\nexport type RendererInspectionConfig = $ReadOnly<{||}>;\n\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoPersistence';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoHydration';\nexport * from 'react-reconciler/src/ReactFiberHostConfigWithNoTestSelectors';\n\nconst NO_CONTEXT = {};\nconst UPDATE_SIGNAL = {};\nconst nodeToInstanceMap = new WeakMap();\n\nif (__DEV__) {\n  Object.freeze(NO_CONTEXT);\n  Object.freeze(UPDATE_SIGNAL);\n}\n\nexport function getPublicInstance(inst: Instance | TextInstance): * {\n  switch (inst.tag) {\n    case 'INSTANCE':\n      const createNodeMock = inst.rootContainerInstance.createNodeMock;\n      const mockNode = createNodeMock({\n        type: inst.type,\n        props: inst.props,\n      });\n      if (typeof mockNode === 'object' && mockNode !== null) {\n        nodeToInstanceMap.set(mockNode, inst);\n      }\n      return mockNode;\n    default:\n      return inst;\n  }\n}\n\nexport function appendChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  if (__DEV__) {\n    if (!Array.isArray(parentInstance.children)) {\n      console.error(\n        'An invalid container has been provided. ' +\n          'This may indicate that another renderer is being used in addition to the test renderer. ' +\n          '(For example, ReactDOM.createPortal inside of a ReactTestRenderer tree.) ' +\n          'This is not supported.',\n      );\n    }\n  }\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function insertBefore(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n  beforeChild: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  const beforeIndex = parentInstance.children.indexOf(beforeChild);\n  parentInstance.children.splice(beforeIndex, 0, child);\n}\n\nexport function removeChild(\n  parentInstance: Instance | Container,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  parentInstance.children.splice(index, 1);\n}\n\nexport function clearContainer(container: Container): void {\n  container.children.splice(0);\n}\n\nexport function getRootHostContext(\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function getChildHostContext(\n  parentHostContext: HostContext,\n  type: string,\n  rootContainerInstance: Container,\n): HostContext {\n  return NO_CONTEXT;\n}\n\nexport function prepareForCommit(containerInfo: Container): null | Object {\n  // noop\n  return null;\n}\n\nexport function resetAfterCommit(containerInfo: Container): void {\n  // noop\n}\n\nexport function createInstance(\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): Instance {\n  return {\n    type,\n    props,\n    isHidden: false,\n    children: [],\n    internalInstanceHandle,\n    rootContainerInstance,\n    tag: 'INSTANCE',\n  };\n}\n\nexport function appendInitialChild(\n  parentInstance: Instance,\n  child: Instance | TextInstance,\n): void {\n  const index = parentInstance.children.indexOf(child);\n  if (index !== -1) {\n    parentInstance.children.splice(index, 1);\n  }\n  parentInstance.children.push(child);\n}\n\nexport function finalizeInitialChildren(\n  testElement: Instance,\n  type: string,\n  props: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): boolean {\n  return false;\n}\n\nexport function prepareUpdate(\n  testElement: Instance,\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  rootContainerInstance: Container,\n  hostContext: Object,\n): null | {...} {\n  return UPDATE_SIGNAL;\n}\n\nexport function shouldSetTextContent(type: string, props: Props): boolean {\n  return false;\n}\n\nexport function createTextInstance(\n  text: string,\n  rootContainerInstance: Container,\n  hostContext: Object,\n  internalInstanceHandle: Object,\n): TextInstance {\n  return {\n    text,\n    isHidden: false,\n    tag: 'TEXT',\n  };\n}\n\nexport const isPrimaryRenderer = false;\nexport const warnsIfNotActing = true;\n\nexport const scheduleTimeout = setTimeout;\nexport const cancelTimeout = clearTimeout;\nexport const noTimeout = -1;\n\n// -------------------\n//     Mutation\n// -------------------\n\nexport const supportsMutation = true;\n\nexport function commitUpdate(\n  instance: Instance,\n  updatePayload: {...},\n  type: string,\n  oldProps: Props,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  instance.type = type;\n  instance.props = newProps;\n}\n\nexport function commitMount(\n  instance: Instance,\n  type: string,\n  newProps: Props,\n  internalInstanceHandle: Object,\n): void {\n  // noop\n}\n\nexport function commitTextUpdate(\n  textInstance: TextInstance,\n  oldText: string,\n  newText: string,\n): void {\n  textInstance.text = newText;\n}\n\nexport function resetTextContent(testElement: Instance): void {\n  // noop\n}\n\nexport const appendChildToContainer = appendChild;\nexport const insertInContainerBefore = insertBefore;\nexport const removeChildFromContainer = removeChild;\n\nexport function hideInstance(instance: Instance): void {\n  instance.isHidden = true;\n}\n\nexport function hideTextInstance(textInstance: TextInstance): void {\n  textInstance.isHidden = true;\n}\n\nexport function unhideInstance(instance: Instance, props: Props): void {\n  instance.isHidden = false;\n}\n\nexport function unhideTextInstance(\n  textInstance: TextInstance,\n  text: string,\n): void {\n  textInstance.isHidden = false;\n}\n\nexport function getFundamentalComponentInstance(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): Instance {\n  const {impl, props, state} = fundamentalInstance;\n  return impl.getInstance(null, props, state);\n}\n\nexport function mountFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): void {\n  const {impl, instance, props, state} = fundamentalInstance;\n  const onMount = impl.onMount;\n  if (onMount !== undefined) {\n    onMount(null, instance, props, state);\n  }\n}\n\nexport function shouldUpdateFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): boolean {\n  const {impl, prevProps, props, state} = fundamentalInstance;\n  const shouldUpdate = impl.shouldUpdate;\n  if (shouldUpdate !== undefined) {\n    return shouldUpdate(null, prevProps, props, state);\n  }\n  return true;\n}\n\nexport function updateFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): void {\n  const {impl, instance, prevProps, props, state} = fundamentalInstance;\n  const onUpdate = impl.onUpdate;\n  if (onUpdate !== undefined) {\n    onUpdate(null, instance, prevProps, props, state);\n  }\n}\n\nexport function unmountFundamentalComponent(\n  fundamentalInstance: ReactFundamentalComponentInstance<any, any>,\n): void {\n  const {impl, instance, props, state} = fundamentalInstance;\n  const onUnmount = impl.onUnmount;\n  if (onUnmount !== undefined) {\n    onUnmount(null, instance, props, state);\n  }\n}\n\nexport function getInstanceFromNode(mockNode: Object) {\n  const instance = nodeToInstanceMap.get(mockNode);\n  if (instance !== undefined) {\n    return instance.internalInstanceHandle;\n  }\n  return null;\n}\n\nlet clientId: number = 0;\nexport function makeClientId(): OpaqueIDType {\n  return 'c_' + (clientId++).toString(36);\n}\n\nexport function makeClientIdInDEV(warnOnAccessInDEV: () => void): OpaqueIDType {\n  const id = 'c_' + (clientId++).toString(36);\n  return {\n    toString() {\n      warnOnAccessInDEV();\n      return id;\n    },\n    valueOf() {\n      warnOnAccessInDEV();\n      return id;\n    },\n  };\n}\n\nexport function isOpaqueHydratingObject(value: mixed): boolean {\n  return (\n    value !== null &&\n    typeof value === 'object' &&\n    value.$$typeof === REACT_OPAQUE_ID_TYPE\n  );\n}\n\nexport function makeOpaqueHydratingObject(\n  attemptToReadValue: () => void,\n): OpaqueIDType {\n  return {\n    $$typeof: REACT_OPAQUE_ID_TYPE,\n    toString: attemptToReadValue,\n    valueOf: attemptToReadValue,\n  };\n}\n\nexport function beforeActiveInstanceBlur() {\n  // noop\n}\n\nexport function afterActiveInstanceBlur() {\n  // noop\n}\n\nexport function preparePortalMount(portalInstance: Instance): void {\n  // noop\n}\n\nexport function prepareScopeUpdate(scopeInstance: Object, inst: Object): void {\n  nodeToInstanceMap.set(scopeInstance, inst);\n}\n\nexport function getInstanceFromScope(scopeInstance: Object): null | Object {\n  return nodeToInstanceMap.get(scopeInstance) || null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Source} from 'shared/ReactElementType';\nimport type {LazyComponent} from 'react/src/ReactLazy';\n\nimport {enableComponentStackLocations} from 'shared/ReactFeatureFlags';\n\nimport {\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_FORWARD_REF_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_BLOCK_TYPE,\n  REACT_LAZY_TYPE,\n} from 'shared/ReactSymbols';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentDispatcher} = ReactSharedInternals;\n\nlet prefix;\nexport function describeBuiltInComponentFrame(\n  name: string,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        const match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = (match && match[1]) || '';\n      }\n    }\n    // We use the prefix to ensure our stacks line up with native stack frames.\n    return '\\n' + prefix + name;\n  } else {\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nlet reentry = false;\nlet componentFrameCache;\nif (__DEV__) {\n  const PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nexport function describeNativeComponentFrame(\n  fn: Function,\n  construct: boolean,\n): string {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  if (__DEV__) {\n    const frame = componentFrameCache.get(fn);\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  let control;\n\n  reentry = true;\n  const previousPrepareStackTrace = Error.prepareStackTrace;\n  // $FlowFixMe It does accept undefined.\n  Error.prepareStackTrace = undefined;\n  let previousDispatcher;\n  if (__DEV__) {\n    previousDispatcher = ReactCurrentDispatcher.current;\n    // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      const Fake = function() {\n        throw Error();\n      };\n      // $FlowFixMe\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function() {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        },\n      });\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      const sampleLines = sample.stack.split('\\n');\n      const controlLines = control.stack.split('\\n');\n      let s = sampleLines.length - 1;\n      let c = controlLines.length - 1;\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--;\n              // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                const frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n                if (__DEV__) {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, frame);\n                  }\n                }\n                // Return the line we found.\n                return frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n    if (__DEV__) {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  }\n  // Fallback to just using the name if we couldn't make it throw.\n  const name = fn ? fn.displayName || fn.name : '';\n  const syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n  if (__DEV__) {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n  return syntheticFrame;\n}\n\nconst BEFORE_SLASH_RE = /^(.*)[\\\\\\/]/;\n\nfunction describeComponentFrame(\n  name: null | string,\n  source: void | null | Source,\n  ownerName: null | string,\n) {\n  let sourceInfo = '';\n  if (__DEV__ && source) {\n    const path = source.fileName;\n    let fileName = path.replace(BEFORE_SLASH_RE, '');\n    // In DEV, include code for a common special case:\n    // prefer \"folder/index.js\" instead of just \"index.js\".\n    if (/^index\\./.test(fileName)) {\n      const match = path.match(BEFORE_SLASH_RE);\n      if (match) {\n        const pathBeforeSlash = match[1];\n        if (pathBeforeSlash) {\n          const folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');\n          fileName = folderName + '/' + fileName;\n        }\n      }\n    }\n    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';\n  } else if (ownerName) {\n    sourceInfo = ' (created by ' + ownerName + ')';\n  }\n  return '\\n    in ' + (name || 'Unknown') + sourceInfo;\n}\n\nexport function describeClassComponentFrame(\n  ctor: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(ctor, true);\n  } else {\n    return describeFunctionComponentFrame(ctor, source, ownerFn);\n  }\n}\n\nexport function describeFunctionComponentFrame(\n  fn: Function,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (enableComponentStackLocations) {\n    return describeNativeComponentFrame(fn, false);\n  } else {\n    if (!fn) {\n      return '';\n    }\n    const name = fn.displayName || fn.name || null;\n    let ownerName = null;\n    if (__DEV__ && ownerFn) {\n      ownerName = ownerFn.displayName || ownerFn.name || null;\n    }\n    return describeComponentFrame(name, source, ownerName);\n  }\n}\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function describeUnknownElementTypeFrameInDEV(\n  type: any,\n  source: void | null | Source,\n  ownerFn: void | null | Function,\n): string {\n  if (!__DEV__) {\n    return '';\n  }\n  if (type == null) {\n    return '';\n  }\n  if (typeof type === 'function') {\n    if (enableComponentStackLocations) {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    } else {\n      return describeFunctionComponentFrame(type, source, ownerFn);\n    }\n  }\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type, source, ownerFn);\n  }\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense', source, ownerFn);\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList', source, ownerFn);\n  }\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render, source, ownerFn);\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render, source, ownerFn);\n      case REACT_LAZY_TYPE: {\n        const lazyComponent: LazyComponent<any, any> = (type: any);\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          // Lazy may contain any component type so we recursively resolve it.\n          return describeUnknownElementTypeFrameInDEV(\n            init(payload),\n            source,\n            ownerFn,\n          );\n        } catch (x) {}\n      }\n    }\n  }\n  return '';\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nconst loggedTypeFailures = {};\n\nimport {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  if (__DEV__) {\n    if (element) {\n      const owner = element._owner;\n      const stack = describeUnknownElementTypeFrameInDEV(\n        element.type,\n        element._source,\n        owner ? owner.type : null,\n      );\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nexport default function checkPropTypes(\n  typeSpecs: Object,\n  values: Object,\n  location: string,\n  componentName: ?string,\n  element?: any,\n): void {\n  if (__DEV__) {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    const has = Function.call.bind(Object.prototype.hasOwnProperty);\n    for (const typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        let error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            const err = Error(\n              (componentName || 'React class') +\n                ': ' +\n                location +\n                ' type `' +\n                typeSpecName +\n                '` is invalid; ' +\n                'it must be a function, usually from the `prop-types` package, but received `' +\n                typeof typeSpecs[typeSpecName] +\n                '`.' +\n                'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.',\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](\n            values,\n            typeSpecName,\n            componentName,\n            location,\n            null,\n            'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED',\n          );\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n          console.error(\n            '%s: type specification of %s' +\n              ' `%s` is invalid; the type checker ' +\n              'function must return `null` or an `Error` but returned a %s. ' +\n              'You may have forgotten to pass an argument to the type checker ' +\n              'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n              'shape all require an argument).',\n            componentName || 'React class',\n            location,\n            typeSpecName,\n            typeof error,\n          );\n          setCurrentlyValidatingElement(null);\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n          setCurrentlyValidatingElement(element);\n          console.error('Failed %s type: %s', location, error.message);\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nexport type StackCursor<T> = {|current: T|};\n\nconst valueStack: Array<any> = [];\n\nlet fiberStack: Array<Fiber | null>;\n\nif (__DEV__) {\n  fiberStack = [];\n}\n\nlet index = -1;\n\nfunction createCursor<T>(defaultValue: T): StackCursor<T> {\n  return {\n    current: defaultValue,\n  };\n}\n\nfunction isEmpty(): boolean {\n  return index === -1;\n}\n\nfunction pop<T>(cursor: StackCursor<T>, fiber: Fiber): void {\n  if (index < 0) {\n    if (__DEV__) {\n      console.error('Unexpected pop.');\n    }\n    return;\n  }\n\n  if (__DEV__) {\n    if (fiber !== fiberStack[index]) {\n      console.error('Unexpected Fiber popped.');\n    }\n  }\n\n  cursor.current = valueStack[index];\n\n  valueStack[index] = null;\n\n  if (__DEV__) {\n    fiberStack[index] = null;\n  }\n\n  index--;\n}\n\nfunction push<T>(cursor: StackCursor<T>, value: T, fiber: Fiber): void {\n  index++;\n\n  valueStack[index] = cursor.current;\n\n  if (__DEV__) {\n    fiberStack[index] = fiber;\n  }\n\n  cursor.current = value;\n}\n\nfunction checkThatStackIsEmpty() {\n  if (__DEV__) {\n    if (index !== -1) {\n      console.error(\n        'Expected an empty stack. Something was not reset properly.',\n      );\n    }\n  }\n}\n\nfunction resetStackAfterFatalErrorInDev() {\n  if (__DEV__) {\n    index = -1;\n    valueStack.length = 0;\n    fiberStack.length = 0;\n  }\n}\n\nexport {\n  createCursor,\n  isEmpty,\n  pop,\n  push,\n  // DEV only:\n  checkThatStackIsEmpty,\n  resetStackAfterFatalErrorInDev,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {isFiberMounted} from './ReactFiberTreeReflection';\nimport {disableLegacyContext} from 'shared/ReactFeatureFlags';\nimport {ClassComponent, HostRoot} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nlet warnedAboutMissingGetChildContext;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nexport const emptyContextObject = {};\nif (__DEV__) {\n  Object.freeze(emptyContextObject);\n}\n\n// A cursor to the current merged context object on the stack.\nconst contextStackCursor: StackCursor<Object> = createCursor(\n  emptyContextObject,\n);\n// A cursor to a boolean indicating whether the context has changed.\nconst didPerformWorkStackCursor: StackCursor<boolean> = createCursor(false);\n// Keep track of the previous context object that was on the stack.\n// We use this to get access to the parent context after we have already\n// pushed the next context provider, and now need to merge their contexts.\nlet previousContext: Object = emptyContextObject;\n\nfunction getUnmaskedContext(\n  workInProgress: Fiber,\n  Component: Function,\n  didPushOwnContextIfProvider: boolean,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n      // If the fiber is a context provider itself, when we read its context\n      // we may have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n}\n\nfunction cacheContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n  maskedContext: Object,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n}\n\nfunction getMaskedContext(\n  workInProgress: Fiber,\n  unmaskedContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    const type = workInProgress.type;\n    const contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return emptyContextObject;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    const instance = workInProgress.stateNode;\n    if (\n      instance &&\n      instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext\n    ) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    const context = {};\n    for (const key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      const name = getComponentName(type) || 'Unknown';\n      checkPropTypes(contextTypes, context, 'context', name);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n}\n\nfunction hasContextChanged(): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    return didPerformWorkStackCursor.current;\n  }\n}\n\nfunction isContextProvider(type: Function): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const childContextTypes = type.childContextTypes;\n    return childContextTypes !== null && childContextTypes !== undefined;\n  }\n}\n\nfunction popContext(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction popTopLevelContextObject(fiber: Fiber): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n}\n\nfunction pushTopLevelContextObject(\n  fiber: Fiber,\n  context: Object,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    invariant(\n      contextStackCursor.current === emptyContextObject,\n      'Unexpected context found on stack. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n}\n\nfunction processChildContext(\n  fiber: Fiber,\n  type: any,\n  parentContext: Object,\n): Object {\n  if (disableLegacyContext) {\n    return parentContext;\n  } else {\n    const instance = fiber.stateNode;\n    const childContextTypes = type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        const componentName = getComponentName(type) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          console.error(\n            '%s.childContextTypes is specified but there is no getChildContext() method ' +\n              'on the instance. You can either define getChildContext() on %s or remove ' +\n              'childContextTypes from it.',\n            componentName,\n            componentName,\n          );\n        }\n      }\n      return parentContext;\n    }\n\n    const childContext = instance.getChildContext();\n    for (const contextKey in childContext) {\n      invariant(\n        contextKey in childContextTypes,\n        '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.',\n        getComponentName(type) || 'Unknown',\n        contextKey,\n      );\n    }\n    if (__DEV__) {\n      const name = getComponentName(type) || 'Unknown';\n      checkPropTypes(childContextTypes, childContext, 'child context', name);\n    }\n\n    return {...parentContext, ...childContext};\n  }\n}\n\nfunction pushContextProvider(workInProgress: Fiber): boolean {\n  if (disableLegacyContext) {\n    return false;\n  } else {\n    const instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    const memoizedMergedChildContext =\n      (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n      emptyContextObject;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(\n      didPerformWorkStackCursor,\n      didPerformWorkStackCursor.current,\n      workInProgress,\n    );\n\n    return true;\n  }\n}\n\nfunction invalidateContextProvider(\n  workInProgress: Fiber,\n  type: any,\n  didChange: boolean,\n): void {\n  if (disableLegacyContext) {\n    return;\n  } else {\n    const instance = workInProgress.stateNode;\n    invariant(\n      instance,\n      'Expected to have an instance by this point. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      const mergedContext = processChildContext(\n        workInProgress,\n        type,\n        previousContext,\n      );\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n}\n\nfunction findCurrentUnmaskedContext(fiber: Fiber): Object {\n  if (disableLegacyContext) {\n    return emptyContextObject;\n  } else {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    invariant(\n      isFiberMounted(fiber) && fiber.tag === ClassComponent,\n      'Expected subtree parent to be a mounted class component. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n\n    let node = fiber;\n    do {\n      switch (node.tag) {\n        case HostRoot:\n          return node.stateNode.context;\n        case ClassComponent: {\n          const Component = node.type;\n          if (isContextProvider(Component)) {\n            return node.stateNode.__reactInternalMemoizedMergedChildContext;\n          }\n          break;\n        }\n      }\n      node = node.return;\n    } while (node !== null);\n    invariant(\n      false,\n      'Found unexpected detached subtree parent. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n}\n\nexport {\n  getUnmaskedContext,\n  cacheContext,\n  getMaskedContext,\n  hasContextChanged,\n  popContext,\n  popTopLevelContextObject,\n  pushTopLevelContextObject,\n  processChildContext,\n  isContextProvider,\n  pushContextProvider,\n  invalidateContextProvider,\n  findCurrentUnmaskedContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type RootTag = 0 | 1 | 2;\n\nexport const LegacyRoot = 0;\nexport const BlockingRoot = 1;\nexport const ConcurrentRoot = 2;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {enableProfilerTimer} from 'shared/ReactFeatureFlags';\n\nimport type {Fiber, FiberRoot, ReactPriorityLevel} from './ReactInternalTypes';\nimport type {ReactNodeList} from 'shared/ReactTypes';\n\nimport {DidCapture} from './ReactFiberFlags';\n\ndeclare var __REACT_DEVTOOLS_GLOBAL_HOOK__: Object | void;\n\nlet rendererID = null;\nlet injectedHook = null;\nlet hasLoggedError = false;\n\nexport const isDevToolsPresent =\n  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';\n\nexport function injectInternals(internals: Object): boolean {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  const hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      console.error(\n        'The installed version of React DevTools is too old and will not work ' +\n          'with the current version of React. Please update React DevTools. ' +\n          'https://reactjs.org/link/react-devtools',\n      );\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    rendererID = hook.inject(internals);\n    // We have successfully injected, so now it is safe to set up hooks.\n    injectedHook = hook;\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      console.error('React instrumentation encountered an error: %s.', err);\n    }\n  }\n  // DevTools exists\n  return true;\n}\n\nexport function onScheduleRoot(root: FiberRoot, children: ReactNodeList) {\n  if (__DEV__) {\n    if (\n      injectedHook &&\n      typeof injectedHook.onScheduleFiberRoot === 'function'\n    ) {\n      try {\n        injectedHook.onScheduleFiberRoot(rendererID, root, children);\n      } catch (err) {\n        if (__DEV__ && !hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitRoot(\n  root: FiberRoot,\n  priorityLevel: ReactPriorityLevel,\n) {\n  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {\n    try {\n      const didError = (root.current.flags & DidCapture) === DidCapture;\n      if (enableProfilerTimer) {\n        injectedHook.onCommitFiberRoot(\n          rendererID,\n          root,\n          priorityLevel,\n          didError,\n        );\n      } else {\n        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);\n      }\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n\nexport function onCommitUnmount(fiber: Fiber) {\n  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {\n    try {\n      injectedHook.onCommitFiberUnmount(rendererID, fiber);\n    } catch (err) {\n      if (__DEV__) {\n        if (!hasLoggedError) {\n          hasLoggedError = true;\n          console.error('React instrumentation encountered an error: %s', err);\n        }\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from 'react';\n\nconst ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nconst {\n  __interactionsRef,\n  __subscriberRef,\n  unstable_clear,\n  unstable_getCurrent,\n  unstable_getThreadID,\n  unstable_subscribe,\n  unstable_trace,\n  unstable_unsubscribe,\n  unstable_wrap,\n} = ReactInternals.SchedulerTracing;\n\nexport {\n  __interactionsRef,\n  __subscriberRef,\n  unstable_clear,\n  unstable_getCurrent,\n  unstable_getThreadID,\n  unstable_subscribe,\n  unstable_trace,\n  unstable_unsubscribe,\n  unstable_wrap,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\nimport {__interactionsRef} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport {\n  SyncLanePriority,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\n\nconst {\n  unstable_runWithPriority: Scheduler_runWithPriority,\n  unstable_scheduleCallback: Scheduler_scheduleCallback,\n  unstable_cancelCallback: Scheduler_cancelCallback,\n  unstable_shouldYield: Scheduler_shouldYield,\n  unstable_requestPaint: Scheduler_requestPaint,\n  unstable_now: Scheduler_now,\n  unstable_getCurrentPriorityLevel: Scheduler_getCurrentPriorityLevel,\n  unstable_ImmediatePriority: Scheduler_ImmediatePriority,\n  unstable_UserBlockingPriority: Scheduler_UserBlockingPriority,\n  unstable_NormalPriority: Scheduler_NormalPriority,\n  unstable_LowPriority: Scheduler_LowPriority,\n  unstable_IdlePriority: Scheduler_IdlePriority,\n} = Scheduler;\n\nif (enableSchedulerTracing) {\n  // Provide explicit error message when production+profiling bundle of e.g.\n  // react-dom is used with production (non-profiling) bundle of\n  // scheduler/tracing\n  invariant(\n    __interactionsRef != null && __interactionsRef.current != null,\n    'It is not supported to run the profiling version of a renderer (for ' +\n      'example, `react-dom/profiling`) without also replacing the ' +\n      '`scheduler/tracing` module with `scheduler/tracing-profiling`. Your ' +\n      'bundler might have a setting for aliasing both modules. Learn more at ' +\n      'https://reactjs.org/link/profiling',\n  );\n}\n\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\ntype SchedulerCallbackOptions = {timeout?: number, ...};\n\nconst fakeCallbackNode = {};\n\n// Except for NoPriority, these correspond to Scheduler priorities. We use\n// ascending numbers so we can compare them like numbers. They start at 90 to\n// avoid clashing with Scheduler's priorities.\nexport const ImmediatePriority: ReactPriorityLevel = 99;\nexport const UserBlockingPriority: ReactPriorityLevel = 98;\nexport const NormalPriority: ReactPriorityLevel = 97;\nexport const LowPriority: ReactPriorityLevel = 96;\nexport const IdlePriority: ReactPriorityLevel = 95;\n// NoPriority is the absence of priority. Also React-only.\nexport const NoPriority: ReactPriorityLevel = 90;\n\nexport const shouldYield = Scheduler_shouldYield;\nexport const requestPaint =\n  // Fall back gracefully if we're running an older version of Scheduler.\n  Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : () => {};\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet immediateQueueCallbackNode: mixed | null = null;\nlet isFlushingSyncQueue: boolean = false;\nconst initialTimeMs: number = Scheduler_now();\n\n// If the initial timestamp is reasonably small, use Scheduler's `now` directly.\n// This will be the case for modern browsers that support `performance.now`. In\n// older browsers, Scheduler falls back to `Date.now`, which returns a Unix\n// timestamp. In that case, subtract the module initialization time to simulate\n// the behavior of performance.now and keep our times small enough to fit\n// within 32 bits.\n// TODO: Consider lifting this into Scheduler.\nexport const now =\n  initialTimeMs < 10000 ? Scheduler_now : () => Scheduler_now() - initialTimeMs;\n\nexport function getCurrentPriorityLevel(): ReactPriorityLevel {\n  switch (Scheduler_getCurrentPriorityLevel()) {\n    case Scheduler_ImmediatePriority:\n      return ImmediatePriority;\n    case Scheduler_UserBlockingPriority:\n      return UserBlockingPriority;\n    case Scheduler_NormalPriority:\n      return NormalPriority;\n    case Scheduler_LowPriority:\n      return LowPriority;\n    case Scheduler_IdlePriority:\n      return IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nfunction reactPriorityToSchedulerPriority(reactPriorityLevel) {\n  switch (reactPriorityLevel) {\n    case ImmediatePriority:\n      return Scheduler_ImmediatePriority;\n    case UserBlockingPriority:\n      return Scheduler_UserBlockingPriority;\n    case NormalPriority:\n      return Scheduler_NormalPriority;\n    case LowPriority:\n      return Scheduler_LowPriority;\n    case IdlePriority:\n      return Scheduler_IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nexport function runWithPriority<T>(\n  reactPriorityLevel: ReactPriorityLevel,\n  fn: () => T,\n): T {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_runWithPriority(priorityLevel, fn);\n}\n\nexport function scheduleCallback(\n  reactPriorityLevel: ReactPriorityLevel,\n  callback: SchedulerCallback,\n  options: SchedulerCallbackOptions | void | null,\n) {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_scheduleCallback(priorityLevel, callback, options);\n}\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n    // Flush the queue in the next tick, at the earliest.\n    immediateQueueCallbackNode = Scheduler_scheduleCallback(\n      Scheduler_ImmediatePriority,\n      flushSyncCallbackQueueImpl,\n    );\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n  return fakeCallbackNode;\n}\n\nexport function cancelCallback(callbackNode: mixed) {\n  if (callbackNode !== fakeCallbackNode) {\n    Scheduler_cancelCallback(callbackNode);\n  }\n}\n\nexport function flushSyncCallbackQueue(): boolean {\n  if (immediateQueueCallbackNode !== null) {\n    const node = immediateQueueCallbackNode;\n    immediateQueueCallbackNode = null;\n    Scheduler_cancelCallback(node);\n  }\n  return flushSyncCallbackQueueImpl();\n}\n\nfunction flushSyncCallbackQueueImpl() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrancy.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        setCurrentUpdateLanePriority(SyncLanePriority);\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n        isFlushingSyncQueue = false;\n      }\n    } else {\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        isFlushingSyncQueue = false;\n      }\n    }\n    return true;\n  } else {\n    return false;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, ReactPriorityLevel} from './ReactInternalTypes';\n\nexport opaque type LanePriority =\n  | 0\n  | 1\n  | 2\n  | 3\n  | 4\n  | 5\n  | 6\n  | 7\n  | 8\n  | 9\n  | 10\n  | 11\n  | 12\n  | 13\n  | 14\n  | 15\n  | 16\n  | 17;\nexport opaque type Lanes = number;\nexport opaque type Lane = number;\nexport opaque type LaneMap<T> = Array<T>;\n\nimport invariant from 'shared/invariant';\n\nimport {\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  LowPriority as LowSchedulerPriority,\n  IdlePriority as IdleSchedulerPriority,\n  NoPriority as NoSchedulerPriority,\n} from './SchedulerWithReactIntegration.new';\n\nexport const SyncLanePriority: LanePriority = 15;\nexport const SyncBatchedLanePriority: LanePriority = 14;\n\nconst InputDiscreteHydrationLanePriority: LanePriority = 13;\nexport const InputDiscreteLanePriority: LanePriority = 12;\n\nconst InputContinuousHydrationLanePriority: LanePriority = 11;\nexport const InputContinuousLanePriority: LanePriority = 10;\n\nconst DefaultHydrationLanePriority: LanePriority = 9;\nexport const DefaultLanePriority: LanePriority = 8;\n\nconst TransitionHydrationPriority: LanePriority = 7;\nexport const TransitionPriority: LanePriority = 6;\n\nconst RetryLanePriority: LanePriority = 5;\n\nconst SelectiveHydrationLanePriority: LanePriority = 4;\n\nconst IdleHydrationLanePriority: LanePriority = 3;\nconst IdleLanePriority: LanePriority = 2;\n\nconst OffscreenLanePriority: LanePriority = 1;\n\nexport const NoLanePriority: LanePriority = 0;\n\nconst TotalLanes = 31;\n\nexport const NoLanes: Lanes = /*                        */ 0b0000000000000000000000000000000;\nexport const NoLane: Lane = /*                          */ 0b0000000000000000000000000000000;\n\nexport const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000001;\nexport const SyncBatchedLane: Lane = /*                 */ 0b0000000000000000000000000000010;\n\nexport const InputDiscreteHydrationLane: Lane = /*      */ 0b0000000000000000000000000000100;\nconst InputDiscreteLanes: Lanes = /*                    */ 0b0000000000000000000000000011000;\n\nconst InputContinuousHydrationLane: Lane = /*           */ 0b0000000000000000000000000100000;\nconst InputContinuousLanes: Lanes = /*                  */ 0b0000000000000000000000011000000;\n\nexport const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000100000000;\nexport const DefaultLanes: Lanes = /*                   */ 0b0000000000000000000111000000000;\n\nconst TransitionHydrationLane: Lane = /*                */ 0b0000000000000000001000000000000;\nconst TransitionLanes: Lanes = /*                       */ 0b0000000001111111110000000000000;\n\nconst RetryLanes: Lanes = /*                            */ 0b0000011110000000000000000000000;\n\nexport const SomeRetryLane: Lanes = /*                  */ 0b0000010000000000000000000000000;\n\nexport const SelectiveHydrationLane: Lane = /*          */ 0b0000100000000000000000000000000;\n\nconst NonIdleLanes = /*                                 */ 0b0000111111111111111111111111111;\n\nexport const IdleHydrationLane: Lane = /*               */ 0b0001000000000000000000000000000;\nconst IdleLanes: Lanes = /*                             */ 0b0110000000000000000000000000000;\n\nexport const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;\n\nexport const NoTimestamp = -1;\n\nlet currentUpdateLanePriority: LanePriority = NoLanePriority;\n\nexport function getCurrentUpdateLanePriority(): LanePriority {\n  return currentUpdateLanePriority;\n}\n\nexport function setCurrentUpdateLanePriority(newLanePriority: LanePriority) {\n  currentUpdateLanePriority = newLanePriority;\n}\n\n// \"Registers\" used to \"return\" multiple values\n// Used by getHighestPriorityLanes and getNextLanes:\nlet return_highestLanePriority: LanePriority = DefaultLanePriority;\n\nfunction getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {\n  if ((SyncLane & lanes) !== NoLanes) {\n    return_highestLanePriority = SyncLanePriority;\n    return SyncLane;\n  }\n  if ((SyncBatchedLane & lanes) !== NoLanes) {\n    return_highestLanePriority = SyncBatchedLanePriority;\n    return SyncBatchedLane;\n  }\n  if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {\n    return_highestLanePriority = InputDiscreteHydrationLanePriority;\n    return InputDiscreteHydrationLane;\n  }\n  const inputDiscreteLanes = InputDiscreteLanes & lanes;\n  if (inputDiscreteLanes !== NoLanes) {\n    return_highestLanePriority = InputDiscreteLanePriority;\n    return inputDiscreteLanes;\n  }\n  if ((lanes & InputContinuousHydrationLane) !== NoLanes) {\n    return_highestLanePriority = InputContinuousHydrationLanePriority;\n    return InputContinuousHydrationLane;\n  }\n  const inputContinuousLanes = InputContinuousLanes & lanes;\n  if (inputContinuousLanes !== NoLanes) {\n    return_highestLanePriority = InputContinuousLanePriority;\n    return inputContinuousLanes;\n  }\n  if ((lanes & DefaultHydrationLane) !== NoLanes) {\n    return_highestLanePriority = DefaultHydrationLanePriority;\n    return DefaultHydrationLane;\n  }\n  const defaultLanes = DefaultLanes & lanes;\n  if (defaultLanes !== NoLanes) {\n    return_highestLanePriority = DefaultLanePriority;\n    return defaultLanes;\n  }\n  if ((lanes & TransitionHydrationLane) !== NoLanes) {\n    return_highestLanePriority = TransitionHydrationPriority;\n    return TransitionHydrationLane;\n  }\n  const transitionLanes = TransitionLanes & lanes;\n  if (transitionLanes !== NoLanes) {\n    return_highestLanePriority = TransitionPriority;\n    return transitionLanes;\n  }\n  const retryLanes = RetryLanes & lanes;\n  if (retryLanes !== NoLanes) {\n    return_highestLanePriority = RetryLanePriority;\n    return retryLanes;\n  }\n  if (lanes & SelectiveHydrationLane) {\n    return_highestLanePriority = SelectiveHydrationLanePriority;\n    return SelectiveHydrationLane;\n  }\n  if ((lanes & IdleHydrationLane) !== NoLanes) {\n    return_highestLanePriority = IdleHydrationLanePriority;\n    return IdleHydrationLane;\n  }\n  const idleLanes = IdleLanes & lanes;\n  if (idleLanes !== NoLanes) {\n    return_highestLanePriority = IdleLanePriority;\n    return idleLanes;\n  }\n  if ((OffscreenLane & lanes) !== NoLanes) {\n    return_highestLanePriority = OffscreenLanePriority;\n    return OffscreenLane;\n  }\n  if (__DEV__) {\n    console.error('Should have found matching lanes. This is a bug in React.');\n  }\n  // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n  return_highestLanePriority = DefaultLanePriority;\n  return lanes;\n}\n\nexport function schedulerPriorityToLanePriority(\n  schedulerPriorityLevel: ReactPriorityLevel,\n): LanePriority {\n  switch (schedulerPriorityLevel) {\n    case ImmediateSchedulerPriority:\n      return SyncLanePriority;\n    case UserBlockingSchedulerPriority:\n      return InputContinuousLanePriority;\n    case NormalSchedulerPriority:\n    case LowSchedulerPriority:\n      // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.\n      return DefaultLanePriority;\n    case IdleSchedulerPriority:\n      return IdleLanePriority;\n    default:\n      return NoLanePriority;\n  }\n}\n\nexport function lanePriorityToSchedulerPriority(\n  lanePriority: LanePriority,\n): ReactPriorityLevel {\n  switch (lanePriority) {\n    case SyncLanePriority:\n    case SyncBatchedLanePriority:\n      return ImmediateSchedulerPriority;\n    case InputDiscreteHydrationLanePriority:\n    case InputDiscreteLanePriority:\n    case InputContinuousHydrationLanePriority:\n    case InputContinuousLanePriority:\n      return UserBlockingSchedulerPriority;\n    case DefaultHydrationLanePriority:\n    case DefaultLanePriority:\n    case TransitionHydrationPriority:\n    case TransitionPriority:\n    case SelectiveHydrationLanePriority:\n    case RetryLanePriority:\n      return NormalSchedulerPriority;\n    case IdleHydrationLanePriority:\n    case IdleLanePriority:\n    case OffscreenLanePriority:\n      return IdleSchedulerPriority;\n    case NoLanePriority:\n      return NoSchedulerPriority;\n    default:\n      invariant(\n        false,\n        'Invalid update priority: %s. This is a bug in React.',\n        lanePriority,\n      );\n  }\n}\n\nexport function getNextLanes(root: FiberRoot, wipLanes: Lanes): Lanes {\n  // Early bailout if there's no pending work left.\n  const pendingLanes = root.pendingLanes;\n  if (pendingLanes === NoLanes) {\n    return_highestLanePriority = NoLanePriority;\n    return NoLanes;\n  }\n\n  let nextLanes = NoLanes;\n  let nextLanePriority = NoLanePriority;\n\n  const expiredLanes = root.expiredLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n\n  // Check if any work has expired.\n  if (expiredLanes !== NoLanes) {\n    nextLanes = expiredLanes;\n    nextLanePriority = return_highestLanePriority = SyncLanePriority;\n  } else {\n    // Do not work on any idle work until all the non-idle work has finished,\n    // even if the work is suspended.\n    const nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n    if (nonIdlePendingLanes !== NoLanes) {\n      const nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n      if (nonIdleUnblockedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        nextLanePriority = return_highestLanePriority;\n      } else {\n        const nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n        if (nonIdlePingedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          nextLanePriority = return_highestLanePriority;\n        }\n      }\n    } else {\n      // The only remaining work is Idle.\n      const unblockedLanes = pendingLanes & ~suspendedLanes;\n      if (unblockedLanes !== NoLanes) {\n        nextLanes = getHighestPriorityLanes(unblockedLanes);\n        nextLanePriority = return_highestLanePriority;\n      } else {\n        if (pingedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(pingedLanes);\n          nextLanePriority = return_highestLanePriority;\n        }\n      }\n    }\n  }\n\n  if (nextLanes === NoLanes) {\n    // This should only be reachable if we're suspended\n    // TODO: Consider warning in this path if a fallback timer is not scheduled.\n    return NoLanes;\n  }\n\n  // If there are higher priority lanes, we'll include them even if they\n  // are suspended.\n  nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);\n\n  // If we're already in the middle of a render, switching lanes will interrupt\n  // it and we'll lose our progress. We should only do this if the new lanes are\n  // higher priority.\n  if (\n    wipLanes !== NoLanes &&\n    wipLanes !== nextLanes &&\n    // If we already suspended with a delay, then interrupting is fine. Don't\n    // bother waiting until the root is complete.\n    (wipLanes & suspendedLanes) === NoLanes\n  ) {\n    getHighestPriorityLanes(wipLanes);\n    const wipLanePriority = return_highestLanePriority;\n    if (nextLanePriority <= wipLanePriority) {\n      return wipLanes;\n    } else {\n      return_highestLanePriority = nextLanePriority;\n    }\n  }\n\n  // Check for entangled lanes and add them to the batch.\n  //\n  // A lane is said to be entangled with another when it's not allowed to render\n  // in a batch that does not also include the other lane. Typically we do this\n  // when multiple updates have the same source, and we only want to respond to\n  // the most recent event from that source.\n  //\n  // Note that we apply entanglements *after* checking for partial work above.\n  // This means that if a lane is entangled during an interleaved event while\n  // it's already rendering, we won't interrupt it. This is intentional, since\n  // entanglement is usually \"best effort\": we'll try our best to render the\n  // lanes in the same batch, but it's not worth throwing out partially\n  // completed work in order to do it.\n  //\n  // For those exceptions where entanglement is semantically important, like\n  // useMutableSource, we should ensure that there is no partial work at the\n  // time we apply the entanglement.\n  const entangledLanes = root.entangledLanes;\n  if (entangledLanes !== NoLanes) {\n    const entanglements = root.entanglements;\n    let lanes = nextLanes & entangledLanes;\n    while (lanes > 0) {\n      const index = pickArbitraryLaneIndex(lanes);\n      const lane = 1 << index;\n\n      nextLanes |= entanglements[index];\n\n      lanes &= ~lane;\n    }\n  }\n\n  return nextLanes;\n}\n\nexport function getMostRecentEventTime(root: FiberRoot, lanes: Lanes): number {\n  const eventTimes = root.eventTimes;\n\n  let mostRecentEventTime = NoTimestamp;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const eventTime = eventTimes[index];\n    if (eventTime > mostRecentEventTime) {\n      mostRecentEventTime = eventTime;\n    }\n\n    lanes &= ~lane;\n  }\n\n  return mostRecentEventTime;\n}\n\nfunction computeExpirationTime(lane: Lane, currentTime: number) {\n  // TODO: Expiration heuristic is constant per lane, so could use a map.\n  getHighestPriorityLanes(lane);\n  const priority = return_highestLanePriority;\n  if (priority >= InputContinuousLanePriority) {\n    // User interactions should expire slightly more quickly.\n    //\n    // NOTE: This is set to the corresponding constant as in Scheduler.js. When\n    // we made it larger, a product metric in www regressed, suggesting there's\n    // a user interaction that's being starved by a series of synchronous\n    // updates. If that theory is correct, the proper solution is to fix the\n    // starvation. However, this scenario supports the idea that expiration\n    // times are an important safeguard when starvation does happen.\n    //\n    // Also note that, in the case of user input specifically, this will soon no\n    // longer be an issue because we plan to make user input synchronous by\n    // default (until you enter `startTransition`, of course.)\n    //\n    // If weren't planning to make these updates synchronous soon anyway, I\n    // would probably make this number a configurable parameter.\n    return currentTime + 250;\n  } else if (priority >= TransitionPriority) {\n    return currentTime + 5000;\n  } else {\n    // Anything idle priority or lower should never expire.\n    return NoTimestamp;\n  }\n}\n\nexport function markStarvedLanesAsExpired(\n  root: FiberRoot,\n  currentTime: number,\n): void {\n  // TODO: This gets called every time we yield. We can optimize by storing\n  // the earliest expiration time on the root. Then use that to quickly bail out\n  // of this function.\n\n  const pendingLanes = root.pendingLanes;\n  const suspendedLanes = root.suspendedLanes;\n  const pingedLanes = root.pingedLanes;\n  const expirationTimes = root.expirationTimes;\n\n  // Iterate through the pending lanes and check if we've reached their\n  // expiration time. If so, we'll assume the update is being starved and mark\n  // it as expired to force it to finish.\n  let lanes = pendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    const expirationTime = expirationTimes[index];\n    if (expirationTime === NoTimestamp) {\n      // Found a pending lane with no expiration time. If it's not suspended, or\n      // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n      // using the current time.\n      if (\n        (lane & suspendedLanes) === NoLanes ||\n        (lane & pingedLanes) !== NoLanes\n      ) {\n        // Assumes timestamps are monotonically increasing.\n        expirationTimes[index] = computeExpirationTime(lane, currentTime);\n      }\n    } else if (expirationTime <= currentTime) {\n      // This lane expired\n      root.expiredLanes |= lane;\n    }\n\n    lanes &= ~lane;\n  }\n}\n\n// This returns the highest priority pending lanes regardless of whether they\n// are suspended.\nexport function getHighestPriorityPendingLanes(root: FiberRoot) {\n  return getHighestPriorityLanes(root.pendingLanes);\n}\n\nexport function getLanesToRetrySynchronouslyOnError(root: FiberRoot): Lanes {\n  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n  if (everythingButOffscreen !== NoLanes) {\n    return everythingButOffscreen;\n  }\n  if (everythingButOffscreen & OffscreenLane) {\n    return OffscreenLane;\n  }\n  return NoLanes;\n}\n\nexport function returnNextLanesPriority() {\n  return return_highestLanePriority;\n}\nexport function includesNonIdleWork(lanes: Lanes) {\n  return (lanes & NonIdleLanes) !== NoLanes;\n}\nexport function includesOnlyRetries(lanes: Lanes) {\n  return (lanes & RetryLanes) === lanes;\n}\nexport function includesOnlyTransitions(lanes: Lanes) {\n  return (lanes & TransitionLanes) === lanes;\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be a pure function, so that it always returns the same lane for given inputs.\nexport function findUpdateLane(\n  lanePriority: LanePriority,\n  wipLanes: Lanes,\n): Lane {\n  switch (lanePriority) {\n    case NoLanePriority:\n      break;\n    case SyncLanePriority:\n      return SyncLane;\n    case SyncBatchedLanePriority:\n      return SyncBatchedLane;\n    case InputDiscreteLanePriority: {\n      const lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // Shift to the next priority level\n        return findUpdateLane(InputContinuousLanePriority, wipLanes);\n      }\n      return lane;\n    }\n    case InputContinuousLanePriority: {\n      const lane = pickArbitraryLane(InputContinuousLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // Shift to the next priority level\n        return findUpdateLane(DefaultLanePriority, wipLanes);\n      }\n      return lane;\n    }\n    case DefaultLanePriority: {\n      let lane = pickArbitraryLane(DefaultLanes & ~wipLanes);\n      if (lane === NoLane) {\n        // If all the default lanes are already being worked on, look for a\n        // lane in the transition range.\n        lane = pickArbitraryLane(TransitionLanes & ~wipLanes);\n        if (lane === NoLane) {\n          // All the transition lanes are taken, too. This should be very\n          // rare, but as a last resort, pick a default lane. This will have\n          // the effect of interrupting the current work-in-progress render.\n          lane = pickArbitraryLane(DefaultLanes);\n        }\n      }\n      return lane;\n    }\n    case TransitionPriority: // Should be handled by findTransitionLane instead\n    case RetryLanePriority: // Should be handled by findRetryLane instead\n      break;\n    case IdleLanePriority:\n      let lane = pickArbitraryLane(IdleLanes & ~wipLanes);\n      if (lane === NoLane) {\n        lane = pickArbitraryLane(IdleLanes);\n      }\n      return lane;\n    default:\n      // The remaining priorities are not valid for updates\n      break;\n  }\n  invariant(\n    false,\n    'Invalid update priority: %s. This is a bug in React.',\n    lanePriority,\n  );\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be pure function, so that it always returns the same lane for given inputs.\nexport function findTransitionLane(wipLanes: Lanes, pendingLanes: Lanes): Lane {\n  // First look for lanes that are completely unclaimed, i.e. have no\n  // pending work.\n  let lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);\n  if (lane === NoLane) {\n    // If all lanes have pending work, look for a lane that isn't currently\n    // being worked on.\n    lane = pickArbitraryLane(TransitionLanes & ~wipLanes);\n    if (lane === NoLane) {\n      // If everything is being worked on, pick any lane. This has the\n      // effect of interrupting the current work-in-progress.\n      lane = pickArbitraryLane(TransitionLanes);\n    }\n  }\n  return lane;\n}\n\n// To ensure consistency across multiple updates in the same event, this should\n// be pure function, so that it always returns the same lane for given inputs.\nexport function findRetryLane(wipLanes: Lanes): Lane {\n  // This is a fork of `findUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n  let lane = pickArbitraryLane(RetryLanes & ~wipLanes);\n  if (lane === NoLane) {\n    lane = pickArbitraryLane(RetryLanes);\n  }\n  return lane;\n}\n\nfunction getHighestPriorityLane(lanes: Lanes) {\n  return lanes & -lanes;\n}\n\nfunction getLowestPriorityLane(lanes: Lanes): Lane {\n  // This finds the most significant non-zero bit.\n  const index = 31 - clz32(lanes);\n  return index < 0 ? NoLanes : 1 << index;\n}\n\nfunction getEqualOrHigherPriorityLanes(lanes: Lanes | Lane): Lanes {\n  return (getLowestPriorityLane(lanes) << 1) - 1;\n}\n\nexport function pickArbitraryLane(lanes: Lanes): Lane {\n  // This wrapper function gets inlined. Only exists so to communicate that it\n  // doesn't matter which bit is selected; you can pick any bit without\n  // affecting the algorithms where its used. Here I'm using\n  // getHighestPriorityLane because it requires the fewest operations.\n  return getHighestPriorityLane(lanes);\n}\n\nfunction pickArbitraryLaneIndex(lanes: Lanes) {\n  return 31 - clz32(lanes);\n}\n\nfunction laneToIndex(lane: Lane) {\n  return pickArbitraryLaneIndex(lane);\n}\n\nexport function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane) {\n  return (a & b) !== NoLanes;\n}\n\nexport function isSubsetOfLanes(set: Lanes, subset: Lanes | Lane) {\n  return (set & subset) === subset;\n}\n\nexport function mergeLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {\n  return a | b;\n}\n\nexport function removeLanes(set: Lanes, subset: Lanes | Lane): Lanes {\n  return set & ~subset;\n}\n\n// Seems redundant, but it changes the type from a single lane (used for\n// updates) to a group of lanes (used for flushing work).\nexport function laneToLanes(lane: Lane): Lanes {\n  return lane;\n}\n\nexport function higherPriorityLane(a: Lane, b: Lane) {\n  // This works because the bit ranges decrease in priority as you go left.\n  return a !== NoLane && a < b ? a : b;\n}\n\nexport function higherLanePriority(\n  a: LanePriority,\n  b: LanePriority,\n): LanePriority {\n  return a !== NoLanePriority && a > b ? a : b;\n}\n\nexport function createLaneMap<T>(initial: T): LaneMap<T> {\n  return new Array(TotalLanes).fill(initial);\n}\n\nexport function markRootUpdated(\n  root: FiberRoot,\n  updateLane: Lane,\n  eventTime: number,\n) {\n  root.pendingLanes |= updateLane;\n\n  // TODO: Theoretically, any update to any lane can unblock any other lane. But\n  // it's not practical to try every single possible combination. We need a\n  // heuristic to decide which lanes to attempt to render, and in which batches.\n  // For now, we use the same heuristic as in the old ExpirationTimes model:\n  // retry any lane at equal or lower priority, but don't try updates at higher\n  // priority without also including the lower priority updates. This works well\n  // when considering updates across different priority levels, but isn't\n  // sufficient for updates within the same priority, since we want to treat\n  // those updates as parallel.\n\n  // Unsuspend any update at equal or lower priority.\n  const higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111\n\n  root.suspendedLanes &= higherPriorityLanes;\n  root.pingedLanes &= higherPriorityLanes;\n\n  const eventTimes = root.eventTimes;\n  const index = laneToIndex(updateLane);\n  // We can always overwrite an existing timestamp because we prefer the most\n  // recent event, and we assume time is monotonically increasing.\n  eventTimes[index] = eventTime;\n}\n\nexport function markRootSuspended(root: FiberRoot, suspendedLanes: Lanes) {\n  root.suspendedLanes |= suspendedLanes;\n  root.pingedLanes &= ~suspendedLanes;\n\n  // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n  const expirationTimes = root.expirationTimes;\n  let lanes = suspendedLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootPinged(\n  root: FiberRoot,\n  pingedLanes: Lanes,\n  eventTime: number,\n) {\n  root.pingedLanes |= root.suspendedLanes & pingedLanes;\n}\n\nexport function markRootExpired(root: FiberRoot, expiredLanes: Lanes) {\n  root.expiredLanes |= expiredLanes & root.pendingLanes;\n}\n\nexport function markDiscreteUpdatesExpired(root: FiberRoot) {\n  root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;\n}\n\nexport function hasDiscreteLanes(lanes: Lanes) {\n  return (lanes & InputDiscreteLanes) !== NoLanes;\n}\n\nexport function markRootMutableRead(root: FiberRoot, updateLane: Lane) {\n  root.mutableReadLanes |= updateLane & root.pendingLanes;\n}\n\nexport function markRootFinished(root: FiberRoot, remainingLanes: Lanes) {\n  const noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n\n  root.pendingLanes = remainingLanes;\n\n  // Let's try everything again\n  root.suspendedLanes = 0;\n  root.pingedLanes = 0;\n\n  root.expiredLanes &= remainingLanes;\n  root.mutableReadLanes &= remainingLanes;\n\n  root.entangledLanes &= remainingLanes;\n\n  const entanglements = root.entanglements;\n  const eventTimes = root.eventTimes;\n  const expirationTimes = root.expirationTimes;\n\n  // Clear the lanes that no longer have pending work\n  let lanes = noLongerPendingLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] = NoLanes;\n    eventTimes[index] = NoTimestamp;\n    expirationTimes[index] = NoTimestamp;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {\n  root.entangledLanes |= entangledLanes;\n\n  const entanglements = root.entanglements;\n  let lanes = entangledLanes;\n  while (lanes > 0) {\n    const index = pickArbitraryLaneIndex(lanes);\n    const lane = 1 << index;\n\n    entanglements[index] |= entangledLanes;\n\n    lanes &= ~lane;\n  }\n}\n\nexport function getBumpedLaneForHydration(\n  root: FiberRoot,\n  renderLanes: Lanes,\n): Lane {\n  getHighestPriorityLanes(renderLanes);\n  const highestLanePriority = return_highestLanePriority;\n\n  let lane;\n  switch (highestLanePriority) {\n    case SyncLanePriority:\n    case SyncBatchedLanePriority:\n      lane = NoLane;\n      break;\n    case InputDiscreteHydrationLanePriority:\n    case InputDiscreteLanePriority:\n      lane = InputDiscreteHydrationLane;\n      break;\n    case InputContinuousHydrationLanePriority:\n    case InputContinuousLanePriority:\n      lane = InputContinuousHydrationLane;\n      break;\n    case DefaultHydrationLanePriority:\n    case DefaultLanePriority:\n      lane = DefaultHydrationLane;\n      break;\n    case TransitionHydrationPriority:\n    case TransitionPriority:\n      lane = TransitionHydrationLane;\n      break;\n    case RetryLanePriority:\n      // Shouldn't be reachable under normal circumstances, so there's no\n      // dedicated lane for retry priority. Use the one for long transitions.\n      lane = TransitionHydrationLane;\n      break;\n    case SelectiveHydrationLanePriority:\n      lane = SelectiveHydrationLane;\n      break;\n    case IdleHydrationLanePriority:\n    case IdleLanePriority:\n      lane = IdleHydrationLane;\n      break;\n    case OffscreenLanePriority:\n    case NoLanePriority:\n      lane = NoLane;\n      break;\n    default:\n      invariant(false, 'Invalid lane: %s. This is a bug in React.', lane);\n  }\n\n  // Check if the lane we chose is suspended. If so, that indicates that we\n  // already attempted and failed to hydrate at that level. Also check if we're\n  // already rendering that lane, which is rare but could happen.\n  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n    // Give up trying to hydrate and fall back to client render.\n    return NoLane;\n  }\n\n  return lane;\n}\n\nconst clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n\n// Count leading zeros. Only used on lanes, so assume input is an integer.\n// Based on:\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\nconst log = Math.log;\nconst LN2 = Math.LN2;\nfunction clz32Fallback(lanes: Lanes | Lane) {\n  if (lanes === 0) {\n    return 32;\n  }\n  return (31 - ((log(lanes) / LN2) | 0)) | 0;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\nimport {__interactionsRef} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport {\n  SyncLanePriority,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\n\nconst {\n  unstable_runWithPriority: Scheduler_runWithPriority,\n  unstable_scheduleCallback: Scheduler_scheduleCallback,\n  unstable_cancelCallback: Scheduler_cancelCallback,\n  unstable_shouldYield: Scheduler_shouldYield,\n  unstable_requestPaint: Scheduler_requestPaint,\n  unstable_now: Scheduler_now,\n  unstable_getCurrentPriorityLevel: Scheduler_getCurrentPriorityLevel,\n  unstable_ImmediatePriority: Scheduler_ImmediatePriority,\n  unstable_UserBlockingPriority: Scheduler_UserBlockingPriority,\n  unstable_NormalPriority: Scheduler_NormalPriority,\n  unstable_LowPriority: Scheduler_LowPriority,\n  unstable_IdlePriority: Scheduler_IdlePriority,\n} = Scheduler;\n\nif (enableSchedulerTracing) {\n  // Provide explicit error message when production+profiling bundle of e.g.\n  // react-dom is used with production (non-profiling) bundle of\n  // scheduler/tracing\n  invariant(\n    __interactionsRef != null && __interactionsRef.current != null,\n    'It is not supported to run the profiling version of a renderer (for ' +\n      'example, `react-dom/profiling`) without also replacing the ' +\n      '`scheduler/tracing` module with `scheduler/tracing-profiling`. Your ' +\n      'bundler might have a setting for aliasing both modules. Learn more at ' +\n      'https://reactjs.org/link/profiling',\n  );\n}\n\nexport type SchedulerCallback = (isSync: boolean) => SchedulerCallback | null;\n\ntype SchedulerCallbackOptions = {timeout?: number, ...};\n\nconst fakeCallbackNode = {};\n\n// Except for NoPriority, these correspond to Scheduler priorities. We use\n// ascending numbers so we can compare them like numbers. They start at 90 to\n// avoid clashing with Scheduler's priorities.\nexport const ImmediatePriority: ReactPriorityLevel = 99;\nexport const UserBlockingPriority: ReactPriorityLevel = 98;\nexport const NormalPriority: ReactPriorityLevel = 97;\nexport const LowPriority: ReactPriorityLevel = 96;\nexport const IdlePriority: ReactPriorityLevel = 95;\n// NoPriority is the absence of priority. Also React-only.\nexport const NoPriority: ReactPriorityLevel = 90;\n\nexport const shouldYield = Scheduler_shouldYield;\nexport const requestPaint =\n  // Fall back gracefully if we're running an older version of Scheduler.\n  Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : () => {};\n\nlet syncQueue: Array<SchedulerCallback> | null = null;\nlet immediateQueueCallbackNode: mixed | null = null;\nlet isFlushingSyncQueue: boolean = false;\nconst initialTimeMs: number = Scheduler_now();\n\n// If the initial timestamp is reasonably small, use Scheduler's `now` directly.\n// This will be the case for modern browsers that support `performance.now`. In\n// older browsers, Scheduler falls back to `Date.now`, which returns a Unix\n// timestamp. In that case, subtract the module initialization time to simulate\n// the behavior of performance.now and keep our times small enough to fit\n// within 32 bits.\n// TODO: Consider lifting this into Scheduler.\nexport const now =\n  initialTimeMs < 10000 ? Scheduler_now : () => Scheduler_now() - initialTimeMs;\n\nexport function getCurrentPriorityLevel(): ReactPriorityLevel {\n  switch (Scheduler_getCurrentPriorityLevel()) {\n    case Scheduler_ImmediatePriority:\n      return ImmediatePriority;\n    case Scheduler_UserBlockingPriority:\n      return UserBlockingPriority;\n    case Scheduler_NormalPriority:\n      return NormalPriority;\n    case Scheduler_LowPriority:\n      return LowPriority;\n    case Scheduler_IdlePriority:\n      return IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nfunction reactPriorityToSchedulerPriority(reactPriorityLevel) {\n  switch (reactPriorityLevel) {\n    case ImmediatePriority:\n      return Scheduler_ImmediatePriority;\n    case UserBlockingPriority:\n      return Scheduler_UserBlockingPriority;\n    case NormalPriority:\n      return Scheduler_NormalPriority;\n    case LowPriority:\n      return Scheduler_LowPriority;\n    case IdlePriority:\n      return Scheduler_IdlePriority;\n    default:\n      invariant(false, 'Unknown priority level.');\n  }\n}\n\nexport function runWithPriority<T>(\n  reactPriorityLevel: ReactPriorityLevel,\n  fn: () => T,\n): T {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_runWithPriority(priorityLevel, fn);\n}\n\nexport function scheduleCallback(\n  reactPriorityLevel: ReactPriorityLevel,\n  callback: SchedulerCallback,\n  options: SchedulerCallbackOptions | void | null,\n) {\n  const priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);\n  return Scheduler_scheduleCallback(priorityLevel, callback, options);\n}\n\nexport function scheduleSyncCallback(callback: SchedulerCallback) {\n  // Push this callback into an internal queue. We'll flush these either in\n  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.\n  if (syncQueue === null) {\n    syncQueue = [callback];\n    // Flush the queue in the next tick, at the earliest.\n    immediateQueueCallbackNode = Scheduler_scheduleCallback(\n      Scheduler_ImmediatePriority,\n      flushSyncCallbackQueueImpl,\n    );\n  } else {\n    // Push onto existing queue. Don't need to schedule a callback because\n    // we already scheduled one when we created the queue.\n    syncQueue.push(callback);\n  }\n  return fakeCallbackNode;\n}\n\nexport function cancelCallback(callbackNode: mixed) {\n  if (callbackNode !== fakeCallbackNode) {\n    Scheduler_cancelCallback(callbackNode);\n  }\n}\n\nexport function flushSyncCallbackQueue() {\n  if (immediateQueueCallbackNode !== null) {\n    const node = immediateQueueCallbackNode;\n    immediateQueueCallbackNode = null;\n    Scheduler_cancelCallback(node);\n  }\n  flushSyncCallbackQueueImpl();\n}\n\nfunction flushSyncCallbackQueueImpl() {\n  if (!isFlushingSyncQueue && syncQueue !== null) {\n    // Prevent re-entrancy.\n    isFlushingSyncQueue = true;\n    let i = 0;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        setCurrentUpdateLanePriority(SyncLanePriority);\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n        isFlushingSyncQueue = false;\n      }\n    } else {\n      try {\n        const isSync = true;\n        const queue = syncQueue;\n        runWithPriority(ImmediatePriority, () => {\n          for (; i < queue.length; i++) {\n            let callback = queue[i];\n            do {\n              callback = callback(isSync);\n            } while (callback !== null);\n          }\n        });\n        syncQueue = null;\n      } catch (error) {\n        // If something throws, leave the remaining callbacks on the queue.\n        if (syncQueue !== null) {\n          syncQueue = syncQueue.slice(i + 1);\n        }\n        // Resume flushing in the next tick\n        Scheduler_scheduleCallback(\n          Scheduler_ImmediatePriority,\n          flushSyncCallbackQueue,\n        );\n        throw error;\n      } finally {\n        isFlushingSyncQueue = false;\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO: this is special because it gets imported during build.\nexport default '17.0.0-alpha.0';\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type TypeOfMode = number;\n\nexport const NoMode = 0b00000;\nexport const StrictMode = 0b00001;\n// TODO: Remove BlockingMode and ConcurrentMode by reading from the root\n// tag instead\nexport const BlockingMode = 0b00010;\nexport const ConcurrentMode = 0b00100;\nexport const ProfileMode = 0b01000;\nexport const DebugTracingMode = 0b10000;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\n\nconst {ReactCurrentBatchConfig} = ReactSharedInternals;\n\nexport const NoTransition = 0;\n\nexport function requestCurrentTransition(): number {\n  return ReactCurrentBatchConfig.transition;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst objectIs: (x: any, y: any) => boolean =\n  typeof Object.is === 'function' ? Object.is : is;\n\nexport default objectIs;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport is from './objectIs';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA: mixed, objB: mixed): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (\n    typeof objA !== 'object' ||\n    objA === null ||\n    typeof objB !== 'object' ||\n    objB === null\n  ) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (\n      !hasOwnProperty.call(objB, keysA[i]) ||\n      !is(objA[keysA[i]], objB[keysA[i]])\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default shallowEqual;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  HostComponent,\n  LazyComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  IndeterminateComponent,\n  ForwardRef,\n  SimpleMemoComponent,\n  Block,\n  ClassComponent,\n} from './ReactWorkTags';\nimport {\n  describeBuiltInComponentFrame,\n  describeFunctionComponentFrame,\n  describeClassComponentFrame,\n} from 'shared/ReactComponentStackFrame';\n\nfunction describeFiber(fiber: Fiber): string {\n  const owner: null | Function = __DEV__\n    ? fiber._debugOwner\n      ? fiber._debugOwner.type\n      : null\n    : null;\n  const source = __DEV__ ? fiber._debugSource : null;\n  switch (fiber.tag) {\n    case HostComponent:\n      return describeBuiltInComponentFrame(fiber.type, source, owner);\n    case LazyComponent:\n      return describeBuiltInComponentFrame('Lazy', source, owner);\n    case SuspenseComponent:\n      return describeBuiltInComponentFrame('Suspense', source, owner);\n    case SuspenseListComponent:\n      return describeBuiltInComponentFrame('SuspenseList', source, owner);\n    case FunctionComponent:\n    case IndeterminateComponent:\n    case SimpleMemoComponent:\n      return describeFunctionComponentFrame(fiber.type, source, owner);\n    case ForwardRef:\n      return describeFunctionComponentFrame(fiber.type.render, source, owner);\n    case Block:\n      return describeFunctionComponentFrame(fiber.type._render, source, owner);\n    case ClassComponent:\n      return describeClassComponentFrame(fiber.type, source, owner);\n    default:\n      return '';\n  }\n}\n\nexport function getStackByFiberInDevAndProd(workInProgress: Fiber): string {\n  try {\n    let info = '';\n    let node = workInProgress;\n    do {\n      info += describeFiber(node);\n      node = node.return;\n    } while (node);\n    return info;\n  } catch (x) {\n    return '\\nError generating stack: ' + x.message + '\\n' + x.stack;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\nimport getComponentName from 'shared/getComponentName';\n\nconst ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nexport let current: Fiber | null = null;\nexport let isRendering: boolean = false;\n\nexport function getCurrentFiberOwnerNameInDevOrNull(): string | null {\n  if (__DEV__) {\n    if (current === null) {\n      return null;\n    }\n    const owner = current._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return getComponentName(owner.type);\n    }\n  }\n  return null;\n}\n\nfunction getCurrentFiberStackInDev(): string {\n  if (__DEV__) {\n    if (current === null) {\n      return '';\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return getStackByFiberInDevAndProd(current);\n  }\n  return '';\n}\n\nexport function resetCurrentFiber() {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = null;\n    current = null;\n    isRendering = false;\n  }\n}\n\nexport function setCurrentFiber(fiber: Fiber) {\n  if (__DEV__) {\n    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;\n    current = fiber;\n    isRendering = false;\n  }\n}\n\nexport function setIsRendering(rendering: boolean) {\n  if (__DEV__) {\n    isRendering = rendering;\n  }\n}\n\nexport function getIsRendering() {\n  if (__DEV__) {\n    return isRendering;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function resolveDefaultProps(Component: any, baseProps: Object): Object {\n  if (Component && Component.defaultProps) {\n    // Resolve default props. Taken from ReactElement\n    const props = Object.assign({}, baseProps);\n    const defaultProps = Component.defaultProps;\n    for (const propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n    return props;\n  }\n  return baseProps;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nexport const MAX_SIGNED_31_BIT_INT = 1073741823;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\nimport type {Fiber, ContextDependency} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Lanes} from './ReactFiberLane';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\nimport {MAX_SIGNED_31_BIT_INT} from './MaxInts';\nimport {\n  ContextProvider,\n  ClassComponent,\n  DehydratedFragment,\n} from './ReactWorkTags';\nimport {\n  NoLanes,\n  NoTimestamp,\n  isSubsetOfLanes,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane';\n\nimport invariant from 'shared/invariant';\nimport is from 'shared/objectIs';\nimport {createUpdate, enqueueUpdate, ForceUpdate} from './ReactUpdateQueue.old';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\n\nconst valueCursor: StackCursor<mixed> = createCursor(null);\n\nlet rendererSigil;\nif (__DEV__) {\n  // Use this to detect multiple renderers using the same context\n  rendererSigil = {};\n}\n\nlet currentlyRenderingFiber: Fiber | null = null;\nlet lastContextDependency: ContextDependency<mixed> | null = null;\nlet lastContextWithAllBitsObserved: ReactContext<any> | null = null;\n\nlet isDisallowedContextReadInDEV: boolean = false;\n\nexport function resetContextDependencies(): void {\n  // This is called right before React yields execution, to ensure `readContext`\n  // cannot be called outside the render phase.\n  currentlyRenderingFiber = null;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function enterDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = true;\n  }\n}\n\nexport function exitDisallowedContextReadInDEV(): void {\n  if (__DEV__) {\n    isDisallowedContextReadInDEV = false;\n  }\n}\n\nexport function pushProvider<T>(providerFiber: Fiber, nextValue: T): void {\n  const context: ReactContext<T> = providerFiber.type._context;\n\n  if (isPrimaryRenderer) {\n    push(valueCursor, context._currentValue, providerFiber);\n\n    context._currentValue = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer !== undefined &&\n        context._currentRenderer !== null &&\n        context._currentRenderer !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer = rendererSigil;\n    }\n  } else {\n    push(valueCursor, context._currentValue2, providerFiber);\n\n    context._currentValue2 = nextValue;\n    if (__DEV__) {\n      if (\n        context._currentRenderer2 !== undefined &&\n        context._currentRenderer2 !== null &&\n        context._currentRenderer2 !== rendererSigil\n      ) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same context provider. This is currently unsupported.',\n        );\n      }\n      context._currentRenderer2 = rendererSigil;\n    }\n  }\n}\n\nexport function popProvider(providerFiber: Fiber): void {\n  const currentValue = valueCursor.current;\n\n  pop(valueCursor, providerFiber);\n\n  const context: ReactContext<any> = providerFiber.type._context;\n  if (isPrimaryRenderer) {\n    context._currentValue = currentValue;\n  } else {\n    context._currentValue2 = currentValue;\n  }\n}\n\nexport function calculateChangedBits<T>(\n  context: ReactContext<T>,\n  newValue: T,\n  oldValue: T,\n) {\n  if (is(oldValue, newValue)) {\n    // No change\n    return 0;\n  } else {\n    const changedBits =\n      typeof context._calculateChangedBits === 'function'\n        ? context._calculateChangedBits(oldValue, newValue)\n        : MAX_SIGNED_31_BIT_INT;\n\n    if (__DEV__) {\n      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {\n        console.error(\n          'calculateChangedBits: Expected the return value to be a ' +\n            '31-bit integer. Instead received: %s',\n          changedBits,\n        );\n      }\n    }\n    return changedBits | 0;\n  }\n}\n\nexport function scheduleWorkOnParentPath(\n  parent: Fiber | null,\n  renderLanes: Lanes,\n) {\n  // Update the child lanes of all the ancestors, including the alternates.\n  let node = parent;\n  while (node !== null) {\n    const alternate = node.alternate;\n    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n      node.childLanes = mergeLanes(node.childLanes, renderLanes);\n      if (alternate !== null) {\n        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n      }\n    } else if (\n      alternate !== null &&\n      !isSubsetOfLanes(alternate.childLanes, renderLanes)\n    ) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n    } else {\n      // Neither alternate was updated, which means the rest of the\n      // ancestor path already has sufficient priority.\n      break;\n    }\n    node = node.return;\n  }\n}\n\nexport function propagateContextChange(\n  workInProgress: Fiber,\n  context: ReactContext<mixed>,\n  changedBits: number,\n  renderLanes: Lanes,\n): void {\n  let fiber = workInProgress.child;\n  if (fiber !== null) {\n    // Set the return pointer of the child to the work-in-progress fiber.\n    fiber.return = workInProgress;\n  }\n  while (fiber !== null) {\n    let nextFiber;\n\n    // Visit this fiber.\n    const list = fiber.dependencies;\n    if (list !== null) {\n      nextFiber = fiber.child;\n\n      let dependency = list.firstContext;\n      while (dependency !== null) {\n        // Check if the context matches.\n        if (\n          dependency.context === context &&\n          (dependency.observedBits & changedBits) !== 0\n        ) {\n          // Match! Schedule an update on this fiber.\n\n          if (fiber.tag === ClassComponent) {\n            // Schedule a force update on the work-in-progress.\n            const update = createUpdate(\n              NoTimestamp,\n              pickArbitraryLane(renderLanes),\n            );\n            update.tag = ForceUpdate;\n            // TODO: Because we don't have a work-in-progress, this will add the\n            // update to the current fiber, too, which means it will persist even if\n            // this render is thrown away. Since it's a race condition, not sure it's\n            // worth fixing.\n            enqueueUpdate(fiber, update);\n          }\n          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n          const alternate = fiber.alternate;\n          if (alternate !== null) {\n            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n          }\n          scheduleWorkOnParentPath(fiber.return, renderLanes);\n\n          // Mark the updated lanes on the list, too.\n          list.lanes = mergeLanes(list.lanes, renderLanes);\n\n          // Since we already found a match, we can stop traversing the\n          // dependency list.\n          break;\n        }\n        dependency = dependency.next;\n      }\n    } else if (fiber.tag === ContextProvider) {\n      // Don't scan deeper if this is a matching provider\n      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n    } else if (\n      enableSuspenseServerRenderer &&\n      fiber.tag === DehydratedFragment\n    ) {\n      // If a dehydrated suspense boundary is in this subtree, we don't know\n      // if it will have any context consumers in it. The best we can do is\n      // mark it as having updates.\n      const parentSuspense = fiber.return;\n      invariant(\n        parentSuspense !== null,\n        'We just came from a parent so we must have had a parent. This is a bug in React.',\n      );\n      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n      const alternate = parentSuspense.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      // This is intentionally passing this fiber as the parent\n      // because we want to schedule this fiber as having work\n      // on its children. We'll use the childLanes on\n      // this fiber to indicate that a context has changed.\n      scheduleWorkOnParentPath(parentSuspense, renderLanes);\n      nextFiber = fiber.sibling;\n    } else {\n      // Traverse down.\n      nextFiber = fiber.child;\n    }\n\n    if (nextFiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      nextFiber.return = fiber;\n    } else {\n      // No child. Traverse to next sibling.\n      nextFiber = fiber;\n      while (nextFiber !== null) {\n        if (nextFiber === workInProgress) {\n          // We're back to the root of this subtree. Exit.\n          nextFiber = null;\n          break;\n        }\n        const sibling = nextFiber.sibling;\n        if (sibling !== null) {\n          // Set the return pointer of the sibling to the work-in-progress fiber.\n          sibling.return = nextFiber.return;\n          nextFiber = sibling;\n          break;\n        }\n        // No more siblings. Traverse up.\n        nextFiber = nextFiber.return;\n      }\n    }\n    fiber = nextFiber;\n  }\n}\n\nexport function prepareToReadContext(\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): void {\n  currentlyRenderingFiber = workInProgress;\n  lastContextDependency = null;\n  lastContextWithAllBitsObserved = null;\n\n  const dependencies = workInProgress.dependencies;\n  if (dependencies !== null) {\n    const firstContext = dependencies.firstContext;\n    if (firstContext !== null) {\n      if (includesSomeLane(dependencies.lanes, renderLanes)) {\n        // Context list has a pending update. Mark that this fiber performed work.\n        markWorkInProgressReceivedUpdate();\n      }\n      // Reset the work-in-progress list\n      dependencies.firstContext = null;\n    }\n  }\n}\n\nexport function readContext<T>(\n  context: ReactContext<T>,\n  observedBits: void | number | boolean,\n): T {\n  if (__DEV__) {\n    // This warning would fire if you read context inside a Hook like useMemo.\n    // Unlike the class check below, it's not enforced in production for perf.\n    if (isDisallowedContextReadInDEV) {\n      console.error(\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n    }\n  }\n\n  if (lastContextWithAllBitsObserved === context) {\n    // Nothing to do. We already observe everything in this context.\n  } else if (observedBits === false || observedBits === 0) {\n    // Do not observe any updates.\n  } else {\n    let resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.\n    if (\n      typeof observedBits !== 'number' ||\n      observedBits === MAX_SIGNED_31_BIT_INT\n    ) {\n      // Observe all updates.\n      lastContextWithAllBitsObserved = ((context: any): ReactContext<mixed>);\n      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;\n    } else {\n      resolvedObservedBits = observedBits;\n    }\n\n    const contextItem = {\n      context: ((context: any): ReactContext<mixed>),\n      observedBits: resolvedObservedBits,\n      next: null,\n    };\n\n    if (lastContextDependency === null) {\n      invariant(\n        currentlyRenderingFiber !== null,\n        'Context can only be read while React is rendering. ' +\n          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n          'In function components, you can read it directly in the function body, but not ' +\n          'inside Hooks like useReducer() or useMemo().',\n      );\n\n      // This is the first dependency for this component. Create a new list.\n      lastContextDependency = contextItem;\n      currentlyRenderingFiber.dependencies = {\n        lanes: NoLanes,\n        firstContext: contextItem,\n        responders: null,\n      };\n    } else {\n      // Append a new context item.\n      lastContextDependency = lastContextDependency.next = contextItem;\n    }\n  }\n  return isPrimaryRenderer ? context._currentValue : context._currentValue2;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n// UpdateQueue is a linked list of prioritized updates.\n//\n// Like fibers, update queues come in pairs: a current queue, which represents\n// the visible state of the screen, and a work-in-progress queue, which can be\n// mutated and processed asynchronously before it is committed — a form of\n// double buffering. If a work-in-progress render is discarded before finishing,\n// we create a new work-in-progress by cloning the current queue.\n//\n// Both queues share a persistent, singly-linked list structure. To schedule an\n// update, we append it to the end of both queues. Each queue maintains a\n// pointer to first update in the persistent list that hasn't been processed.\n// The work-in-progress pointer always has a position equal to or greater than\n// the current queue, since we always work on that one. The current queue's\n// pointer is only updated during the commit phase, when we swap in the\n// work-in-progress.\n//\n// For example:\n//\n//   Current pointer:           A - B - C - D - E - F\n//   Work-in-progress pointer:              D - E - F\n//                                          ^\n//                                          The work-in-progress queue has\n//                                          processed more updates than current.\n//\n// The reason we append to both queues is because otherwise we might drop\n// updates without ever processing them. For example, if we only add updates to\n// the work-in-progress queue, some updates could be lost whenever a work-in\n// -progress render restarts by cloning from current. Similarly, if we only add\n// updates to the current queue, the updates will be lost whenever an already\n// in-progress queue commits and swaps with the current queue. However, by\n// adding to both queues, we guarantee that the update will be part of the next\n// work-in-progress. (And because the work-in-progress queue becomes the\n// current queue once it commits, there's no danger of applying the same\n// update twice.)\n//\n// Prioritization\n// --------------\n//\n// Updates are not sorted by priority, but by insertion; new updates are always\n// appended to the end of the list.\n//\n// The priority is still important, though. When processing the update queue\n// during the render phase, only the updates with sufficient priority are\n// included in the result. If we skip an update because it has insufficient\n// priority, it remains in the queue to be processed later, during a lower\n// priority render. Crucially, all updates subsequent to a skipped update also\n// remain in the queue *regardless of their priority*. That means high priority\n// updates are sometimes processed twice, at two separate priorities. We also\n// keep track of a base state, that represents the state before the first\n// update in the queue is applied.\n//\n// For example:\n//\n//   Given a base state of '', and the following queue of updates\n//\n//     A1 - B2 - C1 - D2\n//\n//   where the number indicates the priority, and the update is applied to the\n//   previous state by appending a letter, React will process these updates as\n//   two separate renders, one per distinct priority level:\n//\n//   First render, at priority 1:\n//     Base state: ''\n//     Updates: [A1, C1]\n//     Result state: 'AC'\n//\n//   Second render, at priority 2:\n//     Base state: 'A'            <-  The base state does not include C1,\n//                                    because B2 was skipped.\n//     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2\n//     Result state: 'ABCD'\n//\n// Because we process updates in insertion order, and rebase high priority\n// updates when preceding updates are skipped, the final result is deterministic\n// regardless of priority. Intermediate state may vary according to system\n// resources, but the final state is always the same.\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\n\nimport {NoLane, NoLanes, isSubsetOfLanes, mergeLanes} from './ReactFiberLane';\nimport {\n  enterDisallowedContextReadInDEV,\n  exitDisallowedContextReadInDEV,\n} from './ReactFiberNewContext.old';\nimport {Callback, ShouldCapture, DidCapture} from './ReactFiberFlags';\n\nimport {debugRenderPhaseSideEffectsForStrictMode} from 'shared/ReactFeatureFlags';\n\nimport {StrictMode} from './ReactTypeOfMode';\nimport {markSkippedUpdateLanes} from './ReactFiberWorkLoop.old';\n\nimport invariant from 'shared/invariant';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nexport type Update<State> = {|\n  // TODO: Temporary field. Will remove this by storing a map of\n  // transition -> event time on the root.\n  eventTime: number,\n  lane: Lane,\n\n  tag: 0 | 1 | 2 | 3,\n  payload: any,\n  callback: (() => mixed) | null,\n\n  next: Update<State> | null,\n|};\n\ntype SharedQueue<State> = {|\n  pending: Update<State> | null,\n|};\n\nexport type UpdateQueue<State> = {|\n  baseState: State,\n  firstBaseUpdate: Update<State> | null,\n  lastBaseUpdate: Update<State> | null,\n  shared: SharedQueue<State>,\n  effects: Array<Update<State>> | null,\n|};\n\nexport const UpdateState = 0;\nexport const ReplaceState = 1;\nexport const ForceUpdate = 2;\nexport const CaptureUpdate = 3;\n\n// Global state that is reset at the beginning of calling `processUpdateQueue`.\n// It should only be read right after calling `processUpdateQueue`, via\n// `checkHasForceUpdateAfterProcessing`.\nlet hasForceUpdate = false;\n\nlet didWarnUpdateInsideUpdate;\nlet currentlyProcessingQueue;\nexport let resetCurrentlyProcessingQueue;\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n  currentlyProcessingQueue = null;\n  resetCurrentlyProcessingQueue = () => {\n    currentlyProcessingQueue = null;\n  };\n}\n\nexport function initializeUpdateQueue<State>(fiber: Fiber): void {\n  const queue: UpdateQueue<State> = {\n    baseState: fiber.memoizedState,\n    firstBaseUpdate: null,\n    lastBaseUpdate: null,\n    shared: {\n      pending: null,\n    },\n    effects: null,\n  };\n  fiber.updateQueue = queue;\n}\n\nexport function cloneUpdateQueue<State>(\n  current: Fiber,\n  workInProgress: Fiber,\n): void {\n  // Clone the update queue from current. Unless it's already a clone.\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n  const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n  if (queue === currentQueue) {\n    const clone: UpdateQueue<State> = {\n      baseState: currentQueue.baseState,\n      firstBaseUpdate: currentQueue.firstBaseUpdate,\n      lastBaseUpdate: currentQueue.lastBaseUpdate,\n      shared: currentQueue.shared,\n      effects: currentQueue.effects,\n    };\n    workInProgress.updateQueue = clone;\n  }\n}\n\nexport function createUpdate(eventTime: number, lane: Lane): Update<*> {\n  const update: Update<*> = {\n    eventTime,\n    lane,\n\n    tag: UpdateState,\n    payload: null,\n    callback: null,\n\n    next: null,\n  };\n  return update;\n}\n\nexport function enqueueUpdate<State>(fiber: Fiber, update: Update<State>) {\n  const updateQueue = fiber.updateQueue;\n  if (updateQueue === null) {\n    // Only occurs if the fiber has been unmounted.\n    return;\n  }\n\n  const sharedQueue: SharedQueue<State> = (updateQueue: any).shared;\n  const pending = sharedQueue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  sharedQueue.pending = update;\n\n  if (__DEV__) {\n    if (\n      currentlyProcessingQueue === sharedQueue &&\n      !didWarnUpdateInsideUpdate\n    ) {\n      console.error(\n        'An update (setState, replaceState, or forceUpdate) was scheduled ' +\n          'from inside an update function. Update functions should be pure, ' +\n          'with zero side-effects. Consider using componentDidUpdate or a ' +\n          'callback.',\n      );\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n}\n\nexport function enqueueCapturedUpdate<State>(\n  workInProgress: Fiber,\n  capturedUpdate: Update<State>,\n) {\n  // Captured updates are updates that are thrown by a child during the render\n  // phase. They should be discarded if the render is aborted. Therefore,\n  // we should only put them on the work-in-progress queue, not the current one.\n  let queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  // Check if the work-in-progress queue is a clone.\n  const current = workInProgress.alternate;\n  if (current !== null) {\n    const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n    if (queue === currentQueue) {\n      // The work-in-progress queue is the same as current. This happens when\n      // we bail out on a parent fiber that then captures an error thrown by\n      // a child. Since we want to append the update only to the work-in\n      // -progress queue, we need to clone the updates. We usually clone during\n      // processUpdateQueue, but that didn't happen in this case because we\n      // skipped over the parent when we bailed out.\n      let newFirst = null;\n      let newLast = null;\n      const firstBaseUpdate = queue.firstBaseUpdate;\n      if (firstBaseUpdate !== null) {\n        // Loop through the updates and clone them.\n        let update = firstBaseUpdate;\n        do {\n          const clone: Update<State> = {\n            eventTime: update.eventTime,\n            lane: update.lane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          if (newLast === null) {\n            newFirst = newLast = clone;\n          } else {\n            newLast.next = clone;\n            newLast = clone;\n          }\n          update = update.next;\n        } while (update !== null);\n\n        // Append the captured update the end of the cloned list.\n        if (newLast === null) {\n          newFirst = newLast = capturedUpdate;\n        } else {\n          newLast.next = capturedUpdate;\n          newLast = capturedUpdate;\n        }\n      } else {\n        // There are no base updates.\n        newFirst = newLast = capturedUpdate;\n      }\n      queue = {\n        baseState: currentQueue.baseState,\n        firstBaseUpdate: newFirst,\n        lastBaseUpdate: newLast,\n        shared: currentQueue.shared,\n        effects: currentQueue.effects,\n      };\n      workInProgress.updateQueue = queue;\n      return;\n    }\n  }\n\n  // Append the update to the end of the list.\n  const lastBaseUpdate = queue.lastBaseUpdate;\n  if (lastBaseUpdate === null) {\n    queue.firstBaseUpdate = capturedUpdate;\n  } else {\n    lastBaseUpdate.next = capturedUpdate;\n  }\n  queue.lastBaseUpdate = capturedUpdate;\n}\n\nfunction getStateFromUpdate<State>(\n  workInProgress: Fiber,\n  queue: UpdateQueue<State>,\n  update: Update<State>,\n  prevState: State,\n  nextProps: any,\n  instance: any,\n): any {\n  switch (update.tag) {\n    case ReplaceState: {\n      const payload = update.payload;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        const nextState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictMode\n          ) {\n            disableLogs();\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              reenableLogs();\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n        return nextState;\n      }\n      // State object\n      return payload;\n    }\n    case CaptureUpdate: {\n      workInProgress.flags =\n        (workInProgress.flags & ~ShouldCapture) | DidCapture;\n    }\n    // Intentional fallthrough\n    case UpdateState: {\n      const payload = update.payload;\n      let partialState;\n      if (typeof payload === 'function') {\n        // Updater function\n        if (__DEV__) {\n          enterDisallowedContextReadInDEV();\n        }\n        partialState = payload.call(instance, prevState, nextProps);\n        if (__DEV__) {\n          if (\n            debugRenderPhaseSideEffectsForStrictMode &&\n            workInProgress.mode & StrictMode\n          ) {\n            disableLogs();\n            try {\n              payload.call(instance, prevState, nextProps);\n            } finally {\n              reenableLogs();\n            }\n          }\n          exitDisallowedContextReadInDEV();\n        }\n      } else {\n        // Partial state object\n        partialState = payload;\n      }\n      if (partialState === null || partialState === undefined) {\n        // Null and undefined are treated as no-ops.\n        return prevState;\n      }\n      // Merge the partial state and the previous state.\n      return Object.assign({}, prevState, partialState);\n    }\n    case ForceUpdate: {\n      hasForceUpdate = true;\n      return prevState;\n    }\n  }\n  return prevState;\n}\n\nexport function processUpdateQueue<State>(\n  workInProgress: Fiber,\n  props: any,\n  instance: any,\n  renderLanes: Lanes,\n): void {\n  // This is always non-null on a ClassComponent or HostRoot\n  const queue: UpdateQueue<State> = (workInProgress.updateQueue: any);\n\n  hasForceUpdate = false;\n\n  if (__DEV__) {\n    currentlyProcessingQueue = queue.shared;\n  }\n\n  let firstBaseUpdate = queue.firstBaseUpdate;\n  let lastBaseUpdate = queue.lastBaseUpdate;\n\n  // Check if there are pending updates. If so, transfer them to the base queue.\n  let pendingQueue = queue.shared.pending;\n  if (pendingQueue !== null) {\n    queue.shared.pending = null;\n\n    // The pending queue is circular. Disconnect the pointer between first\n    // and last so that it's non-circular.\n    const lastPendingUpdate = pendingQueue;\n    const firstPendingUpdate = lastPendingUpdate.next;\n    lastPendingUpdate.next = null;\n    // Append pending updates to base queue\n    if (lastBaseUpdate === null) {\n      firstBaseUpdate = firstPendingUpdate;\n    } else {\n      lastBaseUpdate.next = firstPendingUpdate;\n    }\n    lastBaseUpdate = lastPendingUpdate;\n\n    // If there's a current queue, and it's different from the base queue, then\n    // we need to transfer the updates to that queue, too. Because the base\n    // queue is a singly-linked list with no cycles, we can append to both\n    // lists and take advantage of structural sharing.\n    // TODO: Pass `current` as argument\n    const current = workInProgress.alternate;\n    if (current !== null) {\n      // This is always non-null on a ClassComponent or HostRoot\n      const currentQueue: UpdateQueue<State> = (current.updateQueue: any);\n      const currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n      if (currentLastBaseUpdate !== lastBaseUpdate) {\n        if (currentLastBaseUpdate === null) {\n          currentQueue.firstBaseUpdate = firstPendingUpdate;\n        } else {\n          currentLastBaseUpdate.next = firstPendingUpdate;\n        }\n        currentQueue.lastBaseUpdate = lastPendingUpdate;\n      }\n    }\n  }\n\n  // These values may change as we process the queue.\n  if (firstBaseUpdate !== null) {\n    // Iterate through the list of updates to compute the result.\n    let newState = queue.baseState;\n    // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n    // from the original lanes.\n    let newLanes = NoLanes;\n\n    let newBaseState = null;\n    let newFirstBaseUpdate = null;\n    let newLastBaseUpdate = null;\n\n    let update = firstBaseUpdate;\n    do {\n      const updateLane = update.lane;\n      const updateEventTime = update.eventTime;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<State> = {\n          eventTime: updateEventTime,\n          lane: updateLane,\n\n          tag: update.tag,\n          payload: update.payload,\n          callback: update.callback,\n\n          next: null,\n        };\n        if (newLastBaseUpdate === null) {\n          newFirstBaseUpdate = newLastBaseUpdate = clone;\n          newBaseState = newState;\n        } else {\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        newLanes = mergeLanes(newLanes, updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newLastBaseUpdate !== null) {\n          const clone: Update<State> = {\n            eventTime: updateEventTime,\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n\n            tag: update.tag,\n            payload: update.payload,\n            callback: update.callback,\n\n            next: null,\n          };\n          newLastBaseUpdate = newLastBaseUpdate.next = clone;\n        }\n\n        // Process this update.\n        newState = getStateFromUpdate(\n          workInProgress,\n          queue,\n          update,\n          newState,\n          props,\n          instance,\n        );\n        const callback = update.callback;\n        if (callback !== null) {\n          workInProgress.flags |= Callback;\n          const effects = queue.effects;\n          if (effects === null) {\n            queue.effects = [update];\n          } else {\n            effects.push(update);\n          }\n        }\n      }\n      update = update.next;\n      if (update === null) {\n        pendingQueue = queue.shared.pending;\n        if (pendingQueue === null) {\n          break;\n        } else {\n          // An update was scheduled from inside a reducer. Add the new\n          // pending updates to the end of the list and keep processing.\n          const lastPendingUpdate = pendingQueue;\n          // Intentionally unsound. Pending updates form a circular list, but we\n          // unravel them when transferring them to the base queue.\n          const firstPendingUpdate = ((lastPendingUpdate.next: any): Update<State>);\n          lastPendingUpdate.next = null;\n          update = firstPendingUpdate;\n          queue.lastBaseUpdate = lastPendingUpdate;\n          queue.shared.pending = null;\n        }\n      }\n    } while (true);\n\n    if (newLastBaseUpdate === null) {\n      newBaseState = newState;\n    }\n\n    queue.baseState = ((newBaseState: any): State);\n    queue.firstBaseUpdate = newFirstBaseUpdate;\n    queue.lastBaseUpdate = newLastBaseUpdate;\n\n    // Set the remaining expiration time to be whatever is remaining in the queue.\n    // This should be fine because the only two other things that contribute to\n    // expiration time are props and context. We're already in the middle of the\n    // begin phase by the time we start processing the queue, so we've already\n    // dealt with the props. Context in components that specify\n    // shouldComponentUpdate is tricky; but we'll have to account for\n    // that regardless.\n    markSkippedUpdateLanes(newLanes);\n    workInProgress.lanes = newLanes;\n    workInProgress.memoizedState = newState;\n  }\n\n  if (__DEV__) {\n    currentlyProcessingQueue = null;\n  }\n}\n\nfunction callCallback(callback, context) {\n  invariant(\n    typeof callback === 'function',\n    'Invalid argument passed as callback. Expected a function. Instead ' +\n      'received: %s',\n    callback,\n  );\n  callback.call(context);\n}\n\nexport function resetHasForceUpdateBeforeProcessing() {\n  hasForceUpdate = false;\n}\n\nexport function checkHasForceUpdateAfterProcessing(): boolean {\n  return hasForceUpdate;\n}\n\nexport function commitUpdateQueue<State>(\n  finishedWork: Fiber,\n  finishedQueue: UpdateQueue<State>,\n  instance: any,\n): void {\n  // Commit the effects\n  const effects = finishedQueue.effects;\n  finishedQueue.effects = null;\n  if (effects !== null) {\n    for (let i = 0; i < effects.length; i++) {\n      const effect = effects[i];\n      const callback = effect.callback;\n      if (callback !== null) {\n        effect.callback = null;\n        callCallback(callback, instance);\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\n\nimport * as React from 'react';\nimport {Update, Snapshot} from './ReactFiberFlags';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  warnAboutDeprecatedLifecycles,\n} from 'shared/ReactFeatureFlags';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {isMounted} from './ReactFiberTreeReflection';\nimport {get as getInstance, set as setInstance} from 'shared/ReactInstanceMap';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport {REACT_CONTEXT_TYPE, REACT_PROVIDER_TYPE} from 'shared/ReactSymbols';\n\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {DebugTracingMode, StrictMode} from './ReactTypeOfMode';\n\nimport {\n  enqueueUpdate,\n  processUpdateQueue,\n  checkHasForceUpdateAfterProcessing,\n  resetHasForceUpdateBeforeProcessing,\n  createUpdate,\n  ReplaceState,\n  ForceUpdate,\n  initializeUpdateQueue,\n  cloneUpdateQueue,\n} from './ReactUpdateQueue.old';\nimport {NoLanes} from './ReactFiberLane';\nimport {\n  cacheContext,\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged,\n  emptyContextObject,\n} from './ReactFiberContext.old';\nimport {readContext} from './ReactFiberNewContext.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n} from './ReactFiberWorkLoop.old';\nimport {logForceUpdateScheduled, logStateUpdateScheduled} from './DebugTracing';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\nimport {\n  markForceUpdateScheduled,\n  markStateUpdateScheduled,\n} from './SchedulingProfiler';\n\nconst fakeInternalInstance = {};\nconst isArray = Array.isArray;\n\n// React.Component uses a shared frozen object by default.\n// We'll use it to determine whether we need to initialize legacy refs.\nexport const emptyRefsObject = new React.Component().refs;\n\nlet didWarnAboutStateAssignmentForComponent;\nlet didWarnAboutUninitializedState;\nlet didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\nlet didWarnAboutLegacyLifecyclesAndDerivedState;\nlet didWarnAboutUndefinedDerivedState;\nlet warnOnUndefinedDerivedState;\nlet warnOnInvalidCallback;\nlet didWarnAboutDirectlyAssigningPropsToState;\nlet didWarnAboutContextTypeAndContextTypes;\nlet didWarnAboutInvalidateContextType;\n\nif (__DEV__) {\n  didWarnAboutStateAssignmentForComponent = new Set();\n  didWarnAboutUninitializedState = new Set();\n  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n  didWarnAboutDirectlyAssigningPropsToState = new Set();\n  didWarnAboutUndefinedDerivedState = new Set();\n  didWarnAboutContextTypeAndContextTypes = new Set();\n  didWarnAboutInvalidateContextType = new Set();\n\n  const didWarnOnInvalidCallback = new Set();\n\n  warnOnInvalidCallback = function(callback: mixed, callerName: string) {\n    if (callback === null || typeof callback === 'function') {\n      return;\n    }\n    const key = callerName + '_' + (callback: any);\n    if (!didWarnOnInvalidCallback.has(key)) {\n      didWarnOnInvalidCallback.add(key);\n      console.error(\n        '%s(...): Expected the last optional `callback` argument to be a ' +\n          'function. Instead received: %s.',\n        callerName,\n        callback,\n      );\n    }\n  };\n\n  warnOnUndefinedDerivedState = function(type, partialState) {\n    if (partialState === undefined) {\n      const componentName = getComponentName(type) || 'Component';\n      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n        didWarnAboutUndefinedDerivedState.add(componentName);\n        console.error(\n          '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +\n            'You have returned undefined.',\n          componentName,\n        );\n      }\n    }\n  };\n\n  // This is so gross but it's at least non-critical and can be removed if\n  // it causes problems. This is meant to give a nicer error message for\n  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n  // ...)) which otherwise throws a \"_processChildContext is not a function\"\n  // exception.\n  Object.defineProperty(fakeInternalInstance, '_processChildContext', {\n    enumerable: false,\n    value: function() {\n      invariant(\n        false,\n        '_processChildContext is not available in React 16+. This likely ' +\n          'means you have multiple copies of React and are attempting to nest ' +\n          'a React 15 tree inside a React 16 tree using ' +\n          \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n          'to make sure you have only one copy of React (and ideally, switch ' +\n          'to ReactDOM.createPortal).',\n      );\n    },\n  });\n  Object.freeze(fakeInternalInstance);\n}\n\nexport function applyDerivedStateFromProps(\n  workInProgress: Fiber,\n  ctor: any,\n  getDerivedStateFromProps: (props: any, state: any) => any,\n  nextProps: any,\n) {\n  const prevState = workInProgress.memoizedState;\n\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        // Invoke the function an extra time to help detect side-effects.\n        getDerivedStateFromProps(nextProps, prevState);\n      } finally {\n        reenableLogs();\n      }\n    }\n  }\n\n  const partialState = getDerivedStateFromProps(nextProps, prevState);\n\n  if (__DEV__) {\n    warnOnUndefinedDerivedState(ctor, partialState);\n  }\n  // Merge the partial state and the previous state.\n  const memoizedState =\n    partialState === null || partialState === undefined\n      ? prevState\n      : Object.assign({}, prevState, partialState);\n  workInProgress.memoizedState = memoizedState;\n\n  // Once the update queue is empty, persist the derived state onto the\n  // base state.\n  if (workInProgress.lanes === NoLanes) {\n    // Queue is always non-null for classes\n    const updateQueue: UpdateQueue<any> = (workInProgress.updateQueue: any);\n    updateQueue.baseState = memoizedState;\n  }\n}\n\nconst classComponentUpdater = {\n  isMounted,\n  enqueueSetState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.payload = payload;\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueReplaceState(inst, payload, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ReplaceState;\n    update.payload = payload;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logStateUpdateScheduled(name, lane, payload);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markStateUpdateScheduled(fiber, lane);\n    }\n  },\n  enqueueForceUpdate(inst, callback) {\n    const fiber = getInstance(inst);\n    const eventTime = requestEventTime();\n    const lane = requestUpdateLane(fiber);\n\n    const update = createUpdate(eventTime, lane);\n    update.tag = ForceUpdate;\n\n    if (callback !== undefined && callback !== null) {\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      update.callback = callback;\n    }\n\n    enqueueUpdate(fiber, update);\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (fiber.mode & DebugTracingMode) {\n          const name = getComponentName(fiber.type) || 'Unknown';\n          logForceUpdateScheduled(name, lane);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markForceUpdateScheduled(fiber, lane);\n    }\n  },\n};\n\nfunction checkShouldComponentUpdate(\n  workInProgress,\n  ctor,\n  oldProps,\n  newProps,\n  oldState,\n  newState,\n  nextContext,\n) {\n  const instance = workInProgress.stateNode;\n  if (typeof instance.shouldComponentUpdate === 'function') {\n    if (__DEV__) {\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          // Invoke the function an extra time to help detect side-effects.\n          instance.shouldComponentUpdate(newProps, newState, nextContext);\n        } finally {\n          reenableLogs();\n        }\n      }\n    }\n    const shouldUpdate = instance.shouldComponentUpdate(\n      newProps,\n      newState,\n      nextContext,\n    );\n\n    if (__DEV__) {\n      if (shouldUpdate === undefined) {\n        console.error(\n          '%s.shouldComponentUpdate(): Returned undefined instead of a ' +\n            'boolean value. Make sure to return true or false.',\n          getComponentName(ctor) || 'Component',\n        );\n      }\n    }\n\n    return shouldUpdate;\n  }\n\n  if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n    return (\n      !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n    );\n  }\n\n  return true;\n}\n\nfunction checkClassInstance(workInProgress: Fiber, ctor: any, newProps: any) {\n  const instance = workInProgress.stateNode;\n  if (__DEV__) {\n    const name = getComponentName(ctor) || 'Component';\n    const renderPresent = instance.render;\n\n    if (!renderPresent) {\n      if (ctor.prototype && typeof ctor.prototype.render === 'function') {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: did you accidentally return an object from the constructor?',\n          name,\n        );\n      } else {\n        console.error(\n          '%s(...): No `render` method found on the returned component ' +\n            'instance: you may have forgotten to define `render`.',\n          name,\n        );\n      }\n    }\n\n    if (\n      instance.getInitialState &&\n      !instance.getInitialState.isReactClassApproved &&\n      !instance.state\n    ) {\n      console.error(\n        'getInitialState was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Did you mean to define a state property instead?',\n        name,\n      );\n    }\n    if (\n      instance.getDefaultProps &&\n      !instance.getDefaultProps.isReactClassApproved\n    ) {\n      console.error(\n        'getDefaultProps was defined on %s, a plain JavaScript class. ' +\n          'This is only supported for classes created using React.createClass. ' +\n          'Use a static property to define defaultProps instead.',\n        name,\n      );\n    }\n    if (instance.propTypes) {\n      console.error(\n        'propTypes was defined as an instance property on %s. Use a static ' +\n          'property to define propTypes instead.',\n        name,\n      );\n    }\n    if (instance.contextType) {\n      console.error(\n        'contextType was defined as an instance property on %s. Use a static ' +\n          'property to define contextType instead.',\n        name,\n      );\n    }\n\n    if (disableLegacyContext) {\n      if (ctor.childContextTypes) {\n        console.error(\n          '%s uses the legacy childContextTypes API which is no longer supported. ' +\n            'Use React.createContext() instead.',\n          name,\n        );\n      }\n      if (ctor.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with static contextType instead.',\n          name,\n        );\n      }\n    } else {\n      if (instance.contextTypes) {\n        console.error(\n          'contextTypes was defined as an instance property on %s. Use a static ' +\n            'property to define contextTypes instead.',\n          name,\n        );\n      }\n\n      if (\n        ctor.contextType &&\n        ctor.contextTypes &&\n        !didWarnAboutContextTypeAndContextTypes.has(ctor)\n      ) {\n        didWarnAboutContextTypeAndContextTypes.add(ctor);\n        console.error(\n          '%s declares both contextTypes and contextType static properties. ' +\n            'The legacy contextTypes property will be ignored.',\n          name,\n        );\n      }\n    }\n\n    if (typeof instance.componentShouldUpdate === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +\n          'The name is phrased as a question because the function is ' +\n          'expected to return a value.',\n        name,\n      );\n    }\n    if (\n      ctor.prototype &&\n      ctor.prototype.isPureReactComponent &&\n      typeof instance.shouldComponentUpdate !== 'undefined'\n    ) {\n      console.error(\n        '%s has a method called shouldComponentUpdate(). ' +\n          'shouldComponentUpdate should not be used when extending React.PureComponent. ' +\n          'Please extend React.Component if shouldComponentUpdate is used.',\n        getComponentName(ctor) || 'A pure component',\n      );\n    }\n    if (typeof instance.componentDidUnmount === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidUnmount(). But there is no such lifecycle method. ' +\n          'Did you mean componentWillUnmount()?',\n        name,\n      );\n    }\n    if (typeof instance.componentDidReceiveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentDidReceiveProps(). But there is no such lifecycle method. ' +\n          'If you meant to update the state in response to changing props, ' +\n          'use componentWillReceiveProps(). If you meant to fetch data or ' +\n          'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',\n        name,\n      );\n    }\n    if (typeof instance.componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',\n        name,\n      );\n    }\n    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {\n      console.error(\n        '%s has a method called ' +\n          'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',\n        name,\n      );\n    }\n    const hasMutatedProps = instance.props !== newProps;\n    if (instance.props !== undefined && hasMutatedProps) {\n      console.error(\n        '%s(...): When calling super() in `%s`, make sure to pass ' +\n          \"up the same props that your component's constructor was passed.\",\n        name,\n        name,\n      );\n    }\n    if (instance.defaultProps) {\n      console.error(\n        'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +\n          ' Instead, define defaultProps as a static property on %s.',\n        name,\n        name,\n      );\n    }\n\n    if (\n      typeof instance.getSnapshotBeforeUpdate === 'function' &&\n      typeof instance.componentDidUpdate !== 'function' &&\n      !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n    ) {\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n      console.error(\n        '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +\n          'This component defines getSnapshotBeforeUpdate() only.',\n        getComponentName(ctor),\n      );\n    }\n\n    if (typeof instance.getDerivedStateFromProps === 'function') {\n      console.error(\n        '%s: getDerivedStateFromProps() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof instance.getDerivedStateFromError === 'function') {\n      console.error(\n        '%s: getDerivedStateFromError() is defined as an instance method ' +\n          'and will be ignored. Instead, declare it as a static method.',\n        name,\n      );\n    }\n    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {\n      console.error(\n        '%s: getSnapshotBeforeUpdate() is defined as a static method ' +\n          'and will be ignored. Instead, declare it as an instance method.',\n        name,\n      );\n    }\n    const state = instance.state;\n    if (state && (typeof state !== 'object' || isArray(state))) {\n      console.error('%s.state: must be set to an object or null', name);\n    }\n    if (\n      typeof instance.getChildContext === 'function' &&\n      typeof ctor.childContextTypes !== 'object'\n    ) {\n      console.error(\n        '%s.getChildContext(): childContextTypes must be defined in order to ' +\n          'use getChildContext().',\n        name,\n      );\n    }\n  }\n}\n\nfunction adoptClassInstance(workInProgress: Fiber, instance: any): void {\n  instance.updater = classComponentUpdater;\n  workInProgress.stateNode = instance;\n  // The instance needs access to the fiber so that it can schedule updates\n  setInstance(instance, workInProgress);\n  if (__DEV__) {\n    instance._reactInternalInstance = fakeInternalInstance;\n  }\n}\n\nfunction constructClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  props: any,\n): any {\n  let isLegacyContextConsumer = false;\n  let unmaskedContext = emptyContextObject;\n  let context = emptyContextObject;\n  const contextType = ctor.contextType;\n\n  if (__DEV__) {\n    if ('contextType' in ctor) {\n      const isValid =\n        // Allow null for conditional declaration\n        contextType === null ||\n        (contextType !== undefined &&\n          contextType.$$typeof === REACT_CONTEXT_TYPE &&\n          contextType._context === undefined); // Not a <Context.Consumer>\n\n      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n        didWarnAboutInvalidateContextType.add(ctor);\n\n        let addendum = '';\n        if (contextType === undefined) {\n          addendum =\n            ' However, it is set to undefined. ' +\n            'This can be caused by a typo or by mixing up named and default imports. ' +\n            'This can also happen due to a circular dependency, so ' +\n            'try moving the createContext() call to a separate file.';\n        } else if (typeof contextType !== 'object') {\n          addendum = ' However, it is set to a ' + typeof contextType + '.';\n        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n          addendum = ' Did you accidentally pass the Context.Provider instead?';\n        } else if (contextType._context !== undefined) {\n          // <Context.Consumer>\n          addendum = ' Did you accidentally pass the Context.Consumer instead?';\n        } else {\n          addendum =\n            ' However, it is set to an object with keys {' +\n            Object.keys(contextType).join(', ') +\n            '}.';\n        }\n        console.error(\n          '%s defines an invalid contextType. ' +\n            'contextType should point to the Context object returned by React.createContext().%s',\n          getComponentName(ctor) || 'Component',\n          addendum,\n        );\n      }\n    }\n  }\n\n  if (typeof contextType === 'object' && contextType !== null) {\n    context = readContext((contextType: any));\n  } else if (!disableLegacyContext) {\n    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    const contextTypes = ctor.contextTypes;\n    isLegacyContextConsumer =\n      contextTypes !== null && contextTypes !== undefined;\n    context = isLegacyContextConsumer\n      ? getMaskedContext(workInProgress, unmaskedContext)\n      : emptyContextObject;\n  }\n\n  // Instantiate twice to help detect side-effects.\n  if (__DEV__) {\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        new ctor(props, context); // eslint-disable-line no-new\n      } finally {\n        reenableLogs();\n      }\n    }\n  }\n\n  const instance = new ctor(props, context);\n  const state = (workInProgress.memoizedState =\n    instance.state !== null && instance.state !== undefined\n      ? instance.state\n      : null);\n  adoptClassInstance(workInProgress, instance);\n\n  if (__DEV__) {\n    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n      const componentName = getComponentName(ctor) || 'Component';\n      if (!didWarnAboutUninitializedState.has(componentName)) {\n        didWarnAboutUninitializedState.add(componentName);\n        console.error(\n          '`%s` uses `getDerivedStateFromProps` but its initial state is ' +\n            '%s. This is not recommended. Instead, define the initial state by ' +\n            'assigning an object to `this.state` in the constructor of `%s`. ' +\n            'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',\n          componentName,\n          instance.state === null ? 'null' : 'undefined',\n          componentName,\n        );\n      }\n    }\n\n    // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n    // Warn about these lifecycles if they are present.\n    // Don't warn about react-lifecycles-compat polyfilled methods though.\n    if (\n      typeof ctor.getDerivedStateFromProps === 'function' ||\n      typeof instance.getSnapshotBeforeUpdate === 'function'\n    ) {\n      let foundWillMountName = null;\n      let foundWillReceivePropsName = null;\n      let foundWillUpdateName = null;\n      if (\n        typeof instance.componentWillMount === 'function' &&\n        instance.componentWillMount.__suppressDeprecationWarning !== true\n      ) {\n        foundWillMountName = 'componentWillMount';\n      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        foundWillMountName = 'UNSAFE_componentWillMount';\n      }\n      if (\n        typeof instance.componentWillReceiveProps === 'function' &&\n        instance.componentWillReceiveProps.__suppressDeprecationWarning !== true\n      ) {\n        foundWillReceivePropsName = 'componentWillReceiveProps';\n      } else if (\n        typeof instance.UNSAFE_componentWillReceiveProps === 'function'\n      ) {\n        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n      }\n      if (\n        typeof instance.componentWillUpdate === 'function' &&\n        instance.componentWillUpdate.__suppressDeprecationWarning !== true\n      ) {\n        foundWillUpdateName = 'componentWillUpdate';\n      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n      }\n      if (\n        foundWillMountName !== null ||\n        foundWillReceivePropsName !== null ||\n        foundWillUpdateName !== null\n      ) {\n        const componentName = getComponentName(ctor) || 'Component';\n        const newApiName =\n          typeof ctor.getDerivedStateFromProps === 'function'\n            ? 'getDerivedStateFromProps()'\n            : 'getSnapshotBeforeUpdate()';\n        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(componentName)) {\n          didWarnAboutLegacyLifecyclesAndDerivedState.add(componentName);\n          console.error(\n            'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n              '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' +\n              'The above lifecycles should be removed. Learn more about this warning here:\\n' +\n              'https://reactjs.org/link/unsafe-component-lifecycles',\n            componentName,\n            newApiName,\n            foundWillMountName !== null ? `\\n  ${foundWillMountName}` : '',\n            foundWillReceivePropsName !== null\n              ? `\\n  ${foundWillReceivePropsName}`\n              : '',\n            foundWillUpdateName !== null ? `\\n  ${foundWillUpdateName}` : '',\n          );\n        }\n      }\n    }\n  }\n\n  // Cache unmasked context so we can avoid recreating masked context unless necessary.\n  // ReactFiberContext usually updates this cache but can't for newly-created instances.\n  if (isLegacyContextConsumer) {\n    cacheContext(workInProgress, unmaskedContext, context);\n  }\n\n  return instance;\n}\n\nfunction callComponentWillMount(workInProgress, instance) {\n  const oldState = instance.state;\n\n  if (typeof instance.componentWillMount === 'function') {\n    instance.componentWillMount();\n  }\n  if (typeof instance.UNSAFE_componentWillMount === 'function') {\n    instance.UNSAFE_componentWillMount();\n  }\n\n  if (oldState !== instance.state) {\n    if (__DEV__) {\n      console.error(\n        '%s.componentWillMount(): Assigning directly to this.state is ' +\n          \"deprecated (except inside a component's \" +\n          'constructor). Use setState instead.',\n        getComponentName(workInProgress.type) || 'Component',\n      );\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\nfunction callComponentWillReceiveProps(\n  workInProgress,\n  instance,\n  newProps,\n  nextContext,\n) {\n  const oldState = instance.state;\n  if (typeof instance.componentWillReceiveProps === 'function') {\n    instance.componentWillReceiveProps(newProps, nextContext);\n  }\n  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n  }\n\n  if (instance.state !== oldState) {\n    if (__DEV__) {\n      const componentName =\n        getComponentName(workInProgress.type) || 'Component';\n      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n        didWarnAboutStateAssignmentForComponent.add(componentName);\n        console.error(\n          '%s.componentWillReceiveProps(): Assigning directly to ' +\n            \"this.state is deprecated (except inside a component's \" +\n            'constructor). Use setState instead.',\n          componentName,\n        );\n      }\n    }\n    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n  }\n}\n\n// Invokes the mount life-cycles on a previously never rendered instance.\nfunction mountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): void {\n  if (__DEV__) {\n    checkClassInstance(workInProgress, ctor, newProps);\n  }\n\n  const instance = workInProgress.stateNode;\n  instance.props = newProps;\n  instance.state = workInProgress.memoizedState;\n  instance.refs = emptyRefsObject;\n\n  initializeUpdateQueue(workInProgress);\n\n  const contextType = ctor.contextType;\n  if (typeof contextType === 'object' && contextType !== null) {\n    instance.context = readContext(contextType);\n  } else if (disableLegacyContext) {\n    instance.context = emptyContextObject;\n  } else {\n    const unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  if (__DEV__) {\n    if (instance.state === newProps) {\n      const componentName = getComponentName(ctor) || 'Component';\n      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n        didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n        console.error(\n          '%s: It is not recommended to assign props directly to state ' +\n            \"because updates to props won't be reflected in state. \" +\n            'In most cases, it is better to use props directly.',\n          componentName,\n        );\n      }\n    }\n\n    if (workInProgress.mode & StrictMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(\n        workInProgress,\n        instance,\n      );\n    }\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n        workInProgress,\n        instance,\n      );\n    }\n  }\n\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  instance.state = workInProgress.memoizedState;\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    instance.state = workInProgress.memoizedState;\n  }\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    typeof ctor.getDerivedStateFromProps !== 'function' &&\n    typeof instance.getSnapshotBeforeUpdate !== 'function' &&\n    (typeof instance.UNSAFE_componentWillMount === 'function' ||\n      typeof instance.componentWillMount === 'function')\n  ) {\n    callComponentWillMount(workInProgress, instance);\n    // If we had additional state updates during this life-cycle, let's\n    // process them now.\n    processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n    instance.state = workInProgress.memoizedState;\n  }\n\n  if (typeof instance.componentDidMount === 'function') {\n    workInProgress.flags |= Update;\n  }\n}\n\nfunction resumeMountClassInstance(\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  const oldProps = workInProgress.memoizedProps;\n  instance.props = oldProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextLegacyUnmaskedContext = getUnmaskedContext(\n      workInProgress,\n      ctor,\n      true,\n    );\n    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (oldProps !== newProps || oldContext !== nextContext) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n  if (\n    oldProps === newProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillMount === 'function' ||\n        typeof instance.componentWillMount === 'function')\n    ) {\n      if (typeof instance.componentWillMount === 'function') {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === 'function') {\n        instance.UNSAFE_componentWillMount();\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.flags |= Update;\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\n// Invokes the update life-cycles and returns false if it shouldn't rerender.\nfunction updateClassInstance(\n  current: Fiber,\n  workInProgress: Fiber,\n  ctor: any,\n  newProps: any,\n  renderLanes: Lanes,\n): boolean {\n  const instance = workInProgress.stateNode;\n\n  cloneUpdateQueue(current, workInProgress);\n\n  const unresolvedOldProps = workInProgress.memoizedProps;\n  const oldProps =\n    workInProgress.type === workInProgress.elementType\n      ? unresolvedOldProps\n      : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n  instance.props = oldProps;\n  const unresolvedNewProps = workInProgress.pendingProps;\n\n  const oldContext = instance.context;\n  const contextType = ctor.contextType;\n  let nextContext = emptyContextObject;\n  if (typeof contextType === 'object' && contextType !== null) {\n    nextContext = readContext(contextType);\n  } else if (!disableLegacyContext) {\n    const nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n  }\n\n  const getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n  const hasNewLifecycles =\n    typeof getDerivedStateFromProps === 'function' ||\n    typeof instance.getSnapshotBeforeUpdate === 'function';\n\n  // Note: During these life-cycles, instance.props/instance.state are what\n  // ever the previously attempted to render - not the \"current\". However,\n  // during componentDidUpdate we pass the \"current\" props.\n\n  // In order to support react-lifecycles-compat polyfilled components,\n  // Unsafe lifecycles should not be invoked for components using the new APIs.\n  if (\n    !hasNewLifecycles &&\n    (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||\n      typeof instance.componentWillReceiveProps === 'function')\n  ) {\n    if (\n      unresolvedOldProps !== unresolvedNewProps ||\n      oldContext !== nextContext\n    ) {\n      callComponentWillReceiveProps(\n        workInProgress,\n        instance,\n        newProps,\n        nextContext,\n      );\n    }\n  }\n\n  resetHasForceUpdateBeforeProcessing();\n\n  const oldState = workInProgress.memoizedState;\n  let newState = (instance.state = oldState);\n  processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n  newState = workInProgress.memoizedState;\n\n  if (\n    unresolvedOldProps === unresolvedNewProps &&\n    oldState === newState &&\n    !hasContextChanged() &&\n    !checkHasForceUpdateAfterProcessing()\n  ) {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n    return false;\n  }\n\n  if (typeof getDerivedStateFromProps === 'function') {\n    applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      newProps,\n    );\n    newState = workInProgress.memoizedState;\n  }\n\n  const shouldUpdate =\n    checkHasForceUpdateAfterProcessing() ||\n    checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext,\n    );\n\n  if (shouldUpdate) {\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (\n      !hasNewLifecycles &&\n      (typeof instance.UNSAFE_componentWillUpdate === 'function' ||\n        typeof instance.componentWillUpdate === 'function')\n    ) {\n      if (typeof instance.componentWillUpdate === 'function') {\n        instance.componentWillUpdate(newProps, newState, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n      }\n    }\n    if (typeof instance.componentDidUpdate === 'function') {\n      workInProgress.flags |= Update;\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      workInProgress.flags |= Snapshot;\n    }\n  } else {\n    // If an update was already in progress, we should schedule an Update\n    // effect even though we're bailing out, so that cWU/cDU are called.\n    if (typeof instance.componentDidUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Update;\n      }\n    }\n    if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n      if (\n        unresolvedOldProps !== current.memoizedProps ||\n        oldState !== current.memoizedState\n      ) {\n        workInProgress.flags |= Snapshot;\n      }\n    }\n\n    // If shouldComponentUpdate returned false, we should still update the\n    // memoized props/state to indicate that this work can be reused.\n    workInProgress.memoizedProps = newProps;\n    workInProgress.memoizedState = newState;\n  }\n\n  // Update the existing instance's state, props, and context pointers even\n  // if shouldComponentUpdate returns false.\n  instance.props = newProps;\n  instance.state = newState;\n  instance.context = nextContext;\n\n  return shouldUpdate;\n}\n\nexport {\n  adoptClassInstance,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {ReactPortal} from 'shared/ReactTypes';\nimport type {BlockComponent} from 'react/src/ReactBlock';\nimport type {LazyComponent} from 'react/src/ReactLazy';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\n\nimport getComponentName from 'shared/getComponentName';\nimport {Placement, Deletion} from './ReactFiberFlags';\nimport {\n  getIteratorFn,\n  REACT_ELEMENT_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_PORTAL_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_BLOCK_TYPE,\n} from 'shared/ReactSymbols';\nimport {\n  FunctionComponent,\n  ClassComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  SimpleMemoComponent,\n  Block,\n} from './ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport {\n  warnAboutStringRefs,\n  enableBlocksAPI,\n  enableLazyElements,\n} from 'shared/ReactFeatureFlags';\n\nimport {\n  createWorkInProgress,\n  resetWorkInProgress,\n  createFiberFromElement,\n  createFiberFromFragment,\n  createFiberFromText,\n  createFiberFromPortal,\n} from './ReactFiber.old';\nimport {emptyRefsObject} from './ReactFiberClassComponent.old';\nimport {isCompatibleFamilyForHotReloading} from './ReactFiberHotReloading.old';\nimport {StrictMode} from './ReactTypeOfMode';\n\nlet didWarnAboutMaps;\nlet didWarnAboutGenerators;\nlet didWarnAboutStringRefs;\nlet ownerHasKeyUseWarning;\nlet ownerHasFunctionTypeWarning;\nlet warnForMissingKey = (child: mixed, returnFiber: Fiber) => {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutGenerators = false;\n  didWarnAboutStringRefs = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = (child: mixed, returnFiber: Fiber) => {\n    if (child === null || typeof child !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n    invariant(\n      typeof child._store === 'object',\n      'React Component in warnForMissingKey should have a _store. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n    child._store.validated = true;\n\n    const componentName = getComponentName(returnFiber.type) || 'Component';\n\n    if (ownerHasKeyUseWarning[componentName]) {\n      return;\n    }\n    ownerHasKeyUseWarning[componentName] = true;\n\n    console.error(\n      'Each child in a list should have a unique ' +\n        '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n        'more information.',\n    );\n  };\n}\n\nconst isArray = Array.isArray;\n\nfunction coerceRef(\n  returnFiber: Fiber,\n  current: Fiber | null,\n  element: ReactElement,\n) {\n  const mixedRef = element.ref;\n  if (\n    mixedRef !== null &&\n    typeof mixedRef !== 'function' &&\n    typeof mixedRef !== 'object'\n  ) {\n    if (__DEV__) {\n      // TODO: Clean this up once we turn on the string ref warning for\n      // everyone, because the strict mode case will no longer be relevant\n      if (\n        (returnFiber.mode & StrictMode || warnAboutStringRefs) &&\n        // We warn in ReactElement.js if owner and self are equal for string refs\n        // because these cannot be automatically converted to an arrow function\n        // using a codemod. Therefore, we don't have to warn about string refs again.\n        !(\n          element._owner &&\n          element._self &&\n          element._owner.stateNode !== element._self\n        )\n      ) {\n        const componentName = getComponentName(returnFiber.type) || 'Component';\n        if (!didWarnAboutStringRefs[componentName]) {\n          if (warnAboutStringRefs) {\n            console.error(\n              'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                'will be removed in a future major release. We recommend using ' +\n                'useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              componentName,\n              mixedRef,\n            );\n          } else {\n            console.error(\n              'A string ref, \"%s\", has been found within a strict mode tree. ' +\n                'String refs are a source of potential bugs and should be avoided. ' +\n                'We recommend using useRef() or createRef() instead. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-string-ref',\n              mixedRef,\n            );\n          }\n          didWarnAboutStringRefs[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      const owner: ?Fiber = (element._owner: any);\n      let inst;\n      if (owner) {\n        const ownerFiber = ((owner: any): Fiber);\n        invariant(\n          ownerFiber.tag === ClassComponent,\n          'Function components cannot have string refs. ' +\n            'We recommend using useRef() instead. ' +\n            'Learn more about using refs safely here: ' +\n            'https://reactjs.org/link/strict-mode-string-ref',\n        );\n        inst = ownerFiber.stateNode;\n      }\n      invariant(\n        inst,\n        'Missing owner for string ref %s. This error is likely caused by a ' +\n          'bug in React. Please file an issue.',\n        mixedRef,\n      );\n      const stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (\n        current !== null &&\n        current.ref !== null &&\n        typeof current.ref === 'function' &&\n        current.ref._stringRef === stringRef\n      ) {\n        return current.ref;\n      }\n      const ref = function(value) {\n        let refs = inst.refs;\n        if (refs === emptyRefsObject) {\n          // This is a lazy pooled frozen object, so we need to initialize.\n          refs = inst.refs = {};\n        }\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      invariant(\n        typeof mixedRef === 'string',\n        'Expected ref to be a function, a string, an object returned by React.createRef(), or null.',\n      );\n      invariant(\n        element._owner,\n        'Element ref was specified as a string (%s) but no owner was set. This could happen for one of' +\n          ' the following reasons:\\n' +\n          '1. You may be adding a ref to a function component\\n' +\n          \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n          '3. You have multiple copies of React loaded\\n' +\n          'See https://reactjs.org/link/refs-must-have-owner for more information.',\n        mixedRef,\n      );\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber: Fiber, newChild: Object) {\n  if (returnFiber.type !== 'textarea') {\n    invariant(\n      false,\n      'Objects are not valid as a React child (found: %s). ' +\n        'If you meant to render a collection of children, use an array ' +\n        'instead.',\n      Object.prototype.toString.call(newChild) === '[object Object]'\n        ? 'object with keys {' + Object.keys(newChild).join(', ') + '}'\n        : newChild,\n    );\n  }\n}\n\nfunction warnOnFunctionType(returnFiber: Fiber) {\n  if (__DEV__) {\n    const componentName = getComponentName(returnFiber.type) || 'Component';\n\n    if (ownerHasFunctionTypeWarning[componentName]) {\n      return;\n    }\n    ownerHasFunctionTypeWarning[componentName] = true;\n\n    console.error(\n      'Functions are not valid as a React child. This may happen if ' +\n        'you return a Component instead of <Component /> from render. ' +\n        'Or maybe you meant to call this function rather than return it.',\n    );\n  }\n}\n\n// We avoid inlining this to avoid potential deopts from using try/catch.\n/** @noinline */\nfunction resolveLazyType<T, P>(\n  lazyComponent: LazyComponent<T, P>,\n): LazyComponent<T, P> | T {\n  try {\n    // If we can, let's peek at the resulting type.\n    const payload = lazyComponent._payload;\n    const init = lazyComponent._init;\n    return init(payload);\n  } catch (x) {\n    // Leave it in place and let it throw again in the begin phase.\n    return lazyComponent;\n  }\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber: Fiber, childToDelete: Fiber): void {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    // Deletions are added in reversed order so we add it to the front.\n    // At this point, the return fiber's effect list is empty except for\n    // deletions, so we can just append the deletion to the list. The remaining\n    // effects aren't added until the complete phase. Once we implement\n    // resuming, this may not be true.\n    const last = returnFiber.lastEffect;\n    if (last !== null) {\n      last.nextEffect = childToDelete;\n      returnFiber.lastEffect = childToDelete;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n    }\n    childToDelete.nextEffect = null;\n    childToDelete.flags = Deletion;\n  }\n\n  function deleteRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n  ): null {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    let childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber,\n  ): Map<string | number, Fiber> {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    // instead.\n    const existingChildren: Map<string | number, Fiber> = new Map();\n\n    let existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber: Fiber, pendingProps: mixed): Fiber {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    const clone = createWorkInProgress(fiber, pendingProps);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(\n    newFiber: Fiber,\n    lastPlacedIndex: number,\n    newIndex: number,\n  ): number {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return lastPlacedIndex;\n    }\n    const current = newFiber.alternate;\n    if (current !== null) {\n      const oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.flags = Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.flags = Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber: Fiber): Fiber {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.flags = Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ) {\n    if (current === null || current.tag !== HostText) {\n      // Insert\n      const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    if (current !== null) {\n      if (\n        current.elementType === element.type ||\n        // Keep this check inline so it only runs on the false path:\n        (__DEV__ ? isCompatibleFamilyForHotReloading(current, element) : false)\n      ) {\n        // Move based on index\n        const existing = useFiber(current, element.props);\n        existing.ref = coerceRef(returnFiber, current, element);\n        existing.return = returnFiber;\n        if (__DEV__) {\n          existing._debugSource = element._source;\n          existing._debugOwner = element._owner;\n        }\n        return existing;\n      } else if (enableBlocksAPI && current.tag === Block) {\n        // The new Block might not be initialized yet. We need to initialize\n        // it in case initializing it turns out it would match.\n        let type = element.type;\n        if (type.$$typeof === REACT_LAZY_TYPE) {\n          type = resolveLazyType(type);\n        }\n        if (\n          type.$$typeof === REACT_BLOCK_TYPE &&\n          ((type: any): BlockComponent<any, any>)._render ===\n            (current.type: BlockComponent<any, any>)._render\n        ) {\n          // Same as above but also update the .type field.\n          const existing = useFiber(current, element.props);\n          existing.return = returnFiber;\n          existing.type = type;\n          if (__DEV__) {\n            existing._debugSource = element._source;\n            existing._debugOwner = element._owner;\n          }\n          return existing;\n        }\n      }\n    }\n    // Insert\n    const created = createFiberFromElement(element, returnFiber.mode, lanes);\n    created.ref = coerceRef(returnFiber, current, element);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function updatePortal(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    if (\n      current === null ||\n      current.tag !== HostPortal ||\n      current.stateNode.containerInfo !== portal.containerInfo ||\n      current.stateNode.implementation !== portal.implementation\n    ) {\n      // Insert\n      const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, portal.children || []);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(\n    returnFiber: Fiber,\n    current: Fiber | null,\n    fragment: Iterable<*>,\n    lanes: Lanes,\n    key: null | string,\n  ): Fiber {\n    if (current === null || current.tag !== Fragment) {\n      // Insert\n      const created = createFiberFromFragment(\n        fragment,\n        returnFiber.mode,\n        lanes,\n        key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      const existing = useFiber(current, fragment);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(\n    returnFiber: Fiber,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      const created = createFiberFromText(\n        '' + newChild,\n        returnFiber.mode,\n        lanes,\n      );\n      created.return = returnFiber;\n      return created;\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const created = createFiberFromElement(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.ref = coerceRef(returnFiber, null, newChild);\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_PORTAL_TYPE: {\n          const created = createFiberFromPortal(\n            newChild,\n            returnFiber.mode,\n            lanes,\n          );\n          created.return = returnFiber;\n          return created;\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return createChild(returnFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const created = createFiberFromFragment(\n          newChild,\n          returnFiber.mode,\n          lanes,\n          null,\n        );\n        created.return = returnFiber;\n        return created;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(\n    returnFiber: Fiber,\n    oldFiber: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // Update the fiber if the keys match, otherwise return null.\n\n    const key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          if (newChild.key === key) {\n            if (newChild.type === REACT_FRAGMENT_TYPE) {\n              return updateFragment(\n                returnFiber,\n                oldFiber,\n                newChild.props.children,\n                lanes,\n                key,\n              );\n            }\n            return updateElement(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_PORTAL_TYPE: {\n          if (newChild.key === key) {\n            return updatePortal(returnFiber, oldFiber, newChild, lanes);\n          } else {\n            return null;\n          }\n        }\n        case REACT_LAZY_TYPE: {\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n          }\n        }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(\n    existingChildren: Map<string | number, Fiber>,\n    returnFiber: Fiber,\n    newIdx: number,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      const matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);\n    }\n\n    if (typeof newChild === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          if (newChild.type === REACT_FRAGMENT_TYPE) {\n            return updateFragment(\n              returnFiber,\n              matchedFiber,\n              newChild.props.children,\n              lanes,\n              newChild.key,\n            );\n          }\n          return updateElement(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_PORTAL_TYPE: {\n          const matchedFiber =\n            existingChildren.get(\n              newChild.key === null ? newIdx : newChild.key,\n            ) || null;\n          return updatePortal(returnFiber, matchedFiber, newChild, lanes);\n        }\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n\n      if (isArray(newChild) || getIteratorFn(newChild)) {\n        const matchedFiber = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, matchedFiber, newChild, lanes, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(\n    child: mixed,\n    knownKeys: Set<string> | null,\n    returnFiber: Fiber,\n  ): Set<string> | null {\n    if (__DEV__) {\n      if (typeof child !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n        case REACT_PORTAL_TYPE:\n          warnForMissingKey(child, returnFiber);\n          const key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          console.error(\n            'Encountered two children with the same key, `%s`. ' +\n              'Keys should be unique so that components maintain their identity ' +\n              'across updates. Non-unique keys may cause children to be ' +\n              'duplicated and/or omitted — the behavior is unsupported and ' +\n              'could change in a future version.',\n            key,\n          );\n          break;\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = child._payload;\n            const init = (child._init: any);\n            warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n            break;\n          }\n        // We intentionally fallthrough here if enableLazyElements is not on.\n        // eslint-disable-next-lined no-fallthrough\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildren: Array<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This algorithm can't optimize by searching from both ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      let knownKeys = null;\n      for (let i = 0; i < newChildren.length; i++) {\n        const child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n      }\n    }\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(\n        returnFiber,\n        oldFiber,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        const newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChildren[newIdx],\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChildrenIterable: Iterable<*>,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    const iteratorFn = getIteratorFn(newChildrenIterable);\n    invariant(\n      typeof iteratorFn === 'function',\n      'An object is not an iterable. This error is likely caused by a bug in ' +\n        'React. Please file an issue.',\n    );\n\n    if (__DEV__) {\n      // We don't support rendering Generators because it's a mutation.\n      // See https://github.com/facebook/react/issues/12995\n      if (\n        typeof Symbol === 'function' &&\n        // $FlowFixMe Flow doesn't know about toStringTag\n        newChildrenIterable[Symbol.toStringTag] === 'Generator'\n      ) {\n        if (!didWarnAboutGenerators) {\n          console.error(\n            'Using Generators as children is unsupported and will likely yield ' +\n              'unexpected results because enumerating a generator mutates it. ' +\n              'You may convert it to an array with `Array.from()` or the ' +\n              '`[...spread]` operator before rendering. Keep in mind ' +\n              'you might need to polyfill these features for older browsers.',\n          );\n        }\n        didWarnAboutGenerators = true;\n      }\n\n      // Warn about using Maps as children\n      if ((newChildrenIterable: any).entries === iteratorFn) {\n        if (!didWarnAboutMaps) {\n          console.error(\n            'Using Maps as children is not supported. ' +\n              'Use an array of keyed ReactElements instead.',\n          );\n        }\n        didWarnAboutMaps = true;\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      const newChildren = iteratorFn.call(newChildrenIterable);\n      if (newChildren) {\n        let knownKeys = null;\n        let step = newChildren.next();\n        for (; !step.done; step = newChildren.next()) {\n          const child = step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n        }\n      }\n    }\n\n    const newChildren = iteratorFn.call(newChildrenIterable);\n    invariant(newChildren != null, 'An iterable object provided no iterator.');\n\n    let resultingFirstChild: Fiber | null = null;\n    let previousNewFiber: Fiber | null = null;\n\n    let oldFiber = currentFirstChild;\n    let lastPlacedIndex = 0;\n    let newIdx = 0;\n    let nextOldFiber = null;\n\n    let step = newChildren.next();\n    for (\n      ;\n      oldFiber !== null && !step.done;\n      newIdx++, step = newChildren.next()\n    ) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      const newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        const newFiber = createChild(returnFiber, step.value, lanes);\n        if (newFiber === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    const existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      const newFiber = updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        step.value,\n        lanes,\n      );\n      if (newFiber !== null) {\n        if (shouldTrackSideEffects) {\n          if (newFiber.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(\n              newFiber.key === null ? newIdx : newFiber.key,\n            );\n          }\n        }\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = newFiber;\n        } else {\n          previousNewFiber.sibling = newFiber;\n        }\n        previousNewFiber = newFiber;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(child => deleteChild(returnFiber, child));\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    textContent: string,\n    lanes: Lanes,\n  ): Fiber {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      const existing = useFiber(currentFirstChild, textContent);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    const created = createFiberFromText(textContent, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    element: ReactElement,\n    lanes: Lanes,\n  ): Fiber {\n    const key = element.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        switch (child.tag) {\n          case Fragment: {\n            if (element.type === REACT_FRAGMENT_TYPE) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              const existing = useFiber(child, element.props.children);\n              existing.return = returnFiber;\n              if (__DEV__) {\n                existing._debugSource = element._source;\n                existing._debugOwner = element._owner;\n              }\n              return existing;\n            }\n            break;\n          }\n          case Block:\n            if (enableBlocksAPI) {\n              let type = element.type;\n              if (type.$$typeof === REACT_LAZY_TYPE) {\n                type = resolveLazyType(type);\n              }\n              if (type.$$typeof === REACT_BLOCK_TYPE) {\n                // The new Block might not be initialized yet. We need to initialize\n                // it in case initializing it turns out it would match.\n                if (\n                  ((type: any): BlockComponent<any, any>)._render ===\n                  (child.type: BlockComponent<any, any>)._render\n                ) {\n                  deleteRemainingChildren(returnFiber, child.sibling);\n                  const existing = useFiber(child, element.props);\n                  existing.type = type;\n                  existing.return = returnFiber;\n                  if (__DEV__) {\n                    existing._debugSource = element._source;\n                    existing._debugOwner = element._owner;\n                  }\n                  return existing;\n                }\n              }\n            }\n          // We intentionally fallthrough here if enableBlocksAPI is not on.\n          // eslint-disable-next-lined no-fallthrough\n          default: {\n            if (\n              child.elementType === element.type ||\n              // Keep this check inline so it only runs on the false path:\n              (__DEV__\n                ? isCompatibleFamilyForHotReloading(child, element)\n                : false)\n            ) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              const existing = useFiber(child, element.props);\n              existing.ref = coerceRef(returnFiber, child, element);\n              existing.return = returnFiber;\n              if (__DEV__) {\n                existing._debugSource = element._source;\n                existing._debugOwner = element._owner;\n              }\n              return existing;\n            }\n            break;\n          }\n        }\n        // Didn't match.\n        deleteRemainingChildren(returnFiber, child);\n        break;\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === REACT_FRAGMENT_TYPE) {\n      const created = createFiberFromFragment(\n        element.props.children,\n        returnFiber.mode,\n        lanes,\n        element.key,\n      );\n      created.return = returnFiber;\n      return created;\n    } else {\n      const created = createFiberFromElement(element, returnFiber.mode, lanes);\n      created.ref = coerceRef(returnFiber, currentFirstChild, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function reconcileSinglePortal(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    portal: ReactPortal,\n    lanes: Lanes,\n  ): Fiber {\n    const key = portal.key;\n    let child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (\n          child.tag === HostPortal &&\n          child.stateNode.containerInfo === portal.containerInfo &&\n          child.stateNode.implementation === portal.implementation\n        ) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          const existing = useFiber(child, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    const created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(\n    returnFiber: Fiber,\n    currentFirstChild: Fiber | null,\n    newChild: any,\n    lanes: Lanes,\n  ): Fiber | null {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    const isUnkeyedTopLevelFragment =\n      typeof newChild === 'object' &&\n      newChild !== null &&\n      newChild.type === REACT_FRAGMENT_TYPE &&\n      newChild.key === null;\n    if (isUnkeyedTopLevelFragment) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    const isObject = typeof newChild === 'object' && newChild !== null;\n\n    if (isObject) {\n      switch (newChild.$$typeof) {\n        case REACT_ELEMENT_TYPE:\n          return placeSingleChild(\n            reconcileSingleElement(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_PORTAL_TYPE:\n          return placeSingleChild(\n            reconcileSinglePortal(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes,\n            ),\n          );\n        case REACT_LAZY_TYPE:\n          if (enableLazyElements) {\n            const payload = newChild._payload;\n            const init = newChild._init;\n            // TODO: This function is supposed to be non-recursive.\n            return reconcileChildFibers(\n              returnFiber,\n              currentFirstChild,\n              init(payload),\n              lanes,\n            );\n          }\n      }\n    }\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      return placeSingleChild(\n        reconcileSingleTextNode(\n          returnFiber,\n          currentFirstChild,\n          '' + newChild,\n          lanes,\n        ),\n      );\n    }\n\n    if (isArray(newChild)) {\n      return reconcileChildrenArray(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes,\n      );\n    }\n\n    if (getIteratorFn(newChild)) {\n      return reconcileChildrenIterator(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes,\n      );\n    }\n\n    if (isObject) {\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType(returnFiber);\n      }\n    }\n    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {\n      // If the new child is undefined, and the return fiber is a composite\n      // component, throw an error. If Fiber return types are disabled,\n      // we already threw above.\n      switch (returnFiber.tag) {\n        case ClassComponent: {\n          if (__DEV__) {\n            const instance = returnFiber.stateNode;\n            if (instance.render._isMockFunction) {\n              // We allow auto-mocks to proceed as if they're returning null.\n              break;\n            }\n          }\n        }\n        // Intentionally fall through to the next case, which handles both\n        // functions and classes\n        // eslint-disable-next-lined no-fallthrough\n        case Block:\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          invariant(\n            false,\n            '%s(...): Nothing was returned from render. This usually means a ' +\n              'return statement is missing. Or, to render nothing, ' +\n              'return null.',\n            getComponentName(returnFiber.type) || 'Component',\n          );\n        }\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nexport const reconcileChildFibers = ChildReconciler(true);\nexport const mountChildFibers = ChildReconciler(false);\n\nexport function cloneChildFibers(\n  current: Fiber | null,\n  workInProgress: Fiber,\n): void {\n  invariant(\n    current === null || workInProgress.child === current.child,\n    'Resuming work not yet implemented.',\n  );\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  let currentChild = workInProgress.child;\n  let newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = createWorkInProgress(\n      currentChild,\n      currentChild.pendingProps,\n    );\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n\n// Reset a workInProgress child set to prepare it for a second pass.\nexport function resetChildFibers(workInProgress: Fiber, lanes: Lanes): void {\n  let child = workInProgress.child;\n  while (child !== null) {\n    resetWorkInProgress(child, lanes);\n    child = child.sibling;\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\nimport type {Container, HostContext} from './ReactFiberHostConfig';\n\nimport invariant from 'shared/invariant';\n\nimport {getChildHostContext, getRootHostContext} from './ReactFiberHostConfig';\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\ndeclare class NoContextT {}\nconst NO_CONTEXT: NoContextT = ({}: any);\n\nconst contextStackCursor: StackCursor<HostContext | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst contextFiberStackCursor: StackCursor<Fiber | NoContextT> = createCursor(\n  NO_CONTEXT,\n);\nconst rootInstanceStackCursor: StackCursor<\n  Container | NoContextT,\n> = createCursor(NO_CONTEXT);\n\nfunction requiredContext<Value>(c: Value | NoContextT): Value {\n  invariant(\n    c !== NO_CONTEXT,\n    'Expected host context to exist. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n  return (c: any);\n}\n\nfunction getRootHostContainer(): Container {\n  const rootInstance = requiredContext(rootInstanceStackCursor.current);\n  return rootInstance;\n}\n\nfunction pushHostContainer(fiber: Fiber, nextRootInstance: Container) {\n  // Push current root instance onto the stack;\n  // This allows us to reset root when portals are popped.\n  push(rootInstanceStackCursor, nextRootInstance, fiber);\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n\n  // Finally, we need to push the host context to the stack.\n  // However, we can't just call getRootHostContext() and push it because\n  // we'd have a different number of entries on the stack depending on\n  // whether getRootHostContext() throws somewhere in renderer code or not.\n  // So we push an empty value first. This lets us safely unwind on errors.\n  push(contextStackCursor, NO_CONTEXT, fiber);\n  const nextRootContext = getRootHostContext(nextRootInstance);\n  // Now that we know this function doesn't throw, replace it.\n  pop(contextStackCursor, fiber);\n  push(contextStackCursor, nextRootContext, fiber);\n}\n\nfunction popHostContainer(fiber: Fiber) {\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n  pop(rootInstanceStackCursor, fiber);\n}\n\nfunction getHostContext(): HostContext {\n  const context = requiredContext(contextStackCursor.current);\n  return context;\n}\n\nfunction pushHostContext(fiber: Fiber): void {\n  const rootInstance: Container = requiredContext(\n    rootInstanceStackCursor.current,\n  );\n  const context: HostContext = requiredContext(contextStackCursor.current);\n  const nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n  // Don't push this Fiber's context unless it's unique.\n  if (context === nextContext) {\n    return;\n  }\n\n  // Track the context and the Fiber that provided it.\n  // This enables us to pop only Fibers that provide unique contexts.\n  push(contextFiberStackCursor, fiber, fiber);\n  push(contextStackCursor, nextContext, fiber);\n}\n\nfunction popHostContext(fiber: Fiber): void {\n  // Do not pop unless this Fiber provided the current context.\n  // pushHostContext() only pushes Fibers that provide unique contexts.\n  if (contextFiberStackCursor.current !== fiber) {\n    return;\n  }\n\n  pop(contextStackCursor, fiber);\n  pop(contextFiberStackCursor, fiber);\n}\n\nexport {\n  getHostContext,\n  getRootHostContainer,\n  popHostContainer,\n  popHostContext,\n  pushHostContainer,\n  pushHostContext,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {createCursor, push, pop} from './ReactFiberStack.old';\n\nexport opaque type SuspenseContext = number;\nexport opaque type SubtreeSuspenseContext: SuspenseContext = number;\nexport opaque type ShallowSuspenseContext: SuspenseContext = number;\n\nconst DefaultSuspenseContext: SuspenseContext = 0b00;\n\n// The Suspense Context is split into two parts. The lower bits is\n// inherited deeply down the subtree. The upper bits only affect\n// this immediate suspense boundary and gets reset each new\n// boundary or suspense list.\nconst SubtreeSuspenseContextMask: SuspenseContext = 0b01;\n\n// Subtree Flags:\n\n// InvisibleParentSuspenseContext indicates that one of our parent Suspense\n// boundaries is not currently showing visible main content.\n// Either because it is already showing a fallback or is not mounted at all.\n// We can use this to determine if it is desirable to trigger a fallback at\n// the parent. If not, then we might need to trigger undesirable boundaries\n// and/or suspend the commit to avoid hiding the parent content.\nexport const InvisibleParentSuspenseContext: SubtreeSuspenseContext = 0b01;\n\n// Shallow Flags:\n\n// ForceSuspenseFallback can be used by SuspenseList to force newly added\n// items into their fallback state during one of the render passes.\nexport const ForceSuspenseFallback: ShallowSuspenseContext = 0b10;\n\nexport const suspenseStackCursor: StackCursor<SuspenseContext> = createCursor(\n  DefaultSuspenseContext,\n);\n\nexport function hasSuspenseContext(\n  parentContext: SuspenseContext,\n  flag: SuspenseContext,\n): boolean {\n  return (parentContext & flag) !== 0;\n}\n\nexport function setDefaultShallowSuspenseContext(\n  parentContext: SuspenseContext,\n): SuspenseContext {\n  return parentContext & SubtreeSuspenseContextMask;\n}\n\nexport function setShallowSuspenseContext(\n  parentContext: SuspenseContext,\n  shallowContext: ShallowSuspenseContext,\n): SuspenseContext {\n  return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n}\n\nexport function addSubtreeSuspenseContext(\n  parentContext: SuspenseContext,\n  subtreeContext: SubtreeSuspenseContext,\n): SuspenseContext {\n  return parentContext | subtreeContext;\n}\n\nexport function pushSuspenseContext(\n  fiber: Fiber,\n  newContext: SuspenseContext,\n): void {\n  push(suspenseStackCursor, newContext, fiber);\n}\n\nexport function popSuspenseContext(fiber: Fiber): void {\n  pop(suspenseStackCursor, fiber);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactNodeList, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {Lane} from './ReactFiberLane';\nimport {SuspenseComponent, SuspenseListComponent} from './ReactWorkTags';\nimport {NoFlags, DidCapture} from './ReactFiberFlags';\nimport {\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n} from './ReactFiberHostConfig';\n\nexport type SuspenseProps = {|\n  children?: ReactNodeList,\n  fallback?: ReactNodeList,\n\n  // TODO: Add \"unstable_\" prefix?\n  suspenseCallback?: (Set<Wakeable> | null) => mixed,\n\n  unstable_expectedLoadTime?: number,\n|};\n\n// A null SuspenseState represents an unsuspended normal Suspense boundary.\n// A non-null SuspenseState means that it is blocked for one reason or another.\n// - A non-null dehydrated field means it's blocked pending hydration.\n//   - A non-null dehydrated field can use isSuspenseInstancePending or\n//     isSuspenseInstanceFallback to query the reason for being dehydrated.\n// - A null dehydrated field means it's blocked by something suspending and\n//   we're currently showing a fallback instead.\nexport type SuspenseState = {|\n  // If this boundary is still dehydrated, we store the SuspenseInstance\n  // here to indicate that it is dehydrated (flag) and for quick access\n  // to check things like isSuspenseInstancePending.\n  dehydrated: null | SuspenseInstance,\n  // Represents the lane we should attempt to hydrate a dehydrated boundary at.\n  // OffscreenLane is the default for dehydrated boundaries.\n  // NoLane is the default for normal boundaries, which turns into \"normal\" pri.\n  retryLane: Lane,\n|};\n\nexport type SuspenseListTailMode = 'collapsed' | 'hidden' | void;\n\nexport type SuspenseListRenderState = {|\n  isBackwards: boolean,\n  // The currently rendering tail row.\n  rendering: null | Fiber,\n  // The absolute time when we started rendering the most recent tail row.\n  renderingStartTime: number,\n  // The last of the already rendered children.\n  last: null | Fiber,\n  // Remaining rows on the tail of the list.\n  tail: null | Fiber,\n  // Tail insertions setting.\n  tailMode: SuspenseListTailMode,\n  // Last Effect before we rendered the \"rendering\" item.\n  // Used to remove new effects added by the rendered item.\n  lastEffect: null | Fiber,\n|};\n\nexport function shouldCaptureSuspense(\n  workInProgress: Fiber,\n  hasInvisibleParent: boolean,\n): boolean {\n  // If it was the primary children that just suspended, capture and render the\n  // fallback. Otherwise, don't capture and bubble to the next boundary.\n  const nextState: SuspenseState | null = workInProgress.memoizedState;\n  if (nextState !== null) {\n    if (nextState.dehydrated !== null) {\n      // A dehydrated boundary always captures.\n      return true;\n    }\n    return false;\n  }\n  const props = workInProgress.memoizedProps;\n  // In order to capture, the Suspense component must have a fallback prop.\n  if (props.fallback === undefined) {\n    return false;\n  }\n  // Regular boundaries always capture.\n  if (props.unstable_avoidThisFallback !== true) {\n    return true;\n  }\n  // If it's a boundary we should avoid, then we prefer to bubble up to the\n  // parent boundary if it is currently invisible.\n  if (hasInvisibleParent) {\n    return false;\n  }\n  // If the parent is not able to handle it, we must handle it.\n  return true;\n}\n\nexport function findFirstSuspended(row: Fiber): null | Fiber {\n  let node = row;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        const dehydrated: null | SuspenseInstance = state.dehydrated;\n        if (\n          dehydrated === null ||\n          isSuspenseInstancePending(dehydrated) ||\n          isSuspenseInstanceFallback(dehydrated)\n        ) {\n          return node;\n        }\n      }\n    } else if (\n      node.tag === SuspenseListComponent &&\n      // revealOrder undefined can't be trusted because it don't\n      // keep track of whether it suspended or not.\n      node.memoizedProps.revealOrder !== undefined\n    ) {\n      const didSuspend = (node.flags & DidCapture) !== NoFlags;\n      if (didSuspend) {\n        return node;\n      }\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === row) {\n      return null;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === row) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  return null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport type HookFlags = number;\n\nexport const NoFlags = /*  */ 0b000;\n\n// Represents whether effect should fire.\nexport const HasEffect = /* */ 0b001;\n\n// Represents the phase in which the effect (not the clean-up) fires.\nexport const Layout = /*    */ 0b010;\nexport const Passive = /*   */ 0b100;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {\n  Instance,\n  TextInstance,\n  HydratableInstance,\n  SuspenseInstance,\n  Container,\n  HostContext,\n} from './ReactFiberHostConfig';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  HostComponent,\n  HostText,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport {Deletion, Placement, Hydrating} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createFiberFromHostInstanceForDeletion,\n  createFiberFromDehydratedFragment,\n} from './ReactFiber.old';\nimport {\n  shouldSetTextContent,\n  supportsHydration,\n  canHydrateInstance,\n  canHydrateTextInstance,\n  canHydrateSuspenseInstance,\n  getNextHydratableSibling,\n  getFirstHydratableChild,\n  hydrateInstance,\n  hydrateTextInstance,\n  hydrateSuspenseInstance,\n  getNextHydratableInstanceAfterSuspenseInstance,\n  didNotMatchHydratedContainerTextInstance,\n  didNotMatchHydratedTextInstance,\n  didNotHydrateContainerInstance,\n  didNotHydrateInstance,\n  didNotFindHydratableContainerInstance,\n  didNotFindHydratableContainerTextInstance,\n  didNotFindHydratableContainerSuspenseInstance,\n  didNotFindHydratableInstance,\n  didNotFindHydratableTextInstance,\n  didNotFindHydratableSuspenseInstance,\n} from './ReactFiberHostConfig';\nimport {enableSuspenseServerRenderer} from 'shared/ReactFeatureFlags';\nimport {OffscreenLane} from './ReactFiberLane';\n\n// The deepest Fiber on the stack involved in a hydration context.\n// This may have been an insertion or a hydration.\nlet hydrationParentFiber: null | Fiber = null;\nlet nextHydratableInstance: null | HydratableInstance = null;\nlet isHydrating: boolean = false;\n\nfunction warnIfHydrating() {\n  if (__DEV__) {\n    if (isHydrating) {\n      console.error(\n        'We should not be hydrating here. This is a bug in React. Please file a bug.',\n      );\n    }\n  }\n}\n\nfunction enterHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n\n  const parentInstance = fiber.stateNode.containerInfo;\n  nextHydratableInstance = getFirstHydratableChild(parentInstance);\n  hydrationParentFiber = fiber;\n  isHydrating = true;\n  return true;\n}\n\nfunction reenterHydrationStateFromDehydratedSuspenseInstance(\n  fiber: Fiber,\n  suspenseInstance: SuspenseInstance,\n): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);\n  popToNextHostParent(fiber);\n  isHydrating = true;\n  return true;\n}\n\nfunction deleteHydratableInstance(\n  returnFiber: Fiber,\n  instance: HydratableInstance,\n) {\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot:\n        didNotHydrateContainerInstance(\n          returnFiber.stateNode.containerInfo,\n          instance,\n        );\n        break;\n      case HostComponent:\n        didNotHydrateInstance(\n          returnFiber.type,\n          returnFiber.memoizedProps,\n          returnFiber.stateNode,\n          instance,\n        );\n        break;\n    }\n  }\n\n  const childToDelete = createFiberFromHostInstanceForDeletion();\n  childToDelete.stateNode = instance;\n  childToDelete.return = returnFiber;\n  childToDelete.flags = Deletion;\n\n  // This might seem like it belongs on progressedFirstDeletion. However,\n  // these children are not part of the reconciliation list of children.\n  // Even if we abort and rereconcile the children, that will try to hydrate\n  // again and the nodes are still in the host tree so these will be\n  // recreated.\n  if (returnFiber.lastEffect !== null) {\n    returnFiber.lastEffect.nextEffect = childToDelete;\n    returnFiber.lastEffect = childToDelete;\n  } else {\n    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n  }\n}\n\nfunction insertNonHydratedInstance(returnFiber: Fiber, fiber: Fiber) {\n  fiber.flags = (fiber.flags & ~Hydrating) | Placement;\n  if (__DEV__) {\n    switch (returnFiber.tag) {\n      case HostRoot: {\n        const parentContainer = returnFiber.stateNode.containerInfo;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableContainerInstance(parentContainer, type, props);\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableContainerTextInstance(parentContainer, text);\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableContainerSuspenseInstance(parentContainer);\n            break;\n        }\n        break;\n      }\n      case HostComponent: {\n        const parentType = returnFiber.type;\n        const parentProps = returnFiber.memoizedProps;\n        const parentInstance = returnFiber.stateNode;\n        switch (fiber.tag) {\n          case HostComponent:\n            const type = fiber.type;\n            const props = fiber.pendingProps;\n            didNotFindHydratableInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              type,\n              props,\n            );\n            break;\n          case HostText:\n            const text = fiber.pendingProps;\n            didNotFindHydratableTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              text,\n            );\n            break;\n          case SuspenseComponent:\n            didNotFindHydratableSuspenseInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n            );\n            break;\n        }\n        break;\n      }\n      default:\n        return;\n    }\n  }\n}\n\nfunction tryHydrate(fiber, nextInstance) {\n  switch (fiber.tag) {\n    case HostComponent: {\n      const type = fiber.type;\n      const props = fiber.pendingProps;\n      const instance = canHydrateInstance(nextInstance, type, props);\n      if (instance !== null) {\n        fiber.stateNode = (instance: Instance);\n        return true;\n      }\n      return false;\n    }\n    case HostText: {\n      const text = fiber.pendingProps;\n      const textInstance = canHydrateTextInstance(nextInstance, text);\n      if (textInstance !== null) {\n        fiber.stateNode = (textInstance: TextInstance);\n        return true;\n      }\n      return false;\n    }\n    case SuspenseComponent: {\n      if (enableSuspenseServerRenderer) {\n        const suspenseInstance: null | SuspenseInstance = canHydrateSuspenseInstance(\n          nextInstance,\n        );\n        if (suspenseInstance !== null) {\n          const suspenseState: SuspenseState = {\n            dehydrated: suspenseInstance,\n            retryLane: OffscreenLane,\n          };\n          fiber.memoizedState = suspenseState;\n          // Store the dehydrated fragment as a child fiber.\n          // This simplifies the code for getHostSibling and deleting nodes,\n          // since it doesn't have to consider all Suspense boundaries and\n          // check if they're dehydrated ones or not.\n          const dehydratedFragment = createFiberFromDehydratedFragment(\n            suspenseInstance,\n          );\n          dehydratedFragment.return = fiber;\n          fiber.child = dehydratedFragment;\n          return true;\n        }\n      }\n      return false;\n    }\n    default:\n      return false;\n  }\n}\n\nfunction tryToClaimNextHydratableInstance(fiber: Fiber): void {\n  if (!isHydrating) {\n    return;\n  }\n  let nextInstance = nextHydratableInstance;\n  if (!nextInstance) {\n    // Nothing to hydrate. Make it an insertion.\n    insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n    isHydrating = false;\n    hydrationParentFiber = fiber;\n    return;\n  }\n  const firstAttemptedInstance = nextInstance;\n  if (!tryHydrate(fiber, nextInstance)) {\n    // If we can't hydrate this instance let's try the next one.\n    // We use this as a heuristic. It's based on intuition and not data so it\n    // might be flawed or unnecessary.\n    nextInstance = getNextHydratableSibling(firstAttemptedInstance);\n    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance((hydrationParentFiber: any), fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    // We matched the next one, we'll now assume that the first one was\n    // superfluous and we'll delete it. Since we can't eagerly delete it\n    // we'll have to schedule a deletion. To do that, this node needs a dummy\n    // fiber associated with it.\n    deleteHydratableInstance(\n      (hydrationParentFiber: any),\n      firstAttemptedInstance,\n    );\n  }\n  hydrationParentFiber = fiber;\n  nextHydratableInstance = getFirstHydratableChild((nextInstance: any));\n}\n\nfunction prepareToHydrateHostInstance(\n  fiber: Fiber,\n  rootContainerInstance: Container,\n  hostContext: HostContext,\n): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const instance: Instance = fiber.stateNode;\n  const updatePayload = hydrateInstance(\n    instance,\n    fiber.type,\n    fiber.memoizedProps,\n    rootContainerInstance,\n    hostContext,\n    fiber,\n  );\n  // TODO: Type this specific to this type of component.\n  fiber.updateQueue = (updatePayload: any);\n  // If the update payload indicates that there is a change or if there\n  // is a new ref we mark this as an update.\n  if (updatePayload !== null) {\n    return true;\n  }\n  return false;\n}\n\nfunction prepareToHydrateHostTextInstance(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostTextInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const textInstance: TextInstance = fiber.stateNode;\n  const textContent: string = fiber.memoizedProps;\n  const shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n  if (__DEV__) {\n    if (shouldUpdate) {\n      // We assume that prepareToHydrateHostTextInstance is called in a context where the\n      // hydration parent is the parent host component of this host text.\n      const returnFiber = hydrationParentFiber;\n      if (returnFiber !== null) {\n        switch (returnFiber.tag) {\n          case HostRoot: {\n            const parentContainer = returnFiber.stateNode.containerInfo;\n            didNotMatchHydratedContainerTextInstance(\n              parentContainer,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n          case HostComponent: {\n            const parentType = returnFiber.type;\n            const parentProps = returnFiber.memoizedProps;\n            const parentInstance = returnFiber.stateNode;\n            didNotMatchHydratedTextInstance(\n              parentType,\n              parentProps,\n              parentInstance,\n              textInstance,\n              textContent,\n            );\n            break;\n          }\n        }\n      }\n    }\n  }\n  return shouldUpdate;\n}\n\nfunction prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  hydrateSuspenseInstance(suspenseInstance, fiber);\n}\n\nfunction skipPastDehydratedSuspenseInstance(\n  fiber: Fiber,\n): null | HydratableInstance {\n  if (!supportsHydration) {\n    invariant(\n      false,\n      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +\n        'This error is likely caused by a bug in React. Please file an issue.',\n    );\n  }\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  const suspenseInstance: null | SuspenseInstance =\n    suspenseState !== null ? suspenseState.dehydrated : null;\n  invariant(\n    suspenseInstance,\n    'Expected to have a hydrated suspense instance. ' +\n      'This error is likely caused by a bug in React. Please file an issue.',\n  );\n  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);\n}\n\nfunction popToNextHostParent(fiber: Fiber): void {\n  let parent = fiber.return;\n  while (\n    parent !== null &&\n    parent.tag !== HostComponent &&\n    parent.tag !== HostRoot &&\n    parent.tag !== SuspenseComponent\n  ) {\n    parent = parent.return;\n  }\n  hydrationParentFiber = parent;\n}\n\nfunction popHydrationState(fiber: Fiber): boolean {\n  if (!supportsHydration) {\n    return false;\n  }\n  if (fiber !== hydrationParentFiber) {\n    // We're deeper than the current hydration context, inside an inserted\n    // tree.\n    return false;\n  }\n  if (!isHydrating) {\n    // If we're not currently hydrating but we're in a hydration context, then\n    // we were an insertion and now need to pop up reenter hydration of our\n    // siblings.\n    popToNextHostParent(fiber);\n    isHydrating = true;\n    return false;\n  }\n\n  const type = fiber.type;\n\n  // If we have any remaining hydratable nodes, we need to delete them now.\n  // We only do this deeper than head and body since they tend to have random\n  // other nodes in them. We also ignore components with pure text content in\n  // side of them.\n  // TODO: Better heuristic.\n  if (\n    fiber.tag !== HostComponent ||\n    (type !== 'head' &&\n      type !== 'body' &&\n      !shouldSetTextContent(type, fiber.memoizedProps))\n  ) {\n    let nextInstance = nextHydratableInstance;\n    while (nextInstance) {\n      deleteHydratableInstance(fiber, nextInstance);\n      nextInstance = getNextHydratableSibling(nextInstance);\n    }\n  }\n\n  popToNextHostParent(fiber);\n  if (fiber.tag === SuspenseComponent) {\n    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);\n  } else {\n    nextHydratableInstance = hydrationParentFiber\n      ? getNextHydratableSibling(fiber.stateNode)\n      : null;\n  }\n  return true;\n}\n\nfunction resetHydrationState(): void {\n  if (!supportsHydration) {\n    return;\n  }\n\n  hydrationParentFiber = null;\n  nextHydratableInstance = null;\n  isHydrating = false;\n}\n\nfunction getIsHydrating(): boolean {\n  return isHydrating;\n}\n\nexport {\n  warnIfHydrating,\n  enterHydrationState,\n  getIsHydrating,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {MutableSource, MutableSourceVersion} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\n\nimport {isPrimaryRenderer} from './ReactFiberHostConfig';\n\n// Work in progress version numbers only apply to a single render,\n// and should be reset before starting a new render.\n// This tracks which mutable sources need to be reset after a render.\nconst workInProgressSources: Array<MutableSource<any>> = [];\n\nlet rendererSigil;\nif (__DEV__) {\n  // Used to detect multiple renderers using the same mutable source.\n  rendererSigil = {};\n}\n\nexport function markSourceAsDirty(mutableSource: MutableSource<any>): void {\n  workInProgressSources.push(mutableSource);\n}\n\nexport function resetWorkInProgressVersions(): void {\n  for (let i = 0; i < workInProgressSources.length; i++) {\n    const mutableSource = workInProgressSources[i];\n    if (isPrimaryRenderer) {\n      mutableSource._workInProgressVersionPrimary = null;\n    } else {\n      mutableSource._workInProgressVersionSecondary = null;\n    }\n  }\n  workInProgressSources.length = 0;\n}\n\nexport function getWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n): null | MutableSourceVersion {\n  if (isPrimaryRenderer) {\n    return mutableSource._workInProgressVersionPrimary;\n  } else {\n    return mutableSource._workInProgressVersionSecondary;\n  }\n}\n\nexport function setWorkInProgressVersion(\n  mutableSource: MutableSource<any>,\n  version: MutableSourceVersion,\n): void {\n  if (isPrimaryRenderer) {\n    mutableSource._workInProgressVersionPrimary = version;\n  } else {\n    mutableSource._workInProgressVersionSecondary = version;\n  }\n  workInProgressSources.push(mutableSource);\n}\n\nexport function warnAboutMultipleRenderersDEV(\n  mutableSource: MutableSource<any>,\n): void {\n  if (__DEV__) {\n    if (isPrimaryRenderer) {\n      if (mutableSource._currentPrimaryRenderer == null) {\n        mutableSource._currentPrimaryRenderer = rendererSigil;\n      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    } else {\n      if (mutableSource._currentSecondaryRenderer == null) {\n        mutableSource._currentSecondaryRenderer = rendererSigil;\n      } else if (mutableSource._currentSecondaryRenderer !== rendererSigil) {\n        console.error(\n          'Detected multiple renderers concurrently rendering the ' +\n            'same mutable source. This is currently unsupported.',\n        );\n      }\n    }\n  }\n}\n\n// Eager reads the version of a mutable source and stores it on the root.\n// This ensures that the version used for server rendering matches the one\n// that is eventually read during hydration.\n// If they don't match there's a potential tear and a full deopt render is required.\nexport function registerMutableSourceForHydration(\n  root: FiberRoot,\n  mutableSource: MutableSource<any>,\n): void {\n  const getVersion = mutableSource._getVersion;\n  const version = getVersion(mutableSource._source);\n\n  // TODO Clear this data once all pending hydration work is finished.\n  // Retaining it forever may interfere with GC.\n  if (root.mutableSourceEagerHydrationData == null) {\n    root.mutableSourceEagerHydrationData = [mutableSource, version];\n  } else {\n    root.mutableSourceEagerHydrationData.push(mutableSource, version);\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  MutableSource,\n  MutableSourceGetSnapshotFn,\n  MutableSourceSubscribeFn,\n  ReactContext,\n} from 'shared/ReactTypes';\nimport type {Fiber, Dispatcher} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {HookFlags} from './ReactHookEffectTags';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {OpaqueIDType} from './ReactFiberHostConfig';\n\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableNewReconciler,\n  decoupleUpdatePriorityFromScheduler,\n} from 'shared/ReactFeatureFlags';\n\nimport {NoMode, BlockingMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  NoLane,\n  NoLanes,\n  InputContinuousLanePriority,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  markRootEntangled,\n  markRootMutableRead,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n  higherLanePriority,\n  DefaultLanePriority,\n} from './ReactFiberLane';\nimport {readContext} from './ReactFiberNewContext.old';\nimport {\n  Update as UpdateEffect,\n  Passive as PassiveEffect,\n} from './ReactFiberFlags';\nimport {\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {\n  getWorkInProgressRoot,\n  scheduleUpdateOnFiber,\n  requestUpdateLane,\n  requestEventTime,\n  warnIfNotCurrentlyActingEffectsInDEV,\n  warnIfNotCurrentlyActingUpdatesInDev,\n  warnIfNotScopedWithMatchingAct,\n  markSkippedUpdateLanes,\n} from './ReactFiberWorkLoop.old';\n\nimport invariant from 'shared/invariant';\nimport getComponentName from 'shared/getComponentName';\nimport is from 'shared/objectIs';\nimport {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork.old';\nimport {\n  UserBlockingPriority,\n  NormalPriority,\n  runWithPriority,\n  getCurrentPriorityLevel,\n} from './SchedulerWithReactIntegration.old';\nimport {getIsHydrating} from './ReactFiberHydrationContext.old';\nimport {\n  makeClientId,\n  makeClientIdInDEV,\n  makeOpaqueHydratingObject,\n} from './ReactFiberHostConfig';\nimport {\n  getWorkInProgressVersion,\n  markSourceAsDirty,\n  setWorkInProgressVersion,\n  warnAboutMultipleRenderersDEV,\n} from './ReactMutableSource.old';\nimport {getIsRendering} from './ReactCurrentFiber';\nimport {logStateUpdateScheduled} from './DebugTracing';\nimport {markStateUpdateScheduled} from './SchedulingProfiler';\n\nconst {ReactCurrentDispatcher, ReactCurrentBatchConfig} = ReactSharedInternals;\n\ntype Update<S, A> = {|\n  lane: Lane,\n  action: A,\n  eagerReducer: ((S, A) => S) | null,\n  eagerState: S | null,\n  next: Update<S, A>,\n  priority?: ReactPriorityLevel,\n|};\n\ntype UpdateQueue<S, A> = {|\n  pending: Update<S, A> | null,\n  dispatch: (A => mixed) | null,\n  lastRenderedReducer: ((S, A) => S) | null,\n  lastRenderedState: S | null,\n|};\n\nexport type HookType =\n  | 'useState'\n  | 'useReducer'\n  | 'useContext'\n  | 'useRef'\n  | 'useEffect'\n  | 'useLayoutEffect'\n  | 'useCallback'\n  | 'useMemo'\n  | 'useImperativeHandle'\n  | 'useDebugValue'\n  | 'useDeferredValue'\n  | 'useTransition'\n  | 'useMutableSource'\n  | 'useOpaqueIdentifier';\n\nlet didWarnAboutMismatchedHooksForComponent;\nlet didWarnAboutUseOpaqueIdentifier;\nif (__DEV__) {\n  didWarnAboutUseOpaqueIdentifier = {};\n  didWarnAboutMismatchedHooksForComponent = new Set();\n}\n\nexport type Hook = {|\n  memoizedState: any,\n  baseState: any,\n  baseQueue: Update<any, any> | null,\n  queue: UpdateQueue<any, any> | null,\n  next: Hook | null,\n|};\n\nexport type Effect = {|\n  tag: HookFlags,\n  create: () => (() => void) | void,\n  destroy: (() => void) | void,\n  deps: Array<mixed> | null,\n  next: Effect,\n|};\n\nexport type FunctionComponentUpdateQueue = {|lastEffect: Effect | null|};\n\ntype BasicStateAction<S> = (S => S) | S;\n\ntype Dispatch<A> = A => void;\n\n// These are set right before calling the component.\nlet renderLanes: Lanes = NoLanes;\n// The work-in-progress fiber. I've named it differently to distinguish it from\n// the work-in-progress hook.\nlet currentlyRenderingFiber: Fiber = (null: any);\n\n// Hooks are stored as a linked list on the fiber's memoizedState field. The\n// current hook list is the list that belongs to the current fiber. The\n// work-in-progress hook list is a new list that will be added to the\n// work-in-progress fiber.\nlet currentHook: Hook | null = null;\nlet workInProgressHook: Hook | null = null;\n\n// Whether an update was scheduled at any point during the render phase. This\n// does not get reset if we do another render pass; only when we're completely\n// finished evaluating this component. This is an optimization so we know\n// whether we need to clear render phase updates after a throw.\nlet didScheduleRenderPhaseUpdate: boolean = false;\n// Where an update was scheduled only during the current render pass. This\n// gets reset after each attempt.\n// TODO: Maybe there's some way to consolidate this with\n// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\nlet didScheduleRenderPhaseUpdateDuringThisPass: boolean = false;\n\nconst RE_RENDER_LIMIT = 25;\n\n// In DEV, this is the name of the currently executing primitive hook\nlet currentHookNameInDev: ?HookType = null;\n\n// In DEV, this list ensures that hooks are called in the same order between renders.\n// The list stores the order of hooks used during the initial render (mount).\n// Subsequent renders (updates) reference this list.\nlet hookTypesDev: Array<HookType> | null = null;\nlet hookTypesUpdateIndexDev: number = -1;\n\n// In DEV, this tracks whether currently rendering component needs to ignore\n// the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n// When true, such Hooks will always be \"remounted\". Only used during hot reload.\nlet ignorePreviousDependencies: boolean = false;\n\nfunction mountHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev === null) {\n      hookTypesDev = [hookName];\n    } else {\n      hookTypesDev.push(hookName);\n    }\n  }\n}\n\nfunction updateHookTypesDev() {\n  if (__DEV__) {\n    const hookName = ((currentHookNameInDev: any): HookType);\n\n    if (hookTypesDev !== null) {\n      hookTypesUpdateIndexDev++;\n      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n        warnOnHookMismatchInDev(hookName);\n      }\n    }\n  }\n}\n\nfunction checkDepsAreArrayDev(deps: mixed) {\n  if (__DEV__) {\n    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {\n      // Verify deps, but only on mount to avoid extra checks.\n      // It's unlikely their type would change as usually you define them inline.\n      console.error(\n        '%s received a final argument that is not an array (instead, received `%s`). When ' +\n          'specified, the final argument must be an array.',\n        currentHookNameInDev,\n        typeof deps,\n      );\n    }\n  }\n}\n\nfunction warnOnHookMismatchInDev(currentHookName: HookType) {\n  if (__DEV__) {\n    const componentName = getComponentName(currentlyRenderingFiber.type);\n    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n      didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n      if (hookTypesDev !== null) {\n        let table = '';\n\n        const secondColumnStart = 30;\n\n        for (let i = 0; i <= ((hookTypesUpdateIndexDev: any): number); i++) {\n          const oldHookName = hookTypesDev[i];\n          const newHookName =\n            i === ((hookTypesUpdateIndexDev: any): number)\n              ? currentHookName\n              : oldHookName;\n\n          let row = `${i + 1}. ${oldHookName}`;\n\n          // Extra space so second column lines up\n          // lol @ IE not supporting String#repeat\n          while (row.length < secondColumnStart) {\n            row += ' ';\n          }\n\n          row += newHookName + '\\n';\n\n          table += row;\n        }\n\n        console.error(\n          'React has detected a change in the order of Hooks called by %s. ' +\n            'This will lead to bugs and errors if not fixed. ' +\n            'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n' +\n            '   Previous render            Next render\\n' +\n            '   ------------------------------------------------------\\n' +\n            '%s' +\n            '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n',\n          componentName,\n          table,\n        );\n      }\n    }\n  }\n}\n\nfunction throwInvalidHookError() {\n  invariant(\n    false,\n    'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +\n      ' one of the following reasons:\\n' +\n      '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' +\n      '2. You might be breaking the Rules of Hooks\\n' +\n      '3. You might have more than one copy of React in the same app\\n' +\n      'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',\n  );\n}\n\nfunction areHookInputsEqual(\n  nextDeps: Array<mixed>,\n  prevDeps: Array<mixed> | null,\n) {\n  if (__DEV__) {\n    if (ignorePreviousDependencies) {\n      // Only true when this component is being hot reloaded.\n      return false;\n    }\n  }\n\n  if (prevDeps === null) {\n    if (__DEV__) {\n      console.error(\n        '%s received a final argument during this render, but not during ' +\n          'the previous render. Even though the final argument is optional, ' +\n          'its type cannot change between renders.',\n        currentHookNameInDev,\n      );\n    }\n    return false;\n  }\n\n  if (__DEV__) {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      console.error(\n        'The final argument passed to %s changed size between renders. The ' +\n          'order and size of this array must remain constant.\\n\\n' +\n          'Previous: %s\\n' +\n          'Incoming: %s',\n        currentHookNameInDev,\n        `[${prevDeps.join(', ')}]`,\n        `[${nextDeps.join(', ')}]`,\n      );\n    }\n  }\n  for (let i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (is(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n    return false;\n  }\n  return true;\n}\n\nexport function renderWithHooks<Props, SecondArg>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: (p: Props, arg: SecondArg) => any,\n  props: Props,\n  secondArg: SecondArg,\n  nextRenderLanes: Lanes,\n): any {\n  renderLanes = nextRenderLanes;\n  currentlyRenderingFiber = workInProgress;\n\n  if (__DEV__) {\n    hookTypesDev =\n      current !== null\n        ? ((current._debugHookTypes: any): Array<HookType>)\n        : null;\n    hookTypesUpdateIndexDev = -1;\n    // Used for hot reloading:\n    ignorePreviousDependencies =\n      current !== null && current.type !== workInProgress.type;\n  }\n\n  workInProgress.memoizedState = null;\n  workInProgress.updateQueue = null;\n  workInProgress.lanes = NoLanes;\n\n  // The following should have already been reset\n  // currentHook = null;\n  // workInProgressHook = null;\n\n  // didScheduleRenderPhaseUpdate = false;\n\n  // TODO Warn if no hooks are used at all during mount, then some are used during update.\n  // Currently we will identify the update render as a mount because memoizedState === null.\n  // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n\n  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n  // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n  // so memoizedState would be null during updates and mounts.\n  if (__DEV__) {\n    if (current !== null && current.memoizedState !== null) {\n      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;\n    } else if (hookTypesDev !== null) {\n      // This dispatcher handles an edge case where a component is updating,\n      // but no stateful hooks have been used.\n      // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n      // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n      // This dispatcher does that.\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;\n    } else {\n      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;\n    }\n  } else {\n    ReactCurrentDispatcher.current =\n      current === null || current.memoizedState === null\n        ? HooksDispatcherOnMount\n        : HooksDispatcherOnUpdate;\n  }\n\n  let children = Component(props, secondArg);\n\n  // Check if there was a render phase update\n  if (didScheduleRenderPhaseUpdateDuringThisPass) {\n    // Keep rendering in a loop for as long as render phase updates continue to\n    // be scheduled. Use a counter to prevent infinite loops.\n    let numberOfReRenders: number = 0;\n    do {\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      invariant(\n        numberOfReRenders < RE_RENDER_LIMIT,\n        'Too many re-renders. React limits the number of renders to prevent ' +\n          'an infinite loop.',\n      );\n\n      numberOfReRenders += 1;\n      if (__DEV__) {\n        // Even when hot reloading, allow dependencies to stabilize\n        // after first render to prevent infinite render phase updates.\n        ignorePreviousDependencies = false;\n      }\n\n      // Start over from the beginning of the list\n      currentHook = null;\n      workInProgressHook = null;\n\n      workInProgress.updateQueue = null;\n\n      if (__DEV__) {\n        // Also validate hook order for cascading updates.\n        hookTypesUpdateIndexDev = -1;\n      }\n\n      ReactCurrentDispatcher.current = __DEV__\n        ? HooksDispatcherOnRerenderInDEV\n        : HooksDispatcherOnRerender;\n\n      children = Component(props, secondArg);\n    } while (didScheduleRenderPhaseUpdateDuringThisPass);\n  }\n\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrancy.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (__DEV__) {\n    workInProgress._debugHookTypes = hookTypesDev;\n  }\n\n  // This check uses currentHook so that it works the same in DEV and prod bundles.\n  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n  const didRenderTooFewHooks =\n    currentHook !== null && currentHook.next !== null;\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    currentHookNameInDev = null;\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n  }\n\n  didScheduleRenderPhaseUpdate = false;\n\n  invariant(\n    !didRenderTooFewHooks,\n    'Rendered fewer hooks than expected. This may be caused by an accidental ' +\n      'early return statement.',\n  );\n\n  return children;\n}\n\nexport function bailoutHooks(\n  current: Fiber,\n  workInProgress: Fiber,\n  lanes: Lanes,\n) {\n  workInProgress.updateQueue = current.updateQueue;\n  workInProgress.flags &= ~(PassiveEffect | UpdateEffect);\n  current.lanes = removeLanes(current.lanes, lanes);\n}\n\nexport function resetHooksAfterThrow(): void {\n  // We can assume the previous dispatcher is always this one, since we set it\n  // at the beginning of the render phase and there's no re-entrancy.\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n  if (didScheduleRenderPhaseUpdate) {\n    // There were render phase updates. These are only valid for this render\n    // phase, which we are now aborting. Remove the updates from the queues so\n    // they do not persist to the next render. Do not remove updates from hooks\n    // that weren't processed.\n    //\n    // Only reset the updates from the queue if it has a clone. If it does\n    // not have a clone, that means it wasn't processed, and the updates were\n    // scheduled before we entered the render phase.\n    let hook: Hook | null = currentlyRenderingFiber.memoizedState;\n    while (hook !== null) {\n      const queue = hook.queue;\n      if (queue !== null) {\n        queue.pending = null;\n      }\n      hook = hook.next;\n    }\n    didScheduleRenderPhaseUpdate = false;\n  }\n\n  renderLanes = NoLanes;\n  currentlyRenderingFiber = (null: any);\n\n  currentHook = null;\n  workInProgressHook = null;\n\n  if (__DEV__) {\n    hookTypesDev = null;\n    hookTypesUpdateIndexDev = -1;\n\n    currentHookNameInDev = null;\n\n    isUpdatingOpaqueValueInRenderPhase = false;\n  }\n\n  didScheduleRenderPhaseUpdateDuringThisPass = false;\n}\n\nfunction mountWorkInProgressHook(): Hook {\n  const hook: Hook = {\n    memoizedState: null,\n\n    baseState: null,\n    baseQueue: null,\n    queue: null,\n\n    next: null,\n  };\n\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    currentlyRenderingFiber.memoizedState = workInProgressHook = hook;\n  } else {\n    // Append to the end of the list\n    workInProgressHook = workInProgressHook.next = hook;\n  }\n  return workInProgressHook;\n}\n\nfunction updateWorkInProgressHook(): Hook {\n  // This function is used both for updates and for re-renders triggered by a\n  // render phase update. It assumes there is either a current hook we can\n  // clone, or a work-in-progress hook from a previous render pass that we can\n  // use as a base. When we reach the end of the base list, we must switch to\n  // the dispatcher used for mounts.\n  let nextCurrentHook: null | Hook;\n  if (currentHook === null) {\n    const current = currentlyRenderingFiber.alternate;\n    if (current !== null) {\n      nextCurrentHook = current.memoizedState;\n    } else {\n      nextCurrentHook = null;\n    }\n  } else {\n    nextCurrentHook = currentHook.next;\n  }\n\n  let nextWorkInProgressHook: null | Hook;\n  if (workInProgressHook === null) {\n    nextWorkInProgressHook = currentlyRenderingFiber.memoizedState;\n  } else {\n    nextWorkInProgressHook = workInProgressHook.next;\n  }\n\n  if (nextWorkInProgressHook !== null) {\n    // There's already a work-in-progress. Reuse it.\n    workInProgressHook = nextWorkInProgressHook;\n    nextWorkInProgressHook = workInProgressHook.next;\n\n    currentHook = nextCurrentHook;\n  } else {\n    // Clone from the current hook.\n\n    invariant(\n      nextCurrentHook !== null,\n      'Rendered more hooks than during the previous render.',\n    );\n    currentHook = nextCurrentHook;\n\n    const newHook: Hook = {\n      memoizedState: currentHook.memoizedState,\n\n      baseState: currentHook.baseState,\n      baseQueue: currentHook.baseQueue,\n      queue: currentHook.queue,\n\n      next: null,\n    };\n\n    if (workInProgressHook === null) {\n      // This is the first hook in the list.\n      currentlyRenderingFiber.memoizedState = workInProgressHook = newHook;\n    } else {\n      // Append to the end of the list.\n      workInProgressHook = workInProgressHook.next = newHook;\n    }\n  }\n  return workInProgressHook;\n}\n\nfunction createFunctionComponentUpdateQueue(): FunctionComponentUpdateQueue {\n  return {\n    lastEffect: null,\n  };\n}\n\nfunction basicStateReducer<S>(state: S, action: BasicStateAction<S>): S {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction mountReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = mountWorkInProgressHook();\n  let initialState;\n  if (init !== undefined) {\n    initialState = init(initialArg);\n  } else {\n    initialState = ((initialArg: any): S);\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue = (hook.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: reducer,\n    lastRenderedState: (initialState: any),\n  });\n  const dispatch: Dispatch<A> = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  const current: Hook = (currentHook: any);\n\n  // The last rebase update that is NOT part of the base state.\n  let baseQueue = current.baseQueue;\n\n  // The last pending update that hasn't been processed yet.\n  const pendingQueue = queue.pending;\n  if (pendingQueue !== null) {\n    // We have new updates that haven't been processed yet.\n    // We'll add them to the base queue.\n    if (baseQueue !== null) {\n      // Merge the pending queue and the base queue.\n      const baseFirst = baseQueue.next;\n      const pendingFirst = pendingQueue.next;\n      baseQueue.next = pendingFirst;\n      pendingQueue.next = baseFirst;\n    }\n    if (__DEV__) {\n      if (current.baseQueue !== baseQueue) {\n        // Internal invariant that should never happen, but feasibly could in\n        // the future if we implement resuming, or some form of that.\n        console.error(\n          'Internal error: Expected work-in-progress queue to be a clone. ' +\n            'This is a bug in React.',\n        );\n      }\n    }\n    current.baseQueue = baseQueue = pendingQueue;\n    queue.pending = null;\n  }\n\n  if (baseQueue !== null) {\n    // We have a queue to process.\n    const first = baseQueue.next;\n    let newState = current.baseState;\n\n    let newBaseState = null;\n    let newBaseQueueFirst = null;\n    let newBaseQueueLast = null;\n    let update = first;\n    do {\n      const updateLane = update.lane;\n      if (!isSubsetOfLanes(renderLanes, updateLane)) {\n        // Priority is insufficient. Skip this update. If this is the first\n        // skipped update, the previous update/state is the new base\n        // update/state.\n        const clone: Update<S, A> = {\n          lane: updateLane,\n          action: update.action,\n          eagerReducer: update.eagerReducer,\n          eagerState: update.eagerState,\n          next: (null: any),\n        };\n        if (newBaseQueueLast === null) {\n          newBaseQueueFirst = newBaseQueueLast = clone;\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n        // Update the remaining priority in the queue.\n        // TODO: Don't need to accumulate this. Instead, we can remove\n        // renderLanes from the original lanes.\n        currentlyRenderingFiber.lanes = mergeLanes(\n          currentlyRenderingFiber.lanes,\n          updateLane,\n        );\n        markSkippedUpdateLanes(updateLane);\n      } else {\n        // This update does have sufficient priority.\n\n        if (newBaseQueueLast !== null) {\n          const clone: Update<S, A> = {\n            // This update is going to be committed so we never want uncommit\n            // it. Using NoLane works because 0 is a subset of all bitmasks, so\n            // this will never be skipped by the check above.\n            lane: NoLane,\n            action: update.action,\n            eagerReducer: update.eagerReducer,\n            eagerState: update.eagerState,\n            next: (null: any),\n          };\n          newBaseQueueLast = newBaseQueueLast.next = clone;\n        }\n\n        // Process this update.\n        if (update.eagerReducer === reducer) {\n          // If this update was processed eagerly, and its reducer matches the\n          // current reducer, we can use the eagerly computed state.\n          newState = ((update.eagerState: any): S);\n        } else {\n          const action = update.action;\n          newState = reducer(newState, action);\n        }\n      }\n      update = update.next;\n    } while (update !== null && update !== first);\n\n    if (newBaseQueueLast === null) {\n      newBaseState = newState;\n    } else {\n      newBaseQueueLast.next = (newBaseQueueFirst: any);\n    }\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    hook.baseState = newBaseState;\n    hook.baseQueue = newBaseQueueLast;\n\n    queue.lastRenderedState = newState;\n  }\n\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  return [hook.memoizedState, dispatch];\n}\n\nfunction rerenderReducer<S, I, A>(\n  reducer: (S, A) => S,\n  initialArg: I,\n  init?: I => S,\n): [S, Dispatch<A>] {\n  const hook = updateWorkInProgressHook();\n  const queue = hook.queue;\n  invariant(\n    queue !== null,\n    'Should have a queue. This is likely a bug in React. Please file an issue.',\n  );\n\n  queue.lastRenderedReducer = reducer;\n\n  // This is a re-render. Apply the new render phase updates to the previous\n  // work-in-progress hook.\n  const dispatch: Dispatch<A> = (queue.dispatch: any);\n  const lastRenderPhaseUpdate = queue.pending;\n  let newState = hook.memoizedState;\n  if (lastRenderPhaseUpdate !== null) {\n    // The queue doesn't persist past this render pass.\n    queue.pending = null;\n\n    const firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n    let update = firstRenderPhaseUpdate;\n    do {\n      // Process this render phase update. We don't have to check the\n      // priority because it will always be the same as the current\n      // render's.\n      const action = update.action;\n      newState = reducer(newState, action);\n      update = update.next;\n    } while (update !== firstRenderPhaseUpdate);\n\n    // Mark that the fiber performed work, but only if the new state is\n    // different from the current state.\n    if (!is(newState, hook.memoizedState)) {\n      markWorkInProgressReceivedUpdate();\n    }\n\n    hook.memoizedState = newState;\n    // Don't persist the state accumulated from the render phase updates to\n    // the base state unless the queue is empty.\n    // TODO: Not sure if this is the desired semantics, but it's what we\n    // do for gDSFP. I can't remember why.\n    if (hook.baseQueue === null) {\n      hook.baseState = newState;\n    }\n\n    queue.lastRenderedState = newState;\n  }\n  return [newState, dispatch];\n}\n\ntype MutableSourceMemoizedState<Source, Snapshot> = {|\n  refs: {\n    getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n    setSnapshot: Snapshot => void,\n  },\n  source: MutableSource<any>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n|};\n\nfunction readFromUnsubcribedMutableSource<Source, Snapshot>(\n  root: FiberRoot,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n): Snapshot {\n  if (__DEV__) {\n    warnAboutMultipleRenderersDEV(source);\n  }\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  // Is it safe for this component to read from this source during the current render?\n  let isSafeToReadFromSource = false;\n\n  // Check the version first.\n  // If this render has already been started with a specific version,\n  // we can use it alone to determine if we can safely read from the source.\n  const currentRenderVersion = getWorkInProgressVersion(source);\n  if (currentRenderVersion !== null) {\n    // It's safe to read if the store hasn't been mutated since the last time\n    // we read something.\n    isSafeToReadFromSource = currentRenderVersion === version;\n  } else {\n    // If there's no version, then this is the first time we've read from the\n    // source during the current render pass, so we need to do a bit more work.\n    // What we need to determine is if there are any hooks that already\n    // subscribed to the source, and if so, whether there are any pending\n    // mutations that haven't been synchronized yet.\n    //\n    // If there are no pending mutations, then `root.mutableReadLanes` will be\n    // empty, and we know we can safely read.\n    //\n    // If there *are* pending mutations, we may still be able to safely read\n    // if the currently rendering lanes are inclusive of the pending mutation\n    // lanes, since that guarantees that the value we're about to read from\n    // the source is consistent with the values that we read during the most\n    // recent mutation.\n    isSafeToReadFromSource = isSubsetOfLanes(\n      renderLanes,\n      root.mutableReadLanes,\n    );\n\n    if (isSafeToReadFromSource) {\n      // If it's safe to read from this source during the current render,\n      // store the version in case other components read from it.\n      // A changed version number will let those components know to throw and restart the render.\n      setWorkInProgressVersion(source, version);\n    }\n  }\n\n  if (isSafeToReadFromSource) {\n    const snapshot = getSnapshot(source._source);\n    if (__DEV__) {\n      if (typeof snapshot === 'function') {\n        console.error(\n          'Mutable source should not return a function as the snapshot value. ' +\n            'Functions may close over mutable values and cause tearing.',\n        );\n      }\n    }\n    return snapshot;\n  } else {\n    // This handles the special case of a mutable source being shared between renderers.\n    // In that case, if the source is mutated between the first and second renderer,\n    // The second renderer don't know that it needs to reset the WIP version during unwind,\n    // (because the hook only marks sources as dirty if it's written to their WIP version).\n    // That would cause this tear check to throw again and eventually be visible to the user.\n    // We can avoid this infinite loop by explicitly marking the source as dirty.\n    //\n    // This can lead to tearing in the first renderer when it resumes,\n    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).\n    markSourceAsDirty(source);\n\n    invariant(\n      false,\n      'Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction useMutableSource<Source, Snapshot>(\n  hook: Hook,\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const root = ((getWorkInProgressRoot(): any): FiberRoot);\n  invariant(\n    root !== null,\n    'Expected a work-in-progress root. This is a bug in React. Please file an issue.',\n  );\n\n  const getVersion = source._getVersion;\n  const version = getVersion(source._source);\n\n  const dispatcher = ReactCurrentDispatcher.current;\n\n  // eslint-disable-next-line prefer-const\n  let [currentSnapshot, setSnapshot] = dispatcher.useState(() =>\n    readFromUnsubcribedMutableSource(root, source, getSnapshot),\n  );\n  let snapshot = currentSnapshot;\n\n  // Grab a handle to the state hook as well.\n  // We use it to clear the pending update queue if we have a new source.\n  const stateHook = ((workInProgressHook: any): Hook);\n\n  const memoizedState = ((hook.memoizedState: any): MutableSourceMemoizedState<\n    Source,\n    Snapshot,\n  >);\n  const refs = memoizedState.refs;\n  const prevGetSnapshot = refs.getSnapshot;\n  const prevSource = memoizedState.source;\n  const prevSubscribe = memoizedState.subscribe;\n\n  const fiber = currentlyRenderingFiber;\n\n  hook.memoizedState = ({\n    refs,\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n\n  // Sync the values needed by our subscription handler after each commit.\n  dispatcher.useEffect(() => {\n    refs.getSnapshot = getSnapshot;\n\n    // Normally the dispatch function for a state hook never changes,\n    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.\n    // handleChange() below needs to reference the dispatch function without re-subscribing,\n    // so we use a ref to ensure that it always has the latest version.\n    refs.setSnapshot = setSnapshot;\n\n    // Check for a possible change between when we last rendered now.\n    const maybeNewVersion = getVersion(source._source);\n    if (!is(version, maybeNewVersion)) {\n      const maybeNewSnapshot = getSnapshot(source._source);\n      if (__DEV__) {\n        if (typeof maybeNewSnapshot === 'function') {\n          console.error(\n            'Mutable source should not return a function as the snapshot value. ' +\n              'Functions may close over mutable values and cause tearing.',\n          );\n        }\n      }\n\n      if (!is(snapshot, maybeNewSnapshot)) {\n        setSnapshot(maybeNewSnapshot);\n\n        const lane = requestUpdateLane(fiber);\n        markRootMutableRead(root, lane);\n      }\n      // If the source mutated between render and now,\n      // there may be state updates already scheduled from the old source.\n      // Entangle the updates so that they render in the same batch.\n      markRootEntangled(root, root.mutableReadLanes);\n    }\n  }, [getSnapshot, source, subscribe]);\n\n  // If we got a new source or subscribe function, re-subscribe in a passive effect.\n  dispatcher.useEffect(() => {\n    const handleChange = () => {\n      const latestGetSnapshot = refs.getSnapshot;\n      const latestSetSnapshot = refs.setSnapshot;\n\n      try {\n        latestSetSnapshot(latestGetSnapshot(source._source));\n\n        // Record a pending mutable source update with the same expiration time.\n        const lane = requestUpdateLane(fiber);\n\n        markRootMutableRead(root, lane);\n      } catch (error) {\n        // A selector might throw after a source mutation.\n        // e.g. it might try to read from a part of the store that no longer exists.\n        // In this case we should still schedule an update with React.\n        // Worst case the selector will throw again and then an error boundary will handle it.\n        latestSetSnapshot(\n          (() => {\n            throw error;\n          }: any),\n        );\n      }\n    };\n\n    const unsubscribe = subscribe(source._source, handleChange);\n    if (__DEV__) {\n      if (typeof unsubscribe !== 'function') {\n        console.error(\n          'Mutable source subscribe function must return an unsubscribe function.',\n        );\n      }\n    }\n\n    return unsubscribe;\n  }, [source, subscribe]);\n\n  // If any of the inputs to useMutableSource change, reading is potentially unsafe.\n  //\n  // If either the source or the subscription have changed we can't can't trust the update queue.\n  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.\n  //\n  // If the getSnapshot function changed, we also shouldn't rely on the update queue.\n  // It's possible that the underlying source was mutated between the when the last \"change\" event fired,\n  // and when the current render (with the new getSnapshot function) is processed.\n  //\n  // In both cases, we need to throw away pending updates (since they are no longer relevant)\n  // and treat reading from the source as we do in the mount case.\n  if (\n    !is(prevGetSnapshot, getSnapshot) ||\n    !is(prevSource, source) ||\n    !is(prevSubscribe, subscribe)\n  ) {\n    // Create a new queue and setState method,\n    // So if there are interleaved updates, they get pushed to the older queue.\n    // When this becomes current, the previous queue and dispatch method will be discarded,\n    // including any interleaving updates that occur.\n    const newQueue = {\n      pending: null,\n      dispatch: null,\n      lastRenderedReducer: basicStateReducer,\n      lastRenderedState: snapshot,\n    };\n    newQueue.dispatch = setSnapshot = (dispatchAction.bind(\n      null,\n      currentlyRenderingFiber,\n      newQueue,\n    ): any);\n    stateHook.queue = newQueue;\n    stateHook.baseQueue = null;\n    snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);\n    stateHook.memoizedState = stateHook.baseState = snapshot;\n  }\n\n  return snapshot;\n}\n\nfunction mountMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = mountWorkInProgressHook();\n  hook.memoizedState = ({\n    refs: {\n      getSnapshot,\n      setSnapshot: (null: any),\n    },\n    source,\n    subscribe,\n  }: MutableSourceMemoizedState<Source, Snapshot>);\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction updateMutableSource<Source, Snapshot>(\n  source: MutableSource<Source>,\n  getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n  subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n): Snapshot {\n  const hook = updateWorkInProgressHook();\n  return useMutableSource(hook, source, getSnapshot, subscribe);\n}\n\nfunction mountState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  const hook = mountWorkInProgressHook();\n  if (typeof initialState === 'function') {\n    // $FlowFixMe: Flow doesn't like mixed types\n    initialState = initialState();\n  }\n  hook.memoizedState = hook.baseState = initialState;\n  const queue = (hook.queue = {\n    pending: null,\n    dispatch: null,\n    lastRenderedReducer: basicStateReducer,\n    lastRenderedState: (initialState: any),\n  });\n  const dispatch: Dispatch<\n    BasicStateAction<S>,\n  > = (queue.dispatch = (dispatchAction.bind(\n    null,\n    currentlyRenderingFiber,\n    queue,\n  ): any));\n  return [hook.memoizedState, dispatch];\n}\n\nfunction updateState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return updateReducer(basicStateReducer, (initialState: any));\n}\n\nfunction rerenderState<S>(\n  initialState: (() => S) | S,\n): [S, Dispatch<BasicStateAction<S>>] {\n  return rerenderReducer(basicStateReducer, (initialState: any));\n}\n\nfunction pushEffect(tag, create, destroy, deps) {\n  const effect: Effect = {\n    tag,\n    create,\n    destroy,\n    deps,\n    // Circular\n    next: (null: any),\n  };\n  let componentUpdateQueue: null | FunctionComponentUpdateQueue = (currentlyRenderingFiber.updateQueue: any);\n  if (componentUpdateQueue === null) {\n    componentUpdateQueue = createFunctionComponentUpdateQueue();\n    currentlyRenderingFiber.updateQueue = (componentUpdateQueue: any);\n    componentUpdateQueue.lastEffect = effect.next = effect;\n  } else {\n    const lastEffect = componentUpdateQueue.lastEffect;\n    if (lastEffect === null) {\n      componentUpdateQueue.lastEffect = effect.next = effect;\n    } else {\n      const firstEffect = lastEffect.next;\n      lastEffect.next = effect;\n      effect.next = firstEffect;\n      componentUpdateQueue.lastEffect = effect;\n    }\n  }\n  return effect;\n}\n\nfunction mountRef<T>(initialValue: T): {|current: T|} {\n  const hook = mountWorkInProgressHook();\n  const ref = {current: initialValue};\n  if (__DEV__) {\n    Object.seal(ref);\n  }\n  hook.memoizedState = ref;\n  return ref;\n}\n\nfunction updateRef<T>(initialValue: T): {|current: T|} {\n  const hook = updateWorkInProgressHook();\n  return hook.memoizedState;\n}\n\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  currentlyRenderingFiber.flags |= fiberFlags;\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    undefined,\n    nextDeps,\n  );\n}\n\nfunction updateEffectImpl(fiberFlags, hookFlags, create, deps): void {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  let destroy = undefined;\n\n  if (currentHook !== null) {\n    const prevEffect = currentHook.memoizedState;\n    destroy = prevEffect.destroy;\n    if (nextDeps !== null) {\n      const prevDeps = prevEffect.deps;\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        pushEffect(hookFlags, create, destroy, nextDeps);\n        return;\n      }\n    }\n  }\n\n  currentlyRenderingFiber.flags |= fiberFlags;\n\n  hook.memoizedState = pushEffect(\n    HookHasEffect | hookFlags,\n    create,\n    destroy,\n    nextDeps,\n  );\n}\n\nfunction mountEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  return mountEffectImpl(\n    UpdateEffect | PassiveEffect,\n    HookPassive,\n    create,\n    deps,\n  );\n}\n\nfunction updateEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber);\n    }\n  }\n  return updateEffectImpl(\n    UpdateEffect | PassiveEffect,\n    HookPassive,\n    create,\n    deps,\n  );\n}\n\nfunction mountLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return mountEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction updateLayoutEffect(\n  create: () => (() => void) | void,\n  deps: Array<mixed> | void | null,\n): void {\n  return updateEffectImpl(UpdateEffect, HookLayout, create, deps);\n}\n\nfunction imperativeHandleEffect<T>(\n  create: () => T,\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n) {\n  if (typeof ref === 'function') {\n    const refCallback = ref;\n    const inst = create();\n    refCallback(inst);\n    return () => {\n      refCallback(null);\n    };\n  } else if (ref !== null && ref !== undefined) {\n    const refObject = ref;\n    if (__DEV__) {\n      if (!refObject.hasOwnProperty('current')) {\n        console.error(\n          'Expected useImperativeHandle() first argument to either be a ' +\n            'ref callback or React.createRef() object. Instead received: %s.',\n          'an object with keys {' + Object.keys(refObject).join(', ') + '}',\n        );\n      }\n    }\n    const inst = create();\n    refObject.current = inst;\n    return () => {\n      refObject.current = null;\n    };\n  }\n}\n\nfunction mountImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return mountEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction updateImperativeHandle<T>(\n  ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n  create: () => T,\n  deps: Array<mixed> | void | null,\n): void {\n  if (__DEV__) {\n    if (typeof create !== 'function') {\n      console.error(\n        'Expected useImperativeHandle() second argument to be a function ' +\n          'that creates a handle. Instead received: %s.',\n        create !== null ? typeof create : 'null',\n      );\n    }\n  }\n\n  // TODO: If deps are provided, should we skip comparing the ref itself?\n  const effectDeps =\n    deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n\n  return updateEffectImpl(\n    UpdateEffect,\n    HookLayout,\n    imperativeHandleEffect.bind(null, create, ref),\n    effectDeps,\n  );\n}\n\nfunction mountDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n  // This hook is normally a no-op.\n  // The react-debug-hooks package injects its own implementation\n  // so that e.g. DevTools can display custom hook values.\n}\n\nconst updateDebugValue = mountDebugValue;\n\nfunction mountCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction updateCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  hook.memoizedState = [callback, nextDeps];\n  return callback;\n}\n\nfunction mountMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = mountWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction updateMemo<T>(\n  nextCreate: () => T,\n  deps: Array<mixed> | void | null,\n): T {\n  const hook = updateWorkInProgressHook();\n  const nextDeps = deps === undefined ? null : deps;\n  const prevState = hook.memoizedState;\n  if (prevState !== null) {\n    // Assume these are defined. If they're not, areHookInputsEqual will warn.\n    if (nextDeps !== null) {\n      const prevDeps: Array<mixed> | null = prevState[1];\n      if (areHookInputsEqual(nextDeps, prevDeps)) {\n        return prevState[0];\n      }\n    }\n  }\n  const nextValue = nextCreate();\n  hook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction mountDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = mountState(value);\n  mountEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction updateDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = updateState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction rerenderDeferredValue<T>(value: T): T {\n  const [prevValue, setValue] = rerenderState(value);\n  updateEffect(() => {\n    const prevTransition = ReactCurrentBatchConfig.transition;\n    ReactCurrentBatchConfig.transition = 1;\n    try {\n      setValue(value);\n    } finally {\n      ReactCurrentBatchConfig.transition = prevTransition;\n    }\n  }, [value]);\n  return prevValue;\n}\n\nfunction startTransition(setPending, callback) {\n  const priorityLevel = getCurrentPriorityLevel();\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    setCurrentUpdateLanePriority(\n      higherLanePriority(previousLanePriority, InputContinuousLanePriority),\n    );\n\n    runWithPriority(\n      priorityLevel < UserBlockingPriority\n        ? UserBlockingPriority\n        : priorityLevel,\n      () => {\n        setPending(true);\n      },\n    );\n\n    // TODO: Can remove this. Was only necessary because we used to give\n    // different behavior to transitions without a config object. Now they are\n    // all treated the same.\n    setCurrentUpdateLanePriority(DefaultLanePriority);\n\n    runWithPriority(\n      priorityLevel > NormalPriority ? NormalPriority : priorityLevel,\n      () => {\n        const prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = 1;\n        try {\n          setPending(false);\n          callback();\n        } finally {\n          if (decoupleUpdatePriorityFromScheduler) {\n            setCurrentUpdateLanePriority(previousLanePriority);\n          }\n          ReactCurrentBatchConfig.transition = prevTransition;\n        }\n      },\n    );\n  } else {\n    runWithPriority(\n      priorityLevel < UserBlockingPriority\n        ? UserBlockingPriority\n        : priorityLevel,\n      () => {\n        setPending(true);\n      },\n    );\n\n    runWithPriority(\n      priorityLevel > NormalPriority ? NormalPriority : priorityLevel,\n      () => {\n        const prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = 1;\n        try {\n          setPending(false);\n          callback();\n        } finally {\n          ReactCurrentBatchConfig.transition = prevTransition;\n        }\n      },\n    );\n  }\n}\n\nfunction mountTransition(): [(() => void) => void, boolean] {\n  const [isPending, setPending] = mountState(false);\n  // The `start` method can be stored on a ref, since `setPending`\n  // never changes.\n  const start = startTransition.bind(null, setPending);\n  mountRef(start);\n  return [start, isPending];\n}\n\nfunction updateTransition(): [(() => void) => void, boolean] {\n  const [isPending] = updateState(false);\n  const startRef = updateRef();\n  const start: (() => void) => void = (startRef.current: any);\n  return [start, isPending];\n}\n\nfunction rerenderTransition(): [(() => void) => void, boolean] {\n  const [isPending] = rerenderState(false);\n  const startRef = updateRef();\n  const start: (() => void) => void = (startRef.current: any);\n  return [start, isPending];\n}\n\nlet isUpdatingOpaqueValueInRenderPhase = false;\nexport function getIsUpdatingOpaqueValueInRenderPhaseInDEV(): boolean | void {\n  if (__DEV__) {\n    return isUpdatingOpaqueValueInRenderPhase;\n  }\n}\n\nfunction warnOnOpaqueIdentifierAccessInDEV(fiber) {\n  if (__DEV__) {\n    // TODO: Should warn in effects and callbacks, too\n    const name = getComponentName(fiber.type) || 'Unknown';\n    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {\n      console.error(\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the ' +\n          'value directly.',\n      );\n      didWarnAboutUseOpaqueIdentifier[name] = true;\n    }\n  }\n}\n\nfunction mountOpaqueIdentifier(): OpaqueIDType | void {\n  const makeId = __DEV__\n    ? makeClientIdInDEV.bind(\n        null,\n        warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber),\n      )\n    : makeClientId;\n\n  if (getIsHydrating()) {\n    let didUpgrade = false;\n    const fiber = currentlyRenderingFiber;\n    const readValue = () => {\n      if (!didUpgrade) {\n        // Only upgrade once. This works even inside the render phase because\n        // the update is added to a shared queue, which outlasts the\n        // in-progress render.\n        didUpgrade = true;\n        if (__DEV__) {\n          isUpdatingOpaqueValueInRenderPhase = true;\n          setId(makeId());\n          isUpdatingOpaqueValueInRenderPhase = false;\n          warnOnOpaqueIdentifierAccessInDEV(fiber);\n        } else {\n          setId(makeId());\n        }\n      }\n      invariant(\n        false,\n        'The object passed back from useOpaqueIdentifier is meant to be ' +\n          'passed through to attributes only. Do not read the value directly.',\n      );\n    };\n    const id = makeOpaqueHydratingObject(readValue);\n\n    const setId = mountState(id)[1];\n\n    if ((currentlyRenderingFiber.mode & BlockingMode) === NoMode) {\n      currentlyRenderingFiber.flags |= UpdateEffect | PassiveEffect;\n      pushEffect(\n        HookHasEffect | HookPassive,\n        () => {\n          setId(makeId());\n        },\n        undefined,\n        null,\n      );\n    }\n    return id;\n  } else {\n    const id = makeId();\n    mountState(id);\n    return id;\n  }\n}\n\nfunction updateOpaqueIdentifier(): OpaqueIDType | void {\n  const id = updateState(undefined)[0];\n  return id;\n}\n\nfunction rerenderOpaqueIdentifier(): OpaqueIDType | void {\n  const id = rerenderState(undefined)[0];\n  return id;\n}\n\nfunction dispatchAction<S, A>(\n  fiber: Fiber,\n  queue: UpdateQueue<S, A>,\n  action: A,\n) {\n  if (__DEV__) {\n    if (typeof arguments[3] === 'function') {\n      console.error(\n        \"State updates from the useState() and useReducer() Hooks don't support the \" +\n          'second callback argument. To execute a side effect after ' +\n          'rendering, declare it in the component body with useEffect().',\n      );\n    }\n  }\n\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n\n  const update: Update<S, A> = {\n    lane,\n    action,\n    eagerReducer: null,\n    eagerState: null,\n    next: (null: any),\n  };\n\n  // Append the update to the end of the list.\n  const pending = queue.pending;\n  if (pending === null) {\n    // This is the first update. Create a circular list.\n    update.next = update;\n  } else {\n    update.next = pending.next;\n    pending.next = update;\n  }\n  queue.pending = update;\n\n  const alternate = fiber.alternate;\n  if (\n    fiber === currentlyRenderingFiber ||\n    (alternate !== null && alternate === currentlyRenderingFiber)\n  ) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n  } else {\n    if (\n      fiber.lanes === NoLanes &&\n      (alternate === null || alternate.lanes === NoLanes)\n    ) {\n      // The queue is currently empty, which means we can eagerly compute the\n      // next state before entering the render phase. If the new state is the\n      // same as the current state, we may be able to bail out entirely.\n      const lastRenderedReducer = queue.lastRenderedReducer;\n      if (lastRenderedReducer !== null) {\n        let prevDispatcher;\n        if (__DEV__) {\n          prevDispatcher = ReactCurrentDispatcher.current;\n          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n        }\n        try {\n          const currentState: S = (queue.lastRenderedState: any);\n          const eagerState = lastRenderedReducer(currentState, action);\n          // Stash the eagerly computed state, and the reducer used to compute\n          // it, on the update object. If the reducer hasn't changed by the\n          // time we enter the render phase, then the eager state can be used\n          // without calling the reducer again.\n          update.eagerReducer = lastRenderedReducer;\n          update.eagerState = eagerState;\n          if (is(eagerState, currentState)) {\n            // Fast path. We can bail out without scheduling React to re-render.\n            // It's still possible that we'll need to rebase this update later,\n            // if the component re-renders for a different reason and by that\n            // time the reducer has changed.\n            return;\n          }\n        } catch (error) {\n          // Suppress the error. It will throw again in the render phase.\n        } finally {\n          if (__DEV__) {\n            ReactCurrentDispatcher.current = prevDispatcher;\n          }\n        }\n      }\n    }\n    if (__DEV__) {\n      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n      if ('undefined' !== typeof jest) {\n        warnIfNotScopedWithMatchingAct(fiber);\n        warnIfNotCurrentlyActingUpdatesInDev(fiber);\n      }\n    }\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      if (fiber.mode & DebugTracingMode) {\n        const name = getComponentName(fiber.type) || 'Unknown';\n        logStateUpdateScheduled(name, lane, action);\n      }\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markStateUpdateScheduled(fiber, lane);\n  }\n}\n\nexport const ContextOnlyDispatcher: Dispatcher = {\n  readContext,\n\n  useCallback: throwInvalidHookError,\n  useContext: throwInvalidHookError,\n  useEffect: throwInvalidHookError,\n  useImperativeHandle: throwInvalidHookError,\n  useLayoutEffect: throwInvalidHookError,\n  useMemo: throwInvalidHookError,\n  useReducer: throwInvalidHookError,\n  useRef: throwInvalidHookError,\n  useState: throwInvalidHookError,\n  useDebugValue: throwInvalidHookError,\n  useDeferredValue: throwInvalidHookError,\n  useTransition: throwInvalidHookError,\n  useMutableSource: throwInvalidHookError,\n  useOpaqueIdentifier: throwInvalidHookError,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnMount: Dispatcher = {\n  readContext,\n\n  useCallback: mountCallback,\n  useContext: readContext,\n  useEffect: mountEffect,\n  useImperativeHandle: mountImperativeHandle,\n  useLayoutEffect: mountLayoutEffect,\n  useMemo: mountMemo,\n  useReducer: mountReducer,\n  useRef: mountRef,\n  useState: mountState,\n  useDebugValue: mountDebugValue,\n  useDeferredValue: mountDeferredValue,\n  useTransition: mountTransition,\n  useMutableSource: mountMutableSource,\n  useOpaqueIdentifier: mountOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnUpdate: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: updateReducer,\n  useRef: updateRef,\n  useState: updateState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: updateDeferredValue,\n  useTransition: updateTransition,\n  useMutableSource: updateMutableSource,\n  useOpaqueIdentifier: updateOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nconst HooksDispatcherOnRerender: Dispatcher = {\n  readContext,\n\n  useCallback: updateCallback,\n  useContext: readContext,\n  useEffect: updateEffect,\n  useImperativeHandle: updateImperativeHandle,\n  useLayoutEffect: updateLayoutEffect,\n  useMemo: updateMemo,\n  useReducer: rerenderReducer,\n  useRef: updateRef,\n  useState: rerenderState,\n  useDebugValue: updateDebugValue,\n  useDeferredValue: rerenderDeferredValue,\n  useTransition: rerenderTransition,\n  useMutableSource: updateMutableSource,\n  useOpaqueIdentifier: rerenderOpaqueIdentifier,\n\n  unstable_isNewReconciler: enableNewReconciler,\n};\n\nlet HooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnMountWithHookTypesInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet HooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnMountInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnUpdateInDEV: Dispatcher | null = null;\nlet InvalidNestedHooksDispatcherOnRerenderInDEV: Dispatcher | null = null;\n\nif (__DEV__) {\n  const warnInvalidContextAccess = () => {\n    console.error(\n      'Context can only be read while React is rendering. ' +\n        'In classes, you can read it in the render method or getDerivedStateFromProps. ' +\n        'In function components, you can read it directly in the function body, but not ' +\n        'inside Hooks like useReducer() or useMemo().',\n    );\n  };\n\n  const warnInvalidHookAccess = () => {\n    console.error(\n      'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +\n        'You can only call Hooks at the top level of your React function. ' +\n        'For more information, see ' +\n        'https://reactjs.org/link/rules-of-hooks',\n    );\n  };\n\n  HooksDispatcherOnMountInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      mountHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      mountHookTypesDev();\n      checkDepsAreArrayDev(deps);\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnMountWithHookTypesInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnUpdateInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  HooksDispatcherOnRerenderInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      return readContext(context, observedBits);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnMountInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;\n      try {\n        return mountState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      mountHookTypesDev();\n      return mountOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnUpdateInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n\n  InvalidNestedHooksDispatcherOnRerenderInDEV = {\n    readContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      warnInvalidContextAccess();\n      return readContext(context, observedBits);\n    },\n\n    useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useCallback';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateCallback(callback, deps);\n    },\n    useContext<T>(\n      context: ReactContext<T>,\n      observedBits: void | number | boolean,\n    ): T {\n      currentHookNameInDev = 'useContext';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return readContext(context, observedBits);\n    },\n    useEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateEffect(create, deps);\n    },\n    useImperativeHandle<T>(\n      ref: {|current: T | null|} | ((inst: T | null) => mixed) | null | void,\n      create: () => T,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useImperativeHandle';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateImperativeHandle(ref, create, deps);\n    },\n    useLayoutEffect(\n      create: () => (() => void) | void,\n      deps: Array<mixed> | void | null,\n    ): void {\n      currentHookNameInDev = 'useLayoutEffect';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateLayoutEffect(create, deps);\n    },\n    useMemo<T>(create: () => T, deps: Array<mixed> | void | null): T {\n      currentHookNameInDev = 'useMemo';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return updateMemo(create, deps);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useReducer<S, I, A>(\n      reducer: (S, A) => S,\n      initialArg: I,\n      init?: I => S,\n    ): [S, Dispatch<A>] {\n      currentHookNameInDev = 'useReducer';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderReducer(reducer, initialArg, init);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useRef<T>(initialValue: T): {|current: T|} {\n      currentHookNameInDev = 'useRef';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateRef(initialValue);\n    },\n    useState<S>(\n      initialState: (() => S) | S,\n    ): [S, Dispatch<BasicStateAction<S>>] {\n      currentHookNameInDev = 'useState';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      const prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n      try {\n        return rerenderState(initialState);\n      } finally {\n        ReactCurrentDispatcher.current = prevDispatcher;\n      }\n    },\n    useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void {\n      currentHookNameInDev = 'useDebugValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateDebugValue(value, formatterFn);\n    },\n    useDeferredValue<T>(value: T): T {\n      currentHookNameInDev = 'useDeferredValue';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderDeferredValue(value);\n    },\n    useTransition(): [(() => void) => void, boolean] {\n      currentHookNameInDev = 'useTransition';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderTransition();\n    },\n    useMutableSource<Source, Snapshot>(\n      source: MutableSource<Source>,\n      getSnapshot: MutableSourceGetSnapshotFn<Source, Snapshot>,\n      subscribe: MutableSourceSubscribeFn<Source, Snapshot>,\n    ): Snapshot {\n      currentHookNameInDev = 'useMutableSource';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return updateMutableSource(source, getSnapshot, subscribe);\n    },\n    useOpaqueIdentifier(): OpaqueIDType | void {\n      currentHookNameInDev = 'useOpaqueIdentifier';\n      warnInvalidHookAccess();\n      updateHookTypesDev();\n      return rerenderOpaqueIdentifier();\n    },\n\n    unstable_isNewReconciler: enableNewReconciler,\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n} from 'shared/ReactFeatureFlags';\nimport {Profiler} from './ReactWorkTags';\n\n// Intentionally not named imports because Rollup would use dynamic dispatch for\n// CommonJS interop named imports.\nimport * as Scheduler from 'scheduler';\n\nconst {unstable_now: now} = Scheduler;\n\nexport type ProfilerTimer = {\n  getCommitTime(): number,\n  recordCommitTime(): void,\n  startProfilerTimer(fiber: Fiber): void,\n  stopProfilerTimerIfRunning(fiber: Fiber): void,\n  stopProfilerTimerIfRunningAndRecordDelta(fiber: Fiber): void,\n  ...\n};\n\nlet commitTime: number = 0;\nlet layoutEffectStartTime: number = -1;\nlet profilerStartTime: number = -1;\nlet passiveEffectStartTime: number = -1;\n\nfunction getCommitTime(): number {\n  return commitTime;\n}\n\nfunction recordCommitTime(): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  commitTime = now();\n}\n\nfunction startProfilerTimer(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  profilerStartTime = now();\n\n  if (((fiber.actualStartTime: any): number) < 0) {\n    fiber.actualStartTime = now();\n  }\n}\n\nfunction stopProfilerTimerIfRunning(fiber: Fiber): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n  profilerStartTime = -1;\n}\n\nfunction stopProfilerTimerIfRunningAndRecordDelta(\n  fiber: Fiber,\n  overrideBaseTime: boolean,\n): void {\n  if (!enableProfilerTimer) {\n    return;\n  }\n\n  if (profilerStartTime >= 0) {\n    const elapsedTime = now() - profilerStartTime;\n    fiber.actualDuration += elapsedTime;\n    if (overrideBaseTime) {\n      fiber.selfBaseDuration = elapsedTime;\n    }\n    profilerStartTime = -1;\n  }\n}\n\nfunction recordLayoutEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (layoutEffectStartTime >= 0) {\n    const elapsedTime = now() - layoutEffectStartTime;\n\n    layoutEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor.\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      if (parentFiber.tag === Profiler) {\n        const parentStateNode = parentFiber.stateNode;\n        parentStateNode.effectDuration += elapsedTime;\n        break;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction recordPassiveEffectDuration(fiber: Fiber): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n\n  if (passiveEffectStartTime >= 0) {\n    const elapsedTime = now() - passiveEffectStartTime;\n\n    passiveEffectStartTime = -1;\n\n    // Store duration on the next nearest Profiler ancestor.\n    let parentFiber = fiber.return;\n    while (parentFiber !== null) {\n      if (parentFiber.tag === Profiler) {\n        const parentStateNode = parentFiber.stateNode;\n        if (parentStateNode !== null) {\n          // Detached fibers have their state node cleared out.\n          // In this case, the return pointer is also cleared out,\n          // so we won't be able to report the time spent in this Profiler's subtree.\n          parentStateNode.passiveEffectDuration += elapsedTime;\n        }\n        break;\n      }\n      parentFiber = parentFiber.return;\n    }\n  }\n}\n\nfunction startLayoutEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  layoutEffectStartTime = now();\n}\n\nfunction startPassiveEffectTimer(): void {\n  if (!enableProfilerTimer || !enableProfilerCommitHooks) {\n    return;\n  }\n  passiveEffectStartTime = now();\n}\n\nfunction transferActualDuration(fiber: Fiber): void {\n  // Transfer time spent rendering these children so we don't lose it\n  // after we rerender. This is used as a helper in special cases\n  // where we should count the work of multiple passes.\n  let child = fiber.child;\n  while (child) {\n    fiber.actualDuration += child.actualDuration;\n    child = child.sibling;\n  }\n}\n\nexport {\n  getCommitTime,\n  recordCommitTime,\n  recordLayoutEffectDuration,\n  recordPassiveEffectDuration,\n  startLayoutEffectTimer,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunning,\n  stopProfilerTimerIfRunningAndRecordDelta,\n  transferActualDuration,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactProviderType, ReactContext} from 'shared/ReactTypes';\nimport type {BlockComponent} from 'react/src/ReactBlock';\nimport type {LazyComponent as LazyComponentType} from 'react/src/ReactLazy';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {MutableSource} from 'shared/ReactTypes';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n  SuspenseListTailMode,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {\n  OffscreenProps,\n  OffscreenState,\n} from './ReactFiberOffscreenComponent';\n\nimport checkPropTypes from 'shared/checkPropTypes';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Hydrating,\n  ContentReset,\n  DidCapture,\n  Update,\n  Ref,\n  Deletion,\n  ForceUpdateForLegacySuspense,\n} from './ReactFiberFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {\n  debugRenderPhaseSideEffectsForStrictMode,\n  disableLegacyContext,\n  disableModulePatternComponents,\n  enableProfilerTimer,\n  enableSchedulerTracing,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  warnAboutDefaultPropsOnFunctionComponents,\n  enableScopeAPI,\n  enableBlocksAPI,\n} from 'shared/ReactFeatureFlags';\nimport invariant from 'shared/invariant';\nimport shallowEqual from 'shared/shallowEqual';\nimport getComponentName from 'shared/getComponentName';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {REACT_LAZY_TYPE, getIteratorFn} from 'shared/ReactSymbols';\nimport {\n  getCurrentFiberOwnerNameInDevOrNull,\n  setIsRendering,\n} from './ReactCurrentFiber';\nimport {\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n  resolveClassForHotReloading,\n} from './ReactFiberHotReloading.old';\n\nimport {\n  mountChildFibers,\n  reconcileChildFibers,\n  cloneChildFibers,\n} from './ReactChildFiber.old';\nimport {\n  processUpdateQueue,\n  cloneUpdateQueue,\n  initializeUpdateQueue,\n} from './ReactUpdateQueue.old';\nimport {\n  NoLane,\n  NoLanes,\n  SyncLane,\n  OffscreenLane,\n  DefaultHydrationLane,\n  SomeRetryLane,\n  NoTimestamp,\n  includesSomeLane,\n  laneToLanes,\n  removeLanes,\n  mergeLanes,\n  getBumpedLaneForHydration,\n} from './ReactFiberLane';\nimport {\n  ConcurrentMode,\n  NoMode,\n  ProfileMode,\n  StrictMode,\n  BlockingMode,\n} from './ReactTypeOfMode';\nimport {\n  shouldSetTextContent,\n  isSuspenseInstancePending,\n  isSuspenseInstanceFallback,\n  registerSuspenseInstanceRetry,\n  supportsHydration,\n} from './ReactFiberHostConfig';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport {shouldSuspend} from './ReactFiberReconciler';\nimport {pushHostContext, pushHostContainer} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  pushSuspenseContext,\n  InvisibleParentSuspenseContext,\n  ForceSuspenseFallback,\n  hasSuspenseContext,\n  setDefaultShallowSuspenseContext,\n  addSubtreeSuspenseContext,\n  setShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  pushProvider,\n  propagateContextChange,\n  readContext,\n  prepareToReadContext,\n  calculateChangedBits,\n  scheduleWorkOnParentPath,\n} from './ReactFiberNewContext.old';\nimport {renderWithHooks, bailoutHooks} from './ReactFiberHooks.old';\nimport {stopProfilerTimerIfRunning} from './ReactProfilerTimer.old';\nimport {\n  getMaskedContext,\n  getUnmaskedContext,\n  hasContextChanged as hasLegacyContextChanged,\n  pushContextProvider as pushLegacyContextProvider,\n  isContextProvider as isLegacyContextProvider,\n  pushTopLevelContextObject,\n  invalidateContextProvider,\n} from './ReactFiberContext.old';\nimport {\n  enterHydrationState,\n  reenterHydrationStateFromDehydratedSuspenseInstance,\n  resetHydrationState,\n  tryToClaimNextHydratableInstance,\n  warnIfHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  adoptClassInstance,\n  applyDerivedStateFromProps,\n  constructClassInstance,\n  mountClassInstance,\n  resumeMountClassInstance,\n  updateClassInstance,\n} from './ReactFiberClassComponent.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  resolveLazyComponentTag,\n  createFiberFromTypeAndProps,\n  createFiberFromFragment,\n  createFiberFromOffscreen,\n  createWorkInProgress,\n  isSimpleFunctionComponent,\n} from './ReactFiber.old';\nimport {\n  markSpawnedWork,\n  retryDehydratedSuspenseBoundary,\n  scheduleUpdateOnFiber,\n  renderDidSuspendDelayIfPossible,\n  markSkippedUpdateLanes,\n  getWorkInProgressRoot,\n  pushRenderLanes,\n  getExecutionContext,\n  RetryAfterError,\n  NoContext,\n} from './ReactFiberWorkLoop.old';\nimport {unstable_wrap as Schedule_tracing_wrap} from 'scheduler/tracing';\nimport {setWorkInProgressVersion} from './ReactMutableSource.old';\n\nimport {disableLogs, reenableLogs} from 'shared/ConsolePatchingDev';\n\nconst ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n\nlet didReceiveUpdate: boolean = false;\n\nlet didWarnAboutBadClass;\nlet didWarnAboutModulePatternComponent;\nlet didWarnAboutContextTypeOnFunctionComponent;\nlet didWarnAboutGetDerivedStateOnFunctionComponent;\nlet didWarnAboutFunctionRefs;\nexport let didWarnAboutReassigningProps;\nlet didWarnAboutRevealOrder;\nlet didWarnAboutTailOptions;\nlet didWarnAboutDefaultPropsOnFunctionComponent;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutModulePatternComponent = {};\n  didWarnAboutContextTypeOnFunctionComponent = {};\n  didWarnAboutGetDerivedStateOnFunctionComponent = {};\n  didWarnAboutFunctionRefs = {};\n  didWarnAboutReassigningProps = false;\n  didWarnAboutRevealOrder = {};\n  didWarnAboutTailOptions = {};\n  didWarnAboutDefaultPropsOnFunctionComponent = {};\n}\n\nexport function reconcileChildren(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  if (current === null) {\n    // If this is a fresh new component that hasn't been rendered yet, we\n    // won't update its child set by applying minimal side-effects. Instead,\n    // we will add them all to the child before it gets rendered. That means\n    // we can optimize this reconciliation pass by not tracking side-effects.\n    workInProgress.child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    // If the current child is the same as the work in progress, it means that\n    // we haven't yet started any work on these children. Therefore, we use\n    // the clone algorithm to create a copy of all the current children.\n\n    // If we had any progressed work already, that is invalid at this point so\n    // let's throw it out.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      current.child,\n      nextChildren,\n      renderLanes,\n    );\n  }\n}\n\nfunction forceUnmountCurrentAndReconcile(\n  current: Fiber,\n  workInProgress: Fiber,\n  nextChildren: any,\n  renderLanes: Lanes,\n) {\n  // This function is fork of reconcileChildren. It's used in cases where we\n  // want to reconcile without matching against the existing set. This has the\n  // effect of all current children being unmounted; even if the type and key\n  // are the same, the old child is unmounted and a new child is created.\n  //\n  // To do this, we're going to go through the reconcile algorithm twice. In\n  // the first pass, we schedule a deletion for all the current children by\n  // passing null.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    current.child,\n    null,\n    renderLanes,\n  );\n  // In the second pass, we mount the new children. The trick here is that we\n  // pass null in place of where we usually pass the current child set. This has\n  // the effect of remounting all children regardless of whether their\n  // identities match.\n  workInProgress.child = reconcileChildFibers(\n    workInProgress,\n    null,\n    nextChildren,\n    renderLanes,\n  );\n}\n\nfunction updateForwardRef(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  const render = Component.render;\n  const ref = workInProgress.ref;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      ref,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  updateLanes: Lanes,\n  renderLanes: Lanes,\n): null | Fiber {\n  if (current === null) {\n    const type = Component.type;\n    if (\n      isSimpleFunctionComponent(type) &&\n      Component.compare === null &&\n      // SimpleMemoComponent codepath doesn't resolve outer props either.\n      Component.defaultProps === undefined\n    ) {\n      let resolvedType = type;\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(type);\n      }\n      // If this is a plain function component without default props,\n      // and with only the default shallow comparison, we upgrade it\n      // to a SimpleMemoComponent to allow fast path updates.\n      workInProgress.tag = SimpleMemoComponent;\n      workInProgress.type = resolvedType;\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, type);\n      }\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        resolvedType,\n        nextProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    if (__DEV__) {\n      const innerPropTypes = type.propTypes;\n      if (innerPropTypes) {\n        // Inner memo component props aren't currently validated in createElement.\n        // We could move it there, but we'd still need this for lazy code path.\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(type),\n        );\n      }\n    }\n    const child = createFiberFromTypeAndProps(\n      Component.type,\n      null,\n      nextProps,\n      workInProgress,\n      workInProgress.mode,\n      renderLanes,\n    );\n    child.ref = workInProgress.ref;\n    child.return = workInProgress;\n    workInProgress.child = child;\n    return child;\n  }\n  if (__DEV__) {\n    const type = Component.type;\n    const innerPropTypes = type.propTypes;\n    if (innerPropTypes) {\n      // Inner memo component props aren't currently validated in createElement.\n      // We could move it there, but we'd still need this for lazy code path.\n      checkPropTypes(\n        innerPropTypes,\n        nextProps, // Resolved props\n        'prop',\n        getComponentName(type),\n      );\n    }\n  }\n  const currentChild = ((current.child: any): Fiber); // This is always exactly one child\n  if (!includesSomeLane(updateLanes, renderLanes)) {\n    // This will be the props with resolved defaultProps,\n    // unlike current.memoizedProps which will be the unresolved ones.\n    const prevProps = currentChild.memoizedProps;\n    // Default to shallow comparison\n    let compare = Component.compare;\n    compare = compare !== null ? compare : shallowEqual;\n    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  const newChild = createWorkInProgress(currentChild, nextProps);\n  newChild.ref = workInProgress.ref;\n  newChild.return = workInProgress;\n  workInProgress.child = newChild;\n  return newChild;\n}\n\nfunction updateSimpleMemoComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  updateLanes: Lanes,\n  renderLanes: Lanes,\n): null | Fiber {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens when the inner render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      let outerMemoType = workInProgress.elementType;\n      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n        // We warn when you define propTypes on lazy()\n        // so let's just skip over it to find memo() outer wrapper.\n        // Inner props for memo are validated later.\n        const lazyComponent: LazyComponentType<any, any> = outerMemoType;\n        const payload = lazyComponent._payload;\n        const init = lazyComponent._init;\n        try {\n          outerMemoType = init(payload);\n        } catch (x) {\n          outerMemoType = null;\n        }\n        // Inner propTypes will be validated in the function component path.\n        const outerPropTypes = outerMemoType && (outerMemoType: any).propTypes;\n        if (outerPropTypes) {\n          checkPropTypes(\n            outerPropTypes,\n            nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n            'prop',\n            getComponentName(outerMemoType),\n          );\n        }\n      }\n    }\n  }\n  if (current !== null) {\n    const prevProps = current.memoizedProps;\n    if (\n      shallowEqual(prevProps, nextProps) &&\n      current.ref === workInProgress.ref &&\n      // Prevent bailout if the implementation changed due to hot reload.\n      (__DEV__ ? workInProgress.type === current.type : true)\n    ) {\n      didReceiveUpdate = false;\n      if (!includesSomeLane(renderLanes, updateLanes)) {\n        // The pending lanes were cleared at the beginning of beginWork. We're\n        // about to bail out, but there might be other lanes that weren't\n        // included in the current render. Usually, the priority level of the\n        // remaining updates is accumlated during the evaluation of the\n        // component (i.e. when processing the update queue). But since since\n        // we're bailing out early *without* evaluating the component, we need\n        // to account for it here, too. Reset to the value of the current fiber.\n        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n        // because a MemoComponent fiber does not have hooks or an update queue;\n        // rather, it wraps around an inner component, which may or may not\n        // contains hooks.\n        // TODO: Move the reset at in beginWork out of the common path so that\n        // this is no longer necessary.\n        workInProgress.lanes = current.lanes;\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      }\n    }\n  }\n  return updateFunctionComponent(\n    current,\n    workInProgress,\n    Component,\n    nextProps,\n    renderLanes,\n  );\n}\n\nfunction updateOffscreenComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps: OffscreenProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  const prevState: OffscreenState | null =\n    current !== null ? current.memoizedState : null;\n\n  if (\n    nextProps.mode === 'hidden' ||\n    nextProps.mode === 'unstable-defer-without-hiding'\n  ) {\n    if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n      // In legacy sync mode, don't defer the subtree. Render it now.\n      // TODO: Figure out what we should do in Blocking mode.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      pushRenderLanes(workInProgress, renderLanes);\n    } else if (!includesSomeLane(renderLanes, (OffscreenLane: Lane))) {\n      let nextBaseLanes;\n      if (prevState !== null) {\n        const prevBaseLanes = prevState.baseLanes;\n        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);\n      } else {\n        nextBaseLanes = renderLanes;\n      }\n\n      // Schedule this fiber to re-render at offscreen priority. Then bailout.\n      if (enableSchedulerTracing) {\n        markSpawnedWork((OffscreenLane: Lane));\n      }\n      workInProgress.lanes = workInProgress.childLanes = laneToLanes(\n        OffscreenLane,\n      );\n      const nextState: OffscreenState = {\n        baseLanes: nextBaseLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      // We're about to bail out, but we need to push this to the stack anyway\n      // to avoid a push/pop misalignment.\n      pushRenderLanes(workInProgress, nextBaseLanes);\n      return null;\n    } else {\n      // Rendering at offscreen, so we can clear the base lanes.\n      const nextState: OffscreenState = {\n        baseLanes: NoLanes,\n      };\n      workInProgress.memoizedState = nextState;\n      // Push the lanes that were skipped when we bailed out.\n      const subtreeRenderLanes =\n        prevState !== null ? prevState.baseLanes : renderLanes;\n      pushRenderLanes(workInProgress, subtreeRenderLanes);\n    }\n  } else {\n    let subtreeRenderLanes;\n    if (prevState !== null) {\n      subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);\n      // Since we're not hidden anymore, reset the state\n      workInProgress.memoizedState = null;\n    } else {\n      // We weren't previously hidden, and we still aren't, so there's nothing\n      // special to do. Need to push to the stack regardless, though, to avoid\n      // a push/pop misalignment.\n      subtreeRenderLanes = renderLanes;\n    }\n    pushRenderLanes(workInProgress, subtreeRenderLanes);\n  }\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\n// Note: These happen to have identical begin phases, for now. We shouldn't hold\n// ourselves to this constraint, though. If the behavior diverges, we should\n// fork the function.\nconst updateLegacyHiddenComponent = updateOffscreenComponent;\n\nfunction updateFragment(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateMode(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextChildren = workInProgress.pendingProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateProfiler(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  if (enableProfilerTimer) {\n    workInProgress.flags |= Update;\n\n    // Reset effect durations for the next eventual effect phase.\n    // These are reset during render to allow the DevTools commit hook a chance to read them,\n    const stateNode = workInProgress.stateNode;\n    stateNode.effectDuration = 0;\n    stateNode.passiveEffectDuration = 0;\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction markRef(current: Fiber | null, workInProgress: Fiber) {\n  const ref = workInProgress.ref;\n  if (\n    (current === null && ref !== null) ||\n    (current !== null && current.ref !== ref)\n  ) {\n    // Schedule a Ref effect\n    workInProgress.flags |= Ref;\n  }\n}\n\nfunction updateFunctionComponent(\n  current,\n  workInProgress,\n  Component,\n  nextProps: any,\n  renderLanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      context,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateBlock<Props, Data>(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  block: BlockComponent<Props, Data>,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  // TODO: current can be non-null here even if the component\n  // hasn't yet mounted. This happens after the first render suspends.\n  // We'll need to figure out if this is fine or can cause issues.\n\n  const render = block._render;\n  const data = block._data;\n\n  // The rest is a fork of updateFunctionComponent\n  let nextChildren;\n  prepareToReadContext(workInProgress, renderLanes);\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      data,\n      renderLanes,\n    );\n    if (\n      debugRenderPhaseSideEffectsForStrictMode &&\n      workInProgress.mode & StrictMode\n    ) {\n      disableLogs();\n      try {\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          data,\n          renderLanes,\n        );\n      } finally {\n        reenableLogs();\n      }\n    }\n    setIsRendering(false);\n  } else {\n    nextChildren = renderWithHooks(\n      current,\n      workInProgress,\n      render,\n      nextProps,\n      data,\n      renderLanes,\n    );\n  }\n\n  if (current !== null && !didReceiveUpdate) {\n    bailoutHooks(current, workInProgress, renderLanes);\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  nextProps: any,\n  renderLanes: Lanes,\n) {\n  if (__DEV__) {\n    if (workInProgress.type !== workInProgress.elementType) {\n      // Lazy component props can't be validated in createElement\n      // because they're only guaranteed to be resolved here.\n      const innerPropTypes = Component.propTypes;\n      if (innerPropTypes) {\n        checkPropTypes(\n          innerPropTypes,\n          nextProps, // Resolved props\n          'prop',\n          getComponentName(Component),\n        );\n      }\n    }\n  }\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  const instance = workInProgress.stateNode;\n  let shouldUpdate;\n  if (instance === null) {\n    if (current !== null) {\n      // A class component without an instance only mounts if it suspended\n      // inside a non-concurrent tree, in an inconsistent state. We want to\n      // treat it like a new mount, even though an empty version of it already\n      // committed. Disconnect the alternate pointers.\n      current.alternate = null;\n      workInProgress.alternate = null;\n      // Since this is conceptually a new fiber, schedule a Placement effect\n      workInProgress.flags |= Placement;\n    }\n    // In the initial pass we might need to construct the instance.\n    constructClassInstance(workInProgress, Component, nextProps);\n    mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n    shouldUpdate = true;\n  } else if (current === null) {\n    // In a resume, we'll already have an instance we can reuse.\n    shouldUpdate = resumeMountClassInstance(\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  } else {\n    shouldUpdate = updateClassInstance(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes,\n    );\n  }\n  const nextUnitOfWork = finishClassComponent(\n    current,\n    workInProgress,\n    Component,\n    shouldUpdate,\n    hasContext,\n    renderLanes,\n  );\n  if (__DEV__) {\n    const inst = workInProgress.stateNode;\n    if (shouldUpdate && inst.props !== nextProps) {\n      if (!didWarnAboutReassigningProps) {\n        console.error(\n          'It looks like %s is reassigning its own `this.props` while rendering. ' +\n            'This is not supported and can lead to confusing bugs.',\n          getComponentName(workInProgress.type) || 'a component',\n        );\n      }\n      didWarnAboutReassigningProps = true;\n    }\n  }\n  return nextUnitOfWork;\n}\n\nfunction finishClassComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  Component: any,\n  shouldUpdate: boolean,\n  hasContext: boolean,\n  renderLanes: Lanes,\n) {\n  // Refs should update even if shouldComponentUpdate returns false\n  markRef(current, workInProgress);\n\n  const didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (!shouldUpdate && !didCaptureError) {\n    // Context providers should defer to sCU for rendering\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, Component, false);\n    }\n\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n\n  const instance = workInProgress.stateNode;\n\n  // Rerender\n  ReactCurrentOwner.current = workInProgress;\n  let nextChildren;\n  if (\n    didCaptureError &&\n    typeof Component.getDerivedStateFromError !== 'function'\n  ) {\n    // If we captured an error, but getDerivedStateFromError is not defined,\n    // unmount all the children. componentDidCatch will schedule an update to\n    // re-render a fallback. This is temporary until we migrate everyone to\n    // the new API.\n    // TODO: Warn in a future release.\n    nextChildren = null;\n\n    if (enableProfilerTimer) {\n      stopProfilerTimerIfRunning(workInProgress);\n    }\n  } else {\n    if (__DEV__) {\n      setIsRendering(true);\n      nextChildren = instance.render();\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          instance.render();\n        } finally {\n          reenableLogs();\n        }\n      }\n      setIsRendering(false);\n    } else {\n      nextChildren = instance.render();\n    }\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  if (current !== null && didCaptureError) {\n    // If we're recovering from an error, reconcile without reusing any of\n    // the existing children. Conceptually, the normal children and the children\n    // that are shown on error are two different sets, so we shouldn't reuse\n    // normal children even if their identities match.\n    forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n\n  // Memoize state using the values we just used to render.\n  // TODO: Restructure so we never read values from the instance.\n  workInProgress.memoizedState = instance.state;\n\n  // The context might have changed so we need to recalculate it.\n  if (hasContext) {\n    invalidateContextProvider(workInProgress, Component, true);\n  }\n\n  return workInProgress.child;\n}\n\nfunction pushHostRootContext(workInProgress) {\n  const root = (workInProgress.stateNode: FiberRoot);\n  if (root.pendingContext) {\n    pushTopLevelContextObject(\n      workInProgress,\n      root.pendingContext,\n      root.pendingContext !== root.context,\n    );\n  } else if (root.context) {\n    // Should always be set\n    pushTopLevelContextObject(workInProgress, root.context, false);\n  }\n  pushHostContainer(workInProgress, root.containerInfo);\n}\n\nfunction updateHostRoot(current, workInProgress, renderLanes) {\n  pushHostRootContext(workInProgress);\n  const updateQueue = workInProgress.updateQueue;\n  invariant(\n    current !== null && updateQueue !== null,\n    'If the root does not have an updateQueue, we should have already ' +\n      'bailed out. This error is likely caused by a bug in React. Please ' +\n      'file an issue.',\n  );\n  const nextProps = workInProgress.pendingProps;\n  const prevState = workInProgress.memoizedState;\n  const prevChildren = prevState !== null ? prevState.element : null;\n  cloneUpdateQueue(current, workInProgress);\n  processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n  const nextState = workInProgress.memoizedState;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  const nextChildren = nextState.element;\n  if (nextChildren === prevChildren) {\n    resetHydrationState();\n    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n  }\n  const root: FiberRoot = workInProgress.stateNode;\n  if (root.hydrate && enterHydrationState(workInProgress)) {\n    // If we don't have any current children this might be the first pass.\n    // We always try to hydrate. If this isn't a hydration pass there won't\n    // be any children to hydrate which is effectively the same thing as\n    // not hydrating.\n\n    if (supportsHydration) {\n      const mutableSourceEagerHydrationData =\n        root.mutableSourceEagerHydrationData;\n      if (mutableSourceEagerHydrationData != null) {\n        for (let i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {\n          const mutableSource = ((mutableSourceEagerHydrationData[\n            i\n          ]: any): MutableSource<any>);\n          const version = mutableSourceEagerHydrationData[i + 1];\n          setWorkInProgressVersion(mutableSource, version);\n        }\n      }\n    }\n\n    const child = mountChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n    workInProgress.child = child;\n\n    let node = child;\n    while (node) {\n      // Mark each child as hydrating. This is a fast path to know whether this\n      // tree is part of a hydrating tree. This is used to determine if a child\n      // node has fully mounted yet, and for scheduling event replaying.\n      // Conceptually this is similar to Placement in that a new subtree is\n      // inserted into the React tree here. It just happens to not need DOM\n      // mutations because it already exists.\n      node.flags = (node.flags & ~Placement) | Hydrating;\n      node = node.sibling;\n    }\n  } else {\n    // Otherwise reset hydration state in case we aborted and resumed another\n    // root.\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n    resetHydrationState();\n  }\n  return workInProgress.child;\n}\n\nfunction updateHostComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContext(workInProgress);\n\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n\n  const type = workInProgress.type;\n  const nextProps = workInProgress.pendingProps;\n  const prevProps = current !== null ? current.memoizedProps : null;\n\n  let nextChildren = nextProps.children;\n  const isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n  if (isDirectTextChild) {\n    // We special case a direct text child of a host node. This is a common\n    // case. We won't handle it as a reified child. We will instead handle\n    // this in the host environment that also has access to this prop. That\n    // avoids allocating another HostText fiber and traversing it.\n    nextChildren = null;\n  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {\n    // If we're switching from a direct text child to a normal child, or to\n    // empty, we need to schedule the text content to be reset.\n    workInProgress.flags |= ContentReset;\n  }\n\n  markRef(current, workInProgress);\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateHostText(current, workInProgress) {\n  if (current === null) {\n    tryToClaimNextHydratableInstance(workInProgress);\n  }\n  // Nothing to do here. This is terminal. We'll do the completion step\n  // immediately after.\n  return null;\n}\n\nfunction mountLazyComponent(\n  _current,\n  workInProgress,\n  elementType,\n  updateLanes,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // A lazy component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  const lazyComponent: LazyComponentType<any, any> = elementType;\n  const payload = lazyComponent._payload;\n  const init = lazyComponent._init;\n  let Component = init(payload);\n  // Store the unwrapped component in the type.\n  workInProgress.type = Component;\n  const resolvedTag = (workInProgress.tag = resolveLazyComponentTag(Component));\n  const resolvedProps = resolveDefaultProps(Component, props);\n  let child;\n  switch (resolvedTag) {\n    case FunctionComponent: {\n      if (__DEV__) {\n        validateFunctionComponentInDev(workInProgress, Component);\n        workInProgress.type = Component = resolveFunctionForHotReloading(\n          Component,\n        );\n      }\n      child = updateFunctionComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ClassComponent: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveClassForHotReloading(\n          Component,\n        );\n      }\n      child = updateClassComponent(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case ForwardRef: {\n      if (__DEV__) {\n        workInProgress.type = Component = resolveForwardRefForHotReloading(\n          Component,\n        );\n      }\n      child = updateForwardRef(\n        null,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n      return child;\n    }\n    case MemoComponent: {\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = Component.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentName(Component),\n            );\n          }\n        }\n      }\n      child = updateMemoComponent(\n        null,\n        workInProgress,\n        Component,\n        resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n        updateLanes,\n        renderLanes,\n      );\n      return child;\n    }\n    case Block: {\n      if (enableBlocksAPI) {\n        // TODO: Resolve for Hot Reloading.\n        child = updateBlock(\n          null,\n          workInProgress,\n          Component,\n          props,\n          renderLanes,\n        );\n        return child;\n      }\n      break;\n    }\n  }\n  let hint = '';\n  if (__DEV__) {\n    if (\n      Component !== null &&\n      typeof Component === 'object' &&\n      Component.$$typeof === REACT_LAZY_TYPE\n    ) {\n      hint = ' Did you wrap a component in React.lazy() more than once?';\n    }\n  }\n  // This message intentionally doesn't mention ForwardRef or MemoComponent\n  // because the fact that it's a separate type of work is an\n  // implementation detail.\n  invariant(\n    false,\n    'Element type is invalid. Received a promise that resolves to: %s. ' +\n      'Lazy element type must resolve to a class or function.%s',\n    Component,\n    hint,\n  );\n}\n\nfunction mountIncompleteClassComponent(\n  _current,\n  workInProgress,\n  Component,\n  nextProps,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An incomplete component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  // Promote the fiber to a class and try rendering again.\n  workInProgress.tag = ClassComponent;\n\n  // The rest of this function is a fork of `updateClassComponent`\n\n  // Push context providers early to prevent context stack mismatches.\n  // During mounting we don't know the child context yet as the instance doesn't exist.\n  // We will invalidate the child context in finishClassComponent() right after rendering.\n  let hasContext;\n  if (isLegacyContextProvider(Component)) {\n    hasContext = true;\n    pushLegacyContextProvider(workInProgress);\n  } else {\n    hasContext = false;\n  }\n  prepareToReadContext(workInProgress, renderLanes);\n\n  constructClassInstance(workInProgress, Component, nextProps);\n  mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n\n  return finishClassComponent(\n    null,\n    workInProgress,\n    Component,\n    true,\n    hasContext,\n    renderLanes,\n  );\n}\n\nfunction mountIndeterminateComponent(\n  _current,\n  workInProgress,\n  Component,\n  renderLanes,\n) {\n  if (_current !== null) {\n    // An indeterminate component only mounts if it suspended inside a non-\n    // concurrent tree, in an inconsistent state. We want to treat it like\n    // a new mount, even though an empty version of it already committed.\n    // Disconnect the alternate pointers.\n    _current.alternate = null;\n    workInProgress.alternate = null;\n    // Since this is conceptually a new fiber, schedule a Placement effect\n    workInProgress.flags |= Placement;\n  }\n\n  const props = workInProgress.pendingProps;\n  let context;\n  if (!disableLegacyContext) {\n    const unmaskedContext = getUnmaskedContext(\n      workInProgress,\n      Component,\n      false,\n    );\n    context = getMaskedContext(workInProgress, unmaskedContext);\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  let value;\n\n  if (__DEV__) {\n    if (\n      Component.prototype &&\n      typeof Component.prototype.render === 'function'\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutBadClass[componentName]) {\n        console.error(\n          \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n            'This is likely to cause errors. Change %s to extend React.Component instead.',\n          componentName,\n          componentName,\n        );\n        didWarnAboutBadClass[componentName] = true;\n      }\n    }\n\n    if (workInProgress.mode & StrictMode) {\n      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n    }\n\n    setIsRendering(true);\n    ReactCurrentOwner.current = workInProgress;\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n    setIsRendering(false);\n  } else {\n    value = renderWithHooks(\n      null,\n      workInProgress,\n      Component,\n      props,\n      context,\n      renderLanes,\n    );\n  }\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n\n  if (__DEV__) {\n    // Support for module components is deprecated and is removed behind a flag.\n    // Whether or not it would crash later, we want to show a good message in DEV first.\n    if (\n      typeof value === 'object' &&\n      value !== null &&\n      typeof value.render === 'function' &&\n      value.$$typeof === undefined\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n  }\n\n  if (\n    // Run these checks in production only if the flag is off.\n    // Eventually we'll delete this branch altogether.\n    !disableModulePatternComponents &&\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.render === 'function' &&\n    value.$$typeof === undefined\n  ) {\n    if (__DEV__) {\n      const componentName = getComponentName(Component) || 'Unknown';\n      if (!didWarnAboutModulePatternComponent[componentName]) {\n        console.error(\n          'The <%s /> component appears to be a function component that returns a class instance. ' +\n            'Change %s to a class that extends React.Component instead. ' +\n            \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n            \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n            'cannot be called with `new` by React.',\n          componentName,\n          componentName,\n          componentName,\n        );\n        didWarnAboutModulePatternComponent[componentName] = true;\n      }\n    }\n\n    // Proceed under the assumption that this is a class instance\n    workInProgress.tag = ClassComponent;\n\n    // Throw out any hooks that were used.\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    let hasContext = false;\n    if (isLegacyContextProvider(Component)) {\n      hasContext = true;\n      pushLegacyContextProvider(workInProgress);\n    } else {\n      hasContext = false;\n    }\n\n    workInProgress.memoizedState =\n      value.state !== null && value.state !== undefined ? value.state : null;\n\n    initializeUpdateQueue(workInProgress);\n\n    const getDerivedStateFromProps = Component.getDerivedStateFromProps;\n    if (typeof getDerivedStateFromProps === 'function') {\n      applyDerivedStateFromProps(\n        workInProgress,\n        Component,\n        getDerivedStateFromProps,\n        props,\n      );\n    }\n\n    adoptClassInstance(workInProgress, value);\n    mountClassInstance(workInProgress, Component, props, renderLanes);\n    return finishClassComponent(\n      null,\n      workInProgress,\n      Component,\n      true,\n      hasContext,\n      renderLanes,\n    );\n  } else {\n    // Proceed under the assumption that this is a function component\n    workInProgress.tag = FunctionComponent;\n    if (__DEV__) {\n      if (disableLegacyContext && Component.contextTypes) {\n        console.error(\n          '%s uses the legacy contextTypes API which is no longer supported. ' +\n            'Use React.createContext() with React.useContext() instead.',\n          getComponentName(Component) || 'Unknown',\n        );\n      }\n\n      if (\n        debugRenderPhaseSideEffectsForStrictMode &&\n        workInProgress.mode & StrictMode\n      ) {\n        disableLogs();\n        try {\n          value = renderWithHooks(\n            null,\n            workInProgress,\n            Component,\n            props,\n            context,\n            renderLanes,\n          );\n        } finally {\n          reenableLogs();\n        }\n      }\n    }\n    reconcileChildren(null, workInProgress, value, renderLanes);\n    if (__DEV__) {\n      validateFunctionComponentInDev(workInProgress, Component);\n    }\n    return workInProgress.child;\n  }\n}\n\nfunction validateFunctionComponentInDev(workInProgress: Fiber, Component: any) {\n  if (__DEV__) {\n    if (Component) {\n      if (Component.childContextTypes) {\n        console.error(\n          '%s(...): childContextTypes cannot be defined on a function component.',\n          Component.displayName || Component.name || 'Component',\n        );\n      }\n    }\n    if (workInProgress.ref !== null) {\n      let info = '';\n      const ownerName = getCurrentFiberOwnerNameInDevOrNull();\n      if (ownerName) {\n        info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n      }\n\n      let warningKey = ownerName || workInProgress._debugID || '';\n      const debugSource = workInProgress._debugSource;\n      if (debugSource) {\n        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n      }\n      if (!didWarnAboutFunctionRefs[warningKey]) {\n        didWarnAboutFunctionRefs[warningKey] = true;\n        console.error(\n          'Function components cannot be given refs. ' +\n            'Attempts to access this ref will fail. ' +\n            'Did you mean to use React.forwardRef()?%s',\n          info,\n        );\n      }\n    }\n\n    if (\n      warnAboutDefaultPropsOnFunctionComponents &&\n      Component.defaultProps !== undefined\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Support for defaultProps will be removed from function components ' +\n            'in a future major release. Use JavaScript default parameters instead.',\n          componentName,\n        );\n        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (typeof Component.getDerivedStateFromProps === 'function') {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support getDerivedStateFromProps.',\n          componentName,\n        );\n        didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;\n      }\n    }\n\n    if (\n      typeof Component.contextType === 'object' &&\n      Component.contextType !== null\n    ) {\n      const componentName = getComponentName(Component) || 'Unknown';\n\n      if (!didWarnAboutContextTypeOnFunctionComponent[componentName]) {\n        console.error(\n          '%s: Function components do not support contextType.',\n          componentName,\n        );\n        didWarnAboutContextTypeOnFunctionComponent[componentName] = true;\n      }\n    }\n  }\n}\n\nconst SUSPENDED_MARKER: SuspenseState = {\n  dehydrated: null,\n  retryLane: NoLane,\n};\n\nfunction mountSuspenseOffscreenState(renderLanes: Lanes): OffscreenState {\n  return {\n    baseLanes: renderLanes,\n  };\n}\n\nfunction updateSuspenseOffscreenState(\n  prevOffscreenState: OffscreenState,\n  renderLanes: Lanes,\n): OffscreenState {\n  return {\n    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n  };\n}\n\n// TODO: Probably should inline this back\nfunction shouldRemainOnFallback(\n  suspenseContext: SuspenseContext,\n  current: null | Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // If we're already showing a fallback, there are cases where we need to\n  // remain on that fallback regardless of whether the content has resolved.\n  // For example, SuspenseList coordinates when nested content appears.\n  if (current !== null) {\n    const suspenseState: SuspenseState = current.memoizedState;\n    if (suspenseState === null) {\n      // Currently showing content. Don't hide it, even if ForceSuspenseFallack\n      // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n      // Note: This is a factoring smell. Can't remain on a fallback if there's\n      // no fallback to remain on.\n      return false;\n    }\n  }\n\n  // Not currently showing content. Consult the Suspense context.\n  return hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n}\n\nfunction getRemainingWorkInPrimaryTree(current: Fiber, renderLanes) {\n  // TODO: Should not remove render lanes that were pinged during this render\n  return removeLanes(current.childLanes, renderLanes);\n}\n\nfunction updateSuspenseComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n\n  // This is used by DevTools to force a boundary to suspend.\n  if (__DEV__) {\n    if (shouldSuspend(workInProgress)) {\n      workInProgress.flags |= DidCapture;\n    }\n  }\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  let showFallback = false;\n  const didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;\n\n  if (\n    didSuspend ||\n    shouldRemainOnFallback(\n      suspenseContext,\n      current,\n      workInProgress,\n      renderLanes,\n    )\n  ) {\n    // Something in this boundary's subtree already suspended. Switch to\n    // rendering the fallback children.\n    showFallback = true;\n    workInProgress.flags &= ~DidCapture;\n  } else {\n    // Attempting the main content\n    if (\n      current === null ||\n      (current.memoizedState: null | SuspenseState) !== null\n    ) {\n      // This is a new mount or this boundary is already showing a fallback state.\n      // Mark this subtree context as having at least one invisible parent that could\n      // handle the fallback state.\n      // Boundaries without fallbacks or should be avoided are not considered since\n      // they cannot handle preferred fallback states.\n      if (\n        nextProps.fallback !== undefined &&\n        nextProps.unstable_avoidThisFallback !== true\n      ) {\n        suspenseContext = addSubtreeSuspenseContext(\n          suspenseContext,\n          InvisibleParentSuspenseContext,\n        );\n      }\n    }\n  }\n\n  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  // OK, the next part is confusing. We're about to reconcile the Suspense\n  // boundary's children. This involves some custom reconcilation logic. Two\n  // main reasons this is so complicated.\n  //\n  // First, Legacy Mode has different semantics for backwards compatibility. The\n  // primary tree will commit in an inconsistent state, so when we do the\n  // second pass to render the fallback, we do some exceedingly, uh, clever\n  // hacks to make that not totally break. Like transferring effects and\n  // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n  // because we bailout on the primary tree completely and leave it in its old\n  // state, no effects. Same as what we do for Offscreen (except that\n  // Offscreen doesn't have the first render pass).\n  //\n  // Second is hydration. During hydration, the Suspense fiber has a slightly\n  // different layout, where the child points to a dehydrated fragment, which\n  // contains the DOM rendered by the server.\n  //\n  // Third, even if you set all that aside, Suspense is like error boundaries in\n  // that we first we try to render one tree, and if that fails, we render again\n  // and switch to a different tree. Like a try/catch block. So we have to track\n  // which branch we're currently rendering. Ideally we would model this using\n  // a stack.\n  if (current === null) {\n    // Initial mount\n    // If we're currently hydrating, try to hydrate this boundary.\n    // But only if this has a fallback.\n    if (nextProps.fallback !== undefined) {\n      tryToClaimNextHydratableInstance(workInProgress);\n      // This could've been a dehydrated suspense component.\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null) {\n          const dehydrated = suspenseState.dehydrated;\n          if (dehydrated !== null) {\n            return mountDehydratedSuspenseComponent(\n              workInProgress,\n              dehydrated,\n              renderLanes,\n            );\n          }\n        }\n      }\n    }\n\n    const nextPrimaryChildren = nextProps.children;\n    const nextFallbackChildren = nextProps.fallback;\n    if (showFallback) {\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n      return fallbackFragment;\n    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {\n      // This is a CPU-bound tree. Skip this tree and show a placeholder to\n      // unblock the surrounding content. Then immediately retry after the\n      // initial commit.\n      const fallbackFragment = mountSuspenseFallbackChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        nextFallbackChildren,\n        renderLanes,\n      );\n      const primaryChildFragment: Fiber = (workInProgress.child: any);\n      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n        renderLanes,\n      );\n      workInProgress.memoizedState = SUSPENDED_MARKER;\n\n      // Since nothing actually suspended, there will nothing to ping this to\n      // get it started back up to attempt the next item. While in terms of\n      // priority this work has the same priority as this current render, it's\n      // not part of the same transition once the transition has committed. If\n      // it's sync, we still want to yield so that it can be painted.\n      // Conceptually, this is really the same as pinging. We can use any\n      // RetryLane even if it's the one currently rendering since we're leaving\n      // it behind on this node.\n      workInProgress.lanes = SomeRetryLane;\n      if (enableSchedulerTracing) {\n        markSpawnedWork(SomeRetryLane);\n      }\n      return fallbackFragment;\n    } else {\n      return mountSuspensePrimaryChildren(\n        workInProgress,\n        nextPrimaryChildren,\n        renderLanes,\n      );\n    }\n  } else {\n    // This is an update.\n\n    // If the current fiber has a SuspenseState, that means it's already showing\n    // a fallback.\n    const prevState: null | SuspenseState = current.memoizedState;\n    if (prevState !== null) {\n      // The current tree is already showing a fallback\n\n      // Special path for hydration\n      if (enableSuspenseServerRenderer) {\n        const dehydrated = prevState.dehydrated;\n        if (dehydrated !== null) {\n          if (!didSuspend) {\n            return updateDehydratedSuspenseComponent(\n              current,\n              workInProgress,\n              dehydrated,\n              prevState,\n              renderLanes,\n            );\n          } else if (\n            (workInProgress.memoizedState: null | SuspenseState) !== null\n          ) {\n            // Something suspended and we should still be in dehydrated mode.\n            // Leave the existing child in place.\n            workInProgress.child = current.child;\n            // The dehydrated completion pass expects this flag to be there\n            // but the normal suspense pass doesn't.\n            workInProgress.flags |= DidCapture;\n            return null;\n          } else {\n            // Suspended but we should no longer be in dehydrated mode.\n            // Therefore we now have to render the fallback.\n            const nextPrimaryChildren = nextProps.children;\n            const nextFallbackChildren = nextProps.fallback;\n            const fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(\n              current,\n              workInProgress,\n              nextPrimaryChildren,\n              nextFallbackChildren,\n              renderLanes,\n            );\n            const primaryChildFragment: Fiber = (workInProgress.child: any);\n            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(\n              renderLanes,\n            );\n            workInProgress.memoizedState = SUSPENDED_MARKER;\n            return fallbackChildFragment;\n          }\n        }\n      }\n\n      if (showFallback) {\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    } else {\n      // The current tree is not already showing a fallback.\n      if (showFallback) {\n        // Timed out.\n        const nextFallbackChildren = nextProps.fallback;\n        const nextPrimaryChildren = nextProps.children;\n        const fallbackChildFragment = updateSuspenseFallbackChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          nextFallbackChildren,\n          renderLanes,\n        );\n        const primaryChildFragment: Fiber = (workInProgress.child: any);\n        const prevOffscreenState: OffscreenState | null = (current.child: any)\n          .memoizedState;\n        primaryChildFragment.memoizedState =\n          prevOffscreenState === null\n            ? mountSuspenseOffscreenState(renderLanes)\n            : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n        primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n          current,\n          renderLanes,\n        );\n        // Skip the primary children, and continue working on the\n        // fallback children.\n        workInProgress.memoizedState = SUSPENDED_MARKER;\n        return fallbackChildFragment;\n      } else {\n        // Still haven't timed out. Continue rendering the children, like we\n        // normally do.\n        const nextPrimaryChildren = nextProps.children;\n        const primaryChildFragment = updateSuspensePrimaryChildren(\n          current,\n          workInProgress,\n          nextPrimaryChildren,\n          renderLanes,\n        );\n        workInProgress.memoizedState = null;\n        return primaryChildFragment;\n      }\n    }\n  }\n}\n\nfunction mountSuspensePrimaryChildren(\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildProps: OffscreenProps = {\n    mode: 'visible',\n    children: primaryChildren,\n  };\n  const primaryChildFragment = createFiberFromOffscreen(\n    primaryChildProps,\n    mode,\n    renderLanes,\n    null,\n  );\n  primaryChildFragment.return = workInProgress;\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackChildren(\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const progressedPrimaryFragment: Fiber | null = workInProgress.child;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  let fallbackChildFragment;\n  if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration = 0;\n      primaryChildFragment.treeBaseDuration = 0;\n    }\n\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  } else {\n    primaryChildFragment = createFiberFromOffscreen(\n      primaryChildProps,\n      mode,\n      NoLanes,\n      null,\n    );\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n  }\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n  return fallbackChildFragment;\n}\n\nfunction createWorkInProgressOffscreenFiber(\n  current: Fiber,\n  offscreenProps: OffscreenProps,\n) {\n  // The props argument to `createWorkInProgress` is `any` typed, so we use this\n  // wrapper function to constrain it.\n  return createWorkInProgress(current, offscreenProps);\n}\n\nfunction updateSuspensePrimaryChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  renderLanes,\n) {\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildFragment = createWorkInProgressOffscreenFiber(\n    currentPrimaryChildFragment,\n    {\n      mode: 'visible',\n      children: primaryChildren,\n    },\n  );\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    primaryChildFragment.lanes = renderLanes;\n  }\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = null;\n  if (currentFallbackChildFragment !== null) {\n    // Delete the fallback child fragment\n    currentFallbackChildFragment.nextEffect = null;\n    currentFallbackChildFragment.flags = Deletion;\n    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;\n  }\n\n  workInProgress.child = primaryChildFragment;\n  return primaryChildFragment;\n}\n\nfunction updateSuspenseFallbackChildren(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const currentPrimaryChildFragment: Fiber = (current.child: any);\n  const currentFallbackChildFragment: Fiber | null =\n    currentPrimaryChildFragment.sibling;\n\n  const primaryChildProps: OffscreenProps = {\n    mode: 'hidden',\n    children: primaryChildren,\n  };\n\n  let primaryChildFragment;\n  if (\n    // In legacy mode, we commit the primary tree as if it successfully\n    // completed, even though it's in an inconsistent state.\n    (mode & BlockingMode) === NoMode &&\n    // Make sure we're on the second pass, i.e. the primary child fragment was\n    // already cloned. In legacy mode, the only case where this isn't true is\n    // when DevTools forces us to display a fallback; we skip the first render\n    // pass entirely and go straight to rendering the fallback. (In Concurrent\n    // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n    // only codepath.)\n    workInProgress.child !== currentPrimaryChildFragment\n  ) {\n    const progressedPrimaryFragment: Fiber = (workInProgress.child: any);\n    primaryChildFragment = progressedPrimaryFragment;\n    primaryChildFragment.childLanes = NoLanes;\n    primaryChildFragment.pendingProps = primaryChildProps;\n\n    if (enableProfilerTimer && workInProgress.mode & ProfileMode) {\n      // Reset the durations from the first pass so they aren't included in the\n      // final amounts. This seems counterintuitive, since we're intentionally\n      // not measuring part of the render phase, but this makes it match what we\n      // do in Concurrent Mode.\n      primaryChildFragment.actualDuration = 0;\n      primaryChildFragment.actualStartTime = -1;\n      primaryChildFragment.selfBaseDuration =\n        currentPrimaryChildFragment.selfBaseDuration;\n      primaryChildFragment.treeBaseDuration =\n        currentPrimaryChildFragment.treeBaseDuration;\n    }\n\n    // The fallback fiber was added as a deletion effect during the first pass.\n    // However, since we're going to remain on the fallback, we no longer want\n    // to delete it. So we need to remove it from the list. Deletions are stored\n    // on the same list as effects. We want to keep the effects from the primary\n    // tree. So we copy the primary child fragment's effect list, which does not\n    // include the fallback deletion effect.\n    const progressedLastEffect = primaryChildFragment.lastEffect;\n    if (progressedLastEffect !== null) {\n      workInProgress.firstEffect = primaryChildFragment.firstEffect;\n      workInProgress.lastEffect = progressedLastEffect;\n      progressedLastEffect.nextEffect = null;\n    } else {\n      // TODO: Reset this somewhere else? Lol legacy mode is so weird.\n      workInProgress.firstEffect = workInProgress.lastEffect = null;\n    }\n  } else {\n    primaryChildFragment = createWorkInProgressOffscreenFiber(\n      currentPrimaryChildFragment,\n      primaryChildProps,\n    );\n  }\n  let fallbackChildFragment;\n  if (currentFallbackChildFragment !== null) {\n    fallbackChildFragment = createWorkInProgress(\n      currentFallbackChildFragment,\n      fallbackChildren,\n    );\n  } else {\n    fallbackChildFragment = createFiberFromFragment(\n      fallbackChildren,\n      mode,\n      renderLanes,\n      null,\n    );\n    // Needs a placement effect because the parent (the Suspense boundary) already\n    // mounted but this is a new fiber.\n    fallbackChildFragment.flags |= Placement;\n  }\n\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  return fallbackChildFragment;\n}\n\nfunction retrySuspenseComponentWithoutHydrating(\n  current: Fiber,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  // This will add the old fiber to the deletion list\n  reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n\n  // We're now not suspended nor dehydrated.\n  const nextProps = workInProgress.pendingProps;\n  const primaryChildren = nextProps.children;\n  const primaryChildFragment = mountSuspensePrimaryChildren(\n    workInProgress,\n    primaryChildren,\n    renderLanes,\n  );\n  // Needs a placement effect because the parent (the Suspense boundary) already\n  // mounted but this is a new fiber.\n  primaryChildFragment.flags |= Placement;\n  workInProgress.memoizedState = null;\n\n  return primaryChildFragment;\n}\n\nfunction mountSuspenseFallbackAfterRetryWithoutHydrating(\n  current,\n  workInProgress,\n  primaryChildren,\n  fallbackChildren,\n  renderLanes,\n) {\n  const mode = workInProgress.mode;\n  const primaryChildFragment = createFiberFromOffscreen(\n    primaryChildren,\n    mode,\n    NoLanes,\n    null,\n  );\n  const fallbackChildFragment = createFiberFromFragment(\n    fallbackChildren,\n    mode,\n    renderLanes,\n    null,\n  );\n  // Needs a placement effect because the parent (the Suspense\n  // boundary) already mounted but this is a new fiber.\n  fallbackChildFragment.flags |= Placement;\n\n  primaryChildFragment.return = workInProgress;\n  fallbackChildFragment.return = workInProgress;\n  primaryChildFragment.sibling = fallbackChildFragment;\n  workInProgress.child = primaryChildFragment;\n\n  if ((workInProgress.mode & BlockingMode) !== NoMode) {\n    // We will have dropped the effect list which contains the\n    // deletion. We need to reconcile to delete the current child.\n    reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n  }\n\n  return fallbackChildFragment;\n}\n\nfunction mountDehydratedSuspenseComponent(\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  renderLanes: Lanes,\n): null | Fiber {\n  // During the first pass, we'll bail out and not drill into the children.\n  // Instead, we'll leave the content in place and try to hydrate it later.\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    if (__DEV__) {\n      console.error(\n        'Cannot hydrate Suspense in legacy mode. Switch from ' +\n          'ReactDOM.hydrate(element, container) to ' +\n          'ReactDOM.createBlockingRoot(container, { hydrate: true })' +\n          '.render(element) or remove the Suspense components from ' +\n          'the server rendered components.',\n      );\n    }\n    workInProgress.lanes = laneToLanes(SyncLane);\n  } else if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This is a client-only boundary. Since we won't get any content from the server\n    // for this, we need to schedule that at a higher priority based on when it would\n    // have timed out. In theory we could render it in this pass but it would have the\n    // wrong priority associated with it and will prevent hydration of parent path.\n    // Instead, we'll leave work left on it to render it in a separate commit.\n\n    // TODO This time should be the time at which the server rendered response that is\n    // a parent to this boundary was displayed. However, since we currently don't have\n    // a protocol to transfer that time, we'll just estimate it by using the current\n    // time. This will mean that Suspense timeouts are slightly shifted to later than\n    // they should be.\n    // Schedule a normal pri update to render this content.\n    if (enableSchedulerTracing) {\n      markSpawnedWork(DefaultHydrationLane);\n    }\n    workInProgress.lanes = laneToLanes(DefaultHydrationLane);\n  } else {\n    // We'll continue hydrating the rest at offscreen priority since we'll already\n    // be showing the right content coming from the server, it is no rush.\n    workInProgress.lanes = laneToLanes(OffscreenLane);\n    if (enableSchedulerTracing) {\n      markSpawnedWork(OffscreenLane);\n    }\n  }\n  return null;\n}\n\nfunction updateDehydratedSuspenseComponent(\n  current: Fiber,\n  workInProgress: Fiber,\n  suspenseInstance: SuspenseInstance,\n  suspenseState: SuspenseState,\n  renderLanes: Lanes,\n): null | Fiber {\n  // We should never be hydrating at this point because it is the first pass,\n  // but after we've already committed once.\n  warnIfHydrating();\n\n  if ((getExecutionContext() & RetryAfterError) !== NoContext) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n\n  if (isSuspenseInstanceFallback(suspenseInstance)) {\n    // This boundary is in a permanent fallback state. In this case, we'll never\n    // get an update and we'll never be able to hydrate the final content. Let's just try the\n    // client side render instead.\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  }\n  // We use lanes to indicate that a child might depend on context, so if\n  // any context has changed, we need to treat is as if the input might have changed.\n  const hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n  if (didReceiveUpdate || hasContextChanged) {\n    // This boundary has changed since the first render. This means that we are now unable to\n    // hydrate it. We might still be able to hydrate it using a higher priority lane.\n    const root = getWorkInProgressRoot();\n    if (root !== null) {\n      const attemptHydrationAtLane = getBumpedLaneForHydration(\n        root,\n        renderLanes,\n      );\n      if (\n        attemptHydrationAtLane !== NoLane &&\n        attemptHydrationAtLane !== suspenseState.retryLane\n      ) {\n        // Intentionally mutating since this render will get interrupted. This\n        // is one of the very rare times where we mutate the current tree\n        // during the render phase.\n        suspenseState.retryLane = attemptHydrationAtLane;\n        // TODO: Ideally this would inherit the event time of the current render\n        const eventTime = NoTimestamp;\n        scheduleUpdateOnFiber(current, attemptHydrationAtLane, eventTime);\n      } else {\n        // We have already tried to ping at a higher priority than we're rendering with\n        // so if we got here, we must have failed to hydrate at those levels. We must\n        // now give up. Instead, we're going to delete the whole subtree and instead inject\n        // a new real Suspense boundary to take its place, which may render content\n        // or fallback. This might suspend for a while and if it does we might still have\n        // an opportunity to hydrate before this pass commits.\n      }\n    }\n\n    // If we have scheduled higher pri work above, this will probably just abort the render\n    // since we now have higher priority work, but in case it doesn't, we need to prepare to\n    // render something, if we time out. Even if that requires us to delete everything and\n    // skip hydration.\n    // Delay having to do this as long as the suspense timeout allows us.\n    renderDidSuspendDelayIfPossible();\n    return retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n    );\n  } else if (isSuspenseInstancePending(suspenseInstance)) {\n    // This component is still pending more data from the server, so we can't hydrate its\n    // content. We treat it as if this component suspended itself. It might seem as if\n    // we could just try to render it client-side instead. However, this will perform a\n    // lot of unnecessary work and is unlikely to complete since it often will suspend\n    // on missing data anyway. Additionally, the server might be able to render more\n    // than we can on the client yet. In that case we'd end up with more fallback states\n    // on the client than if we just leave it alone. If the server times out or errors\n    // these should update this boundary to the permanent Fallback state instead.\n    // Mark it as having captured (i.e. suspended).\n    workInProgress.flags |= DidCapture;\n    // Leave the child in place. I.e. the dehydrated fragment.\n    workInProgress.child = current.child;\n    // Register a callback to retry this boundary once the server has sent the result.\n    let retry = retryDehydratedSuspenseBoundary.bind(null, current);\n    if (enableSchedulerTracing) {\n      retry = Schedule_tracing_wrap(retry);\n    }\n    registerSuspenseInstanceRetry(suspenseInstance, retry);\n    return null;\n  } else {\n    // This is the first attempt.\n    reenterHydrationStateFromDehydratedSuspenseInstance(\n      workInProgress,\n      suspenseInstance,\n    );\n    const nextProps = workInProgress.pendingProps;\n    const primaryChildren = nextProps.children;\n    const primaryChildFragment = mountSuspensePrimaryChildren(\n      workInProgress,\n      primaryChildren,\n      renderLanes,\n    );\n    // Mark the children as hydrating. This is a fast path to know whether this\n    // tree is part of a hydrating tree. This is used to determine if a child\n    // node has fully mounted yet, and for scheduling event replaying.\n    // Conceptually this is similar to Placement in that a new subtree is\n    // inserted into the React tree here. It just happens to not need DOM\n    // mutations because it already exists.\n    primaryChildFragment.flags |= Hydrating;\n    return primaryChildFragment;\n  }\n}\n\nfunction scheduleWorkOnFiber(fiber: Fiber, renderLanes: Lanes) {\n  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n  const alternate = fiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n  }\n  scheduleWorkOnParentPath(fiber.return, renderLanes);\n}\n\nfunction propagateSuspenseContextChange(\n  workInProgress: Fiber,\n  firstChild: null | Fiber,\n  renderLanes: Lanes,\n): void {\n  // Mark any Suspense boundaries with fallbacks as having work to do.\n  // If they were previously forced into fallbacks, they may now be able\n  // to unblock.\n  let node = firstChild;\n  while (node !== null) {\n    if (node.tag === SuspenseComponent) {\n      const state: SuspenseState | null = node.memoizedState;\n      if (state !== null) {\n        scheduleWorkOnFiber(node, renderLanes);\n      }\n    } else if (node.tag === SuspenseListComponent) {\n      // If the tail is hidden there might not be an Suspense boundaries\n      // to schedule work on. In this case we have to schedule it on the\n      // list itself.\n      // We don't have to traverse to the children of the list since\n      // the list will propagate the change when it rerenders.\n      scheduleWorkOnFiber(node, renderLanes);\n    } else if (node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === workInProgress) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === workInProgress) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction findLastContentRow(firstChild: null | Fiber): null | Fiber {\n  // This is going to find the last row among these children that is already\n  // showing content on the screen, as opposed to being in fallback state or\n  // new. If a row has multiple Suspense boundaries, any of them being in the\n  // fallback state, counts as the whole row being in a fallback state.\n  // Note that the \"rows\" will be workInProgress, but any nested children\n  // will still be current since we haven't rendered them yet. The mounted\n  // order may not be the same as the new order. We use the new order.\n  let row = firstChild;\n  let lastContentRow: null | Fiber = null;\n  while (row !== null) {\n    const currentRow = row.alternate;\n    // New rows can't be content rows.\n    if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n      lastContentRow = row;\n    }\n    row = row.sibling;\n  }\n  return lastContentRow;\n}\n\ntype SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together' | void;\n\nfunction validateRevealOrder(revealOrder: SuspenseListRevealOrder) {\n  if (__DEV__) {\n    if (\n      revealOrder !== undefined &&\n      revealOrder !== 'forwards' &&\n      revealOrder !== 'backwards' &&\n      revealOrder !== 'together' &&\n      !didWarnAboutRevealOrder[revealOrder]\n    ) {\n      didWarnAboutRevealOrder[revealOrder] = true;\n      if (typeof revealOrder === 'string') {\n        switch (revealOrder.toLowerCase()) {\n          case 'together':\n          case 'forwards':\n          case 'backwards': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'Use lowercase \"%s\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          case 'forward':\n          case 'backward': {\n            console.error(\n              '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n              revealOrder,\n              revealOrder.toLowerCase(),\n            );\n            break;\n          }\n          default:\n            console.error(\n              '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder,\n            );\n            break;\n        }\n      } else {\n        console.error(\n          '%s is not a supported value for revealOrder on <SuspenseList />. ' +\n            'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n          revealOrder,\n        );\n      }\n    }\n  }\n}\n\nfunction validateTailOptions(\n  tailMode: SuspenseListTailMode,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n            'Did you mean \"collapsed\" or \"hidden\"?',\n          tailMode,\n        );\n      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {\n        didWarnAboutTailOptions[tailMode] = true;\n        console.error(\n          '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n            '\"forwards\" or \"backwards\". ' +\n            'Did you mean to specify revealOrder=\"forwards\"?',\n          tailMode,\n        );\n      }\n    }\n  }\n}\n\nfunction validateSuspenseListNestedChild(childSlot: mixed, index: number) {\n  if (__DEV__) {\n    const isArray = Array.isArray(childSlot);\n    const isIterable =\n      !isArray && typeof getIteratorFn(childSlot) === 'function';\n    if (isArray || isIterable) {\n      const type = isArray ? 'array' : 'iterable';\n      console.error(\n        'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +\n          'an additional SuspenseList to configure its revealOrder: ' +\n          '<SuspenseList revealOrder=...> ... ' +\n          '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +\n          '</SuspenseList>',\n        type,\n        index,\n        type,\n      );\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction validateSuspenseListChildren(\n  children: mixed,\n  revealOrder: SuspenseListRevealOrder,\n) {\n  if (__DEV__) {\n    if (\n      (revealOrder === 'forwards' || revealOrder === 'backwards') &&\n      children !== undefined &&\n      children !== null &&\n      children !== false\n    ) {\n      if (Array.isArray(children)) {\n        for (let i = 0; i < children.length; i++) {\n          if (!validateSuspenseListNestedChild(children[i], i)) {\n            return;\n          }\n        }\n      } else {\n        const iteratorFn = getIteratorFn(children);\n        if (typeof iteratorFn === 'function') {\n          const childrenIterator = iteratorFn.call(children);\n          if (childrenIterator) {\n            let step = childrenIterator.next();\n            let i = 0;\n            for (; !step.done; step = childrenIterator.next()) {\n              if (!validateSuspenseListNestedChild(step.value, i)) {\n                return;\n              }\n              i++;\n            }\n          }\n        } else {\n          console.error(\n            'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n              'This is not useful since it needs multiple rows. ' +\n              'Did you mean to pass multiple children or an array?',\n            revealOrder,\n          );\n        }\n      }\n    }\n  }\n}\n\nfunction initSuspenseListRenderState(\n  workInProgress: Fiber,\n  isBackwards: boolean,\n  tail: null | Fiber,\n  lastContentRow: null | Fiber,\n  tailMode: SuspenseListTailMode,\n  lastEffectBeforeRendering: null | Fiber,\n): void {\n  const renderState: null | SuspenseListRenderState =\n    workInProgress.memoizedState;\n  if (renderState === null) {\n    workInProgress.memoizedState = ({\n      isBackwards: isBackwards,\n      rendering: null,\n      renderingStartTime: 0,\n      last: lastContentRow,\n      tail: tail,\n      tailMode: tailMode,\n      lastEffect: lastEffectBeforeRendering,\n    }: SuspenseListRenderState);\n  } else {\n    // We can reuse the existing object from previous renders.\n    renderState.isBackwards = isBackwards;\n    renderState.rendering = null;\n    renderState.renderingStartTime = 0;\n    renderState.last = lastContentRow;\n    renderState.tail = tail;\n    renderState.tailMode = tailMode;\n    renderState.lastEffect = lastEffectBeforeRendering;\n  }\n}\n\n// This can end up rendering this component multiple passes.\n// The first pass splits the children fibers into two sets. A head and tail.\n// We first render the head. If anything is in fallback state, we do another\n// pass through beginWork to rerender all children (including the tail) with\n// the force suspend context. If the first render didn't have anything in\n// in fallback state. Then we render each row in the tail one-by-one.\n// That happens in the completeWork phase without going back to beginWork.\nfunction updateSuspenseListComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const nextProps = workInProgress.pendingProps;\n  const revealOrder: SuspenseListRevealOrder = nextProps.revealOrder;\n  const tailMode: SuspenseListTailMode = nextProps.tail;\n  const newChildren = nextProps.children;\n\n  validateRevealOrder(revealOrder);\n  validateTailOptions(tailMode, revealOrder);\n  validateSuspenseListChildren(newChildren, revealOrder);\n\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n\n  let suspenseContext: SuspenseContext = suspenseStackCursor.current;\n\n  const shouldForceFallback = hasSuspenseContext(\n    suspenseContext,\n    (ForceSuspenseFallback: SuspenseContext),\n  );\n  if (shouldForceFallback) {\n    suspenseContext = setShallowSuspenseContext(\n      suspenseContext,\n      ForceSuspenseFallback,\n    );\n    workInProgress.flags |= DidCapture;\n  } else {\n    const didSuspendBefore =\n      current !== null && (current.flags & DidCapture) !== NoFlags;\n    if (didSuspendBefore) {\n      // If we previously forced a fallback, we need to schedule work\n      // on any nested boundaries to let them know to try to render\n      // again. This is the same as context updating.\n      propagateSuspenseContextChange(\n        workInProgress,\n        workInProgress.child,\n        renderLanes,\n      );\n    }\n    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n  }\n  pushSuspenseContext(workInProgress, suspenseContext);\n\n  if ((workInProgress.mode & BlockingMode) === NoMode) {\n    // In legacy mode, SuspenseList doesn't work so we just\n    // use make it a noop by treating it as the default revealOrder.\n    workInProgress.memoizedState = null;\n  } else {\n    switch (revealOrder) {\n      case 'forwards': {\n        const lastContentRow = findLastContentRow(workInProgress.child);\n        let tail;\n        if (lastContentRow === null) {\n          // The whole list is part of the tail.\n          // TODO: We could fast path by just rendering the tail now.\n          tail = workInProgress.child;\n          workInProgress.child = null;\n        } else {\n          // Disconnect the tail rows after the content row.\n          // We're going to render them separately later.\n          tail = lastContentRow.sibling;\n          lastContentRow.sibling = null;\n        }\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          tail,\n          lastContentRow,\n          tailMode,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      case 'backwards': {\n        // We're going to find the first row that has existing content.\n        // At the same time we're going to reverse the list of everything\n        // we pass in the meantime. That's going to be our tail in reverse\n        // order.\n        let tail = null;\n        let row = workInProgress.child;\n        workInProgress.child = null;\n        while (row !== null) {\n          const currentRow = row.alternate;\n          // New rows can't be content rows.\n          if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n            // This is the beginning of the main content.\n            workInProgress.child = row;\n            break;\n          }\n          const nextRow = row.sibling;\n          row.sibling = tail;\n          tail = row;\n          row = nextRow;\n        }\n        // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n        initSuspenseListRenderState(\n          workInProgress,\n          true, // isBackwards\n          tail,\n          null, // last\n          tailMode,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      case 'together': {\n        initSuspenseListRenderState(\n          workInProgress,\n          false, // isBackwards\n          null, // tail\n          null, // last\n          undefined,\n          workInProgress.lastEffect,\n        );\n        break;\n      }\n      default: {\n        // The default reveal order is the same as not having\n        // a boundary.\n        workInProgress.memoizedState = null;\n      }\n    }\n  }\n  return workInProgress.child;\n}\n\nfunction updatePortalComponent(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n  const nextChildren = workInProgress.pendingProps;\n  if (current === null) {\n    // Portals are special because we don't append the children during mount\n    // but at commit. Therefore we need to track insertions which the normal\n    // flow doesn't do during mount. This doesn't happen at the root because\n    // the root always starts with a \"current\" with a null child.\n    // TODO: Consider unifying this with how the root works.\n    workInProgress.child = reconcileChildFibers(\n      workInProgress,\n      null,\n      nextChildren,\n      renderLanes,\n    );\n  } else {\n    reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  }\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\nfunction updateContextProvider(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  const providerType: ReactProviderType<any> = workInProgress.type;\n  const context: ReactContext<any> = providerType._context;\n\n  const newProps = workInProgress.pendingProps;\n  const oldProps = workInProgress.memoizedProps;\n\n  const newValue = newProps.value;\n\n  if (__DEV__) {\n    if (!('value' in newProps)) {\n      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n        hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n        console.error(\n          'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?',\n        );\n      }\n    }\n    const providerPropTypes = workInProgress.type.propTypes;\n\n    if (providerPropTypes) {\n      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');\n    }\n  }\n\n  pushProvider(workInProgress, newValue);\n\n  if (oldProps !== null) {\n    const oldValue = oldProps.value;\n    const changedBits = calculateChangedBits(context, newValue, oldValue);\n    if (changedBits === 0) {\n      // No change. Bailout early if children are the same.\n      if (\n        oldProps.children === newProps.children &&\n        !hasLegacyContextChanged()\n      ) {\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes,\n        );\n      }\n    } else {\n      // The context value changed. Search for matching consumers and schedule\n      // them to update.\n      propagateContextChange(workInProgress, context, changedBits, renderLanes);\n    }\n  }\n\n  const newChildren = newProps.children;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nlet hasWarnedAboutUsingContextAsConsumer = false;\n\nfunction updateContextConsumer(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n) {\n  let context: ReactContext<any> = workInProgress.type;\n  // The logic below for Context differs depending on PROD or DEV mode. In\n  // DEV mode, we create a separate object for Context.Consumer that acts\n  // like a proxy to Context. This proxy object adds unnecessary code in PROD\n  // so we use the old behaviour (Context.Consumer references Context) to\n  // reduce size and overhead. The separate object references context via\n  // a property called \"_context\", which also gives us the ability to check\n  // in DEV mode if this property exists or not and warn if it does not.\n  if (__DEV__) {\n    if ((context: any)._context === undefined) {\n      // This may be because it's a Context (rather than a Consumer).\n      // Or it may be because it's older React where they're the same thing.\n      // We only want to warn if we're sure it's a new React.\n      if (context !== context.Consumer) {\n        if (!hasWarnedAboutUsingContextAsConsumer) {\n          hasWarnedAboutUsingContextAsConsumer = true;\n          console.error(\n            'Rendering <Context> directly is not supported and will be removed in ' +\n              'a future major release. Did you mean to render <Context.Consumer> instead?',\n          );\n        }\n      }\n    } else {\n      context = (context: any)._context;\n    }\n  }\n  const newProps = workInProgress.pendingProps;\n  const render = newProps.children;\n\n  if (__DEV__) {\n    if (typeof render !== 'function') {\n      console.error(\n        'A context consumer was rendered with multiple children, or a child ' +\n          \"that isn't a function. A context consumer expects a single child \" +\n          'that is a function. If you did pass a function, make sure there ' +\n          'is no trailing or leading whitespace around it.',\n      );\n    }\n  }\n\n  prepareToReadContext(workInProgress, renderLanes);\n  const newValue = readContext(context, newProps.unstable_observedBits);\n  let newChildren;\n  if (__DEV__) {\n    ReactCurrentOwner.current = workInProgress;\n    setIsRendering(true);\n    newChildren = render(newValue);\n    setIsRendering(false);\n  } else {\n    newChildren = render(newValue);\n  }\n\n  // React DevTools reads this flag.\n  workInProgress.flags |= PerformedWork;\n  reconcileChildren(current, workInProgress, newChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateFundamentalComponent(current, workInProgress, renderLanes) {\n  const fundamentalImpl = workInProgress.type.impl;\n  if (fundamentalImpl.reconcileChildren === false) {\n    return null;\n  }\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nfunction updateScopeComponent(current, workInProgress, renderLanes) {\n  const nextProps = workInProgress.pendingProps;\n  const nextChildren = nextProps.children;\n\n  reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n  return workInProgress.child;\n}\n\nexport function markWorkInProgressReceivedUpdate() {\n  didReceiveUpdate = true;\n}\n\nfunction bailoutOnAlreadyFinishedWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  if (current !== null) {\n    // Reuse previous dependencies\n    workInProgress.dependencies = current.dependencies;\n  }\n\n  if (enableProfilerTimer) {\n    // Don't update \"base\" render times for bailouts.\n    stopProfilerTimerIfRunning(workInProgress);\n  }\n\n  markSkippedUpdateLanes(workInProgress.lanes);\n\n  // Check if the children have any pending work.\n  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n    // The children don't have any work either. We can skip them.\n    // TODO: Once we add back resuming, we should check if the children are\n    // a work-in-progress set. If so, we need to transfer their effects.\n    return null;\n  } else {\n    // This fiber doesn't have work, but its subtree does. Clone the child\n    // fibers and continue.\n    cloneChildFibers(current, workInProgress);\n    return workInProgress.child;\n  }\n}\n\nfunction remountFiber(\n  current: Fiber,\n  oldWorkInProgress: Fiber,\n  newWorkInProgress: Fiber,\n): Fiber | null {\n  if (__DEV__) {\n    const returnFiber = oldWorkInProgress.return;\n    if (returnFiber === null) {\n      throw new Error('Cannot swap the root fiber.');\n    }\n\n    // Disconnect from the old current.\n    // It will get deleted.\n    current.alternate = null;\n    oldWorkInProgress.alternate = null;\n\n    // Connect to the new tree.\n    newWorkInProgress.index = oldWorkInProgress.index;\n    newWorkInProgress.sibling = oldWorkInProgress.sibling;\n    newWorkInProgress.return = oldWorkInProgress.return;\n    newWorkInProgress.ref = oldWorkInProgress.ref;\n\n    // Replace the child/sibling pointers above it.\n    if (oldWorkInProgress === returnFiber.child) {\n      returnFiber.child = newWorkInProgress;\n    } else {\n      let prevSibling = returnFiber.child;\n      if (prevSibling === null) {\n        throw new Error('Expected parent to have a child.');\n      }\n      while (prevSibling.sibling !== oldWorkInProgress) {\n        prevSibling = prevSibling.sibling;\n        if (prevSibling === null) {\n          throw new Error('Expected to find the previous sibling.');\n        }\n      }\n      prevSibling.sibling = newWorkInProgress;\n    }\n\n    // Delete the old fiber and place the new one.\n    // Since the old fiber is disconnected, we have to schedule it manually.\n    const last = returnFiber.lastEffect;\n    if (last !== null) {\n      last.nextEffect = current;\n      returnFiber.lastEffect = current;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = current;\n    }\n    current.nextEffect = null;\n    current.flags = Deletion;\n\n    newWorkInProgress.flags |= Placement;\n\n    // Restart work from the new fiber.\n    return newWorkInProgress;\n  } else {\n    throw new Error(\n      'Did not expect this call in production. ' +\n        'This is a bug in React. Please file an issue.',\n    );\n  }\n}\n\nfunction beginWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const updateLanes = workInProgress.lanes;\n\n  if (__DEV__) {\n    if (workInProgress._debugNeedsRemount && current !== null) {\n      // This will restart the begin phase with a new fiber.\n      return remountFiber(\n        current,\n        workInProgress,\n        createFiberFromTypeAndProps(\n          workInProgress.type,\n          workInProgress.key,\n          workInProgress.pendingProps,\n          workInProgress._debugOwner || null,\n          workInProgress.mode,\n          workInProgress.lanes,\n        ),\n      );\n    }\n  }\n\n  if (current !== null) {\n    const oldProps = current.memoizedProps;\n    const newProps = workInProgress.pendingProps;\n\n    if (\n      oldProps !== newProps ||\n      hasLegacyContextChanged() ||\n      // Force a re-render if the implementation changed due to hot reload:\n      (__DEV__ ? workInProgress.type !== current.type : false)\n    ) {\n      // If props or context changed, mark the fiber as having performed work.\n      // This may be unset if the props are determined to be equal later (memo).\n      didReceiveUpdate = true;\n    } else if (!includesSomeLane(renderLanes, updateLanes)) {\n      didReceiveUpdate = false;\n      // This fiber does not have any pending work. Bailout without entering\n      // the begin phase. There's still some bookkeeping we that needs to be done\n      // in this optimized path, mostly pushing stuff onto the stack.\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          resetHydrationState();\n          break;\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n        case ClassComponent: {\n          const Component = workInProgress.type;\n          if (isLegacyContextProvider(Component)) {\n            pushLegacyContextProvider(workInProgress);\n          }\n          break;\n        }\n        case HostPortal:\n          pushHostContainer(\n            workInProgress,\n            workInProgress.stateNode.containerInfo,\n          );\n          break;\n        case ContextProvider: {\n          const newValue = workInProgress.memoizedProps.value;\n          pushProvider(workInProgress, newValue);\n          break;\n        }\n        case Profiler:\n          if (enableProfilerTimer) {\n            // Profiler should only call onRender when one of its descendants actually rendered.\n            const hasChildWork = includesSomeLane(\n              renderLanes,\n              workInProgress.childLanes,\n            );\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            }\n\n            // Reset effect durations for the next eventual effect phase.\n            // These are reset during render to allow the DevTools commit hook a chance to read them,\n            const stateNode = workInProgress.stateNode;\n            stateNode.effectDuration = 0;\n            stateNode.passiveEffectDuration = 0;\n          }\n          break;\n        case SuspenseComponent: {\n          const state: SuspenseState | null = workInProgress.memoizedState;\n          if (state !== null) {\n            if (enableSuspenseServerRenderer) {\n              if (state.dehydrated !== null) {\n                pushSuspenseContext(\n                  workInProgress,\n                  setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n                );\n                // We know that this component will suspend again because if it has\n                // been unsuspended it has committed as a resolved Suspense component.\n                // If it needs to be retried, it should have work scheduled on it.\n                workInProgress.flags |= DidCapture;\n                // We should never render the children of a dehydrated boundary until we\n                // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n                return null;\n              }\n            }\n\n            // If this boundary is currently timed out, we need to decide\n            // whether to retry the primary children, or to skip over it and\n            // go straight to the fallback. Check the priority of the primary\n            // child fragment.\n            const primaryChildFragment: Fiber = (workInProgress.child: any);\n            const primaryChildLanes = primaryChildFragment.childLanes;\n            if (includesSomeLane(renderLanes, primaryChildLanes)) {\n              // The primary children have pending work. Use the normal path\n              // to attempt to render the primary children again.\n              return updateSuspenseComponent(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n            } else {\n              // The primary child fragment does not have pending work marked\n              // on it\n              pushSuspenseContext(\n                workInProgress,\n                setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n              );\n              // The primary children do not have pending work with sufficient\n              // priority. Bailout.\n              const child = bailoutOnAlreadyFinishedWork(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n              if (child !== null) {\n                // The fallback children have pending work. Skip over the\n                // primary children and work on the fallback.\n                return child.sibling;\n              } else {\n                return null;\n              }\n            }\n          } else {\n            pushSuspenseContext(\n              workInProgress,\n              setDefaultShallowSuspenseContext(suspenseStackCursor.current),\n            );\n          }\n          break;\n        }\n        case SuspenseListComponent: {\n          const didSuspendBefore = (current.flags & DidCapture) !== NoFlags;\n\n          const hasChildWork = includesSomeLane(\n            renderLanes,\n            workInProgress.childLanes,\n          );\n\n          if (didSuspendBefore) {\n            if (hasChildWork) {\n              // If something was in fallback state last time, and we have all the\n              // same children then we're still in progressive loading state.\n              // Something might get unblocked by state updates or retries in the\n              // tree which will affect the tail. So we need to use the normal\n              // path to compute the correct tail.\n              return updateSuspenseListComponent(\n                current,\n                workInProgress,\n                renderLanes,\n              );\n            }\n            // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n            workInProgress.flags |= DidCapture;\n          }\n\n          // If nothing suspended before and we're rendering the same children,\n          // then the tail doesn't matter. Anything new that suspends will work\n          // in the \"together\" mode, so we can continue from the state we had.\n          const renderState = workInProgress.memoizedState;\n          if (renderState !== null) {\n            // Reset to the \"together\" mode in case we've started a different\n            // update in the past but didn't complete it.\n            renderState.rendering = null;\n            renderState.tail = null;\n            renderState.lastEffect = null;\n          }\n          pushSuspenseContext(workInProgress, suspenseStackCursor.current);\n\n          if (hasChildWork) {\n            break;\n          } else {\n            // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n            return null;\n          }\n        }\n        case OffscreenComponent:\n        case LegacyHiddenComponent: {\n          // Need to check if the tree still needs to be deferred. This is\n          // almost identical to the logic used in the normal update path,\n          // so we'll just enter that. The only difference is we'll bail out\n          // at the next level instead of this one, because the child props\n          // have not changed. Which is fine.\n          // TODO: Probably should refactor `beginWork` to split the bailout\n          // path from the normal path. I'm tempted to do a labeled break here\n          // but I won't :)\n          workInProgress.lanes = NoLanes;\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\n        }\n      }\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    } else {\n      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {\n        // This is a special case that only exists for legacy mode.\n        // See https://github.com/facebook/react/pull/19216.\n        didReceiveUpdate = true;\n      } else {\n        // An update was scheduled on this fiber, but there are no new props\n        // nor legacy context. Set this to false. If an update queue or context\n        // consumer produces a changed value, it will set this to true. Otherwise,\n        // the component will assume the children have not changed and bail out.\n        didReceiveUpdate = false;\n      }\n    }\n  } else {\n    didReceiveUpdate = false;\n  }\n\n  // Before entering the begin phase, clear pending update priority.\n  // TODO: This assumes that we're about to evaluate the component and process\n  // the update queue. However, there's an exception: SimpleMemoComponent\n  // sometimes bails out later in the begin phase. This indicates that we should\n  // move this assignment out of the common path and into each branch.\n  workInProgress.lanes = NoLanes;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent: {\n      return mountIndeterminateComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        renderLanes,\n      );\n    }\n    case LazyComponent: {\n      const elementType = workInProgress.elementType;\n      return mountLazyComponent(\n        current,\n        workInProgress,\n        elementType,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case FunctionComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return updateClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case HostRoot:\n      return updateHostRoot(current, workInProgress, renderLanes);\n    case HostComponent:\n      return updateHostComponent(current, workInProgress, renderLanes);\n    case HostText:\n      return updateHostText(current, workInProgress);\n    case SuspenseComponent:\n      return updateSuspenseComponent(current, workInProgress, renderLanes);\n    case HostPortal:\n      return updatePortalComponent(current, workInProgress, renderLanes);\n    case ForwardRef: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === type\n          ? unresolvedProps\n          : resolveDefaultProps(type, unresolvedProps);\n      return updateForwardRef(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case Fragment:\n      return updateFragment(current, workInProgress, renderLanes);\n    case Mode:\n      return updateMode(current, workInProgress, renderLanes);\n    case Profiler:\n      return updateProfiler(current, workInProgress, renderLanes);\n    case ContextProvider:\n      return updateContextProvider(current, workInProgress, renderLanes);\n    case ContextConsumer:\n      return updateContextConsumer(current, workInProgress, renderLanes);\n    case MemoComponent: {\n      const type = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      // Resolve outer props first, then resolve inner props.\n      let resolvedProps = resolveDefaultProps(type, unresolvedProps);\n      if (__DEV__) {\n        if (workInProgress.type !== workInProgress.elementType) {\n          const outerPropTypes = type.propTypes;\n          if (outerPropTypes) {\n            checkPropTypes(\n              outerPropTypes,\n              resolvedProps, // Resolved for outer only\n              'prop',\n              getComponentName(type),\n            );\n          }\n        }\n      }\n      resolvedProps = resolveDefaultProps(type.type, resolvedProps);\n      return updateMemoComponent(\n        current,\n        workInProgress,\n        type,\n        resolvedProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case SimpleMemoComponent: {\n      return updateSimpleMemoComponent(\n        current,\n        workInProgress,\n        workInProgress.type,\n        workInProgress.pendingProps,\n        updateLanes,\n        renderLanes,\n      );\n    }\n    case IncompleteClassComponent: {\n      const Component = workInProgress.type;\n      const unresolvedProps = workInProgress.pendingProps;\n      const resolvedProps =\n        workInProgress.elementType === Component\n          ? unresolvedProps\n          : resolveDefaultProps(Component, unresolvedProps);\n      return mountIncompleteClassComponent(\n        current,\n        workInProgress,\n        Component,\n        resolvedProps,\n        renderLanes,\n      );\n    }\n    case SuspenseListComponent: {\n      return updateSuspenseListComponent(current, workInProgress, renderLanes);\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        return updateFundamentalComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        return updateScopeComponent(current, workInProgress, renderLanes);\n      }\n      break;\n    }\n    case Block: {\n      if (enableBlocksAPI) {\n        const block = workInProgress.type;\n        const props = workInProgress.pendingProps;\n        return updateBlock(current, workInProgress, block, props, renderLanes);\n      }\n      break;\n    }\n    case OffscreenComponent: {\n      return updateOffscreenComponent(current, workInProgress, renderLanes);\n    }\n    case LegacyHiddenComponent: {\n      return updateLegacyHiddenComponent(current, workInProgress, renderLanes);\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {beginWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {\n  ReactFundamentalComponentInstance,\n  ReactScopeInstance,\n} from 'shared/ReactTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {\n  Instance,\n  Type,\n  Props,\n  Container,\n  ChildSet,\n} from './ReactFiberHostConfig';\nimport type {\n  SuspenseState,\n  SuspenseListRenderState,\n} from './ReactFiberSuspenseComponent.old';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\n\nimport {now} from './SchedulerWithReactIntegration.old';\n\nimport {\n  IndeterminateComponent,\n  FunctionComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ContextProvider,\n  ContextConsumer,\n  ForwardRef,\n  Fragment,\n  Mode,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  IncompleteClassComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {NoMode, BlockingMode, ProfileMode} from './ReactTypeOfMode';\nimport {Ref, Update, NoFlags, DidCapture, Snapshot} from './ReactFiberFlags';\nimport invariant from 'shared/invariant';\n\nimport {\n  createInstance,\n  createTextInstance,\n  appendInitialChild,\n  finalizeInitialChildren,\n  prepareUpdate,\n  supportsMutation,\n  supportsPersistence,\n  cloneInstance,\n  cloneHiddenInstance,\n  cloneHiddenTextInstance,\n  createContainerChildSet,\n  appendChildToContainerChildSet,\n  finalizeContainerChildren,\n  getFundamentalComponentInstance,\n  mountFundamentalComponent,\n  cloneFundamentalInstance,\n  shouldUpdateFundamentalComponent,\n  preparePortalMount,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  getRootHostContainer,\n  popHostContext,\n  getHostContext,\n  popHostContainer,\n} from './ReactFiberHostContext.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n  popSuspenseContext,\n  pushSuspenseContext,\n  setShallowSuspenseContext,\n  ForceSuspenseFallback,\n  setDefaultShallowSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {findFirstSuspended} from './ReactFiberSuspenseComponent.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {\n  prepareToHydrateHostInstance,\n  prepareToHydrateHostTextInstance,\n  prepareToHydrateHostSuspenseInstance,\n  popHydrationState,\n  resetHydrationState,\n  getIsHydrating,\n} from './ReactFiberHydrationContext.old';\nimport {\n  enableSchedulerTracing,\n  enableSuspenseCallback,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  enableScopeAPI,\n  enableBlocksAPI,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\nimport {\n  markSpawnedWork,\n  renderDidSuspend,\n  renderDidSuspendDelayIfPossible,\n  renderHasNotSuspendedYet,\n  popRenderLanes,\n  getRenderTargetTime,\n} from './ReactFiberWorkLoop.old';\nimport {createFundamentalStateInstance} from './ReactFiberFundamental.old';\nimport {OffscreenLane, SomeRetryLane} from './ReactFiberLane';\nimport {resetChildFibers} from './ReactChildFiber.old';\nimport {createScopeInstance} from './ReactFiberScope.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\n\nfunction markUpdate(workInProgress: Fiber) {\n  // Tag the fiber with an update effect. This turns a Placement into\n  // a PlacementAndUpdate.\n  workInProgress.flags |= Update;\n}\n\nfunction markRef(workInProgress: Fiber) {\n  workInProgress.flags |= Ref;\n}\n\nlet appendAllChildren;\nlet updateHostContainer;\nlet updateHostComponent;\nlet updateHostText;\nif (supportsMutation) {\n  // Mutation mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === HostComponent || node.tag === HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        appendInitialChild(parent, node.stateNode.instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  updateHostContainer = function(workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // If we have an alternate, that means this is an update and we need to\n    // schedule a side-effect to do the updates.\n    const oldProps = current.memoizedProps;\n    if (oldProps === newProps) {\n      // In mutation mode, this is sufficient for a bailout because\n      // we won't touch this node even if children changed.\n      return;\n    }\n\n    // If we get updated because one of our children updated, we don't\n    // have newProps so we'll have to reuse them.\n    // TODO: Split the update API as separate for the props vs. children.\n    // Even better would be if children weren't special cased at all tho.\n    const instance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    // TODO: Experiencing an error where oldProps is null. Suggests a host\n    // component is hitting the resume path. Figure out why. Possibly\n    // related to `hidden`.\n    const updatePayload = prepareUpdate(\n      instance,\n      type,\n      oldProps,\n      newProps,\n      rootContainerInstance,\n      currentHostContext,\n    );\n    // TODO: Type this specific to this type of component.\n    workInProgress.updateQueue = (updatePayload: any);\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update. All the work is done in commitWork.\n    if (updatePayload) {\n      markUpdate(workInProgress);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // If the text differs, mark it as an update. All the work in done in commitWork.\n    if (oldText !== newText) {\n      markUpdate(workInProgress);\n    }\n  };\n} else if (supportsPersistence) {\n  // Persistent host tree mode\n\n  appendAllChildren = function(\n    parent: Instance,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        let instance = node.stateNode.instance;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendInitialChild(parent, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.tag === SuspenseComponent) {\n        if ((node.flags & Update) !== NoFlags) {\n          // Need to toggle the visibility of the primary children.\n          const newIsHidden = node.memoizedState !== null;\n          if (newIsHidden) {\n            const primaryChildParent = node.child;\n            if (primaryChildParent !== null) {\n              if (primaryChildParent.child !== null) {\n                primaryChildParent.child.return = primaryChildParent;\n                appendAllChildren(\n                  parent,\n                  primaryChildParent,\n                  true,\n                  newIsHidden,\n                );\n              }\n              const fallbackChildParent = primaryChildParent.sibling;\n              if (fallbackChildParent !== null) {\n                fallbackChildParent.return = node;\n                node = fallbackChildParent;\n                continue;\n              }\n            }\n          }\n        }\n        if (node.child !== null) {\n          // Continue traversing like normal\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n\n  // An unfortunate fork of appendAllChildren because we have two different parent types.\n  const appendAllChildrenToContainer = function(\n    containerChildSet: ChildSet,\n    workInProgress: Fiber,\n    needsVisibilityToggle: boolean,\n    isHidden: boolean,\n  ) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    let node = workInProgress.child;\n    while (node !== null) {\n      // eslint-disable-next-line no-labels\n      branches: if (node.tag === HostComponent) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostText) {\n        let instance = node.stateNode;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const text = node.memoizedProps;\n          instance = cloneHiddenTextInstance(instance, text, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n        let instance = node.stateNode.instance;\n        if (needsVisibilityToggle && isHidden) {\n          // This child is inside a timed out tree. Hide it.\n          const props = node.memoizedProps;\n          const type = node.type;\n          instance = cloneHiddenInstance(instance, type, props, node);\n        }\n        appendChildToContainerChildSet(containerChildSet, instance);\n      } else if (node.tag === HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.tag === SuspenseComponent) {\n        if ((node.flags & Update) !== NoFlags) {\n          // Need to toggle the visibility of the primary children.\n          const newIsHidden = node.memoizedState !== null;\n          if (newIsHidden) {\n            const primaryChildParent = node.child;\n            if (primaryChildParent !== null) {\n              if (primaryChildParent.child !== null) {\n                primaryChildParent.child.return = primaryChildParent;\n                appendAllChildrenToContainer(\n                  containerChildSet,\n                  primaryChildParent,\n                  true,\n                  newIsHidden,\n                );\n              }\n              const fallbackChildParent = primaryChildParent.sibling;\n              if (fallbackChildParent !== null) {\n                fallbackChildParent.return = node;\n                node = fallbackChildParent;\n                continue;\n              }\n            }\n          }\n        }\n        if (node.child !== null) {\n          // Continue traversing like normal\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      // $FlowFixMe This is correct but Flow is confused by the labeled break.\n      node = (node: Fiber);\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  };\n  updateHostContainer = function(workInProgress: Fiber) {\n    const portalOrRoot: {\n      containerInfo: Container,\n      pendingChildren: ChildSet,\n      ...\n    } = workInProgress.stateNode;\n    const childrenUnchanged = workInProgress.firstEffect === null;\n    if (childrenUnchanged) {\n      // No changes, just reuse the existing instance.\n    } else {\n      const container = portalOrRoot.containerInfo;\n      const newChildSet = createContainerChildSet(container);\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);\n      portalOrRoot.pendingChildren = newChildSet;\n      // Schedule an update on the container to swap out the container.\n      markUpdate(workInProgress);\n      finalizeContainerChildren(container, newChildSet);\n    }\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    const currentInstance = current.stateNode;\n    const oldProps = current.memoizedProps;\n    // If there are no effects associated with this node, then none of our children had any updates.\n    // This guarantees that we can reuse all of them.\n    const childrenUnchanged = workInProgress.firstEffect === null;\n    if (childrenUnchanged && oldProps === newProps) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const recyclableInstance: Instance = workInProgress.stateNode;\n    const currentHostContext = getHostContext();\n    let updatePayload = null;\n    if (oldProps !== newProps) {\n      updatePayload = prepareUpdate(\n        recyclableInstance,\n        type,\n        oldProps,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      );\n    }\n    if (childrenUnchanged && updatePayload === null) {\n      // No changes, just reuse the existing instance.\n      // Note that this might release a previous clone.\n      workInProgress.stateNode = currentInstance;\n      return;\n    }\n    const newInstance = cloneInstance(\n      currentInstance,\n      updatePayload,\n      type,\n      oldProps,\n      newProps,\n      workInProgress,\n      childrenUnchanged,\n      recyclableInstance,\n    );\n    if (\n      finalizeInitialChildren(\n        newInstance,\n        type,\n        newProps,\n        rootContainerInstance,\n        currentHostContext,\n      )\n    ) {\n      markUpdate(workInProgress);\n    }\n    workInProgress.stateNode = newInstance;\n    if (childrenUnchanged) {\n      // If there are no other effects in this tree, we need to flag this node as having one.\n      // Even though we're not going to use it for anything.\n      // Otherwise parents won't know that there are new children to propagate upwards.\n      markUpdate(workInProgress);\n    } else {\n      // If children might have changed, we have to add them all to the set.\n      appendAllChildren(newInstance, workInProgress, false, false);\n    }\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    if (oldText !== newText) {\n      // If the text content differs, we'll create a new text instance for it.\n      const rootContainerInstance = getRootHostContainer();\n      const currentHostContext = getHostContext();\n      workInProgress.stateNode = createTextInstance(\n        newText,\n        rootContainerInstance,\n        currentHostContext,\n        workInProgress,\n      );\n      // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n      // This lets the parents know that at least one of their children has changed.\n      markUpdate(workInProgress);\n    } else {\n      workInProgress.stateNode = current.stateNode;\n    }\n  };\n} else {\n  // No host operations\n  updateHostContainer = function(workInProgress: Fiber) {\n    // Noop\n  };\n  updateHostComponent = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    type: Type,\n    newProps: Props,\n    rootContainerInstance: Container,\n  ) {\n    // Noop\n  };\n  updateHostText = function(\n    current: Fiber,\n    workInProgress: Fiber,\n    oldText: string,\n    newText: string,\n  ) {\n    // Noop\n  };\n}\n\nfunction cutOffTailIfNeeded(\n  renderState: SuspenseListRenderState,\n  hasRenderedATailFallback: boolean,\n) {\n  if (getIsHydrating()) {\n    // If we're hydrating, we should consume as many items as we can\n    // so we don't leave any behind.\n    return;\n  }\n  switch (renderState.tailMode) {\n    case 'hidden': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        renderState.tail = null;\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n    case 'collapsed': {\n      // Any insertions at the end of the tail list after this point\n      // should be invisible. If there are already mounted boundaries\n      // anything before them are not considered for collapsing.\n      // Therefore we need to go through the whole tail to find if\n      // there are any.\n      let tailNode = renderState.tail;\n      let lastTailNode = null;\n      while (tailNode !== null) {\n        if (tailNode.alternate !== null) {\n          lastTailNode = tailNode;\n        }\n        tailNode = tailNode.sibling;\n      }\n      // Next we're simply going to delete all insertions after the\n      // last rendered item.\n      if (lastTailNode === null) {\n        // All remaining items in the tail are insertions.\n        if (!hasRenderedATailFallback && renderState.tail !== null) {\n          // We suspended during the head. We want to show at least one\n          // row at the tail. So we'll keep on and cut off the rest.\n          renderState.tail.sibling = null;\n        } else {\n          renderState.tail = null;\n        }\n      } else {\n        // Detach the insertion after the last node that was already\n        // inserted.\n        lastTailNode.sibling = null;\n      }\n      break;\n    }\n  }\n}\n\nfunction completeWork(\n  current: Fiber | null,\n  workInProgress: Fiber,\n  renderLanes: Lanes,\n): Fiber | null {\n  const newProps = workInProgress.pendingProps;\n\n  switch (workInProgress.tag) {\n    case IndeterminateComponent:\n    case LazyComponent:\n    case SimpleMemoComponent:\n    case FunctionComponent:\n    case ForwardRef:\n    case Fragment:\n    case Mode:\n    case Profiler:\n    case ContextConsumer:\n    case MemoComponent:\n      return null;\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      return null;\n    }\n    case HostRoot: {\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const fiberRoot = (workInProgress.stateNode: FiberRoot);\n      if (fiberRoot.pendingContext) {\n        fiberRoot.context = fiberRoot.pendingContext;\n        fiberRoot.pendingContext = null;\n      }\n      if (current === null || current.child === null) {\n        // If we hydrated, pop so that we can delete any remaining children\n        // that weren't hydrated.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // If we hydrated, then we'll need to schedule an update for\n          // the commit side-effects on the root.\n          markUpdate(workInProgress);\n        } else if (!fiberRoot.hydrate) {\n          // Schedule an effect to clear this container at the start of the next commit.\n          // This handles the case of React rendering into a container with previous children.\n          // It's also safe to do for updates too, because current.child would only be null\n          // if the previous render was null (so the the container would already be empty).\n          workInProgress.flags |= Snapshot;\n        }\n      }\n      updateHostContainer(workInProgress);\n      return null;\n    }\n    case HostComponent: {\n      popHostContext(workInProgress);\n      const rootContainerInstance = getRootHostContainer();\n      const type = workInProgress.type;\n      if (current !== null && workInProgress.stateNode != null) {\n        updateHostComponent(\n          current,\n          workInProgress,\n          type,\n          newProps,\n          rootContainerInstance,\n        );\n\n        if (current.ref !== workInProgress.ref) {\n          markRef(workInProgress);\n        }\n      } else {\n        if (!newProps) {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n          return null;\n        }\n\n        const currentHostContext = getHostContext();\n        // TODO: Move createInstance to beginWork and keep it on a context\n        // \"stack\" as the parent. Then append children as we go in beginWork\n        // or completeWork depending on whether we want to add them top->down or\n        // bottom->up. Top->down is faster in IE11.\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          // TODO: Move this and createInstance step into the beginPhase\n          // to consolidate.\n          if (\n            prepareToHydrateHostInstance(\n              workInProgress,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            // If changes to the hydrated node need to be applied at the\n            // commit-phase we mark this as such.\n            markUpdate(workInProgress);\n          }\n        } else {\n          const instance = createInstance(\n            type,\n            newProps,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n\n          appendAllChildren(instance, workInProgress, false, false);\n\n          workInProgress.stateNode = instance;\n\n          // Certain renderers require commit-time effects for initial mount.\n          // (eg DOM renderer supports auto-focus for certain elements).\n          // Make sure such renderers get scheduled for later work.\n          if (\n            finalizeInitialChildren(\n              instance,\n              type,\n              newProps,\n              rootContainerInstance,\n              currentHostContext,\n            )\n          ) {\n            markUpdate(workInProgress);\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          // If there is a ref on a host node we need to schedule a callback\n          markRef(workInProgress);\n        }\n      }\n      return null;\n    }\n    case HostText: {\n      const newText = newProps;\n      if (current && workInProgress.stateNode != null) {\n        const oldText = current.memoizedProps;\n        // If we have an alternate, that means this is an update and we need\n        // to schedule a side-effect to do the updates.\n        updateHostText(current, workInProgress, oldText, newText);\n      } else {\n        if (typeof newText !== 'string') {\n          invariant(\n            workInProgress.stateNode !== null,\n            'We must have new props for new mounts. This error is likely ' +\n              'caused by a bug in React. Please file an issue.',\n          );\n          // This can happen when we abort work.\n        }\n        const rootContainerInstance = getRootHostContainer();\n        const currentHostContext = getHostContext();\n        const wasHydrated = popHydrationState(workInProgress);\n        if (wasHydrated) {\n          if (prepareToHydrateHostTextInstance(workInProgress)) {\n            markUpdate(workInProgress);\n          }\n        } else {\n          workInProgress.stateNode = createTextInstance(\n            newText,\n            rootContainerInstance,\n            currentHostContext,\n            workInProgress,\n          );\n        }\n      }\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      const nextState: null | SuspenseState = workInProgress.memoizedState;\n\n      if (enableSuspenseServerRenderer) {\n        if (nextState !== null && nextState.dehydrated !== null) {\n          if (current === null) {\n            const wasHydrated = popHydrationState(workInProgress);\n            invariant(\n              wasHydrated,\n              'A dehydrated suspense component was completed without a hydrated node. ' +\n                'This is probably a bug in React.',\n            );\n            prepareToHydrateHostSuspenseInstance(workInProgress);\n            if (enableSchedulerTracing) {\n              markSpawnedWork(OffscreenLane);\n            }\n            return null;\n          } else {\n            // We should never have been in a hydration state if we didn't have a current.\n            // However, in some of those paths, we might have reentered a hydration state\n            // and then we might be inside a hydration state. In that case, we'll need to exit out of it.\n            resetHydrationState();\n            if ((workInProgress.flags & DidCapture) === NoFlags) {\n              // This boundary did not suspend so it's now hydrated and unsuspended.\n              workInProgress.memoizedState = null;\n            }\n            // If nothing suspended, we need to schedule an effect to mark this boundary\n            // as having hydrated so events know that they're free to be invoked.\n            // It's also a signal to replay events and the suspense callback.\n            // If something suspended, schedule an effect to attach retry listeners.\n            // So we might as well always mark this.\n            workInProgress.flags |= Update;\n            return null;\n          }\n        }\n      }\n\n      if ((workInProgress.flags & DidCapture) !== NoFlags) {\n        // Something suspended. Re-render with the fallback children.\n        workInProgress.lanes = renderLanes;\n        // Do not reset the effect list.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n\n      const nextDidTimeout = nextState !== null;\n      let prevDidTimeout = false;\n      if (current === null) {\n        if (workInProgress.memoizedProps.fallback !== undefined) {\n          popHydrationState(workInProgress);\n        }\n      } else {\n        const prevState: null | SuspenseState = current.memoizedState;\n        prevDidTimeout = prevState !== null;\n      }\n\n      if (nextDidTimeout && !prevDidTimeout) {\n        // If this subtreee is running in blocking mode we can suspend,\n        // otherwise we won't suspend.\n        // TODO: This will still suspend a synchronous tree if anything\n        // in the concurrent tree already suspended during this render.\n        // This is a known bug.\n        if ((workInProgress.mode & BlockingMode) !== NoMode) {\n          // TODO: Move this back to throwException because this is too late\n          // if this is a large tree which is common for initial loads. We\n          // don't know if we should restart a render or not until we get\n          // this marker, and this is too late.\n          // If this render already had a ping or lower pri updates,\n          // and this is the first time we know we're going to suspend we\n          // should be able to immediately restart from within throwException.\n          const hasInvisibleChildContext =\n            current === null &&\n            workInProgress.memoizedProps.unstable_avoidThisFallback !== true;\n          if (\n            hasInvisibleChildContext ||\n            hasSuspenseContext(\n              suspenseStackCursor.current,\n              (InvisibleParentSuspenseContext: SuspenseContext),\n            )\n          ) {\n            // If this was in an invisible tree or a new render, then showing\n            // this boundary is ok.\n            renderDidSuspend();\n          } else {\n            // Otherwise, we're going to have to hide content so we should\n            // suspend for longer if possible.\n            renderDidSuspendDelayIfPossible();\n          }\n        }\n      }\n\n      if (supportsPersistence) {\n        // TODO: Only schedule updates if not prevDidTimeout.\n        if (nextDidTimeout) {\n          // If this boundary just timed out, schedule an effect to attach a\n          // retry listener to the promise. This flag is also used to hide the\n          // primary children.\n          workInProgress.flags |= Update;\n        }\n      }\n      if (supportsMutation) {\n        // TODO: Only schedule updates if these values are non equal, i.e. it changed.\n        if (nextDidTimeout || prevDidTimeout) {\n          // If this boundary just timed out, schedule an effect to attach a\n          // retry listener to the promise. This flag is also used to hide the\n          // primary children. In mutation mode, we also need the flag to\n          // *unhide* children that were previously hidden, so check if this\n          // is currently timed out, too.\n          workInProgress.flags |= Update;\n        }\n      }\n      if (\n        enableSuspenseCallback &&\n        workInProgress.updateQueue !== null &&\n        workInProgress.memoizedProps.suspenseCallback != null\n      ) {\n        // Always notify the callback\n        workInProgress.flags |= Update;\n      }\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      updateHostContainer(workInProgress);\n      if (current === null) {\n        preparePortalMount(workInProgress.stateNode.containerInfo);\n      }\n      return null;\n    case ContextProvider:\n      // Pop provider fiber\n      popProvider(workInProgress);\n      return null;\n    case IncompleteClassComponent: {\n      // Same as class component case. I put it down here so that the tags are\n      // sequential to ensure this switch is compiled to a jump table.\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n\n      const renderState: null | SuspenseListRenderState =\n        workInProgress.memoizedState;\n\n      if (renderState === null) {\n        // We're running in the default, \"independent\" mode.\n        // We don't do anything in this mode.\n        return null;\n      }\n\n      let didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;\n\n      const renderedTail = renderState.rendering;\n      if (renderedTail === null) {\n        // We just rendered the head.\n        if (!didSuspendAlready) {\n          // This is the first pass. We need to figure out if anything is still\n          // suspended in the rendered set.\n\n          // If new content unsuspended, but there's still some content that\n          // didn't. Then we need to do a second pass that forces everything\n          // to keep showing their fallbacks.\n\n          // We might be suspended if something in this render pass suspended, or\n          // something in the previous committed pass suspended. Otherwise,\n          // there's no chance so we can skip the expensive call to\n          // findFirstSuspended.\n          const cannotBeSuspended =\n            renderHasNotSuspendedYet() &&\n            (current === null || (current.flags & DidCapture) === NoFlags);\n          if (!cannotBeSuspended) {\n            let row = workInProgress.child;\n            while (row !== null) {\n              const suspended = findFirstSuspended(row);\n              if (suspended !== null) {\n                didSuspendAlready = true;\n                workInProgress.flags |= DidCapture;\n                cutOffTailIfNeeded(renderState, false);\n\n                // If this is a newly suspended tree, it might not get committed as\n                // part of the second pass. In that case nothing will subscribe to\n                // its thennables. Instead, we'll transfer its thennables to the\n                // SuspenseList so that it can retry if they resolve.\n                // There might be multiple of these in the list but since we're\n                // going to wait for all of them anyway, it doesn't really matter\n                // which ones gets to ping. In theory we could get clever and keep\n                // track of how many dependencies remain but it gets tricky because\n                // in the meantime, we can add/remove/change items and dependencies.\n                // We might bail out of the loop before finding any but that\n                // doesn't matter since that means that the other boundaries that\n                // we did find already has their listeners attached.\n                const newThennables = suspended.updateQueue;\n                if (newThennables !== null) {\n                  workInProgress.updateQueue = newThennables;\n                  workInProgress.flags |= Update;\n                }\n\n                // Rerender the whole list, but this time, we'll force fallbacks\n                // to stay in place.\n                // Reset the effect list before doing the second pass since that's now invalid.\n                if (renderState.lastEffect === null) {\n                  workInProgress.firstEffect = null;\n                }\n                workInProgress.lastEffect = renderState.lastEffect;\n                // Reset the child fibers to their original state.\n                resetChildFibers(workInProgress, renderLanes);\n\n                // Set up the Suspense Context to force suspense and immediately\n                // rerender the children.\n                pushSuspenseContext(\n                  workInProgress,\n                  setShallowSuspenseContext(\n                    suspenseStackCursor.current,\n                    ForceSuspenseFallback,\n                  ),\n                );\n                return workInProgress.child;\n              }\n              row = row.sibling;\n            }\n          }\n\n          if (renderState.tail !== null && now() > getRenderTargetTime()) {\n            // We have already passed our CPU deadline but we still have rows\n            // left in the tail. We'll just give up further attempts to render\n            // the main content and only render fallbacks.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n            if (enableSchedulerTracing) {\n              markSpawnedWork(SomeRetryLane);\n            }\n          }\n        } else {\n          cutOffTailIfNeeded(renderState, false);\n        }\n        // Next we're going to render the tail.\n      } else {\n        // Append the rendered row to the child list.\n        if (!didSuspendAlready) {\n          const suspended = findFirstSuspended(renderedTail);\n          if (suspended !== null) {\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            // Ensure we transfer the update queue to the parent so that it doesn't\n            // get lost if this row ends up dropped during a second pass.\n            const newThennables = suspended.updateQueue;\n            if (newThennables !== null) {\n              workInProgress.updateQueue = newThennables;\n              workInProgress.flags |= Update;\n            }\n\n            cutOffTailIfNeeded(renderState, true);\n            // This might have been modified.\n            if (\n              renderState.tail === null &&\n              renderState.tailMode === 'hidden' &&\n              !renderedTail.alternate &&\n              !getIsHydrating() // We don't cut it if we're hydrating.\n            ) {\n              // We need to delete the row we just rendered.\n              // Reset the effect list to what it was before we rendered this\n              // child. The nested children have already appended themselves.\n              const lastEffect = (workInProgress.lastEffect =\n                renderState.lastEffect);\n              // Remove any effects that were appended after this point.\n              if (lastEffect !== null) {\n                lastEffect.nextEffect = null;\n              }\n              // We're done.\n              return null;\n            }\n          } else if (\n            // The time it took to render last row is greater than the remaining\n            // time we have to render. So rendering one more row would likely\n            // exceed it.\n            now() * 2 - renderState.renderingStartTime >\n              getRenderTargetTime() &&\n            renderLanes !== OffscreenLane\n          ) {\n            // We have now passed our CPU deadline and we'll just give up further\n            // attempts to render the main content and only render fallbacks.\n            // The assumption is that this is usually faster.\n            workInProgress.flags |= DidCapture;\n            didSuspendAlready = true;\n\n            cutOffTailIfNeeded(renderState, false);\n\n            // Since nothing actually suspended, there will nothing to ping this\n            // to get it started back up to attempt the next item. While in terms\n            // of priority this work has the same priority as this current render,\n            // it's not part of the same transition once the transition has\n            // committed. If it's sync, we still want to yield so that it can be\n            // painted. Conceptually, this is really the same as pinging.\n            // We can use any RetryLane even if it's the one currently rendering\n            // since we're leaving it behind on this node.\n            workInProgress.lanes = SomeRetryLane;\n            if (enableSchedulerTracing) {\n              markSpawnedWork(SomeRetryLane);\n            }\n          }\n        }\n        if (renderState.isBackwards) {\n          // The effect list of the backwards tail will have been added\n          // to the end. This breaks the guarantee that life-cycles fire in\n          // sibling order but that isn't a strong guarantee promised by React.\n          // Especially since these might also just pop in during future commits.\n          // Append to the beginning of the list.\n          renderedTail.sibling = workInProgress.child;\n          workInProgress.child = renderedTail;\n        } else {\n          const previousSibling = renderState.last;\n          if (previousSibling !== null) {\n            previousSibling.sibling = renderedTail;\n          } else {\n            workInProgress.child = renderedTail;\n          }\n          renderState.last = renderedTail;\n        }\n      }\n\n      if (renderState.tail !== null) {\n        // We still have tail rows to render.\n        // Pop a row.\n        const next = renderState.tail;\n        renderState.rendering = next;\n        renderState.tail = next.sibling;\n        renderState.lastEffect = workInProgress.lastEffect;\n        renderState.renderingStartTime = now();\n        next.sibling = null;\n\n        // Restore the context.\n        // TODO: We can probably just avoid popping it instead and only\n        // setting it the first time we go from not suspended to suspended.\n        let suspenseContext = suspenseStackCursor.current;\n        if (didSuspendAlready) {\n          suspenseContext = setShallowSuspenseContext(\n            suspenseContext,\n            ForceSuspenseFallback,\n          );\n        } else {\n          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);\n        }\n        pushSuspenseContext(workInProgress, suspenseContext);\n        // Do a pass over the next row.\n        return next;\n      }\n      return null;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalImpl = workInProgress.type.impl;\n        let fundamentalInstance: ReactFundamentalComponentInstance<\n          any,\n          any,\n        > | null = workInProgress.stateNode;\n\n        if (fundamentalInstance === null) {\n          const getInitialState = fundamentalImpl.getInitialState;\n          let fundamentalState;\n          if (getInitialState !== undefined) {\n            fundamentalState = getInitialState(newProps);\n          }\n          fundamentalInstance = workInProgress.stateNode = createFundamentalStateInstance(\n            workInProgress,\n            newProps,\n            fundamentalImpl,\n            fundamentalState || {},\n          );\n          const instance = ((getFundamentalComponentInstance(\n            fundamentalInstance,\n          ): any): Instance);\n          fundamentalInstance.instance = instance;\n          if (fundamentalImpl.reconcileChildren === false) {\n            return null;\n          }\n          appendAllChildren(instance, workInProgress, false, false);\n          mountFundamentalComponent(fundamentalInstance);\n        } else {\n          // We fire update in commit phase\n          const prevProps = fundamentalInstance.props;\n          fundamentalInstance.prevProps = prevProps;\n          fundamentalInstance.props = newProps;\n          fundamentalInstance.currentFiber = workInProgress;\n          if (supportsPersistence) {\n            const instance = cloneFundamentalInstance(fundamentalInstance);\n            fundamentalInstance.instance = instance;\n            appendAllChildren(instance, workInProgress, false, false);\n          }\n          const shouldUpdate = shouldUpdateFundamentalComponent(\n            fundamentalInstance,\n          );\n          if (shouldUpdate) {\n            markUpdate(workInProgress);\n          }\n        }\n        return null;\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        if (current === null) {\n          const scopeInstance: ReactScopeInstance = createScopeInstance();\n          workInProgress.stateNode = scopeInstance;\n          prepareScopeUpdate(scopeInstance, workInProgress);\n          if (workInProgress.ref !== null) {\n            markRef(workInProgress);\n            markUpdate(workInProgress);\n          }\n        } else {\n          if (workInProgress.ref !== null) {\n            markUpdate(workInProgress);\n          }\n          if (current.ref !== workInProgress.ref) {\n            markRef(workInProgress);\n          }\n        }\n        return null;\n      }\n      break;\n    }\n    case Block:\n      if (enableBlocksAPI) {\n        return null;\n      }\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      popRenderLanes(workInProgress);\n      if (current !== null) {\n        const nextState: OffscreenState | null = workInProgress.memoizedState;\n        const prevState: OffscreenState | null = current.memoizedState;\n\n        const prevIsHidden = prevState !== null;\n        const nextIsHidden = nextState !== null;\n        if (\n          prevIsHidden !== nextIsHidden &&\n          newProps.mode !== 'unstable-defer-without-hiding'\n        ) {\n          workInProgress.flags |= Update;\n        }\n      }\n      return null;\n    }\n  }\n  invariant(\n    false,\n    'Unknown unit of work tag (%s). This error is likely caused by a bug in ' +\n      'React. Please file an issue.',\n    workInProgress.tag,\n  );\n}\n\nexport {completeWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions} from './ReactMutableSource.old';\nimport {\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostPortal,\n  ContextProvider,\n  SuspenseComponent,\n  SuspenseListComponent,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';\nimport {NoMode, ProfileMode} from './ReactTypeOfMode';\nimport {\n  enableSuspenseServerRenderer,\n  enableProfilerTimer,\n} from 'shared/ReactFeatureFlags';\n\nimport {popHostContainer, popHostContext} from './ReactFiberHostContext.old';\nimport {popSuspenseContext} from './ReactFiberSuspenseContext.old';\nimport {resetHydrationState} from './ReactFiberHydrationContext.old';\nimport {\n  isContextProvider as isLegacyContextProvider,\n  popContext as popLegacyContext,\n  popTopLevelContextObject as popTopLevelLegacyContextObject,\n} from './ReactFiberContext.old';\nimport {popProvider} from './ReactFiberNewContext.old';\nimport {popRenderLanes} from './ReactFiberWorkLoop.old';\nimport {transferActualDuration} from './ReactProfilerTimer.old';\n\nimport invariant from 'shared/invariant';\n\nfunction unwindWork(workInProgress: Fiber, renderLanes: Lanes) {\n  switch (workInProgress.tag) {\n    case ClassComponent: {\n      const Component = workInProgress.type;\n      if (isLegacyContextProvider(Component)) {\n        popLegacyContext(workInProgress);\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case HostRoot: {\n      popHostContainer(workInProgress);\n      popTopLevelLegacyContextObject(workInProgress);\n      resetMutableSourceWorkInProgressVersions();\n      const flags = workInProgress.flags;\n      invariant(\n        (flags & DidCapture) === NoFlags,\n        'The root failed to unmount after an error. This is likely a bug in ' +\n          'React. Please file an issue.',\n      );\n      workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n      return workInProgress;\n    }\n    case HostComponent: {\n      // TODO: popHydrationState\n      popHostContext(workInProgress);\n      return null;\n    }\n    case SuspenseComponent: {\n      popSuspenseContext(workInProgress);\n      if (enableSuspenseServerRenderer) {\n        const suspenseState: null | SuspenseState =\n          workInProgress.memoizedState;\n        if (suspenseState !== null && suspenseState.dehydrated !== null) {\n          invariant(\n            workInProgress.alternate !== null,\n            'Threw in newly mounted dehydrated component. This is likely a bug in ' +\n              'React. Please file an issue.',\n          );\n          resetHydrationState();\n        }\n      }\n      const flags = workInProgress.flags;\n      if (flags & ShouldCapture) {\n        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n        // Captured a suspense effect. Re-render the boundary.\n        if (\n          enableProfilerTimer &&\n          (workInProgress.mode & ProfileMode) !== NoMode\n        ) {\n          transferActualDuration(workInProgress);\n        }\n        return workInProgress;\n      }\n      return null;\n    }\n    case SuspenseListComponent: {\n      popSuspenseContext(workInProgress);\n      // SuspenseList doesn't actually catch anything. It should've been\n      // caught by a nested boundary. If not, it should bubble through.\n      return null;\n    }\n    case HostPortal:\n      popHostContainer(workInProgress);\n      return null;\n    case ContextProvider:\n      popProvider(workInProgress);\n      return null;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(workInProgress);\n      return null;\n    default:\n      return null;\n  }\n}\n\nfunction unwindInterruptedWork(interruptedWork: Fiber) {\n  switch (interruptedWork.tag) {\n    case ClassComponent: {\n      const childContextTypes = interruptedWork.type.childContextTypes;\n      if (childContextTypes !== null && childContextTypes !== undefined) {\n        popLegacyContext(interruptedWork);\n      }\n      break;\n    }\n    case HostRoot: {\n      popHostContainer(interruptedWork);\n      popTopLevelLegacyContextObject(interruptedWork);\n      resetMutableSourceWorkInProgressVersions();\n      break;\n    }\n    case HostComponent: {\n      popHostContext(interruptedWork);\n      break;\n    }\n    case HostPortal:\n      popHostContainer(interruptedWork);\n      break;\n    case SuspenseComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case SuspenseListComponent:\n      popSuspenseContext(interruptedWork);\n      break;\n    case ContextProvider:\n      popProvider(interruptedWork);\n      break;\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      popRenderLanes(interruptedWork);\n      break;\n    default:\n      break;\n  }\n}\n\nexport {unwindWork, unwindInterruptedWork};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\n\nimport {getStackByFiberInDevAndProd} from './ReactFiberComponentStack';\n\nexport type CapturedValue<T> = {|\n  value: T,\n  source: Fiber | null,\n  stack: string | null,\n|};\n\nexport function createCapturedValue<T>(\n  value: T,\n  source: Fiber,\n): CapturedValue<T> {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value,\n    source,\n    stack: getStackByFiberInDevAndProd(source),\n  };\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\n\nexport function showErrorDialog(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): boolean {\n  return true;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {CapturedValue} from './ReactCapturedValue';\n\nimport {showErrorDialog} from './ReactFiberErrorDialog';\nimport {ClassComponent} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\n\nexport function logCapturedError(\n  boundary: Fiber,\n  errorInfo: CapturedValue<mixed>,\n): void {\n  try {\n    const logError = showErrorDialog(boundary, errorInfo);\n\n    // Allow injected showErrorDialog() to prevent default console.error logging.\n    // This enables renderers like ReactNative to better manage redbox behavior.\n    if (logError === false) {\n      return;\n    }\n\n    const error = (errorInfo.value: any);\n    if (__DEV__) {\n      const source = errorInfo.source;\n      const stack = errorInfo.stack;\n      const componentStack = stack !== null ? stack : '';\n      // Browsers support silencing uncaught errors by calling\n      // `preventDefault()` in window `error` handler.\n      // We record this information as an expando on the error.\n      if (error != null && error._suppressLogging) {\n        if (boundary.tag === ClassComponent) {\n          // The error is recoverable and was silenced.\n          // Ignore it and don't print the stack addendum.\n          // This is handy for testing error boundaries without noise.\n          return;\n        }\n        // The error is fatal. Since the silencing might have\n        // been accidental, we'll surface it anyway.\n        // However, the browser would have silenced the original error\n        // so we'll print it first, and then print the stack addendum.\n        console['error'](error); // Don't transform to our wrapper\n        // For a more detailed description of this block, see:\n        // https://github.com/facebook/react/pull/13384\n      }\n\n      const componentName = source ? getComponentName(source.type) : null;\n      const componentNameMessage = componentName\n        ? `The above error occurred in the <${componentName}> component:`\n        : 'The above error occurred in one of your React components:';\n\n      let errorBoundaryMessage;\n      const errorBoundaryName = getComponentName(boundary.type);\n      if (errorBoundaryName) {\n        errorBoundaryMessage =\n          `React will try to recreate this component tree from scratch ` +\n          `using the error boundary you provided, ${errorBoundaryName}.`;\n      } else {\n        errorBoundaryMessage =\n          'Consider adding an error boundary to your tree to customize error handling behavior.\\n' +\n          'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';\n      }\n      const combinedMessage =\n        `${componentNameMessage}\\n${componentStack}\\n\\n` +\n        `${errorBoundaryMessage}`;\n\n      // In development, we provide our own message with just the component stack.\n      // We don't include the original error message and JS stack because the browser\n      // has already printed it. Even if the application swallows the error, it is still\n      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n      console['error'](combinedMessage); // Don't transform to our wrapper\n    } else {\n      // In production, we print the error directly.\n      // This will include the message, the JS stack, and anything the browser wants to show.\n      // We pass the error object instead of custom message so that the browser displays the error natively.\n      console['error'](error); // Don't transform to our wrapper\n    }\n  } catch (e) {\n    // This method must not throw, or React internal state will get messed up.\n    // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n    // we want to report this error outside of the normal stack as a last resort.\n    // https://github.com/facebook/react/issues/13188\n    setTimeout(() => {\n      throw e;\n    });\n  }\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lane, Lanes} from './ReactFiberLane';\nimport type {CapturedValue} from './ReactCapturedValue';\nimport type {Update} from './ReactUpdateQueue.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {SuspenseContext} from './ReactFiberSuspenseContext.old';\n\nimport getComponentName from 'shared/getComponentName';\nimport {\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n  IncompleteClassComponent,\n} from './ReactWorkTags';\nimport {\n  DidCapture,\n  Incomplete,\n  NoFlags,\n  ShouldCapture,\n  LifecycleEffectMask,\n  ForceUpdateForLegacySuspense,\n} from './ReactFiberFlags';\nimport {shouldCaptureSuspense} from './ReactFiberSuspenseComponent.old';\nimport {NoMode, BlockingMode, DebugTracingMode} from './ReactTypeOfMode';\nimport {\n  enableDebugTracing,\n  enableSchedulingProfiler,\n} from 'shared/ReactFeatureFlags';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  enqueueCapturedUpdate,\n  createUpdate,\n  CaptureUpdate,\n  ForceUpdate,\n  enqueueUpdate,\n} from './ReactUpdateQueue.old';\nimport {markFailedErrorBoundaryForHotReloading} from './ReactFiberHotReloading.old';\nimport {\n  suspenseStackCursor,\n  InvisibleParentSuspenseContext,\n  hasSuspenseContext,\n} from './ReactFiberSuspenseContext.old';\nimport {\n  renderDidError,\n  onUncaughtError,\n  markLegacyErrorBoundaryAsFailed,\n  isAlreadyFailedLegacyErrorBoundary,\n  pingSuspendedRoot,\n} from './ReactFiberWorkLoop.old';\nimport {logCapturedError} from './ReactFiberErrorLogger';\nimport {logComponentSuspended} from './DebugTracing';\nimport {markComponentSuspended} from './SchedulingProfiler';\n\nimport {\n  SyncLane,\n  NoTimestamp,\n  includesSomeLane,\n  mergeLanes,\n  pickArbitraryLane,\n} from './ReactFiberLane';\n\nconst PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n\nfunction createRootErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  // Unmount the root by rendering null.\n  update.tag = CaptureUpdate;\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element: null};\n  const error = errorInfo.value;\n  update.callback = () => {\n    onUncaughtError(error);\n    logCapturedError(fiber, errorInfo);\n  };\n  return update;\n}\n\nfunction createClassErrorUpdate(\n  fiber: Fiber,\n  errorInfo: CapturedValue<mixed>,\n  lane: Lane,\n): Update<mixed> {\n  const update = createUpdate(NoTimestamp, lane);\n  update.tag = CaptureUpdate;\n  const getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n  if (typeof getDerivedStateFromError === 'function') {\n    const error = errorInfo.value;\n    update.payload = () => {\n      logCapturedError(fiber, errorInfo);\n      return getDerivedStateFromError(error);\n    };\n  }\n\n  const inst = fiber.stateNode;\n  if (inst !== null && typeof inst.componentDidCatch === 'function') {\n    update.callback = function callback() {\n      if (__DEV__) {\n        markFailedErrorBoundaryForHotReloading(fiber);\n      }\n      if (typeof getDerivedStateFromError !== 'function') {\n        // To preserve the preexisting retry behavior of error boundaries,\n        // we keep track of which ones already failed during this batch.\n        // This gets reset before we yield back to the browser.\n        // TODO: Warn in strict mode if getDerivedStateFromError is\n        // not defined.\n        markLegacyErrorBoundaryAsFailed(this);\n\n        // Only log here if componentDidCatch is the only error boundary method defined\n        logCapturedError(fiber, errorInfo);\n      }\n      const error = errorInfo.value;\n      const stack = errorInfo.stack;\n      this.componentDidCatch(error, {\n        componentStack: stack !== null ? stack : '',\n      });\n      if (__DEV__) {\n        if (typeof getDerivedStateFromError !== 'function') {\n          // If componentDidCatch is the only error boundary method defined,\n          // then it needs to call setState to recover from errors.\n          // If no state update is scheduled then the boundary will swallow the error.\n          if (!includesSomeLane(fiber.lanes, (SyncLane: Lane))) {\n            console.error(\n              '%s: Error boundaries should implement getDerivedStateFromError(). ' +\n                'In that method, return a state update to display an error message or fallback UI.',\n              getComponentName(fiber.type) || 'Unknown',\n            );\n          }\n        }\n      }\n    };\n  } else if (__DEV__) {\n    update.callback = () => {\n      markFailedErrorBoundaryForHotReloading(fiber);\n    };\n  }\n  return update;\n}\n\nfunction attachPingListener(root: FiberRoot, wakeable: Wakeable, lanes: Lanes) {\n  // Attach a listener to the promise to \"ping\" the root and retry. But only if\n  // one does not already exist for the lanes we're currently rendering (which\n  // acts like a \"thread ID\" here).\n  let pingCache = root.pingCache;\n  let threadIDs;\n  if (pingCache === null) {\n    pingCache = root.pingCache = new PossiblyWeakMap();\n    threadIDs = new Set();\n    pingCache.set(wakeable, threadIDs);\n  } else {\n    threadIDs = pingCache.get(wakeable);\n    if (threadIDs === undefined) {\n      threadIDs = new Set();\n      pingCache.set(wakeable, threadIDs);\n    }\n  }\n  if (!threadIDs.has(lanes)) {\n    // Memoize using the thread ID to prevent redundant listeners.\n    threadIDs.add(lanes);\n    const ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n    wakeable.then(ping, ping);\n  }\n}\n\nfunction throwException(\n  root: FiberRoot,\n  returnFiber: Fiber,\n  sourceFiber: Fiber,\n  value: mixed,\n  rootRenderLanes: Lanes,\n) {\n  // The source fiber did not complete.\n  sourceFiber.flags |= Incomplete;\n  // Its effect list is no longer valid.\n  sourceFiber.firstEffect = sourceFiber.lastEffect = null;\n\n  if (\n    value !== null &&\n    typeof value === 'object' &&\n    typeof value.then === 'function'\n  ) {\n    // This is a wakeable.\n    const wakeable: Wakeable = (value: any);\n\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        if (sourceFiber.mode & DebugTracingMode) {\n          const name = getComponentName(sourceFiber.type) || 'Unknown';\n          logComponentSuspended(name, wakeable);\n        }\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markComponentSuspended(sourceFiber, wakeable);\n    }\n\n    if ((sourceFiber.mode & BlockingMode) === NoMode) {\n      // Reset the memoizedState to what it was before we attempted\n      // to render it.\n      const currentSource = sourceFiber.alternate;\n      if (currentSource) {\n        sourceFiber.updateQueue = currentSource.updateQueue;\n        sourceFiber.memoizedState = currentSource.memoizedState;\n        sourceFiber.lanes = currentSource.lanes;\n      } else {\n        sourceFiber.updateQueue = null;\n        sourceFiber.memoizedState = null;\n      }\n    }\n\n    const hasInvisibleParentBoundary = hasSuspenseContext(\n      suspenseStackCursor.current,\n      (InvisibleParentSuspenseContext: SuspenseContext),\n    );\n\n    // Schedule the nearest Suspense to re-render the timed out view.\n    let workInProgress = returnFiber;\n    do {\n      if (\n        workInProgress.tag === SuspenseComponent &&\n        shouldCaptureSuspense(workInProgress, hasInvisibleParentBoundary)\n      ) {\n        // Found the nearest boundary.\n\n        // Stash the promise on the boundary fiber. If the boundary times out, we'll\n        // attach another listener to flip the boundary back to its normal state.\n        const wakeables: Set<Wakeable> = (workInProgress.updateQueue: any);\n        if (wakeables === null) {\n          const updateQueue = (new Set(): any);\n          updateQueue.add(wakeable);\n          workInProgress.updateQueue = updateQueue;\n        } else {\n          wakeables.add(wakeable);\n        }\n\n        // If the boundary is outside of blocking mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. In the commit phase, we'll schedule a\n        // subsequent synchronous update to re-render the Suspense.\n        //\n        // Note: It doesn't matter whether the component that suspended was\n        // inside a blocking mode tree. If the Suspense is outside of it, we\n        // should *not* suspend the commit.\n        if ((workInProgress.mode & BlockingMode) === NoMode) {\n          workInProgress.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense;\n\n          // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (sourceFiber.tag === ClassComponent) {\n            const currentSourceFiber = sourceFiber.alternate;\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              const update = createUpdate(NoTimestamp, SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update);\n            }\n          }\n\n          // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n\n          // Exit without suspending.\n          return;\n        }\n\n        // Confirmed that the boundary is in a concurrent mode tree. Continue\n        // with the normal suspend path.\n        //\n        // After this we'll use a set of heuristics to determine whether this\n        // render pass will run to completion or restart or \"suspend\" the commit.\n        // The actual logic for this is spread out in different places.\n        //\n        // This first principle is that if we're going to suspend when we complete\n        // a root, then we should also restart if we get an update or ping that\n        // might unsuspend it, and vice versa. The only reason to suspend is\n        // because you think you might want to restart before committing. However,\n        // it doesn't make sense to restart only while in the period we're suspended.\n        //\n        // Restarting too aggressively is also not good because it starves out any\n        // intermediate loading state. So we use heuristics to determine when.\n\n        // Suspense Heuristics\n        //\n        // If nothing threw a Promise or all the same fallbacks are already showing,\n        // then don't suspend/restart.\n        //\n        // If this is an initial render of a new tree of Suspense boundaries and\n        // those trigger a fallback, then don't suspend/restart. We want to ensure\n        // that we can show the initial loading state as quickly as possible.\n        //\n        // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n        // a fallback, then we should always suspend/restart. Transitions apply\n        // to this case. If none is defined, JND is used instead.\n        //\n        // If we're already showing a fallback and it gets \"retried\", allowing us to show\n        // another level, but there's still an inner boundary that would show a fallback,\n        // then we suspend/restart for 500ms since the last time we showed a fallback\n        // anywhere in the tree. This effectively throttles progressive loading into a\n        // consistent train of commits. This also gives us an opportunity to restart to\n        // get to the completed state slightly earlier.\n        //\n        // If there's ambiguity due to batching it's resolved in preference of:\n        // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n        //\n        // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n        // ensure that new initial loading states can commit as soon as possible.\n\n        attachPingListener(root, wakeable, rootRenderLanes);\n\n        workInProgress.flags |= ShouldCapture;\n        workInProgress.lanes = rootRenderLanes;\n\n        return;\n      }\n      // This boundary already captured during this render. Continue to the next\n      // boundary.\n      workInProgress = workInProgress.return;\n    } while (workInProgress !== null);\n    // No boundary was found. Fallthrough to error mode.\n    // TODO: Use invariant so the message is stripped in prod?\n    value = new Error(\n      (getComponentName(sourceFiber.type) || 'A React component') +\n        ' suspended while rendering, but no fallback UI was specified.\\n' +\n        '\\n' +\n        'Add a <Suspense fallback=...> component higher in the tree to ' +\n        'provide a loading indicator or placeholder to display.',\n    );\n  }\n\n  // We didn't find a boundary that could handle this type of exception. Start\n  // over and traverse parent path again, this time treating the exception\n  // as an error.\n  renderDidError();\n\n  value = createCapturedValue(value, sourceFiber);\n  let workInProgress = returnFiber;\n  do {\n    switch (workInProgress.tag) {\n      case HostRoot: {\n        const errorInfo = value;\n        workInProgress.flags |= ShouldCapture;\n        const lane = pickArbitraryLane(rootRenderLanes);\n        workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n        const update = createRootErrorUpdate(workInProgress, errorInfo, lane);\n        enqueueCapturedUpdate(workInProgress, update);\n        return;\n      }\n      case ClassComponent:\n        // Capture and retry\n        const errorInfo = value;\n        const ctor = workInProgress.type;\n        const instance = workInProgress.stateNode;\n        if (\n          (workInProgress.flags & DidCapture) === NoFlags &&\n          (typeof ctor.getDerivedStateFromError === 'function' ||\n            (instance !== null &&\n              typeof instance.componentDidCatch === 'function' &&\n              !isAlreadyFailedLegacyErrorBoundary(instance)))\n        ) {\n          workInProgress.flags |= ShouldCapture;\n          const lane = pickArbitraryLane(rootRenderLanes);\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n          // Schedule the error boundary to re-render using updated state\n          const update = createClassErrorUpdate(\n            workInProgress,\n            errorInfo,\n            lane,\n          );\n          enqueueCapturedUpdate(workInProgress, update);\n          return;\n        }\n        break;\n      default:\n        break;\n    }\n    workInProgress = workInProgress.return;\n  } while (workInProgress !== null);\n}\n\nexport {throwException, createRootErrorUpdate, createClassErrorUpdate};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {\n  Instance,\n  TextInstance,\n  SuspenseInstance,\n  Container,\n  ChildSet,\n  UpdatePayload,\n} from './ReactFiberHostConfig';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {UpdateQueue} from './ReactUpdateQueue.old';\nimport type {FunctionComponentUpdateQueue} from './ReactFiberHooks.old';\nimport type {Wakeable} from 'shared/ReactTypes';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {OffscreenState} from './ReactFiberOffscreenComponent';\n\nimport {unstable_wrap as Schedule_tracing_wrap} from 'scheduler/tracing';\nimport {\n  enableSchedulerTracing,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableSuspenseServerRenderer,\n  enableFundamentalAPI,\n  enableSuspenseCallback,\n  enableScopeAPI,\n} from 'shared/ReactFeatureFlags';\nimport {\n  FunctionComponent,\n  ForwardRef,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  Profiler,\n  SuspenseComponent,\n  DehydratedFragment,\n  IncompleteClassComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  SuspenseListComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {\n  NoFlags,\n  ContentReset,\n  Placement,\n  Snapshot,\n  Update,\n} from './ReactFiberFlags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\n\nimport {onCommitUnmount} from './ReactFiberDevToolsHook.old';\nimport {resolveDefaultProps} from './ReactFiberLazyComponent.old';\nimport {\n  getCommitTime,\n  recordLayoutEffectDuration,\n  startLayoutEffectTimer,\n} from './ReactProfilerTimer.old';\nimport {ProfileMode} from './ReactTypeOfMode';\nimport {commitUpdateQueue} from './ReactUpdateQueue.old';\nimport {\n  getPublicInstance,\n  supportsMutation,\n  supportsPersistence,\n  supportsHydration,\n  commitMount,\n  commitUpdate,\n  resetTextContent,\n  commitTextUpdate,\n  appendChild,\n  appendChildToContainer,\n  insertBefore,\n  insertInContainerBefore,\n  removeChild,\n  removeChildFromContainer,\n  clearSuspenseBoundary,\n  clearSuspenseBoundaryFromContainer,\n  replaceContainerChildren,\n  createContainerChildSet,\n  hideInstance,\n  hideTextInstance,\n  unhideInstance,\n  unhideTextInstance,\n  unmountFundamentalComponent,\n  updateFundamentalComponent,\n  commitHydratedContainer,\n  commitHydratedSuspenseInstance,\n  clearContainer,\n  prepareScopeUpdate,\n} from './ReactFiberHostConfig';\nimport {\n  captureCommitPhaseError,\n  resolveRetryWakeable,\n  markCommitTimeOfFallback,\n  enqueuePendingPassiveHookEffectMount,\n  enqueuePendingPassiveHookEffectUnmount,\n  enqueuePendingPassiveProfilerEffect,\n} from './ReactFiberWorkLoop.old';\nimport {\n  NoFlags as NoHookEffect,\n  HasEffect as HookHasEffect,\n  Layout as HookLayout,\n  Passive as HookPassive,\n} from './ReactHookEffectTags';\nimport {didWarnAboutReassigningProps} from './ReactFiberBeginWork.old';\n\nlet didWarnAboutUndefinedSnapshotBeforeUpdate: Set<mixed> | null = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\nconst PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;\n\nconst callComponentWillUnmountWithTimer = function(current, instance) {\n  instance.props = current.memoizedProps;\n  instance.state = current.memoizedState;\n  if (\n    enableProfilerTimer &&\n    enableProfilerCommitHooks &&\n    current.mode & ProfileMode\n  ) {\n    try {\n      startLayoutEffectTimer();\n      instance.componentWillUnmount();\n    } finally {\n      recordLayoutEffectDuration(current);\n    }\n  } else {\n    instance.componentWillUnmount();\n  }\n};\n\n// Capture errors so they don't interrupt unmounting.\nfunction safelyCallComponentWillUnmount(current: Fiber, instance: any) {\n  if (__DEV__) {\n    invokeGuardedCallback(\n      null,\n      callComponentWillUnmountWithTimer,\n      null,\n      current,\n      instance,\n    );\n    if (hasCaughtError()) {\n      const unmountError = clearCaughtError();\n      captureCommitPhaseError(current, unmountError);\n    }\n  } else {\n    try {\n      callComponentWillUnmountWithTimer(current, instance);\n    } catch (unmountError) {\n      captureCommitPhaseError(current, unmountError);\n    }\n  }\n}\n\nfunction safelyDetachRef(current: Fiber) {\n  const ref = current.ref;\n  if (ref !== null) {\n    if (typeof ref === 'function') {\n      if (__DEV__) {\n        invokeGuardedCallback(null, ref, null, null);\n        if (hasCaughtError()) {\n          const refError = clearCaughtError();\n          captureCommitPhaseError(current, refError);\n        }\n      } else {\n        try {\n          ref(null);\n        } catch (refError) {\n          captureCommitPhaseError(current, refError);\n        }\n      }\n    } else {\n      ref.current = null;\n    }\n  }\n}\n\nfunction safelyCallDestroy(current: Fiber, destroy: () => void) {\n  if (__DEV__) {\n    invokeGuardedCallback(null, destroy, null);\n    if (hasCaughtError()) {\n      const error = clearCaughtError();\n      captureCommitPhaseError(current, error);\n    }\n  } else {\n    try {\n      destroy();\n    } catch (error) {\n      captureCommitPhaseError(current, error);\n    }\n  }\n}\n\nfunction commitBeforeMutationLifeCycles(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n    case Block: {\n      return;\n    }\n    case ClassComponent: {\n      if (finishedWork.flags & Snapshot) {\n        if (current !== null) {\n          const prevProps = current.memoizedProps;\n          const prevState = current.memoizedState;\n          const instance = finishedWork.stateNode;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'getSnapshotBeforeUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          const snapshot = instance.getSnapshotBeforeUpdate(\n            finishedWork.elementType === finishedWork.type\n              ? prevProps\n              : resolveDefaultProps(finishedWork.type, prevProps),\n            prevState,\n          );\n          if (__DEV__) {\n            const didWarnSet = ((didWarnAboutUndefinedSnapshotBeforeUpdate: any): Set<mixed>);\n            if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n              didWarnSet.add(finishedWork.type);\n              console.error(\n                '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +\n                  'must be returned. You have returned undefined.',\n                getComponentName(finishedWork.type),\n              );\n            }\n          }\n          instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n        }\n      }\n      return;\n    }\n    case HostRoot: {\n      if (supportsMutation) {\n        if (finishedWork.flags & Snapshot) {\n          const root = finishedWork.stateNode;\n          clearContainer(root.containerInfo);\n        }\n      }\n      return;\n    }\n    case HostComponent:\n    case HostText:\n    case HostPortal:\n    case IncompleteClassComponent:\n      // Nothing to do for these component types\n      return;\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction commitHookEffectListUnmount(tag: number, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Unmount\n        const destroy = effect.destroy;\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          destroy();\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction commitHookEffectListMount(tag: number, finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Mount\n        const create = effect.create;\n        effect.destroy = create();\n\n        if (__DEV__) {\n          const destroy = effect.destroy;\n          if (destroy !== undefined && typeof destroy !== 'function') {\n            let addendum;\n            if (destroy === null) {\n              addendum =\n                ' You returned null. If your effect does not require clean ' +\n                'up, return undefined (or nothing).';\n            } else if (typeof destroy.then === 'function') {\n              addendum =\n                '\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +\n                'Instead, write the async function inside your effect ' +\n                'and call it immediately:\\n\\n' +\n                'useEffect(() => {\\n' +\n                '  async function fetchData() {\\n' +\n                '    // You can await here\\n' +\n                '    const response = await MyAPI.getData(someId);\\n' +\n                '    // ...\\n' +\n                '  }\\n' +\n                '  fetchData();\\n' +\n                `}, [someId]); // Or [] if effect doesn't need props or state\\n\\n` +\n                'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';\n            } else {\n              addendum = ' You returned: ' + destroy;\n            }\n            console.error(\n              'An effect function must not return anything besides a function, ' +\n                'which is used for clean-up.%s',\n              addendum,\n            );\n          }\n        }\n      }\n      effect = effect.next;\n    } while (effect !== firstEffect);\n  }\n}\n\nfunction schedulePassiveEffects(finishedWork: Fiber) {\n  const updateQueue: FunctionComponentUpdateQueue | null = (finishedWork.updateQueue: any);\n  const lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n  if (lastEffect !== null) {\n    const firstEffect = lastEffect.next;\n    let effect = firstEffect;\n    do {\n      const {next, tag} = effect;\n      if (\n        (tag & HookPassive) !== NoHookEffect &&\n        (tag & HookHasEffect) !== NoHookEffect\n      ) {\n        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);\n        enqueuePendingPassiveHookEffectMount(finishedWork, effect);\n      }\n      effect = next;\n    } while (effect !== firstEffect);\n  }\n}\n\nexport function commitPassiveEffectDurations(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    // Only Profilers with work in their subtree will have an Update effect scheduled.\n    if ((finishedWork.flags & Update) !== NoFlags) {\n      switch (finishedWork.tag) {\n        case Profiler: {\n          const {passiveEffectDuration} = finishedWork.stateNode;\n          const {id, onPostCommit} = finishedWork.memoizedProps;\n\n          // This value will still reflect the previous commit phase.\n          // It does not get reset until the start of the next commit phase.\n          const commitTime = getCommitTime();\n\n          if (typeof onPostCommit === 'function') {\n            if (enableSchedulerTracing) {\n              onPostCommit(\n                id,\n                finishedWork.alternate === null ? 'mount' : 'update',\n                passiveEffectDuration,\n                commitTime,\n                finishedRoot.memoizedInteractions,\n              );\n            } else {\n              onPostCommit(\n                id,\n                finishedWork.alternate === null ? 'mount' : 'update',\n                passiveEffectDuration,\n                commitTime,\n              );\n            }\n          }\n\n          // Bubble times to the next nearest ancestor Profiler.\n          // After we process that Profiler, we'll bubble further up.\n          let parentFiber = finishedWork.return;\n          while (parentFiber !== null) {\n            if (parentFiber.tag === Profiler) {\n              const parentStateNode = parentFiber.stateNode;\n              parentStateNode.passiveEffectDuration += passiveEffectDuration;\n              break;\n            }\n            parentFiber = parentFiber.return;\n          }\n          break;\n        }\n        default:\n          break;\n      }\n    }\n  }\n}\n\nfunction commitLifeCycles(\n  finishedRoot: FiberRoot,\n  current: Fiber | null,\n  finishedWork: Fiber,\n  committedLanes: Lanes,\n): void {\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case SimpleMemoComponent:\n    case Block: {\n      // At this point layout effects have already been destroyed (during mutation phase).\n      // This is done to prevent sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListMount(HookLayout | HookHasEffect, finishedWork);\n      }\n\n      schedulePassiveEffects(finishedWork);\n      return;\n    }\n    case ClassComponent: {\n      const instance = finishedWork.stateNode;\n      if (finishedWork.flags & Update) {\n        if (current === null) {\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'componentDidMount. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'componentDidMount. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              instance.componentDidMount();\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            instance.componentDidMount();\n          }\n        } else {\n          const prevProps =\n            finishedWork.elementType === finishedWork.type\n              ? current.memoizedProps\n              : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n          const prevState = current.memoizedState;\n          // We could update instance props and state here,\n          // but instead we rely on them being set during last render.\n          // TODO: revisit this when we implement resuming.\n          if (__DEV__) {\n            if (\n              finishedWork.type === finishedWork.elementType &&\n              !didWarnAboutReassigningProps\n            ) {\n              if (instance.props !== finishedWork.memoizedProps) {\n                console.error(\n                  'Expected %s props to match memoized props before ' +\n                    'componentDidUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.props`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n              if (instance.state !== finishedWork.memoizedState) {\n                console.error(\n                  'Expected %s state to match memoized state before ' +\n                    'componentDidUpdate. ' +\n                    'This might either be because of a bug in React, or because ' +\n                    'a component reassigns its own `this.state`. ' +\n                    'Please file an issue.',\n                  getComponentName(finishedWork.type) || 'instance',\n                );\n              }\n            }\n          }\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            finishedWork.mode & ProfileMode\n          ) {\n            try {\n              startLayoutEffectTimer();\n              instance.componentDidUpdate(\n                prevProps,\n                prevState,\n                instance.__reactInternalSnapshotBeforeUpdate,\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            instance.componentDidUpdate(\n              prevProps,\n              prevState,\n              instance.__reactInternalSnapshotBeforeUpdate,\n            );\n          }\n        }\n      }\n\n      // TODO: I think this is now always non-null by the time it reaches the\n      // commit phase. Consider removing the type check.\n      const updateQueue: UpdateQueue<\n        *,\n      > | null = (finishedWork.updateQueue: any);\n      if (updateQueue !== null) {\n        if (__DEV__) {\n          if (\n            finishedWork.type === finishedWork.elementType &&\n            !didWarnAboutReassigningProps\n          ) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              console.error(\n                'Expected %s props to match memoized props before ' +\n                  'processing the update queue. ' +\n                  'This might either be because of a bug in React, or because ' +\n                  'a component reassigns its own `this.props`. ' +\n                  'Please file an issue.',\n                getComponentName(finishedWork.type) || 'instance',\n              );\n            }\n            if (instance.state !== finishedWork.memoizedState) {\n              console.error(\n                'Expected %s state to match memoized state before ' +\n                  'processing the update queue. ' +\n                  'This might either be because of a bug in React, or because ' +\n                  'a component reassigns its own `this.state`. ' +\n                  'Please file an issue.',\n                getComponentName(finishedWork.type) || 'instance',\n              );\n            }\n          }\n        }\n        // We could update instance props and state here,\n        // but instead we rely on them being set during last render.\n        // TODO: revisit this when we implement resuming.\n        commitUpdateQueue(finishedWork, updateQueue, instance);\n      }\n      return;\n    }\n    case HostRoot: {\n      // TODO: I think this is now always non-null by the time it reaches the\n      // commit phase. Consider removing the type check.\n      const updateQueue: UpdateQueue<\n        *,\n      > | null = (finishedWork.updateQueue: any);\n      if (updateQueue !== null) {\n        let instance = null;\n        if (finishedWork.child !== null) {\n          switch (finishedWork.child.tag) {\n            case HostComponent:\n              instance = getPublicInstance(finishedWork.child.stateNode);\n              break;\n            case ClassComponent:\n              instance = finishedWork.child.stateNode;\n              break;\n          }\n        }\n        commitUpdateQueue(finishedWork, updateQueue, instance);\n      }\n      return;\n    }\n    case HostComponent: {\n      const instance: Instance = finishedWork.stateNode;\n\n      // Renderers may schedule work to be done after host components are mounted\n      // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n      // These effects should only be committed when components are first mounted,\n      // aka when there is no current/alternate.\n      if (current === null && finishedWork.flags & Update) {\n        const type = finishedWork.type;\n        const props = finishedWork.memoizedProps;\n        commitMount(instance, type, props, finishedWork);\n      }\n\n      return;\n    }\n    case HostText: {\n      // We have no life-cycles associated with text.\n      return;\n    }\n    case HostPortal: {\n      // We have no life-cycles associated with portals.\n      return;\n    }\n    case Profiler: {\n      if (enableProfilerTimer) {\n        const {onCommit, onRender} = finishedWork.memoizedProps;\n        const {effectDuration} = finishedWork.stateNode;\n\n        const commitTime = getCommitTime();\n\n        if (typeof onRender === 'function') {\n          if (enableSchedulerTracing) {\n            onRender(\n              finishedWork.memoizedProps.id,\n              current === null ? 'mount' : 'update',\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n              finishedRoot.memoizedInteractions,\n            );\n          } else {\n            onRender(\n              finishedWork.memoizedProps.id,\n              current === null ? 'mount' : 'update',\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime,\n            );\n          }\n        }\n\n        if (enableProfilerCommitHooks) {\n          if (typeof onCommit === 'function') {\n            if (enableSchedulerTracing) {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                current === null ? 'mount' : 'update',\n                effectDuration,\n                commitTime,\n                finishedRoot.memoizedInteractions,\n              );\n            } else {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                current === null ? 'mount' : 'update',\n                effectDuration,\n                commitTime,\n              );\n            }\n          }\n\n          // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n          // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n          // because the effect is also where times bubble to parent Profilers.\n          enqueuePendingPassiveProfilerEffect(finishedWork);\n\n          // Propagate layout effect durations to the next nearest Profiler ancestor.\n          // Do not reset these values until the next render so DevTools has a chance to read them first.\n          let parentFiber = finishedWork.return;\n          while (parentFiber !== null) {\n            if (parentFiber.tag === Profiler) {\n              const parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += effectDuration;\n              break;\n            }\n            parentFiber = parentFiber.return;\n          }\n        }\n      }\n      return;\n    }\n    case SuspenseComponent: {\n      commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);\n      return;\n    }\n    case SuspenseListComponent:\n    case IncompleteClassComponent:\n    case FundamentalComponent:\n    case ScopeComponent:\n    case OffscreenComponent:\n    case LegacyHiddenComponent:\n      return;\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction hideOrUnhideAllChildren(finishedWork, isHidden) {\n  if (supportsMutation) {\n    // We only have the top Fiber that was inserted but we need to recurse down its\n    // children to find all the terminal nodes.\n    let node: Fiber = finishedWork;\n    while (true) {\n      if (node.tag === HostComponent) {\n        const instance = node.stateNode;\n        if (isHidden) {\n          hideInstance(instance);\n        } else {\n          unhideInstance(node.stateNode, node.memoizedProps);\n        }\n      } else if (node.tag === HostText) {\n        const instance = node.stateNode;\n        if (isHidden) {\n          hideTextInstance(instance);\n        } else {\n          unhideTextInstance(instance, node.memoizedProps);\n        }\n      } else if (\n        (node.tag === OffscreenComponent ||\n          node.tag === LegacyHiddenComponent) &&\n        (node.memoizedState: OffscreenState) !== null &&\n        node !== finishedWork\n      ) {\n        // Found a nested Offscreen component that is hidden. Don't search\n        // any deeper. This tree should remain hidden.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n}\n\nfunction commitAttachRef(finishedWork: Fiber) {\n  const ref = finishedWork.ref;\n  if (ref !== null) {\n    const instance = finishedWork.stateNode;\n    let instanceToUse;\n    switch (finishedWork.tag) {\n      case HostComponent:\n        instanceToUse = getPublicInstance(instance);\n        break;\n      default:\n        instanceToUse = instance;\n    }\n    // Moved outside to ensure DCE works with this flag\n    if (enableScopeAPI && finishedWork.tag === ScopeComponent) {\n      instanceToUse = instance;\n    }\n    if (typeof ref === 'function') {\n      ref(instanceToUse);\n    } else {\n      if (__DEV__) {\n        if (!ref.hasOwnProperty('current')) {\n          console.error(\n            'Unexpected ref object provided for %s. ' +\n              'Use either a ref-setter function or React.createRef().',\n            getComponentName(finishedWork.type),\n          );\n        }\n      }\n\n      ref.current = instanceToUse;\n    }\n  }\n}\n\nfunction commitDetachRef(current: Fiber) {\n  const currentRef = current.ref;\n  if (currentRef !== null) {\n    if (typeof currentRef === 'function') {\n      currentRef(null);\n    } else {\n      currentRef.current = null;\n    }\n  }\n}\n\n// User-originating errors (lifecycles and refs) should not interrupt\n// deletion, so don't let them throw. Host-originating errors should\n// interrupt deletion, so it's okay\nfunction commitUnmount(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  onCommitUnmount(current);\n\n  switch (current.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n    case Block: {\n      const updateQueue: FunctionComponentUpdateQueue | null = (current.updateQueue: any);\n      if (updateQueue !== null) {\n        const lastEffect = updateQueue.lastEffect;\n        if (lastEffect !== null) {\n          const firstEffect = lastEffect.next;\n\n          let effect = firstEffect;\n          do {\n            const {destroy, tag} = effect;\n            if (destroy !== undefined) {\n              if ((tag & HookPassive) !== NoHookEffect) {\n                enqueuePendingPassiveHookEffectUnmount(current, effect);\n              } else {\n                if (\n                  enableProfilerTimer &&\n                  enableProfilerCommitHooks &&\n                  current.mode & ProfileMode\n                ) {\n                  startLayoutEffectTimer();\n                  safelyCallDestroy(current, destroy);\n                  recordLayoutEffectDuration(current);\n                } else {\n                  safelyCallDestroy(current, destroy);\n                }\n              }\n            }\n            effect = effect.next;\n          } while (effect !== firstEffect);\n        }\n      }\n      return;\n    }\n    case ClassComponent: {\n      safelyDetachRef(current);\n      const instance = current.stateNode;\n      if (typeof instance.componentWillUnmount === 'function') {\n        safelyCallComponentWillUnmount(current, instance);\n      }\n      return;\n    }\n    case HostComponent: {\n      safelyDetachRef(current);\n      return;\n    }\n    case HostPortal: {\n      // TODO: this is recursive.\n      // We are also not using this parent because\n      // the portal will get pushed immediately.\n      if (supportsMutation) {\n        unmountHostComponents(finishedRoot, current, renderPriorityLevel);\n      } else if (supportsPersistence) {\n        emptyPortalContainer(current);\n      }\n      return;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalInstance = current.stateNode;\n        if (fundamentalInstance !== null) {\n          unmountFundamentalComponent(fundamentalInstance);\n          current.stateNode = null;\n        }\n      }\n      return;\n    }\n    case DehydratedFragment: {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((current.stateNode: SuspenseInstance));\n          }\n        }\n      }\n      return;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        safelyDetachRef(current);\n      }\n      return;\n    }\n  }\n}\n\nfunction commitNestedUnmounts(\n  finishedRoot: FiberRoot,\n  root: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  // While we're inside a removed host node we don't want to call\n  // removeChild on the inner nodes because they're removed by the top\n  // call anyway. We also want to call componentWillUnmount on all\n  // composites before this host node is removed from the tree. Therefore\n  // we do an inner loop while we're still inside the host node.\n  let node: Fiber = root;\n  while (true) {\n    commitUnmount(finishedRoot, node, renderPriorityLevel);\n    // Visit children because they may contain more composite or host nodes.\n    // Skip portals because commitUnmount() currently visits them recursively.\n    if (\n      node.child !== null &&\n      // If we use mutation we drill down into portals using commitUnmount above.\n      // If we don't use mutation we drill down into portals here instead.\n      (!supportsMutation || node.tag !== HostPortal)\n    ) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === root) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === root) {\n        return;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction detachFiberMutation(fiber: Fiber) {\n  // Cut off the return pointers to disconnect it from the tree. Ideally, we\n  // should clear the child pointer of the parent alternate to let this\n  // get GC:ed but we don't know which for sure which parent is the current\n  // one so we'll settle for GC:ing the subtree of this child. This child\n  // itself will be GC:ed when the parent updates the next time.\n  // Note: we cannot null out sibling here, otherwise it can cause issues\n  // with findDOMNode and how it requires the sibling field to carry out\n  // traversal in a later effect. See PR #16820. We now clear the sibling\n  // field after effects, see: detachFiberAfterEffects.\n  //\n  // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.\n  // It may be required if the current component is an error boundary,\n  // and one of its descendants throws while unmounting a passive effect.\n  fiber.alternate = null;\n  fiber.child = null;\n  fiber.dependencies = null;\n  fiber.firstEffect = null;\n  fiber.lastEffect = null;\n  fiber.memoizedProps = null;\n  fiber.memoizedState = null;\n  fiber.pendingProps = null;\n  fiber.return = null;\n  fiber.updateQueue = null;\n  if (__DEV__) {\n    fiber._debugOwner = null;\n  }\n}\n\nfunction emptyPortalContainer(current: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  const portal: {\n    containerInfo: Container,\n    pendingChildren: ChildSet,\n    ...\n  } = current.stateNode;\n  const {containerInfo} = portal;\n  const emptyChildSet = createContainerChildSet(containerInfo);\n  replaceContainerChildren(containerInfo, emptyChildSet);\n}\n\nfunction commitContainer(finishedWork: Fiber) {\n  if (!supportsPersistence) {\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case ClassComponent:\n    case HostComponent:\n    case HostText:\n    case FundamentalComponent: {\n      return;\n    }\n    case HostRoot:\n    case HostPortal: {\n      const portalOrRoot: {\n        containerInfo: Container,\n        pendingChildren: ChildSet,\n        ...\n      } = finishedWork.stateNode;\n      const {containerInfo, pendingChildren} = portalOrRoot;\n      replaceContainerChildren(containerInfo, pendingChildren);\n      return;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction getHostParentFiber(fiber: Fiber): Fiber {\n  let parent = fiber.return;\n  while (parent !== null) {\n    if (isHostParent(parent)) {\n      return parent;\n    }\n    parent = parent.return;\n  }\n  invariant(\n    false,\n    'Expected to find a host parent. This error is likely caused by a bug ' +\n      'in React. Please file an issue.',\n  );\n}\n\nfunction isHostParent(fiber: Fiber): boolean {\n  return (\n    fiber.tag === HostComponent ||\n    fiber.tag === HostRoot ||\n    fiber.tag === HostPortal\n  );\n}\n\nfunction getHostSibling(fiber: Fiber): ?Instance {\n  // We're going to search forward into the tree until we find a sibling host\n  // node. Unfortunately, if multiple insertions are done in a row we have to\n  // search past them. This leads to exponential search for the next sibling.\n  // TODO: Find a more efficient way to do this.\n  let node: Fiber = fiber;\n  siblings: while (true) {\n    // If we didn't find anything, let's try the next sibling.\n    while (node.sibling === null) {\n      if (node.return === null || isHostParent(node.return)) {\n        // If we pop out of the root or hit the parent the fiber we are the\n        // last sibling.\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n    while (\n      node.tag !== HostComponent &&\n      node.tag !== HostText &&\n      node.tag !== DehydratedFragment\n    ) {\n      // If it is not host node and, we might have a host node inside it.\n      // Try to search down until we find one.\n      if (node.flags & Placement) {\n        // If we don't have a child, try the siblings instead.\n        continue siblings;\n      }\n      // If we don't have a child, try the siblings instead.\n      // We also skip portals because they are not part of this host tree.\n      if (node.child === null || node.tag === HostPortal) {\n        continue siblings;\n      } else {\n        node.child.return = node;\n        node = node.child;\n      }\n    }\n    // Check if this host node is stable or about to be placed.\n    if (!(node.flags & Placement)) {\n      // Found it!\n      return node.stateNode;\n    }\n  }\n}\n\nfunction commitPlacement(finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    return;\n  }\n\n  // Recursively insert all host nodes into the parent.\n  const parentFiber = getHostParentFiber(finishedWork);\n\n  // Note: these two variables *must* always be updated together.\n  let parent;\n  let isContainer;\n  const parentStateNode = parentFiber.stateNode;\n  switch (parentFiber.tag) {\n    case HostComponent:\n      parent = parentStateNode;\n      isContainer = false;\n      break;\n    case HostRoot:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    case HostPortal:\n      parent = parentStateNode.containerInfo;\n      isContainer = true;\n      break;\n    case FundamentalComponent:\n      if (enableFundamentalAPI) {\n        parent = parentStateNode.instance;\n        isContainer = false;\n      }\n    // eslint-disable-next-line-no-fallthrough\n    default:\n      invariant(\n        false,\n        'Invalid host parent fiber. This error is likely caused by a bug ' +\n          'in React. Please file an issue.',\n      );\n  }\n  if (parentFiber.flags & ContentReset) {\n    // Reset the text content of the parent before doing any insertions\n    resetTextContent(parent);\n    // Clear ContentReset from the effect tag\n    parentFiber.flags &= ~ContentReset;\n  }\n\n  const before = getHostSibling(finishedWork);\n  // We only have the top Fiber that was inserted but we need to recurse down its\n  // children to find all the terminal nodes.\n  if (isContainer) {\n    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n  } else {\n    insertOrAppendPlacementNode(finishedWork, before, parent);\n  }\n}\n\nfunction insertOrAppendPlacementNodeIntoContainer(\n  node: Fiber,\n  before: ?Instance,\n  parent: Container,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost || (enableFundamentalAPI && tag === FundamentalComponent)) {\n    const stateNode = isHost ? node.stateNode : node.stateNode.instance;\n    if (before) {\n      insertInContainerBefore(parent, stateNode, before);\n    } else {\n      appendChildToContainer(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction insertOrAppendPlacementNode(\n  node: Fiber,\n  before: ?Instance,\n  parent: Instance,\n): void {\n  const {tag} = node;\n  const isHost = tag === HostComponent || tag === HostText;\n  if (isHost || (enableFundamentalAPI && tag === FundamentalComponent)) {\n    const stateNode = isHost ? node.stateNode : node.stateNode.instance;\n    if (before) {\n      insertBefore(parent, stateNode, before);\n    } else {\n      appendChild(parent, stateNode);\n    }\n  } else if (tag === HostPortal) {\n    // If the insertion itself is a portal, then we don't want to traverse\n    // down its children. Instead, we'll get insertions from each child in\n    // the portal directly.\n  } else {\n    const child = node.child;\n    if (child !== null) {\n      insertOrAppendPlacementNode(child, before, parent);\n      let sibling = child.sibling;\n      while (sibling !== null) {\n        insertOrAppendPlacementNode(sibling, before, parent);\n        sibling = sibling.sibling;\n      }\n    }\n  }\n}\n\nfunction unmountHostComponents(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  // We only have the top Fiber that was deleted but we need to recurse down its\n  // children to find all the terminal nodes.\n  let node: Fiber = current;\n\n  // Each iteration, currentParent is populated with node's host parent if not\n  // currentParentIsValid.\n  let currentParentIsValid = false;\n\n  // Note: these two variables *must* always be updated together.\n  let currentParent;\n  let currentParentIsContainer;\n\n  while (true) {\n    if (!currentParentIsValid) {\n      let parent = node.return;\n      findParent: while (true) {\n        invariant(\n          parent !== null,\n          'Expected to find a host parent. This error is likely caused by ' +\n            'a bug in React. Please file an issue.',\n        );\n        const parentStateNode = parent.stateNode;\n        switch (parent.tag) {\n          case HostComponent:\n            currentParent = parentStateNode;\n            currentParentIsContainer = false;\n            break findParent;\n          case HostRoot:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n          case HostPortal:\n            currentParent = parentStateNode.containerInfo;\n            currentParentIsContainer = true;\n            break findParent;\n          case FundamentalComponent:\n            if (enableFundamentalAPI) {\n              currentParent = parentStateNode.instance;\n              currentParentIsContainer = false;\n            }\n        }\n        parent = parent.return;\n      }\n      currentParentIsValid = true;\n    }\n\n    if (node.tag === HostComponent || node.tag === HostText) {\n      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);\n      // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n      if (currentParentIsContainer) {\n        removeChildFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: Instance | TextInstance),\n        );\n      } else {\n        removeChild(\n          ((currentParent: any): Instance),\n          (node.stateNode: Instance | TextInstance),\n        );\n      }\n      // Don't visit children because we already visited them.\n    } else if (enableFundamentalAPI && node.tag === FundamentalComponent) {\n      const fundamentalNode = node.stateNode.instance;\n      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel);\n      // After all the children have unmounted, it is now safe to remove the\n      // node from the tree.\n      if (currentParentIsContainer) {\n        removeChildFromContainer(\n          ((currentParent: any): Container),\n          (fundamentalNode: Instance),\n        );\n      } else {\n        removeChild(\n          ((currentParent: any): Instance),\n          (fundamentalNode: Instance),\n        );\n      }\n    } else if (\n      enableSuspenseServerRenderer &&\n      node.tag === DehydratedFragment\n    ) {\n      if (enableSuspenseCallback) {\n        const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n        if (hydrationCallbacks !== null) {\n          const onDeleted = hydrationCallbacks.onDeleted;\n          if (onDeleted) {\n            onDeleted((node.stateNode: SuspenseInstance));\n          }\n        }\n      }\n\n      // Delete the dehydrated suspense boundary and all of its content.\n      if (currentParentIsContainer) {\n        clearSuspenseBoundaryFromContainer(\n          ((currentParent: any): Container),\n          (node.stateNode: SuspenseInstance),\n        );\n      } else {\n        clearSuspenseBoundary(\n          ((currentParent: any): Instance),\n          (node.stateNode: SuspenseInstance),\n        );\n      }\n    } else if (node.tag === HostPortal) {\n      if (node.child !== null) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        currentParentIsContainer = true;\n        // Visit children because portals might contain host components.\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    } else {\n      commitUnmount(finishedRoot, node, renderPriorityLevel);\n      // Visit children because we may find more host components below.\n      if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n    }\n    if (node === current) {\n      return;\n    }\n    while (node.sibling === null) {\n      if (node.return === null || node.return === current) {\n        return;\n      }\n      node = node.return;\n      if (node.tag === HostPortal) {\n        // When we go out of the portal, we need to restore the parent.\n        // Since we don't keep a stack of them, we will search for it.\n        currentParentIsValid = false;\n      }\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n}\n\nfunction commitDeletion(\n  finishedRoot: FiberRoot,\n  current: Fiber,\n  renderPriorityLevel: ReactPriorityLevel,\n): void {\n  if (supportsMutation) {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(finishedRoot, current, renderPriorityLevel);\n  } else {\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    commitNestedUnmounts(finishedRoot, current, renderPriorityLevel);\n  }\n  const alternate = current.alternate;\n  detachFiberMutation(current);\n  if (alternate !== null) {\n    detachFiberMutation(alternate);\n  }\n}\n\nfunction commitWork(current: Fiber | null, finishedWork: Fiber): void {\n  if (!supportsMutation) {\n    switch (finishedWork.tag) {\n      case FunctionComponent:\n      case ForwardRef:\n      case MemoComponent:\n      case SimpleMemoComponent:\n      case Block: {\n        // Layout effects are destroyed during the mutation phase so that all\n        // destroy functions for all fibers are called before any create functions.\n        // This prevents sibling component effects from interfering with each other,\n        // e.g. a destroy function in one component should never override a ref set\n        // by a create function in another component during the same commit.\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          finishedWork.mode & ProfileMode\n        ) {\n          try {\n            startLayoutEffectTimer();\n            commitHookEffectListUnmount(\n              HookLayout | HookHasEffect,\n              finishedWork,\n            );\n          } finally {\n            recordLayoutEffectDuration(finishedWork);\n          }\n        } else {\n          commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n        }\n        return;\n      }\n      case Profiler: {\n        return;\n      }\n      case SuspenseComponent: {\n        commitSuspenseComponent(finishedWork);\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case SuspenseListComponent: {\n        attachSuspenseRetryListeners(finishedWork);\n        return;\n      }\n      case HostRoot: {\n        if (supportsHydration) {\n          const root: FiberRoot = finishedWork.stateNode;\n          if (root.hydrate) {\n            // We've just hydrated. No need to hydrate again.\n            root.hydrate = false;\n            commitHydratedContainer(root.containerInfo);\n          }\n        }\n        break;\n      }\n      case OffscreenComponent:\n      case LegacyHiddenComponent: {\n        return;\n      }\n    }\n\n    commitContainer(finishedWork);\n    return;\n  }\n\n  switch (finishedWork.tag) {\n    case FunctionComponent:\n    case ForwardRef:\n    case MemoComponent:\n    case SimpleMemoComponent:\n    case Block: {\n      // Layout effects are destroyed during the mutation phase so that all\n      // destroy functions for all fibers are called before any create functions.\n      // This prevents sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        finishedWork.mode & ProfileMode\n      ) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n        } finally {\n          recordLayoutEffectDuration(finishedWork);\n        }\n      } else {\n        commitHookEffectListUnmount(HookLayout | HookHasEffect, finishedWork);\n      }\n      return;\n    }\n    case ClassComponent: {\n      return;\n    }\n    case HostComponent: {\n      const instance: Instance = finishedWork.stateNode;\n      if (instance != null) {\n        // Commit the work prepared earlier.\n        const newProps = finishedWork.memoizedProps;\n        // For hydration we reuse the update path but we treat the oldProps\n        // as the newProps. The updatePayload will contain the real change in\n        // this case.\n        const oldProps = current !== null ? current.memoizedProps : newProps;\n        const type = finishedWork.type;\n        // TODO: Type the updateQueue to be specific to host components.\n        const updatePayload: null | UpdatePayload = (finishedWork.updateQueue: any);\n        finishedWork.updateQueue = null;\n        if (updatePayload !== null) {\n          commitUpdate(\n            instance,\n            updatePayload,\n            type,\n            oldProps,\n            newProps,\n            finishedWork,\n          );\n        }\n      }\n      return;\n    }\n    case HostText: {\n      invariant(\n        finishedWork.stateNode !== null,\n        'This should have a text node initialized. This error is likely ' +\n          'caused by a bug in React. Please file an issue.',\n      );\n      const textInstance: TextInstance = finishedWork.stateNode;\n      const newText: string = finishedWork.memoizedProps;\n      // For hydration we reuse the update path but we treat the oldProps\n      // as the newProps. The updatePayload will contain the real change in\n      // this case.\n      const oldText: string =\n        current !== null ? current.memoizedProps : newText;\n      commitTextUpdate(textInstance, oldText, newText);\n      return;\n    }\n    case HostRoot: {\n      if (supportsHydration) {\n        const root: FiberRoot = finishedWork.stateNode;\n        if (root.hydrate) {\n          // We've just hydrated. No need to hydrate again.\n          root.hydrate = false;\n          commitHydratedContainer(root.containerInfo);\n        }\n      }\n      return;\n    }\n    case Profiler: {\n      return;\n    }\n    case SuspenseComponent: {\n      commitSuspenseComponent(finishedWork);\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case SuspenseListComponent: {\n      attachSuspenseRetryListeners(finishedWork);\n      return;\n    }\n    case IncompleteClassComponent: {\n      return;\n    }\n    case FundamentalComponent: {\n      if (enableFundamentalAPI) {\n        const fundamentalInstance = finishedWork.stateNode;\n        updateFundamentalComponent(fundamentalInstance);\n        return;\n      }\n      break;\n    }\n    case ScopeComponent: {\n      if (enableScopeAPI) {\n        const scopeInstance = finishedWork.stateNode;\n        prepareScopeUpdate(scopeInstance, finishedWork);\n        return;\n      }\n      break;\n    }\n    case OffscreenComponent:\n    case LegacyHiddenComponent: {\n      const newState: OffscreenState | null = finishedWork.memoizedState;\n      const isHidden = newState !== null;\n      hideOrUnhideAllChildren(finishedWork, isHidden);\n      return;\n    }\n  }\n  invariant(\n    false,\n    'This unit of work tag should not have side-effects. This error is ' +\n      'likely caused by a bug in React. Please file an issue.',\n  );\n}\n\nfunction commitSuspenseComponent(finishedWork: Fiber) {\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n\n  if (newState !== null) {\n    markCommitTimeOfFallback();\n\n    if (supportsMutation) {\n      // Hide the Offscreen component that contains the primary children. TODO:\n      // Ideally, this effect would have been scheduled on the Offscreen fiber\n      // itself. That's how unhiding works: the Offscreen component schedules an\n      // effect on itself. However, in this case, the component didn't complete,\n      // so the fiber was never added to the effect list in the normal path. We\n      // could have appended it to the effect list in the Suspense component's\n      // second pass, but doing it this way is less complicated. This would be\n      // simpler if we got rid of the effect list and traversed the tree, like\n      // we're planning to do.\n      const primaryChildParent: Fiber = (finishedWork.child: any);\n      hideOrUnhideAllChildren(primaryChildParent, true);\n    }\n  }\n\n  if (enableSuspenseCallback && newState !== null) {\n    const suspenseCallback = finishedWork.memoizedProps.suspenseCallback;\n    if (typeof suspenseCallback === 'function') {\n      const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n      if (wakeables !== null) {\n        suspenseCallback(new Set(wakeables));\n      }\n    } else if (__DEV__) {\n      if (suspenseCallback !== undefined) {\n        console.error('Unexpected type for suspenseCallback.');\n      }\n    }\n  }\n}\n\nfunction commitSuspenseHydrationCallbacks(\n  finishedRoot: FiberRoot,\n  finishedWork: Fiber,\n) {\n  if (!supportsHydration) {\n    return;\n  }\n  const newState: SuspenseState | null = finishedWork.memoizedState;\n  if (newState === null) {\n    const current = finishedWork.alternate;\n    if (current !== null) {\n      const prevState: SuspenseState | null = current.memoizedState;\n      if (prevState !== null) {\n        const suspenseInstance = prevState.dehydrated;\n        if (suspenseInstance !== null) {\n          commitHydratedSuspenseInstance(suspenseInstance);\n          if (enableSuspenseCallback) {\n            const hydrationCallbacks = finishedRoot.hydrationCallbacks;\n            if (hydrationCallbacks !== null) {\n              const onHydrated = hydrationCallbacks.onHydrated;\n              if (onHydrated) {\n                onHydrated(suspenseInstance);\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction attachSuspenseRetryListeners(finishedWork: Fiber) {\n  // If this boundary just timed out, then it will have a set of wakeables.\n  // For each wakeable, attach a listener so that when it resolves, React\n  // attempts to re-render the boundary in the primary (pre-timeout) state.\n  const wakeables: Set<Wakeable> | null = (finishedWork.updateQueue: any);\n  if (wakeables !== null) {\n    finishedWork.updateQueue = null;\n    let retryCache = finishedWork.stateNode;\n    if (retryCache === null) {\n      retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n    }\n    wakeables.forEach(wakeable => {\n      // Memoize using the boundary fiber to prevent redundant listeners.\n      let retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n      if (!retryCache.has(wakeable)) {\n        if (enableSchedulerTracing) {\n          if (wakeable.__reactDoNotTraceInteractions !== true) {\n            retry = Schedule_tracing_wrap(retry);\n          }\n        }\n        retryCache.add(wakeable);\n        wakeable.then(retry, retry);\n      }\n    });\n  }\n}\n\n// This function detects when a Suspense boundary goes from visible to hidden.\n// It returns false if the boundary is already hidden.\n// TODO: Use an effect tag.\nexport function isSuspenseBoundaryBeingHidden(\n  current: Fiber | null,\n  finishedWork: Fiber,\n): boolean {\n  if (current !== null) {\n    const oldState: SuspenseState | null = current.memoizedState;\n    if (oldState === null || oldState.dehydrated !== null) {\n      const newState: SuspenseState | null = finishedWork.memoizedState;\n      return newState !== null && newState.dehydrated === null;\n    }\n  }\n  return false;\n}\n\nfunction commitResetTextContent(current: Fiber) {\n  if (!supportsMutation) {\n    return;\n  }\n  resetTextContent(current.stateNode);\n}\n\nexport {\n  commitBeforeMutationLifeCycles,\n  commitResetTextContent,\n  commitPlacement,\n  commitDeletion,\n  commitWork,\n  commitLifeCycles,\n  commitAttachRef,\n  commitDetachRef,\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nlet didWarnAboutMessageChannel = false;\nlet enqueueTaskImpl = null;\n\nexport default function enqueueTask(task: () => void) {\n  if (enqueueTaskImpl === null) {\n    try {\n      // read require off the module object to get around the bundlers.\n      // we don't want them to detect a require and bundle a Node polyfill.\n      const requireString = ('require' + Math.random()).slice(0, 7);\n      const nodeRequire = module && module[requireString];\n      // assuming we're in node, let's try to get node's\n      // version of setImmediate, bypassing fake timers if any.\n      enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;\n    } catch (_err) {\n      // we're in a browser\n      // we can't use regular timers because they may still be faked\n      // so we try MessageChannel+postMessage instead\n      enqueueTaskImpl = function(callback: () => void) {\n        if (__DEV__) {\n          if (didWarnAboutMessageChannel === false) {\n            didWarnAboutMessageChannel = true;\n            if (typeof MessageChannel === 'undefined') {\n              console.error(\n                'This browser does not have a MessageChannel implementation, ' +\n                  'so enqueuing tasks via await act(async () => ...) will fail. ' +\n                  'Please file an issue at https://github.com/facebook/react/issues ' +\n                  'if you encounter this warning.',\n              );\n            }\n          }\n        }\n        const channel = new MessageChannel();\n        channel.port1.onmessage = callback;\n        channel.port2.postMessage(undefined);\n      };\n    }\n  }\n  return enqueueTaskImpl(task);\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Thenable, Wakeable} from 'shared/ReactTypes';\nimport type {Fiber, FiberRoot} from './ReactInternalTypes';\nimport type {Lanes, Lane} from './ReactFiberLane';\nimport type {ReactPriorityLevel} from './ReactInternalTypes';\nimport type {Interaction} from 'scheduler/src/Tracing';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\nimport type {Effect as HookEffect} from './ReactFiberHooks.old';\nimport type {StackCursor} from './ReactFiberStack.old';\n\nimport {\n  warnAboutDeprecatedLifecycles,\n  enableSuspenseServerRenderer,\n  replayFailedUnitOfWorkWithInvokeGuardedCallback,\n  enableProfilerTimer,\n  enableProfilerCommitHooks,\n  enableSchedulerTracing,\n  warnAboutUnmockedScheduler,\n  deferRenderPhaseUpdateToNextBatch,\n  decoupleUpdatePriorityFromScheduler,\n  enableDebugTracing,\n  enableSchedulingProfiler,\n  enableScopeAPI,\n} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport invariant from 'shared/invariant';\n\nimport {\n  scheduleCallback,\n  cancelCallback,\n  getCurrentPriorityLevel,\n  runWithPriority,\n  shouldYield,\n  requestPaint,\n  now,\n  NoPriority as NoSchedulerPriority,\n  ImmediatePriority as ImmediateSchedulerPriority,\n  UserBlockingPriority as UserBlockingSchedulerPriority,\n  NormalPriority as NormalSchedulerPriority,\n  flushSyncCallbackQueue,\n  scheduleSyncCallback,\n} from './SchedulerWithReactIntegration.old';\nimport {\n  logCommitStarted,\n  logCommitStopped,\n  logLayoutEffectsStarted,\n  logLayoutEffectsStopped,\n  logPassiveEffectsStarted,\n  logPassiveEffectsStopped,\n  logRenderStarted,\n  logRenderStopped,\n} from './DebugTracing';\nimport {\n  markCommitStarted,\n  markCommitStopped,\n  markLayoutEffectsStarted,\n  markLayoutEffectsStopped,\n  markPassiveEffectsStarted,\n  markPassiveEffectsStopped,\n  markRenderStarted,\n  markRenderYielded,\n  markRenderStopped,\n} from './SchedulingProfiler';\n\n// The scheduler is imported here *only* to detect whether it's been mocked\nimport * as Scheduler from 'scheduler';\n\nimport {__interactionsRef, __subscriberRef} from 'scheduler/tracing';\n\nimport {\n  prepareForCommit,\n  resetAfterCommit,\n  scheduleTimeout,\n  cancelTimeout,\n  noTimeout,\n  warnsIfNotActing,\n  beforeActiveInstanceBlur,\n  afterActiveInstanceBlur,\n  clearContainer,\n} from './ReactFiberHostConfig';\n\nimport {\n  createWorkInProgress,\n  assignFiberPropertiesInDEV,\n} from './ReactFiber.old';\nimport {\n  NoMode,\n  StrictMode,\n  ProfileMode,\n  BlockingMode,\n  ConcurrentMode,\n} from './ReactTypeOfMode';\nimport {\n  HostRoot,\n  IndeterminateComponent,\n  ClassComponent,\n  SuspenseComponent,\n  SuspenseListComponent,\n  FunctionComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n  ScopeComponent,\n} from './ReactWorkTags';\nimport {LegacyRoot} from './ReactRootTags';\nimport {\n  NoFlags,\n  PerformedWork,\n  Placement,\n  Update,\n  PlacementAndUpdate,\n  Deletion,\n  Ref,\n  ContentReset,\n  Snapshot,\n  Callback,\n  Passive,\n  PassiveUnmountPendingDev,\n  Incomplete,\n  HostEffectMask,\n  Hydrating,\n  HydratingAndUpdate,\n} from './ReactFiberFlags';\nimport {\n  NoLanePriority,\n  SyncLanePriority,\n  SyncBatchedLanePriority,\n  InputDiscreteLanePriority,\n  DefaultLanePriority,\n  NoLanes,\n  NoLane,\n  SyncLane,\n  SyncBatchedLane,\n  OffscreenLane,\n  NoTimestamp,\n  findUpdateLane,\n  findTransitionLane,\n  findRetryLane,\n  includesSomeLane,\n  isSubsetOfLanes,\n  mergeLanes,\n  removeLanes,\n  pickArbitraryLane,\n  hasDiscreteLanes,\n  includesNonIdleWork,\n  includesOnlyRetries,\n  includesOnlyTransitions,\n  getNextLanes,\n  returnNextLanesPriority,\n  setCurrentUpdateLanePriority,\n  getCurrentUpdateLanePriority,\n  markStarvedLanesAsExpired,\n  getLanesToRetrySynchronouslyOnError,\n  getMostRecentEventTime,\n  markRootUpdated,\n  markRootSuspended as markRootSuspended_dontCallThisOneDirectly,\n  markRootPinged,\n  markRootExpired,\n  markDiscreteUpdatesExpired,\n  markRootFinished,\n  schedulerPriorityToLanePriority,\n  lanePriorityToSchedulerPriority,\n} from './ReactFiberLane';\nimport {requestCurrentTransition, NoTransition} from './ReactFiberTransition';\nimport {beginWork as originalBeginWork} from './ReactFiberBeginWork.old';\nimport {completeWork} from './ReactFiberCompleteWork.old';\nimport {unwindWork, unwindInterruptedWork} from './ReactFiberUnwindWork.old';\nimport {\n  throwException,\n  createRootErrorUpdate,\n  createClassErrorUpdate,\n} from './ReactFiberThrow.old';\nimport {\n  commitBeforeMutationLifeCycles as commitBeforeMutationEffectOnFiber,\n  commitLifeCycles as commitLayoutEffectOnFiber,\n  commitPlacement,\n  commitWork,\n  commitDeletion,\n  commitDetachRef,\n  commitAttachRef,\n  commitPassiveEffectDurations,\n  commitResetTextContent,\n  isSuspenseBoundaryBeingHidden,\n} from './ReactFiberCommitWork.old';\nimport {enqueueUpdate} from './ReactUpdateQueue.old';\nimport {resetContextDependencies} from './ReactFiberNewContext.old';\nimport {\n  resetHooksAfterThrow,\n  ContextOnlyDispatcher,\n  getIsUpdatingOpaqueValueInRenderPhaseInDEV,\n} from './ReactFiberHooks.old';\nimport {createCapturedValue} from './ReactCapturedValue';\nimport {\n  push as pushToStack,\n  pop as popFromStack,\n  createCursor,\n} from './ReactFiberStack.old';\n\nimport {\n  recordCommitTime,\n  recordPassiveEffectDuration,\n  startPassiveEffectTimer,\n  startProfilerTimer,\n  stopProfilerTimerIfRunningAndRecordDelta,\n} from './ReactProfilerTimer.old';\n\n// DEV stuff\nimport getComponentName from 'shared/getComponentName';\nimport ReactStrictModeWarnings from './ReactStrictModeWarnings.old';\nimport {\n  isRendering as ReactCurrentDebugFiberIsRenderingInDEV,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {\n  invokeGuardedCallback,\n  hasCaughtError,\n  clearCaughtError,\n} from 'shared/ReactErrorUtils';\nimport {onCommitRoot as onCommitRootDevTools} from './ReactFiberDevToolsHook.old';\nimport {onCommitRoot as onCommitRootTestSelector} from './ReactTestSelectors';\n\n// Used by `act`\nimport enqueueTask from 'shared/enqueueTask';\nimport {doesFiberContain} from './ReactFiberTreeReflection';\n\nconst ceil = Math.ceil;\n\nconst {\n  ReactCurrentDispatcher,\n  ReactCurrentOwner,\n  IsSomeRendererActing,\n} = ReactSharedInternals;\n\ntype ExecutionContext = number;\n\nexport const NoContext = /*             */ 0b0000000;\nconst BatchedContext = /*               */ 0b0000001;\nconst EventContext = /*                 */ 0b0000010;\nconst DiscreteEventContext = /*         */ 0b0000100;\nconst LegacyUnbatchedContext = /*       */ 0b0001000;\nconst RenderContext = /*                */ 0b0010000;\nconst CommitContext = /*                */ 0b0100000;\nexport const RetryAfterError = /*       */ 0b1000000;\n\ntype RootExitStatus = 0 | 1 | 2 | 3 | 4 | 5;\nconst RootIncomplete = 0;\nconst RootFatalErrored = 1;\nconst RootErrored = 2;\nconst RootSuspended = 3;\nconst RootSuspendedWithDelay = 4;\nconst RootCompleted = 5;\n\n// Describes where we are in the React execution stack\nlet executionContext: ExecutionContext = NoContext;\n// The root we're working on\nlet workInProgressRoot: FiberRoot | null = null;\n// The fiber we're working on\nlet workInProgress: Fiber | null = null;\n// The lanes we're rendering\nlet workInProgressRootRenderLanes: Lanes = NoLanes;\n\n// Stack that allows components to change the render lanes for its subtree\n// This is a superset of the lanes we started working on at the root. The only\n// case where it's different from `workInProgressRootRenderLanes` is when we\n// enter a subtree that is hidden and needs to be unhidden: Suspense and\n// Offscreen component.\n//\n// Most things in the work loop should deal with workInProgressRootRenderLanes.\n// Most things in begin/complete phases should deal with subtreeRenderLanes.\nlet subtreeRenderLanes: Lanes = NoLanes;\nconst subtreeRenderLanesCursor: StackCursor<Lanes> = createCursor(NoLanes);\n\n// Whether to root completed, errored, suspended, etc.\nlet workInProgressRootExitStatus: RootExitStatus = RootIncomplete;\n// A fatal error, if one is thrown\nlet workInProgressRootFatalError: mixed = null;\n// \"Included\" lanes refer to lanes that were worked on during this render. It's\n// slightly different than `renderLanes` because `renderLanes` can change as you\n// enter and exit an Offscreen tree. This value is the combination of all render\n// lanes for the entire render phase.\nlet workInProgressRootIncludedLanes: Lanes = NoLanes;\n// The work left over by components that were visited during this render. Only\n// includes unprocessed updates, not work in bailed out children.\nlet workInProgressRootSkippedLanes: Lanes = NoLanes;\n// Lanes that were updated (in an interleaved event) during this render.\nlet workInProgressRootUpdatedLanes: Lanes = NoLanes;\n// Lanes that were pinged (in an interleaved event) during this render.\nlet workInProgressRootPingedLanes: Lanes = NoLanes;\n\nlet mostRecentlyUpdatedRoot: FiberRoot | null = null;\n\n// The most recent time we committed a fallback. This lets us ensure a train\n// model where we don't commit new loading states in too quick succession.\nlet globalMostRecentFallbackTime: number = 0;\nconst FALLBACK_THROTTLE_MS: number = 500;\n\n// The absolute time for when we should start giving up on rendering\n// more and prefer CPU suspense heuristics instead.\nlet workInProgressRootRenderTargetTime: number = Infinity;\n// How long a render is supposed to take before we start following CPU\n// suspense heuristics and opt out of rendering more content.\nconst RENDER_TIMEOUT_MS = 500;\n\nfunction resetRenderTimer() {\n  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;\n}\n\nexport function getRenderTargetTime(): number {\n  return workInProgressRootRenderTargetTime;\n}\n\nlet nextEffect: Fiber | null = null;\nlet hasUncaughtError = false;\nlet firstUncaughtError = null;\nlet legacyErrorBoundariesThatAlreadyFailed: Set<mixed> | null = null;\n\nlet rootDoesHavePassiveEffects: boolean = false;\nlet rootWithPendingPassiveEffects: FiberRoot | null = null;\nlet pendingPassiveEffectsRenderPriority: ReactPriorityLevel = NoSchedulerPriority;\nlet pendingPassiveEffectsLanes: Lanes = NoLanes;\nlet pendingPassiveHookEffectsMount: Array<HookEffect | Fiber> = [];\nlet pendingPassiveHookEffectsUnmount: Array<HookEffect | Fiber> = [];\nlet pendingPassiveProfilerEffects: Array<Fiber> = [];\n\nlet rootsWithPendingDiscreteUpdates: Set<FiberRoot> | null = null;\n\n// Use these to prevent an infinite loop of nested updates\nconst NESTED_UPDATE_LIMIT = 50;\nlet nestedUpdateCount: number = 0;\nlet rootWithNestedUpdates: FiberRoot | null = null;\n\nconst NESTED_PASSIVE_UPDATE_LIMIT = 50;\nlet nestedPassiveUpdateCount: number = 0;\n\n// Marks the need to reschedule pending interactions at these lanes\n// during the commit phase. This enables them to be traced across components\n// that spawn new work during render. E.g. hidden boundaries, suspended SSR\n// hydration or SuspenseList.\n// TODO: Can use a bitmask instead of an array\nlet spawnedWorkDuringRender: null | Array<Lane | Lanes> = null;\n\n// If two updates are scheduled within the same event, we should treat their\n// event times as simultaneous, even if the actual clock time has advanced\n// between the first and second call.\nlet currentEventTime: number = NoTimestamp;\nlet currentEventWipLanes: Lanes = NoLanes;\nlet currentEventPendingLanes: Lanes = NoLanes;\n\n// Dev only flag that tracks if passive effects are currently being flushed.\n// We warn about state updates for unmounted components differently in this case.\nlet isFlushingPassiveEffects = false;\n\nlet focusedInstanceHandle: null | Fiber = null;\nlet shouldFireAfterActiveInstanceBlur: boolean = false;\n\nexport function getWorkInProgressRoot(): FiberRoot | null {\n  return workInProgressRoot;\n}\n\nexport function requestEventTime() {\n  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n    // We're inside React, so it's fine to read the actual time.\n    return now();\n  }\n  // We're not inside React, so we may be in the middle of a browser event.\n  if (currentEventTime !== NoTimestamp) {\n    // Use the same start time for all updates until we enter React again.\n    return currentEventTime;\n  }\n  // This is the first update since React yielded. Compute a new start time.\n  currentEventTime = now();\n  return currentEventTime;\n}\n\nexport function getCurrentTime() {\n  return now();\n}\n\nexport function requestUpdateLane(fiber: Fiber): Lane {\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & BlockingMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if ((mode & ConcurrentMode) === NoMode) {\n    return getCurrentPriorityLevel() === ImmediateSchedulerPriority\n      ? (SyncLane: Lane)\n      : (SyncBatchedLane: Lane);\n  } else if (\n    !deferRenderPhaseUpdateToNextBatch &&\n    (executionContext & RenderContext) !== NoContext &&\n    workInProgressRootRenderLanes !== NoLanes\n  ) {\n    // This is a render phase update. These are not officially supported. The\n    // old behavior is to give this the same \"thread\" (expiration time) as\n    // whatever is currently rendering. So if you call `setState` on a component\n    // that happens later in the same render, it will flush. Ideally, we want to\n    // remove the special case and treat them as if they came from an\n    // interleaved event. Regardless, this pattern is not officially supported.\n    // This behavior is only a fallback. The flag only exists until we can roll\n    // out the setState warning, since existing code might accidentally rely on\n    // the current behavior.\n    return pickArbitraryLane(workInProgressRootRenderLanes);\n  }\n\n  // The algorithm for assigning an update to a lane should be stable for all\n  // updates at the same priority within the same event. To do this, the inputs\n  // to the algorithm must be the same. For example, we use the `renderLanes`\n  // to avoid choosing a lane that is already in the middle of rendering.\n  //\n  // However, the \"included\" lanes could be mutated in between updates in the\n  // same event, like if you perform an update inside `flushSync`. Or any other\n  // code path that might call `prepareFreshStack`.\n  //\n  // The trick we use is to cache the first of each of these inputs within an\n  // event. Then reset the cached values once we can be sure the event is over.\n  // Our heuristic for that is whenever we enter a concurrent work loop.\n  //\n  // We'll do the same for `currentEventPendingLanes` below.\n  if (currentEventWipLanes === NoLanes) {\n    currentEventWipLanes = workInProgressRootIncludedLanes;\n  }\n\n  const isTransition = requestCurrentTransition() !== NoTransition;\n  if (isTransition) {\n    if (currentEventPendingLanes !== NoLanes) {\n      currentEventPendingLanes =\n        mostRecentlyUpdatedRoot !== null\n          ? mostRecentlyUpdatedRoot.pendingLanes\n          : NoLanes;\n    }\n    return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);\n  }\n\n  // TODO: Remove this dependency on the Scheduler priority.\n  // To do that, we're replacing it with an update lane priority.\n  const schedulerPriority = getCurrentPriorityLevel();\n\n  // The old behavior was using the priority level of the Scheduler.\n  // This couples React to the Scheduler internals, so we're replacing it\n  // with the currentUpdateLanePriority above. As an example of how this\n  // could be problematic, if we're not inside `Scheduler.runWithPriority`,\n  // then we'll get the priority of the current running Scheduler task,\n  // which is probably not what we want.\n  let lane;\n  if (\n    // TODO: Temporary. We're removing the concept of discrete updates.\n    (executionContext & DiscreteEventContext) !== NoContext &&\n    schedulerPriority === UserBlockingSchedulerPriority\n  ) {\n    lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);\n  } else {\n    const schedulerLanePriority = schedulerPriorityToLanePriority(\n      schedulerPriority,\n    );\n\n    if (decoupleUpdatePriorityFromScheduler) {\n      // In the new strategy, we will track the current update lane priority\n      // inside React and use that priority to select a lane for this update.\n      // For now, we're just logging when they're different so we can assess.\n      const currentUpdateLanePriority = getCurrentUpdateLanePriority();\n\n      if (\n        schedulerLanePriority !== currentUpdateLanePriority &&\n        currentUpdateLanePriority !== NoLanePriority\n      ) {\n        if (__DEV__) {\n          console.error(\n            'Expected current scheduler lane priority %s to match current update lane priority %s',\n            schedulerLanePriority,\n            currentUpdateLanePriority,\n          );\n        }\n      }\n    }\n\n    lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);\n  }\n\n  return lane;\n}\n\nfunction requestRetryLane(fiber: Fiber) {\n  // This is a fork of `requestUpdateLane` designed specifically for Suspense\n  // \"retries\" — a special update that attempts to flip a Suspense boundary\n  // from its placeholder state to its primary/resolved state.\n\n  // Special cases\n  const mode = fiber.mode;\n  if ((mode & BlockingMode) === NoMode) {\n    return (SyncLane: Lane);\n  } else if ((mode & ConcurrentMode) === NoMode) {\n    return getCurrentPriorityLevel() === ImmediateSchedulerPriority\n      ? (SyncLane: Lane)\n      : (SyncBatchedLane: Lane);\n  }\n\n  // See `requestUpdateLane` for explanation of `currentEventWipLanes`\n  if (currentEventWipLanes === NoLanes) {\n    currentEventWipLanes = workInProgressRootIncludedLanes;\n  }\n  return findRetryLane(currentEventWipLanes);\n}\n\nexport function scheduleUpdateOnFiber(\n  fiber: Fiber,\n  lane: Lane,\n  eventTime: number,\n) {\n  checkForNestedUpdates();\n  warnAboutRenderPhaseUpdatesInDEV(fiber);\n\n  const root = markUpdateLaneFromFiberToRoot(fiber, lane);\n  if (root === null) {\n    warnAboutUpdateOnUnmountedFiberInDEV(fiber);\n    return null;\n  }\n\n  // Mark that the root has a pending update.\n  markRootUpdated(root, lane, eventTime);\n\n  if (root === workInProgressRoot) {\n    // Received an update to a tree that's in the middle of rendering. Mark\n    // that there was an interleaved update work on this root. Unless the\n    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render\n    // phase update. In that case, we don't treat render phase updates as if\n    // they were interleaved, for backwards compat reasons.\n    if (\n      deferRenderPhaseUpdateToNextBatch ||\n      (executionContext & RenderContext) === NoContext\n    ) {\n      workInProgressRootUpdatedLanes = mergeLanes(\n        workInProgressRootUpdatedLanes,\n        lane,\n      );\n    }\n    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n      // The root already suspended with a delay, which means this render\n      // definitely won't finish. Since we have a new update, let's mark it as\n      // suspended now, right before marking the incoming update. This has the\n      // effect of interrupting the current render and switching to the update.\n      // TODO: Make sure this doesn't override pings that happen while we've\n      // already started rendering.\n      markRootSuspended(root, workInProgressRootRenderLanes);\n    }\n  }\n\n  // TODO: requestUpdateLanePriority also reads the priority. Pass the\n  // priority as an argument to that function and this one.\n  const priorityLevel = getCurrentPriorityLevel();\n\n  if (lane === SyncLane) {\n    if (\n      // Check if we're inside unbatchedUpdates\n      (executionContext & LegacyUnbatchedContext) !== NoContext &&\n      // Check if we're not already rendering\n      (executionContext & (RenderContext | CommitContext)) === NoContext\n    ) {\n      // Register pending interactions on the root to avoid losing traced interaction data.\n      schedulePendingInteractions(root, lane);\n\n      // This is a legacy edge case. The initial mount of a ReactDOM.render-ed\n      // root inside of batchedUpdates should be synchronous, but layout updates\n      // should be deferred until the end of the batch.\n      performSyncWorkOnRoot(root);\n    } else {\n      ensureRootIsScheduled(root, eventTime);\n      schedulePendingInteractions(root, lane);\n      if (executionContext === NoContext) {\n        // Flush the synchronous work now, unless we're already working or inside\n        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n        // scheduleCallbackForFiber to preserve the ability to schedule a callback\n        // without immediately flushing it. We only do this for user-initiated\n        // updates, to preserve historical behavior of legacy mode.\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    // Schedule a discrete update but only if it's not Sync.\n    if (\n      (executionContext & DiscreteEventContext) !== NoContext &&\n      // Only updates at user-blocking priority or greater are considered\n      // discrete, even inside a discrete event.\n      (priorityLevel === UserBlockingSchedulerPriority ||\n        priorityLevel === ImmediateSchedulerPriority)\n    ) {\n      // This is the result of a discrete event. Track the lowest priority\n      // discrete update per root so we can flush them early, if needed.\n      if (rootsWithPendingDiscreteUpdates === null) {\n        rootsWithPendingDiscreteUpdates = new Set([root]);\n      } else {\n        rootsWithPendingDiscreteUpdates.add(root);\n      }\n    }\n    // Schedule other updates after in case the callback is sync.\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, lane);\n  }\n\n  // We use this when assigning a lane for a transition inside\n  // `requestUpdateLane`. We assume it's the same as the root being updated,\n  // since in the common case of a single root app it probably is. If it's not\n  // the same root, then it's not a huge deal, we just might batch more stuff\n  // together more than necessary.\n  mostRecentlyUpdatedRoot = root;\n}\n\n// This is split into a separate function so we can mark a fiber with pending\n// work without treating it as a typical update that originates from an event;\n// e.g. retrying a Suspense boundary isn't an update, but it does schedule work\n// on a fiber.\nfunction markUpdateLaneFromFiberToRoot(\n  sourceFiber: Fiber,\n  lane: Lane,\n): FiberRoot | null {\n  // Update the source fiber's lanes\n  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n  let alternate = sourceFiber.alternate;\n  if (alternate !== null) {\n    alternate.lanes = mergeLanes(alternate.lanes, lane);\n  }\n  if (__DEV__) {\n    if (\n      alternate === null &&\n      (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags\n    ) {\n      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n    }\n  }\n  // Walk the parent path to the root and update the child expiration time.\n  let node = sourceFiber;\n  let parent = sourceFiber.return;\n  while (parent !== null) {\n    parent.childLanes = mergeLanes(parent.childLanes, lane);\n    alternate = parent.alternate;\n    if (alternate !== null) {\n      alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n    } else {\n      if (__DEV__) {\n        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    node = parent;\n    parent = parent.return;\n  }\n  if (node.tag === HostRoot) {\n    const root: FiberRoot = node.stateNode;\n    return root;\n  } else {\n    return null;\n  }\n}\n\n// Use this function to schedule a task for a root. There's only one task per\n// root; if a task was already scheduled, we'll check to make sure the priority\n// of the existing task is the same as the priority of the next level that the\n// root has work on. This function is called on every update, and right before\n// exiting a task.\nfunction ensureRootIsScheduled(root: FiberRoot, currentTime: number) {\n  const existingCallbackNode = root.callbackNode;\n\n  // Check if any lanes are being starved by other work. If so, mark them as\n  // expired so we know to work on those next.\n  markStarvedLanesAsExpired(root, currentTime);\n\n  // Determine the next lanes to work on, and their priority.\n  const nextLanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  // This returns the priority level computed during the `getNextLanes` call.\n  const newCallbackPriority = returnNextLanesPriority();\n\n  if (nextLanes === NoLanes) {\n    // Special case: There's nothing to work on.\n    if (existingCallbackNode !== null) {\n      cancelCallback(existingCallbackNode);\n      root.callbackNode = null;\n      root.callbackPriority = NoLanePriority;\n    }\n    return;\n  }\n\n  // Check if there's an existing task. We may be able to reuse it.\n  if (existingCallbackNode !== null) {\n    const existingCallbackPriority = root.callbackPriority;\n    if (existingCallbackPriority === newCallbackPriority) {\n      // The priority hasn't changed. We can reuse the existing task. Exit.\n      return;\n    }\n    // The priority changed. Cancel the existing callback. We'll schedule a new\n    // one below.\n    cancelCallback(existingCallbackNode);\n  }\n\n  // Schedule a new callback.\n  let newCallbackNode;\n  if (newCallbackPriority === SyncLanePriority) {\n    // Special case: Sync React callbacks are scheduled on a special\n    // internal queue\n    newCallbackNode = scheduleSyncCallback(\n      performSyncWorkOnRoot.bind(null, root),\n    );\n  } else if (newCallbackPriority === SyncBatchedLanePriority) {\n    newCallbackNode = scheduleCallback(\n      ImmediateSchedulerPriority,\n      performSyncWorkOnRoot.bind(null, root),\n    );\n  } else {\n    const schedulerPriorityLevel = lanePriorityToSchedulerPriority(\n      newCallbackPriority,\n    );\n    newCallbackNode = scheduleCallback(\n      schedulerPriorityLevel,\n      performConcurrentWorkOnRoot.bind(null, root),\n    );\n  }\n\n  root.callbackPriority = newCallbackPriority;\n  root.callbackNode = newCallbackNode;\n}\n\n// This is the entry point for every concurrent task, i.e. anything that\n// goes through Scheduler.\nfunction performConcurrentWorkOnRoot(root) {\n  // Since we know we're in a React event, we can clear the current\n  // event time. The next update will compute a new event time.\n  currentEventTime = NoTimestamp;\n  currentEventWipLanes = NoLanes;\n  currentEventPendingLanes = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  // Flush any pending passive effects before deciding which lanes to work on,\n  // in case they schedule additional work.\n  const originalCallbackNode = root.callbackNode;\n  const didFlushPassiveEffects = flushPassiveEffects();\n  if (didFlushPassiveEffects) {\n    // Something in the passive effect phase may have canceled the current task.\n    // Check if the task node for this root was changed.\n    if (root.callbackNode !== originalCallbackNode) {\n      // The current task was canceled. Exit. We don't need to call\n      // `ensureRootIsScheduled` because the check above implies either that\n      // there's a new task, or that there's no remaining work on this root.\n      return null;\n    } else {\n      // Current task was not canceled. Continue.\n    }\n  }\n\n  // Determine the next expiration time to work on, using the fields stored\n  // on the root.\n  let lanes = getNextLanes(\n    root,\n    root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes,\n  );\n  if (lanes === NoLanes) {\n    // Defensive coding. This is never expected to happen.\n    return null;\n  }\n\n  let exitStatus = renderRootConcurrent(root, lanes);\n\n  if (\n    includesSomeLane(\n      workInProgressRootIncludedLanes,\n      workInProgressRootUpdatedLanes,\n    )\n  ) {\n    // The render included lanes that were updated during the render phase.\n    // For example, when unhiding a hidden tree, we include all the lanes\n    // that were previously skipped when the tree was hidden. That set of\n    // lanes is a superset of the lanes we started rendering with.\n    //\n    // So we'll throw out the current work and restart.\n    prepareFreshStack(root, NoLanes);\n  } else if (exitStatus !== RootIncomplete) {\n    if (exitStatus === RootErrored) {\n      executionContext |= RetryAfterError;\n\n      // If an error occurred during hydration,\n      // discard server response and fall back to client side render.\n      if (root.hydrate) {\n        root.hydrate = false;\n        clearContainer(root.containerInfo);\n      }\n\n      // If something threw an error, try rendering one more time. We'll render\n      // synchronously to block concurrent data mutations, and we'll includes\n      // all pending updates are included. If it still fails after the second\n      // attempt, we'll give up and commit the resulting tree.\n      lanes = getLanesToRetrySynchronouslyOnError(root);\n      if (lanes !== NoLanes) {\n        exitStatus = renderRootSync(root, lanes);\n      }\n    }\n\n    if (exitStatus === RootFatalErrored) {\n      const fatalError = workInProgressRootFatalError;\n      prepareFreshStack(root, NoLanes);\n      markRootSuspended(root, lanes);\n      ensureRootIsScheduled(root, now());\n      throw fatalError;\n    }\n\n    // We now have a consistent tree. The next step is either to commit it,\n    // or, if something suspended, wait to commit it after a timeout.\n    const finishedWork: Fiber = (root.current.alternate: any);\n    root.finishedWork = finishedWork;\n    root.finishedLanes = lanes;\n    finishConcurrentRender(root, exitStatus, lanes);\n  }\n\n  ensureRootIsScheduled(root, now());\n  if (root.callbackNode === originalCallbackNode) {\n    // The task node scheduled for this root is the same one that's\n    // currently executed. Need to return a continuation.\n    return performConcurrentWorkOnRoot.bind(null, root);\n  }\n  return null;\n}\n\nfunction finishConcurrentRender(root, exitStatus, lanes) {\n  switch (exitStatus) {\n    case RootIncomplete:\n    case RootFatalErrored: {\n      invariant(false, 'Root did not complete. This is a bug in React.');\n    }\n    // Flow knows about invariant, so it complains if I add a break\n    // statement, but eslint doesn't know about invariant, so it complains\n    // if I do. eslint-disable-next-line no-fallthrough\n    case RootErrored: {\n      // We should have already attempted to retry this tree. If we reached\n      // this point, it errored again. Commit it.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspended: {\n      markRootSuspended(root, lanes);\n\n      // We have an acceptable loading state. We need to figure out if we\n      // should immediately commit it or wait a bit.\n\n      if (\n        includesOnlyRetries(lanes) &&\n        // do not delay if we're inside an act() scope\n        !shouldForceFlushFallbacksInDEV()\n      ) {\n        // This render only included retries, no updates. Throttle committing\n        // retries so that we don't show too many loading states too quickly.\n        const msUntilTimeout =\n          globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          const nextLanes = getNextLanes(root, NoLanes);\n          if (nextLanes !== NoLanes) {\n            // There's additional work on this root.\n            break;\n          }\n          const suspendedLanes = root.suspendedLanes;\n          if (!isSubsetOfLanes(suspendedLanes, lanes)) {\n            // We should prefer to render the fallback of at the last\n            // suspended level. Ping the last suspended level to try\n            // rendering it again.\n            // FIXME: What if the suspended lanes are Idle? Should not restart.\n            const eventTime = requestEventTime();\n            markRootPinged(root, suspendedLanes, eventTime);\n            break;\n          }\n\n          // The render is suspended, it hasn't timed out, and there's no\n          // lower priority work to do. Instead of committing the fallback\n          // immediately, wait for more data to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n      // The work expired. Commit immediately.\n      commitRoot(root);\n      break;\n    }\n    case RootSuspendedWithDelay: {\n      markRootSuspended(root, lanes);\n\n      if (includesOnlyTransitions(lanes)) {\n        // This is a transition, so we should exit without committing a\n        // placeholder and without scheduling a timeout. Delay indefinitely\n        // until we receive more data.\n        break;\n      }\n\n      if (!shouldForceFlushFallbacksInDEV()) {\n        // This is not a transition, but we did trigger an avoided state.\n        // Schedule a placeholder to display after a short delay, using the Just\n        // Noticeable Difference.\n        // TODO: Is the JND optimization worth the added complexity? If this is\n        // the only reason we track the event time, then probably not.\n        // Consider removing.\n\n        const mostRecentEventTime = getMostRecentEventTime(root, lanes);\n        const eventTimeMs = mostRecentEventTime;\n        const timeElapsedMs = now() - eventTimeMs;\n        const msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;\n\n        // Don't bother with a very short suspense time.\n        if (msUntilTimeout > 10) {\n          // Instead of committing the fallback immediately, wait for more data\n          // to arrive.\n          root.timeoutHandle = scheduleTimeout(\n            commitRoot.bind(null, root),\n            msUntilTimeout,\n          );\n          break;\n        }\n      }\n\n      // Commit the placeholder.\n      commitRoot(root);\n      break;\n    }\n    case RootCompleted: {\n      // The work completed. Ready to commit.\n      commitRoot(root);\n      break;\n    }\n    default: {\n      invariant(false, 'Unknown root exit status.');\n    }\n  }\n}\n\nfunction markRootSuspended(root, suspendedLanes) {\n  // When suspending, we should always exclude lanes that were pinged or (more\n  // rarely, since we try to avoid it) updated during the render phase.\n  // TODO: Lol maybe there's a better way to factor this besides this\n  // obnoxiously named function :)\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);\n  markRootSuspended_dontCallThisOneDirectly(root, suspendedLanes);\n}\n\n// This is the entry point for synchronous tasks that don't go\n// through Scheduler\nfunction performSyncWorkOnRoot(root) {\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  flushPassiveEffects();\n\n  let lanes;\n  let exitStatus;\n  if (\n    root === workInProgressRoot &&\n    includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)\n  ) {\n    // There's a partial tree, and at least one of its lanes has expired. Finish\n    // rendering it before rendering the rest of the expired work.\n    lanes = workInProgressRootRenderLanes;\n    exitStatus = renderRootSync(root, lanes);\n    if (\n      includesSomeLane(\n        workInProgressRootIncludedLanes,\n        workInProgressRootUpdatedLanes,\n      )\n    ) {\n      // The render included lanes that were updated during the render phase.\n      // For example, when unhiding a hidden tree, we include all the lanes\n      // that were previously skipped when the tree was hidden. That set of\n      // lanes is a superset of the lanes we started rendering with.\n      //\n      // Note that this only happens when part of the tree is rendered\n      // concurrently. If the whole tree is rendered synchronously, then there\n      // are no interleaved events.\n      lanes = getNextLanes(root, lanes);\n      exitStatus = renderRootSync(root, lanes);\n    }\n  } else {\n    lanes = getNextLanes(root, NoLanes);\n    exitStatus = renderRootSync(root, lanes);\n  }\n\n  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n    executionContext |= RetryAfterError;\n\n    // If an error occurred during hydration,\n    // discard server response and fall back to client side render.\n    if (root.hydrate) {\n      root.hydrate = false;\n      clearContainer(root.containerInfo);\n    }\n\n    // If something threw an error, try rendering one more time. We'll render\n    // synchronously to block concurrent data mutations, and we'll includes\n    // all pending updates are included. If it still fails after the second\n    // attempt, we'll give up and commit the resulting tree.\n    lanes = getLanesToRetrySynchronouslyOnError(root);\n    if (lanes !== NoLanes) {\n      exitStatus = renderRootSync(root, lanes);\n    }\n  }\n\n  if (exitStatus === RootFatalErrored) {\n    const fatalError = workInProgressRootFatalError;\n    prepareFreshStack(root, NoLanes);\n    markRootSuspended(root, lanes);\n    ensureRootIsScheduled(root, now());\n    throw fatalError;\n  }\n\n  // We now have a consistent tree. Because this is a sync render, we\n  // will commit it even if something suspended.\n  const finishedWork: Fiber = (root.current.alternate: any);\n  root.finishedWork = finishedWork;\n  root.finishedLanes = lanes;\n  commitRoot(root);\n\n  // Before exiting, make sure there's a callback scheduled for the next\n  // pending level.\n  ensureRootIsScheduled(root, now());\n\n  return null;\n}\n\nexport function flushRoot(root: FiberRoot, lanes: Lanes) {\n  markRootExpired(root, lanes);\n  ensureRootIsScheduled(root, now());\n  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n    resetRenderTimer();\n    flushSyncCallbackQueue();\n  }\n}\n\nexport function getExecutionContext(): ExecutionContext {\n  return executionContext;\n}\n\nexport function flushDiscreteUpdates() {\n  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.\n  // However, `act` uses `batchedUpdates`, so there's no way to distinguish\n  // those two cases. Need to fix this before exposing flushDiscreteUpdates\n  // as a public API.\n  if (\n    (executionContext & (BatchedContext | RenderContext | CommitContext)) !==\n    NoContext\n  ) {\n    if (__DEV__) {\n      if ((executionContext & RenderContext) !== NoContext) {\n        console.error(\n          'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' +\n            'already rendering.',\n        );\n      }\n    }\n    // We're already rendering, so we can't synchronously flush pending work.\n    // This is probably a nested event dispatch triggered by a lifecycle/effect,\n    // like `el.focus()`. Exit.\n    return;\n  }\n  flushPendingDiscreteUpdates();\n  // If the discrete updates scheduled passive effects, flush them now so that\n  // they fire before the next serial event.\n  flushPassiveEffects();\n}\n\nexport function deferredUpdates<A>(fn: () => A): A {\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(DefaultLanePriority);\n      return runWithPriority(NormalSchedulerPriority, fn);\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n    }\n  } else {\n    return runWithPriority(NormalSchedulerPriority, fn);\n  }\n}\n\nfunction flushPendingDiscreteUpdates() {\n  if (rootsWithPendingDiscreteUpdates !== null) {\n    // For each root with pending discrete updates, schedule a callback to\n    // immediately flush them.\n    const roots = rootsWithPendingDiscreteUpdates;\n    rootsWithPendingDiscreteUpdates = null;\n    roots.forEach(root => {\n      markDiscreteUpdatesExpired(root);\n      ensureRootIsScheduled(root, now());\n    });\n  }\n  // Now flush the immediate queue.\n  flushSyncCallbackQueue();\n}\n\nexport function batchedUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function batchedEventUpdates<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= EventContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function discreteUpdates<A, B, C, D, R>(\n  fn: (A, B, C) => R,\n  a: A,\n  b: B,\n  c: C,\n  d: D,\n): R {\n  const prevExecutionContext = executionContext;\n  executionContext |= DiscreteEventContext;\n\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(InputDiscreteLanePriority);\n      return runWithPriority(\n        UserBlockingSchedulerPriority,\n        fn.bind(null, a, b, c, d),\n      );\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    try {\n      return runWithPriority(\n        UserBlockingSchedulerPriority,\n        fn.bind(null, a, b, c, d),\n      );\n    } finally {\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  }\n}\n\nexport function unbatchedUpdates<A, R>(fn: (a: A) => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  executionContext &= ~BatchedContext;\n  executionContext |= LegacyUnbatchedContext;\n  try {\n    return fn(a);\n  } finally {\n    executionContext = prevExecutionContext;\n    if (executionContext === NoContext) {\n      // Flush the immediate callbacks that were scheduled during this batch\n      resetRenderTimer();\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function flushSync<A, R>(fn: A => R, a: A): R {\n  const prevExecutionContext = executionContext;\n  if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {\n    if (__DEV__) {\n      console.error(\n        'flushSync was called from inside a lifecycle method. React cannot ' +\n          'flush when React is already rendering. Consider moving this call to ' +\n          'a scheduler task or micro task.',\n      );\n    }\n    return fn(a);\n  }\n  executionContext |= BatchedContext;\n\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(SyncLanePriority);\n      if (fn) {\n        return runWithPriority(ImmediateSchedulerPriority, fn.bind(null, a));\n      } else {\n        return (undefined: $FlowFixMe);\n      }\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n      executionContext = prevExecutionContext;\n      // Flush the immediate callbacks that were scheduled during this batch.\n      // Note that this will happen even if batchedUpdates is higher up\n      // the stack.\n      flushSyncCallbackQueue();\n    }\n  } else {\n    try {\n      if (fn) {\n        return runWithPriority(ImmediateSchedulerPriority, fn.bind(null, a));\n      } else {\n        return (undefined: $FlowFixMe);\n      }\n    } finally {\n      executionContext = prevExecutionContext;\n      // Flush the immediate callbacks that were scheduled during this batch.\n      // Note that this will happen even if batchedUpdates is higher up\n      // the stack.\n      flushSyncCallbackQueue();\n    }\n  }\n}\n\nexport function flushControlled(fn: () => mixed): void {\n  const prevExecutionContext = executionContext;\n  executionContext |= BatchedContext;\n  if (decoupleUpdatePriorityFromScheduler) {\n    const previousLanePriority = getCurrentUpdateLanePriority();\n    try {\n      setCurrentUpdateLanePriority(SyncLanePriority);\n      runWithPriority(ImmediateSchedulerPriority, fn);\n    } finally {\n      setCurrentUpdateLanePriority(previousLanePriority);\n\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  } else {\n    try {\n      runWithPriority(ImmediateSchedulerPriority, fn);\n    } finally {\n      executionContext = prevExecutionContext;\n      if (executionContext === NoContext) {\n        // Flush the immediate callbacks that were scheduled during this batch\n        resetRenderTimer();\n        flushSyncCallbackQueue();\n      }\n    }\n  }\n}\n\nexport function pushRenderLanes(fiber: Fiber, lanes: Lanes) {\n  pushToStack(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);\n  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);\n  workInProgressRootIncludedLanes = mergeLanes(\n    workInProgressRootIncludedLanes,\n    lanes,\n  );\n}\n\nexport function popRenderLanes(fiber: Fiber) {\n  subtreeRenderLanes = subtreeRenderLanesCursor.current;\n  popFromStack(subtreeRenderLanesCursor, fiber);\n}\n\nfunction prepareFreshStack(root: FiberRoot, lanes: Lanes) {\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  const timeoutHandle = root.timeoutHandle;\n  if (timeoutHandle !== noTimeout) {\n    // The root previous suspended and scheduled a timeout to commit a fallback\n    // state. Now that we have additional work, cancel the timeout.\n    root.timeoutHandle = noTimeout;\n    // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above\n    cancelTimeout(timeoutHandle);\n  }\n\n  if (workInProgress !== null) {\n    let interruptedWork = workInProgress.return;\n    while (interruptedWork !== null) {\n      unwindInterruptedWork(interruptedWork);\n      interruptedWork = interruptedWork.return;\n    }\n  }\n  workInProgressRoot = root;\n  workInProgress = createWorkInProgress(root.current, null);\n  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;\n  workInProgressRootExitStatus = RootIncomplete;\n  workInProgressRootFatalError = null;\n  workInProgressRootSkippedLanes = NoLanes;\n  workInProgressRootUpdatedLanes = NoLanes;\n  workInProgressRootPingedLanes = NoLanes;\n\n  if (enableSchedulerTracing) {\n    spawnedWorkDuringRender = null;\n  }\n\n  if (__DEV__) {\n    ReactStrictModeWarnings.discardPendingWarnings();\n  }\n}\n\nfunction handleError(root, thrownValue): void {\n  do {\n    let erroredWork = workInProgress;\n    try {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      resetCurrentDebugFiberInDEV();\n      // TODO: I found and added this missing line while investigating a\n      // separate issue. Write a regression test using string refs.\n      ReactCurrentOwner.current = null;\n\n      if (erroredWork === null || erroredWork.return === null) {\n        // Expected to be working on a non-root fiber. This is a fatal error\n        // because there's no ancestor that can handle it; the root is\n        // supposed to capture all errors that weren't caught by an error\n        // boundary.\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        // Set `workInProgress` to null. This represents advancing to the next\n        // sibling, or the parent if there are no siblings. But since the root\n        // has no siblings nor a parent, we set it to null. Usually this is\n        // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n        // intentionally not calling those, we need set it here.\n        // TODO: Consider calling `unwindWork` to pop the contexts.\n        workInProgress = null;\n        return;\n      }\n\n      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n\n      throwException(\n        root,\n        erroredWork.return,\n        erroredWork,\n        thrownValue,\n        workInProgressRootRenderLanes,\n      );\n      completeUnitOfWork(erroredWork);\n    } catch (yetAnotherThrownValue) {\n      // Something in the return path also threw.\n      thrownValue = yetAnotherThrownValue;\n      if (workInProgress === erroredWork && erroredWork !== null) {\n        // If this boundary has already errored, then we had trouble processing\n        // the error. Bubble it to the next boundary.\n        erroredWork = erroredWork.return;\n        workInProgress = erroredWork;\n      } else {\n        erroredWork = workInProgress;\n      }\n      continue;\n    }\n    // Return to the normal work loop.\n    return;\n  } while (true);\n}\n\nfunction pushDispatcher() {\n  const prevDispatcher = ReactCurrentDispatcher.current;\n  ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n  if (prevDispatcher === null) {\n    // The React isomorphic package does not include a default dispatcher.\n    // Instead the first renderer will lazily attach one, in order to give\n    // nicer error messages.\n    return ContextOnlyDispatcher;\n  } else {\n    return prevDispatcher;\n  }\n}\n\nfunction popDispatcher(prevDispatcher) {\n  ReactCurrentDispatcher.current = prevDispatcher;\n}\n\nfunction pushInteractions(root) {\n  if (enableSchedulerTracing) {\n    const prevInteractions: Set<Interaction> | null = __interactionsRef.current;\n    __interactionsRef.current = root.memoizedInteractions;\n    return prevInteractions;\n  }\n  return null;\n}\n\nfunction popInteractions(prevInteractions) {\n  if (enableSchedulerTracing) {\n    __interactionsRef.current = prevInteractions;\n  }\n}\n\nexport function markCommitTimeOfFallback() {\n  globalMostRecentFallbackTime = now();\n}\n\nexport function markSkippedUpdateLanes(lane: Lane | Lanes): void {\n  workInProgressRootSkippedLanes = mergeLanes(\n    lane,\n    workInProgressRootSkippedLanes,\n  );\n}\n\nexport function renderDidSuspend(): void {\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootSuspended;\n  }\n}\n\nexport function renderDidSuspendDelayIfPossible(): void {\n  if (\n    workInProgressRootExitStatus === RootIncomplete ||\n    workInProgressRootExitStatus === RootSuspended\n  ) {\n    workInProgressRootExitStatus = RootSuspendedWithDelay;\n  }\n\n  // Check if there are updates that we skipped tree that might have unblocked\n  // this render.\n  if (\n    workInProgressRoot !== null &&\n    (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n      includesNonIdleWork(workInProgressRootUpdatedLanes))\n  ) {\n    // Mark the current render as suspended so that we switch to working on\n    // the updates that were skipped. Usually we only suspend at the end of\n    // the render phase.\n    // TODO: We should probably always mark the root as suspended immediately\n    // (inside this function), since by suspending at the end of the render\n    // phase introduces a potential mistake where we suspend lanes that were\n    // pinged or updated while we were rendering.\n    markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes);\n  }\n}\n\nexport function renderDidError() {\n  if (workInProgressRootExitStatus !== RootCompleted) {\n    workInProgressRootExitStatus = RootErrored;\n  }\n}\n\n// Called during render to determine if anything has suspended.\n// Returns false if we're not sure.\nexport function renderHasNotSuspendedYet(): boolean {\n  // If something errored or completed, we can't really be sure,\n  // so those are false.\n  return workInProgressRootExitStatus === RootIncomplete;\n}\n\nfunction renderRootSync(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    prepareFreshStack(root, lanes);\n    startWorkOnPendingInteractions(root, lanes);\n  }\n\n  const prevInteractions = pushInteractions(root);\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopSync();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n  }\n\n  executionContext = prevExecutionContext;\n  popDispatcher(prevDispatcher);\n\n  if (workInProgress !== null) {\n    // This is a sync render, so we should have finished the whole tree.\n    invariant(\n      false,\n      'Cannot commit an incomplete root. This error is likely caused by a ' +\n        'bug in React. Please file an issue.',\n    );\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStopped();\n  }\n\n  // Set this to null to indicate there's no in-progress render.\n  workInProgressRoot = null;\n  workInProgressRootRenderLanes = NoLanes;\n\n  return workInProgressRootExitStatus;\n}\n\n// The work loop is an extremely hot path. Tell Closure not to inline it.\n/** @noinline */\nfunction workLoopSync() {\n  // Already timed out, so perform work without checking if we need to yield.\n  while (workInProgress !== null) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction renderRootConcurrent(root: FiberRoot, lanes: Lanes) {\n  const prevExecutionContext = executionContext;\n  executionContext |= RenderContext;\n  const prevDispatcher = pushDispatcher();\n\n  // If the root or lanes have changed, throw out the existing stack\n  // and prepare a fresh one. Otherwise we'll continue where we left off.\n  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n    resetRenderTimer();\n    prepareFreshStack(root, lanes);\n    startWorkOnPendingInteractions(root, lanes);\n  }\n\n  const prevInteractions = pushInteractions(root);\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markRenderStarted(lanes);\n  }\n\n  do {\n    try {\n      workLoopConcurrent();\n      break;\n    } catch (thrownValue) {\n      handleError(root, thrownValue);\n    }\n  } while (true);\n  resetContextDependencies();\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n  }\n\n  popDispatcher(prevDispatcher);\n  executionContext = prevExecutionContext;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logRenderStopped();\n    }\n  }\n\n  // Check if the tree has completed.\n  if (workInProgress !== null) {\n    // Still work remaining.\n    if (enableSchedulingProfiler) {\n      markRenderYielded();\n    }\n    return RootIncomplete;\n  } else {\n    // Completed the tree.\n    if (enableSchedulingProfiler) {\n      markRenderStopped();\n    }\n\n    // Set this to null to indicate there's no in-progress render.\n    workInProgressRoot = null;\n    workInProgressRootRenderLanes = NoLanes;\n\n    // Return the final exit status.\n    return workInProgressRootExitStatus;\n  }\n}\n\n/** @noinline */\nfunction workLoopConcurrent() {\n  // Perform work until Scheduler asks us to yield\n  while (workInProgress !== null && !shouldYield()) {\n    performUnitOfWork(workInProgress);\n  }\n}\n\nfunction performUnitOfWork(unitOfWork: Fiber): void {\n  // The current, flushed, state of this fiber is the alternate. Ideally\n  // nothing should rely on this, but relying on it here means that we don't\n  // need an additional field on the work in progress.\n  const current = unitOfWork.alternate;\n  setCurrentDebugFiberInDEV(unitOfWork);\n\n  let next;\n  if (enableProfilerTimer && (unitOfWork.mode & ProfileMode) !== NoMode) {\n    startProfilerTimer(unitOfWork);\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n  } else {\n    next = beginWork(current, unitOfWork, subtreeRenderLanes);\n  }\n\n  resetCurrentDebugFiberInDEV();\n  unitOfWork.memoizedProps = unitOfWork.pendingProps;\n  if (next === null) {\n    // If this doesn't spawn new work, complete the current work.\n    completeUnitOfWork(unitOfWork);\n  } else {\n    workInProgress = next;\n  }\n\n  ReactCurrentOwner.current = null;\n}\n\nfunction completeUnitOfWork(unitOfWork: Fiber): void {\n  // Attempt to complete the current unit of work, then move to the next\n  // sibling. If there are no more siblings, return to the parent fiber.\n  let completedWork = unitOfWork;\n  do {\n    // The current, flushed, state of this fiber is the alternate. Ideally\n    // nothing should rely on this, but relying on it here means that we don't\n    // need an additional field on the work in progress.\n    const current = completedWork.alternate;\n    const returnFiber = completedWork.return;\n\n    // Check if the work completed or if something threw.\n    if ((completedWork.flags & Incomplete) === NoFlags) {\n      setCurrentDebugFiberInDEV(completedWork);\n      let next;\n      if (\n        !enableProfilerTimer ||\n        (completedWork.mode & ProfileMode) === NoMode\n      ) {\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n      } else {\n        startProfilerTimer(completedWork);\n        next = completeWork(current, completedWork, subtreeRenderLanes);\n        // Update render duration assuming we didn't error.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n      }\n      resetCurrentDebugFiberInDEV();\n\n      if (next !== null) {\n        // Completing this fiber spawned new work. Work on that next.\n        workInProgress = next;\n        return;\n      }\n\n      resetChildLanes(completedWork);\n\n      if (\n        returnFiber !== null &&\n        // Do not append effects to parents if a sibling failed to complete\n        (returnFiber.flags & Incomplete) === NoFlags\n      ) {\n        // Append all the effects of the subtree and this fiber onto the effect\n        // list of the parent. The completion order of the children affects the\n        // side-effect order.\n        if (returnFiber.firstEffect === null) {\n          returnFiber.firstEffect = completedWork.firstEffect;\n        }\n        if (completedWork.lastEffect !== null) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = completedWork.firstEffect;\n          }\n          returnFiber.lastEffect = completedWork.lastEffect;\n        }\n\n        // If this fiber had side-effects, we append it AFTER the children's\n        // side-effects. We can perform certain side-effects earlier if needed,\n        // by doing multiple passes over the effect list. We don't want to\n        // schedule our own side-effect on our own list because if end up\n        // reusing children we'll schedule this effect onto itself since we're\n        // at the end.\n        const flags = completedWork.flags;\n\n        // Skip both NoWork and PerformedWork tags when creating the effect\n        // list. PerformedWork effect is read by React DevTools but shouldn't be\n        // committed.\n        if (flags > PerformedWork) {\n          if (returnFiber.lastEffect !== null) {\n            returnFiber.lastEffect.nextEffect = completedWork;\n          } else {\n            returnFiber.firstEffect = completedWork;\n          }\n          returnFiber.lastEffect = completedWork;\n        }\n      }\n    } else {\n      // This fiber did not complete because something threw. Pop values off\n      // the stack without entering the complete phase. If this is a boundary,\n      // capture values if possible.\n      const next = unwindWork(completedWork, subtreeRenderLanes);\n\n      // Because this fiber did not complete, don't reset its expiration time.\n\n      if (next !== null) {\n        // If completing this work spawned new work, do that next. We'll come\n        // back here again.\n        // Since we're restarting, remove anything that is not a host effect\n        // from the effect tag.\n        next.flags &= HostEffectMask;\n        workInProgress = next;\n        return;\n      }\n\n      if (\n        enableProfilerTimer &&\n        (completedWork.mode & ProfileMode) !== NoMode\n      ) {\n        // Record the render duration for the fiber that errored.\n        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n\n        // Include the time spent working on failed children before continuing.\n        let actualDuration = completedWork.actualDuration;\n        let child = completedWork.child;\n        while (child !== null) {\n          actualDuration += child.actualDuration;\n          child = child.sibling;\n        }\n        completedWork.actualDuration = actualDuration;\n      }\n\n      if (returnFiber !== null) {\n        // Mark the parent fiber as incomplete and clear its effect list.\n        returnFiber.firstEffect = returnFiber.lastEffect = null;\n        returnFiber.flags |= Incomplete;\n      }\n    }\n\n    const siblingFiber = completedWork.sibling;\n    if (siblingFiber !== null) {\n      // If there is more work to do in this returnFiber, do that next.\n      workInProgress = siblingFiber;\n      return;\n    }\n    // Otherwise, return to the parent\n    completedWork = returnFiber;\n    // Update the next thing we're working on in case something throws.\n    workInProgress = completedWork;\n  } while (completedWork !== null);\n\n  // We've reached the root.\n  if (workInProgressRootExitStatus === RootIncomplete) {\n    workInProgressRootExitStatus = RootCompleted;\n  }\n}\n\nfunction resetChildLanes(completedWork: Fiber) {\n  if (\n    // TODO: Move this check out of the hot path by moving `resetChildLanes`\n    // to switch statement in `completeWork`.\n    (completedWork.tag === LegacyHiddenComponent ||\n      completedWork.tag === OffscreenComponent) &&\n    completedWork.memoizedState !== null &&\n    !includesSomeLane(subtreeRenderLanes, (OffscreenLane: Lane)) &&\n    (completedWork.mode & ConcurrentMode) !== NoLanes\n  ) {\n    // The children of this component are hidden. Don't bubble their\n    // expiration times.\n    return;\n  }\n\n  let newChildLanes = NoLanes;\n\n  // Bubble up the earliest expiration time.\n  if (enableProfilerTimer && (completedWork.mode & ProfileMode) !== NoMode) {\n    // In profiling mode, resetChildExpirationTime is also used to reset\n    // profiler durations.\n    let actualDuration = completedWork.actualDuration;\n    let treeBaseDuration = ((completedWork.selfBaseDuration: any): number);\n\n    // When a fiber is cloned, its actualDuration is reset to 0. This value will\n    // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n    // When work is done, it should bubble to the parent's actualDuration. If\n    // the fiber has not been cloned though, (meaning no work was done), then\n    // this value will reflect the amount of time spent working on a previous\n    // render. In that case it should not bubble. We determine whether it was\n    // cloned by comparing the child pointer.\n    const shouldBubbleActualDurations =\n      completedWork.alternate === null ||\n      completedWork.child !== completedWork.alternate.child;\n\n    let child = completedWork.child;\n    while (child !== null) {\n      newChildLanes = mergeLanes(\n        newChildLanes,\n        mergeLanes(child.lanes, child.childLanes),\n      );\n      if (shouldBubbleActualDurations) {\n        actualDuration += child.actualDuration;\n      }\n      treeBaseDuration += child.treeBaseDuration;\n      child = child.sibling;\n    }\n\n    const isTimedOutSuspense =\n      completedWork.tag === SuspenseComponent &&\n      completedWork.memoizedState !== null;\n    if (isTimedOutSuspense) {\n      // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n      const primaryChildFragment = completedWork.child;\n      if (primaryChildFragment !== null) {\n        treeBaseDuration -= ((primaryChildFragment.treeBaseDuration: any): number);\n      }\n    }\n\n    completedWork.actualDuration = actualDuration;\n    completedWork.treeBaseDuration = treeBaseDuration;\n  } else {\n    let child = completedWork.child;\n    while (child !== null) {\n      newChildLanes = mergeLanes(\n        newChildLanes,\n        mergeLanes(child.lanes, child.childLanes),\n      );\n      child = child.sibling;\n    }\n  }\n\n  completedWork.childLanes = newChildLanes;\n}\n\nfunction commitRoot(root) {\n  const renderPriorityLevel = getCurrentPriorityLevel();\n  runWithPriority(\n    ImmediateSchedulerPriority,\n    commitRootImpl.bind(null, root, renderPriorityLevel),\n  );\n  return null;\n}\n\nfunction commitRootImpl(root, renderPriorityLevel) {\n  do {\n    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n    // means `flushPassiveEffects` will sometimes result in additional\n    // passive effects. So we need to keep flushing in a loop until there are\n    // no more pending effects.\n    // TODO: Might be better if `flushPassiveEffects` did not automatically\n    // flush synchronous work at the end, to avoid factoring hazards like this.\n    flushPassiveEffects();\n  } while (rootWithPendingPassiveEffects !== null);\n  flushRenderPhaseStrictModeWarningsInDEV();\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Should not already be working.',\n  );\n\n  const finishedWork = root.finishedWork;\n  const lanes = root.finishedLanes;\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStarted(lanes);\n  }\n\n  if (finishedWork === null) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    return null;\n  }\n  root.finishedWork = null;\n  root.finishedLanes = NoLanes;\n\n  invariant(\n    finishedWork !== root.current,\n    'Cannot commit the same tree as before. This error is likely caused by ' +\n      'a bug in React. Please file an issue.',\n  );\n\n  // commitRoot never returns a continuation; it always finishes synchronously.\n  // So we can clear these now to allow a new callback to be scheduled.\n  root.callbackNode = null;\n\n  // Update the first and last pending times on this root. The new first\n  // pending time is whatever is left on the root fiber.\n  let remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n  markRootFinished(root, remainingLanes);\n\n  // Clear already finished discrete updates in case that a later call of\n  // `flushDiscreteUpdates` starts a useless render pass which may cancels\n  // a scheduled timeout.\n  if (rootsWithPendingDiscreteUpdates !== null) {\n    if (\n      !hasDiscreteLanes(remainingLanes) &&\n      rootsWithPendingDiscreteUpdates.has(root)\n    ) {\n      rootsWithPendingDiscreteUpdates.delete(root);\n    }\n  }\n\n  if (root === workInProgressRoot) {\n    // We can reset these now that they are finished.\n    workInProgressRoot = null;\n    workInProgress = null;\n    workInProgressRootRenderLanes = NoLanes;\n  } else {\n    // This indicates that the last root we worked on is not the same one that\n    // we're committing now. This most commonly happens when a suspended root\n    // times out.\n  }\n\n  // Get the list of effects.\n  let firstEffect;\n  if (finishedWork.flags > PerformedWork) {\n    // A fiber's effect list consists only of its children, not itself. So if\n    // the root has an effect, we need to add it to the end of the list. The\n    // resulting list is the set that would belong to the root's parent, if it\n    // had one; that is, all the effects in the tree including the root.\n    if (finishedWork.lastEffect !== null) {\n      finishedWork.lastEffect.nextEffect = finishedWork;\n      firstEffect = finishedWork.firstEffect;\n    } else {\n      firstEffect = finishedWork;\n    }\n  } else {\n    // There is no effect on the root.\n    firstEffect = finishedWork.firstEffect;\n  }\n\n  if (firstEffect !== null) {\n    let previousLanePriority;\n    if (decoupleUpdatePriorityFromScheduler) {\n      previousLanePriority = getCurrentUpdateLanePriority();\n      setCurrentUpdateLanePriority(SyncLanePriority);\n    }\n\n    const prevExecutionContext = executionContext;\n    executionContext |= CommitContext;\n    const prevInteractions = pushInteractions(root);\n\n    // Reset this to null before calling lifecycles\n    ReactCurrentOwner.current = null;\n\n    // The commit phase is broken into several sub-phases. We do a separate pass\n    // of the effect list for each phase: all mutation effects come before all\n    // layout effects, and so on.\n\n    // The first phase a \"before mutation\" phase. We use this phase to read the\n    // state of the host tree right before we mutate it. This is where\n    // getSnapshotBeforeUpdate is called.\n    focusedInstanceHandle = prepareForCommit(root.containerInfo);\n    shouldFireAfterActiveInstanceBlur = false;\n\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(null, commitBeforeMutationEffects, null);\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitBeforeMutationEffects();\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    // We no longer need to track the active instance fiber\n    focusedInstanceHandle = null;\n\n    if (enableProfilerTimer) {\n      // Mark the current commit time to be shared by all Profilers in this\n      // batch. This enables them to be grouped later.\n      recordCommitTime();\n    }\n\n    // The next phase is the mutation phase, where we mutate the host tree.\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(\n          null,\n          commitMutationEffects,\n          null,\n          root,\n          renderPriorityLevel,\n        );\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitMutationEffects(root, renderPriorityLevel);\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    if (shouldFireAfterActiveInstanceBlur) {\n      afterActiveInstanceBlur();\n    }\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the mutation phase, so that the previous tree is still current during\n    // componentWillUnmount, but before the layout phase, so that the finished\n    // work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // The next phase is the layout phase, where we call effects that read\n    // the host tree after it's been mutated. The idiomatic use case for this is\n    // layout, but class component lifecycles also fire here for legacy reasons.\n    nextEffect = firstEffect;\n    do {\n      if (__DEV__) {\n        invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);\n        if (hasCaughtError()) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      } else {\n        try {\n          commitLayoutEffects(root, lanes);\n        } catch (error) {\n          invariant(nextEffect !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(nextEffect, error);\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    } while (nextEffect !== null);\n\n    nextEffect = null;\n\n    // Tell Scheduler to yield at the end of the frame, so the browser has an\n    // opportunity to paint.\n    requestPaint();\n\n    if (enableSchedulerTracing) {\n      popInteractions(((prevInteractions: any): Set<Interaction>));\n    }\n    executionContext = prevExecutionContext;\n\n    if (decoupleUpdatePriorityFromScheduler && previousLanePriority != null) {\n      // Reset the priority to the previous non-sync value.\n      setCurrentUpdateLanePriority(previousLanePriority);\n    }\n  } else {\n    // No effects.\n    root.current = finishedWork;\n    // Measure these anyway so the flamegraph explicitly shows that there were\n    // no effects.\n    // TODO: Maybe there's a better way to report this.\n    if (enableProfilerTimer) {\n      recordCommitTime();\n    }\n  }\n\n  const rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n  if (rootDoesHavePassiveEffects) {\n    // This commit has passive effects. Stash a reference to them. But don't\n    // schedule a callback until after flushing layout work.\n    rootDoesHavePassiveEffects = false;\n    rootWithPendingPassiveEffects = root;\n    pendingPassiveEffectsLanes = lanes;\n    pendingPassiveEffectsRenderPriority = renderPriorityLevel;\n  } else {\n    // We are done with the effect chain at this point so let's clear the\n    // nextEffect pointers to assist with GC. If we have passive effects, we'll\n    // clear this in flushPassiveEffects.\n    nextEffect = firstEffect;\n    while (nextEffect !== null) {\n      const nextNextEffect = nextEffect.nextEffect;\n      nextEffect.nextEffect = null;\n      if (nextEffect.flags & Deletion) {\n        detachFiberAfterEffects(nextEffect);\n      }\n      nextEffect = nextNextEffect;\n    }\n  }\n\n  // Read this again, since an effect might have updated it\n  remainingLanes = root.pendingLanes;\n\n  // Check if there's remaining work on this root\n  if (remainingLanes !== NoLanes) {\n    if (enableSchedulerTracing) {\n      if (spawnedWorkDuringRender !== null) {\n        const expirationTimes = spawnedWorkDuringRender;\n        spawnedWorkDuringRender = null;\n        for (let i = 0; i < expirationTimes.length; i++) {\n          scheduleInteractions(\n            root,\n            expirationTimes[i],\n            root.memoizedInteractions,\n          );\n        }\n      }\n      schedulePendingInteractions(root, remainingLanes);\n    }\n  } else {\n    // If there's no remaining work, we can clear the set of already failed\n    // error boundaries.\n    legacyErrorBoundariesThatAlreadyFailed = null;\n  }\n\n  if (enableSchedulerTracing) {\n    if (!rootDidHavePassiveEffects) {\n      // If there are no passive effects, then we can complete the pending interactions.\n      // Otherwise, we'll wait until after the passive effects are flushed.\n      // Wait to do this until after remaining work has been scheduled,\n      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.\n      finishPendingInteractions(root, lanes);\n    }\n  }\n\n  if (remainingLanes === SyncLane) {\n    // Count the number of times the root synchronously re-renders without\n    // finishing. If there are too many, it indicates an infinite update loop.\n    if (root === rootWithNestedUpdates) {\n      nestedUpdateCount++;\n    } else {\n      nestedUpdateCount = 0;\n      rootWithNestedUpdates = root;\n    }\n  } else {\n    nestedUpdateCount = 0;\n  }\n\n  onCommitRootDevTools(finishedWork.stateNode, renderPriorityLevel);\n\n  if (__DEV__) {\n    onCommitRootTestSelector();\n  }\n\n  // Always call this before exiting `commitRoot`, to ensure that any\n  // additional work on this root is scheduled.\n  ensureRootIsScheduled(root, now());\n\n  if (hasUncaughtError) {\n    hasUncaughtError = false;\n    const error = firstUncaughtError;\n    firstUncaughtError = null;\n    throw error;\n  }\n\n  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {\n    if (__DEV__) {\n      if (enableDebugTracing) {\n        logCommitStopped();\n      }\n    }\n\n    if (enableSchedulingProfiler) {\n      markCommitStopped();\n    }\n\n    // This is a legacy edge case. We just committed the initial mount of\n    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired\n    // synchronously, but layout updates should be deferred until the end\n    // of the batch.\n    return null;\n  }\n\n  // If layout work was scheduled, flush it now.\n  flushSyncCallbackQueue();\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logCommitStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markCommitStopped();\n  }\n\n  return null;\n}\n\nfunction commitBeforeMutationEffects() {\n  while (nextEffect !== null) {\n    const current = nextEffect.alternate;\n\n    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {\n      if ((nextEffect.flags & Deletion) !== NoFlags) {\n        if (doesFiberContain(nextEffect, focusedInstanceHandle)) {\n          shouldFireAfterActiveInstanceBlur = true;\n          beforeActiveInstanceBlur();\n        }\n      } else {\n        // TODO: Move this out of the hot path using a dedicated effect tag.\n        if (\n          nextEffect.tag === SuspenseComponent &&\n          isSuspenseBoundaryBeingHidden(current, nextEffect) &&\n          doesFiberContain(nextEffect, focusedInstanceHandle)\n        ) {\n          shouldFireAfterActiveInstanceBlur = true;\n          beforeActiveInstanceBlur();\n        }\n      }\n    }\n\n    const flags = nextEffect.flags;\n    if ((flags & Snapshot) !== NoFlags) {\n      setCurrentDebugFiberInDEV(nextEffect);\n\n      commitBeforeMutationEffectOnFiber(current, nextEffect);\n\n      resetCurrentDebugFiberInDEV();\n    }\n    if ((flags & Passive) !== NoFlags) {\n      // If there are passive effects, schedule a callback to flush at\n      // the earliest opportunity.\n      if (!rootDoesHavePassiveEffects) {\n        rootDoesHavePassiveEffects = true;\n        scheduleCallback(NormalSchedulerPriority, () => {\n          flushPassiveEffects();\n          return null;\n        });\n      }\n    }\n    nextEffect = nextEffect.nextEffect;\n  }\n}\n\nfunction commitMutationEffects(\n  root: FiberRoot,\n  renderPriorityLevel: ReactPriorityLevel,\n) {\n  // TODO: Should probably move the bulk of this function to commitWork.\n  while (nextEffect !== null) {\n    setCurrentDebugFiberInDEV(nextEffect);\n\n    const flags = nextEffect.flags;\n\n    if (flags & ContentReset) {\n      commitResetTextContent(nextEffect);\n    }\n\n    if (flags & Ref) {\n      const current = nextEffect.alternate;\n      if (current !== null) {\n        commitDetachRef(current);\n      }\n      if (enableScopeAPI) {\n        // TODO: This is a temporary solution that allowed us to transition away\n        // from React Flare on www.\n        if (nextEffect.tag === ScopeComponent) {\n          commitAttachRef(nextEffect);\n        }\n      }\n    }\n\n    // The following switch statement is only concerned about placement,\n    // updates, and deletions. To avoid needing to add a case for every possible\n    // bitmap value, we remove the secondary effects from the effect tag and\n    // switch on that value.\n    const primaryFlags = flags & (Placement | Update | Deletion | Hydrating);\n    switch (primaryFlags) {\n      case Placement: {\n        commitPlacement(nextEffect);\n        // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        // TODO: findDOMNode doesn't rely on this any more but isMounted does\n        // and isMounted is deprecated anyway so we should be able to kill this.\n        nextEffect.flags &= ~Placement;\n        break;\n      }\n      case PlacementAndUpdate: {\n        // Placement\n        commitPlacement(nextEffect);\n        // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        nextEffect.flags &= ~Placement;\n\n        // Update\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Hydrating: {\n        nextEffect.flags &= ~Hydrating;\n        break;\n      }\n      case HydratingAndUpdate: {\n        nextEffect.flags &= ~Hydrating;\n\n        // Update\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Update: {\n        const current = nextEffect.alternate;\n        commitWork(current, nextEffect);\n        break;\n      }\n      case Deletion: {\n        commitDeletion(root, nextEffect, renderPriorityLevel);\n        break;\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n    nextEffect = nextEffect.nextEffect;\n  }\n}\n\nfunction commitLayoutEffects(root: FiberRoot, committedLanes: Lanes) {\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logLayoutEffectsStarted(committedLanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markLayoutEffectsStarted(committedLanes);\n  }\n\n  // TODO: Should probably move the bulk of this function to commitWork.\n  while (nextEffect !== null) {\n    setCurrentDebugFiberInDEV(nextEffect);\n\n    const flags = nextEffect.flags;\n\n    if (flags & (Update | Callback)) {\n      const current = nextEffect.alternate;\n      commitLayoutEffectOnFiber(root, current, nextEffect, committedLanes);\n    }\n\n    if (enableScopeAPI) {\n      // TODO: This is a temporary solution that allowed us to transition away\n      // from React Flare on www.\n      if (flags & Ref && nextEffect.tag !== ScopeComponent) {\n        commitAttachRef(nextEffect);\n      }\n    } else {\n      if (flags & Ref) {\n        commitAttachRef(nextEffect);\n      }\n    }\n\n    resetCurrentDebugFiberInDEV();\n    nextEffect = nextEffect.nextEffect;\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logLayoutEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markLayoutEffectsStopped();\n  }\n}\n\nexport function flushPassiveEffects(): boolean {\n  // Returns whether passive effects were flushed.\n  if (pendingPassiveEffectsRenderPriority !== NoSchedulerPriority) {\n    const priorityLevel =\n      pendingPassiveEffectsRenderPriority > NormalSchedulerPriority\n        ? NormalSchedulerPriority\n        : pendingPassiveEffectsRenderPriority;\n    pendingPassiveEffectsRenderPriority = NoSchedulerPriority;\n    if (decoupleUpdatePriorityFromScheduler) {\n      const previousLanePriority = getCurrentUpdateLanePriority();\n      try {\n        setCurrentUpdateLanePriority(\n          schedulerPriorityToLanePriority(priorityLevel),\n        );\n        return runWithPriority(priorityLevel, flushPassiveEffectsImpl);\n      } finally {\n        setCurrentUpdateLanePriority(previousLanePriority);\n      }\n    } else {\n      return runWithPriority(priorityLevel, flushPassiveEffectsImpl);\n    }\n  }\n  return false;\n}\n\nexport function enqueuePendingPassiveProfilerEffect(fiber: Fiber): void {\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    pendingPassiveProfilerEffects.push(fiber);\n    if (!rootDoesHavePassiveEffects) {\n      rootDoesHavePassiveEffects = true;\n      scheduleCallback(NormalSchedulerPriority, () => {\n        flushPassiveEffects();\n        return null;\n      });\n    }\n  }\n}\n\nexport function enqueuePendingPassiveHookEffectMount(\n  fiber: Fiber,\n  effect: HookEffect,\n): void {\n  pendingPassiveHookEffectsMount.push(effect, fiber);\n  if (!rootDoesHavePassiveEffects) {\n    rootDoesHavePassiveEffects = true;\n    scheduleCallback(NormalSchedulerPriority, () => {\n      flushPassiveEffects();\n      return null;\n    });\n  }\n}\n\nexport function enqueuePendingPassiveHookEffectUnmount(\n  fiber: Fiber,\n  effect: HookEffect,\n): void {\n  pendingPassiveHookEffectsUnmount.push(effect, fiber);\n  if (__DEV__) {\n    fiber.flags |= PassiveUnmountPendingDev;\n    const alternate = fiber.alternate;\n    if (alternate !== null) {\n      alternate.flags |= PassiveUnmountPendingDev;\n    }\n  }\n  if (!rootDoesHavePassiveEffects) {\n    rootDoesHavePassiveEffects = true;\n    scheduleCallback(NormalSchedulerPriority, () => {\n      flushPassiveEffects();\n      return null;\n    });\n  }\n}\n\nfunction invokePassiveEffectCreate(effect: HookEffect): void {\n  const create = effect.create;\n  effect.destroy = create();\n}\n\nfunction flushPassiveEffectsImpl() {\n  if (rootWithPendingPassiveEffects === null) {\n    return false;\n  }\n\n  const root = rootWithPendingPassiveEffects;\n  const lanes = pendingPassiveEffectsLanes;\n  rootWithPendingPassiveEffects = null;\n  pendingPassiveEffectsLanes = NoLanes;\n\n  invariant(\n    (executionContext & (RenderContext | CommitContext)) === NoContext,\n    'Cannot flush passive effects while already rendering.',\n  );\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStarted(lanes);\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStarted(lanes);\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = true;\n  }\n\n  const prevExecutionContext = executionContext;\n  executionContext |= CommitContext;\n  const prevInteractions = pushInteractions(root);\n\n  // It's important that ALL pending passive effect destroy functions are called\n  // before ANY passive effect create functions are called.\n  // Otherwise effects in sibling components might interfere with each other.\n  // e.g. a destroy function in one component may unintentionally override a ref\n  // value set by a create function in another component.\n  // Layout effects have the same constraint.\n\n  // First pass: Destroy stale passive effects.\n  const unmountEffects = pendingPassiveHookEffectsUnmount;\n  pendingPassiveHookEffectsUnmount = [];\n  for (let i = 0; i < unmountEffects.length; i += 2) {\n    const effect = ((unmountEffects[i]: any): HookEffect);\n    const fiber = ((unmountEffects[i + 1]: any): Fiber);\n    const destroy = effect.destroy;\n    effect.destroy = undefined;\n\n    if (__DEV__) {\n      fiber.flags &= ~PassiveUnmountPendingDev;\n      const alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.flags &= ~PassiveUnmountPendingDev;\n      }\n    }\n\n    if (typeof destroy === 'function') {\n      if (__DEV__) {\n        setCurrentDebugFiberInDEV(fiber);\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          startPassiveEffectTimer();\n          invokeGuardedCallback(null, destroy, null);\n          recordPassiveEffectDuration(fiber);\n        } else {\n          invokeGuardedCallback(null, destroy, null);\n        }\n        if (hasCaughtError()) {\n          invariant(fiber !== null, 'Should be working on an effect.');\n          const error = clearCaughtError();\n          captureCommitPhaseError(fiber, error);\n        }\n        resetCurrentDebugFiberInDEV();\n      } else {\n        try {\n          if (\n            enableProfilerTimer &&\n            enableProfilerCommitHooks &&\n            fiber.mode & ProfileMode\n          ) {\n            try {\n              startPassiveEffectTimer();\n              destroy();\n            } finally {\n              recordPassiveEffectDuration(fiber);\n            }\n          } else {\n            destroy();\n          }\n        } catch (error) {\n          invariant(fiber !== null, 'Should be working on an effect.');\n          captureCommitPhaseError(fiber, error);\n        }\n      }\n    }\n  }\n  // Second pass: Create new passive effects.\n  const mountEffects = pendingPassiveHookEffectsMount;\n  pendingPassiveHookEffectsMount = [];\n  for (let i = 0; i < mountEffects.length; i += 2) {\n    const effect = ((mountEffects[i]: any): HookEffect);\n    const fiber = ((mountEffects[i + 1]: any): Fiber);\n    if (__DEV__) {\n      setCurrentDebugFiberInDEV(fiber);\n      if (\n        enableProfilerTimer &&\n        enableProfilerCommitHooks &&\n        fiber.mode & ProfileMode\n      ) {\n        startPassiveEffectTimer();\n        invokeGuardedCallback(null, invokePassiveEffectCreate, null, effect);\n        recordPassiveEffectDuration(fiber);\n      } else {\n        invokeGuardedCallback(null, invokePassiveEffectCreate, null, effect);\n      }\n      if (hasCaughtError()) {\n        invariant(fiber !== null, 'Should be working on an effect.');\n        const error = clearCaughtError();\n        captureCommitPhaseError(fiber, error);\n      }\n      resetCurrentDebugFiberInDEV();\n    } else {\n      try {\n        const create = effect.create;\n        if (\n          enableProfilerTimer &&\n          enableProfilerCommitHooks &&\n          fiber.mode & ProfileMode\n        ) {\n          try {\n            startPassiveEffectTimer();\n            effect.destroy = create();\n          } finally {\n            recordPassiveEffectDuration(fiber);\n          }\n        } else {\n          effect.destroy = create();\n        }\n      } catch (error) {\n        invariant(fiber !== null, 'Should be working on an effect.');\n        captureCommitPhaseError(fiber, error);\n      }\n    }\n  }\n\n  // Note: This currently assumes there are no passive effects on the root fiber\n  // because the root is not part of its own effect list.\n  // This could change in the future.\n  let effect = root.current.firstEffect;\n  while (effect !== null) {\n    const nextNextEffect = effect.nextEffect;\n    // Remove nextEffect pointer to assist GC\n    effect.nextEffect = null;\n    if (effect.flags & Deletion) {\n      detachFiberAfterEffects(effect);\n    }\n    effect = nextNextEffect;\n  }\n\n  if (enableProfilerTimer && enableProfilerCommitHooks) {\n    const profilerEffects = pendingPassiveProfilerEffects;\n    pendingPassiveProfilerEffects = [];\n    for (let i = 0; i < profilerEffects.length; i++) {\n      const fiber = ((profilerEffects[i]: any): Fiber);\n      commitPassiveEffectDurations(root, fiber);\n    }\n  }\n\n  if (enableSchedulerTracing) {\n    popInteractions(((prevInteractions: any): Set<Interaction>));\n    finishPendingInteractions(root, lanes);\n  }\n\n  if (__DEV__) {\n    isFlushingPassiveEffects = false;\n  }\n\n  if (__DEV__) {\n    if (enableDebugTracing) {\n      logPassiveEffectsStopped();\n    }\n  }\n\n  if (enableSchedulingProfiler) {\n    markPassiveEffectsStopped();\n  }\n\n  executionContext = prevExecutionContext;\n\n  flushSyncCallbackQueue();\n\n  // If additional passive effects were scheduled, increment a counter. If this\n  // exceeds the limit, we'll fire a warning.\n  nestedPassiveUpdateCount =\n    rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;\n\n  return true;\n}\n\nexport function isAlreadyFailedLegacyErrorBoundary(instance: mixed): boolean {\n  return (\n    legacyErrorBoundariesThatAlreadyFailed !== null &&\n    legacyErrorBoundariesThatAlreadyFailed.has(instance)\n  );\n}\n\nexport function markLegacyErrorBoundaryAsFailed(instance: mixed) {\n  if (legacyErrorBoundariesThatAlreadyFailed === null) {\n    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n  } else {\n    legacyErrorBoundariesThatAlreadyFailed.add(instance);\n  }\n}\n\nfunction prepareToThrowUncaughtError(error: mixed) {\n  if (!hasUncaughtError) {\n    hasUncaughtError = true;\n    firstUncaughtError = error;\n  }\n}\nexport const onUncaughtError = prepareToThrowUncaughtError;\n\nfunction captureCommitPhaseErrorOnRoot(\n  rootFiber: Fiber,\n  sourceFiber: Fiber,\n  error: mixed,\n) {\n  const errorInfo = createCapturedValue(error, sourceFiber);\n  const update = createRootErrorUpdate(rootFiber, errorInfo, (SyncLane: Lane));\n  enqueueUpdate(rootFiber, update);\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(rootFiber, (SyncLane: Lane));\n  if (root !== null) {\n    markRootUpdated(root, SyncLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, SyncLane);\n  }\n}\n\nexport function captureCommitPhaseError(sourceFiber: Fiber, error: mixed) {\n  if (sourceFiber.tag === HostRoot) {\n    // Error was thrown at the root. There is no parent, so the root\n    // itself should capture it.\n    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);\n    return;\n  }\n\n  let fiber = sourceFiber.return;\n\n  while (fiber !== null) {\n    if (fiber.tag === HostRoot) {\n      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);\n      return;\n    } else if (fiber.tag === ClassComponent) {\n      const ctor = fiber.type;\n      const instance = fiber.stateNode;\n      if (\n        typeof ctor.getDerivedStateFromError === 'function' ||\n        (typeof instance.componentDidCatch === 'function' &&\n          !isAlreadyFailedLegacyErrorBoundary(instance))\n      ) {\n        const errorInfo = createCapturedValue(error, sourceFiber);\n        const update = createClassErrorUpdate(\n          fiber,\n          errorInfo,\n          (SyncLane: Lane),\n        );\n        enqueueUpdate(fiber, update);\n        const eventTime = requestEventTime();\n        const root = markUpdateLaneFromFiberToRoot(fiber, (SyncLane: Lane));\n        if (root !== null) {\n          markRootUpdated(root, SyncLane, eventTime);\n          ensureRootIsScheduled(root, eventTime);\n          schedulePendingInteractions(root, SyncLane);\n        } else {\n          // This component has already been unmounted.\n          // We can't schedule any follow up work for the root because the fiber is already unmounted,\n          // but we can still call the log-only boundary so the error isn't swallowed.\n          //\n          // TODO This is only a temporary bandaid for the old reconciler fork.\n          // We can delete this special case once the new fork is merged.\n          if (\n            typeof instance.componentDidCatch === 'function' &&\n            !isAlreadyFailedLegacyErrorBoundary(instance)\n          ) {\n            try {\n              instance.componentDidCatch(error, errorInfo);\n            } catch (errorToIgnore) {\n              // TODO Ignore this error? Rethrow it?\n              // This is kind of an edge case.\n            }\n          }\n        }\n        return;\n      }\n    }\n    fiber = fiber.return;\n  }\n}\n\nexport function pingSuspendedRoot(\n  root: FiberRoot,\n  wakeable: Wakeable,\n  pingedLanes: Lanes,\n) {\n  const pingCache = root.pingCache;\n  if (pingCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    pingCache.delete(wakeable);\n  }\n\n  const eventTime = requestEventTime();\n  markRootPinged(root, pingedLanes, eventTime);\n\n  if (\n    workInProgressRoot === root &&\n    isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n  ) {\n    // Received a ping at the same priority level at which we're currently\n    // rendering. We might want to restart this render. This should mirror\n    // the logic of whether or not a root suspends once it completes.\n\n    // TODO: If we're rendering sync either due to Sync, Batched or expired,\n    // we should probably never restart.\n\n    // If we're suspended with delay, or if it's a retry, we'll always suspend\n    // so we can always restart.\n    if (\n      workInProgressRootExitStatus === RootSuspendedWithDelay ||\n      (workInProgressRootExitStatus === RootSuspended &&\n        includesOnlyRetries(workInProgressRootRenderLanes) &&\n        now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n    ) {\n      // Restart from the root.\n      prepareFreshStack(root, NoLanes);\n    } else {\n      // Even though we can't restart right now, we might get an\n      // opportunity later. So we mark this render as having a ping.\n      workInProgressRootPingedLanes = mergeLanes(\n        workInProgressRootPingedLanes,\n        pingedLanes,\n      );\n    }\n  }\n\n  ensureRootIsScheduled(root, eventTime);\n  schedulePendingInteractions(root, pingedLanes);\n}\n\nfunction retryTimedOutBoundary(boundaryFiber: Fiber, retryLane: Lane) {\n  // The boundary fiber (a Suspense component or SuspenseList component)\n  // previously was rendered in its fallback state. One of the promises that\n  // suspended it has resolved, which means at least part of the tree was\n  // likely unblocked. Try rendering again, at a new expiration time.\n  if (retryLane === NoLane) {\n    retryLane = requestRetryLane(boundaryFiber);\n  }\n  // TODO: Special case idle priority?\n  const eventTime = requestEventTime();\n  const root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);\n  if (root !== null) {\n    markRootUpdated(root, retryLane, eventTime);\n    ensureRootIsScheduled(root, eventTime);\n    schedulePendingInteractions(root, retryLane);\n  }\n}\n\nexport function retryDehydratedSuspenseBoundary(boundaryFiber: Fiber) {\n  const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n  let retryLane = NoLane;\n  if (suspenseState !== null) {\n    retryLane = suspenseState.retryLane;\n  }\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\nexport function resolveRetryWakeable(boundaryFiber: Fiber, wakeable: Wakeable) {\n  let retryLane = NoLane; // Default\n  let retryCache: WeakSet<Wakeable> | Set<Wakeable> | null;\n  if (enableSuspenseServerRenderer) {\n    switch (boundaryFiber.tag) {\n      case SuspenseComponent:\n        retryCache = boundaryFiber.stateNode;\n        const suspenseState: null | SuspenseState = boundaryFiber.memoizedState;\n        if (suspenseState !== null) {\n          retryLane = suspenseState.retryLane;\n        }\n        break;\n      case SuspenseListComponent:\n        retryCache = boundaryFiber.stateNode;\n        break;\n      default:\n        invariant(\n          false,\n          'Pinged unknown suspense boundary type. ' +\n            'This is probably a bug in React.',\n        );\n    }\n  } else {\n    retryCache = boundaryFiber.stateNode;\n  }\n\n  if (retryCache !== null) {\n    // The wakeable resolved, so we no longer need to memoize, because it will\n    // never be thrown again.\n    retryCache.delete(wakeable);\n  }\n\n  retryTimedOutBoundary(boundaryFiber, retryLane);\n}\n\n// Computes the next Just Noticeable Difference (JND) boundary.\n// The theory is that a person can't tell the difference between small differences in time.\n// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable\n// difference in the experience. However, waiting for longer might mean that we can avoid\n// showing an intermediate loading state. The longer we have already waited, the harder it\n// is to tell small differences in time. Therefore, the longer we've already waited,\n// the longer we can wait additionally. At some point we have to give up though.\n// We pick a train model where the next boundary commits at a consistent schedule.\n// These particular numbers are vague estimates. We expect to adjust them based on research.\nfunction jnd(timeElapsed: number) {\n  return timeElapsed < 120\n    ? 120\n    : timeElapsed < 480\n    ? 480\n    : timeElapsed < 1080\n    ? 1080\n    : timeElapsed < 1920\n    ? 1920\n    : timeElapsed < 3000\n    ? 3000\n    : timeElapsed < 4320\n    ? 4320\n    : ceil(timeElapsed / 1960) * 1960;\n}\n\nfunction checkForNestedUpdates() {\n  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n    nestedUpdateCount = 0;\n    rootWithNestedUpdates = null;\n    invariant(\n      false,\n      'Maximum update depth exceeded. This can happen when a component ' +\n        'repeatedly calls setState inside componentWillUpdate or ' +\n        'componentDidUpdate. React limits the number of nested updates to ' +\n        'prevent infinite loops.',\n    );\n  }\n\n  if (__DEV__) {\n    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n      nestedPassiveUpdateCount = 0;\n      console.error(\n        'Maximum update depth exceeded. This can happen when a component ' +\n          \"calls setState inside useEffect, but useEffect either doesn't \" +\n          'have a dependency array, or one of the dependencies changes on ' +\n          'every render.',\n      );\n    }\n  }\n}\n\nfunction flushRenderPhaseStrictModeWarningsInDEV() {\n  if (__DEV__) {\n    ReactStrictModeWarnings.flushLegacyContextWarning();\n\n    if (warnAboutDeprecatedLifecycles) {\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n    }\n  }\n}\n\nlet didWarnStateUpdateForNotYetMountedComponent: Set<string> | null = null;\nfunction warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n  if (__DEV__) {\n    if ((executionContext & RenderContext) !== NoContext) {\n      // We let the other warning about render phase updates deal with this one.\n      return;\n    }\n\n    if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {\n      return;\n    }\n\n    const tag = fiber.tag;\n    if (\n      tag !== IndeterminateComponent &&\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent &&\n      tag !== Block\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentName(fiber.type) || 'ReactComponent';\n    if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n    }\n\n    const previousFiber = ReactCurrentFiberCurrent;\n    try {\n      setCurrentDebugFiberInDEV(fiber);\n      console.error(\n        \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n          'This indicates that you have a side-effect in your render function that ' +\n          'asynchronously later calls tries to update the component. Move this work to ' +\n          'useEffect instead.',\n      );\n    } finally {\n      if (previousFiber) {\n        setCurrentDebugFiberInDEV(fiber);\n      } else {\n        resetCurrentDebugFiberInDEV();\n      }\n    }\n  }\n}\n\nlet didWarnStateUpdateForUnmountedComponent: Set<string> | null = null;\nfunction warnAboutUpdateOnUnmountedFiberInDEV(fiber) {\n  if (__DEV__) {\n    const tag = fiber.tag;\n    if (\n      tag !== HostRoot &&\n      tag !== ClassComponent &&\n      tag !== FunctionComponent &&\n      tag !== ForwardRef &&\n      tag !== MemoComponent &&\n      tag !== SimpleMemoComponent &&\n      tag !== Block\n    ) {\n      // Only warn for user-defined components, not internal ones like Suspense.\n      return;\n    }\n\n    // If there are pending passive effects unmounts for this Fiber,\n    // we can assume that they would have prevented this update.\n    if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {\n      return;\n    }\n\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    const componentName = getComponentName(fiber.type) || 'ReactComponent';\n    if (didWarnStateUpdateForUnmountedComponent !== null) {\n      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {\n        return;\n      }\n      didWarnStateUpdateForUnmountedComponent.add(componentName);\n    } else {\n      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);\n    }\n\n    if (isFlushingPassiveEffects) {\n      // Do not warn if we are currently flushing passive effects!\n      //\n      // React can't directly detect a memory leak, but there are some clues that warn about one.\n      // One of these clues is when an unmounted React component tries to update its state.\n      // For example, if a component forgets to remove an event listener when unmounting,\n      // that listener may be called later and try to update state,\n      // at which point React would warn about the potential leak.\n      //\n      // Warning signals are the most useful when they're strong.\n      // (So we should avoid false positive warnings.)\n      // Updating state from within an effect cleanup function is sometimes a necessary pattern, e.g.:\n      // 1. Updating an ancestor that a component had registered itself with on mount.\n      // 2. Resetting state when a component is hidden after going offscreen.\n    } else {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          \"Can't perform a React state update on an unmounted component. This \" +\n            'is a no-op, but it indicates a memory leak in your application. To ' +\n            'fix, cancel all subscriptions and asynchronous tasks in %s.',\n          tag === ClassComponent\n            ? 'the componentWillUnmount method'\n            : 'a useEffect cleanup function',\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nlet beginWork;\nif (__DEV__ && replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n  const dummyFiber = null;\n  beginWork = (current, unitOfWork, lanes) => {\n    // If a component throws an error, we replay it again in a synchronously\n    // dispatched event, so that the debugger will treat it as an uncaught\n    // error See ReactErrorUtils for more information.\n\n    // Before entering the begin phase, copy the work-in-progress onto a dummy\n    // fiber. If beginWork throws, we'll use this to reset the state.\n    const originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n      dummyFiber,\n      unitOfWork,\n    );\n    try {\n      return originalBeginWork(current, unitOfWork, lanes);\n    } catch (originalError) {\n      if (\n        originalError !== null &&\n        typeof originalError === 'object' &&\n        typeof originalError.then === 'function'\n      ) {\n        // Don't replay promises. Treat everything else like an error.\n        throw originalError;\n      }\n\n      // Keep this code in sync with handleError; any changes here must have\n      // corresponding changes there.\n      resetContextDependencies();\n      resetHooksAfterThrow();\n      // Don't reset current debug fiber, since we're about to work on the\n      // same fiber again.\n\n      // Unwind the failed stack frame\n      unwindInterruptedWork(unitOfWork);\n\n      // Restore the original properties of the fiber.\n      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n      if (enableProfilerTimer && unitOfWork.mode & ProfileMode) {\n        // Reset the profiler timer.\n        startProfilerTimer(unitOfWork);\n      }\n\n      // Run beginWork again.\n      invokeGuardedCallback(\n        null,\n        originalBeginWork,\n        null,\n        current,\n        unitOfWork,\n        lanes,\n      );\n\n      if (hasCaughtError()) {\n        const replayError = clearCaughtError();\n        // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.\n        // Rethrow this error instead of the original one.\n        throw replayError;\n      } else {\n        // This branch is reachable if the render phase is impure.\n        throw originalError;\n      }\n    }\n  };\n} else {\n  beginWork = originalBeginWork;\n}\n\nlet didWarnAboutUpdateInRender = false;\nlet didWarnAboutUpdateInRenderForAnotherComponent;\nif (__DEV__) {\n  didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n}\n\nfunction warnAboutRenderPhaseUpdatesInDEV(fiber) {\n  if (__DEV__) {\n    if (\n      ReactCurrentDebugFiberIsRenderingInDEV &&\n      (executionContext & RenderContext) !== NoContext &&\n      !getIsUpdatingOpaqueValueInRenderPhaseInDEV()\n    ) {\n      switch (fiber.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          const renderingComponentName =\n            (workInProgress && getComponentName(workInProgress.type)) ||\n            'Unknown';\n          // Dedupe by the rendering component because it's the one that needs to be fixed.\n          const dedupeKey = renderingComponentName;\n          if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n            didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n            const setStateComponentName =\n              getComponentName(fiber.type) || 'Unknown';\n            console.error(\n              'Cannot update a component (`%s`) while rendering a ' +\n                'different component (`%s`). To locate the bad setState() call inside `%s`, ' +\n                'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',\n              setStateComponentName,\n              renderingComponentName,\n              renderingComponentName,\n            );\n          }\n          break;\n        }\n        case ClassComponent: {\n          if (!didWarnAboutUpdateInRender) {\n            console.error(\n              'Cannot update during an existing state transition (such as ' +\n                'within `render`). Render methods should be a pure ' +\n                'function of props and state.',\n            );\n            didWarnAboutUpdateInRender = true;\n          }\n          break;\n        }\n      }\n    }\n  }\n}\n\n// a 'shared' variable that changes when act() opens/closes in tests.\nexport const IsThisRendererActing = {current: (false: boolean)};\n\nexport function warnIfNotScopedWithMatchingAct(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      IsSomeRendererActing.current === true &&\n      IsThisRendererActing.current !== true\n    ) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          \"It looks like you're using the wrong act() around your test interactions.\\n\" +\n            'Be sure to use the matching version of act() corresponding to your renderer:\\n\\n' +\n            '// for react-dom:\\n' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'import {act} fr' +\n            \"om 'react-dom/test-utils';\\n\" +\n            '// ...\\n' +\n            'act(() => ...);\\n\\n' +\n            '// for react-test-renderer:\\n' +\n            // Break up imports to avoid accidentally parsing them as dependencies.\n            'import TestRenderer fr' +\n            \"om react-test-renderer';\\n\" +\n            'const {act} = TestRenderer;\\n' +\n            '// ...\\n' +\n            'act(() => ...);',\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nexport function warnIfNotCurrentlyActingEffectsInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      (fiber.mode & StrictMode) !== NoMode &&\n      IsSomeRendererActing.current === false &&\n      IsThisRendererActing.current === false\n    ) {\n      console.error(\n        'An update to %s ran an effect, but was not wrapped in act(...).\\n\\n' +\n          'When testing, code that causes React state updates should be ' +\n          'wrapped into act(...):\\n\\n' +\n          'act(() => {\\n' +\n          '  /* fire events that update state */\\n' +\n          '});\\n' +\n          '/* assert on the output */\\n\\n' +\n          \"This ensures that you're testing the behavior the user would see \" +\n          'in the browser.' +\n          ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n        getComponentName(fiber.type),\n      );\n    }\n  }\n}\n\nfunction warnIfNotCurrentlyActingUpdatesInDEV(fiber: Fiber): void {\n  if (__DEV__) {\n    if (\n      warnsIfNotActing === true &&\n      executionContext === NoContext &&\n      IsSomeRendererActing.current === false &&\n      IsThisRendererActing.current === false\n    ) {\n      const previousFiber = ReactCurrentFiberCurrent;\n      try {\n        setCurrentDebugFiberInDEV(fiber);\n        console.error(\n          'An update to %s inside a test was not wrapped in act(...).\\n\\n' +\n            'When testing, code that causes React state updates should be ' +\n            'wrapped into act(...):\\n\\n' +\n            'act(() => {\\n' +\n            '  /* fire events that update state */\\n' +\n            '});\\n' +\n            '/* assert on the output */\\n\\n' +\n            \"This ensures that you're testing the behavior the user would see \" +\n            'in the browser.' +\n            ' Learn more at https://reactjs.org/link/wrap-tests-with-act',\n          getComponentName(fiber.type),\n        );\n      } finally {\n        if (previousFiber) {\n          setCurrentDebugFiberInDEV(fiber);\n        } else {\n          resetCurrentDebugFiberInDEV();\n        }\n      }\n    }\n  }\n}\n\nexport const warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;\n\n// In tests, we want to enforce a mocked scheduler.\nlet didWarnAboutUnmockedScheduler = false;\n// TODO Before we release concurrent mode, revisit this and decide whether a mocked\n// scheduler is the actual recommendation. The alternative could be a testing build,\n// a new lib, or whatever; we dunno just yet. This message is for early adopters\n// to get their tests right.\n\nexport function warnIfUnmockedScheduler(fiber: Fiber) {\n  if (__DEV__) {\n    if (\n      didWarnAboutUnmockedScheduler === false &&\n      Scheduler.unstable_flushAllWithoutAsserting === undefined\n    ) {\n      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {\n        didWarnAboutUnmockedScheduler = true;\n        console.error(\n          'In Concurrent or Sync modes, the \"scheduler\" module needs to be mocked ' +\n            'to guarantee consistent behaviour across tests and browsers. ' +\n            'For example, with jest: \\n' +\n            // Break up requires to avoid accidentally parsing them as dependencies.\n            \"jest.mock('scheduler', () => require\" +\n            \"('scheduler/unstable_mock'));\\n\\n\" +\n            'For more info, visit https://reactjs.org/link/mock-scheduler',\n        );\n      } else if (warnAboutUnmockedScheduler === true) {\n        didWarnAboutUnmockedScheduler = true;\n        console.error(\n          'Starting from React v18, the \"scheduler\" module will need to be mocked ' +\n            'to guarantee consistent behaviour across tests and browsers. ' +\n            'For example, with jest: \\n' +\n            // Break up requires to avoid accidentally parsing them as dependencies.\n            \"jest.mock('scheduler', () => require\" +\n            \"('scheduler/unstable_mock'));\\n\\n\" +\n            'For more info, visit https://reactjs.org/link/mock-scheduler',\n        );\n      }\n    }\n  }\n}\n\nfunction computeThreadID(root: FiberRoot, lane: Lane | Lanes) {\n  // Interaction threads are unique per root and expiration time.\n  // NOTE: Intentionally unsound cast. All that matters is that it's a number\n  // and it represents a batch of work. Could make a helper function instead,\n  // but meh this is fine for now.\n  return (lane: any) * 1000 + root.interactionThreadID;\n}\n\nexport function markSpawnedWork(lane: Lane | Lanes) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n  if (spawnedWorkDuringRender === null) {\n    spawnedWorkDuringRender = [lane];\n  } else {\n    spawnedWorkDuringRender.push(lane);\n  }\n}\n\nfunction scheduleInteractions(\n  root: FiberRoot,\n  lane: Lane | Lanes,\n  interactions: Set<Interaction>,\n) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  if (interactions.size > 0) {\n    const pendingInteractionMap = root.pendingInteractionMap;\n    const pendingInteractions = pendingInteractionMap.get(lane);\n    if (pendingInteractions != null) {\n      interactions.forEach(interaction => {\n        if (!pendingInteractions.has(interaction)) {\n          // Update the pending async work count for previously unscheduled interaction.\n          interaction.__count++;\n        }\n\n        pendingInteractions.add(interaction);\n      });\n    } else {\n      pendingInteractionMap.set(lane, new Set(interactions));\n\n      // Update the pending async work count for the current interactions.\n      interactions.forEach(interaction => {\n        interaction.__count++;\n      });\n    }\n\n    const subscriber = __subscriberRef.current;\n    if (subscriber !== null) {\n      const threadID = computeThreadID(root, lane);\n      subscriber.onWorkScheduled(interactions, threadID);\n    }\n  }\n}\n\nfunction schedulePendingInteractions(root: FiberRoot, lane: Lane | Lanes) {\n  // This is called when work is scheduled on a root.\n  // It associates the current interactions with the newly-scheduled expiration.\n  // They will be restored when that expiration is later committed.\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  scheduleInteractions(root, lane, __interactionsRef.current);\n}\n\nfunction startWorkOnPendingInteractions(root: FiberRoot, lanes: Lanes) {\n  // This is called when new work is started on a root.\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  // Determine which interactions this batch of work currently includes, So that\n  // we can accurately attribute time spent working on it, And so that cascading\n  // work triggered during the render phase will be associated with it.\n  const interactions: Set<Interaction> = new Set();\n  root.pendingInteractionMap.forEach((scheduledInteractions, scheduledLane) => {\n    if (includesSomeLane(lanes, scheduledLane)) {\n      scheduledInteractions.forEach(interaction =>\n        interactions.add(interaction),\n      );\n    }\n  });\n\n  // Store the current set of interactions on the FiberRoot for a few reasons:\n  // We can re-use it in hot functions like performConcurrentWorkOnRoot()\n  // without having to recalculate it. We will also use it in commitWork() to\n  // pass to any Profiler onRender() hooks. This also provides DevTools with a\n  // way to access it when the onCommitRoot() hook is called.\n  root.memoizedInteractions = interactions;\n\n  if (interactions.size > 0) {\n    const subscriber = __subscriberRef.current;\n    if (subscriber !== null) {\n      const threadID = computeThreadID(root, lanes);\n      try {\n        subscriber.onWorkStarted(interactions, threadID);\n      } catch (error) {\n        // If the subscriber throws, rethrow it in a separate task\n        scheduleCallback(ImmediateSchedulerPriority, () => {\n          throw error;\n        });\n      }\n    }\n  }\n}\n\nfunction finishPendingInteractions(root, committedLanes) {\n  if (!enableSchedulerTracing) {\n    return;\n  }\n\n  const remainingLanesAfterCommit = root.pendingLanes;\n\n  let subscriber;\n\n  try {\n    subscriber = __subscriberRef.current;\n    if (subscriber !== null && root.memoizedInteractions.size > 0) {\n      // FIXME: More than one lane can finish in a single commit.\n      const threadID = computeThreadID(root, committedLanes);\n      subscriber.onWorkStopped(root.memoizedInteractions, threadID);\n    }\n  } catch (error) {\n    // If the subscriber throws, rethrow it in a separate task\n    scheduleCallback(ImmediateSchedulerPriority, () => {\n      throw error;\n    });\n  } finally {\n    // Clear completed interactions from the pending Map.\n    // Unless the render was suspended or cascading work was scheduled,\n    // In which case– leave pending interactions until the subsequent render.\n    const pendingInteractionMap = root.pendingInteractionMap;\n    pendingInteractionMap.forEach((scheduledInteractions, lane) => {\n      // Only decrement the pending interaction count if we're done.\n      // If there's still work at the current priority,\n      // That indicates that we are waiting for suspense data.\n      if (!includesSomeLane(remainingLanesAfterCommit, lane)) {\n        pendingInteractionMap.delete(lane);\n\n        scheduledInteractions.forEach(interaction => {\n          interaction.__count--;\n\n          if (subscriber !== null && interaction.__count === 0) {\n            try {\n              subscriber.onInteractionScheduledWorkCompleted(interaction);\n            } catch (error) {\n              // If the subscriber throws, rethrow it in a separate task\n              scheduleCallback(ImmediateSchedulerPriority, () => {\n                throw error;\n              });\n            }\n          }\n        });\n      }\n    });\n  }\n}\n\n// `act` testing API\n//\n// TODO: This is mostly a copy-paste from the legacy `act`, which does not have\n// access to the same internals that we do here. Some trade offs in the\n// implementation no longer make sense.\n\nlet isFlushingAct = false;\nlet isInsideThisAct = false;\n\nfunction shouldForceFlushFallbacksInDEV() {\n  // Never force flush in production. This function should get stripped out.\n  return __DEV__ && actingUpdatesScopeDepth > 0;\n}\n\nconst flushMockScheduler = Scheduler.unstable_flushAllWithoutAsserting;\nconst isSchedulerMocked = typeof flushMockScheduler === 'function';\n\n// Returns whether additional work was scheduled. Caller should keep flushing\n// until there's no work left.\nfunction flushActWork(): boolean {\n  if (flushMockScheduler !== undefined) {\n    const prevIsFlushing = isFlushingAct;\n    isFlushingAct = true;\n    try {\n      return flushMockScheduler();\n    } finally {\n      isFlushingAct = prevIsFlushing;\n    }\n  } else {\n    // No mock scheduler available. However, the only type of pending work is\n    // passive effects, which we control. So we can flush that.\n    const prevIsFlushing = isFlushingAct;\n    isFlushingAct = true;\n    try {\n      let didFlushWork = false;\n      while (flushPassiveEffects()) {\n        didFlushWork = true;\n      }\n      return didFlushWork;\n    } finally {\n      isFlushingAct = prevIsFlushing;\n    }\n  }\n}\n\nfunction flushWorkAndMicroTasks(onDone: (err: ?Error) => void) {\n  try {\n    flushActWork();\n    enqueueTask(() => {\n      if (flushActWork()) {\n        flushWorkAndMicroTasks(onDone);\n      } else {\n        onDone();\n      }\n    });\n  } catch (err) {\n    onDone(err);\n  }\n}\n\n// we track the 'depth' of the act() calls with this counter,\n// so we can tell if any async act() calls try to run in parallel.\n\nlet actingUpdatesScopeDepth = 0;\nlet didWarnAboutUsingActInProd = false;\n\nexport function act(callback: () => Thenable<mixed>): Thenable<void> {\n  if (!__DEV__) {\n    if (didWarnAboutUsingActInProd === false) {\n      didWarnAboutUsingActInProd = true;\n      // eslint-disable-next-line react-internal/no-production-logging\n      console.error(\n        'act(...) is not supported in production builds of React, and might not behave as expected.',\n      );\n    }\n  }\n\n  const previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;\n  actingUpdatesScopeDepth++;\n\n  const previousIsSomeRendererActing = IsSomeRendererActing.current;\n  const previousIsThisRendererActing = IsThisRendererActing.current;\n  const previousIsInsideThisAct = isInsideThisAct;\n  IsSomeRendererActing.current = true;\n  IsThisRendererActing.current = true;\n  isInsideThisAct = true;\n\n  function onDone() {\n    actingUpdatesScopeDepth--;\n    IsSomeRendererActing.current = previousIsSomeRendererActing;\n    IsThisRendererActing.current = previousIsThisRendererActing;\n    isInsideThisAct = previousIsInsideThisAct;\n    if (__DEV__) {\n      if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {\n        // if it's _less than_ previousActingUpdatesScopeDepth, then we can assume the 'other' one has warned\n        console.error(\n          'You seem to have overlapping act() calls, this is not supported. ' +\n            'Be sure to await previous act() calls before making a new one. ',\n        );\n      }\n    }\n  }\n\n  let result;\n  try {\n    result = batchedUpdates(callback);\n  } catch (error) {\n    // on sync errors, we still want to 'cleanup' and decrement actingUpdatesScopeDepth\n    onDone();\n    throw error;\n  }\n\n  if (\n    result !== null &&\n    typeof result === 'object' &&\n    typeof result.then === 'function'\n  ) {\n    // setup a boolean that gets set to true only\n    // once this act() call is await-ed\n    let called = false;\n    if (__DEV__) {\n      if (typeof Promise !== 'undefined') {\n        //eslint-disable-next-line no-undef\n        Promise.resolve()\n          .then(() => {})\n          .then(() => {\n            if (called === false) {\n              console.error(\n                'You called act(async () => ...) without await. ' +\n                  'This could lead to unexpected testing behaviour, interleaving multiple act ' +\n                  'calls and mixing their scopes. You should - await act(async () => ...);',\n              );\n            }\n          });\n      }\n    }\n\n    // in the async case, the returned thenable runs the callback, flushes\n    // effects and  microtasks in a loop until flushPassiveEffects() === false,\n    // and cleans up\n    return {\n      then(resolve, reject) {\n        called = true;\n        result.then(\n          () => {\n            if (\n              actingUpdatesScopeDepth > 1 ||\n              (isSchedulerMocked === true &&\n                previousIsSomeRendererActing === true)\n            ) {\n              onDone();\n              resolve();\n              return;\n            }\n            // we're about to exit the act() scope,\n            // now's the time to flush tasks/effects\n            flushWorkAndMicroTasks((err: ?Error) => {\n              onDone();\n              if (err) {\n                reject(err);\n              } else {\n                resolve();\n              }\n            });\n          },\n          err => {\n            onDone();\n            reject(err);\n          },\n        );\n      },\n    };\n  } else {\n    if (__DEV__) {\n      if (result !== undefined) {\n        console.error(\n          'The callback passed to act(...) function ' +\n            'must return undefined, or a Promise. You returned %s',\n          result,\n        );\n      }\n    }\n\n    // flush effects until none remain, and cleanup\n    try {\n      if (\n        actingUpdatesScopeDepth === 1 &&\n        (isSchedulerMocked === false || previousIsSomeRendererActing === false)\n      ) {\n        // we're about to exit the act() scope,\n        // now's the time to flush effects\n        flushActWork();\n      }\n      onDone();\n    } catch (err) {\n      onDone();\n      throw err;\n    }\n\n    // in the sync case, the returned thenable only warns *if* await-ed\n    return {\n      then(resolve) {\n        if (__DEV__) {\n          console.error(\n            'Do not await the result of calling act(...) with sync logic, it is not a Promise.',\n          );\n        }\n        resolve();\n      },\n    };\n  }\n}\n\nfunction detachFiberAfterEffects(fiber: Fiber): void {\n  fiber.sibling = null;\n  fiber.stateNode = null;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {ReactElement} from 'shared/ReactElementType';\nimport type {\n  ReactFragment,\n  ReactPortal,\n  ReactFundamentalComponent,\n  ReactScope,\n} from 'shared/ReactTypes';\nimport type {Fiber} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {WorkTag} from './ReactWorkTags';\nimport type {TypeOfMode} from './ReactTypeOfMode';\nimport type {Lanes} from './ReactFiberLane';\nimport type {SuspenseInstance} from './ReactFiberHostConfig';\nimport type {OffscreenProps} from './ReactFiberOffscreenComponent';\n\nimport invariant from 'shared/invariant';\nimport {\n  enableProfilerTimer,\n  enableFundamentalAPI,\n  enableScopeAPI,\n  enableBlocksAPI,\n} from 'shared/ReactFeatureFlags';\nimport {NoFlags, Placement} from './ReactFiberFlags';\nimport {ConcurrentRoot, BlockingRoot} from './ReactRootTags';\nimport {\n  IndeterminateComponent,\n  ClassComponent,\n  HostRoot,\n  HostComponent,\n  HostText,\n  HostPortal,\n  ForwardRef,\n  Fragment,\n  Mode,\n  ContextProvider,\n  ContextConsumer,\n  Profiler,\n  SuspenseComponent,\n  SuspenseListComponent,\n  DehydratedFragment,\n  FunctionComponent,\n  MemoComponent,\n  SimpleMemoComponent,\n  LazyComponent,\n  FundamentalComponent,\n  ScopeComponent,\n  Block,\n  OffscreenComponent,\n  LegacyHiddenComponent,\n} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\n\nimport {isDevToolsPresent} from './ReactFiberDevToolsHook.old';\nimport {\n  resolveClassForHotReloading,\n  resolveFunctionForHotReloading,\n  resolveForwardRefForHotReloading,\n} from './ReactFiberHotReloading.old';\nimport {NoLanes} from './ReactFiberLane';\nimport {\n  NoMode,\n  ConcurrentMode,\n  DebugTracingMode,\n  ProfileMode,\n  StrictMode,\n  BlockingMode,\n} from './ReactTypeOfMode';\nimport {\n  REACT_FORWARD_REF_TYPE,\n  REACT_FRAGMENT_TYPE,\n  REACT_DEBUG_TRACING_MODE_TYPE,\n  REACT_STRICT_MODE_TYPE,\n  REACT_PROFILER_TYPE,\n  REACT_PROVIDER_TYPE,\n  REACT_CONTEXT_TYPE,\n  REACT_SUSPENSE_TYPE,\n  REACT_SUSPENSE_LIST_TYPE,\n  REACT_MEMO_TYPE,\n  REACT_LAZY_TYPE,\n  REACT_FUNDAMENTAL_TYPE,\n  REACT_SCOPE_TYPE,\n  REACT_BLOCK_TYPE,\n  REACT_OFFSCREEN_TYPE,\n  REACT_LEGACY_HIDDEN_TYPE,\n} from 'shared/ReactSymbols';\n\nexport type {Fiber};\n\nlet hasBadMapPolyfill;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    const nonExtensibleObject = Object.preventExtensions({});\n    /* eslint-disable no-new */\n    new Map([[nonExtensibleObject, null]]);\n    new Set([nonExtensibleObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\nlet debugCounter = 1;\n\nfunction FiberNode(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.elementType = null;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n  this.dependencies = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.flags = NoFlags;\n  this.nextEffect = null;\n\n  this.firstEffect = null;\n  this.lastEffect = null;\n\n  this.lanes = NoLanes;\n  this.childLanes = NoLanes;\n\n  this.alternate = null;\n\n  if (enableProfilerTimer) {\n    // Note: The following is done to avoid a v8 performance cliff.\n    //\n    // Initializing the fields below to smis and later updating them with\n    // double values will cause Fibers to end up having separate shapes.\n    // This behavior/bug has something to do with Object.preventExtension().\n    // Fortunately this only impacts DEV builds.\n    // Unfortunately it makes React unusably slow for some applications.\n    // To work around this, initialize the fields below with doubles.\n    //\n    // Learn more about this here:\n    // https://github.com/facebook/react/issues/14365\n    // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n    this.actualDuration = Number.NaN;\n    this.actualStartTime = Number.NaN;\n    this.selfBaseDuration = Number.NaN;\n    this.treeBaseDuration = Number.NaN;\n\n    // It's okay to replace the initial doubles with smis after initialization.\n    // This won't trigger the performance cliff mentioned above,\n    // and it simplifies other profiler code (including DevTools).\n    this.actualDuration = 0;\n    this.actualStartTime = -1;\n    this.selfBaseDuration = 0;\n    this.treeBaseDuration = 0;\n  }\n\n  if (__DEV__) {\n    // This isn't directly used but is handy for debugging internals:\n    this._debugID = debugCounter++;\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugNeedsRemount = false;\n    this._debugHookTypes = null;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nconst createFiber = function(\n  tag: WorkTag,\n  pendingProps: mixed,\n  key: null | string,\n  mode: TypeOfMode,\n): Fiber {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component: Function) {\n  const prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nexport function isSimpleFunctionComponent(type: any) {\n  return (\n    typeof type === 'function' &&\n    !shouldConstruct(type) &&\n    type.defaultProps === undefined\n  );\n}\n\nexport function resolveLazyComponentTag(Component: Function): WorkTag {\n  if (typeof Component === 'function') {\n    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n  } else if (Component !== undefined && Component !== null) {\n    const $$typeof = Component.$$typeof;\n    if ($$typeof === REACT_FORWARD_REF_TYPE) {\n      return ForwardRef;\n    }\n    if ($$typeof === REACT_MEMO_TYPE) {\n      return MemoComponent;\n    }\n    if (enableBlocksAPI) {\n      if ($$typeof === REACT_BLOCK_TYPE) {\n        return Block;\n      }\n    }\n  }\n  return IndeterminateComponent;\n}\n\n// This is used to create an alternate fiber to do work on.\nexport function createWorkInProgress(current: Fiber, pendingProps: any): Fiber {\n  let workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(\n      current.tag,\n      pendingProps,\n      current.key,\n      current.mode,\n    );\n    workInProgress.elementType = current.elementType;\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n      workInProgress._debugID = current._debugID;\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n      workInProgress._debugHookTypes = current._debugHookTypes;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.flags = NoFlags;\n\n    // The effect list is no longer valid.\n    workInProgress.nextEffect = null;\n    workInProgress.firstEffect = null;\n    workInProgress.lastEffect = null;\n\n    if (enableProfilerTimer) {\n      // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n      // This prevents time from endlessly accumulating in new commits.\n      // This has the downside of resetting values for different priority renders,\n      // But works for yielding (the common case) and should support resuming.\n      workInProgress.actualDuration = 0;\n      workInProgress.actualStartTime = -1;\n    }\n  }\n\n  workInProgress.childLanes = current.childLanes;\n  workInProgress.lanes = current.lanes;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // Clone the dependencies object. This is mutated during the render phase, so\n  // it cannot be shared with the current fiber.\n  const currentDependencies = current.dependencies;\n  workInProgress.dependencies =\n    currentDependencies === null\n      ? null\n      : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext,\n        };\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  if (enableProfilerTimer) {\n    workInProgress.selfBaseDuration = current.selfBaseDuration;\n    workInProgress.treeBaseDuration = current.treeBaseDuration;\n  }\n\n  if (__DEV__) {\n    workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n    switch (workInProgress.tag) {\n      case IndeterminateComponent:\n      case FunctionComponent:\n      case SimpleMemoComponent:\n        workInProgress.type = resolveFunctionForHotReloading(current.type);\n        break;\n      case ClassComponent:\n        workInProgress.type = resolveClassForHotReloading(current.type);\n        break;\n      case ForwardRef:\n        workInProgress.type = resolveForwardRefForHotReloading(current.type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return workInProgress;\n}\n\n// Used to reuse a Fiber for a second pass.\nexport function resetWorkInProgress(workInProgress: Fiber, renderLanes: Lanes) {\n  // This resets the Fiber to what createFiber or createWorkInProgress would\n  // have set the values to before during the first pass. Ideally this wouldn't\n  // be necessary but unfortunately many code paths reads from the workInProgress\n  // when they should be reading from current and writing to workInProgress.\n\n  // We assume pendingProps, index, key, ref, return are still untouched to\n  // avoid doing another reconciliation.\n\n  // Reset the effect tag but keep any Placement tags, since that's something\n  // that child fiber is setting, not the reconciliation.\n  workInProgress.flags &= Placement;\n\n  // The effect list is no longer valid.\n  workInProgress.nextEffect = null;\n  workInProgress.firstEffect = null;\n  workInProgress.lastEffect = null;\n\n  const current = workInProgress.alternate;\n  if (current === null) {\n    // Reset to createFiber's initial values.\n    workInProgress.childLanes = NoLanes;\n    workInProgress.lanes = renderLanes;\n\n    workInProgress.child = null;\n    workInProgress.memoizedProps = null;\n    workInProgress.memoizedState = null;\n    workInProgress.updateQueue = null;\n\n    workInProgress.dependencies = null;\n\n    workInProgress.stateNode = null;\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = 0;\n      workInProgress.treeBaseDuration = 0;\n    }\n  } else {\n    // Reset to the cloned values that createWorkInProgress would've.\n    workInProgress.childLanes = current.childLanes;\n    workInProgress.lanes = current.lanes;\n\n    workInProgress.child = current.child;\n    workInProgress.memoizedProps = current.memoizedProps;\n    workInProgress.memoizedState = current.memoizedState;\n    workInProgress.updateQueue = current.updateQueue;\n    // Needed because Blocks store data on type.\n    workInProgress.type = current.type;\n\n    // Clone the dependencies object. This is mutated during the render phase, so\n    // it cannot be shared with the current fiber.\n    const currentDependencies = current.dependencies;\n    workInProgress.dependencies =\n      currentDependencies === null\n        ? null\n        : {\n            lanes: currentDependencies.lanes,\n            firstContext: currentDependencies.firstContext,\n          };\n\n    if (enableProfilerTimer) {\n      // Note: We don't reset the actualTime counts. It's useful to accumulate\n      // actual time across multiple render passes.\n      workInProgress.selfBaseDuration = current.selfBaseDuration;\n      workInProgress.treeBaseDuration = current.treeBaseDuration;\n    }\n  }\n\n  return workInProgress;\n}\n\nexport function createHostRootFiber(tag: RootTag): Fiber {\n  let mode;\n  if (tag === ConcurrentRoot) {\n    mode = ConcurrentMode | BlockingMode | StrictMode;\n  } else if (tag === BlockingRoot) {\n    mode = BlockingMode | StrictMode;\n  } else {\n    mode = NoMode;\n  }\n\n  if (enableProfilerTimer && isDevToolsPresent) {\n    // Always collect profile timings when DevTools are present.\n    // This enables DevTools to start capturing timing at any point–\n    // Without some nodes in the tree having empty base times.\n    mode |= ProfileMode;\n  }\n\n  return createFiber(HostRoot, null, null, mode);\n}\n\nexport function createFiberFromTypeAndProps(\n  type: any, // React$ElementType\n  key: null | string,\n  pendingProps: any,\n  owner: null | Fiber,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let fiberTag = IndeterminateComponent;\n  // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n  let resolvedType = type;\n  if (typeof type === 'function') {\n    if (shouldConstruct(type)) {\n      fiberTag = ClassComponent;\n      if (__DEV__) {\n        resolvedType = resolveClassForHotReloading(resolvedType);\n      }\n    } else {\n      if (__DEV__) {\n        resolvedType = resolveFunctionForHotReloading(resolvedType);\n      }\n    }\n  } else if (typeof type === 'string') {\n    fiberTag = HostComponent;\n  } else {\n    getTag: switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n      case REACT_DEBUG_TRACING_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= DebugTracingMode;\n        break;\n      case REACT_STRICT_MODE_TYPE:\n        fiberTag = Mode;\n        mode |= StrictMode;\n        break;\n      case REACT_PROFILER_TYPE:\n        return createFiberFromProfiler(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_TYPE:\n        return createFiberFromSuspense(pendingProps, mode, lanes, key);\n      case REACT_SUSPENSE_LIST_TYPE:\n        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n      case REACT_OFFSCREEN_TYPE:\n        return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n      case REACT_LEGACY_HIDDEN_TYPE:\n        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);\n      case REACT_SCOPE_TYPE:\n        if (enableScopeAPI) {\n          return createFiberFromScope(type, pendingProps, mode, lanes, key);\n        }\n      // eslint-disable-next-line no-fallthrough\n      default: {\n        if (typeof type === 'object' && type !== null) {\n          switch (type.$$typeof) {\n            case REACT_PROVIDER_TYPE:\n              fiberTag = ContextProvider;\n              break getTag;\n            case REACT_CONTEXT_TYPE:\n              // This is a consumer\n              fiberTag = ContextConsumer;\n              break getTag;\n            case REACT_FORWARD_REF_TYPE:\n              fiberTag = ForwardRef;\n              if (__DEV__) {\n                resolvedType = resolveForwardRefForHotReloading(resolvedType);\n              }\n              break getTag;\n            case REACT_MEMO_TYPE:\n              fiberTag = MemoComponent;\n              break getTag;\n            case REACT_LAZY_TYPE:\n              fiberTag = LazyComponent;\n              resolvedType = null;\n              break getTag;\n            case REACT_BLOCK_TYPE:\n              fiberTag = Block;\n              break getTag;\n            case REACT_FUNDAMENTAL_TYPE:\n              if (enableFundamentalAPI) {\n                return createFiberFromFundamental(\n                  type,\n                  pendingProps,\n                  mode,\n                  lanes,\n                  key,\n                );\n              }\n              break;\n          }\n        }\n        let info = '';\n        if (__DEV__) {\n          if (\n            type === undefined ||\n            (typeof type === 'object' &&\n              type !== null &&\n              Object.keys(type).length === 0)\n          ) {\n            info +=\n              ' You likely forgot to export your component from the file ' +\n              \"it's defined in, or you might have mixed up default and \" +\n              'named imports.';\n          }\n          const ownerName = owner ? getComponentName(owner.type) : null;\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n        }\n        invariant(\n          false,\n          'Element type is invalid: expected a string (for built-in ' +\n            'components) or a class/function (for composite components) ' +\n            'but got: %s.%s',\n          type == null ? type : typeof type,\n          info,\n        );\n      }\n    }\n  }\n\n  const fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.elementType = type;\n  fiber.type = resolvedType;\n  fiber.lanes = lanes;\n\n  if (__DEV__) {\n    fiber._debugOwner = owner;\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromElement(\n  element: ReactElement,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  let owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n  const type = element.type;\n  const key = element.key;\n  const pendingProps = element.props;\n  const fiber = createFiberFromTypeAndProps(\n    type,\n    key,\n    pendingProps,\n    owner,\n    mode,\n    lanes,\n  );\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n  return fiber;\n}\n\nexport function createFiberFromFragment(\n  elements: ReactFragment,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(Fragment, elements, key, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromFundamental(\n  fundamentalComponent: ReactFundamentalComponent<any, any>,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  const fiber = createFiber(FundamentalComponent, pendingProps, key, mode);\n  fiber.elementType = fundamentalComponent;\n  fiber.type = fundamentalComponent;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromScope(\n  scope: ReactScope,\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(ScopeComponent, pendingProps, key, mode);\n  fiber.type = scope;\n  fiber.elementType = scope;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nfunction createFiberFromProfiler(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n): Fiber {\n  if (__DEV__) {\n    if (typeof pendingProps.id !== 'string') {\n      console.error('Profiler must specify an \"id\" as a prop');\n    }\n  }\n\n  const fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n  // TODO: The Profiler fiber shouldn't have a type. It has a tag.\n  fiber.elementType = REACT_PROFILER_TYPE;\n  fiber.type = REACT_PROFILER_TYPE;\n  fiber.lanes = lanes;\n\n  if (enableProfilerTimer) {\n    fiber.stateNode = {\n      effectDuration: 0,\n      passiveEffectDuration: 0,\n    };\n  }\n\n  return fiber;\n}\n\nexport function createFiberFromSuspense(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n\n  // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  fiber.type = REACT_SUSPENSE_TYPE;\n  fiber.elementType = REACT_SUSPENSE_TYPE;\n\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromSuspenseList(\n  pendingProps: any,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n  if (__DEV__) {\n    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.\n    // This needs to be fixed in getComponentName so that it relies on the tag\n    // instead.\n    fiber.type = REACT_SUSPENSE_LIST_TYPE;\n  }\n  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromOffscreen(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n  // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  if (__DEV__) {\n    fiber.type = REACT_OFFSCREEN_TYPE;\n  }\n  fiber.elementType = REACT_OFFSCREEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromLegacyHidden(\n  pendingProps: OffscreenProps,\n  mode: TypeOfMode,\n  lanes: Lanes,\n  key: null | string,\n) {\n  const fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);\n  // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.\n  // This needs to be fixed in getComponentName so that it relies on the tag\n  // instead.\n  if (__DEV__) {\n    fiber.type = REACT_LEGACY_HIDDEN_TYPE;\n  }\n  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromText(\n  content: string,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const fiber = createFiber(HostText, content, null, mode);\n  fiber.lanes = lanes;\n  return fiber;\n}\n\nexport function createFiberFromHostInstanceForDeletion(): Fiber {\n  const fiber = createFiber(HostComponent, null, null, NoMode);\n  // TODO: These should not need a type.\n  fiber.elementType = 'DELETED';\n  fiber.type = 'DELETED';\n  return fiber;\n}\n\nexport function createFiberFromDehydratedFragment(\n  dehydratedNode: SuspenseInstance,\n): Fiber {\n  const fiber = createFiber(DehydratedFragment, null, null, NoMode);\n  fiber.stateNode = dehydratedNode;\n  return fiber;\n}\n\nexport function createFiberFromPortal(\n  portal: ReactPortal,\n  mode: TypeOfMode,\n  lanes: Lanes,\n): Fiber {\n  const pendingProps = portal.children !== null ? portal.children : [];\n  const fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n  fiber.lanes = lanes;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation,\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nexport function assignFiberPropertiesInDEV(\n  target: Fiber | null,\n  source: Fiber,\n): Fiber {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(IndeterminateComponent, null, null, NoMode);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.elementType = source.elementType;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.dependencies = source.dependencies;\n  target.mode = source.mode;\n  target.flags = source.flags;\n  target.nextEffect = source.nextEffect;\n  target.firstEffect = source.firstEffect;\n  target.lastEffect = source.lastEffect;\n  target.lanes = source.lanes;\n  target.childLanes = source.childLanes;\n  target.alternate = source.alternate;\n  if (enableProfilerTimer) {\n    target.actualDuration = source.actualDuration;\n    target.actualStartTime = source.actualStartTime;\n    target.selfBaseDuration = source.selfBaseDuration;\n    target.treeBaseDuration = source.treeBaseDuration;\n  }\n  target._debugID = source._debugID;\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugNeedsRemount = source._debugNeedsRemount;\n  target._debugHookTypes = source._debugHookTypes;\n  return target;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {FiberRoot, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\n\nimport {noTimeout, supportsHydration} from './ReactFiberHostConfig';\nimport {createHostRootFiber} from './ReactFiber.old';\nimport {\n  NoLanes,\n  NoLanePriority,\n  NoTimestamp,\n  createLaneMap,\n} from './ReactFiberLane';\nimport {\n  enableSchedulerTracing,\n  enableSuspenseCallback,\n} from 'shared/ReactFeatureFlags';\nimport {unstable_getThreadID} from 'scheduler/tracing';\nimport {initializeUpdateQueue} from './ReactUpdateQueue.old';\nimport {LegacyRoot, BlockingRoot, ConcurrentRoot} from './ReactRootTags';\n\nfunction FiberRootNode(containerInfo, tag, hydrate) {\n  this.tag = tag;\n  this.containerInfo = containerInfo;\n  this.pendingChildren = null;\n  this.current = null;\n  this.pingCache = null;\n  this.finishedWork = null;\n  this.timeoutHandle = noTimeout;\n  this.context = null;\n  this.pendingContext = null;\n  this.hydrate = hydrate;\n  this.callbackNode = null;\n  this.callbackPriority = NoLanePriority;\n  this.eventTimes = createLaneMap(NoLanes);\n  this.expirationTimes = createLaneMap(NoTimestamp);\n\n  this.pendingLanes = NoLanes;\n  this.suspendedLanes = NoLanes;\n  this.pingedLanes = NoLanes;\n  this.expiredLanes = NoLanes;\n  this.mutableReadLanes = NoLanes;\n  this.finishedLanes = NoLanes;\n\n  this.entangledLanes = NoLanes;\n  this.entanglements = createLaneMap(NoLanes);\n\n  if (supportsHydration) {\n    this.mutableSourceEagerHydrationData = null;\n  }\n\n  if (enableSchedulerTracing) {\n    this.interactionThreadID = unstable_getThreadID();\n    this.memoizedInteractions = new Set();\n    this.pendingInteractionMap = new Map();\n  }\n  if (enableSuspenseCallback) {\n    this.hydrationCallbacks = null;\n  }\n\n  if (__DEV__) {\n    switch (tag) {\n      case BlockingRoot:\n        this._debugRootType = 'createBlockingRoot()';\n        break;\n      case ConcurrentRoot:\n        this._debugRootType = 'createRoot()';\n        break;\n      case LegacyRoot:\n        this._debugRootType = 'createLegacyRoot()';\n        break;\n    }\n  }\n}\n\nexport function createFiberRoot(\n  containerInfo: any,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n): FiberRoot {\n  const root: FiberRoot = (new FiberRootNode(containerInfo, tag, hydrate): any);\n  if (enableSuspenseCallback) {\n    root.hydrationCallbacks = hydrationCallbacks;\n  }\n\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  const uninitializedFiber = createHostRootFiber(tag);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n\n  initializeUpdateQueue(uninitializedFiber);\n\n  return root;\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Fiber, SuspenseHydrationCallbacks} from './ReactInternalTypes';\nimport type {FiberRoot} from './ReactInternalTypes';\nimport type {RootTag} from './ReactRootTags';\nimport type {\n  Instance,\n  TextInstance,\n  Container,\n  PublicInstance,\n} from './ReactFiberHostConfig';\nimport type {RendererInspectionConfig} from './ReactFiberHostConfig';\nimport {FundamentalComponent} from './ReactWorkTags';\nimport type {ReactNodeList} from 'shared/ReactTypes';\nimport type {Lane, LanePriority} from './ReactFiberLane';\nimport type {SuspenseState} from './ReactFiberSuspenseComponent.old';\n\nimport {\n  findCurrentHostFiber,\n  findCurrentHostFiberWithNoPortals,\n} from './ReactFiberTreeReflection';\nimport {get as getInstance} from 'shared/ReactInstanceMap';\nimport {\n  HostComponent,\n  ClassComponent,\n  HostRoot,\n  SuspenseComponent,\n} from './ReactWorkTags';\nimport getComponentName from 'shared/getComponentName';\nimport invariant from 'shared/invariant';\nimport {enableSchedulingProfiler} from 'shared/ReactFeatureFlags';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport {getPublicInstance} from './ReactFiberHostConfig';\nimport {\n  findCurrentUnmaskedContext,\n  processChildContext,\n  emptyContextObject,\n  isContextProvider as isLegacyContextProvider,\n} from './ReactFiberContext.old';\nimport {createFiberRoot} from './ReactFiberRoot.old';\nimport {injectInternals, onScheduleRoot} from './ReactFiberDevToolsHook.old';\nimport {\n  requestEventTime,\n  requestUpdateLane,\n  scheduleUpdateOnFiber,\n  flushRoot,\n  batchedEventUpdates,\n  batchedUpdates,\n  unbatchedUpdates,\n  flushSync,\n  flushControlled,\n  deferredUpdates,\n  discreteUpdates,\n  flushDiscreteUpdates,\n  flushPassiveEffects,\n  warnIfNotScopedWithMatchingAct,\n  warnIfUnmockedScheduler,\n  IsThisRendererActing,\n  act,\n} from './ReactFiberWorkLoop.old';\nimport {createUpdate, enqueueUpdate} from './ReactUpdateQueue.old';\nimport {\n  isRendering as ReactCurrentFiberIsRendering,\n  current as ReactCurrentFiberCurrent,\n  resetCurrentFiber as resetCurrentDebugFiberInDEV,\n  setCurrentFiber as setCurrentDebugFiberInDEV,\n} from './ReactCurrentFiber';\nimport {StrictMode} from './ReactTypeOfMode';\nimport {\n  SyncLane,\n  InputDiscreteHydrationLane,\n  SelectiveHydrationLane,\n  NoTimestamp,\n  getHighestPriorityPendingLanes,\n  higherPriorityLane,\n  getCurrentUpdateLanePriority,\n  setCurrentUpdateLanePriority,\n} from './ReactFiberLane';\nimport {\n  scheduleRefresh,\n  scheduleRoot,\n  setRefreshHandler,\n  findHostInstancesForRefresh,\n} from './ReactFiberHotReloading.old';\nimport {markRenderScheduled} from './SchedulingProfiler';\n\nexport {registerMutableSourceForHydration} from './ReactMutableSource.new';\nexport {createPortal} from './ReactPortal';\nexport {\n  createComponentSelector,\n  createHasPsuedoClassSelector,\n  createRoleSelector,\n  createTestNameSelector,\n  createTextSelector,\n  getFindAllNodesFailureDescription,\n  findAllNodes,\n  findBoundingRects,\n  focusWithin,\n  observeVisibleRects,\n} from './ReactTestSelectors';\n\ntype OpaqueRoot = FiberRoot;\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\ntype BundleType = 0 | 1;\n\ntype DevToolsConfig = {|\n  bundleType: BundleType,\n  version: string,\n  rendererPackageName: string,\n  // Note: this actually *does* depend on Fiber internal fields.\n  // Used by \"inspect clicked DOM element\" in React DevTools.\n  findFiberByHostInstance?: (instance: Instance | TextInstance) => Fiber | null,\n  rendererConfig?: RendererInspectionConfig,\n|};\n\nlet didWarnAboutNestedUpdates;\nlet didWarnAboutFindNodeInStrictMode;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n  didWarnAboutFindNodeInStrictMode = {};\n}\n\nfunction getContextForSubtree(\n  parentComponent: ?React$Component<any, any>,\n): Object {\n  if (!parentComponent) {\n    return emptyContextObject;\n  }\n\n  const fiber = getInstance(parentComponent);\n  const parentContext = findCurrentUnmaskedContext(fiber);\n\n  if (fiber.tag === ClassComponent) {\n    const Component = fiber.type;\n    if (isLegacyContextProvider(Component)) {\n      return processChildContext(fiber, Component, parentContext);\n    }\n  }\n\n  return parentContext;\n}\n\nfunction findHostInstance(component: Object): PublicInstance | null {\n  const fiber = getInstance(component);\n  if (fiber === undefined) {\n    if (typeof component.render === 'function') {\n      invariant(false, 'Unable to find node on an unmounted component.');\n    } else {\n      invariant(\n        false,\n        'Argument appears to not be a ReactComponent. Keys: %s',\n        Object.keys(component),\n      );\n    }\n  }\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction findHostInstanceWithWarning(\n  component: Object,\n  methodName: string,\n): PublicInstance | null {\n  if (__DEV__) {\n    const fiber = getInstance(component);\n    if (fiber === undefined) {\n      if (typeof component.render === 'function') {\n        invariant(false, 'Unable to find node on an unmounted component.');\n      } else {\n        invariant(\n          false,\n          'Argument appears to not be a ReactComponent. Keys: %s',\n          Object.keys(component),\n        );\n      }\n    }\n    const hostFiber = findCurrentHostFiber(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    if (hostFiber.mode & StrictMode) {\n      const componentName = getComponentName(fiber.type) || 'Component';\n      if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n        didWarnAboutFindNodeInStrictMode[componentName] = true;\n\n        const previousFiber = ReactCurrentFiberCurrent;\n        try {\n          setCurrentDebugFiberInDEV(hostFiber);\n          if (fiber.mode & StrictMode) {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which is inside StrictMode. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          } else {\n            console.error(\n              '%s is deprecated in StrictMode. ' +\n                '%s was passed an instance of %s which renders StrictMode children. ' +\n                'Instead, add a ref directly to the element you want to reference. ' +\n                'Learn more about using refs safely here: ' +\n                'https://reactjs.org/link/strict-mode-find-node',\n              methodName,\n              methodName,\n              componentName,\n            );\n          }\n        } finally {\n          // Ideally this should reset to previous but this shouldn't be called in\n          // render and there's another warning for that anyway.\n          if (previousFiber) {\n            setCurrentDebugFiberInDEV(previousFiber);\n          } else {\n            resetCurrentDebugFiberInDEV();\n          }\n        }\n      }\n    }\n    return hostFiber.stateNode;\n  }\n  return findHostInstance(component);\n}\n\nexport function createContainer(\n  containerInfo: Container,\n  tag: RootTag,\n  hydrate: boolean,\n  hydrationCallbacks: null | SuspenseHydrationCallbacks,\n): OpaqueRoot {\n  return createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks);\n}\n\nexport function updateContainer(\n  element: ReactNodeList,\n  container: OpaqueRoot,\n  parentComponent: ?React$Component<any, any>,\n  callback: ?Function,\n): Lane {\n  if (__DEV__) {\n    onScheduleRoot(container, element);\n  }\n  const current = container.current;\n  const eventTime = requestEventTime();\n  if (__DEV__) {\n    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests\n    if ('undefined' !== typeof jest) {\n      warnIfUnmockedScheduler(current);\n      warnIfNotScopedWithMatchingAct(current);\n    }\n  }\n  const lane = requestUpdateLane(current);\n\n  if (enableSchedulingProfiler) {\n    markRenderScheduled(lane);\n  }\n\n  const context = getContextForSubtree(parentComponent);\n  if (container.context === null) {\n    container.context = context;\n  } else {\n    container.pendingContext = context;\n  }\n\n  if (__DEV__) {\n    if (\n      ReactCurrentFiberIsRendering &&\n      ReactCurrentFiberCurrent !== null &&\n      !didWarnAboutNestedUpdates\n    ) {\n      didWarnAboutNestedUpdates = true;\n      console.error(\n        'Render methods should be a pure function of props and state; ' +\n          'triggering nested component updates from render is not allowed. ' +\n          'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' +\n          'Check the render method of %s.',\n        getComponentName(ReactCurrentFiberCurrent.type) || 'Unknown',\n      );\n    }\n  }\n\n  const update = createUpdate(eventTime, lane);\n  // Caution: React DevTools currently depends on this property\n  // being called \"element\".\n  update.payload = {element};\n\n  callback = callback === undefined ? null : callback;\n  if (callback !== null) {\n    if (__DEV__) {\n      if (typeof callback !== 'function') {\n        console.error(\n          'render(...): Expected the last optional `callback` argument to be a ' +\n            'function. Instead received: %s.',\n          callback,\n        );\n      }\n    }\n    update.callback = callback;\n  }\n\n  enqueueUpdate(current, update);\n  scheduleUpdateOnFiber(current, lane, eventTime);\n\n  return lane;\n}\n\nexport {\n  batchedEventUpdates,\n  batchedUpdates,\n  unbatchedUpdates,\n  deferredUpdates,\n  discreteUpdates,\n  flushDiscreteUpdates,\n  flushControlled,\n  flushSync,\n  flushPassiveEffects,\n  IsThisRendererActing,\n  act,\n};\n\nexport function getPublicRootInstance(\n  container: OpaqueRoot,\n): React$Component<any, any> | PublicInstance | null {\n  const containerFiber = container.current;\n  if (!containerFiber.child) {\n    return null;\n  }\n  switch (containerFiber.child.tag) {\n    case HostComponent:\n      return getPublicInstance(containerFiber.child.stateNode);\n    default:\n      return containerFiber.child.stateNode;\n  }\n}\n\nexport function attemptSynchronousHydration(fiber: Fiber): void {\n  switch (fiber.tag) {\n    case HostRoot:\n      const root: FiberRoot = fiber.stateNode;\n      if (root.hydrate) {\n        // Flush the first scheduled \"update\".\n        const lanes = getHighestPriorityPendingLanes(root);\n        flushRoot(root, lanes);\n      }\n      break;\n    case SuspenseComponent:\n      const eventTime = requestEventTime();\n      flushSync(() => scheduleUpdateOnFiber(fiber, SyncLane, eventTime));\n      // If we're still blocked after this, we need to increase\n      // the priority of any promises resolving within this\n      // boundary so that they next attempt also has higher pri.\n      const retryLane = InputDiscreteHydrationLane;\n      markRetryLaneIfNotHydrated(fiber, retryLane);\n      break;\n  }\n}\n\nfunction markRetryLaneImpl(fiber: Fiber, retryLane: Lane) {\n  const suspenseState: null | SuspenseState = fiber.memoizedState;\n  if (suspenseState !== null && suspenseState.dehydrated !== null) {\n    suspenseState.retryLane = higherPriorityLane(\n      suspenseState.retryLane,\n      retryLane,\n    );\n  }\n}\n\n// Increases the priority of thennables when they resolve within this boundary.\nfunction markRetryLaneIfNotHydrated(fiber: Fiber, retryLane: Lane) {\n  markRetryLaneImpl(fiber, retryLane);\n  const alternate = fiber.alternate;\n  if (alternate) {\n    markRetryLaneImpl(alternate, retryLane);\n  }\n}\n\nexport function attemptUserBlockingHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = InputDiscreteHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptContinuousHydration(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority and they should not suspend on I/O,\n    // since you have to wrap anything that might suspend in\n    // Suspense.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = SelectiveHydrationLane;\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function attemptHydrationAtCurrentPriority(fiber: Fiber): void {\n  if (fiber.tag !== SuspenseComponent) {\n    // We ignore HostRoots here because we can't increase\n    // their priority other than synchronously flush it.\n    return;\n  }\n  const eventTime = requestEventTime();\n  const lane = requestUpdateLane(fiber);\n  scheduleUpdateOnFiber(fiber, lane, eventTime);\n  markRetryLaneIfNotHydrated(fiber, lane);\n}\n\nexport function runWithPriority<T>(priority: LanePriority, fn: () => T) {\n  const previousPriority = getCurrentUpdateLanePriority();\n  try {\n    setCurrentUpdateLanePriority(priority);\n    return fn();\n  } finally {\n    setCurrentUpdateLanePriority(previousPriority);\n  }\n}\n\nexport {getCurrentUpdateLanePriority};\n\nexport {findHostInstance};\n\nexport {findHostInstanceWithWarning};\n\nexport function findHostInstanceWithNoPortals(\n  fiber: Fiber,\n): PublicInstance | null {\n  const hostFiber = findCurrentHostFiberWithNoPortals(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  if (hostFiber.tag === FundamentalComponent) {\n    return hostFiber.stateNode.instance;\n  }\n  return hostFiber.stateNode;\n}\n\nlet shouldSuspendImpl = fiber => false;\n\nexport function shouldSuspend(fiber: Fiber): boolean {\n  return shouldSuspendImpl(fiber);\n}\n\nlet overrideHookState = null;\nlet overrideHookStateDeletePath = null;\nlet overrideHookStateRenamePath = null;\nlet overrideProps = null;\nlet overridePropsDeletePath = null;\nlet overridePropsRenamePath = null;\nlet scheduleUpdate = null;\nlet setSuspenseHandler = null;\n\nif (__DEV__) {\n  const copyWithDeleteImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n  ) => {\n    const key = path[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === path.length) {\n      if (Array.isArray(updated)) {\n        updated.splice(((key: any): number), 1);\n      } else {\n        delete updated[key];\n      }\n      return updated;\n    }\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n    return updated;\n  };\n\n  const copyWithDelete = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n  ): Object | Array<any> => {\n    return copyWithDeleteImpl(obj, path, 0);\n  };\n\n  const copyWithRenameImpl = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n    index: number,\n  ) => {\n    const oldKey = oldPath[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    if (index + 1 === oldPath.length) {\n      const newKey = newPath[index];\n      // $FlowFixMe number or string is fine here\n      updated[newKey] = updated[oldKey];\n      if (Array.isArray(updated)) {\n        updated.splice(((oldKey: any): number), 1);\n      } else {\n        delete updated[oldKey];\n      }\n    } else {\n      // $FlowFixMe number or string is fine here\n      updated[oldKey] = copyWithRenameImpl(\n        // $FlowFixMe number or string is fine here\n        obj[oldKey],\n        oldPath,\n        newPath,\n        index + 1,\n      );\n    }\n    return updated;\n  };\n\n  const copyWithRename = (\n    obj: Object | Array<any>,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ): Object | Array<any> => {\n    if (oldPath.length !== newPath.length) {\n      console.warn('copyWithRename() expects paths of the same length');\n      return;\n    } else {\n      for (let i = 0; i < newPath.length - 1; i++) {\n        if (oldPath[i] !== newPath[i]) {\n          console.warn(\n            'copyWithRename() expects paths to be the same except for the deepest key',\n          );\n          return;\n        }\n      }\n    }\n    return copyWithRenameImpl(obj, oldPath, newPath, 0);\n  };\n\n  const copyWithSetImpl = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    index: number,\n    value: any,\n  ) => {\n    if (index >= path.length) {\n      return value;\n    }\n    const key = path[index];\n    const updated = Array.isArray(obj) ? obj.slice() : {...obj};\n    // $FlowFixMe number or string is fine here\n    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n    return updated;\n  };\n\n  const copyWithSet = (\n    obj: Object | Array<any>,\n    path: Array<string | number>,\n    value: any,\n  ): Object | Array<any> => {\n    return copyWithSetImpl(obj, path, 0, value);\n  };\n\n  const findHook = (fiber: Fiber, id: number) => {\n    // For now, the \"id\" of stateful hooks is just the stateful hook index.\n    // This may change in the future with e.g. nested hooks.\n    let currentHook = fiber.memoizedState;\n    while (currentHook !== null && id > 0) {\n      currentHook = currentHook.next;\n      id--;\n    }\n    return currentHook;\n  };\n\n  // Support DevTools editable values for useState and useReducer.\n  overrideHookState = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n    value: any,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithSet(hook.memoizedState, path, value);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateDeletePath = (\n    fiber: Fiber,\n    id: number,\n    path: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithDelete(hook.memoizedState, path);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n  overrideHookStateRenamePath = (\n    fiber: Fiber,\n    id: number,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    const hook = findHook(fiber, id);\n    if (hook !== null) {\n      const newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n      hook.memoizedState = newState;\n      hook.baseState = newState;\n\n      // We aren't actually adding an update to the queue,\n      // because there is no update we can add for useReducer hooks that won't trigger an error.\n      // (There's no appropriate action type for DevTools overrides.)\n      // As a result though, React will see the scheduled update as a noop and bailout.\n      // Shallow cloning props works as a workaround for now to bypass the bailout check.\n      fiber.memoizedProps = {...fiber.memoizedProps};\n\n      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n    }\n  };\n\n  // Support DevTools props for function components, forwardRef, memo, host components, etc.\n  overrideProps = (fiber: Fiber, path: Array<string | number>, value: any) => {\n    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsDeletePath = (fiber: Fiber, path: Array<string | number>) => {\n    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n  overridePropsRenamePath = (\n    fiber: Fiber,\n    oldPath: Array<string | number>,\n    newPath: Array<string | number>,\n  ) => {\n    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n    if (fiber.alternate) {\n      fiber.alternate.pendingProps = fiber.pendingProps;\n    }\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  scheduleUpdate = (fiber: Fiber) => {\n    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);\n  };\n\n  setSuspenseHandler = (newShouldSuspendImpl: Fiber => boolean) => {\n    shouldSuspendImpl = newShouldSuspendImpl;\n  };\n}\n\nfunction findHostInstanceByFiber(fiber: Fiber): Instance | TextInstance | null {\n  const hostFiber = findCurrentHostFiber(fiber);\n  if (hostFiber === null) {\n    return null;\n  }\n  return hostFiber.stateNode;\n}\n\nfunction emptyFindFiberByHostInstance(\n  instance: Instance | TextInstance,\n): Fiber | null {\n  return null;\n}\n\nfunction getCurrentFiberForDevTools() {\n  return ReactCurrentFiberCurrent;\n}\n\nexport function injectIntoDevTools(devToolsConfig: DevToolsConfig): boolean {\n  const {findFiberByHostInstance} = devToolsConfig;\n  const {ReactCurrentDispatcher} = ReactSharedInternals;\n\n  return injectInternals({\n    bundleType: devToolsConfig.bundleType,\n    version: devToolsConfig.version,\n    rendererPackageName: devToolsConfig.rendererPackageName,\n    rendererConfig: devToolsConfig.rendererConfig,\n    overrideHookState,\n    overrideHookStateDeletePath,\n    overrideHookStateRenamePath,\n    overrideProps,\n    overridePropsDeletePath,\n    overridePropsRenamePath,\n    setSuspenseHandler,\n    scheduleUpdate,\n    currentDispatcherRef: ReactCurrentDispatcher,\n    findHostInstanceByFiber,\n    findFiberByHostInstance:\n      findFiberByHostInstance || emptyFindFiberByHostInstance,\n    // React Refresh\n    findHostInstancesForRefresh: __DEV__ ? findHostInstancesForRefresh : null,\n    scheduleRefresh: __DEV__ ? scheduleRefresh : null,\n    scheduleRoot: __DEV__ ? scheduleRoot : null,\n    setRefreshHandler: __DEV__ ? setRefreshHandler : null,\n    // Enables DevTools to append owner stacks to error messages in DEV mode.\n    getCurrentFiber: __DEV__ ? getCurrentFiberForDevTools : null,\n  });\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Thenable} from 'shared/ReactTypes';\nimport type {Fiber} from 'react-reconciler/src/ReactInternalTypes';\nimport type {FiberRoot} from 'react-reconciler/src/ReactInternalTypes';\nimport type {Instance, TextInstance} from './ReactTestHostConfig';\n\nimport * as Scheduler from 'scheduler/unstable_mock';\nimport {\n  getPublicRootInstance,\n  createContainer,\n  updateContainer,\n  flushSync,\n  injectIntoDevTools,\n  batchedUpdates,\n  act,\n  IsThisRendererActing,\n} from 'react-reconciler/src/ReactFiberReconciler';\nimport {findCurrentFiberUsingSlowPath} from 'react-reconciler/src/ReactFiberTreeReflection';\nimport {\n  Fragment,\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  HostPortal,\n  HostText,\n  HostRoot,\n  ContextConsumer,\n  ContextProvider,\n  Mode,\n  ForwardRef,\n  Profiler,\n  MemoComponent,\n  SimpleMemoComponent,\n  Block,\n  IncompleteClassComponent,\n  ScopeComponent,\n} from 'react-reconciler/src/ReactWorkTags';\nimport invariant from 'shared/invariant';\nimport getComponentName from 'shared/getComponentName';\nimport ReactVersion from 'shared/ReactVersion';\nimport ReactSharedInternals from 'shared/ReactSharedInternals';\nimport enqueueTask from 'shared/enqueueTask';\n\nimport {getPublicInstance} from './ReactTestHostConfig';\nimport {ConcurrentRoot, LegacyRoot} from 'react-reconciler/src/ReactRootTags';\n\nconst {IsSomeRendererActing} = ReactSharedInternals;\n\ntype TestRendererOptions = {\n  createNodeMock: (element: React$Element<any>) => any,\n  unstable_isConcurrent: boolean,\n  ...\n};\n\ntype ReactTestRendererJSON = {|\n  type: string,\n  props: {[propName: string]: any, ...},\n  children: null | Array<ReactTestRendererNode>,\n  $$typeof?: Symbol, // Optional because we add it with defineProperty().\n|};\ntype ReactTestRendererNode = ReactTestRendererJSON | string;\n\ntype FindOptions = $Shape<{\n  // performs a \"greedy\" search: if a matching node is found, will continue\n  // to search within the matching node's children. (default: true)\n  deep: boolean,\n  ...\n}>;\n\nexport type Predicate = (node: ReactTestInstance) => ?boolean;\n\nconst defaultTestOptions = {\n  createNodeMock: function() {\n    return null;\n  },\n};\n\nfunction toJSON(inst: Instance | TextInstance): ReactTestRendererNode | null {\n  if (inst.isHidden) {\n    // Omit timed out children from output entirely. This seems like the least\n    // surprising behavior. We could perhaps add a separate API that includes\n    // them, if it turns out people need it.\n    return null;\n  }\n  switch (inst.tag) {\n    case 'TEXT':\n      return inst.text;\n    case 'INSTANCE': {\n      /* eslint-disable no-unused-vars */\n      // We don't include the `children` prop in JSON.\n      // Instead, we will include the actual rendered children.\n      const {children, ...props} = inst.props;\n      /* eslint-enable */\n      let renderedChildren = null;\n      if (inst.children && inst.children.length) {\n        for (let i = 0; i < inst.children.length; i++) {\n          const renderedChild = toJSON(inst.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      const json: ReactTestRendererJSON = {\n        type: inst.type,\n        props: props,\n        children: renderedChildren,\n      };\n      Object.defineProperty(json, '$$typeof', {\n        value: Symbol.for('react.test.json'),\n      });\n      return json;\n    }\n    default:\n      throw new Error(`Unexpected node type in toJSON: ${inst.tag}`);\n  }\n}\n\nfunction childrenToTree(node) {\n  if (!node) {\n    return null;\n  }\n  const children = nodeAndSiblingsArray(node);\n  if (children.length === 0) {\n    return null;\n  } else if (children.length === 1) {\n    return toTree(children[0]);\n  }\n  return flatten(children.map(toTree));\n}\n\nfunction nodeAndSiblingsArray(nodeWithSibling) {\n  const array = [];\n  let node = nodeWithSibling;\n  while (node != null) {\n    array.push(node);\n    node = node.sibling;\n  }\n  return array;\n}\n\nfunction flatten(arr) {\n  const result = [];\n  const stack = [{i: 0, array: arr}];\n  while (stack.length) {\n    const n = stack.pop();\n    while (n.i < n.array.length) {\n      const el = n.array[n.i];\n      n.i += 1;\n      if (Array.isArray(el)) {\n        stack.push(n);\n        stack.push({i: 0, array: el});\n        break;\n      }\n      result.push(el);\n    }\n  }\n  return result;\n}\n\nfunction toTree(node: ?Fiber) {\n  if (node == null) {\n    return null;\n  }\n  switch (node.tag) {\n    case HostRoot:\n      return childrenToTree(node.child);\n    case HostPortal:\n      return childrenToTree(node.child);\n    case ClassComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: node.stateNode,\n        rendered: childrenToTree(node.child),\n      };\n    case FunctionComponent:\n    case SimpleMemoComponent:\n      return {\n        nodeType: 'component',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null,\n        rendered: childrenToTree(node.child),\n      };\n    case Block:\n      return {\n        nodeType: 'block',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null,\n        rendered: childrenToTree(node.child),\n      };\n    case HostComponent: {\n      return {\n        nodeType: 'host',\n        type: node.type,\n        props: {...node.memoizedProps},\n        instance: null, // TODO: use createNodeMock here somehow?\n        rendered: flatten(nodeAndSiblingsArray(node.child).map(toTree)),\n      };\n    }\n    case HostText:\n      return node.stateNode.text;\n    case Fragment:\n    case ContextProvider:\n    case ContextConsumer:\n    case Mode:\n    case Profiler:\n    case ForwardRef:\n    case MemoComponent:\n    case IncompleteClassComponent:\n    case ScopeComponent:\n      return childrenToTree(node.child);\n    default:\n      invariant(\n        false,\n        'toTree() does not yet know how to handle nodes with tag=%s',\n        node.tag,\n      );\n  }\n}\n\nconst validWrapperTypes = new Set([\n  FunctionComponent,\n  ClassComponent,\n  HostComponent,\n  ForwardRef,\n  MemoComponent,\n  SimpleMemoComponent,\n  Block,\n  // Normally skipped, but used when there's more than one root child.\n  HostRoot,\n]);\n\nfunction getChildren(parent: Fiber) {\n  const children = [];\n  const startingNode = parent;\n  let node: Fiber = startingNode;\n  if (node.child === null) {\n    return children;\n  }\n  node.child.return = node;\n  node = node.child;\n  outer: while (true) {\n    let descend = false;\n    if (validWrapperTypes.has(node.tag)) {\n      children.push(wrapFiber(node));\n    } else if (node.tag === HostText) {\n      children.push('' + node.memoizedProps);\n    } else {\n      descend = true;\n    }\n    if (descend && node.child !== null) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    while (node.sibling === null) {\n      if (node.return === startingNode) {\n        break outer;\n      }\n      node = (node.return: any);\n    }\n    (node.sibling: any).return = node.return;\n    node = (node.sibling: any);\n  }\n  return children;\n}\n\nclass ReactTestInstance {\n  _fiber: Fiber;\n\n  _currentFiber(): Fiber {\n    // Throws if this component has been unmounted.\n    const fiber = findCurrentFiberUsingSlowPath(this._fiber);\n    invariant(\n      fiber !== null,\n      \"Can't read from currently-mounting component. This error is likely \" +\n        'caused by a bug in React. Please file an issue.',\n    );\n    return fiber;\n  }\n\n  constructor(fiber: Fiber) {\n    invariant(\n      validWrapperTypes.has(fiber.tag),\n      'Unexpected object passed to ReactTestInstance constructor (tag: %s). ' +\n        'This is probably a bug in React.',\n      fiber.tag,\n    );\n    this._fiber = fiber;\n  }\n\n  get instance() {\n    if (this._fiber.tag === HostComponent) {\n      return getPublicInstance(this._fiber.stateNode);\n    } else {\n      return this._fiber.stateNode;\n    }\n  }\n\n  get type() {\n    return this._fiber.type;\n  }\n\n  get props(): Object {\n    return this._currentFiber().memoizedProps;\n  }\n\n  get parent(): ?ReactTestInstance {\n    let parent = this._fiber.return;\n    while (parent !== null) {\n      if (validWrapperTypes.has(parent.tag)) {\n        if (parent.tag === HostRoot) {\n          // Special case: we only \"materialize\" instances for roots\n          // if they have more than a single child. So we'll check that now.\n          if (getChildren(parent).length < 2) {\n            return null;\n          }\n        }\n        return wrapFiber(parent);\n      }\n      parent = parent.return;\n    }\n    return null;\n  }\n\n  get children(): Array<ReactTestInstance | string> {\n    return getChildren(this._currentFiber());\n  }\n\n  // Custom search functions\n  find(predicate: Predicate): ReactTestInstance {\n    return expectOne(\n      this.findAll(predicate, {deep: false}),\n      `matching custom predicate: ${predicate.toString()}`,\n    );\n  }\n\n  findByType(type: any): ReactTestInstance {\n    return expectOne(\n      this.findAllByType(type, {deep: false}),\n      `with node type: \"${getComponentName(type) || 'Unknown'}\"`,\n    );\n  }\n\n  findByProps(props: Object): ReactTestInstance {\n    return expectOne(\n      this.findAllByProps(props, {deep: false}),\n      `with props: ${JSON.stringify(props)}`,\n    );\n  }\n\n  findAll(\n    predicate: Predicate,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, predicate, options);\n  }\n\n  findAllByType(\n    type: any,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(this, node => node.type === type, options);\n  }\n\n  findAllByProps(\n    props: Object,\n    options: ?FindOptions = null,\n  ): Array<ReactTestInstance> {\n    return findAll(\n      this,\n      node => node.props && propsMatch(node.props, props),\n      options,\n    );\n  }\n}\n\nfunction findAll(\n  root: ReactTestInstance,\n  predicate: Predicate,\n  options: ?FindOptions,\n): Array<ReactTestInstance> {\n  const deep = options ? options.deep : true;\n  const results = [];\n\n  if (predicate(root)) {\n    results.push(root);\n    if (!deep) {\n      return results;\n    }\n  }\n\n  root.children.forEach(child => {\n    if (typeof child === 'string') {\n      return;\n    }\n    results.push(...findAll(child, predicate, options));\n  });\n\n  return results;\n}\n\nfunction expectOne(\n  all: Array<ReactTestInstance>,\n  message: string,\n): ReactTestInstance {\n  if (all.length === 1) {\n    return all[0];\n  }\n\n  const prefix =\n    all.length === 0\n      ? 'No instances found '\n      : `Expected 1 but found ${all.length} instances `;\n\n  throw new Error(prefix + message);\n}\n\nfunction propsMatch(props: Object, filter: Object): boolean {\n  for (const key in filter) {\n    if (props[key] !== filter[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction create(element: React$Element<any>, options: TestRendererOptions) {\n  let createNodeMock = defaultTestOptions.createNodeMock;\n  let isConcurrent = false;\n  if (typeof options === 'object' && options !== null) {\n    if (typeof options.createNodeMock === 'function') {\n      createNodeMock = options.createNodeMock;\n    }\n    if (options.unstable_isConcurrent === true) {\n      isConcurrent = true;\n    }\n  }\n  let container = {\n    children: [],\n    createNodeMock,\n    tag: 'CONTAINER',\n  };\n  let root: FiberRoot | null = createContainer(\n    container,\n    isConcurrent ? ConcurrentRoot : LegacyRoot,\n    false,\n    null,\n  );\n  invariant(root != null, 'something went wrong');\n  updateContainer(element, root, null, null);\n\n  const entry = {\n    _Scheduler: Scheduler,\n\n    root: undefined, // makes flow happy\n    // we define a 'getter' for 'root' below using 'Object.defineProperty'\n    toJSON(): Array<ReactTestRendererNode> | ReactTestRendererNode | null {\n      if (root == null || root.current == null || container == null) {\n        return null;\n      }\n      if (container.children.length === 0) {\n        return null;\n      }\n      if (container.children.length === 1) {\n        return toJSON(container.children[0]);\n      }\n      if (\n        container.children.length === 2 &&\n        container.children[0].isHidden === true &&\n        container.children[1].isHidden === false\n      ) {\n        // Omit timed out children from output entirely, including the fact that we\n        // temporarily wrap fallback and timed out children in an array.\n        return toJSON(container.children[1]);\n      }\n      let renderedChildren = null;\n      if (container.children && container.children.length) {\n        for (let i = 0; i < container.children.length; i++) {\n          const renderedChild = toJSON(container.children[i]);\n          if (renderedChild !== null) {\n            if (renderedChildren === null) {\n              renderedChildren = [renderedChild];\n            } else {\n              renderedChildren.push(renderedChild);\n            }\n          }\n        }\n      }\n      return renderedChildren;\n    },\n    toTree() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return toTree(root.current);\n    },\n    update(newElement: React$Element<any>) {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(newElement, root, null, null);\n    },\n    unmount() {\n      if (root == null || root.current == null) {\n        return;\n      }\n      updateContainer(null, root, null, null);\n      container = null;\n      root = null;\n    },\n    getInstance() {\n      if (root == null || root.current == null) {\n        return null;\n      }\n      return getPublicRootInstance(root);\n    },\n\n    unstable_flushSync<T>(fn: () => T): T {\n      return flushSync(fn);\n    },\n  };\n\n  Object.defineProperty(\n    entry,\n    'root',\n    ({\n      configurable: true,\n      enumerable: true,\n      get: function() {\n        if (root === null) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        }\n        const children = getChildren(root.current);\n        if (children.length === 0) {\n          throw new Error(\"Can't access .root on unmounted test renderer\");\n        } else if (children.length === 1) {\n          // Normally, we skip the root and just give you the child.\n          return children[0];\n        } else {\n          // However, we give you the root if there's more than one root child.\n          // We could make this the behavior for all cases but it would be a breaking change.\n          return wrapFiber(root.current);\n        }\n      },\n    }: Object),\n  );\n\n  return entry;\n}\n\nconst fiberToWrapper = new WeakMap();\nfunction wrapFiber(fiber: Fiber): ReactTestInstance {\n  let wrapper = fiberToWrapper.get(fiber);\n  if (wrapper === undefined && fiber.alternate !== null) {\n    wrapper = fiberToWrapper.get(fiber.alternate);\n  }\n  if (wrapper === undefined) {\n    wrapper = new ReactTestInstance(fiber);\n    fiberToWrapper.set(fiber, wrapper);\n  }\n  return wrapper;\n}\n\n// Enable ReactTestRenderer to be used to test DevTools integration.\ninjectIntoDevTools({\n  findFiberByHostInstance: (() => {\n    throw new Error('TestRenderer does not support findFiberByHostInstance()');\n  }: any),\n  bundleType: __DEV__ ? 1 : 0,\n  version: ReactVersion,\n  rendererPackageName: 'react-test-renderer',\n});\n\nlet actingUpdatesScopeDepth = 0;\n\n// This version of `act` is only used by our tests. Unlike the public version\n// of `act`, it's designed to work identically in both production and\n// development. It may have slightly different behavior from the public\n// version, too, since our constraints in our test suite are not the same as\n// those of developers using React — we're testing React itself, as opposed to\n// building an app with React.\n// TODO: Migrate our tests to use ReactNoop. Although we would need to figure\n// out a solution for Relay, which has some Concurrent Mode tests.\nfunction unstable_concurrentAct(scope: () => Thenable<mixed> | void) {\n  if (Scheduler.unstable_flushAllWithoutAsserting === undefined) {\n    throw Error(\n      'This version of `act` requires a special mock build of Scheduler.',\n    );\n  }\n  if (setTimeout._isMockFunction !== true) {\n    throw Error(\n      \"This version of `act` requires Jest's timer mocks \" +\n        '(i.e. jest.useFakeTimers).',\n    );\n  }\n\n  const previousActingUpdatesScopeDepth = actingUpdatesScopeDepth;\n  const previousIsSomeRendererActing = IsSomeRendererActing.current;\n  const previousIsThisRendererActing = IsThisRendererActing.current;\n  IsSomeRendererActing.current = true;\n  IsThisRendererActing.current = true;\n  actingUpdatesScopeDepth++;\n\n  const unwind = () => {\n    actingUpdatesScopeDepth--;\n    IsSomeRendererActing.current = previousIsSomeRendererActing;\n    IsThisRendererActing.current = previousIsThisRendererActing;\n    if (__DEV__) {\n      if (actingUpdatesScopeDepth > previousActingUpdatesScopeDepth) {\n        // if it's _less than_ previousActingUpdatesScopeDepth, then we can\n        // assume the 'other' one has warned\n        console.error(\n          'You seem to have overlapping act() calls, this is not supported. ' +\n            'Be sure to await previous act() calls before making a new one. ',\n        );\n      }\n    }\n  };\n\n  // TODO: This would be way simpler if 1) we required a promise to be\n  // returned and 2) we could use async/await. Since it's only our used in\n  // our test suite, we should be able to.\n  try {\n    const thenable = batchedUpdates(scope);\n    if (\n      typeof thenable === 'object' &&\n      thenable !== null &&\n      typeof thenable.then === 'function'\n    ) {\n      return {\n        then(resolve: () => void, reject: (error: mixed) => void) {\n          thenable.then(\n            () => {\n              flushActWork(\n                () => {\n                  unwind();\n                  resolve();\n                },\n                error => {\n                  unwind();\n                  reject(error);\n                },\n              );\n            },\n            error => {\n              unwind();\n              reject(error);\n            },\n          );\n        },\n      };\n    } else {\n      try {\n        // TODO: Let's not support non-async scopes at all in our tests. Need to\n        // migrate existing tests.\n        let didFlushWork;\n        do {\n          didFlushWork = Scheduler.unstable_flushAllWithoutAsserting();\n        } while (didFlushWork);\n      } finally {\n        unwind();\n      }\n    }\n  } catch (error) {\n    unwind();\n    throw error;\n  }\n}\n\nfunction flushActWork(resolve, reject) {\n  // Flush suspended fallbacks\n  // $FlowFixMe: Flow doesn't know about global Jest object\n  jest.runOnlyPendingTimers();\n  enqueueTask(() => {\n    try {\n      const didFlushWork = Scheduler.unstable_flushAllWithoutAsserting();\n      if (didFlushWork) {\n        flushActWork(resolve, reject);\n      } else {\n        resolve();\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\nexport {\n  Scheduler as _Scheduler,\n  create,\n  /* eslint-disable-next-line camelcase */\n  batchedUpdates as unstable_batchedUpdates,\n  act,\n  unstable_concurrentAct,\n};\n"],"names":["formatProdErrorMessage","code","url","i","arguments","length","encodeURIComponent","ReactInternals","React","assign","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","FundamentalComponent","ScopeComponent","Block","OffscreenComponent","LegacyHiddenComponent","get","key","_reactInternals","set","value","ReactSharedInternals","REACT_ELEMENT_TYPE","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_BLOCK_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","Symbol","for","symbolFor","REACT_SERVER_BLOCK_TYPE","REACT_OPAQUE_ID_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName","outerType","innerType","wrapperName","functionName","displayName","name","getContextName","type","getComponentName","$$typeof","context","provider","_context","render","_render","lazyComponent","payload","_payload","init","_init","x","NoFlags","PerformedWork","Placement","Update","PlacementAndUpdate","Deletion","ContentReset","Callback","DidCapture","Ref","Snapshot","Passive","Hydrating","HydratingAndUpdate","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","enableProfilerTimer","__PROFILE__","enableProfilerCommitHooks","enableFundamentalAPI","enableNewReconciler","ReactCurrentOwner","getNearestMountedFiber","fiber","node","nearestMounted","alternate","nextNode","flags","return","tag","isFiberMounted","isMounted","component","getInstance","assertIsMounted","findCurrentFiberUsingSlowPath","a","b","parentA","parentB","nextParent","child","sibling","didFindChild","stateNode","current","findCurrentHostFiber","parent","currentParent","doesFiberContain","parentFiber","childFiber","parentFiberAlternate","shim","isSuspenseInstancePending","isSuspenseInstanceFallback","hydrateTextInstance","NO_CONTEXT","UPDATE_SIGNAL","nodeToInstanceMap","WeakMap","getPublicInstance","inst","createNodeMock","rootContainerInstance","mockNode","props","appendChild","parentInstance","index","children","indexOf","splice","push","insertBefore","beforeChild","beforeIndex","removeChild","clearContainer","container","getRootHostContext","getChildHostContext","parentHostContext","prepareForCommit","containerInfo","resetAfterCommit","createInstance","hostContext","internalInstanceHandle","isHidden","appendInitialChild","prepareUpdate","testElement","oldProps","newProps","shouldSetTextContent","createTextInstance","text","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","commitUpdate","instance","updatePayload","commitTextUpdate","textInstance","oldText","newText","resetTextContent","appendChildToContainer","insertInContainerBefore","removeChildFromContainer","hideInstance","hideTextInstance","unhideInstance","unhideTextInstance","clientId","makeClientId","toString","preparePortalMount","portalInstance","ReactCurrentDispatcher","prefix","describeBuiltInComponentFrame","source","ownerFn","undefined","Error","match","stack","trim","reentry","describeNativeComponentFrame","fn","construct","control","previousPrepareStackTrace","prepareStackTrace","Fake","Object","defineProperty","prototype","Reflect","call","sample","sampleLines","split","controlLines","s","c","frame","replace","syntheticFrame","describeClassComponentFrame","ctor","describeFunctionComponentFrame","ReactDebugCurrentFrame","valueStack","createCursor","defaultValue","pop","cursor","emptyContextObject","contextStackCursor","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","Component","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","BlockingRoot","ConcurrentRoot","rendererID","injectedHook","injectInternals","internals","__REACT_DEVTOOLS_GLOBAL_HOOK__","hook","isDisabled","supportsFiber","inject","err","onCommitRoot","root","priorityLevel","onCommitFiberRoot","didError","onCommitUnmount","onCommitFiberUnmount","SchedulerTracing","__interactionsRef","__subscriberRef","unstable_clear","unstable_getCurrent","unstable_getThreadID","unstable_subscribe","unstable_trace","unstable_unsubscribe","unstable_wrap","Scheduler_now","Scheduler","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","NoPriority","initialTimeMs","SyncLanePriority","SyncBatchedLanePriority","InputDiscreteHydrationLanePriority","InputDiscreteLanePriority","InputContinuousHydrationLanePriority","InputContinuousLanePriority","DefaultHydrationLanePriority","DefaultLanePriority","TransitionHydrationPriority","TransitionPriority","RetryLanePriority","SelectiveHydrationLanePriority","IdleHydrationLanePriority","IdleLanePriority","OffscreenLanePriority","NoLanePriority","TotalLanes","NoLanes","NoLane","SyncLane","SyncBatchedLane","InputDiscreteHydrationLane","InputDiscreteLanes","InputContinuousHydrationLane","InputContinuousLanes","DefaultHydrationLane","DefaultLanes","TransitionHydrationLane","TransitionLanes","RetryLanes","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLanes","OffscreenLane","NoTimestamp","return_highestLanePriority","getHighestPriorityLanes","lanes","inputDiscreteLanes","inputContinuousLanes","defaultLanes","transitionLanes","retryLanes","idleLanes","schedulerPriorityToLanePriority","schedulerPriorityLevel","ImmediateSchedulerPriority","UserBlockingSchedulerPriority","NormalSchedulerPriority","LowSchedulerPriority","IdleSchedulerPriority","lanePriorityToSchedulerPriority","lanePriority","NoSchedulerPriority","getNextLanes","wipLanes","pendingLanes","nextLanes","nextLanePriority","expiredLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","getEqualOrHigherPriorityLanes","wipLanePriority","entangledLanes","entanglements","pickArbitraryLaneIndex","lane","getMostRecentEventTime","eventTimes","mostRecentEventTime","eventTime","computeExpirationTime","currentTime","priority","markStarvedLanesAsExpired","expirationTimes","expirationTime","getLanesToRetrySynchronouslyOnError","everythingButOffscreen","returnNextLanesPriority","includesNonIdleWork","includesOnlyRetries","includesOnlyTransitions","findUpdateLane","pickArbitraryLane","findTransitionLane","findRetryLane","getHighestPriorityLane","getLowestPriorityLane","clz32","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","laneToLanes","createLaneMap","initial","Array","fill","markRootUpdated","updateLane","higherPriorityLanes","markRootSuspended","markRootPinged","hasDiscreteLanes","markRootMutableRead","mutableReadLanes","markRootFinished","remainingLanes","noLongerPendingLanes","markRootEntangled","Math","clz32Fallback","log","LN2","Scheduler_runWithPriority","Scheduler_scheduleCallback","Scheduler_cancelCallback","Scheduler_shouldYield","Scheduler_requestPaint","Scheduler_getCurrentPriorityLevel","Scheduler_ImmediatePriority","Scheduler_UserBlockingPriority","Scheduler_NormalPriority","Scheduler_LowPriority","Scheduler_IdlePriority","fakeCallbackNode","shouldYield","requestPaint","syncQueue","immediateQueueCallbackNode","isFlushingSyncQueue","now","getCurrentPriorityLevel","reactPriorityToSchedulerPriority","reactPriorityLevel","runWithPriority","scheduleCallback","callback","options","scheduleSyncCallback","flushSyncCallbackQueueImpl","cancelCallback","callbackNode","flushSyncCallbackQueue","isSync","queue","error","slice","NoMode","StrictMode","BlockingMode","ConcurrentMode","ProfileMode","DebugTracingMode","ReactCurrentBatchConfig","NoTransition","requestCurrentTransition","transition","is","y","objectIs","hasOwnProperty","shallowEqual","objA","objB","keysA","keys","keysB","describeFiber","getStackByFiberInDevAndProd","info","message","resetCurrentFiber","resolveDefaultProps","baseProps","defaultProps","propName","MAX_SIGNED_31_BIT_INT","valueCursor","currentlyRenderingFiber","lastContextDependency","lastContextWithAllBitsObserved","resetContextDependencies","pushProvider","providerFiber","nextValue","_currentValue2","popProvider","currentValue","calculateChangedBits","newValue","oldValue","changedBits","_calculateChangedBits","scheduleWorkOnParentPath","renderLanes","childLanes","propagateContextChange","nextFiber","list","dependencies","dependency","firstContext","observedBits","update","createUpdate","ForceUpdate","enqueueUpdate","next","prepareToReadContext","markWorkInProgressReceivedUpdate","readContext","resolvedObservedBits","contextItem","responders","isPrimaryRenderer","UpdateState","ReplaceState","CaptureUpdate","hasForceUpdate","initializeUpdateQueue","baseState","memoizedState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","updateQueue","cloneUpdateQueue","currentQueue","clone","sharedQueue","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","nextProps","nextState","partialState","processUpdateQueue","pendingQueue","lastPendingUpdate","firstPendingUpdate","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","updateEventTime","markSkippedUpdateLanes","callCallback","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","commitUpdateQueue","finishedWork","finishedQueue","effect","emptyRefsObject","refs","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","requestEventTime","requestUpdateLane","scheduleUpdateOnFiber","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","nextContext","shouldComponentUpdate","shouldUpdate","isPureReactComponent","adoptClassInstance","updater","setInstance","constructClassInstance","isLegacyContextConsumer","contextType","state","callComponentWillMount","componentWillMount","UNSAFE_componentWillMount","callComponentWillReceiveProps","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","mountClassInstance","getSnapshotBeforeUpdate","componentDidMount","resumeMountClassInstance","memoizedProps","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","elementType","unresolvedNewProps","pendingProps","nextUnmaskedContext","componentDidUpdate","UNSAFE_componentWillUpdate","componentWillUpdate","isArray","coerceRef","returnFiber","element","mixedRef","ref","_owner","owner","ownerFiber","stringRef","_stringRef","throwOnInvalidObjectType","newChild","join","ChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","last","lastEffect","nextEffect","firstEffect","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","Map","existingChild","useFiber","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","mode","existing","updateElement","__DEV__","createFiberFromElement","updatePortal","portal","implementation","createFiberFromPortal","updateFragment","fragment","createFiberFromFragment","createChild","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","delete","forEach","reconcileChildrenIterator","newChildrenIterable","iteratorFn","step","done","reconcileSingleTextNode","reconcileSingleElement","reconcileSinglePortal","reconcileChildFibers","isUnkeyedTopLevelFragment","isObject","mountChildFibers","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","popHostContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","InvisibleParentSuspenseContext","ForceSuspenseFallback","suspenseStackCursor","hasSuspenseContext","flag","setDefaultShallowSuspenseContext","setShallowSuspenseContext","shallowContext","addSubtreeSuspenseContext","subtreeContext","pushSuspenseContext","newContext","popSuspenseContext","shouldCaptureSuspense","hasInvisibleParent","dehydrated","fallback","unstable_avoidThisFallback","findFirstSuspended","row","revealOrder","didSuspend","HasEffect","Layout","isHydrating","enterHydrationState","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","popHydrationState","getIsHydrating","workInProgressSources","markSourceAsDirty","mutableSource","resetWorkInProgressVersions","_workInProgressVersionSecondary","getWorkInProgressVersion","setWorkInProgressVersion","version","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","RE_RENDER_LIMIT","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","HooksDispatcherOnMount","HooksDispatcherOnUpdate","numberOfReRenders","HooksDispatcherOnRerender","ContextOnlyDispatcher","didRenderTooFewHooks","bailoutHooks","PassiveEffect","UpdateEffect","resetHooksAfterThrow","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","newHook","createFunctionComponentUpdateQueue","basicStateReducer","action","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchAction","bind","updateReducer","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","eagerReducer","eagerState","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","readFromUnsubcribedMutableSource","getSnapshot","getVersion","_getVersion","_source","isSafeToReadFromSource","currentRenderVersion","snapshot","useMutableSource","subscribe","getWorkInProgressRoot","dispatcher","useState","currentSnapshot","setSnapshot","stateHook","prevGetSnapshot","prevSource","prevSubscribe","useEffect","maybeNewVersion","maybeNewSnapshot","handleChange","latestGetSnapshot","latestSetSnapshot","unsubscribe","newQueue","mountMutableSource","updateMutableSource","mountState","updateState","rerenderState","pushEffect","create","destroy","deps","componentUpdateQueue","mountRef","initialValue","updateRef","mountEffectImpl","fiberFlags","hookFlags","HookHasEffect","updateEffectImpl","prevEffect","mountEffect","HookPassive","updateEffect","mountLayoutEffect","HookLayout","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","mountImperativeHandle","effectDeps","concat","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","prevValue","setValue","prevTransition","updateDeferredValue","rerenderDeferredValue","startTransition","setPending","mountTransition","isPending","start","updateTransition","startRef","rerenderTransition","mountOpaqueIdentifier","makeId","id","updateOpaqueIdentifier","rerenderOpaqueIdentifier","currentState","useCallback","useContext","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useDebugValue","useDeferredValue","useTransition","useOpaqueIdentifier","unstable_isNewReconciler","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","recordPassiveEffectDuration","startPassiveEffectTimer","didReceiveUpdate","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","bailoutOnAlreadyFinishedWork","updateMemoComponent","updateLanes","isSimpleFunctionComponent","compare","resolvedType","updateSimpleMemoComponent","createFiberFromTypeAndProps","prevProps","updateFunctionComponent","updateOffscreenComponent","baseLanes","pushRenderLanes","nextBaseLanes","prevBaseLanes","subtreeRenderLanes","updateLegacyHiddenComponent","updateMode","updateProfiler","markRef","updateClassComponent","hasContext","isLegacyContextProvider","pushLegacyContextProvider","nextUnitOfWork","finishClassComponent","didCaptureError","getDerivedStateFromError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","resetHydrationState","hydrate","updateHostComponent","updateHostText","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","hint","mountIncompleteClassComponent","mountIndeterminateComponent","SUSPENDED_MARKER","retryLane","mountSuspenseOffscreenState","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseContext","suspenseState","getRemainingWorkInPrimaryTree","updateSuspenseComponent","showFallback","nextPrimaryChildren","nextFallbackChildren","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","unstable_expectedLoadTime","mountSuspensePrimaryChildren","fallbackChildFragment","updateSuspenseFallbackChildren","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","createFiberFromOffscreen","fallbackChildren","progressedPrimaryFragment","createWorkInProgressOffscreenFiber","offscreenProps","currentPrimaryChildFragment","currentFallbackChildFragment","progressedLastEffect","scheduleWorkOnFiber","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","initSuspenseListRenderState","isBackwards","tail","tailMode","lastEffectBeforeRendering","renderState","rendering","renderingStartTime","updateSuspenseListComponent","validateRevealOrder","shouldForceFallback","didSuspendBefore","nextRow","updatePortalComponent","updateContextProvider","providerType","hasLegacyContextChanged","updateContextConsumer","unstable_observedBits","beginWork","primaryChildLanes","hasChildWork","unresolvedProps","markUpdate","appendAllChildren","updateHostContainer","needsVisibilityToggle","currentHostContext","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","completeWork","popLegacyContext","popTopLevelLegacyContextObject","resetMutableSourceWorkInProgressVersions","fiberRoot","wasHydrated","nextDidTimeout","prevDidTimeout","hasInvisibleChildContext","renderDidSuspend","renderDidSuspendDelayIfPossible","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","newThennables","getRenderTargetTime","previousSibling","popRenderLanes","prevIsHidden","nextIsHidden","unwindWork","unwindInterruptedWork","interruptedWork","createCapturedValue","showErrorDialog","boundary","errorInfo","logCapturedError","logError","componentStack","_suppressLogging","console","componentName","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","e","PossiblyWeakMap","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","componentDidCatch","markLegacyErrorBoundaryAsFailed","attachPingListener","wakeable","pingCache","threadIDs","Set","has","add","ping","pingSuspendedRoot","then","throwException","sourceFiber","rootRenderLanes","currentSource","hasInvisibleParentBoundary","wakeables","currentSourceFiber","renderDidError","isAlreadyFailedLegacyErrorBoundary","PossiblyWeakSet","WeakSet","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","unmountError","captureCommitPhaseError","safelyDetachRef","refError","safelyCallDestroy","commitBeforeMutationLifeCycles","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","commitHookEffectListMount","schedulePassiveEffects","NoHookEffect","enqueuePendingPassiveHookEffectUnmount","enqueuePendingPassiveHookEffectMount","commitLifeCycles","finishedRoot","committedLanes","commitMount","commitSuspenseHydrationCallbacks","hideOrUnhideAllChildren","commitAttachRef","instanceToUse","commitDetachRef","currentRef","commitUnmount","renderPriorityLevel","unmountHostComponents","commitNestedUnmounts","detachFiberMutation","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","isContainer","parentStateNode","before","insertOrAppendPlacementNodeIntoContainer","insertOrAppendPlacementNode","isHost","currentParentIsValid","currentParentIsContainer","findParent","commitDeletion","commitWork","commitSuspenseComponent","attachSuspenseRetryListeners","markCommitTimeOfFallback","primaryChildParent","retryCache","retry","resolveRetryWakeable","isSuspenseBoundaryBeingHidden","commitResetTextContent","enqueueTaskImpl","enqueueTask","task","requireString","random","nodeRequire","module","setImmediate","_err","channel","MessageChannel","port1","onmessage","port2","postMessage","ceil","IsSomeRendererActing","NoContext","BatchedContext","DiscreteEventContext","LegacyUnbatchedContext","RenderContext","CommitContext","RetryAfterError","RootIncomplete","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","executionContext","workInProgressRoot","workInProgressRootRenderLanes","subtreeRenderLanesCursor","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootIncludedLanes","workInProgressRootSkippedLanes","workInProgressRootUpdatedLanes","workInProgressRootPingedLanes","mostRecentlyUpdatedRoot","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsRenderPriority","pendingPassiveHookEffectsMount","pendingPassiveHookEffectsUnmount","rootsWithPendingDiscreteUpdates","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","currentEventTime","currentEventWipLanes","currentEventPendingLanes","focusedInstanceHandle","shouldFireAfterActiveInstanceBlur","isTransition","schedulerPriority","schedulerLanePriority","requestRetryLane","checkForNestedUpdates","warnAboutRenderPhaseUpdatesInDEV","markUpdateLaneFromFiberToRoot","warnAboutUpdateOnUnmountedFiberInDEV","performSyncWorkOnRoot","ensureRootIsScheduled","schedulePendingInteractions","existingCallbackNode","newCallbackPriority","callbackPriority","existingCallbackPriority","newCallbackNode","performConcurrentWorkOnRoot","originalCallbackNode","didFlushPassiveEffects","flushPassiveEffects","exitStatus","renderRootConcurrent","prepareFreshStack","renderRootSync","fatalError","finishedLanes","finishConcurrentRender","commitRoot","shouldForceFlushFallbacksInDEV","msUntilTimeout","timeoutHandle","eventTimeMs","timeElapsedMs","jnd","markRootSuspended_dontCallThisOneDirectly","batchedUpdates","prevExecutionContext","flushSync","pushToStack","popFromStack","handleError","thrownValue","erroredWork","resetCurrentDebugFiberInDEV","completeUnitOfWork","yetAnotherThrownValue","pushDispatcher","prevDispatcher","popDispatcher","startWorkOnPendingInteractions","workLoopSync","performUnitOfWork","workLoopConcurrent","unitOfWork","setCurrentDebugFiberInDEV","completedWork","resetChildLanes","siblingFiber","newChildLanes","commitRootImpl","commitBeforeMutationEffects","commitMutationEffects","commitLayoutEffects","pendingPassiveEffectsLanes","nextNextEffect","detachFiberAfterEffects","onCommitRootDevTools","beforeActiveInstanceBlur","commitBeforeMutationEffectOnFiber","primaryFlags","commitLayoutEffectOnFiber","flushPassiveEffectsImpl","unmountEffects","mountEffects","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","errorToIgnore","retryTimedOutBoundary","boundaryFiber","timeElapsed","originalBeginWork","flushMockScheduler","isSchedulerMocked","flushActWork","isFlushingAct","didFlushWork","flushWorkAndMicroTasks","onDone","actingUpdatesScopeDepth","didWarnAboutUsingActInProd","act","previousIsSomeRendererActing","IsThisRendererActing","result","resolve","reject","called","FiberNode","createFiber","shouldConstruct","isReactComponent","currentDependencies","createHostRootFiber","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","createFiberFromLegacyHidden","elements","content","pendingChildren","FiberRootNode","createFiberRoot","hydrationCallbacks","uninitializedFiber","getContextForSubtree","parentComponent","createContainer","updateContainer","getPublicRootInstance","containerFiber","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setSuspenseHandler","findHostInstanceByFiber","hostFiber","emptyFindFiberByHostInstance","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","currentDispatcherRef","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","defaultTestOptions","toJSON","renderedChildren","renderedChild","json","childrenToTree","nodeAndSiblingsArray","toTree","flatten","map","nodeWithSibling","array","arr","n","el","nodeType","rendered","validWrapperTypes","getChildren","startingNode","outer","descend","wrapFiber","ReactTestInstance","_currentFiber","_fiber","find","predicate","expectOne","findAll","deep","findByType","findAllByType","findByProps","findAllByProps","JSON","stringify","propsMatch","results","all","filter","isConcurrent","unstable_isConcurrent","entry","_Scheduler","newElement","unmount","unstable_flushSync","configurable","enumerable","fiberToWrapper","wrapper","ReactVersion","unstable_concurrentAct","scope","_isMockFunction","unwind","thenable","jest","runOnlyPendingTimers"],"mappings":"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"}