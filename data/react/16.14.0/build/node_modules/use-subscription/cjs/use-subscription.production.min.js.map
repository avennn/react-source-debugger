{"version":3,"file":"use-subscription.production.min.js","sources":["../../../../packages/use-subscription/src/useSubscription.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {useDebugValue, useEffect, useState} from 'react';\n\n// Hook used for safely managing subscriptions in concurrent mode.\n//\n// In order to avoid removing and re-adding subscriptions each time this hook is called,\n// the parameters passed to this hook should be memoized in some wayâ€“\n// either by wrapping the entire params object with useMemo()\n// or by wrapping the individual callbacks with useCallback().\nexport function useSubscription<Value>({\n  // (Synchronously) returns the current value of our subscription.\n  getCurrentValue,\n\n  // This function is passed an event handler to attach to the subscription.\n  // It should return an unsubscribe function that removes the handler.\n  subscribe,\n}: {|\n  getCurrentValue: () => Value,\n  subscribe: (callback: Function) => () => void,\n|}): Value {\n  // Read the current value from our subscription.\n  // When this value changes, we'll schedule an update with React.\n  // It's important to also store the hook params so that we can check for staleness.\n  // (See the comment in checkForUpdates() below for more info.)\n  const [state, setState] = useState(() => ({\n    getCurrentValue,\n    subscribe,\n    value: getCurrentValue(),\n  }));\n\n  let valueToReturn = state.value;\n\n  // If parameters have changed since our last render, schedule an update with its current value.\n  if (\n    state.getCurrentValue !== getCurrentValue ||\n    state.subscribe !== subscribe\n  ) {\n    // If the subscription has been updated, we'll schedule another update with React.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    valueToReturn = getCurrentValue();\n\n    setState({\n      getCurrentValue,\n      subscribe,\n      value: valueToReturn,\n    });\n  }\n\n  // Display the current value for this hook in React DevTools.\n  useDebugValue(valueToReturn);\n\n  // It is important not to subscribe while rendering because this can lead to memory leaks.\n  // (Learn more at reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects)\n  // Instead, we wait until the commit phase to attach our handler.\n  //\n  // We intentionally use a passive effect (useEffect) rather than a synchronous one (useLayoutEffect)\n  // so that we don't stretch the commit phase.\n  // This also has an added benefit when multiple components are subscribed to the same source:\n  // It allows each of the event handlers to safely schedule work without potentially removing an another handler.\n  // (Learn more at https://codesandbox.io/s/k0yvr5970o)\n  useEffect(() => {\n    let didUnsubscribe = false;\n\n    const checkForUpdates = () => {\n      // It's possible that this callback will be invoked even after being unsubscribed,\n      // if it's removed as a result of a subscription event/update.\n      // In this case, React will log a DEV warning about an update from an unmounted component.\n      // We can avoid triggering that warning with this check.\n      if (didUnsubscribe) {\n        return;\n      }\n\n      // We use a state updater function to avoid scheduling work for a stale source.\n      // However it's important to eagerly read the currently value,\n      // so that all scheduled work shares the same value (in the event of multiple subscriptions).\n      // This avoids visual \"tearing\" when a mutation happens during a (concurrent) render.\n      const value = getCurrentValue();\n\n      setState(prevState => {\n        // Ignore values from stale sources!\n        // Since we subscribe an unsubscribe in a passive effect,\n        // it's possible that this callback will be invoked for a stale (previous) subscription.\n        // This check avoids scheduling an update for that stale subscription.\n        if (\n          prevState.getCurrentValue !== getCurrentValue ||\n          prevState.subscribe !== subscribe\n        ) {\n          return prevState;\n        }\n\n        // Some subscriptions will auto-invoke the handler, even if the value hasn't changed.\n        // If the value hasn't changed, no update is needed.\n        // Return state as-is so React can bail out and avoid an unnecessary render.\n        if (prevState.value === value) {\n          return prevState;\n        }\n\n        return {...prevState, value};\n      });\n    };\n    const unsubscribe = subscribe(checkForUpdates);\n\n    // Because we're subscribing in a passive effect,\n    // it's possible that an update has occurred between render and our effect handler.\n    // Check for this and schedule an update if work has occurred.\n    checkForUpdates();\n\n    return () => {\n      didUnsubscribe = true;\n      unsubscribe();\n    };\n  }, [getCurrentValue, subscribe]);\n\n  // Return the current value for our caller to use while rendering.\n  return valueToReturn;\n}\n"],"names":["useSubscription","getCurrentValue","subscribe","useState","value","state","setState","valueToReturn","useDebugValue","useEffect","didUnsubscribe","checkForUpdates","prevState","unsubscribe"],"mappings":";;;;;AAYA;AACA;AACA;AACA;AACA;;AACO,SAASA,eAAT,OAUI;AAAA,MARTC,eAQS,QARTA,eAQS;AAAA,MAJTC,SAIS,QAJTA,SAIS;;AACT;AACA;AACA;AACA;AAJS,oBAKiBC,cAAQ,CAAC,OAAO;AACxCF,IAAAA,eADwC;AAExCC,IAAAA,SAFwC;AAGxCE,IAAAA,KAAK,EAAEH,eAAe;AAHkB,GAAP,CAAD,CALzB;AAAA,QAKFI,KALE;AAAA,QAKKC,QALL;;AAWT,MAAIC,aAAa,GAAGF,KAAK,CAACD,KAA1B,CAXS;;AAcT,MACEC,KAAK,CAACJ,eAAN,KAA0BA,eAA1B,IACAI,KAAK,CAACH,SAAN,KAAoBA,SAFtB,EAGE;AACA;AACA;AACA;AACAK,IAAAA,aAAa,GAAGN,eAAe,EAA/B;AAEAK,IAAAA,QAAQ,CAAC;AACPL,MAAAA,eADO;AAEPC,MAAAA,SAFO;AAGPE,MAAAA,KAAK,EAAEG;AAHA,KAAD,CAAR;AAKD,GA5BQ;;;AA+BTC,EAAAA,mBAAa,CAACD,aAAD,CAAb,CA/BS;AAkCT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAE,EAAAA,eAAS,CAAC,MAAM;AACd,QAAIC,cAAc,GAAG,KAArB;;AAEA,UAAMC,eAAe,GAAG,MAAM;AAC5B;AACA;AACA;AACA;AACA,UAAID,cAAJ,EAAoB;AAClB;AACD,OAP2B;AAU5B;AACA;AACA;;;AACA,YAAMN,KAAK,GAAGH,eAAe,EAA7B;AAEAK,MAAAA,QAAQ,CAACM,SAAS,IAAI;AACpB;AACA;AACA;AACA;AACA,YACEA,SAAS,CAACX,eAAV,KAA8BA,eAA9B,IACAW,SAAS,CAACV,SAAV,KAAwBA,SAF1B,EAGE;AACA,iBAAOU,SAAP;AACD,SAVmB;AAapB;AACA;;;AACA,YAAIA,SAAS,CAACR,KAAV,KAAoBA,KAAxB,EAA+B;AAC7B,iBAAOQ,SAAP;AACD;;AAED,2BAAWA,SAAX;AAAsBR,UAAAA;AAAtB;AACD,OApBO,CAAR;AAqBD,KApCD;;AAqCA,UAAMS,WAAW,GAAGX,SAAS,CAACS,eAAD,CAA7B,CAxCc;AA2Cd;AACA;;AACAA,IAAAA,eAAe;AAEf,WAAO,MAAM;AACXD,MAAAA,cAAc,GAAG,IAAjB;AACAG,MAAAA,WAAW;AACZ,KAHD;AAID,GAnDQ,EAmDN,CAACZ,eAAD,EAAkBC,SAAlB,CAnDM,CAAT,CA1CS;;AAgGT,SAAOK,aAAP;AACD;;;;"}