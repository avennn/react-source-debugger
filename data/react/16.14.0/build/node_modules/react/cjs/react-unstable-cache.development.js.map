{"version":3,"file":"react-unstable-cache.development.js","sources":["../../../../packages/react/src/cache/ReactCache.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n * @flow\n */\n\nimport type {ReactContext} from 'shared/ReactTypes';\n\nimport {createContext} from 'react';\nimport invariant from 'shared/invariant';\n\ntype Cache = {|\n  resources: Map<any, any>,\n|};\n\n// TODO: should there be a default cache?\nconst CacheContext: ReactContext<null | Cache> = createContext(null);\n\nfunction CacheImpl() {\n  this.resources = new Map();\n  // TODO: cancellation token.\n}\n\nfunction createCache(): Cache {\n  // $FlowFixMe\n  return new CacheImpl();\n}\n\nfunction readCache(): Cache {\n  // TODO: this doesn't subscribe.\n  // But we really want load context anyway.\n  const value = CacheContext._currentValue;\n  if (value instanceof CacheImpl) {\n    return value;\n  }\n  invariant(false, 'Could not read the cache.');\n}\n\nconst CacheProvider = CacheContext.Provider;\n\nexport {createCache, readCache, CacheProvider};\n"],"names":["CacheContext","createContext","CacheImpl","resources","Map","createCache","readCache","value","_currentValue","CacheProvider","Provider"],"mappings":";;;;AAiBA;AACA,IAAMA,YAAwC,GAAGC,mBAAa,CAAC,IAAD,CAA9D;;AAEA,SAASC,SAAT,GAAqB;AACnB,OAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB,CADmB;AAGpB;;AAED,SAASC,WAAT,GAA8B;AAC5B;AACA,SAAO,IAAIH,SAAJ,EAAP;AACD;;AAED,SAASI,SAAT,GAA4B;AAC1B;AACA;AACA,MAAMC,KAAK,GAAGP,YAAY,CAACQ,aAA3B;;AACA,MAAID,KAAK,YAAYL,SAArB,EAAgC;AAC9B,WAAOK,KAAP;AACD;;AANyB;AAAA;AAAA;AAAA;AAAA;AAQ3B;;IAEKE,aAAa,GAAGT,YAAY,CAACU;;;;;;"}